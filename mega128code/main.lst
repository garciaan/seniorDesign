
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000011ec  00001280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800112  00800112  00001292  2**0
                  ALLOC
  3 .stab         00001920  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013d7  00000000  00000000  00002bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003f8b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003f9c  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00003fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00004758  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00004e8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__ctors_end>
       4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      24:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      28:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      34:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      48:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      4c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      54:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      58:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      5c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      60:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      64:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_25>
      68:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      6c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      70:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      74:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      78:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      7c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      80:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      84:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      88:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	00 40       	sbci	r16, 0x00	; 0
      8e:	7a 10       	cpse	r7, r10
      90:	f3 5a       	subi	r31, 0xA3	; 163
      92:	00 a0       	ldd	r0, Z+32	; 0x20
      94:	72 4e       	sbci	r23, 0xE2	; 226
      96:	18 09       	sbc	r17, r8
      98:	00 10       	cpse	r0, r0
      9a:	a5 d4       	rcall	.+2378   	; 0x9e6 <__divsf3_pse+0x4c>
      9c:	e8 00       	.word	0x00e8	; ????
      9e:	00 e8       	ldi	r16, 0x80	; 128
      a0:	76 48       	sbci	r23, 0x86	; 134
      a2:	17 00       	.word	0x0017	; ????
      a4:	00 e4       	ldi	r16, 0x40	; 64
      a6:	0b 54       	subi	r16, 0x4B	; 75
      a8:	02 00       	.word	0x0002	; ????
      aa:	00 ca       	rjmp	.-3072   	; 0xfffff4ac <__eeprom_end+0xff7ef4ac>
      ac:	9a 3b       	cpi	r25, 0xBA	; 186
      ae:	00 00       	nop
      b0:	00 e1       	ldi	r16, 0x10	; 16
      b2:	f5 05       	cpc	r31, r5
      b4:	00 00       	nop
      b6:	80 96       	adiw	r24, 0x20	; 32
      b8:	98 00       	.word	0x0098	; ????
      ba:	00 00       	nop
      bc:	40 42       	sbci	r20, 0x20	; 32
      be:	0f 00       	.word	0x000f	; ????
      c0:	00 00       	nop
      c2:	a0 86       	std	Z+8, r10	; 0x08
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	10 27       	eor	r17, r16
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	e8 03       	fmulsu	r22, r16
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	64 00       	.word	0x0064	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	0a 00       	.word	0x000a	; ????
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	01 00       	.word	0x0001	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	2c 76       	andi	r18, 0x6C	; 108
      e8:	d8 88       	ldd	r13, Y+16	; 0x10
      ea:	dc 67       	ori	r29, 0x7C	; 124
      ec:	4f 08       	sbc	r4, r15
      ee:	23 df       	rcall	.-442    	; 0xffffff36 <__eeprom_end+0xff7eff36>
      f0:	c1 df       	rcall	.-126    	; 0x74 <__SREG__+0x35>
      f2:	ae 59       	subi	r26, 0x9E	; 158
      f4:	e1 b1       	in	r30, 0x01	; 1
      f6:	b7 96       	adiw	r30, 0x27	; 39
      f8:	e5 e3       	ldi	r30, 0x35	; 53
      fa:	e4 53       	subi	r30, 0x34	; 52
      fc:	c6 3a       	cpi	r28, 0xA6	; 166
      fe:	e6 51       	subi	r30, 0x16	; 22
     100:	99 76       	andi	r25, 0x69	; 105
     102:	96 e8       	ldi	r25, 0x86	; 134
     104:	e6 c2       	rjmp	.+1484   	; 0x6d2 <main+0xc>
     106:	84 26       	eor	r8, r20
     108:	eb 89       	ldd	r30, Y+19	; 0x13
     10a:	8c 9b       	sbis	0x11, 4	; 17
     10c:	62 ed       	ldi	r22, 0xD2	; 210
     10e:	40 7c       	andi	r20, 0xC0	; 192
     110:	6f fc       	.word	0xfc6f	; ????
     112:	ef bc       	out	0x2f, r14	; 47
     114:	9c 9f       	mul	r25, r28
     116:	40 f2       	brcs	.-112    	; 0xa8 <__trampolines_end+0x1c>
     118:	ba a5       	ldd	r27, Y+42	; 0x2a
     11a:	6f a5       	ldd	r22, Y+47	; 0x2f
     11c:	f4 90       	lpm	r15, Z
     11e:	05 5a       	subi	r16, 0xA5	; 165
     120:	2a f7       	brpl	.-54     	; 0xec <__trampolines_end+0x60>
     122:	5c 93       	st	X, r21
     124:	6b 6c       	ori	r22, 0xCB	; 203
     126:	f9 67       	ori	r31, 0x79	; 121
     128:	6d c1       	rjmp	.+730    	; 0x404 <get_distance+0x8e>
     12a:	1b fc       	.word	0xfc1b	; ????
     12c:	e0 e4       	ldi	r30, 0x40	; 64
     12e:	0d 47       	sbci	r16, 0x7D	; 125
     130:	fe f5       	brtc	.+126    	; 0x1b0 <__do_clear_bss+0x4>
     132:	20 e6       	ldi	r18, 0x60	; 96
     134:	b5 00       	.word	0x00b5	; ????
     136:	d0 ed       	ldi	r29, 0xD0	; 208
     138:	90 2e       	mov	r9, r16
     13a:	03 00       	.word	0x0003	; ????
     13c:	94 35       	cpi	r25, 0x54	; 84
     13e:	77 05       	cpc	r23, r7
     140:	00 80       	ld	r0, Z
     142:	84 1e       	adc	r8, r20
     144:	08 00       	.word	0x0008	; ????
     146:	00 20       	and	r0, r0
     148:	4e 0a       	sbc	r4, r30
     14a:	00 00       	nop
     14c:	00 c8       	rjmp	.-4096   	; 0xfffff14e <__eeprom_end+0xff7ef14e>
     14e:	0c 33       	cpi	r16, 0x3C	; 60
     150:	33 33       	cpi	r19, 0x33	; 51
     152:	33 0f       	add	r19, r19
     154:	98 6e       	ori	r25, 0xE8	; 232
     156:	12 83       	std	Z+2, r17	; 0x02
     158:	11 41       	sbci	r17, 0x11	; 17
     15a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     15c:	21 14       	cp	r2, r1
     15e:	89 3b       	cpi	r24, 0xB9	; 185
     160:	e6 55       	subi	r30, 0x56	; 86
     162:	16 cf       	rjmp	.-468    	; 0xffffff90 <__eeprom_end+0xff7eff90>
     164:	fe e6       	ldi	r31, 0x6E	; 110
     166:	db 18       	sub	r13, r11
     168:	d1 84       	ldd	r13, Z+9	; 0x09
     16a:	4b 38       	cpi	r20, 0x8B	; 139
     16c:	1b f7       	brvc	.-58     	; 0x134 <__trampolines_end+0xa8>
     16e:	7c 1d       	adc	r23, r12
     170:	90 1d       	adc	r25, r0
     172:	a4 bb       	out	0x14, r26	; 20
     174:	e4 24       	eor	r14, r4
     176:	20 32       	cpi	r18, 0x20	; 32
     178:	84 72       	andi	r24, 0x24	; 36
     17a:	5e 22       	and	r5, r30
     17c:	81 00       	.word	0x0081	; ????
     17e:	c9 f1       	breq	.+114    	; 0x1f2 <__vector_25+0x2a>
     180:	24 ec       	ldi	r18, 0xC4	; 196
     182:	a1 e5       	ldi	r26, 0x51	; 81
     184:	3d 27       	eor	r19, r29

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d0 e1       	ldi	r29, 0x10	; 16
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_copy_data>:
     192:	11 e0       	ldi	r17, 0x01	; 1
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	ec ee       	ldi	r30, 0xEC	; 236
     19a:	f1 e1       	ldi	r31, 0x11	; 17
     19c:	00 e0       	ldi	r16, 0x00	; 0
     19e:	0b bf       	out	0x3b, r16	; 59
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x14>
     1a2:	07 90       	elpm	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	a2 31       	cpi	r26, 0x12	; 18
     1a8:	b1 07       	cpc	r27, r17
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0x10>

000001ac <__do_clear_bss>:
     1ac:	21 e0       	ldi	r18, 0x01	; 1
     1ae:	a2 e1       	ldi	r26, 0x12	; 18
     1b0:	b1 e0       	ldi	r27, 0x01	; 1
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
     1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
     1b6:	ac 31       	cpi	r26, 0x1C	; 28
     1b8:	b2 07       	cpc	r27, r18
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
     1bc:	0e 94 63 03 	call	0x6c6	; 0x6c6 <main>
     1c0:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c8 <__vector_25>:

	return 0;
}

//Input capture interrupt
ISR(TIMER3_CAPT_vect){
     1c8:	1f 92       	push	r1
     1ca:	0f 92       	push	r0
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	0f 92       	push	r0
     1d0:	11 24       	eor	r1, r1
     1d2:	2f 93       	push	r18
     1d4:	3f 93       	push	r19
     1d6:	8f 93       	push	r24
     1d8:	9f 93       	push	r25
        high_time = end_time - start_time;
        capture_complete = 1;
    }
}
int is_rising(){
    if (TCCR3B & (1 << ICES3)){
     1da:	80 91 8a 00 	lds	r24, 0x008A
     1de:	86 ff       	sbrs	r24, 6
     1e0:	1b c0       	rjmp	.+54     	; 0x218 <__vector_25+0x50>
}
void set_to_rising(){
    TCCR3B |= (1 << ICES3);
}
void set_to_falling(){
    TCCR3B &= ~(1 << ICES3);
     1e2:	80 91 8a 00 	lds	r24, 0x008A
     1e6:	8f 7b       	andi	r24, 0xBF	; 191
     1e8:	80 93 8a 00 	sts	0x008A, r24

//Input capture interrupt
ISR(TIMER3_CAPT_vect){
    if (is_rising()){
        set_to_falling();
        start_time = ICR3;
     1ec:	80 91 80 00 	lds	r24, 0x0080
     1f0:	90 91 81 00 	lds	r25, 0x0081
     1f4:	90 93 19 01 	sts	0x0119, r25
     1f8:	80 93 18 01 	sts	0x0118, r24
}
void disable_input_capture(){
    ETIMSK &= ~(1 << TICIE3);
}
void clear_input_flag(){
    ETIFR |= (1 << ICF3);
     1fc:	80 91 7c 00 	lds	r24, 0x007C
     200:	80 62       	ori	r24, 0x20	; 32
     202:	80 93 7c 00 	sts	0x007C, r24
        disable_input_capture();
        set_to_rising();
        high_time = end_time - start_time;
        capture_complete = 1;
    }
}
     206:	9f 91       	pop	r25
     208:	8f 91       	pop	r24
     20a:	3f 91       	pop	r19
     20c:	2f 91       	pop	r18
     20e:	0f 90       	pop	r0
     210:	0f be       	out	0x3f, r0	; 63
     212:	0f 90       	pop	r0
     214:	1f 90       	pop	r1
     216:	18 95       	reti
        set_to_falling();
        start_time = ICR3;
        clear_input_flag();
    }
    else {
        end_time = ICR3;
     218:	80 91 80 00 	lds	r24, 0x0080
     21c:	90 91 81 00 	lds	r25, 0x0081
     220:	90 93 17 01 	sts	0x0117, r25
     224:	80 93 16 01 	sts	0x0116, r24
void enable_input_capture(){
    set_to_rising();
    ETIMSK |= (1 << TICIE3);
}
void disable_input_capture(){
    ETIMSK &= ~(1 << TICIE3);
     228:	80 91 7d 00 	lds	r24, 0x007D
     22c:	8f 7d       	andi	r24, 0xDF	; 223
     22e:	80 93 7d 00 	sts	0x007D, r24
        return 1;
    }
    return 0;
}
void set_to_rising(){
    TCCR3B |= (1 << ICES3);
     232:	80 91 8a 00 	lds	r24, 0x008A
     236:	80 64       	ori	r24, 0x40	; 64
     238:	80 93 8a 00 	sts	0x008A, r24
    }
    else {
        end_time = ICR3;
        disable_input_capture();
        set_to_rising();
        high_time = end_time - start_time;
     23c:	80 91 16 01 	lds	r24, 0x0116
     240:	90 91 17 01 	lds	r25, 0x0117
     244:	20 91 18 01 	lds	r18, 0x0118
     248:	30 91 19 01 	lds	r19, 0x0119
     24c:	82 1b       	sub	r24, r18
     24e:	93 0b       	sbc	r25, r19
     250:	90 93 15 01 	sts	0x0115, r25
     254:	80 93 14 01 	sts	0x0114, r24
        capture_complete = 1;
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	90 93 13 01 	sts	0x0113, r25
     260:	80 93 12 01 	sts	0x0112, r24
     264:	d0 cf       	rjmp	.-96     	; 0x206 <__vector_25+0x3e>

00000266 <is_rising>:
    }
}
int is_rising(){
    if (TCCR3B & (1 << ICES3)){
     266:	80 91 8a 00 	lds	r24, 0x008A
        return 1;
    }
    return 0;
}
     26a:	86 fb       	bst	r24, 6
     26c:	88 27       	eor	r24, r24
     26e:	80 f9       	bld	r24, 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	08 95       	ret

00000274 <set_to_rising>:
void set_to_rising(){
    TCCR3B |= (1 << ICES3);
     274:	ea e8       	ldi	r30, 0x8A	; 138
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	80 64       	ori	r24, 0x40	; 64
     27c:	80 83       	st	Z, r24
     27e:	08 95       	ret

00000280 <set_to_falling>:
}
void set_to_falling(){
    TCCR3B &= ~(1 << ICES3);
     280:	ea e8       	ldi	r30, 0x8A	; 138
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	8f 7b       	andi	r24, 0xBF	; 191
     288:	80 83       	st	Z, r24
     28a:	08 95       	ret

0000028c <enable_input_capture>:
        return 1;
    }
    return 0;
}
void set_to_rising(){
    TCCR3B |= (1 << ICES3);
     28c:	ea e8       	ldi	r30, 0x8A	; 138
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	80 64       	ori	r24, 0x40	; 64
     294:	80 83       	st	Z, r24
void set_to_falling(){
    TCCR3B &= ~(1 << ICES3);
}
void enable_input_capture(){
    set_to_rising();
    ETIMSK |= (1 << TICIE3);
     296:	ed e7       	ldi	r30, 0x7D	; 125
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	80 62       	ori	r24, 0x20	; 32
     29e:	80 83       	st	Z, r24
     2a0:	08 95       	ret

000002a2 <disable_input_capture>:
}
void disable_input_capture(){
    ETIMSK &= ~(1 << TICIE3);
     2a2:	ed e7       	ldi	r30, 0x7D	; 125
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	8f 7d       	andi	r24, 0xDF	; 223
     2aa:	80 83       	st	Z, r24
     2ac:	08 95       	ret

000002ae <clear_input_flag>:
}
void clear_input_flag(){
    ETIFR |= (1 << ICF3);
     2ae:	ec e7       	ldi	r30, 0x7C	; 124
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	80 62       	ori	r24, 0x20	; 32
     2b6:	80 83       	st	Z, r24
     2b8:	08 95       	ret

000002ba <setup_input_capture>:
void enable_input_capture(){
    set_to_rising();
    ETIMSK |= (1 << TICIE3);
}
void disable_input_capture(){
    ETIMSK &= ~(1 << TICIE3);
     2ba:	ed e7       	ldi	r30, 0x7D	; 125
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	8f 7d       	andi	r24, 0xDF	; 223
     2c2:	80 83       	st	Z, r24
    ETIFR |= (1 << ICF3);
}
void setup_input_capture(){
    disable_input_capture();
    //reset the registers
    TCCR3A = 0;
     2c4:	ab e8       	ldi	r26, 0x8B	; 139
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	1c 92       	st	X, r1
    TCCR3B = 0;
     2ca:	ea e8       	ldi	r30, 0x8A	; 138
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	10 82       	st	Z, r1
    //Normal Port Operation, OC3B Disconnected
    TCCR3A &= ~((1 << COM3B1) | (1 << COM3B0));
     2d0:	8c 91       	ld	r24, X
     2d2:	8f 7c       	andi	r24, 0xCF	; 207
     2d4:	8c 93       	st	X, r24
    //clear the reserved bit
    TCCR3B &= ~(1 << 5);
     2d6:	80 81       	ld	r24, Z
     2d8:	8f 7d       	andi	r24, 0xDF	; 223
     2da:	80 83       	st	Z, r24
    //enable input capture noise canceller
    TCCR3B |= (1 << ICNC3); 
     2dc:	80 81       	ld	r24, Z
     2de:	80 68       	ori	r24, 0x80	; 128
     2e0:	80 83       	st	Z, r24
    //Set ICR3 to TOP, noted as Fast PWM Mode?
    TCCR3A &= ~(1 << WGM30);
     2e2:	8c 91       	ld	r24, X
     2e4:	8e 7f       	andi	r24, 0xFE	; 254
     2e6:	8c 93       	st	X, r24
    TCCR3A |= (1 << WGM31);
     2e8:	8c 91       	ld	r24, X
     2ea:	82 60       	ori	r24, 0x02	; 2
     2ec:	8c 93       	st	X, r24
    TCCR3B |= ((1 << WGM32) | (1 << WGM33));
     2ee:	80 81       	ld	r24, Z
     2f0:	88 61       	ori	r24, 0x18	; 24
     2f2:	80 83       	st	Z, r24
    //CLKio/1 (no prescaling)
    TCCR3B |= (1 << CS30);
     2f4:	80 81       	ld	r24, Z
     2f6:	81 60       	ori	r24, 0x01	; 1
     2f8:	80 83       	st	Z, r24
    TCCR3B &= ~(1 << CS31);
     2fa:	80 81       	ld	r24, Z
     2fc:	8d 7f       	andi	r24, 0xFD	; 253
     2fe:	80 83       	st	Z, r24
    TCCR3B &= ~(1 << CS32);
     300:	80 81       	ld	r24, Z
     302:	8b 7f       	andi	r24, 0xFB	; 251
     304:	80 83       	st	Z, r24
        return 1;
    }
    return 0;
}
void set_to_rising(){
    TCCR3B |= (1 << ICES3);
     306:	80 81       	ld	r24, Z
     308:	80 64       	ori	r24, 0x40	; 64
     30a:	80 83       	st	Z, r24
     30c:	08 95       	ret

0000030e <blink>:
    TCCR3B &= ~(1 << CS32);
    set_to_rising();

}

void blink(int led, int speed){
     30e:	65 36       	cpi	r22, 0x65	; 101
     310:	71 05       	cpc	r23, r1
     312:	14 f0       	brlt	.+4      	; 0x318 <blink+0xa>
     314:	64 e6       	ldi	r22, 0x64	; 100
     316:	70 e0       	ldi	r23, 0x00	; 0
    }
    if (speed > 100){
        speed = 100;
    }
    int i;
    PORTB |= (1 << led);
     318:	98 b3       	in	r25, 0x18	; 24
     31a:	41 e0       	ldi	r20, 0x01	; 1
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	01 c0       	rjmp	.+2      	; 0x322 <blink+0x14>
     320:	44 0f       	add	r20, r20
     322:	8a 95       	dec	r24
     324:	ea f7       	brpl	.-6      	; 0x320 <blink+0x12>
     326:	89 2f       	mov	r24, r25
     328:	84 2b       	or	r24, r20
     32a:	88 bb       	out	0x18, r24	; 24
    for (i = 0; i < (121-speed); ++i){
     32c:	77 fd       	sbrc	r23, 7
     32e:	15 c0       	rjmp	.+42     	; 0x35a <blink+0x4c>
     330:	29 e7       	ldi	r18, 0x79	; 121
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	26 1b       	sub	r18, r22
     336:	37 0b       	sbc	r19, r23
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     33c:	ef e9       	ldi	r30, 0x9F	; 159
     33e:	ff e0       	ldi	r31, 0x0F	; 15
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <blink+0x32>
     344:	00 c0       	rjmp	.+0      	; 0x346 <blink+0x38>
     346:	00 00       	nop
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	82 17       	cp	r24, r18
     34c:	93 07       	cpc	r25, r19
     34e:	b1 f7       	brne	.-20     	; 0x33c <blink+0x2e>
        _delay_ms(1);
    }
    PORTB &= ~(1 << led);
     350:	88 b3       	in	r24, 0x18	; 24
     352:	40 95       	com	r20
     354:	48 23       	and	r20, r24
     356:	48 bb       	out	0x18, r20	; 24
     358:	08 95       	ret
    if (speed > 100){
        speed = 100;
    }
    int i;
    PORTB |= (1 << led);
    for (i = 0; i < (121-speed); ++i){
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	e8 cf       	rjmp	.-48     	; 0x330 <blink+0x22>

00000360 <trigger>:
    string2lcd(str);
    return distance;
}

void trigger(unsigned int pin){
    PORTE |= pin;
     360:	93 b1       	in	r25, 0x03	; 3
     362:	98 2b       	or	r25, r24
     364:	93 b9       	out	0x03, r25	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     366:	90 e5       	ldi	r25, 0x50	; 80
     368:	9a 95       	dec	r25
     36a:	f1 f7       	brne	.-4      	; 0x368 <trigger+0x8>
    _delay_us(15);
    PORTE &= ~pin;
     36c:	93 b1       	in	r25, 0x03	; 3
     36e:	80 95       	com	r24
     370:	89 23       	and	r24, r25
     372:	83 b9       	out	0x03, r24	; 3
     374:	08 95       	ret

00000376 <get_distance>:
    string2lcd(str);
    return distance;
}

void trigger(unsigned int pin){
    PORTE |= pin;
     376:	23 b1       	in	r18, 0x03	; 3
     378:	28 2b       	or	r18, r24
     37a:	23 b9       	out	0x03, r18	; 3
     37c:	20 e5       	ldi	r18, 0x50	; 80
     37e:	2a 95       	dec	r18
     380:	f1 f7       	brne	.-4      	; 0x37e <get_distance+0x8>
    _delay_us(15);
    PORTE &= ~pin;
     382:	33 b1       	in	r19, 0x03	; 3
     384:	28 2f       	mov	r18, r24
     386:	20 95       	com	r18
     388:	23 23       	and	r18, r19
     38a:	23 b9       	out	0x03, r18	; 3
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
    double distance = 0;
	unsigned long count = 0;
    double time_sec;
	trigger(pin);
    
    while ((PINE & (pin << 1)) == 0); //while pinc port 1 is low, aka wait for echo to raise
     390:	21 b1       	in	r18, 0x01	; 1
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	28 23       	and	r18, r24
     396:	39 23       	and	r19, r25
     398:	23 2b       	or	r18, r19
     39a:	d1 f3       	breq	.-12     	; 0x390 <get_distance+0x1a>
    while (1){
        if ((PINE & (pin << 1)) != (pin << 1)){ //wait for pinc port 1 to go back to low
     39c:	21 b1       	in	r18, 0x01	; 1
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	28 23       	and	r18, r24
     3a2:	39 23       	and	r19, r25
     3a4:	82 17       	cp	r24, r18
     3a6:	93 07       	cpc	r25, r19
     3a8:	81 f5       	brne	.+96     	; 0x40a <get_distance+0x94>
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	ba 01       	movw	r22, r20
     3b0:	05 c0       	rjmp	.+10     	; 0x3bc <get_distance+0x46>
            break;
        }
        if (count == 255){
     3b2:	4f 3f       	cpi	r20, 0xFF	; 255
     3b4:	51 05       	cpc	r21, r1
     3b6:	61 05       	cpc	r22, r1
     3b8:	71 05       	cpc	r23, r1
     3ba:	11 f1       	breq	.+68     	; 0x400 <get_distance+0x8a>
     3bc:	e7 ec       	ldi	r30, 0xC7	; 199
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	31 97       	sbiw	r30, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <get_distance+0x4a>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <get_distance+0x50>
     3c6:	00 00       	nop
            break;
        }
        _delay_us(50);
        ++count;
     3c8:	4f 5f       	subi	r20, 0xFF	; 255
     3ca:	5f 4f       	sbci	r21, 0xFF	; 255
     3cc:	6f 4f       	sbci	r22, 0xFF	; 255
     3ce:	7f 4f       	sbci	r23, 0xFF	; 255
    double time_sec;
	trigger(pin);
    
    while ((PINE & (pin << 1)) == 0); //while pinc port 1 is low, aka wait for echo to raise
    while (1){
        if ((PINE & (pin << 1)) != (pin << 1)){ //wait for pinc port 1 to go back to low
     3d0:	21 b1       	in	r18, 0x01	; 1
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	28 23       	and	r18, r24
     3d6:	39 23       	and	r19, r25
     3d8:	82 17       	cp	r24, r18
     3da:	93 07       	cpc	r25, r19
     3dc:	51 f3       	breq	.-44     	; 0x3b2 <get_distance+0x3c>
     3de:	cb 01       	movw	r24, r22
     3e0:	ba 01       	movw	r22, r20
     3e2:	0e 94 57 05 	call	0xaae	; 0xaae <__floatunsisf>
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	40 e2       	ldi	r20, 0x20	; 32
     3ec:	52 e4       	ldi	r21, 0x42	; 66
     3ee:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__mulsf3>
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	48 e6       	ldi	r20, 0x68	; 104
     3f8:	52 e4       	ldi	r21, 0x42	; 66
     3fa:	0e 94 b6 04 	call	0x96c	; 0x96c <__divsf3>
     3fe:	08 95       	ret
     400:	61 eb       	ldi	r22, 0xB1	; 177
     402:	7c ed       	ldi	r23, 0xDC	; 220
     404:	8f e2       	ldi	r24, 0x2F	; 47
     406:	93 e4       	ldi	r25, 0x43	; 67
    while (!capture_complete);
    time_sec = high_time / (double)TIMER3_FREQ;
    distance = time_sec * SOUND_SPEED / 2; // meters
    */
    return distance;
}
     408:	08 95       	ret
    double time_sec;
	trigger(pin);
    
    while ((PINE & (pin << 1)) == 0); //while pinc port 1 is low, aka wait for echo to raise
    while (1){
        if ((PINE & (pin << 1)) != (pin << 1)){ //wait for pinc port 1 to go back to low
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	cb 01       	movw	r24, r22
     410:	08 95       	ret

00000412 <USART_Init>:
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     412:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
     416:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     41a:	88 e1       	ldi	r24, 0x18	; 24
     41c:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
     420:	8c e0       	ldi	r24, 0x0C	; 12
     422:	80 93 9d 00 	sts	0x009D, r24
     426:	08 95       	ret

00000428 <USART_Transmit>:
}
void USART_Transmit( unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     428:	90 91 9b 00 	lds	r25, 0x009B
     42c:	95 ff       	sbrs	r25, 5
     42e:	fc cf       	rjmp	.-8      	; 0x428 <USART_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     430:	80 93 9c 00 	sts	0x009C, r24
     434:	08 95       	ret

00000436 <strobe_lcd>:
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     436:	e2 e6       	ldi	r30, 0x62	; 98
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	88 60       	ori	r24, 0x08	; 8
     43e:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     440:	80 81       	ld	r24, Z
     442:	87 7f       	andi	r24, 0xF7	; 247
     444:	80 83       	st	Z, r24
     446:	08 95       	ret

00000448 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     448:	77 9b       	sbis	0x0e, 7	; 14
     44a:	fe cf       	rjmp	.-4      	; 0x448 <clear_display>
    SPDR = 0x00;    //command, not data
     44c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     44e:	77 9b       	sbis	0x0e, 7	; 14
     450:	fe cf       	rjmp	.-4      	; 0x44e <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     456:	77 9b       	sbis	0x0e, 7	; 14
     458:	fe cf       	rjmp	.-4      	; 0x456 <clear_display+0xe>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     45a:	80 91 62 00 	lds	r24, 0x0062
     45e:	88 60       	ori	r24, 0x08	; 8
     460:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     464:	80 91 62 00 	lds	r24, 0x0062
     468:	87 7f       	andi	r24, 0xF7	; 247
     46a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	98 e1       	ldi	r25, 0x18	; 24
     472:	01 97       	sbiw	r24, 0x01	; 1
     474:	f1 f7       	brne	.-4      	; 0x472 <clear_display+0x2a>
     476:	00 c0       	rjmp	.+0      	; 0x478 <clear_display+0x30>
     478:	00 00       	nop
     47a:	08 95       	ret

0000047c <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(1.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     47c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     47e:	77 9b       	sbis	0x0e, 7	; 14
     480:	fe cf       	rjmp	.-4      	; 0x47e <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     482:	80 ec       	ldi	r24, 0xC0	; 192
     484:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     486:	77 9b       	sbis	0x0e, 7	; 14
     488:	fe cf       	rjmp	.-4      	; 0x486 <home_line2+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     48a:	80 91 62 00 	lds	r24, 0x0062
     48e:	88 60       	ori	r24, 0x08	; 8
     490:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     494:	80 91 62 00 	lds	r24, 0x0062
     498:	87 7f       	andi	r24, 0xF7	; 247
     49a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     49e:	85 ec       	ldi	r24, 0xC5	; 197
     4a0:	8a 95       	dec	r24
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <home_line2+0x24>
     4a4:	00 00       	nop
     4a6:	08 95       	ret

000004a8 <char2lcd>:

//sends a char to the LCD
void char2lcd(char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4ac:	77 9b       	sbis	0x0e, 7	; 14
     4ae:	fe cf       	rjmp	.-4      	; 0x4ac <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     4b0:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4b2:	77 9b       	sbis	0x0e, 7	; 14
     4b4:	fe cf       	rjmp	.-4      	; 0x4b2 <char2lcd+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     4b6:	80 91 62 00 	lds	r24, 0x0062
     4ba:	88 60       	ori	r24, 0x08	; 8
     4bc:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     4c0:	80 91 62 00 	lds	r24, 0x0062
     4c4:	87 7f       	andi	r24, 0xF7	; 247
     4c6:	80 93 62 00 	sts	0x0062, r24
     4ca:	85 ec       	ldi	r24, 0xC5	; 197
     4cc:	8a 95       	dec	r24
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <char2lcd+0x24>
     4d0:	00 00       	nop
     4d2:	08 95       	ret

000004d4 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	fc 01       	movw	r30, r24
     4da:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
     4dc:	40 e0       	ldi	r20, 0x00	; 0
     4de:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     4e0:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4e2:	77 9b       	sbis	0x0e, 7	; 14
     4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     4e6:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4e8:	77 9b       	sbis	0x0e, 7	; 14
     4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     4ec:	8d 91       	ld	r24, X+
     4ee:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4f0:	77 9b       	sbis	0x0e, 7	; 14
     4f2:	fe cf       	rjmp	.-4      	; 0x4f0 <string2lcd+0x1c>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     4f4:	90 91 62 00 	lds	r25, 0x0062
     4f8:	98 60       	ori	r25, 0x08	; 8
     4fa:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     4fe:	90 91 62 00 	lds	r25, 0x0062
     502:	97 7f       	andi	r25, 0xF7	; 247
     504:	90 93 62 00 	sts	0x0062, r25
     508:	85 ec       	ldi	r24, 0xC5	; 197
     50a:	8a 95       	dec	r24
     50c:	f1 f7       	brne	.-4      	; 0x50a <string2lcd+0x36>
     50e:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
     510:	4f 5f       	subi	r20, 0xFF	; 255
     512:	5f 4f       	sbci	r21, 0xFF	; 255
     514:	ef 01       	movw	r28, r30
     516:	09 90       	ld	r0, Y+
     518:	00 20       	and	r0, r0
     51a:	e9 f7       	brne	.-6      	; 0x516 <string2lcd+0x42>
     51c:	9e 01       	movw	r18, r28
     51e:	2e 1b       	sub	r18, r30
     520:	3f 0b       	sbc	r19, r31
     522:	22 50       	subi	r18, 0x02	; 2
     524:	31 09       	sbc	r19, r1
     526:	24 17       	cp	r18, r20
     528:	35 07       	cpc	r19, r21
     52a:	d8 f6       	brcc	.-74     	; 0x4e2 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <print_distance>:
        _delay_ms(1);
    }
    PORTB &= ~(1 << led);

}
double print_distance(unsigned int pin){
     532:	cf 92       	push	r12
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	60 97       	sbiw	r28, 0x10	; 16
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
    char str[16];
    double distance = 0;
    distance = get_distance(pin);
     552:	0e 94 bb 01 	call	0x376	; 0x376 <get_distance>
     556:	6b 01       	movw	r12, r22
     558:	7c 01       	movw	r14, r24
    dtostrf(distance,1,6,str);
     55a:	8e 01       	movw	r16, r28
     55c:	0f 5f       	subi	r16, 0xFF	; 255
     55e:	1f 4f       	sbci	r17, 0xFF	; 255
     560:	26 e0       	ldi	r18, 0x06	; 6
     562:	41 e0       	ldi	r20, 0x01	; 1
     564:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <dtostrf>
    string2lcd(str);
     568:	c8 01       	movw	r24, r16
     56a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <string2lcd>
    return distance;
}
     56e:	c7 01       	movw	r24, r14
     570:	b6 01       	movw	r22, r12
     572:	60 96       	adiw	r28, 0x10	; 16
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	ff 90       	pop	r15
     588:	ef 90       	pop	r14
     58a:	df 90       	pop	r13
     58c:	cf 90       	pop	r12
     58e:	08 95       	ret

00000590 <spi_init>:
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     590:	e1 e6       	ldi	r30, 0x61	; 97
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	88 60       	ori	r24, 0x08	; 8
     598:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     59a:	88 b3       	in	r24, 0x18	; 24
     59c:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     59e:	87 b3       	in	r24, 0x17	; 23
     5a0:	87 60       	ori	r24, 0x07	; 7
     5a2:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     5a4:	80 e5       	ldi	r24, 0x50	; 80
     5a6:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	8e b9       	out	0x0e, r24	; 14
     5ac:	08 95       	ret

000005ae <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ae:	8f e5       	ldi	r24, 0x5F	; 95
     5b0:	9a ee       	ldi	r25, 0xEA	; 234
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <lcd_init+0x4>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <lcd_init+0xa>
     5b8:	00 00       	nop
     5ba:	23 e0       	ldi	r18, 0x03	; 3
     5bc:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     5be:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     5c0:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5c2:	77 9b       	sbis	0x0e, 7	; 14
     5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <lcd_init+0x14>
        SPDR = 0x30;
     5c6:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5c8:	77 9b       	sbis	0x0e, 7	; 14
     5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <lcd_init+0x1a>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     5cc:	80 91 62 00 	lds	r24, 0x0062
     5d0:	88 60       	ori	r24, 0x08	; 8
     5d2:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     5d6:	80 91 62 00 	lds	r24, 0x0062
     5da:	87 7f       	andi	r24, 0xF7	; 247
     5dc:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e0:	85 ec       	ldi	r24, 0xC5	; 197
     5e2:	8a 95       	dec	r24
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <lcd_init+0x34>
     5e6:	00 00       	nop
     5e8:	21 50       	subi	r18, 0x01	; 1
     5ea:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     5ec:	49 f7       	brne	.-46     	; 0x5c0 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     5ee:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5f0:	77 9b       	sbis	0x0e, 7	; 14
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <lcd_init+0x42>
    SPDR = 0x38;
     5f4:	88 e3       	ldi	r24, 0x38	; 56
     5f6:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5f8:	77 9b       	sbis	0x0e, 7	; 14
     5fa:	fe cf       	rjmp	.-4      	; 0x5f8 <lcd_init+0x4a>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     5fc:	80 91 62 00 	lds	r24, 0x0062
     600:	88 60       	ori	r24, 0x08	; 8
     602:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     606:	80 91 62 00 	lds	r24, 0x0062
     60a:	87 7f       	andi	r24, 0xF7	; 247
     60c:	80 93 62 00 	sts	0x0062, r24
     610:	95 ec       	ldi	r25, 0xC5	; 197
     612:	9a 95       	dec	r25
     614:	f1 f7       	brne	.-4      	; 0x612 <lcd_init+0x64>
     616:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     618:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     61a:	77 9b       	sbis	0x0e, 7	; 14
     61c:	fe cf       	rjmp	.-4      	; 0x61a <lcd_init+0x6c>
    SPDR = 0x08;
     61e:	88 e0       	ldi	r24, 0x08	; 8
     620:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     622:	77 9b       	sbis	0x0e, 7	; 14
     624:	fe cf       	rjmp	.-4      	; 0x622 <lcd_init+0x74>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     626:	80 91 62 00 	lds	r24, 0x0062
     62a:	88 60       	ori	r24, 0x08	; 8
     62c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     630:	80 91 62 00 	lds	r24, 0x0062
     634:	87 7f       	andi	r24, 0xF7	; 247
     636:	80 93 62 00 	sts	0x0062, r24
     63a:	85 ec       	ldi	r24, 0xC5	; 197
     63c:	8a 95       	dec	r24
     63e:	f1 f7       	brne	.-4      	; 0x63c <lcd_init+0x8e>
     640:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     642:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     644:	77 9b       	sbis	0x0e, 7	; 14
     646:	fe cf       	rjmp	.-4      	; 0x644 <lcd_init+0x96>
    SPDR = 0x01;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     64c:	77 9b       	sbis	0x0e, 7	; 14
     64e:	fe cf       	rjmp	.-4      	; 0x64c <lcd_init+0x9e>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     650:	80 91 62 00 	lds	r24, 0x0062
     654:	88 60       	ori	r24, 0x08	; 8
     656:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     65a:	80 91 62 00 	lds	r24, 0x0062
     65e:	87 7f       	andi	r24, 0xF7	; 247
     660:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     664:	8f ef       	ldi	r24, 0xFF	; 255
     666:	98 e1       	ldi	r25, 0x18	; 24
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <lcd_init+0xba>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <lcd_init+0xc0>
     66e:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
     670:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     672:	77 9b       	sbis	0x0e, 7	; 14
     674:	fe cf       	rjmp	.-4      	; 0x672 <lcd_init+0xc4>
    SPDR = 0x06;
     676:	86 e0       	ldi	r24, 0x06	; 6
     678:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     67a:	77 9b       	sbis	0x0e, 7	; 14
     67c:	fe cf       	rjmp	.-4      	; 0x67a <lcd_init+0xcc>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     67e:	80 91 62 00 	lds	r24, 0x0062
     682:	88 60       	ori	r24, 0x08	; 8
     684:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     688:	80 91 62 00 	lds	r24, 0x0062
     68c:	87 7f       	andi	r24, 0xF7	; 247
     68e:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     692:	95 ec       	ldi	r25, 0xC5	; 197
     694:	9a 95       	dec	r25
     696:	f1 f7       	brne	.-4      	; 0x694 <lcd_init+0xe6>
     698:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     69a:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     69c:	77 9b       	sbis	0x0e, 7	; 14
     69e:	fe cf       	rjmp	.-4      	; 0x69c <lcd_init+0xee>
    SPDR = 0x0E;
     6a0:	8e e0       	ldi	r24, 0x0E	; 14
     6a2:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6a4:	77 9b       	sbis	0x0e, 7	; 14
     6a6:	fe cf       	rjmp	.-4      	; 0x6a4 <lcd_init+0xf6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     6a8:	80 91 62 00 	lds	r24, 0x0062
     6ac:	88 60       	ori	r24, 0x08	; 8
     6ae:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     6b2:	80 91 62 00 	lds	r24, 0x0062
     6b6:	87 7f       	andi	r24, 0xF7	; 247
     6b8:	80 93 62 00 	sts	0x0062, r24
     6bc:	85 ec       	ldi	r24, 0xC5	; 197
     6be:	8a 95       	dec	r24
     6c0:	f1 f7       	brne	.-4      	; 0x6be <lcd_init+0x110>
     6c2:	00 00       	nop
     6c4:	08 95       	ret

000006c6 <main>:
volatile unsigned int end_time = 0;
volatile unsigned int high_time = 0;
volatile unsigned int capture_complete = 0;


int main(void){
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
     6ce:	60 97       	sbiw	r28, 0x10	; 16
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
     6de:	18 ba       	out	0x18, r1	; 24
    DDRD = 0x00;
     6e0:	11 ba       	out	0x11, r1	; 17
    DDRE = 0b01010100;    //1,3,5 is output, the rest input
     6e2:	84 e5       	ldi	r24, 0x54	; 84
     6e4:	82 b9       	out	0x02, r24	; 2
    PORTE = 0x00;   //set low
     6e6:	13 b8       	out	0x03, r1	; 3
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     6e8:	80 91 61 00 	lds	r24, 0x0061
     6ec:	88 60       	ori	r24, 0x08	; 8
     6ee:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initalization for SPI
     6f2:	88 b3       	in	r24, 0x18	; 24
     6f4:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     6f6:	87 b3       	in	r24, 0x17	; 23
     6f8:	87 60       	ori	r24, 0x07	; 7
     6fa:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     6fc:	80 e5       	ldi	r24, 0x50	; 80
     6fe:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	8e b9       	out	0x0e, r24	; 14
        sonars[i] = (1<<(i * 2));
    }
    int limit = 20;
    int step = 5;
    spi_init();
    lcd_init();
     704:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_init>
    
    double temp;


    //8 bit phase correct pwm
    TCCR0 |= (1 << WGM00);  
     708:	83 b7       	in	r24, 0x33	; 51
     70a:	80 64       	ori	r24, 0x40	; 64
     70c:	83 bf       	out	0x33, r24	; 51
    TCCR0 &= ~(1 << WGM01);
     70e:	83 b7       	in	r24, 0x33	; 51
     710:	87 7f       	andi	r24, 0xF7	; 247
     712:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1 << COM01); //Clear OC0 on compare match when up-counting. Set OC0 on compare match when downcounting.
     714:	83 b7       	in	r24, 0x33	; 51
     716:	80 62       	ori	r24, 0x20	; 32
     718:	83 bf       	out	0x33, r24	; 51
    //Prescaler 256
    TCCR0 |= (1 << CS02) | (1 << CS01);
     71a:	83 b7       	in	r24, 0x33	; 51
     71c:	86 60       	ori	r24, 0x06	; 6
     71e:	83 bf       	out	0x33, r24	; 51
    TCCR0 &= ~(1 << CS00);
     720:	83 b7       	in	r24, 0x33	; 51
     722:	8e 7f       	andi	r24, 0xFE	; 254
     724:	83 bf       	out	0x33, r24	; 51

    OCR0 = 0;
     726:	11 be       	out	0x31, r1	; 49

    clear_display();
     728:	0e 94 24 02 	call	0x448	; 0x448 <clear_display>
    string2lcd("Starting Program");
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <string2lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     734:	2f ef       	ldi	r18, 0xFF	; 255
     736:	89 e6       	ldi	r24, 0x69	; 105
     738:	98 e1       	ldi	r25, 0x18	; 24
     73a:	21 50       	subi	r18, 0x01	; 1
     73c:	80 40       	sbci	r24, 0x00	; 0
     73e:	90 40       	sbci	r25, 0x00	; 0
     740:	e1 f7       	brne	.-8      	; 0x73a <main+0x74>
     742:	00 c0       	rjmp	.+0      	; 0x744 <main+0x7e>
     744:	00 00       	nop
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    SPDR = 0xC0;   // cursor go home on line 2
     746:	90 ec       	ldi	r25, 0xC0	; 192
     748:	b9 2e       	mov	r11, r25
    string2lcd("Starting Program");


    _delay_ms(500);
    while(1){
        clear_display();
     74a:	0e 94 24 02 	call	0x448	; 0x448 <clear_display>
        
        for (i = 0; i < NUM_SONARS; ++i){
            distance = print_distance(sonars[i]);
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 99 02 	call	0x532	; 0x532 <print_distance>
     756:	6b 01       	movw	r12, r22
     758:	7c 01       	movw	r14, r24
            if (distance <= limit){
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	40 ea       	ldi	r20, 0xA0	; 160
     760:	51 e4       	ldi	r21, 0x41	; 65
     762:	0e 94 b1 04 	call	0x962	; 0x962 <__cmpsf2>
     766:	18 16       	cp	r1, r24
     768:	0c f0       	brlt	.+2      	; 0x76c <main+0xa6>
     76a:	84 c0       	rjmp	.+264    	; 0x874 <main+0x1ae>
                PORTB |= (1 << 6);
            }
            else {
                PORTB &= ~(1 << 6);
     76c:	c6 98       	cbi	0x18, 6	; 24
            }
            if (distance > limit && distance <= limit + 4 * step){
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	40 ea       	ldi	r20, 0xA0	; 160
     774:	51 e4       	ldi	r21, 0x41	; 65
     776:	c7 01       	movw	r24, r14
     778:	b6 01       	movw	r22, r12
     77a:	0e 94 09 06 	call	0xc12	; 0xc12 <__gesf2>
     77e:	18 16       	cp	r1, r24
     780:	0c f0       	brlt	.+2      	; 0x784 <main+0xbe>
     782:	58 c0       	rjmp	.+176    	; 0x834 <main+0x16e>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e2       	ldi	r20, 0x20	; 32
     78a:	52 e4       	ldi	r21, 0x42	; 66
     78c:	c7 01       	movw	r24, r14
     78e:	b6 01       	movw	r22, r12
     790:	0e 94 b1 04 	call	0x962	; 0x962 <__cmpsf2>
     794:	18 16       	cp	r1, r24
     796:	0c f4       	brge	.+2      	; 0x79a <main+0xd4>
     798:	4d c0       	rjmp	.+154    	; 0x834 <main+0x16e>

                temp = distance - limit;
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 ea       	ldi	r20, 0xA0	; 160
     7a0:	51 e4       	ldi	r21, 0x41	; 65
     7a2:	c7 01       	movw	r24, r14
     7a4:	b6 01       	movw	r22, r12
     7a6:	0e 94 44 04 	call	0x888	; 0x888 <__subsf3>
     7aa:	6b 01       	movw	r12, r22
     7ac:	7c 01       	movw	r14, r24
                if (temp < 0){
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	a9 01       	movw	r20, r18
     7b4:	0e 94 b1 04 	call	0x962	; 0x962 <__cmpsf2>
     7b8:	87 fd       	sbrc	r24, 7
     7ba:	5e c0       	rjmp	.+188    	; 0x878 <main+0x1b2>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	4c e4       	ldi	r20, 0x4C	; 76
     7c2:	51 e4       	ldi	r21, 0x41	; 65
     7c4:	c7 01       	movw	r24, r14
     7c6:	b6 01       	movw	r22, r12
     7c8:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__mulsf3>
     7cc:	9b 01       	movw	r18, r22
     7ce:	ac 01       	movw	r20, r24
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	8f e7       	ldi	r24, 0x7F	; 127
     7d6:	93 e4       	ldi	r25, 0x43	; 67
     7d8:	0e 94 44 04 	call	0x888	; 0x888 <__subsf3>
     7dc:	6b 01       	movw	r12, r22
     7de:	7c 01       	movw	r14, r24
     7e0:	0e 94 28 05 	call	0xa50	; 0xa50 <__fixunssfsi>
                    temp = 0;
                }
                temp *= 255.0/(4 * step);
                temp = 255.0 - temp;
                OCR0 = temp;
     7e4:	61 bf       	out	0x31, r22	; 49
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(1.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     7e6:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7e8:	77 9b       	sbis	0x0e, 7	; 14
     7ea:	fe cf       	rjmp	.-4      	; 0x7e8 <main+0x122>
    SPDR = 0xC0;   // cursor go home on line 2
     7ec:	bf b8       	out	0x0f, r11	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7ee:	77 9b       	sbis	0x0e, 7	; 14
     7f0:	fe cf       	rjmp	.-4      	; 0x7ee <main+0x128>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     7f2:	80 91 62 00 	lds	r24, 0x0062
     7f6:	88 60       	ori	r24, 0x08	; 8
     7f8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     7fc:	80 91 62 00 	lds	r24, 0x0062
     800:	87 7f       	andi	r24, 0xF7	; 247
     802:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     806:	85 ec       	ldi	r24, 0xC5	; 197
     808:	8a 95       	dec	r24
     80a:	f1 f7       	brne	.-4      	; 0x808 <main+0x142>
     80c:	00 00       	nop
                }
                temp *= 255.0/(4 * step);
                temp = 255.0 - temp;
                OCR0 = temp;
                home_line2();
                dtostrf(temp,1,6,buffer);
     80e:	8e 01       	movw	r16, r28
     810:	0f 5f       	subi	r16, 0xFF	; 255
     812:	1f 4f       	sbci	r17, 0xFF	; 255
     814:	26 e0       	ldi	r18, 0x06	; 6
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	c7 01       	movw	r24, r14
     81a:	b6 01       	movw	r22, r12
     81c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <dtostrf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     820:	9f ef       	ldi	r25, 0xFF	; 255
     822:	2d ee       	ldi	r18, 0xED	; 237
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	91 50       	subi	r25, 0x01	; 1
     828:	20 40       	sbci	r18, 0x00	; 0
     82a:	80 40       	sbci	r24, 0x00	; 0
     82c:	e1 f7       	brne	.-8      	; 0x826 <main+0x160>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <main+0x16a>
     830:	00 00       	nop
     832:	8b cf       	rjmp	.-234    	; 0x74a <main+0x84>
                //string2lcd(buffer);
            }
            else {
                OCR0 = 0;
     834:	11 be       	out	0x31, r1	; 49
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(1.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     836:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     838:	77 9b       	sbis	0x0e, 7	; 14
     83a:	fe cf       	rjmp	.-4      	; 0x838 <main+0x172>
    SPDR = 0xC0;   // cursor go home on line 2
     83c:	bf b8       	out	0x0f, r11	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     83e:	77 9b       	sbis	0x0e, 7	; 14
     840:	fe cf       	rjmp	.-4      	; 0x83e <main+0x178>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     842:	80 91 62 00 	lds	r24, 0x0062
     846:	88 60       	ori	r24, 0x08	; 8
     848:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     84c:	80 91 62 00 	lds	r24, 0x0062
     850:	87 7f       	andi	r24, 0xF7	; 247
     852:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     856:	25 ec       	ldi	r18, 0xC5	; 197
     858:	2a 95       	dec	r18
     85a:	f1 f7       	brne	.-4      	; 0x858 <main+0x192>
     85c:	00 00       	nop
                //string2lcd(buffer);
            }
            else {
                OCR0 = 0;
                home_line2();
                dtostrf(0.0,1,6,buffer);
     85e:	8e 01       	movw	r16, r28
     860:	0f 5f       	subi	r16, 0xFF	; 255
     862:	1f 4f       	sbci	r17, 0xFF	; 255
     864:	26 e0       	ldi	r18, 0x06	; 6
     866:	41 e0       	ldi	r20, 0x01	; 1
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	cb 01       	movw	r24, r22
     86e:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <dtostrf>
     872:	d6 cf       	rjmp	.-84     	; 0x820 <main+0x15a>
        clear_display();
        
        for (i = 0; i < NUM_SONARS; ++i){
            distance = print_distance(sonars[i]);
            if (distance <= limit){
                PORTB |= (1 << 6);
     874:	c6 9a       	sbi	0x18, 6	; 24
     876:	7b cf       	rjmp	.-266    	; 0x76e <main+0xa8>
                PORTB &= ~(1 << 6);
            }
            if (distance > limit && distance <= limit + 4 * step){

                temp = distance - limit;
                if (temp < 0){
     878:	6f ef       	ldi	r22, 0xFF	; 255
     87a:	c1 2c       	mov	r12, r1
     87c:	d1 2c       	mov	r13, r1
     87e:	8f e7       	ldi	r24, 0x7F	; 127
     880:	e8 2e       	mov	r14, r24
     882:	83 e4       	ldi	r24, 0x43	; 67
     884:	f8 2e       	mov	r15, r24
     886:	ae cf       	rjmp	.-164    	; 0x7e4 <main+0x11e>

00000888 <__subsf3>:
     888:	50 58       	subi	r21, 0x80	; 128

0000088a <__addsf3>:
     88a:	bb 27       	eor	r27, r27
     88c:	aa 27       	eor	r26, r26
     88e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__addsf3x>
     892:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_round>
     896:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_pscA>
     89a:	38 f0       	brcs	.+14     	; 0x8aa <__addsf3+0x20>
     89c:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fp_pscB>
     8a0:	20 f0       	brcs	.+8      	; 0x8aa <__addsf3+0x20>
     8a2:	39 f4       	brne	.+14     	; 0x8b2 <__addsf3+0x28>
     8a4:	9f 3f       	cpi	r25, 0xFF	; 255
     8a6:	19 f4       	brne	.+6      	; 0x8ae <__addsf3+0x24>
     8a8:	26 f4       	brtc	.+8      	; 0x8b2 <__addsf3+0x28>
     8aa:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_nan>
     8ae:	0e f4       	brtc	.+2      	; 0x8b2 <__addsf3+0x28>
     8b0:	e0 95       	com	r30
     8b2:	e7 fb       	bst	r30, 7
     8b4:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_inf>

000008b8 <__addsf3x>:
     8b8:	e9 2f       	mov	r30, r25
     8ba:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fp_split3>
     8be:	58 f3       	brcs	.-42     	; 0x896 <__addsf3+0xc>
     8c0:	ba 17       	cp	r27, r26
     8c2:	62 07       	cpc	r22, r18
     8c4:	73 07       	cpc	r23, r19
     8c6:	84 07       	cpc	r24, r20
     8c8:	95 07       	cpc	r25, r21
     8ca:	20 f0       	brcs	.+8      	; 0x8d4 <__addsf3x+0x1c>
     8cc:	79 f4       	brne	.+30     	; 0x8ec <__addsf3x+0x34>
     8ce:	a6 f5       	brtc	.+104    	; 0x938 <__addsf3x+0x80>
     8d0:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__fp_zero>
     8d4:	0e f4       	brtc	.+2      	; 0x8d8 <__addsf3x+0x20>
     8d6:	e0 95       	com	r30
     8d8:	0b 2e       	mov	r0, r27
     8da:	ba 2f       	mov	r27, r26
     8dc:	a0 2d       	mov	r26, r0
     8de:	0b 01       	movw	r0, r22
     8e0:	b9 01       	movw	r22, r18
     8e2:	90 01       	movw	r18, r0
     8e4:	0c 01       	movw	r0, r24
     8e6:	ca 01       	movw	r24, r20
     8e8:	a0 01       	movw	r20, r0
     8ea:	11 24       	eor	r1, r1
     8ec:	ff 27       	eor	r31, r31
     8ee:	59 1b       	sub	r21, r25
     8f0:	99 f0       	breq	.+38     	; 0x918 <__addsf3x+0x60>
     8f2:	59 3f       	cpi	r21, 0xF9	; 249
     8f4:	50 f4       	brcc	.+20     	; 0x90a <__addsf3x+0x52>
     8f6:	50 3e       	cpi	r21, 0xE0	; 224
     8f8:	68 f1       	brcs	.+90     	; 0x954 <__addsf3x+0x9c>
     8fa:	1a 16       	cp	r1, r26
     8fc:	f0 40       	sbci	r31, 0x00	; 0
     8fe:	a2 2f       	mov	r26, r18
     900:	23 2f       	mov	r18, r19
     902:	34 2f       	mov	r19, r20
     904:	44 27       	eor	r20, r20
     906:	58 5f       	subi	r21, 0xF8	; 248
     908:	f3 cf       	rjmp	.-26     	; 0x8f0 <__addsf3x+0x38>
     90a:	46 95       	lsr	r20
     90c:	37 95       	ror	r19
     90e:	27 95       	ror	r18
     910:	a7 95       	ror	r26
     912:	f0 40       	sbci	r31, 0x00	; 0
     914:	53 95       	inc	r21
     916:	c9 f7       	brne	.-14     	; 0x90a <__addsf3x+0x52>
     918:	7e f4       	brtc	.+30     	; 0x938 <__addsf3x+0x80>
     91a:	1f 16       	cp	r1, r31
     91c:	ba 0b       	sbc	r27, r26
     91e:	62 0b       	sbc	r22, r18
     920:	73 0b       	sbc	r23, r19
     922:	84 0b       	sbc	r24, r20
     924:	ba f0       	brmi	.+46     	; 0x954 <__addsf3x+0x9c>
     926:	91 50       	subi	r25, 0x01	; 1
     928:	a1 f0       	breq	.+40     	; 0x952 <__addsf3x+0x9a>
     92a:	ff 0f       	add	r31, r31
     92c:	bb 1f       	adc	r27, r27
     92e:	66 1f       	adc	r22, r22
     930:	77 1f       	adc	r23, r23
     932:	88 1f       	adc	r24, r24
     934:	c2 f7       	brpl	.-16     	; 0x926 <__addsf3x+0x6e>
     936:	0e c0       	rjmp	.+28     	; 0x954 <__addsf3x+0x9c>
     938:	ba 0f       	add	r27, r26
     93a:	62 1f       	adc	r22, r18
     93c:	73 1f       	adc	r23, r19
     93e:	84 1f       	adc	r24, r20
     940:	48 f4       	brcc	.+18     	; 0x954 <__addsf3x+0x9c>
     942:	87 95       	ror	r24
     944:	77 95       	ror	r23
     946:	67 95       	ror	r22
     948:	b7 95       	ror	r27
     94a:	f7 95       	ror	r31
     94c:	9e 3f       	cpi	r25, 0xFE	; 254
     94e:	08 f0       	brcs	.+2      	; 0x952 <__addsf3x+0x9a>
     950:	b0 cf       	rjmp	.-160    	; 0x8b2 <__addsf3+0x28>
     952:	93 95       	inc	r25
     954:	88 0f       	add	r24, r24
     956:	08 f0       	brcs	.+2      	; 0x95a <__addsf3x+0xa2>
     958:	99 27       	eor	r25, r25
     95a:	ee 0f       	add	r30, r30
     95c:	97 95       	ror	r25
     95e:	87 95       	ror	r24
     960:	08 95       	ret

00000962 <__cmpsf2>:
     962:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_cmp>
     966:	08 f4       	brcc	.+2      	; 0x96a <__cmpsf2+0x8>
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	08 95       	ret

0000096c <__divsf3>:
     96c:	0e 94 ca 04 	call	0x994	; 0x994 <__divsf3x>
     970:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_round>
     974:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fp_pscB>
     978:	58 f0       	brcs	.+22     	; 0x990 <__divsf3+0x24>
     97a:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_pscA>
     97e:	40 f0       	brcs	.+16     	; 0x990 <__divsf3+0x24>
     980:	29 f4       	brne	.+10     	; 0x98c <__divsf3+0x20>
     982:	5f 3f       	cpi	r21, 0xFF	; 255
     984:	29 f0       	breq	.+10     	; 0x990 <__divsf3+0x24>
     986:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_inf>
     98a:	51 11       	cpse	r21, r1
     98c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__fp_szero>
     990:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_nan>

00000994 <__divsf3x>:
     994:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fp_split3>
     998:	68 f3       	brcs	.-38     	; 0x974 <__divsf3+0x8>

0000099a <__divsf3_pse>:
     99a:	99 23       	and	r25, r25
     99c:	b1 f3       	breq	.-20     	; 0x98a <__divsf3+0x1e>
     99e:	55 23       	and	r21, r21
     9a0:	91 f3       	breq	.-28     	; 0x986 <__divsf3+0x1a>
     9a2:	95 1b       	sub	r25, r21
     9a4:	55 0b       	sbc	r21, r21
     9a6:	bb 27       	eor	r27, r27
     9a8:	aa 27       	eor	r26, r26
     9aa:	62 17       	cp	r22, r18
     9ac:	73 07       	cpc	r23, r19
     9ae:	84 07       	cpc	r24, r20
     9b0:	38 f0       	brcs	.+14     	; 0x9c0 <__divsf3_pse+0x26>
     9b2:	9f 5f       	subi	r25, 0xFF	; 255
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	22 0f       	add	r18, r18
     9b8:	33 1f       	adc	r19, r19
     9ba:	44 1f       	adc	r20, r20
     9bc:	aa 1f       	adc	r26, r26
     9be:	a9 f3       	breq	.-22     	; 0x9aa <__divsf3_pse+0x10>
     9c0:	35 d0       	rcall	.+106    	; 0xa2c <__divsf3_pse+0x92>
     9c2:	0e 2e       	mov	r0, r30
     9c4:	3a f0       	brmi	.+14     	; 0x9d4 <__divsf3_pse+0x3a>
     9c6:	e0 e8       	ldi	r30, 0x80	; 128
     9c8:	32 d0       	rcall	.+100    	; 0xa2e <__divsf3_pse+0x94>
     9ca:	91 50       	subi	r25, 0x01	; 1
     9cc:	50 40       	sbci	r21, 0x00	; 0
     9ce:	e6 95       	lsr	r30
     9d0:	00 1c       	adc	r0, r0
     9d2:	ca f7       	brpl	.-14     	; 0x9c6 <__divsf3_pse+0x2c>
     9d4:	2b d0       	rcall	.+86     	; 0xa2c <__divsf3_pse+0x92>
     9d6:	fe 2f       	mov	r31, r30
     9d8:	29 d0       	rcall	.+82     	; 0xa2c <__divsf3_pse+0x92>
     9da:	66 0f       	add	r22, r22
     9dc:	77 1f       	adc	r23, r23
     9de:	88 1f       	adc	r24, r24
     9e0:	bb 1f       	adc	r27, r27
     9e2:	26 17       	cp	r18, r22
     9e4:	37 07       	cpc	r19, r23
     9e6:	48 07       	cpc	r20, r24
     9e8:	ab 07       	cpc	r26, r27
     9ea:	b0 e8       	ldi	r27, 0x80	; 128
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <__divsf3_pse+0x56>
     9ee:	bb 0b       	sbc	r27, r27
     9f0:	80 2d       	mov	r24, r0
     9f2:	bf 01       	movw	r22, r30
     9f4:	ff 27       	eor	r31, r31
     9f6:	93 58       	subi	r25, 0x83	; 131
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	3a f0       	brmi	.+14     	; 0xa0a <__divsf3_pse+0x70>
     9fc:	9e 3f       	cpi	r25, 0xFE	; 254
     9fe:	51 05       	cpc	r21, r1
     a00:	78 f0       	brcs	.+30     	; 0xa20 <__divsf3_pse+0x86>
     a02:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_inf>
     a06:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__fp_szero>
     a0a:	5f 3f       	cpi	r21, 0xFF	; 255
     a0c:	e4 f3       	brlt	.-8      	; 0xa06 <__divsf3_pse+0x6c>
     a0e:	98 3e       	cpi	r25, 0xE8	; 232
     a10:	d4 f3       	brlt	.-12     	; 0xa06 <__divsf3_pse+0x6c>
     a12:	86 95       	lsr	r24
     a14:	77 95       	ror	r23
     a16:	67 95       	ror	r22
     a18:	b7 95       	ror	r27
     a1a:	f7 95       	ror	r31
     a1c:	9f 5f       	subi	r25, 0xFF	; 255
     a1e:	c9 f7       	brne	.-14     	; 0xa12 <__divsf3_pse+0x78>
     a20:	88 0f       	add	r24, r24
     a22:	91 1d       	adc	r25, r1
     a24:	96 95       	lsr	r25
     a26:	87 95       	ror	r24
     a28:	97 f9       	bld	r25, 7
     a2a:	08 95       	ret
     a2c:	e1 e0       	ldi	r30, 0x01	; 1
     a2e:	66 0f       	add	r22, r22
     a30:	77 1f       	adc	r23, r23
     a32:	88 1f       	adc	r24, r24
     a34:	bb 1f       	adc	r27, r27
     a36:	62 17       	cp	r22, r18
     a38:	73 07       	cpc	r23, r19
     a3a:	84 07       	cpc	r24, r20
     a3c:	ba 07       	cpc	r27, r26
     a3e:	20 f0       	brcs	.+8      	; 0xa48 <__divsf3_pse+0xae>
     a40:	62 1b       	sub	r22, r18
     a42:	73 0b       	sbc	r23, r19
     a44:	84 0b       	sbc	r24, r20
     a46:	ba 0b       	sbc	r27, r26
     a48:	ee 1f       	adc	r30, r30
     a4a:	88 f7       	brcc	.-30     	; 0xa2e <__divsf3_pse+0x94>
     a4c:	e0 95       	com	r30
     a4e:	08 95       	ret

00000a50 <__fixunssfsi>:
     a50:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__fp_splitA>
     a54:	88 f0       	brcs	.+34     	; 0xa78 <__fixunssfsi+0x28>
     a56:	9f 57       	subi	r25, 0x7F	; 127
     a58:	98 f0       	brcs	.+38     	; 0xa80 <__fixunssfsi+0x30>
     a5a:	b9 2f       	mov	r27, r25
     a5c:	99 27       	eor	r25, r25
     a5e:	b7 51       	subi	r27, 0x17	; 23
     a60:	b0 f0       	brcs	.+44     	; 0xa8e <__fixunssfsi+0x3e>
     a62:	e1 f0       	breq	.+56     	; 0xa9c <__fixunssfsi+0x4c>
     a64:	66 0f       	add	r22, r22
     a66:	77 1f       	adc	r23, r23
     a68:	88 1f       	adc	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	1a f0       	brmi	.+6      	; 0xa74 <__fixunssfsi+0x24>
     a6e:	ba 95       	dec	r27
     a70:	c9 f7       	brne	.-14     	; 0xa64 <__fixunssfsi+0x14>
     a72:	14 c0       	rjmp	.+40     	; 0xa9c <__fixunssfsi+0x4c>
     a74:	b1 30       	cpi	r27, 0x01	; 1
     a76:	91 f0       	breq	.+36     	; 0xa9c <__fixunssfsi+0x4c>
     a78:	0e 94 02 06 	call	0xc04	; 0xc04 <__fp_zero>
     a7c:	b1 e0       	ldi	r27, 0x01	; 1
     a7e:	08 95       	ret
     a80:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__fp_zero>
     a84:	67 2f       	mov	r22, r23
     a86:	78 2f       	mov	r23, r24
     a88:	88 27       	eor	r24, r24
     a8a:	b8 5f       	subi	r27, 0xF8	; 248
     a8c:	39 f0       	breq	.+14     	; 0xa9c <__fixunssfsi+0x4c>
     a8e:	b9 3f       	cpi	r27, 0xF9	; 249
     a90:	cc f3       	brlt	.-14     	; 0xa84 <__fixunssfsi+0x34>
     a92:	86 95       	lsr	r24
     a94:	77 95       	ror	r23
     a96:	67 95       	ror	r22
     a98:	b3 95       	inc	r27
     a9a:	d9 f7       	brne	.-10     	; 0xa92 <__fixunssfsi+0x42>
     a9c:	3e f4       	brtc	.+14     	; 0xaac <__fixunssfsi+0x5c>
     a9e:	90 95       	com	r25
     aa0:	80 95       	com	r24
     aa2:	70 95       	com	r23
     aa4:	61 95       	neg	r22
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	8f 4f       	sbci	r24, 0xFF	; 255
     aaa:	9f 4f       	sbci	r25, 0xFF	; 255
     aac:	08 95       	ret

00000aae <__floatunsisf>:
     aae:	e8 94       	clt
     ab0:	09 c0       	rjmp	.+18     	; 0xac4 <__floatsisf+0x12>

00000ab2 <__floatsisf>:
     ab2:	97 fb       	bst	r25, 7
     ab4:	3e f4       	brtc	.+14     	; 0xac4 <__floatsisf+0x12>
     ab6:	90 95       	com	r25
     ab8:	80 95       	com	r24
     aba:	70 95       	com	r23
     abc:	61 95       	neg	r22
     abe:	7f 4f       	sbci	r23, 0xFF	; 255
     ac0:	8f 4f       	sbci	r24, 0xFF	; 255
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
     ac4:	99 23       	and	r25, r25
     ac6:	a9 f0       	breq	.+42     	; 0xaf2 <__floatsisf+0x40>
     ac8:	f9 2f       	mov	r31, r25
     aca:	96 e9       	ldi	r25, 0x96	; 150
     acc:	bb 27       	eor	r27, r27
     ace:	93 95       	inc	r25
     ad0:	f6 95       	lsr	r31
     ad2:	87 95       	ror	r24
     ad4:	77 95       	ror	r23
     ad6:	67 95       	ror	r22
     ad8:	b7 95       	ror	r27
     ada:	f1 11       	cpse	r31, r1
     adc:	f8 cf       	rjmp	.-16     	; 0xace <__floatsisf+0x1c>
     ade:	fa f4       	brpl	.+62     	; 0xb1e <__floatsisf+0x6c>
     ae0:	bb 0f       	add	r27, r27
     ae2:	11 f4       	brne	.+4      	; 0xae8 <__floatsisf+0x36>
     ae4:	60 ff       	sbrs	r22, 0
     ae6:	1b c0       	rjmp	.+54     	; 0xb1e <__floatsisf+0x6c>
     ae8:	6f 5f       	subi	r22, 0xFF	; 255
     aea:	7f 4f       	sbci	r23, 0xFF	; 255
     aec:	8f 4f       	sbci	r24, 0xFF	; 255
     aee:	9f 4f       	sbci	r25, 0xFF	; 255
     af0:	16 c0       	rjmp	.+44     	; 0xb1e <__floatsisf+0x6c>
     af2:	88 23       	and	r24, r24
     af4:	11 f0       	breq	.+4      	; 0xafa <__floatsisf+0x48>
     af6:	96 e9       	ldi	r25, 0x96	; 150
     af8:	11 c0       	rjmp	.+34     	; 0xb1c <__floatsisf+0x6a>
     afa:	77 23       	and	r23, r23
     afc:	21 f0       	breq	.+8      	; 0xb06 <__floatsisf+0x54>
     afe:	9e e8       	ldi	r25, 0x8E	; 142
     b00:	87 2f       	mov	r24, r23
     b02:	76 2f       	mov	r23, r22
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <__floatsisf+0x5e>
     b06:	66 23       	and	r22, r22
     b08:	71 f0       	breq	.+28     	; 0xb26 <__floatsisf+0x74>
     b0a:	96 e8       	ldi	r25, 0x86	; 134
     b0c:	86 2f       	mov	r24, r22
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	2a f0       	brmi	.+10     	; 0xb1e <__floatsisf+0x6c>
     b14:	9a 95       	dec	r25
     b16:	66 0f       	add	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	88 1f       	adc	r24, r24
     b1c:	da f7       	brpl	.-10     	; 0xb14 <__floatsisf+0x62>
     b1e:	88 0f       	add	r24, r24
     b20:	96 95       	lsr	r25
     b22:	87 95       	ror	r24
     b24:	97 f9       	bld	r25, 7
     b26:	08 95       	ret

00000b28 <__fp_cmp>:
     b28:	99 0f       	add	r25, r25
     b2a:	00 08       	sbc	r0, r0
     b2c:	55 0f       	add	r21, r21
     b2e:	aa 0b       	sbc	r26, r26
     b30:	e0 e8       	ldi	r30, 0x80	; 128
     b32:	fe ef       	ldi	r31, 0xFE	; 254
     b34:	16 16       	cp	r1, r22
     b36:	17 06       	cpc	r1, r23
     b38:	e8 07       	cpc	r30, r24
     b3a:	f9 07       	cpc	r31, r25
     b3c:	c0 f0       	brcs	.+48     	; 0xb6e <__fp_cmp+0x46>
     b3e:	12 16       	cp	r1, r18
     b40:	13 06       	cpc	r1, r19
     b42:	e4 07       	cpc	r30, r20
     b44:	f5 07       	cpc	r31, r21
     b46:	98 f0       	brcs	.+38     	; 0xb6e <__fp_cmp+0x46>
     b48:	62 1b       	sub	r22, r18
     b4a:	73 0b       	sbc	r23, r19
     b4c:	84 0b       	sbc	r24, r20
     b4e:	95 0b       	sbc	r25, r21
     b50:	39 f4       	brne	.+14     	; 0xb60 <__fp_cmp+0x38>
     b52:	0a 26       	eor	r0, r26
     b54:	61 f0       	breq	.+24     	; 0xb6e <__fp_cmp+0x46>
     b56:	23 2b       	or	r18, r19
     b58:	24 2b       	or	r18, r20
     b5a:	25 2b       	or	r18, r21
     b5c:	21 f4       	brne	.+8      	; 0xb66 <__fp_cmp+0x3e>
     b5e:	08 95       	ret
     b60:	0a 26       	eor	r0, r26
     b62:	09 f4       	brne	.+2      	; 0xb66 <__fp_cmp+0x3e>
     b64:	a1 40       	sbci	r26, 0x01	; 1
     b66:	a6 95       	lsr	r26
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	81 1d       	adc	r24, r1
     b6c:	81 1d       	adc	r24, r1
     b6e:	08 95       	ret

00000b70 <__fp_inf>:
     b70:	97 f9       	bld	r25, 7
     b72:	9f 67       	ori	r25, 0x7F	; 127
     b74:	80 e8       	ldi	r24, 0x80	; 128
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	08 95       	ret

00000b7c <__fp_nan>:
     b7c:	9f ef       	ldi	r25, 0xFF	; 255
     b7e:	80 ec       	ldi	r24, 0xC0	; 192
     b80:	08 95       	ret

00000b82 <__fp_pscA>:
     b82:	00 24       	eor	r0, r0
     b84:	0a 94       	dec	r0
     b86:	16 16       	cp	r1, r22
     b88:	17 06       	cpc	r1, r23
     b8a:	18 06       	cpc	r1, r24
     b8c:	09 06       	cpc	r0, r25
     b8e:	08 95       	ret

00000b90 <__fp_pscB>:
     b90:	00 24       	eor	r0, r0
     b92:	0a 94       	dec	r0
     b94:	12 16       	cp	r1, r18
     b96:	13 06       	cpc	r1, r19
     b98:	14 06       	cpc	r1, r20
     b9a:	05 06       	cpc	r0, r21
     b9c:	08 95       	ret

00000b9e <__fp_round>:
     b9e:	09 2e       	mov	r0, r25
     ba0:	03 94       	inc	r0
     ba2:	00 0c       	add	r0, r0
     ba4:	11 f4       	brne	.+4      	; 0xbaa <__fp_round+0xc>
     ba6:	88 23       	and	r24, r24
     ba8:	52 f0       	brmi	.+20     	; 0xbbe <__fp_round+0x20>
     baa:	bb 0f       	add	r27, r27
     bac:	40 f4       	brcc	.+16     	; 0xbbe <__fp_round+0x20>
     bae:	bf 2b       	or	r27, r31
     bb0:	11 f4       	brne	.+4      	; 0xbb6 <__fp_round+0x18>
     bb2:	60 ff       	sbrs	r22, 0
     bb4:	04 c0       	rjmp	.+8      	; 0xbbe <__fp_round+0x20>
     bb6:	6f 5f       	subi	r22, 0xFF	; 255
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	8f 4f       	sbci	r24, 0xFF	; 255
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	08 95       	ret

00000bc0 <__fp_split3>:
     bc0:	57 fd       	sbrc	r21, 7
     bc2:	90 58       	subi	r25, 0x80	; 128
     bc4:	44 0f       	add	r20, r20
     bc6:	55 1f       	adc	r21, r21
     bc8:	59 f0       	breq	.+22     	; 0xbe0 <__fp_splitA+0x10>
     bca:	5f 3f       	cpi	r21, 0xFF	; 255
     bcc:	71 f0       	breq	.+28     	; 0xbea <__fp_splitA+0x1a>
     bce:	47 95       	ror	r20

00000bd0 <__fp_splitA>:
     bd0:	88 0f       	add	r24, r24
     bd2:	97 fb       	bst	r25, 7
     bd4:	99 1f       	adc	r25, r25
     bd6:	61 f0       	breq	.+24     	; 0xbf0 <__fp_splitA+0x20>
     bd8:	9f 3f       	cpi	r25, 0xFF	; 255
     bda:	79 f0       	breq	.+30     	; 0xbfa <__fp_splitA+0x2a>
     bdc:	87 95       	ror	r24
     bde:	08 95       	ret
     be0:	12 16       	cp	r1, r18
     be2:	13 06       	cpc	r1, r19
     be4:	14 06       	cpc	r1, r20
     be6:	55 1f       	adc	r21, r21
     be8:	f2 cf       	rjmp	.-28     	; 0xbce <__fp_split3+0xe>
     bea:	46 95       	lsr	r20
     bec:	f1 df       	rcall	.-30     	; 0xbd0 <__fp_splitA>
     bee:	08 c0       	rjmp	.+16     	; 0xc00 <__fp_splitA+0x30>
     bf0:	16 16       	cp	r1, r22
     bf2:	17 06       	cpc	r1, r23
     bf4:	18 06       	cpc	r1, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	f1 cf       	rjmp	.-30     	; 0xbdc <__fp_splitA+0xc>
     bfa:	86 95       	lsr	r24
     bfc:	71 05       	cpc	r23, r1
     bfe:	61 05       	cpc	r22, r1
     c00:	08 94       	sec
     c02:	08 95       	ret

00000c04 <__fp_zero>:
     c04:	e8 94       	clt

00000c06 <__fp_szero>:
     c06:	bb 27       	eor	r27, r27
     c08:	66 27       	eor	r22, r22
     c0a:	77 27       	eor	r23, r23
     c0c:	cb 01       	movw	r24, r22
     c0e:	97 f9       	bld	r25, 7
     c10:	08 95       	ret

00000c12 <__gesf2>:
     c12:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_cmp>
     c16:	08 f4       	brcc	.+2      	; 0xc1a <__gesf2+0x8>
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	08 95       	ret

00000c1c <__mulsf3>:
     c1c:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3x>
     c20:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_round>
     c24:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_pscA>
     c28:	38 f0       	brcs	.+14     	; 0xc38 <__mulsf3+0x1c>
     c2a:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fp_pscB>
     c2e:	20 f0       	brcs	.+8      	; 0xc38 <__mulsf3+0x1c>
     c30:	95 23       	and	r25, r21
     c32:	11 f0       	breq	.+4      	; 0xc38 <__mulsf3+0x1c>
     c34:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_inf>
     c38:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_nan>
     c3c:	11 24       	eor	r1, r1
     c3e:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__fp_szero>

00000c42 <__mulsf3x>:
     c42:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fp_split3>
     c46:	70 f3       	brcs	.-36     	; 0xc24 <__mulsf3+0x8>

00000c48 <__mulsf3_pse>:
     c48:	95 9f       	mul	r25, r21
     c4a:	c1 f3       	breq	.-16     	; 0xc3c <__mulsf3+0x20>
     c4c:	95 0f       	add	r25, r21
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	55 1f       	adc	r21, r21
     c52:	62 9f       	mul	r22, r18
     c54:	f0 01       	movw	r30, r0
     c56:	72 9f       	mul	r23, r18
     c58:	bb 27       	eor	r27, r27
     c5a:	f0 0d       	add	r31, r0
     c5c:	b1 1d       	adc	r27, r1
     c5e:	63 9f       	mul	r22, r19
     c60:	aa 27       	eor	r26, r26
     c62:	f0 0d       	add	r31, r0
     c64:	b1 1d       	adc	r27, r1
     c66:	aa 1f       	adc	r26, r26
     c68:	64 9f       	mul	r22, r20
     c6a:	66 27       	eor	r22, r22
     c6c:	b0 0d       	add	r27, r0
     c6e:	a1 1d       	adc	r26, r1
     c70:	66 1f       	adc	r22, r22
     c72:	82 9f       	mul	r24, r18
     c74:	22 27       	eor	r18, r18
     c76:	b0 0d       	add	r27, r0
     c78:	a1 1d       	adc	r26, r1
     c7a:	62 1f       	adc	r22, r18
     c7c:	73 9f       	mul	r23, r19
     c7e:	b0 0d       	add	r27, r0
     c80:	a1 1d       	adc	r26, r1
     c82:	62 1f       	adc	r22, r18
     c84:	83 9f       	mul	r24, r19
     c86:	a0 0d       	add	r26, r0
     c88:	61 1d       	adc	r22, r1
     c8a:	22 1f       	adc	r18, r18
     c8c:	74 9f       	mul	r23, r20
     c8e:	33 27       	eor	r19, r19
     c90:	a0 0d       	add	r26, r0
     c92:	61 1d       	adc	r22, r1
     c94:	23 1f       	adc	r18, r19
     c96:	84 9f       	mul	r24, r20
     c98:	60 0d       	add	r22, r0
     c9a:	21 1d       	adc	r18, r1
     c9c:	82 2f       	mov	r24, r18
     c9e:	76 2f       	mov	r23, r22
     ca0:	6a 2f       	mov	r22, r26
     ca2:	11 24       	eor	r1, r1
     ca4:	9f 57       	subi	r25, 0x7F	; 127
     ca6:	50 40       	sbci	r21, 0x00	; 0
     ca8:	9a f0       	brmi	.+38     	; 0xcd0 <__mulsf3_pse+0x88>
     caa:	f1 f0       	breq	.+60     	; 0xce8 <__mulsf3_pse+0xa0>
     cac:	88 23       	and	r24, r24
     cae:	4a f0       	brmi	.+18     	; 0xcc2 <__mulsf3_pse+0x7a>
     cb0:	ee 0f       	add	r30, r30
     cb2:	ff 1f       	adc	r31, r31
     cb4:	bb 1f       	adc	r27, r27
     cb6:	66 1f       	adc	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	88 1f       	adc	r24, r24
     cbc:	91 50       	subi	r25, 0x01	; 1
     cbe:	50 40       	sbci	r21, 0x00	; 0
     cc0:	a9 f7       	brne	.-22     	; 0xcac <__mulsf3_pse+0x64>
     cc2:	9e 3f       	cpi	r25, 0xFE	; 254
     cc4:	51 05       	cpc	r21, r1
     cc6:	80 f0       	brcs	.+32     	; 0xce8 <__mulsf3_pse+0xa0>
     cc8:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_inf>
     ccc:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__fp_szero>
     cd0:	5f 3f       	cpi	r21, 0xFF	; 255
     cd2:	e4 f3       	brlt	.-8      	; 0xccc <__mulsf3_pse+0x84>
     cd4:	98 3e       	cpi	r25, 0xE8	; 232
     cd6:	d4 f3       	brlt	.-12     	; 0xccc <__mulsf3_pse+0x84>
     cd8:	86 95       	lsr	r24
     cda:	77 95       	ror	r23
     cdc:	67 95       	ror	r22
     cde:	b7 95       	ror	r27
     ce0:	f7 95       	ror	r31
     ce2:	e7 95       	ror	r30
     ce4:	9f 5f       	subi	r25, 0xFF	; 255
     ce6:	c1 f7       	brne	.-16     	; 0xcd8 <__mulsf3_pse+0x90>
     ce8:	fe 2b       	or	r31, r30
     cea:	88 0f       	add	r24, r24
     cec:	91 1d       	adc	r25, r1
     cee:	96 95       	lsr	r25
     cf0:	87 95       	ror	r24
     cf2:	97 f9       	bld	r25, 7
     cf4:	08 95       	ret

00000cf6 <dtostrf>:
     cf6:	ef 92       	push	r14
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	e8 01       	movw	r28, r16
     d02:	47 fd       	sbrc	r20, 7
     d04:	16 c0       	rjmp	.+44     	; 0xd32 <dtostrf+0x3c>
     d06:	34 e0       	ldi	r19, 0x04	; 4
     d08:	04 2e       	mov	r0, r20
     d0a:	00 0c       	add	r0, r0
     d0c:	55 0b       	sbc	r21, r21
     d0e:	57 ff       	sbrs	r21, 7
     d10:	03 c0       	rjmp	.+6      	; 0xd18 <dtostrf+0x22>
     d12:	51 95       	neg	r21
     d14:	41 95       	neg	r20
     d16:	51 09       	sbc	r21, r1
     d18:	e3 2e       	mov	r14, r19
     d1a:	02 2f       	mov	r16, r18
     d1c:	24 2f       	mov	r18, r20
     d1e:	ae 01       	movw	r20, r28
     d20:	0e 94 9b 06 	call	0xd36	; 0xd36 <dtoa_prf>
     d24:	ce 01       	movw	r24, r28
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ef 90       	pop	r14
     d30:	08 95       	ret
     d32:	34 e1       	ldi	r19, 0x14	; 20
     d34:	e9 cf       	rjmp	.-46     	; 0xd08 <dtostrf+0x12>

00000d36 <dtoa_prf>:
     d36:	8f 92       	push	r8
     d38:	9f 92       	push	r9
     d3a:	af 92       	push	r10
     d3c:	bf 92       	push	r11
     d3e:	cf 92       	push	r12
     d40:	df 92       	push	r13
     d42:	ef 92       	push	r14
     d44:	ff 92       	push	r15
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	29 97       	sbiw	r28, 0x09	; 9
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	6a 01       	movw	r12, r20
     d60:	f2 2e       	mov	r15, r18
     d62:	b0 2e       	mov	r11, r16
     d64:	2b e3       	ldi	r18, 0x3B	; 59
     d66:	20 17       	cp	r18, r16
     d68:	08 f4       	brcc	.+2      	; 0xd6c <dtoa_prf+0x36>
     d6a:	5f c0       	rjmp	.+190    	; 0xe2a <dtoa_prf+0xf4>
     d6c:	11 e0       	ldi	r17, 0x01	; 1
     d6e:	10 0f       	add	r17, r16
     d70:	01 2f       	mov	r16, r17
     d72:	27 e0       	ldi	r18, 0x07	; 7
     d74:	ae 01       	movw	r20, r28
     d76:	4f 5f       	subi	r20, 0xFF	; 255
     d78:	5f 4f       	sbci	r21, 0xFF	; 255
     d7a:	0e 94 1c 08 	call	0x1038	; 0x1038 <__ftoa_engine>
     d7e:	bc 01       	movw	r22, r24
     d80:	39 81       	ldd	r19, Y+1	; 0x01
     d82:	83 2f       	mov	r24, r19
     d84:	89 70       	andi	r24, 0x09	; 9
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	09 f4       	brne	.+2      	; 0xd8c <dtoa_prf+0x56>
     d8a:	51 c0       	rjmp	.+162    	; 0xe2e <dtoa_prf+0xf8>
     d8c:	e1 fc       	sbrc	r14, 1
     d8e:	51 c0       	rjmp	.+162    	; 0xe32 <dtoa_prf+0xfc>
     d90:	9e 2d       	mov	r25, r14
     d92:	91 70       	andi	r25, 0x01	; 1
     d94:	e0 fc       	sbrc	r14, 0
     d96:	90 e2       	ldi	r25, 0x20	; 32
     d98:	ae 2d       	mov	r26, r14
     d9a:	a0 71       	andi	r26, 0x10	; 16
     d9c:	83 2f       	mov	r24, r19
     d9e:	88 70       	andi	r24, 0x08	; 8
     da0:	33 ff       	sbrs	r19, 3
     da2:	5a c0       	rjmp	.+180    	; 0xe58 <dtoa_prf+0x122>
     da4:	91 11       	cpse	r25, r1
     da6:	47 c0       	rjmp	.+142    	; 0xe36 <dtoa_prf+0x100>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8f 15       	cp	r24, r15
     dac:	08 f0       	brcs	.+2      	; 0xdb0 <dtoa_prf+0x7a>
     dae:	45 c0       	rjmp	.+138    	; 0xe3a <dtoa_prf+0x104>
     db0:	f8 1a       	sub	r15, r24
     db2:	a1 11       	cpse	r26, r1
     db4:	08 c0       	rjmp	.+16     	; 0xdc6 <dtoa_prf+0x90>
     db6:	f6 01       	movw	r30, r12
     db8:	8f 2d       	mov	r24, r15
     dba:	20 e2       	ldi	r18, 0x20	; 32
     dbc:	81 11       	cpse	r24, r1
     dbe:	3f c0       	rjmp	.+126    	; 0xe3e <dtoa_prf+0x108>
     dc0:	cf 0c       	add	r12, r15
     dc2:	d1 1c       	adc	r13, r1
     dc4:	f1 2c       	mov	r15, r1
     dc6:	99 23       	and	r25, r25
     dc8:	29 f0       	breq	.+10     	; 0xdd4 <dtoa_prf+0x9e>
     dca:	d6 01       	movw	r26, r12
     dcc:	9c 93       	st	X, r25
     dce:	f6 01       	movw	r30, r12
     dd0:	31 96       	adiw	r30, 0x01	; 1
     dd2:	6f 01       	movw	r12, r30
     dd4:	c6 01       	movw	r24, r12
     dd6:	03 96       	adiw	r24, 0x03	; 3
     dd8:	e2 fe       	sbrs	r14, 2
     dda:	34 c0       	rjmp	.+104    	; 0xe44 <dtoa_prf+0x10e>
     ddc:	2e e4       	ldi	r18, 0x4E	; 78
     dde:	d6 01       	movw	r26, r12
     de0:	2c 93       	st	X, r18
     de2:	31 e4       	ldi	r19, 0x41	; 65
     de4:	11 96       	adiw	r26, 0x01	; 1
     de6:	3c 93       	st	X, r19
     de8:	11 97       	sbiw	r26, 0x01	; 1
     dea:	12 96       	adiw	r26, 0x02	; 2
     dec:	2c 93       	st	X, r18
     dee:	fc 01       	movw	r30, r24
     df0:	2f 2d       	mov	r18, r15
     df2:	30 e2       	ldi	r19, 0x20	; 32
     df4:	21 11       	cpse	r18, r1
     df6:	2d c0       	rjmp	.+90     	; 0xe52 <dtoa_prf+0x11c>
     df8:	8f 0d       	add	r24, r15
     dfa:	91 1d       	adc	r25, r1
     dfc:	dc 01       	movw	r26, r24
     dfe:	1c 92       	st	X, r1
     e00:	8e ef       	ldi	r24, 0xFE	; 254
     e02:	9f ef       	ldi	r25, 0xFF	; 255
     e04:	29 96       	adiw	r28, 0x09	; 9
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	cf 90       	pop	r12
     e20:	bf 90       	pop	r11
     e22:	af 90       	pop	r10
     e24:	9f 90       	pop	r9
     e26:	8f 90       	pop	r8
     e28:	08 95       	ret
     e2a:	1c e3       	ldi	r17, 0x3C	; 60
     e2c:	a1 cf       	rjmp	.-190    	; 0xd70 <dtoa_prf+0x3a>
     e2e:	9d e2       	ldi	r25, 0x2D	; 45
     e30:	b3 cf       	rjmp	.-154    	; 0xd98 <dtoa_prf+0x62>
     e32:	9b e2       	ldi	r25, 0x2B	; 43
     e34:	b1 cf       	rjmp	.-158    	; 0xd98 <dtoa_prf+0x62>
     e36:	84 e0       	ldi	r24, 0x04	; 4
     e38:	b8 cf       	rjmp	.-144    	; 0xdaa <dtoa_prf+0x74>
     e3a:	f1 2c       	mov	r15, r1
     e3c:	ba cf       	rjmp	.-140    	; 0xdb2 <dtoa_prf+0x7c>
     e3e:	21 93       	st	Z+, r18
     e40:	81 50       	subi	r24, 0x01	; 1
     e42:	bc cf       	rjmp	.-136    	; 0xdbc <dtoa_prf+0x86>
     e44:	2e e6       	ldi	r18, 0x6E	; 110
     e46:	f6 01       	movw	r30, r12
     e48:	20 83       	st	Z, r18
     e4a:	31 e6       	ldi	r19, 0x61	; 97
     e4c:	31 83       	std	Z+1, r19	; 0x01
     e4e:	22 83       	std	Z+2, r18	; 0x02
     e50:	ce cf       	rjmp	.-100    	; 0xdee <dtoa_prf+0xb8>
     e52:	31 93       	st	Z+, r19
     e54:	21 50       	subi	r18, 0x01	; 1
     e56:	ce cf       	rjmp	.-100    	; 0xdf4 <dtoa_prf+0xbe>
     e58:	23 2f       	mov	r18, r19
     e5a:	24 70       	andi	r18, 0x04	; 4
     e5c:	32 ff       	sbrs	r19, 2
     e5e:	41 c0       	rjmp	.+130    	; 0xee2 <dtoa_prf+0x1ac>
     e60:	91 11       	cpse	r25, r1
     e62:	2f c0       	rjmp	.+94     	; 0xec2 <dtoa_prf+0x18c>
     e64:	23 e0       	ldi	r18, 0x03	; 3
     e66:	2f 15       	cp	r18, r15
     e68:	10 f4       	brcc	.+4      	; 0xe6e <dtoa_prf+0x138>
     e6a:	8f 2d       	mov	r24, r15
     e6c:	82 1b       	sub	r24, r18
     e6e:	a1 11       	cpse	r26, r1
     e70:	08 c0       	rjmp	.+16     	; 0xe82 <dtoa_prf+0x14c>
     e72:	f6 01       	movw	r30, r12
     e74:	28 2f       	mov	r18, r24
     e76:	30 e2       	ldi	r19, 0x20	; 32
     e78:	21 11       	cpse	r18, r1
     e7a:	25 c0       	rjmp	.+74     	; 0xec6 <dtoa_prf+0x190>
     e7c:	c8 0e       	add	r12, r24
     e7e:	d1 1c       	adc	r13, r1
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	99 23       	and	r25, r25
     e84:	31 f0       	breq	.+12     	; 0xe92 <dtoa_prf+0x15c>
     e86:	f6 01       	movw	r30, r12
     e88:	90 83       	st	Z, r25
     e8a:	96 01       	movw	r18, r12
     e8c:	2f 5f       	subi	r18, 0xFF	; 255
     e8e:	3f 4f       	sbci	r19, 0xFF	; 255
     e90:	69 01       	movw	r12, r18
     e92:	96 01       	movw	r18, r12
     e94:	2d 5f       	subi	r18, 0xFD	; 253
     e96:	3f 4f       	sbci	r19, 0xFF	; 255
     e98:	e2 fe       	sbrs	r14, 2
     e9a:	18 c0       	rjmp	.+48     	; 0xecc <dtoa_prf+0x196>
     e9c:	99 e4       	ldi	r25, 0x49	; 73
     e9e:	d6 01       	movw	r26, r12
     ea0:	9c 93       	st	X, r25
     ea2:	9e e4       	ldi	r25, 0x4E	; 78
     ea4:	11 96       	adiw	r26, 0x01	; 1
     ea6:	9c 93       	st	X, r25
     ea8:	11 97       	sbiw	r26, 0x01	; 1
     eaa:	96 e4       	ldi	r25, 0x46	; 70
     eac:	12 96       	adiw	r26, 0x02	; 2
     eae:	9c 93       	st	X, r25
     eb0:	f9 01       	movw	r30, r18
     eb2:	98 2f       	mov	r25, r24
     eb4:	40 e2       	ldi	r20, 0x20	; 32
     eb6:	91 11       	cpse	r25, r1
     eb8:	11 c0       	rjmp	.+34     	; 0xedc <dtoa_prf+0x1a6>
     eba:	28 0f       	add	r18, r24
     ebc:	31 1d       	adc	r19, r1
     ebe:	d9 01       	movw	r26, r18
     ec0:	9e cf       	rjmp	.-196    	; 0xdfe <dtoa_prf+0xc8>
     ec2:	24 e0       	ldi	r18, 0x04	; 4
     ec4:	d0 cf       	rjmp	.-96     	; 0xe66 <dtoa_prf+0x130>
     ec6:	31 93       	st	Z+, r19
     ec8:	21 50       	subi	r18, 0x01	; 1
     eca:	d6 cf       	rjmp	.-84     	; 0xe78 <dtoa_prf+0x142>
     ecc:	99 e6       	ldi	r25, 0x69	; 105
     ece:	f6 01       	movw	r30, r12
     ed0:	90 83       	st	Z, r25
     ed2:	9e e6       	ldi	r25, 0x6E	; 110
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	96 e6       	ldi	r25, 0x66	; 102
     ed8:	92 83       	std	Z+2, r25	; 0x02
     eda:	ea cf       	rjmp	.-44     	; 0xeb0 <dtoa_prf+0x17a>
     edc:	41 93       	st	Z+, r20
     ede:	91 50       	subi	r25, 0x01	; 1
     ee0:	ea cf       	rjmp	.-44     	; 0xeb6 <dtoa_prf+0x180>
     ee2:	41 e0       	ldi	r20, 0x01	; 1
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	91 11       	cpse	r25, r1
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <dtoa_prf+0x1b8>
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	16 16       	cp	r1, r22
     ef0:	17 06       	cpc	r1, r23
     ef2:	0c f0       	brlt	.+2      	; 0xef6 <dtoa_prf+0x1c0>
     ef4:	75 c0       	rjmp	.+234    	; 0xfe0 <dtoa_prf+0x2aa>
     ef6:	fb 01       	movw	r30, r22
     ef8:	31 96       	adiw	r30, 0x01	; 1
     efa:	e4 0f       	add	r30, r20
     efc:	f5 1f       	adc	r31, r21
     efe:	bb 20       	and	r11, r11
     f00:	09 f4       	brne	.+2      	; 0xf04 <dtoa_prf+0x1ce>
     f02:	71 c0       	rjmp	.+226    	; 0xfe6 <dtoa_prf+0x2b0>
     f04:	4b 2d       	mov	r20, r11
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	4f 5f       	subi	r20, 0xFF	; 255
     f0a:	5f 4f       	sbci	r21, 0xFF	; 255
     f0c:	4e 0f       	add	r20, r30
     f0e:	5f 1f       	adc	r21, r31
     f10:	ef 2d       	mov	r30, r15
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	4e 17       	cp	r20, r30
     f16:	5f 07       	cpc	r21, r31
     f18:	14 f4       	brge	.+4      	; 0xf1e <dtoa_prf+0x1e8>
     f1a:	2f 2d       	mov	r18, r15
     f1c:	24 1b       	sub	r18, r20
     f1e:	8e 2d       	mov	r24, r14
     f20:	88 71       	andi	r24, 0x18	; 24
     f22:	41 f4       	brne	.+16     	; 0xf34 <dtoa_prf+0x1fe>
     f24:	f6 01       	movw	r30, r12
     f26:	82 2f       	mov	r24, r18
     f28:	40 e2       	ldi	r20, 0x20	; 32
     f2a:	81 11       	cpse	r24, r1
     f2c:	5f c0       	rjmp	.+190    	; 0xfec <dtoa_prf+0x2b6>
     f2e:	c2 0e       	add	r12, r18
     f30:	d1 1c       	adc	r13, r1
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	99 23       	and	r25, r25
     f36:	29 f0       	breq	.+10     	; 0xf42 <dtoa_prf+0x20c>
     f38:	f6 01       	movw	r30, r12
     f3a:	90 83       	st	Z, r25
     f3c:	c6 01       	movw	r24, r12
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	6c 01       	movw	r12, r24
     f42:	a1 11       	cpse	r26, r1
     f44:	08 c0       	rjmp	.+16     	; 0xf56 <dtoa_prf+0x220>
     f46:	f6 01       	movw	r30, r12
     f48:	82 2f       	mov	r24, r18
     f4a:	90 e3       	ldi	r25, 0x30	; 48
     f4c:	81 11       	cpse	r24, r1
     f4e:	51 c0       	rjmp	.+162    	; 0xff2 <dtoa_prf+0x2bc>
     f50:	c2 0e       	add	r12, r18
     f52:	d1 1c       	adc	r13, r1
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	01 2f       	mov	r16, r17
     f58:	06 0f       	add	r16, r22
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	a3 2f       	mov	r26, r19
     f5e:	a0 71       	andi	r26, 0x10	; 16
     f60:	aa 2e       	mov	r10, r26
     f62:	34 ff       	sbrs	r19, 4
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <dtoa_prf+0x236>
     f66:	91 33       	cpi	r25, 0x31	; 49
     f68:	09 f4       	brne	.+2      	; 0xf6c <dtoa_prf+0x236>
     f6a:	01 50       	subi	r16, 0x01	; 1
     f6c:	10 16       	cp	r1, r16
     f6e:	0c f0       	brlt	.+2      	; 0xf72 <dtoa_prf+0x23c>
     f70:	43 c0       	rjmp	.+134    	; 0xff8 <dtoa_prf+0x2c2>
     f72:	09 30       	cpi	r16, 0x09	; 9
     f74:	08 f0       	brcs	.+2      	; 0xf78 <dtoa_prf+0x242>
     f76:	08 e0       	ldi	r16, 0x08	; 8
     f78:	ab 01       	movw	r20, r22
     f7a:	77 ff       	sbrs	r23, 7
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <dtoa_prf+0x24c>
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	fb 01       	movw	r30, r22
     f84:	31 96       	adiw	r30, 0x01	; 1
     f86:	e4 1b       	sub	r30, r20
     f88:	f5 0b       	sbc	r31, r21
     f8a:	a1 e0       	ldi	r26, 0x01	; 1
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ac 0f       	add	r26, r28
     f90:	bd 1f       	adc	r27, r29
     f92:	ea 0f       	add	r30, r26
     f94:	fb 1f       	adc	r31, r27
     f96:	3e e2       	ldi	r19, 0x2E	; 46
     f98:	4b 01       	movw	r8, r22
     f9a:	80 1a       	sub	r8, r16
     f9c:	91 08       	sbc	r9, r1
     f9e:	0b 2d       	mov	r16, r11
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	11 95       	neg	r17
     fa4:	01 95       	neg	r16
     fa6:	11 09       	sbc	r17, r1
     fa8:	4f 3f       	cpi	r20, 0xFF	; 255
     faa:	bf ef       	ldi	r27, 0xFF	; 255
     fac:	5b 07       	cpc	r21, r27
     fae:	21 f4       	brne	.+8      	; 0xfb8 <dtoa_prf+0x282>
     fb0:	d6 01       	movw	r26, r12
     fb2:	3c 93       	st	X, r19
     fb4:	11 96       	adiw	r26, 0x01	; 1
     fb6:	6d 01       	movw	r12, r26
     fb8:	64 17       	cp	r22, r20
     fba:	75 07       	cpc	r23, r21
     fbc:	fc f0       	brlt	.+62     	; 0xffc <dtoa_prf+0x2c6>
     fbe:	84 16       	cp	r8, r20
     fc0:	95 06       	cpc	r9, r21
     fc2:	e4 f4       	brge	.+56     	; 0xffc <dtoa_prf+0x2c6>
     fc4:	80 81       	ld	r24, Z
     fc6:	41 50       	subi	r20, 0x01	; 1
     fc8:	51 09       	sbc	r21, r1
     fca:	31 96       	adiw	r30, 0x01	; 1
     fcc:	d6 01       	movw	r26, r12
     fce:	11 96       	adiw	r26, 0x01	; 1
     fd0:	7d 01       	movw	r14, r26
     fd2:	40 17       	cp	r20, r16
     fd4:	51 07       	cpc	r21, r17
     fd6:	a4 f0       	brlt	.+40     	; 0x1000 <dtoa_prf+0x2ca>
     fd8:	d6 01       	movw	r26, r12
     fda:	8c 93       	st	X, r24
     fdc:	67 01       	movw	r12, r14
     fde:	e4 cf       	rjmp	.-56     	; 0xfa8 <dtoa_prf+0x272>
     fe0:	e1 e0       	ldi	r30, 0x01	; 1
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	8a cf       	rjmp	.-236    	; 0xefa <dtoa_prf+0x1c4>
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	90 cf       	rjmp	.-224    	; 0xf0c <dtoa_prf+0x1d6>
     fec:	41 93       	st	Z+, r20
     fee:	81 50       	subi	r24, 0x01	; 1
     ff0:	9c cf       	rjmp	.-200    	; 0xf2a <dtoa_prf+0x1f4>
     ff2:	91 93       	st	Z+, r25
     ff4:	81 50       	subi	r24, 0x01	; 1
     ff6:	aa cf       	rjmp	.-172    	; 0xf4c <dtoa_prf+0x216>
     ff8:	01 e0       	ldi	r16, 0x01	; 1
     ffa:	be cf       	rjmp	.-132    	; 0xf78 <dtoa_prf+0x242>
     ffc:	80 e3       	ldi	r24, 0x30	; 48
     ffe:	e3 cf       	rjmp	.-58     	; 0xfc6 <dtoa_prf+0x290>
    1000:	64 17       	cp	r22, r20
    1002:	75 07       	cpc	r23, r21
    1004:	31 f4       	brne	.+12     	; 0x1012 <dtoa_prf+0x2dc>
    1006:	96 33       	cpi	r25, 0x36	; 54
    1008:	90 f4       	brcc	.+36     	; 0x102e <dtoa_prf+0x2f8>
    100a:	95 33       	cpi	r25, 0x35	; 53
    100c:	11 f4       	brne	.+4      	; 0x1012 <dtoa_prf+0x2dc>
    100e:	aa 20       	and	r10, r10
    1010:	71 f0       	breq	.+28     	; 0x102e <dtoa_prf+0x2f8>
    1012:	f6 01       	movw	r30, r12
    1014:	80 83       	st	Z, r24
    1016:	f7 01       	movw	r30, r14
    1018:	82 2f       	mov	r24, r18
    101a:	90 e2       	ldi	r25, 0x20	; 32
    101c:	81 11       	cpse	r24, r1
    101e:	09 c0       	rjmp	.+18     	; 0x1032 <dtoa_prf+0x2fc>
    1020:	f7 01       	movw	r30, r14
    1022:	e2 0f       	add	r30, r18
    1024:	f1 1d       	adc	r31, r1
    1026:	10 82       	st	Z, r1
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	eb ce       	rjmp	.-554    	; 0xe04 <dtoa_prf+0xce>
    102e:	81 e3       	ldi	r24, 0x31	; 49
    1030:	f0 cf       	rjmp	.-32     	; 0x1012 <dtoa_prf+0x2dc>
    1032:	91 93       	st	Z+, r25
    1034:	81 50       	subi	r24, 0x01	; 1
    1036:	f2 cf       	rjmp	.-28     	; 0x101c <dtoa_prf+0x2e6>

00001038 <__ftoa_engine>:
    1038:	28 30       	cpi	r18, 0x08	; 8
    103a:	08 f0       	brcs	.+2      	; 0x103e <__ftoa_engine+0x6>
    103c:	27 e0       	ldi	r18, 0x07	; 7
    103e:	33 27       	eor	r19, r19
    1040:	da 01       	movw	r26, r20
    1042:	99 0f       	add	r25, r25
    1044:	31 1d       	adc	r19, r1
    1046:	87 fd       	sbrc	r24, 7
    1048:	91 60       	ori	r25, 0x01	; 1
    104a:	00 96       	adiw	r24, 0x00	; 0
    104c:	61 05       	cpc	r22, r1
    104e:	71 05       	cpc	r23, r1
    1050:	39 f4       	brne	.+14     	; 0x1060 <__ftoa_engine+0x28>
    1052:	32 60       	ori	r19, 0x02	; 2
    1054:	2e 5f       	subi	r18, 0xFE	; 254
    1056:	3d 93       	st	X+, r19
    1058:	30 e3       	ldi	r19, 0x30	; 48
    105a:	2a 95       	dec	r18
    105c:	e1 f7       	brne	.-8      	; 0x1056 <__ftoa_engine+0x1e>
    105e:	08 95       	ret
    1060:	9f 3f       	cpi	r25, 0xFF	; 255
    1062:	30 f0       	brcs	.+12     	; 0x1070 <__ftoa_engine+0x38>
    1064:	80 38       	cpi	r24, 0x80	; 128
    1066:	71 05       	cpc	r23, r1
    1068:	61 05       	cpc	r22, r1
    106a:	09 f0       	breq	.+2      	; 0x106e <__ftoa_engine+0x36>
    106c:	3c 5f       	subi	r19, 0xFC	; 252
    106e:	3c 5f       	subi	r19, 0xFC	; 252
    1070:	3d 93       	st	X+, r19
    1072:	91 30       	cpi	r25, 0x01	; 1
    1074:	08 f0       	brcs	.+2      	; 0x1078 <__ftoa_engine+0x40>
    1076:	80 68       	ori	r24, 0x80	; 128
    1078:	91 1d       	adc	r25, r1
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	1f 93       	push	r17
    1080:	0f 93       	push	r16
    1082:	ff 92       	push	r15
    1084:	ef 92       	push	r14
    1086:	19 2f       	mov	r17, r25
    1088:	98 7f       	andi	r25, 0xF8	; 248
    108a:	96 95       	lsr	r25
    108c:	e9 2f       	mov	r30, r25
    108e:	96 95       	lsr	r25
    1090:	96 95       	lsr	r25
    1092:	e9 0f       	add	r30, r25
    1094:	ff 27       	eor	r31, r31
    1096:	ea 51       	subi	r30, 0x1A	; 26
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	99 27       	eor	r25, r25
    109c:	33 27       	eor	r19, r19
    109e:	ee 24       	eor	r14, r14
    10a0:	ff 24       	eor	r15, r15
    10a2:	a7 01       	movw	r20, r14
    10a4:	e7 01       	movw	r28, r14
    10a6:	05 90       	lpm	r0, Z+
    10a8:	08 94       	sec
    10aa:	07 94       	ror	r0
    10ac:	28 f4       	brcc	.+10     	; 0x10b8 <__ftoa_engine+0x80>
    10ae:	36 0f       	add	r19, r22
    10b0:	e7 1e       	adc	r14, r23
    10b2:	f8 1e       	adc	r15, r24
    10b4:	49 1f       	adc	r20, r25
    10b6:	51 1d       	adc	r21, r1
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	06 94       	lsr	r0
    10c2:	a1 f7       	brne	.-24     	; 0x10ac <__ftoa_engine+0x74>
    10c4:	05 90       	lpm	r0, Z+
    10c6:	07 94       	ror	r0
    10c8:	28 f4       	brcc	.+10     	; 0x10d4 <__ftoa_engine+0x9c>
    10ca:	e7 0e       	add	r14, r23
    10cc:	f8 1e       	adc	r15, r24
    10ce:	49 1f       	adc	r20, r25
    10d0:	56 1f       	adc	r21, r22
    10d2:	c1 1d       	adc	r28, r1
    10d4:	77 0f       	add	r23, r23
    10d6:	88 1f       	adc	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	66 1f       	adc	r22, r22
    10dc:	06 94       	lsr	r0
    10de:	a1 f7       	brne	.-24     	; 0x10c8 <__ftoa_engine+0x90>
    10e0:	05 90       	lpm	r0, Z+
    10e2:	07 94       	ror	r0
    10e4:	28 f4       	brcc	.+10     	; 0x10f0 <__ftoa_engine+0xb8>
    10e6:	f8 0e       	add	r15, r24
    10e8:	49 1f       	adc	r20, r25
    10ea:	56 1f       	adc	r21, r22
    10ec:	c7 1f       	adc	r28, r23
    10ee:	d1 1d       	adc	r29, r1
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	66 1f       	adc	r22, r22
    10f6:	77 1f       	adc	r23, r23
    10f8:	06 94       	lsr	r0
    10fa:	a1 f7       	brne	.-24     	; 0x10e4 <__ftoa_engine+0xac>
    10fc:	05 90       	lpm	r0, Z+
    10fe:	07 94       	ror	r0
    1100:	20 f4       	brcc	.+8      	; 0x110a <__stack+0xb>
    1102:	49 0f       	add	r20, r25
    1104:	56 1f       	adc	r21, r22
    1106:	c7 1f       	adc	r28, r23
    1108:	d8 1f       	adc	r29, r24
    110a:	99 0f       	add	r25, r25
    110c:	66 1f       	adc	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	88 1f       	adc	r24, r24
    1112:	06 94       	lsr	r0
    1114:	a9 f7       	brne	.-22     	; 0x1100 <__stack+0x1>
    1116:	84 91       	lpm	r24, Z
    1118:	10 95       	com	r17
    111a:	17 70       	andi	r17, 0x07	; 7
    111c:	41 f0       	breq	.+16     	; 0x112e <__stack+0x2f>
    111e:	d6 95       	lsr	r29
    1120:	c7 95       	ror	r28
    1122:	57 95       	ror	r21
    1124:	47 95       	ror	r20
    1126:	f7 94       	ror	r15
    1128:	e7 94       	ror	r14
    112a:	1a 95       	dec	r17
    112c:	c1 f7       	brne	.-16     	; 0x111e <__stack+0x1f>
    112e:	ec e8       	ldi	r30, 0x8C	; 140
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	68 94       	set
    1134:	15 90       	lpm	r1, Z+
    1136:	15 91       	lpm	r17, Z+
    1138:	35 91       	lpm	r19, Z+
    113a:	65 91       	lpm	r22, Z+
    113c:	95 91       	lpm	r25, Z+
    113e:	05 90       	lpm	r0, Z+
    1140:	7f e2       	ldi	r23, 0x2F	; 47
    1142:	73 95       	inc	r23
    1144:	e1 18       	sub	r14, r1
    1146:	f1 0a       	sbc	r15, r17
    1148:	43 0b       	sbc	r20, r19
    114a:	56 0b       	sbc	r21, r22
    114c:	c9 0b       	sbc	r28, r25
    114e:	d0 09       	sbc	r29, r0
    1150:	c0 f7       	brcc	.-16     	; 0x1142 <__stack+0x43>
    1152:	e1 0c       	add	r14, r1
    1154:	f1 1e       	adc	r15, r17
    1156:	43 1f       	adc	r20, r19
    1158:	56 1f       	adc	r21, r22
    115a:	c9 1f       	adc	r28, r25
    115c:	d0 1d       	adc	r29, r0
    115e:	7e f4       	brtc	.+30     	; 0x117e <__stack+0x7f>
    1160:	70 33       	cpi	r23, 0x30	; 48
    1162:	11 f4       	brne	.+4      	; 0x1168 <__stack+0x69>
    1164:	8a 95       	dec	r24
    1166:	e6 cf       	rjmp	.-52     	; 0x1134 <__stack+0x35>
    1168:	e8 94       	clt
    116a:	01 50       	subi	r16, 0x01	; 1
    116c:	30 f0       	brcs	.+12     	; 0x117a <__stack+0x7b>
    116e:	08 0f       	add	r16, r24
    1170:	0a f4       	brpl	.+2      	; 0x1174 <__stack+0x75>
    1172:	00 27       	eor	r16, r16
    1174:	02 17       	cp	r16, r18
    1176:	08 f4       	brcc	.+2      	; 0x117a <__stack+0x7b>
    1178:	20 2f       	mov	r18, r16
    117a:	23 95       	inc	r18
    117c:	02 2f       	mov	r16, r18
    117e:	7a 33       	cpi	r23, 0x3A	; 58
    1180:	28 f0       	brcs	.+10     	; 0x118c <__stack+0x8d>
    1182:	79 e3       	ldi	r23, 0x39	; 57
    1184:	7d 93       	st	X+, r23
    1186:	2a 95       	dec	r18
    1188:	e9 f7       	brne	.-6      	; 0x1184 <__stack+0x85>
    118a:	10 c0       	rjmp	.+32     	; 0x11ac <__stack+0xad>
    118c:	7d 93       	st	X+, r23
    118e:	2a 95       	dec	r18
    1190:	89 f6       	brne	.-94     	; 0x1134 <__stack+0x35>
    1192:	06 94       	lsr	r0
    1194:	97 95       	ror	r25
    1196:	67 95       	ror	r22
    1198:	37 95       	ror	r19
    119a:	17 95       	ror	r17
    119c:	17 94       	ror	r1
    119e:	e1 18       	sub	r14, r1
    11a0:	f1 0a       	sbc	r15, r17
    11a2:	43 0b       	sbc	r20, r19
    11a4:	56 0b       	sbc	r21, r22
    11a6:	c9 0b       	sbc	r28, r25
    11a8:	d0 09       	sbc	r29, r0
    11aa:	98 f0       	brcs	.+38     	; 0x11d2 <__stack+0xd3>
    11ac:	23 95       	inc	r18
    11ae:	7e 91       	ld	r23, -X
    11b0:	73 95       	inc	r23
    11b2:	7a 33       	cpi	r23, 0x3A	; 58
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <__stack+0xb9>
    11b6:	70 e3       	ldi	r23, 0x30	; 48
    11b8:	7c 93       	st	X, r23
    11ba:	20 13       	cpse	r18, r16
    11bc:	b8 f7       	brcc	.-18     	; 0x11ac <__stack+0xad>
    11be:	7e 91       	ld	r23, -X
    11c0:	70 61       	ori	r23, 0x10	; 16
    11c2:	7d 93       	st	X+, r23
    11c4:	30 f0       	brcs	.+12     	; 0x11d2 <__stack+0xd3>
    11c6:	83 95       	inc	r24
    11c8:	71 e3       	ldi	r23, 0x31	; 49
    11ca:	7d 93       	st	X+, r23
    11cc:	70 e3       	ldi	r23, 0x30	; 48
    11ce:	2a 95       	dec	r18
    11d0:	e1 f7       	brne	.-8      	; 0x11ca <__stack+0xcb>
    11d2:	11 24       	eor	r1, r1
    11d4:	ef 90       	pop	r14
    11d6:	ff 90       	pop	r15
    11d8:	0f 91       	pop	r16
    11da:	1f 91       	pop	r17
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	99 27       	eor	r25, r25
    11e2:	87 fd       	sbrc	r24, 7
    11e4:	90 95       	com	r25
    11e6:	08 95       	ret

000011e8 <_exit>:
    11e8:	f8 94       	cli

000011ea <__stop_program>:
    11ea:	ff cf       	rjmp	.-2      	; 0x11ea <__stop_program>
