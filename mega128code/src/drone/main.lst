
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00001b68  00001bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b68  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00004530  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001a11  00000000  00000000  00006154  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00007b65  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007b78  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000780  00000000  00000000  00007bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00008334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00008a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00008a69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__ctors_end>
       4:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
       8:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
       c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      10:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      14:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      18:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      1c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      20:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      24:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      28:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      30:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      34:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      38:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      3c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      40:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      44:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      48:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      4c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      50:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      54:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      58:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      5c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      60:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      64:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      68:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      6c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      70:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      74:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      78:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      7c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      80:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      84:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      88:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__trampolines_end>:
      ba:	00 40       	sbci	r16, 0x00	; 0
      bc:	7a 10       	cpse	r7, r10
      be:	f3 5a       	subi	r31, 0xA3	; 163
      c0:	00 a0       	ldd	r0, Z+32	; 0x20
      c2:	72 4e       	sbci	r23, 0xE2	; 226
      c4:	18 09       	sbc	r17, r8
      c6:	00 10       	cpse	r0, r0
      c8:	a5 d4       	rcall	.+2378   	; 0xa14 <USART1_Receive_String+0x46>
      ca:	e8 00       	.word	0x00e8	; ????
      cc:	00 e8       	ldi	r16, 0x80	; 128
      ce:	76 48       	sbci	r23, 0x86	; 134
      d0:	17 00       	.word	0x0017	; ????
      d2:	00 e4       	ldi	r16, 0x40	; 64
      d4:	0b 54       	subi	r16, 0x4B	; 75
      d6:	02 00       	.word	0x0002	; ????
      d8:	00 ca       	rjmp	.-3072   	; 0xfffff4da <__eeprom_end+0xff7ef4da>
      da:	9a 3b       	cpi	r25, 0xBA	; 186
      dc:	00 00       	nop
      de:	00 e1       	ldi	r16, 0x10	; 16
      e0:	f5 05       	cpc	r31, r5
      e2:	00 00       	nop
      e4:	80 96       	adiw	r24, 0x20	; 32
      e6:	98 00       	.word	0x0098	; ????
      e8:	00 00       	nop
      ea:	40 42       	sbci	r20, 0x20	; 32
      ec:	0f 00       	.word	0x000f	; ????
      ee:	00 00       	nop
      f0:	a0 86       	std	Z+8, r10	; 0x08
      f2:	01 00       	.word	0x0001	; ????
      f4:	00 00       	nop
      f6:	10 27       	eor	r17, r16
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	e8 03       	fmulsu	r22, r16
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	64 00       	.word	0x0064	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	0a 00       	.word	0x000a	; ????
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	00 00       	nop
     114:	2c 76       	andi	r18, 0x6C	; 108
     116:	d8 88       	ldd	r13, Y+16	; 0x10
     118:	dc 67       	ori	r29, 0x7C	; 124
     11a:	4f 08       	sbc	r4, r15
     11c:	23 df       	rcall	.-442    	; 0xffffff64 <__eeprom_end+0xff7eff64>
     11e:	c1 df       	rcall	.-126    	; 0xa2 <__SREG__+0x63>
     120:	ae 59       	subi	r26, 0x9E	; 158
     122:	e1 b1       	in	r30, 0x01	; 1
     124:	b7 96       	adiw	r30, 0x27	; 39
     126:	e5 e3       	ldi	r30, 0x35	; 53
     128:	e4 53       	subi	r30, 0x34	; 52
     12a:	c6 3a       	cpi	r28, 0xA6	; 166
     12c:	e6 51       	subi	r30, 0x16	; 22
     12e:	99 76       	andi	r25, 0x69	; 105
     130:	96 e8       	ldi	r25, 0x86	; 134
     132:	e6 c2       	rjmp	.+1484   	; 0x700 <read_adc+0x3c>
     134:	84 26       	eor	r8, r20
     136:	eb 89       	ldd	r30, Y+19	; 0x13
     138:	8c 9b       	sbis	0x11, 4	; 17
     13a:	62 ed       	ldi	r22, 0xD2	; 210
     13c:	40 7c       	andi	r20, 0xC0	; 192
     13e:	6f fc       	.word	0xfc6f	; ????
     140:	ef bc       	out	0x2f, r14	; 47
     142:	9c 9f       	mul	r25, r28
     144:	40 f2       	brcs	.-112    	; 0xd6 <__trampolines_end+0x1c>
     146:	ba a5       	ldd	r27, Y+42	; 0x2a
     148:	6f a5       	ldd	r22, Y+47	; 0x2f
     14a:	f4 90       	lpm	r15, Z
     14c:	05 5a       	subi	r16, 0xA5	; 165
     14e:	2a f7       	brpl	.-54     	; 0x11a <__trampolines_end+0x60>
     150:	5c 93       	st	X, r21
     152:	6b 6c       	ori	r22, 0xCB	; 203
     154:	f9 67       	ori	r31, 0x79	; 121
     156:	6d c1       	rjmp	.+730    	; 0x432 <i2c_start+0x10>
     158:	1b fc       	.word	0xfc1b	; ????
     15a:	e0 e4       	ldi	r30, 0x40	; 64
     15c:	0d 47       	sbci	r16, 0x7D	; 125
     15e:	fe f5       	brtc	.+126    	; 0x1de <__do_copy_data+0x1e>
     160:	20 e6       	ldi	r18, 0x60	; 96
     162:	b5 00       	.word	0x00b5	; ????
     164:	d0 ed       	ldi	r29, 0xD0	; 208
     166:	90 2e       	mov	r9, r16
     168:	03 00       	.word	0x0003	; ????
     16a:	94 35       	cpi	r25, 0x54	; 84
     16c:	77 05       	cpc	r23, r7
     16e:	00 80       	ld	r0, Z
     170:	84 1e       	adc	r8, r20
     172:	08 00       	.word	0x0008	; ????
     174:	00 20       	and	r0, r0
     176:	4e 0a       	sbc	r4, r30
     178:	00 00       	nop
     17a:	00 c8       	rjmp	.-4096   	; 0xfffff17c <__eeprom_end+0xff7ef17c>
     17c:	0c 33       	cpi	r16, 0x3C	; 60
     17e:	33 33       	cpi	r19, 0x33	; 51
     180:	33 0f       	add	r19, r19
     182:	98 6e       	ori	r25, 0xE8	; 232
     184:	12 83       	std	Z+2, r17	; 0x02
     186:	11 41       	sbci	r17, 0x11	; 17
     188:	ef 8d       	ldd	r30, Y+31	; 0x1f
     18a:	21 14       	cp	r2, r1
     18c:	89 3b       	cpi	r24, 0xB9	; 185
     18e:	e6 55       	subi	r30, 0x56	; 86
     190:	16 cf       	rjmp	.-468    	; 0xffffffbe <__eeprom_end+0xff7effbe>
     192:	fe e6       	ldi	r31, 0x6E	; 110
     194:	db 18       	sub	r13, r11
     196:	d1 84       	ldd	r13, Z+9	; 0x09
     198:	4b 38       	cpi	r20, 0x8B	; 139
     19a:	1b f7       	brvc	.-58     	; 0x162 <__trampolines_end+0xa8>
     19c:	7c 1d       	adc	r23, r12
     19e:	90 1d       	adc	r25, r0
     1a0:	a4 bb       	out	0x14, r26	; 20
     1a2:	e4 24       	eor	r14, r4
     1a4:	20 32       	cpi	r18, 0x20	; 32
     1a6:	84 72       	andi	r24, 0x24	; 36
     1a8:	5e 22       	and	r5, r30
     1aa:	81 00       	.word	0x0081	; ????
     1ac:	c9 f1       	breq	.+114    	; 0x220 <path1+0x3a>
     1ae:	24 ec       	ldi	r18, 0xC4	; 196
     1b0:	a1 e5       	ldi	r26, 0x51	; 81
     1b2:	3d 27       	eor	r19, r29

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d0 e1       	ldi	r29, 0x10	; 16
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	11 e0       	ldi	r17, 0x01	; 1
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	e8 e6       	ldi	r30, 0x68	; 104
     1c8:	fb e1       	ldi	r31, 0x1B	; 27
     1ca:	00 e0       	ldi	r16, 0x00	; 0
     1cc:	0b bf       	out	0x3b, r16	; 59
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__do_copy_data+0x14>
     1d0:	07 90       	elpm	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	a8 34       	cpi	r26, 0x48	; 72
     1d6:	b1 07       	cpc	r27, r17
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <__do_copy_data+0x10>
     1da:	0e 94 83 07 	call	0xf06	; 0xf06 <main>
     1de:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <_exit>

000001e2 <__bad_interrupt>:
     1e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e6 <path1>:
    }

    return 0;
}

void path1(){
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    move(50 + (MOVE_SPEED/2),50 + (MOVE_SPEED/2),STABLE_Z);
     1ee:	e1 2c       	mov	r14, r1
     1f0:	f1 2c       	mov	r15, r1
     1f2:	08 e4       	ldi	r16, 0x48	; 72
     1f4:	12 e4       	ldi	r17, 0x42	; 66
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	46 e9       	ldi	r20, 0x96	; 150
     1fc:	52 e4       	ldi	r21, 0x42	; 66
     1fe:	ca 01       	movw	r24, r20
     200:	b9 01       	movw	r22, r18
     202:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     206:	2f ef       	ldi	r18, 0xFF	; 255
     208:	87 ea       	ldi	r24, 0xA7	; 167
     20a:	91 e6       	ldi	r25, 0x61	; 97
     20c:	21 50       	subi	r18, 0x01	; 1
     20e:	80 40       	sbci	r24, 0x00	; 0
     210:	90 40       	sbci	r25, 0x00	; 0
     212:	e1 f7       	brne	.-8      	; 0x20c <path1+0x26>
     214:	00 c0       	rjmp	.+0      	; 0x216 <path1+0x30>
     216:	00 00       	nop
    _delay_ms(2000);
    //Down 3 seconds (aim for about 4 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Down");
    move (50,50,0);
     218:	e1 2c       	mov	r14, r1
     21a:	f1 2c       	mov	r15, r1
     21c:	87 01       	movw	r16, r14
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	48 e4       	ldi	r20, 0x48	; 72
     224:	52 e4       	ldi	r21, 0x42	; 66
     226:	ca 01       	movw	r24, r20
     228:	b9 01       	movw	r22, r18
     22a:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
     22e:	2f ef       	ldi	r18, 0xFF	; 255
     230:	8b e7       	ldi	r24, 0x7B	; 123
     232:	92 e9       	ldi	r25, 0x92	; 146
     234:	21 50       	subi	r18, 0x01	; 1
     236:	80 40       	sbci	r24, 0x00	; 0
     238:	90 40       	sbci	r25, 0x00	; 0
     23a:	e1 f7       	brne	.-8      	; 0x234 <path1+0x4e>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <path1+0x58>
     23e:	00 00       	nop
    _delay_ms(3000);
    //spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     240:	e1 2c       	mov	r14, r1
     242:	f1 2c       	mov	r15, r1
     244:	08 e4       	ldi	r16, 0x48	; 72
     246:	12 e4       	ldi	r17, 0x42	; 66
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	46 e9       	ldi	r20, 0x96	; 150
     24e:	52 e4       	ldi	r21, 0x42	; 66
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	88 ec       	ldi	r24, 0xC8	; 200
     256:	91 e4       	ldi	r25, 0x41	; 65
     258:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
     25c:	2f ef       	ldi	r18, 0xFF	; 255
     25e:	87 ea       	ldi	r24, 0xA7	; 167
     260:	91 e6       	ldi	r25, 0x61	; 97
     262:	21 50       	subi	r18, 0x01	; 1
     264:	80 40       	sbci	r24, 0x00	; 0
     266:	90 40       	sbci	r25, 0x00	; 0
     268:	e1 f7       	brne	.-8      	; 0x262 <path1+0x7c>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <path1+0x86>
     26c:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	46 e9       	ldi	r20, 0x96	; 150
     274:	52 e4       	ldi	r21, 0x42	; 66
     276:	ca 01       	movw	r24, r20
     278:	b9 01       	movw	r22, r18
     27a:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
     27e:	2f ef       	ldi	r18, 0xFF	; 255
     280:	87 ea       	ldi	r24, 0xA7	; 167
     282:	91 e6       	ldi	r25, 0x61	; 97
     284:	21 50       	subi	r18, 0x01	; 1
     286:	80 40       	sbci	r24, 0x00	; 0
     288:	90 40       	sbci	r25, 0x00	; 0
     28a:	e1 f7       	brne	.-8      	; 0x284 <path1+0x9e>
     28c:	00 c0       	rjmp	.+0      	; 0x28e <path1+0xa8>
     28e:	00 00       	nop
    _delay_ms(2000);
    //Spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	46 e9       	ldi	r20, 0x96	; 150
     296:	52 e4       	ldi	r21, 0x42	; 66
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	88 ec       	ldi	r24, 0xC8	; 200
     29e:	91 e4       	ldi	r25, 0x41	; 65
     2a0:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
     2a4:	2f ef       	ldi	r18, 0xFF	; 255
     2a6:	87 ea       	ldi	r24, 0xA7	; 167
     2a8:	91 e6       	ldi	r25, 0x61	; 97
     2aa:	21 50       	subi	r18, 0x01	; 1
     2ac:	80 40       	sbci	r24, 0x00	; 0
     2ae:	90 40       	sbci	r25, 0x00	; 0
     2b0:	e1 f7       	brne	.-8      	; 0x2aa <path1+0xc4>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <path1+0xce>
     2b4:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	46 e9       	ldi	r20, 0x96	; 150
     2bc:	52 e4       	ldi	r21, 0x42	; 66
     2be:	ca 01       	movw	r24, r20
     2c0:	b9 01       	movw	r22, r18
     2c2:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
     2c6:	2f ef       	ldi	r18, 0xFF	; 255
     2c8:	87 ea       	ldi	r24, 0xA7	; 167
     2ca:	91 e6       	ldi	r25, 0x61	; 97
     2cc:	21 50       	subi	r18, 0x01	; 1
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	90 40       	sbci	r25, 0x00	; 0
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <path1+0xe6>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <path1+0xf0>
     2d6:	00 00       	nop
    _delay_ms(2000);
    //Up 3 seconds (resurface)
    // clear_display();
    // string2lcd((unsigned char *)"Up");
    move(50,50,100);
     2d8:	e1 2c       	mov	r14, r1
     2da:	f1 2c       	mov	r15, r1
     2dc:	08 ec       	ldi	r16, 0xC8	; 200
     2de:	12 e4       	ldi	r17, 0x42	; 66
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	48 e4       	ldi	r20, 0x48	; 72
     2e6:	52 e4       	ldi	r21, 0x42	; 66
     2e8:	ca 01       	movw	r24, r20
     2ea:	b9 01       	movw	r22, r18
     2ec:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
    //Spin left 90 degrees
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     2f0:	e1 2c       	mov	r14, r1
     2f2:	f1 2c       	mov	r15, r1
     2f4:	08 e4       	ldi	r16, 0x48	; 72
     2f6:	12 e4       	ldi	r17, 0x42	; 66
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	46 e9       	ldi	r20, 0x96	; 150
     2fe:	52 e4       	ldi	r21, 0x42	; 66
     300:	ca 01       	movw	r24, r20
     302:	b9 01       	movw	r22, r18
     304:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
    //Spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	46 e9       	ldi	r20, 0x96	; 150
     30e:	52 e4       	ldi	r21, 0x42	; 66
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	88 ec       	ldi	r24, 0xC8	; 200
     316:	91 e4       	ldi	r25, 0x41	; 65
     318:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
     31c:	2f ef       	ldi	r18, 0xFF	; 255
     31e:	87 ea       	ldi	r24, 0xA7	; 167
     320:	91 e6       	ldi	r25, 0x61	; 97
     322:	21 50       	subi	r18, 0x01	; 1
     324:	80 40       	sbci	r24, 0x00	; 0
     326:	90 40       	sbci	r25, 0x00	; 0
     328:	e1 f7       	brne	.-8      	; 0x322 <path1+0x13c>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <path1+0x146>
     32c:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Complete (back in some position as start)
}
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	08 95       	ret

00000338 <path2>:
     338:	08 95       	ret

0000033a <path3>:
void path2(){
    //Implement if necessary
}
void path3(){
     33a:	08 95       	ret

0000033c <turn>:
    //Implement if necessary
}

void turn(int degrees){
     33c:	cf 92       	push	r12
     33e:	df 92       	push	r13
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	ec 01       	movw	r28, r24
    int *x = 0;
    int *y = 0;
    int *z = 0;
    float headingDegrees = getHeading(x,y,z);
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 c0 06 	call	0xd80	; 0xd80 <getHeading>
     35e:	6b 01       	movw	r12, r22
     360:	7c 01       	movw	r14, r24
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
     362:	be 01       	movw	r22, r28
     364:	0d 2e       	mov	r0, r29
     366:	00 0c       	add	r0, r0
     368:	88 0b       	sbc	r24, r24
     36a:	99 0b       	sbc	r25, r25
     36c:	0e 94 b3 09 	call	0x1366	; 0x1366 <__floatsisf>
     370:	a7 01       	movw	r20, r14
     372:	96 01       	movw	r18, r12
     374:	0e 94 26 08 	call	0x104c	; 0x104c <__addsf3>
     378:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__fixsfsi>
     37c:	cb 01       	movw	r24, r22
     37e:	68 e6       	ldi	r22, 0x68	; 104
     380:	71 e0       	ldi	r23, 0x01	; 1
     382:	0e 94 08 0b 	call	0x1610	; 0x1610 <__divmodhi4>
     386:	8c 01       	movw	r16, r24
    if (degrees < 0){
     388:	d7 fd       	sbrc	r29, 7
     38a:	29 c0       	rjmp	.+82     	; 0x3de <turn+0xa2>
        while ((int)headingDegrees != new_heading){
            move(-TURN_SPEED,TURN_SPEED,50);
            getHeading(x,y,z);
        }
    }
    else if (degrees > 0){
     38c:	cd 2b       	or	r28, r29
     38e:	f1 f0       	breq	.+60     	; 0x3cc <turn+0x90>
        //Spin right until new heading
        while ((int)headingDegrees != (int)new_heading){
     390:	c7 01       	movw	r24, r14
     392:	b6 01       	movw	r22, r12
     394:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__fixsfsi>
     398:	06 17       	cp	r16, r22
     39a:	17 07       	cpc	r17, r23
     39c:	b9 f0       	breq	.+46     	; 0x3cc <turn+0x90>
            move(TURN_SPEED,-TURN_SPEED,50);
     39e:	e1 2c       	mov	r14, r1
     3a0:	f1 2c       	mov	r15, r1
     3a2:	08 e4       	ldi	r16, 0x48	; 72
     3a4:	12 e4       	ldi	r17, 0x42	; 66
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e7       	ldi	r20, 0x70	; 112
     3ac:	51 ec       	ldi	r21, 0xC1	; 193
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	80 e7       	ldi	r24, 0x70	; 112
     3b4:	91 e4       	ldi	r25, 0x41	; 65
     3b6:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
            getHeading(x,y,z);
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	50 e0       	ldi	r21, 0x00	; 0
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 c0 06 	call	0xd80	; 0xd80 <getHeading>
     3ca:	e9 cf       	rjmp	.-46     	; 0x39e <turn+0x62>
        }
    }
}
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	08 95       	ret
    float headingDegrees = getHeading(x,y,z);
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
    if (degrees < 0){
        //Spin left until new heading
        while ((int)headingDegrees != new_heading){
     3de:	c7 01       	movw	r24, r14
     3e0:	b6 01       	movw	r22, r12
     3e2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__fixsfsi>
     3e6:	06 17       	cp	r16, r22
     3e8:	17 07       	cpc	r17, r23
     3ea:	81 f3       	breq	.-32     	; 0x3cc <turn+0x90>
            move(-TURN_SPEED,TURN_SPEED,50);
     3ec:	e1 2c       	mov	r14, r1
     3ee:	f1 2c       	mov	r15, r1
     3f0:	08 e4       	ldi	r16, 0x48	; 72
     3f2:	12 e4       	ldi	r17, 0x42	; 66
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	40 e7       	ldi	r20, 0x70	; 112
     3fa:	51 e4       	ldi	r21, 0x41	; 65
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 e7       	ldi	r24, 0x70	; 112
     402:	91 ec       	ldi	r25, 0xC1	; 193
     404:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
            getHeading(x,y,z);
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 c0 06 	call	0xd80	; 0xd80 <getHeading>
     418:	e9 cf       	rjmp	.-46     	; 0x3ec <turn+0xb0>

0000041a <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     41a:	88 e4       	ldi	r24, 0x48	; 72
     41c:	80 93 70 00 	sts	0x0070, r24
     420:	08 95       	ret

00000422 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     422:	10 92 74 00 	sts	0x0074, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     426:	94 ea       	ldi	r25, 0xA4	; 164
     428:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     42c:	90 91 74 00 	lds	r25, 0x0074
     430:	97 ff       	sbrs	r25, 7
     432:	fc cf       	rjmp	.-8      	; 0x42c <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     434:	90 91 71 00 	lds	r25, 0x0071
     438:	98 7f       	andi	r25, 0xF8	; 248
     43a:	98 30       	cpi	r25, 0x08	; 8
     43c:	11 f0       	breq	.+4      	; 0x442 <i2c_start+0x20>
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
     442:	80 93 73 00 	sts	0x0073, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     446:	84 e8       	ldi	r24, 0x84	; 132
     448:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     44c:	80 91 74 00 	lds	r24, 0x0074
     450:	87 ff       	sbrs	r24, 7
     452:	fc cf       	rjmp	.-8      	; 0x44c <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     454:	80 91 71 00 	lds	r24, 0x0071
     458:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     45a:	88 31       	cpi	r24, 0x18	; 24
     45c:	11 f0       	breq	.+4      	; 0x462 <i2c_start+0x40>
     45e:	80 34       	cpi	r24, 0x40	; 64
     460:	71 f7       	brne	.-36     	; 0x43e <i2c_start+0x1c>
	
	return 0;
     462:	80 e0       	ldi	r24, 0x00	; 0
}
     464:	08 95       	ret

00000466 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     466:	80 93 73 00 	sts	0x0073, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     46a:	84 e8       	ldi	r24, 0x84	; 132
     46c:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     470:	80 91 74 00 	lds	r24, 0x0074
     474:	87 ff       	sbrs	r24, 7
     476:	fc cf       	rjmp	.-8      	; 0x470 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     478:	90 91 71 00 	lds	r25, 0x0071
     47c:	98 7f       	andi	r25, 0xF8	; 248
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	98 32       	cpi	r25, 0x28	; 40
     482:	09 f0       	breq	.+2      	; 0x486 <i2c_write+0x20>
	
	return 0;
}
     484:	08 95       	ret
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     486:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     488:	08 95       	ret

0000048a <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     48a:	84 ec       	ldi	r24, 0xC4	; 196
     48c:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     490:	80 91 74 00 	lds	r24, 0x0074
     494:	87 ff       	sbrs	r24, 7
     496:	fc cf       	rjmp	.-8      	; 0x490 <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
     498:	80 91 73 00 	lds	r24, 0x0073
}
     49c:	08 95       	ret

0000049e <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     49e:	84 e8       	ldi	r24, 0x84	; 132
     4a0:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4a4:	80 91 74 00 	lds	r24, 0x0074
     4a8:	87 ff       	sbrs	r24, 7
     4aa:	fc cf       	rjmp	.-8      	; 0x4a4 <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
     4ac:	80 91 73 00 	lds	r24, 0x0073
}
     4b0:	08 95       	ret

000004b2 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	8b 01       	movw	r16, r22
     4bc:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     4be:	0e 94 11 02 	call	0x422	; 0x422 <i2c_start>
     4c2:	81 11       	cpse	r24, r1
     4c4:	1f c0       	rjmp	.+62     	; 0x504 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
     4c6:	20 97       	sbiw	r28, 0x00	; 0
     4c8:	a9 f0       	breq	.+42     	; 0x4f4 <i2c_transmit+0x42>
     4ca:	f8 01       	movw	r30, r16
     4cc:	c0 0f       	add	r28, r16
     4ce:	d1 1f       	adc	r29, r17
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     4d0:	24 e8       	ldi	r18, 0x84	; 132
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     4d2:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     4d4:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     4d8:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4dc:	90 91 74 00 	lds	r25, 0x0074
     4e0:	97 ff       	sbrs	r25, 7
     4e2:	fc cf       	rjmp	.-8      	; 0x4dc <i2c_transmit+0x2a>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     4e4:	90 91 71 00 	lds	r25, 0x0071
     4e8:	98 7f       	andi	r25, 0xF8	; 248
     4ea:	98 32       	cpi	r25, 0x28	; 40
     4ec:	59 f4       	brne	.+22     	; 0x504 <i2c_transmit+0x52>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
     4ee:	ec 17       	cp	r30, r28
     4f0:	fd 07       	cpc	r31, r29
     4f2:	79 f7       	brne	.-34     	; 0x4d2 <i2c_transmit+0x20>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     4f4:	94 e9       	ldi	r25, 0x94	; 148
     4f6:	90 93 74 00 	sts	0x0074, r25
	}
	
	i2c_stop();
	
	return 0;
}
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	08 95       	ret
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     504:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	8b 01       	movw	r16, r22
     51a:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_READ)) return 1;
     51c:	81 60       	ori	r24, 0x01	; 1
     51e:	0e 94 11 02 	call	0x422	; 0x422 <i2c_start>
     522:	81 11       	cpse	r24, r1
     524:	25 c0       	rjmp	.+74     	; 0x570 <i2c_receive+0x60>
	
	for (uint16_t i = 0; i < (length-1); i++)
     526:	de 01       	movw	r26, r28
     528:	11 97       	sbiw	r26, 0x01	; 1
     52a:	41 f1       	breq	.+80     	; 0x57c <i2c_receive+0x6c>
     52c:	f8 01       	movw	r30, r16
     52e:	a0 0f       	add	r26, r16
     530:	b1 1f       	adc	r27, r17

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     532:	24 ec       	ldi	r18, 0xC4	; 196
     534:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     538:	90 91 74 00 	lds	r25, 0x0074
     53c:	97 ff       	sbrs	r25, 7
     53e:	fc cf       	rjmp	.-8      	; 0x538 <i2c_receive+0x28>
	// return received data from TWDR
	return TWDR;
     540:	90 91 73 00 	lds	r25, 0x0073
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     544:	91 93       	st	Z+, r25

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
     546:	ae 17       	cp	r26, r30
     548:	bf 07       	cpc	r27, r31
     54a:	a1 f7       	brne	.-24     	; 0x534 <i2c_receive+0x24>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     54c:	94 e8       	ldi	r25, 0x84	; 132
     54e:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     552:	90 91 74 00 	lds	r25, 0x0074
     556:	97 ff       	sbrs	r25, 7
     558:	fc cf       	rjmp	.-8      	; 0x552 <i2c_receive+0x42>
	// return received data from TWDR
	return TWDR;
     55a:	90 91 73 00 	lds	r25, 0x0073
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     55e:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     560:	94 e9       	ldi	r25, 0x94	; 148
     562:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	08 95       	ret
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
     570:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	08 95       	ret
     57c:	d8 01       	movw	r26, r16
     57e:	e6 cf       	rjmp	.-52     	; 0x54c <i2c_receive+0x3c>

00000580 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	16 2f       	mov	r17, r22
     58c:	f4 2e       	mov	r15, r20
     58e:	05 2f       	mov	r16, r21
     590:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr | 0x00)) return 1;
     592:	0e 94 11 02 	call	0x422	; 0x422 <i2c_start>
     596:	81 11       	cpse	r24, r1
     598:	2c c0       	rjmp	.+88     	; 0x5f2 <i2c_writeReg+0x72>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     59a:	10 93 73 00 	sts	0x0073, r17
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     59e:	94 e8       	ldi	r25, 0x84	; 132
     5a0:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     5a4:	90 91 74 00 	lds	r25, 0x0074
     5a8:	97 ff       	sbrs	r25, 7
     5aa:	fc cf       	rjmp	.-8      	; 0x5a4 <i2c_writeReg+0x24>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     5ac:	90 91 71 00 	lds	r25, 0x0071
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     5b0:	20 97       	sbiw	r28, 0x00	; 0
     5b2:	b1 f0       	breq	.+44     	; 0x5e0 <i2c_writeReg+0x60>
     5b4:	ef 2d       	mov	r30, r15
     5b6:	f0 2f       	mov	r31, r16
     5b8:	ce 0f       	add	r28, r30
     5ba:	df 1f       	adc	r29, r31
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     5bc:	44 e8       	ldi	r20, 0x84	; 132

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     5be:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     5c0:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     5c4:	40 93 74 00 	sts	0x0074, r20
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     5c8:	90 91 74 00 	lds	r25, 0x0074
     5cc:	97 ff       	sbrs	r25, 7
     5ce:	fc cf       	rjmp	.-8      	; 0x5c8 <i2c_writeReg+0x48>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     5d0:	90 91 71 00 	lds	r25, 0x0071
     5d4:	98 7f       	andi	r25, 0xF8	; 248
     5d6:	98 32       	cpi	r25, 0x28	; 40
     5d8:	61 f4       	brne	.+24     	; 0x5f2 <i2c_writeReg+0x72>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     5da:	ec 17       	cp	r30, r28
     5dc:	fd 07       	cpc	r31, r29
     5de:	79 f7       	brne	.-34     	; 0x5be <i2c_writeReg+0x3e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     5e0:	94 e9       	ldi	r25, 0x94	; 148
     5e2:	90 93 74 00 	sts	0x0074, r25
	}

	i2c_stop();

	return 0;
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	08 95       	ret
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	08 95       	ret

00000600 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	18 2f       	mov	r17, r24
     60e:	06 2f       	mov	r16, r22
     610:	7a 01       	movw	r14, r20
     612:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
     614:	0e 94 11 02 	call	0x422	; 0x422 <i2c_start>
     618:	81 11       	cpse	r24, r1
     61a:	38 c0       	rjmp	.+112    	; 0x68c <i2c_readReg+0x8c>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     61c:	00 93 73 00 	sts	0x0073, r16
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     620:	84 e8       	ldi	r24, 0x84	; 132
     622:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     626:	80 91 74 00 	lds	r24, 0x0074
     62a:	87 ff       	sbrs	r24, 7
     62c:	fc cf       	rjmp	.-8      	; 0x626 <i2c_readReg+0x26>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     62e:	80 91 71 00 	lds	r24, 0x0071
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
     632:	81 2f       	mov	r24, r17
     634:	81 60       	ori	r24, 0x01	; 1
     636:	0e 94 11 02 	call	0x422	; 0x422 <i2c_start>
     63a:	81 11       	cpse	r24, r1
     63c:	27 c0       	rjmp	.+78     	; 0x68c <i2c_readReg+0x8c>

	for (uint16_t i = 0; i < (length-1); i++)
     63e:	de 01       	movw	r26, r28
     640:	11 97       	sbiw	r26, 0x01	; 1
     642:	61 f1       	breq	.+88     	; 0x69c <i2c_readReg+0x9c>
     644:	f7 01       	movw	r30, r14
     646:	ae 0d       	add	r26, r14
     648:	bf 1d       	adc	r27, r15

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     64a:	24 ec       	ldi	r18, 0xC4	; 196
     64c:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     650:	90 91 74 00 	lds	r25, 0x0074
     654:	97 ff       	sbrs	r25, 7
     656:	fc cf       	rjmp	.-8      	; 0x650 <i2c_readReg+0x50>
	// return received data from TWDR
	return TWDR;
     658:	90 91 73 00 	lds	r25, 0x0073

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     65c:	91 93       	st	Z+, r25

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
     65e:	ea 17       	cp	r30, r26
     660:	fb 07       	cpc	r31, r27
     662:	a1 f7       	brne	.-24     	; 0x64c <i2c_readReg+0x4c>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     664:	94 e8       	ldi	r25, 0x84	; 132
     666:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     66a:	90 91 74 00 	lds	r25, 0x0074
     66e:	97 ff       	sbrs	r25, 7
     670:	fc cf       	rjmp	.-8      	; 0x66a <i2c_readReg+0x6a>
	// return received data from TWDR
	return TWDR;
     672:	90 91 73 00 	lds	r25, 0x0073

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     676:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     678:	94 e9       	ldi	r25, 0x94	; 148
     67a:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	08 95       	ret
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
     68c:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	08 95       	ret
     69c:	d7 01       	movw	r26, r14
     69e:	e2 cf       	rjmp	.-60     	; 0x664 <i2c_readReg+0x64>

000006a0 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     6a0:	84 e9       	ldi	r24, 0x94	; 148
     6a2:	80 93 74 00 	sts	0x0074, r24
     6a6:	08 95       	ret

000006a8 <enable_adc>:
#include "./adc.h"


void enable_adc(){
	DDRF = 0x00;
     6a8:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0x00;
     6ac:	10 92 62 00 	sts	0x0062, r1
	//internally wire REFSn bits in the ADMUX register to connect VREF 
		//to internal 2.56v reference --> 0.0025 v/step
	//ADMUX = (1 << REFS0) | (1 << REFS1); //2.56v
	ADMUX = (1 << REFS0); //AVCC
     6b0:	80 e4       	ldi	r24, 0x40	; 64
     6b2:	87 b9       	out	0x07, r24	; 7
	//Single ended input, gain is not allowed
	
	//Default Right Adjusted

	//Set ADEN in ADSCRA to enable ADC
	ADCSRA = (1 << ADEN);
     6b4:	80 e8       	ldi	r24, 0x80	; 128
     6b6:	86 b9       	out	0x06, r24	; 6
	//Set the ADC Clock frequency prescaler to 128 --> 125kHz
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     6b8:	86 b1       	in	r24, 0x06	; 6
     6ba:	87 60       	ori	r24, 0x07	; 7
     6bc:	86 b9       	out	0x06, r24	; 6
	//Set free running mode
	//ADCSRA |= (1 << ADFR);
	//Enable the ADC Interrupt Flag
	ADCSRA |= (1 << ADIE);
     6be:	33 9a       	sbi	0x06, 3	; 6
	//Start first conversion by setting ADSC in ADCSRA
	ADCSRA |= (1 << ADSC);
     6c0:	36 9a       	sbi	0x06, 6	; 6
     6c2:	08 95       	ret

000006c4 <read_adc>:

}
int read_adc(int pin){
     6c4:	fc 01       	movw	r30, r24
	int data;
	if (pin > 7){
     6c6:	08 97       	sbiw	r24, 0x08	; 8
     6c8:	fc f4       	brge	.+62     	; 0x708 <read_adc+0x44>
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	50 e0       	ldi	r21, 0x00	; 0
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
		ADMUX &= ~(1 << i);
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	97 b1       	in	r25, 0x07	; 7
     6d4:	9b 01       	movw	r18, r22
     6d6:	04 2e       	mov	r0, r20
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <read_adc+0x18>
     6da:	22 0f       	add	r18, r18
     6dc:	0a 94       	dec	r0
     6de:	ea f7       	brpl	.-6      	; 0x6da <read_adc+0x16>
     6e0:	20 95       	com	r18
     6e2:	29 23       	and	r18, r25
     6e4:	27 b9       	out	0x07, r18	; 7
	if (pin > 7){
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
     6e6:	4f 5f       	subi	r20, 0xFF	; 255
     6e8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ea:	45 30       	cpi	r20, 0x05	; 5
     6ec:	51 05       	cpc	r21, r1
     6ee:	89 f7       	brne	.-30     	; 0x6d2 <read_adc+0xe>
		ADMUX &= ~(1 << i);
	}
	//set the new mux bit
	ADMUX |= pin;
     6f0:	97 b1       	in	r25, 0x07	; 7
     6f2:	89 2f       	mov	r24, r25
     6f4:	8e 2b       	or	r24, r30
     6f6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
     6f8:	36 9a       	sbi	0x06, 6	; 6
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
     6fa:	34 9b       	sbis	0x06, 4	; 6
     6fc:	fe cf       	rjmp	.-4      	; 0x6fa <read_adc+0x36>
	data = ADCL;
     6fe:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);
     700:	25 b1       	in	r18, 0x05	; 5
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	92 2b       	or	r25, r18
     706:	08 95       	ret

}
int read_adc(int pin){
	int data;
	if (pin > 7){
		return -1;
     708:	8f ef       	ldi	r24, 0xFF	; 255
     70a:	9f ef       	ldi	r25, 0xFF	; 255
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
	data = ADCL;
	data |= (ADCH << 8);
	return data;
}
     70c:	08 95       	ret

0000070e <get_voltage>:
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
     70e:	88 30       	cpi	r24, 0x08	; 8
     710:	91 05       	cpc	r25, r1
     712:	20 f0       	brcs	.+8      	; 0x71c <get_voltage+0xe>
		return 0;
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	cb 01       	movw	r24, r22
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
}
     71a:	08 95       	ret
}
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
		return 0;
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
     71c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <read_adc>
     720:	bc 01       	movw	r22, r24
     722:	99 0f       	add	r25, r25
     724:	88 0b       	sbc	r24, r24
     726:	99 0b       	sbc	r25, r25
     728:	0e 94 b3 09 	call	0x1366	; 0x1366 <__floatsisf>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 ea       	ldi	r20, 0xA0	; 160
     732:	5b e3       	ldi	r21, 0x3B	; 59
     734:	0e 94 97 0a 	call	0x152e	; 0x152e <__mulsf3>
     738:	08 95       	ret

0000073a <strobe_lcd>:
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     73a:	e2 e6       	ldi	r30, 0x62	; 98
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	88 60       	ori	r24, 0x08	; 8
     742:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     744:	80 81       	ld	r24, Z
     746:	87 7f       	andi	r24, 0xF7	; 247
     748:	80 83       	st	Z, r24
     74a:	08 95       	ret

0000074c <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     74c:	77 9b       	sbis	0x0e, 7	; 14
     74e:	fe cf       	rjmp	.-4      	; 0x74c <clear_display>
    SPDR = 0x00;    //command, not data
     750:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     752:	77 9b       	sbis	0x0e, 7	; 14
     754:	fe cf       	rjmp	.-4      	; 0x752 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     75a:	77 9b       	sbis	0x0e, 7	; 14
     75c:	fe cf       	rjmp	.-4      	; 0x75a <clear_display+0xe>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     75e:	80 91 62 00 	lds	r24, 0x0062
     762:	88 60       	ori	r24, 0x08	; 8
     764:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     768:	80 91 62 00 	lds	r24, 0x0062
     76c:	87 7f       	andi	r24, 0xF7	; 247
     76e:	80 93 62 00 	sts	0x0062, r24
     772:	8f e9       	ldi	r24, 0x9F	; 159
     774:	98 e2       	ldi	r25, 0x28	; 40
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	f1 f7       	brne	.-4      	; 0x776 <clear_display+0x2a>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <clear_display+0x30>
     77c:	00 00       	nop
     77e:	08 95       	ret

00000780 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     780:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     782:	77 9b       	sbis	0x0e, 7	; 14
     784:	fe cf       	rjmp	.-4      	; 0x782 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     786:	80 ec       	ldi	r24, 0xC0	; 192
     788:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     78a:	77 9b       	sbis	0x0e, 7	; 14
     78c:	fe cf       	rjmp	.-4      	; 0x78a <home_line2+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     78e:	80 91 62 00 	lds	r24, 0x0062
     792:	88 60       	ori	r24, 0x08	; 8
     794:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     798:	80 91 62 00 	lds	r24, 0x0062
     79c:	87 7f       	andi	r24, 0xF7	; 247
     79e:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a2:	85 ec       	ldi	r24, 0xC5	; 197
     7a4:	8a 95       	dec	r24
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <home_line2+0x24>
     7a8:	00 00       	nop
     7aa:	08 95       	ret

000007ac <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7b0:	77 9b       	sbis	0x0e, 7	; 14
     7b2:	fe cf       	rjmp	.-4      	; 0x7b0 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     7b4:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7b6:	77 9b       	sbis	0x0e, 7	; 14
     7b8:	fe cf       	rjmp	.-4      	; 0x7b6 <char2lcd+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     7ba:	80 91 62 00 	lds	r24, 0x0062
     7be:	88 60       	ori	r24, 0x08	; 8
     7c0:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     7c4:	80 91 62 00 	lds	r24, 0x0062
     7c8:	87 7f       	andi	r24, 0xF7	; 247
     7ca:	80 93 62 00 	sts	0x0062, r24
     7ce:	85 ec       	ldi	r24, 0xC5	; 197
     7d0:	8a 95       	dec	r24
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <char2lcd+0x24>
     7d4:	00 00       	nop
     7d6:	08 95       	ret

000007d8 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	fc 01       	movw	r30, r24
     7de:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     7e4:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7e6:	77 9b       	sbis	0x0e, 7	; 14
     7e8:	fe cf       	rjmp	.-4      	; 0x7e6 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     7ea:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7ec:	77 9b       	sbis	0x0e, 7	; 14
     7ee:	fe cf       	rjmp	.-4      	; 0x7ec <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     7f0:	8d 91       	ld	r24, X+
     7f2:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7f4:	77 9b       	sbis	0x0e, 7	; 14
     7f6:	fe cf       	rjmp	.-4      	; 0x7f4 <string2lcd+0x1c>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     7f8:	90 91 62 00 	lds	r25, 0x0062
     7fc:	98 60       	ori	r25, 0x08	; 8
     7fe:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     802:	90 91 62 00 	lds	r25, 0x0062
     806:	97 7f       	andi	r25, 0xF7	; 247
     808:	90 93 62 00 	sts	0x0062, r25
     80c:	85 ec       	ldi	r24, 0xC5	; 197
     80e:	8a 95       	dec	r24
     810:	f1 f7       	brne	.-4      	; 0x80e <string2lcd+0x36>
     812:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     814:	4f 5f       	subi	r20, 0xFF	; 255
     816:	5f 4f       	sbci	r21, 0xFF	; 255
     818:	ef 01       	movw	r28, r30
     81a:	09 90       	ld	r0, Y+
     81c:	00 20       	and	r0, r0
     81e:	e9 f7       	brne	.-6      	; 0x81a <string2lcd+0x42>
     820:	9e 01       	movw	r18, r28
     822:	2e 1b       	sub	r18, r30
     824:	3f 0b       	sbc	r19, r31
     826:	22 50       	subi	r18, 0x02	; 2
     828:	31 09       	sbc	r19, r1
     82a:	24 17       	cp	r18, r20
     82c:	35 07       	cpc	r19, r21
     82e:	d8 f6       	brcc	.-74     	; 0x7e6 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     836:	e1 e6       	ldi	r30, 0x61	; 97
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	88 60       	ori	r24, 0x08	; 8
     83e:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     840:	88 b3       	in	r24, 0x18	; 24
     842:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     844:	87 b3       	in	r24, 0x17	; 23
     846:	87 60       	ori	r24, 0x07	; 7
     848:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     84a:	80 e5       	ldi	r24, 0x50	; 80
     84c:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	8e b9       	out	0x0e, r24	; 14
     852:	08 95       	ret

00000854 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     854:	8f e5       	ldi	r24, 0x5F	; 95
     856:	9a ee       	ldi	r25, 0xEA	; 234
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <lcd_init+0x4>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <lcd_init+0xa>
     85e:	00 00       	nop
     860:	23 e0       	ldi	r18, 0x03	; 3
     862:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     864:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     866:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     868:	77 9b       	sbis	0x0e, 7	; 14
     86a:	fe cf       	rjmp	.-4      	; 0x868 <lcd_init+0x14>
        SPDR = 0x30;
     86c:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     86e:	77 9b       	sbis	0x0e, 7	; 14
     870:	fe cf       	rjmp	.-4      	; 0x86e <lcd_init+0x1a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     872:	80 91 62 00 	lds	r24, 0x0062
     876:	88 60       	ori	r24, 0x08	; 8
     878:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     87c:	80 91 62 00 	lds	r24, 0x0062
     880:	87 7f       	andi	r24, 0xF7	; 247
     882:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     886:	85 ec       	ldi	r24, 0xC5	; 197
     888:	8a 95       	dec	r24
     88a:	f1 f7       	brne	.-4      	; 0x888 <lcd_init+0x34>
     88c:	00 00       	nop
     88e:	21 50       	subi	r18, 0x01	; 1
     890:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     892:	49 f7       	brne	.-46     	; 0x866 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     894:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     896:	77 9b       	sbis	0x0e, 7	; 14
     898:	fe cf       	rjmp	.-4      	; 0x896 <lcd_init+0x42>
    SPDR = 0x38;
     89a:	88 e3       	ldi	r24, 0x38	; 56
     89c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     89e:	77 9b       	sbis	0x0e, 7	; 14
     8a0:	fe cf       	rjmp	.-4      	; 0x89e <lcd_init+0x4a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     8a2:	80 91 62 00 	lds	r24, 0x0062
     8a6:	88 60       	ori	r24, 0x08	; 8
     8a8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     8ac:	80 91 62 00 	lds	r24, 0x0062
     8b0:	87 7f       	andi	r24, 0xF7	; 247
     8b2:	80 93 62 00 	sts	0x0062, r24
     8b6:	95 ec       	ldi	r25, 0xC5	; 197
     8b8:	9a 95       	dec	r25
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <lcd_init+0x64>
     8bc:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     8be:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8c0:	77 9b       	sbis	0x0e, 7	; 14
     8c2:	fe cf       	rjmp	.-4      	; 0x8c0 <lcd_init+0x6c>
    SPDR = 0x08;
     8c4:	88 e0       	ldi	r24, 0x08	; 8
     8c6:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8c8:	77 9b       	sbis	0x0e, 7	; 14
     8ca:	fe cf       	rjmp	.-4      	; 0x8c8 <lcd_init+0x74>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     8cc:	80 91 62 00 	lds	r24, 0x0062
     8d0:	88 60       	ori	r24, 0x08	; 8
     8d2:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     8d6:	80 91 62 00 	lds	r24, 0x0062
     8da:	87 7f       	andi	r24, 0xF7	; 247
     8dc:	80 93 62 00 	sts	0x0062, r24
     8e0:	85 ec       	ldi	r24, 0xC5	; 197
     8e2:	8a 95       	dec	r24
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <lcd_init+0x8e>
     8e6:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     8e8:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8ea:	77 9b       	sbis	0x0e, 7	; 14
     8ec:	fe cf       	rjmp	.-4      	; 0x8ea <lcd_init+0x96>
    SPDR = 0x01;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8f2:	77 9b       	sbis	0x0e, 7	; 14
     8f4:	fe cf       	rjmp	.-4      	; 0x8f2 <lcd_init+0x9e>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     8f6:	80 91 62 00 	lds	r24, 0x0062
     8fa:	88 60       	ori	r24, 0x08	; 8
     8fc:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     900:	80 91 62 00 	lds	r24, 0x0062
     904:	87 7f       	andi	r24, 0xF7	; 247
     906:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	98 e1       	ldi	r25, 0x18	; 24
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <lcd_init+0xba>
     912:	00 c0       	rjmp	.+0      	; 0x914 <lcd_init+0xc0>
     914:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
     916:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     918:	77 9b       	sbis	0x0e, 7	; 14
     91a:	fe cf       	rjmp	.-4      	; 0x918 <lcd_init+0xc4>
    SPDR = 0x06;
     91c:	86 e0       	ldi	r24, 0x06	; 6
     91e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     920:	77 9b       	sbis	0x0e, 7	; 14
     922:	fe cf       	rjmp	.-4      	; 0x920 <lcd_init+0xcc>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     924:	80 91 62 00 	lds	r24, 0x0062
     928:	88 60       	ori	r24, 0x08	; 8
     92a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     92e:	80 91 62 00 	lds	r24, 0x0062
     932:	87 7f       	andi	r24, 0xF7	; 247
     934:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     938:	95 ec       	ldi	r25, 0xC5	; 197
     93a:	9a 95       	dec	r25
     93c:	f1 f7       	brne	.-4      	; 0x93a <lcd_init+0xe6>
     93e:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     940:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     942:	77 9b       	sbis	0x0e, 7	; 14
     944:	fe cf       	rjmp	.-4      	; 0x942 <lcd_init+0xee>
    SPDR = 0x0E;
     946:	8e e0       	ldi	r24, 0x0E	; 14
     948:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     94a:	77 9b       	sbis	0x0e, 7	; 14
     94c:	fe cf       	rjmp	.-4      	; 0x94a <lcd_init+0xf6>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     94e:	80 91 62 00 	lds	r24, 0x0062
     952:	88 60       	ori	r24, 0x08	; 8
     954:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     958:	80 91 62 00 	lds	r24, 0x0062
     95c:	87 7f       	andi	r24, 0xF7	; 247
     95e:	80 93 62 00 	sts	0x0062, r24
     962:	85 ec       	ldi	r24, 0xC5	; 197
     964:	8a 95       	dec	r24
     966:	f1 f7       	brne	.-4      	; 0x964 <lcd_init+0x110>
     968:	00 00       	nop
     96a:	08 95       	ret

0000096c <USART1_Init>:
#include "uart.h"


void USART1_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     96c:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
     970:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     974:	88 e1       	ldi	r24, 0x18	; 24
     976:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (3<<UCSZ10);
     97a:	86 e0       	ldi	r24, 0x06	; 6
     97c:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     980:	2f ef       	ldi	r18, 0xFF	; 255
     982:	81 ee       	ldi	r24, 0xE1	; 225
     984:	94 e0       	ldi	r25, 0x04	; 4
     986:	21 50       	subi	r18, 0x01	; 1
     988:	80 40       	sbci	r24, 0x00	; 0
     98a:	90 40       	sbci	r25, 0x00	; 0
     98c:	e1 f7       	brne	.-8      	; 0x986 <USART1_Init+0x1a>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <USART1_Init+0x24>
     990:	00 00       	nop
     992:	08 95       	ret

00000994 <USART1_Transmit>:
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     994:	90 91 9b 00 	lds	r25, 0x009B
     998:	95 ff       	sbrs	r25, 5
     99a:	fc cf       	rjmp	.-8      	; 0x994 <USART1_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     99c:	80 93 9c 00 	sts	0x009C, r24
     9a0:	08 95       	ret

000009a2 <USART1_send_string>:
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 81       	ld	r18, Z
     9a6:	22 23       	and	r18, r18
     9a8:	51 f0       	breq	.+20     	; 0x9be <USART1_send_string+0x1c>
     9aa:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     9ac:	90 91 9b 00 	lds	r25, 0x009B
     9b0:	95 ff       	sbrs	r25, 5
     9b2:	fc cf       	rjmp	.-8      	; 0x9ac <USART1_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     9b4:	20 93 9c 00 	sts	0x009C, r18
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     9b8:	21 91       	ld	r18, Z+
     9ba:	21 11       	cpse	r18, r1
     9bc:	f7 cf       	rjmp	.-18     	; 0x9ac <USART1_send_string+0xa>
     9be:	08 95       	ret

000009c0 <USART1_Receive>:
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     9c0:	80 91 9b 00 	lds	r24, 0x009B
     9c4:	87 ff       	sbrs	r24, 7
     9c6:	fc cf       	rjmp	.-8      	; 0x9c0 <USART1_Receive>
    return UDR1;
     9c8:	80 91 9c 00 	lds	r24, 0x009C
}
     9cc:	08 95       	ret

000009ce <USART1_Receive_String>:

void USART1_Receive_String(unsigned char *str){
     9ce:	dc 01       	movw	r26, r24
     9d0:	fc 01       	movw	r30, r24
     9d2:	9c 01       	movw	r18, r24
     9d4:	2b 5f       	subi	r18, 0xFB	; 251
     9d6:	3f 4f       	sbci	r19, 0xFF	; 255
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     9d8:	90 91 9b 00 	lds	r25, 0x009B
     9dc:	97 ff       	sbrs	r25, 7
     9de:	fc cf       	rjmp	.-8      	; 0x9d8 <USART1_Receive_String+0xa>
    return UDR1;
     9e0:	90 91 9c 00 	lds	r25, 0x009C

void USART1_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     9e4:	9e 37       	cpi	r25, 0x7E	; 126
     9e6:	29 f0       	breq	.+10     	; 0x9f2 <USART1_Receive_String+0x24>
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
     9e8:	e2 17       	cp	r30, r18
     9ea:	f3 07       	cpc	r31, r19
     9ec:	19 f0       	breq	.+6      	; 0x9f4 <USART1_Receive_String+0x26>
            str[2] = 75;
            str[3] = END_STRING;
            str[4] = '\0';
            break;
        }
        str[i] = c;
     9ee:	91 93       	st	Z+, r25
     9f0:	f3 cf       	rjmp	.-26     	; 0x9d8 <USART1_Receive_String+0xa>
     9f2:	08 95       	ret
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
     9f4:	82 e3       	ldi	r24, 0x32	; 50
     9f6:	8c 93       	st	X, r24
            str[1] = 25;
     9f8:	89 e1       	ldi	r24, 0x19	; 25
     9fa:	11 96       	adiw	r26, 0x01	; 1
     9fc:	8c 93       	st	X, r24
     9fe:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 75;
     a00:	8b e4       	ldi	r24, 0x4B	; 75
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8c 93       	st	X, r24
     a06:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
     a08:	8e e7       	ldi	r24, 0x7E	; 126
     a0a:	13 96       	adiw	r26, 0x03	; 3
     a0c:	8c 93       	st	X, r24
     a0e:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
     a10:	14 96       	adiw	r26, 0x04	; 4
     a12:	1c 92       	st	X, r1
            break;
     a14:	08 95       	ret

00000a16 <USART1_flush>:
        str[i] = c;
        ++i;
    }
}

void USART1_flush(){
     a16:	e9 e3       	ldi	r30, 0x39	; 57
     a18:	f1 e0       	ldi	r31, 0x01	; 1
     a1a:	96 e4       	ldi	r25, 0x46	; 70
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     a1c:	80 91 9b 00 	lds	r24, 0x009B
     a20:	85 ff       	sbrs	r24, 5
     a22:	fc cf       	rjmp	.-8      	; 0xa1c <USART1_flush+0x6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     a24:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     a28:	91 91       	ld	r25, Z+
     a2a:	91 11       	cpse	r25, r1
     a2c:	f7 cf       	rjmp	.-18     	; 0xa1c <USART1_flush+0x6>
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     a2e:	80 91 9b 00 	lds	r24, 0x009B
     a32:	87 ff       	sbrs	r24, 7
     a34:	0c c0       	rjmp	.+24     	; 0xa4e <USART1_flush+0x38>
        dummy = UDR1;
     a36:	90 91 9c 00 	lds	r25, 0x009C
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     a3a:	80 91 9b 00 	lds	r24, 0x009B
     a3e:	85 ff       	sbrs	r24, 5
     a40:	fc cf       	rjmp	.-8      	; 0xa3a <USART1_flush+0x24>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     a42:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     a46:	80 91 9b 00 	lds	r24, 0x009B
     a4a:	87 fd       	sbrc	r24, 7
     a4c:	f4 cf       	rjmp	.-24     	; 0xa36 <USART1_flush+0x20>
     a4e:	08 95       	ret

00000a50 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     a50:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
     a54:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     a56:	88 e1       	ldi	r24, 0x18	; 24
     a58:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */ 
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
     a5a:	8e e0       	ldi	r24, 0x0E	; 14
     a5c:	80 93 95 00 	sts	0x0095, r24
     a60:	2f ef       	ldi	r18, 0xFF	; 255
     a62:	81 ee       	ldi	r24, 0xE1	; 225
     a64:	94 e0       	ldi	r25, 0x04	; 4
     a66:	21 50       	subi	r18, 0x01	; 1
     a68:	80 40       	sbci	r24, 0x00	; 0
     a6a:	90 40       	sbci	r25, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <USART0_Init+0x16>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <USART0_Init+0x20>
     a70:	00 00       	nop
     a72:	08 95       	ret

00000a74 <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     a74:	5d 9b       	sbis	0x0b, 5	; 11
     a76:	fe cf       	rjmp	.-4      	; 0xa74 <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     a78:	8c b9       	out	0x0c, r24	; 12
     a7a:	08 95       	ret

00000a7c <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
     a7c:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
     a7e:	90 81       	ld	r25, Z
     a80:	99 23       	and	r25, r25
     a82:	39 f0       	breq	.+14     	; 0xa92 <USART0_send_string+0x16>
     a84:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     a86:	5d 9b       	sbis	0x0b, 5	; 11
     a88:	fe cf       	rjmp	.-4      	; 0xa86 <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     a8a:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     a8c:	91 91       	ld	r25, Z+
     a8e:	91 11       	cpse	r25, r1
     a90:	fa cf       	rjmp	.-12     	; 0xa86 <USART0_send_string+0xa>
     a92:	08 95       	ret

00000a94 <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
     a94:	80 e8       	ldi	r24, 0x80	; 128
     a96:	9d e8       	ldi	r25, 0x8D	; 141
     a98:	ab e5       	ldi	r26, 0x5B	; 91
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <USART0_Receive+0x12>
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	a1 09       	sbc	r26, r1
     aa2:	b1 09       	sbc	r27, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
     aa4:	21 f0       	breq	.+8      	; 0xaae <USART0_Receive+0x1a>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
     aa6:	5f 9b       	sbis	0x0b, 7	; 11
     aa8:	fa cf       	rjmp	.-12     	; 0xa9e <USART0_Receive+0xa>
            /* Get and return received data from buffer */ 
            return UDR0;
     aaa:	8c b1       	in	r24, 0x0c	; 12
     aac:	08 95       	ret
        }
    } while (--timeout);
    return 255;
     aae:	8f ef       	ldi	r24, 0xFF	; 255
    /********
    * This is the original
    ************/
    //while (!(UCSR0A & (1<<RXC0)));
    //return UDR0;
}
     ab0:	08 95       	ret

00000ab2 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
     ab2:	dc 01       	movw	r26, r24
     ab4:	fc 01       	movw	r30, r24
     ab6:	9c 01       	movw	r18, r24
     ab8:	2b 5f       	subi	r18, 0xFB	; 251
     aba:	3f 4f       	sbci	r19, 0xFF	; 255
     abc:	40 e8       	ldi	r20, 0x80	; 128
     abe:	5d e8       	ldi	r21, 0x8D	; 141
     ac0:	6b e5       	ldi	r22, 0x5B	; 91
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <USART0_Receive_String+0x1e>
     ac6:	41 50       	subi	r20, 0x01	; 1
     ac8:	51 09       	sbc	r21, r1
     aca:	61 09       	sbc	r22, r1
     acc:	71 09       	sbc	r23, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
     ace:	61 f0       	breq	.+24     	; 0xae8 <USART0_Receive_String+0x36>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
     ad0:	5f 9b       	sbis	0x0b, 7	; 11
     ad2:	f9 cf       	rjmp	.-14     	; 0xac6 <USART0_Receive_String+0x14>
            /* Get and return received data from buffer */ 
            return UDR0;
     ad4:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     ad6:	9e 37       	cpi	r25, 0x7E	; 126
     ad8:	b1 f0       	breq	.+44     	; 0xb06 <USART0_Receive_String+0x54>
        if (c == 255 || i > MAX_STRING_SIZE - 1){
     ada:	9f 3f       	cpi	r25, 0xFF	; 255
     adc:	29 f0       	breq	.+10     	; 0xae8 <USART0_Receive_String+0x36>
     ade:	e2 17       	cp	r30, r18
     ae0:	f3 07       	cpc	r31, r19
     ae2:	11 f0       	breq	.+4      	; 0xae8 <USART0_Receive_String+0x36>
            str[2] = 50;
            str[3] = END_STRING;
            str[4] = '\0';
            return;
        }
        str[i] = c;
     ae4:	91 93       	st	Z+, r25
     ae6:	ea cf       	rjmp	.-44     	; 0xabc <USART0_Receive_String+0xa>
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
     ae8:	82 e3       	ldi	r24, 0x32	; 50
     aea:	8c 93       	st	X, r24
            str[1] = 50;
     aec:	11 96       	adiw	r26, 0x01	; 1
     aee:	8c 93       	st	X, r24
     af0:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
     af2:	12 96       	adiw	r26, 0x02	; 2
     af4:	8c 93       	st	X, r24
     af6:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
     af8:	8e e7       	ldi	r24, 0x7E	; 126
     afa:	13 96       	adiw	r26, 0x03	; 3
     afc:	8c 93       	st	X, r24
     afe:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
     b00:	14 96       	adiw	r26, 0x04	; 4
     b02:	1c 92       	st	X, r1
            return;
     b04:	08 95       	ret
     b06:	08 95       	ret

00000b08 <USART0_flush>:
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
     b08:	5f 9b       	sbis	0x0b, 7	; 11
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <USART0_flush+0xa>
        dummy = UDR0;
     b0c:	8c b1       	in	r24, 0x0c	; 12
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
     b0e:	5f 99       	sbic	0x0b, 7	; 11
     b10:	fd cf       	rjmp	.-6      	; 0xb0c <USART0_flush+0x4>
     b12:	08 95       	ret

00000b14 <init_esc>:
void init_motors(){
    init_esc();
    set_16bitPWM1();
}

void init_esc(){
     b14:	83 e0       	ldi	r24, 0x03	; 3
     b16:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
     b18:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b1a:	ef e6       	ldi	r30, 0x6F	; 111
     b1c:	f7 e1       	ldi	r31, 0x17	; 23
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <init_esc+0xa>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <init_esc+0x10>
     b24:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
     b26:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b28:	ff ef       	ldi	r31, 0xFF	; 255
     b2a:	23 ed       	ldi	r18, 0xD3	; 211
     b2c:	30 e3       	ldi	r19, 0x30	; 48
     b2e:	f1 50       	subi	r31, 0x01	; 1
     b30:	20 40       	sbci	r18, 0x00	; 0
     b32:	30 40       	sbci	r19, 0x00	; 0
     b34:	e1 f7       	brne	.-8      	; 0xb2e <init_esc+0x1a>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <init_esc+0x24>
     b38:	00 00       	nop
     b3a:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
     b3c:	69 f7       	brne	.-38     	; 0xb18 <init_esc+0x4>
        PORTB |= (1 << 4);
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
        _delay_ms(1000);
    }
}
     b3e:	08 95       	ret

00000b40 <set_16bitPWM1>:

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
     b40:	8f b5       	in	r24, 0x2f	; 47
     b42:	80 68       	ori	r24, 0x80	; 128
     b44:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
     b46:	8f b5       	in	r24, 0x2f	; 47
     b48:	80 62       	ori	r24, 0x20	; 32
     b4a:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
     b4c:	8f b5       	in	r24, 0x2f	; 47
     b4e:	88 60       	ori	r24, 0x08	; 8
     b50:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
     b52:	8f b5       	in	r24, 0x2f	; 47
     b54:	82 60       	ori	r24, 0x02	; 2
     b56:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
     b58:	8e b5       	in	r24, 0x2e	; 46
     b5a:	88 61       	ori	r24, 0x18	; 24
     b5c:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
     b5e:	8e b5       	in	r24, 0x2e	; 46
     b60:	82 60       	ori	r24, 0x02	; 2
     b62:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     b64:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     b66:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     b68:	21 e0       	ldi	r18, 0x01	; 1
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	3d bd       	out	0x2d, r19	; 45
     b6e:	2c bd       	out	0x2c, r18	; 44
    sei();
     b70:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     b72:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	9f ef       	ldi	r25, 0xFF	; 255
     b78:	97 bd       	out	0x27, r25	; 39
     b7a:	86 bd       	out	0x26, r24	; 38
     b7c:	2f ef       	ldi	r18, 0xFF	; 255
     b7e:	81 ee       	ldi	r24, 0xE1	; 225
     b80:	94 e0       	ldi	r25, 0x04	; 4
     b82:	21 50       	subi	r18, 0x01	; 1
     b84:	80 40       	sbci	r24, 0x00	; 0
     b86:	90 40       	sbci	r25, 0x00	; 0
     b88:	e1 f7       	brne	.-8      	; 0xb82 <set_16bitPWM1+0x42>
     b8a:	00 c0       	rjmp	.+0      	; 0xb8c <set_16bitPWM1+0x4c>
     b8c:	00 00       	nop
     b8e:	08 95       	ret

00000b90 <init_motors>:
#include "motors.h"

void init_motors(){
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	90 e0       	ldi	r25, 0x00	; 0
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
     b94:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b96:	ef e6       	ldi	r30, 0x6F	; 111
     b98:	f7 e1       	ldi	r31, 0x17	; 23
     b9a:	31 97       	sbiw	r30, 0x01	; 1
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <init_motors+0xa>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <init_motors+0x10>
     ba0:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
     ba2:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba4:	ff ef       	ldi	r31, 0xFF	; 255
     ba6:	23 ed       	ldi	r18, 0xD3	; 211
     ba8:	30 e3       	ldi	r19, 0x30	; 48
     baa:	f1 50       	subi	r31, 0x01	; 1
     bac:	20 40       	sbci	r18, 0x00	; 0
     bae:	30 40       	sbci	r19, 0x00	; 0
     bb0:	e1 f7       	brne	.-8      	; 0xbaa <init_motors+0x1a>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <init_motors+0x24>
     bb4:	00 00       	nop
     bb6:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
     bb8:	69 f7       	brne	.-38     	; 0xb94 <init_motors+0x4>
#include "motors.h"

void init_motors(){
    init_esc();
    set_16bitPWM1();
     bba:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <set_16bitPWM1>

00000bbe <TIM16_WriteTCNT1>:
    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
     bbe:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     bc0:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     bc2:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     bc4:	3d bd       	out	0x2d, r19	; 45
     bc6:	2c bd       	out	0x2c, r18	; 44
    sei();
     bc8:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     bca:	9f bf       	out	0x3f, r25	; 63
     bcc:	08 95       	ret

00000bce <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
     bce:	4f 92       	push	r4
     bd0:	5f 92       	push	r5
     bd2:	6f 92       	push	r6
     bd4:	7f 92       	push	r7
     bd6:	8f 92       	push	r8
     bd8:	9f 92       	push	r9
     bda:	af 92       	push	r10
     bdc:	bf 92       	push	r11
     bde:	cf 92       	push	r12
     be0:	df 92       	push	r13
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	2b 01       	movw	r4, r22
     bf0:	3c 01       	movw	r6, r24
     bf2:	49 01       	movw	r8, r18
     bf4:	5a 01       	movw	r10, r20
     bf6:	67 01       	movw	r12, r14
     bf8:	78 01       	movw	r14, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	a9 01       	movw	r20, r18
     c00:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     c04:	87 fd       	sbrc	r24, 7
     c06:	62 c0       	rjmp	.+196    	; 0xccc <move+0xfe>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	48 ec       	ldi	r20, 0xC8	; 200
     c0e:	52 e4       	ldi	r21, 0x42	; 66
     c10:	c3 01       	movw	r24, r6
     c12:	b2 01       	movw	r22, r4
     c14:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__gesf2>
     c18:	18 16       	cp	r1, r24
     c1a:	0c f0       	brlt	.+2      	; 0xc1e <move+0x50>
     c1c:	61 c0       	rjmp	.+194    	; 0xce0 <move+0x112>
     c1e:	08 ed       	ldi	r16, 0xD8	; 216
     c20:	1e e0       	ldi	r17, 0x0E	; 14
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	a9 01       	movw	r20, r18
     c28:	c5 01       	movw	r24, r10
     c2a:	b4 01       	movw	r22, r8
     c2c:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     c30:	87 fd       	sbrc	r24, 7
     c32:	53 c0       	rjmp	.+166    	; 0xcda <move+0x10c>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	48 ec       	ldi	r20, 0xC8	; 200
     c3a:	52 e4       	ldi	r21, 0x42	; 66
     c3c:	c5 01       	movw	r24, r10
     c3e:	b4 01       	movw	r22, r8
     c40:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__gesf2>
     c44:	18 16       	cp	r1, r24
     c46:	0c f0       	brlt	.+2      	; 0xc4a <move+0x7c>
     c48:	5d c0       	rjmp	.+186    	; 0xd04 <move+0x136>
     c4a:	c8 ed       	ldi	r28, 0xD8	; 216
     c4c:	de e0       	ldi	r29, 0x0E	; 14
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + SATURATE_DIFFERENCE)){
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	a9 01       	movw	r20, r18
     c54:	c7 01       	movw	r24, r14
     c56:	b6 01       	movw	r22, r12
     c58:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     c5c:	87 fd       	sbrc	r24, 7
     c5e:	39 c0       	rjmp	.+114    	; 0xcd2 <move+0x104>
        z = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (z > (MAX_INPUT - SATURATE_DIFFERENCE)){
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	48 ec       	ldi	r20, 0xC8	; 200
     c66:	52 e4       	ldi	r21, 0x42	; 66
     c68:	c7 01       	movw	r24, r14
     c6a:	b6 01       	movw	r22, r12
     c6c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__gesf2>
     c70:	18 16       	cp	r1, r24
     c72:	0c f0       	brlt	.+2      	; 0xc76 <move+0xa8>
     c74:	59 c0       	rjmp	.+178    	; 0xd28 <move+0x15a>
     c76:	c1 2c       	mov	r12, r1
     c78:	d1 2c       	mov	r13, r1
     c7a:	80 e8       	ldi	r24, 0x80	; 128
     c7c:	e8 2e       	mov	r14, r24
     c7e:	8f e3       	ldi	r24, 0x3F	; 63
     c80:	f8 2e       	mov	r15, r24

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different speed controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     c82:	66 b5       	in	r22, 0x26	; 38
     c84:	77 b5       	in	r23, 0x27	; 39
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatunsisf>
     c8e:	a7 01       	movw	r20, r14
     c90:	96 01       	movw	r18, r12
     c92:	0e 94 97 0a 	call	0x152e	; 0x152e <__mulsf3>
     c96:	0e 94 82 09 	call	0x1304	; 0x1304 <__fixunssfsi>
    OCR1A = left_speed;
     c9a:	1b bd       	out	0x2b, r17	; 43
     c9c:	0a bd       	out	0x2a, r16	; 42
    OCR1B = right_speed;
     c9e:	d9 bd       	out	0x29, r29	; 41
     ca0:	c8 bd       	out	0x28, r28	; 40
    OCR1C = z_speed;
     ca2:	70 93 79 00 	sts	0x0079, r23
     ca6:	60 93 78 00 	sts	0x0078, r22

}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	cf 90       	pop	r12
     cba:	bf 90       	pop	r11
     cbc:	af 90       	pop	r10
     cbe:	9f 90       	pop	r9
     cc0:	8f 90       	pop	r8
     cc2:	7f 90       	pop	r7
     cc4:	6f 90       	pop	r6
     cc6:	5f 90       	pop	r5
     cc8:	4f 90       	pop	r4
     cca:	08 95       	ret
     ccc:	08 e9       	ldi	r16, 0x98	; 152
     cce:	18 e0       	ldi	r17, 0x08	; 8
     cd0:	a8 cf       	rjmp	.-176    	; 0xc22 <move+0x54>
     cd2:	c1 2c       	mov	r12, r1
     cd4:	d1 2c       	mov	r13, r1
     cd6:	76 01       	movw	r14, r12
     cd8:	d4 cf       	rjmp	.-88     	; 0xc82 <move+0xb4>
     cda:	c8 e9       	ldi	r28, 0x98	; 152
     cdc:	d8 e0       	ldi	r29, 0x08	; 8
     cde:	b7 cf       	rjmp	.-146    	; 0xc4e <move+0x80>
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e8       	ldi	r20, 0x80	; 128
     ce6:	51 e4       	ldi	r21, 0x41	; 65
     ce8:	c3 01       	movw	r24, r6
     cea:	b2 01       	movw	r22, r4
     cec:	0e 94 97 0a 	call	0x152e	; 0x152e <__mulsf3>
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e8       	ldi	r19, 0x80	; 128
     cf4:	49 e0       	ldi	r20, 0x09	; 9
     cf6:	55 e4       	ldi	r21, 0x45	; 69
     cf8:	0e 94 26 08 	call	0x104c	; 0x104c <__addsf3>
     cfc:	0e 94 82 09 	call	0x1304	; 0x1304 <__fixunssfsi>
     d00:	8b 01       	movw	r16, r22
     d02:	8f cf       	rjmp	.-226    	; 0xc22 <move+0x54>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e8       	ldi	r20, 0x80	; 128
     d0a:	51 e4       	ldi	r21, 0x41	; 65
     d0c:	c5 01       	movw	r24, r10
     d0e:	b4 01       	movw	r22, r8
     d10:	0e 94 97 0a 	call	0x152e	; 0x152e <__mulsf3>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e8       	ldi	r19, 0x80	; 128
     d18:	49 e0       	ldi	r20, 0x09	; 9
     d1a:	55 e4       	ldi	r21, 0x45	; 69
     d1c:	0e 94 26 08 	call	0x104c	; 0x104c <__addsf3>
     d20:	0e 94 82 09 	call	0x1304	; 0x1304 <__fixunssfsi>
     d24:	eb 01       	movw	r28, r22
     d26:	93 cf       	rjmp	.-218    	; 0xc4e <move+0x80>
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	48 ec       	ldi	r20, 0xC8	; 200
     d2e:	52 e4       	ldi	r21, 0x42	; 66
     d30:	c7 01       	movw	r24, r14
     d32:	b6 01       	movw	r22, r12
     d34:	0e 94 09 09 	call	0x1212	; 0x1212 <__divsf3>
     d38:	6b 01       	movw	r12, r22
     d3a:	7c 01       	movw	r14, r24
     d3c:	a2 cf       	rjmp	.-188    	; 0xc82 <move+0xb4>

00000d3e <init_HMC5883L>:
#include "magnometer.h"

void init_HMC5883L(void){

    i2c_start(HMC5883L_WRITE);
     d3e:	8c e3       	ldi	r24, 0x3C	; 60
     d40:	0e 94 11 02 	call	0x422	; 0x422 <i2c_start>
    i2c_write(0x00); // set pointer to CRA
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	0e 94 33 02 	call	0x466	; 0x466 <i2c_write>
    i2c_write(0x70); // write 0x70 to CRA
     d4a:	80 e7       	ldi	r24, 0x70	; 112
     d4c:	0e 94 33 02 	call	0x466	; 0x466 <i2c_write>
    i2c_stop();
     d50:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
     d54:	8c e3       	ldi	r24, 0x3C	; 60
     d56:	0e 94 11 02 	call	0x422	; 0x422 <i2c_start>
    i2c_write(0x01); // set pointer to CRB
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	0e 94 33 02 	call	0x466	; 0x466 <i2c_write>
    i2c_write(0xA0);
     d60:	80 ea       	ldi	r24, 0xA0	; 160
     d62:	0e 94 33 02 	call	0x466	; 0x466 <i2c_write>
    i2c_stop();
     d66:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
     d6a:	8c e3       	ldi	r24, 0x3C	; 60
     d6c:	0e 94 11 02 	call	0x422	; 0x422 <i2c_start>
    i2c_write(0x02); // set pointer to measurement mode
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	0e 94 33 02 	call	0x466	; 0x466 <i2c_write>
    i2c_write(0x00); // continous measurement
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	0e 94 33 02 	call	0x466	; 0x466 <i2c_write>
    i2c_stop();
     d7c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <i2c_stop>

00000d80 <getHeading>:
}
float getHeading(int16_t *x, int16_t *y, int16_t *z){
     d80:	cf 92       	push	r12
     d82:	df 92       	push	r13
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	8c 01       	movw	r16, r24
     d92:	eb 01       	movw	r28, r22
     d94:	7a 01       	movw	r14, r20

    float headingDegrees;
    
    i2c_start(HMC5883L_WRITE);
     d96:	8c e3       	ldi	r24, 0x3C	; 60
     d98:	0e 94 11 02 	call	0x422	; 0x422 <i2c_start>
    i2c_write(0x03); // set pointer to X axis MSB
     d9c:	83 e0       	ldi	r24, 0x03	; 3
     d9e:	0e 94 33 02 	call	0x466	; 0x466 <i2c_write>
    i2c_stop();
     da2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2c_stop>

    i2c_start(HMC5883L_READ);
     da6:	8d e3       	ldi	r24, 0x3D	; 61
     da8:	0e 94 11 02 	call	0x422	; 0x422 <i2c_start>

    *x = ((uint8_t)i2c_read_ack())<<8;
     dac:	0e 94 45 02 	call	0x48a	; 0x48a <i2c_read_ack>
     db0:	f8 01       	movw	r30, r16
     db2:	10 82       	st	Z, r1
     db4:	81 83       	std	Z+1, r24	; 0x01
    *x |= i2c_read_ack();
     db6:	0e 94 45 02 	call	0x48a	; 0x48a <i2c_read_ack>
     dba:	f8 01       	movw	r30, r16
     dbc:	20 81       	ld	r18, Z
     dbe:	31 81       	ldd	r19, Z+1	; 0x01
     dc0:	28 2b       	or	r18, r24
     dc2:	31 83       	std	Z+1, r19	; 0x01
     dc4:	20 83       	st	Z, r18

    *z = ((uint8_t)i2c_read_ack())<<8;
     dc6:	0e 94 45 02 	call	0x48a	; 0x48a <i2c_read_ack>
     dca:	f7 01       	movw	r30, r14
     dcc:	10 82       	st	Z, r1
     dce:	81 83       	std	Z+1, r24	; 0x01
    *z |= i2c_read_ack();
     dd0:	0e 94 45 02 	call	0x48a	; 0x48a <i2c_read_ack>
     dd4:	f7 01       	movw	r30, r14
     dd6:	20 81       	ld	r18, Z
     dd8:	31 81       	ldd	r19, Z+1	; 0x01
     dda:	28 2b       	or	r18, r24
     ddc:	31 83       	std	Z+1, r19	; 0x01
     dde:	20 83       	st	Z, r18

    *y = ((uint8_t)i2c_read_ack())<<8;
     de0:	0e 94 45 02 	call	0x48a	; 0x48a <i2c_read_ack>
     de4:	18 82       	st	Y, r1
     de6:	89 83       	std	Y+1, r24	; 0x01
    *y |= i2c_read_nack();
     de8:	0e 94 4f 02 	call	0x49e	; 0x49e <i2c_read_nack>
     dec:	28 81       	ld	r18, Y
     dee:	39 81       	ldd	r19, Y+1	; 0x01
     df0:	28 2b       	or	r18, r24
     df2:	39 83       	std	Y+1, r19	; 0x01
     df4:	28 83       	st	Y, r18

    i2c_stop();
     df6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2c_stop>

    headingDegrees = atan2((double)*y,(double)*x) * 180 / 3.141592654 + 180;
     dfa:	f8 01       	movw	r30, r16
     dfc:	60 81       	ld	r22, Z
     dfe:	71 81       	ldd	r23, Z+1	; 0x01
     e00:	07 2e       	mov	r0, r23
     e02:	00 0c       	add	r0, r0
     e04:	88 0b       	sbc	r24, r24
     e06:	99 0b       	sbc	r25, r25
     e08:	0e 94 b3 09 	call	0x1366	; 0x1366 <__floatsisf>
     e0c:	6b 01       	movw	r12, r22
     e0e:	7c 01       	movw	r14, r24
     e10:	68 81       	ld	r22, Y
     e12:	79 81       	ldd	r23, Y+1	; 0x01
     e14:	07 2e       	mov	r0, r23
     e16:	00 0c       	add	r0, r0
     e18:	88 0b       	sbc	r24, r24
     e1a:	99 0b       	sbc	r25, r25
     e1c:	0e 94 b3 09 	call	0x1366	; 0x1366 <__floatsisf>
     e20:	a7 01       	movw	r20, r14
     e22:	96 01       	movw	r18, r12
     e24:	0e 94 a5 08 	call	0x114a	; 0x114a <atan2>
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	44 e3       	ldi	r20, 0x34	; 52
     e2e:	53 e4       	ldi	r21, 0x43	; 67
     e30:	0e 94 97 0a 	call	0x152e	; 0x152e <__mulsf3>
     e34:	2b ed       	ldi	r18, 0xDB	; 219
     e36:	3f e0       	ldi	r19, 0x0F	; 15
     e38:	49 e4       	ldi	r20, 0x49	; 73
     e3a:	50 e4       	ldi	r21, 0x40	; 64
     e3c:	0e 94 09 09 	call	0x1212	; 0x1212 <__divsf3>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	44 e3       	ldi	r20, 0x34	; 52
     e46:	53 e4       	ldi	r21, 0x43	; 67
     e48:	0e 94 26 08 	call	0x104c	; 0x104c <__addsf3>

    return headingDegrees;
}
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	cf 90       	pop	r12
     e5c:	08 95       	ret

00000e5e <get_distance>:
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	cb 01       	movw	r24, r22
     e64:	08 95       	ret

00000e66 <print_distance>:
    return 0;
}

double print_distance(unsigned int pin){
    return 0;
}
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	cb 01       	movw	r24, r22
     e6c:	08 95       	ret

00000e6e <enable_laser_sensor>:
void enable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
     e6e:	43 98       	cbi	0x08, 3	; 8

    //enable analog comparator multiplexer, set SFIOR:ACME
    SFIOR |= (1 << ACME);
     e70:	80 b5       	in	r24, 0x20	; 32
     e72:	88 60       	ori	r24, 0x08	; 8
     e74:	80 bd       	out	0x20, r24	; 32

    //set AIN1 to laser sensor pin
    ADMUX &= 0b11111000; //clear the admux input pin bits
     e76:	87 b1       	in	r24, 0x07	; 7
     e78:	88 7f       	andi	r24, 0xF8	; 248
     e7a:	87 b9       	out	0x07, r24	; 7
    ADMUX |= LASER_SENSOR;  //set the new bits
     e7c:	38 9a       	sbi	0x07, 0	; 7
    
    //enable analog comparator, clear ACSR:ACD
    ACSR &= ~(1 << ACD);
     e7e:	47 98       	cbi	0x08, 7	; 8
    
    //set comparator interrupt on rising output edge, set ACSR:ACIS1, set ACSR:ACIS0
    ACSR |= (1 << ACIS1) | (1 << ACIS0);
     e80:	88 b1       	in	r24, 0x08	; 8
     e82:	83 60       	ori	r24, 0x03	; 3
     e84:	88 b9       	out	0x08, r24	; 8
    
    //enable analog comparator interrupt, set ACSR:ACIE
    ACSR |= (1 << ACIE);
     e86:	43 9a       	sbi	0x08, 3	; 8
     e88:	08 95       	ret

00000e8a <disable_laser_sensor>:
    
    //Be sure to handle the interrupt until ACSR:ACO goes low
}
void disable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
     e8a:	43 98       	cbi	0x08, 3	; 8

    //disable analog comparator, set ACSR:ACD
    ACSR |= (1 << ACD);
     e8c:	47 9a       	sbi	0x08, 7	; 8

    //disable analog comparator multiplexor, clear SFIOR:ACME
    SFIOR &= ~(1 << ACME);
     e8e:	80 b5       	in	r24, 0x20	; 32
     e90:	87 7f       	andi	r24, 0xF7	; 247
     e92:	80 bd       	out	0x20, r24	; 32
     e94:	08 95       	ret

00000e96 <laser_off>:
}

void laser_off(){
    PORTB |= (1 << LASER);
     e96:	c0 9a       	sbi	0x18, 0	; 24
     e98:	08 95       	ret

00000e9a <laser_on>:
}
void laser_on(){
    PORTB &= ~(1 << LASER);
     e9a:	c0 98       	cbi	0x18, 0	; 24
     e9c:	08 95       	ret

00000e9e <get_depth_mpa>:

#include "pressuresensor.h"

double get_depth_mpa(){
	return 1.2 * (get_voltage(PSENSOR_PIN) - PSENSOR_MIN)/(4.5-PSENSOR_MIN);
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 87 03 	call	0x70e	; 0x70e <get_voltage>
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e8       	ldi	r19, 0x80	; 128
     eaa:	42 ef       	ldi	r20, 0xF2	; 242
     eac:	5e e3       	ldi	r21, 0x3E	; 62
     eae:	0e 94 25 08 	call	0x104a	; 0x104a <__subsf3>
     eb2:	2a e9       	ldi	r18, 0x9A	; 154
     eb4:	39 e9       	ldi	r19, 0x99	; 153
     eb6:	49 e9       	ldi	r20, 0x99	; 153
     eb8:	5f e3       	ldi	r21, 0x3F	; 63
     eba:	0e 94 97 0a 	call	0x152e	; 0x152e <__mulsf3>
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	38 ed       	ldi	r19, 0xD8	; 216
     ec2:	40 e8       	ldi	r20, 0x80	; 128
     ec4:	50 e4       	ldi	r21, 0x40	; 64
     ec6:	0e 94 09 09 	call	0x1212	; 0x1212 <__divsf3>
}
     eca:	08 95       	ret

00000ecc <get_depth_feet>:
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 87 03 	call	0x70e	; 0x70e <get_voltage>
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e8       	ldi	r19, 0x80	; 128
     ed8:	42 ef       	ldi	r20, 0xF2	; 242
     eda:	5e e3       	ldi	r21, 0x3E	; 62
     edc:	0e 94 25 08 	call	0x104a	; 0x104a <__subsf3>
     ee0:	2a e9       	ldi	r18, 0x9A	; 154
     ee2:	39 e9       	ldi	r19, 0x99	; 153
     ee4:	49 e9       	ldi	r20, 0x99	; 153
     ee6:	5f e3       	ldi	r21, 0x3F	; 63
     ee8:	0e 94 97 0a 	call	0x152e	; 0x152e <__mulsf3>
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	38 ed       	ldi	r19, 0xD8	; 216
     ef0:	40 e8       	ldi	r20, 0x80	; 128
     ef2:	50 e4       	ldi	r21, 0x40	; 64
     ef4:	0e 94 09 09 	call	0x1212	; 0x1212 <__divsf3>
     ef8:	29 ef       	ldi	r18, 0xF9	; 249
     efa:	37 e4       	ldi	r19, 0x47	; 71
     efc:	47 ea       	ldi	r20, 0xA7	; 167
     efe:	53 e4       	ldi	r21, 0x43	; 67
     f00:	0e 94 97 0a 	call	0x152e	; 0x152e <__mulsf3>
     f04:	08 95       	ret

00000f06 <main>:
void turn(int degrees);
void forward();
void reverse();


int main(){
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	2f 97       	sbiw	r28, 0x0f	; 15
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
    DDRB = 0xFF;
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
     f1c:	87 bb       	out	0x17, r24	; 23
    PORTB = 0;
     f1e:	18 ba       	out	0x18, r1	; 24
    USART0_Init(MYUBRR);
     f20:	87 e6       	ldi	r24, 0x67	; 103
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 28 05 	call	0xa50	; 0xa50 <USART0_Init>
    USART0_send_string((unsigned char *)"USART0 (RS232) Initialized\r");
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <USART0_send_string>

    enable_adc();
     f30:	0e 94 54 03 	call	0x6a8	; 0x6a8 <enable_adc>
    //init_HMC5883L();
    init_motors();
     f34:	0e 94 c8 05 	call	0xb90	; 0xb90 <init_motors>
    char buffer[10];

    unsigned char data[MAX_STRING_SIZE];
    int i;
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        data[i] = '\0';
     f38:	1b 86       	std	Y+11, r1	; 0x0b
     f3a:	1c 86       	std	Y+12, r1	; 0x0c
     f3c:	1d 86       	std	Y+13, r1	; 0x0d
     f3e:	1f 86       	std	Y+15, r1	; 0x0f
    }
    data[MAX_STRING_SIZE - 2] = '~';
     f40:	8e e7       	ldi	r24, 0x7E	; 126
     f42:	8e 87       	std	Y+14, r24	; 0x0e

    move(50,50,50);
     f44:	e1 2c       	mov	r14, r1
     f46:	f1 2c       	mov	r15, r1
     f48:	08 e4       	ldi	r16, 0x48	; 72
     f4a:	12 e4       	ldi	r17, 0x42	; 66
     f4c:	a8 01       	movw	r20, r16
     f4e:	97 01       	movw	r18, r14
     f50:	c8 01       	movw	r24, r16
     f52:	b7 01       	movw	r22, r14
     f54:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
        if (strcmp((char *)data,"eee~") == 0){
            USART0_send_string((unsigned char *)"eee~");
            path1();
        }
        else if (strcmp((char *)data,"222~") == 0){
            data[0] = 's';
     f58:	23 e7       	ldi	r18, 0x73	; 115
     f5a:	32 2e       	mov	r3, r18
            data[1] = 't';
     f5c:	34 e7       	ldi	r19, 0x74	; 116
     f5e:	c3 2e       	mov	r12, r19
            data[2] = 'o';
     f60:	4f e6       	ldi	r20, 0x6F	; 111
     f62:	d4 2e       	mov	r13, r20
    }
    data[MAX_STRING_SIZE - 2] = '~';

    move(50,50,50);
    while (1){
        USART0_send_string((unsigned char*)"Depth: ");
     f64:	8c e1       	ldi	r24, 0x1C	; 28
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	0e 94 3e 05 	call	0xa7c	; 0xa7c <USART0_send_string>
        USART0_send_string((unsigned char *)dtostrf(get_depth_feet(),3,7,buffer));
     f6c:	0e 94 66 07 	call	0xecc	; 0xecc <get_depth_feet>
     f70:	8e 01       	movw	r16, r28
     f72:	0f 5f       	subi	r16, 0xFF	; 255
     f74:	1f 4f       	sbci	r17, 0xFF	; 255
     f76:	27 e0       	ldi	r18, 0x07	; 7
     f78:	43 e0       	ldi	r20, 0x03	; 3
     f7a:	0e 94 30 0b 	call	0x1660	; 0x1660 <dtostrf>
     f7e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <USART0_send_string>
        USART0_send_string((unsigned char*)"\r");
     f82:	8a e1       	ldi	r24, 0x1A	; 26
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	0e 94 3e 05 	call	0xa7c	; 0xa7c <USART0_send_string>
        USART0_send_string((unsigned char*)"Voltage: ");
     f8a:	84 e2       	ldi	r24, 0x24	; 36
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <USART0_send_string>
        USART0_send_string((unsigned char *)dtostrf(get_voltage(PSENSOR_PIN),3,7,buffer));
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 87 03 	call	0x70e	; 0x70e <get_voltage>
     f9a:	27 e0       	ldi	r18, 0x07	; 7
     f9c:	43 e0       	ldi	r20, 0x03	; 3
     f9e:	0e 94 30 0b 	call	0x1660	; 0x1660 <dtostrf>
     fa2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <USART0_send_string>
        USART0_send_string((unsigned char*)"\r");
     fa6:	8a e1       	ldi	r24, 0x1A	; 26
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	0e 94 3e 05 	call	0xa7c	; 0xa7c <USART0_send_string>
        USART0_Receive_String(data);
     fae:	ce 01       	movw	r24, r28
     fb0:	0b 96       	adiw	r24, 0x0b	; 11
     fb2:	0e 94 59 05 	call	0xab2	; 0xab2 <USART0_Receive_String>
        // USART0_send_string(data);

        if (strcmp((char *)data,"eee~") == 0){
     fb6:	6e e2       	ldi	r22, 0x2E	; 46
     fb8:	71 e0       	ldi	r23, 0x01	; 1
     fba:	ce 01       	movw	r24, r28
     fbc:	0b 96       	adiw	r24, 0x0b	; 11
     fbe:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <strcmp>
     fc2:	89 2b       	or	r24, r25
     fc4:	d9 f1       	breq	.+118    	; 0x103c <main+0x136>
            USART0_send_string((unsigned char *)"eee~");
            path1();
        }
        else if (strcmp((char *)data,"222~") == 0){
     fc6:	63 e3       	ldi	r22, 0x33	; 51
     fc8:	71 e0       	ldi	r23, 0x01	; 1
     fca:	ce 01       	movw	r24, r28
     fcc:	0b 96       	adiw	r24, 0x0b	; 11
     fce:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <strcmp>
     fd2:	89 2b       	or	r24, r25
     fd4:	91 f4       	brne	.+36     	; 0xffa <main+0xf4>
            data[0] = 's';
     fd6:	3b 86       	std	Y+11, r3	; 0x0b
            data[1] = 't';
     fd8:	cc 86       	std	Y+12, r12	; 0x0c
            data[2] = 'o';
     fda:	dd 86       	std	Y+13, r13	; 0x0d
            move(50,50,50);
     fdc:	e1 2c       	mov	r14, r1
     fde:	f1 2c       	mov	r15, r1
     fe0:	08 e4       	ldi	r16, 0x48	; 72
     fe2:	12 e4       	ldi	r17, 0x42	; 66
     fe4:	a8 01       	movw	r20, r16
     fe6:	97 01       	movw	r18, r14
     fe8:	c8 01       	movw	r24, r16
     fea:	b7 01       	movw	r22, r14
     fec:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
            USART0_send_string(data);
     ff0:	ce 01       	movw	r24, r28
     ff2:	0b 96       	adiw	r24, 0x0b	; 11
     ff4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <USART0_send_string>
     ff8:	b5 cf       	rjmp	.-150    	; 0xf64 <main+0x5e>
        }
        else{
            // USART0_send_string((unsigned char *)"Moving: ");
            USART0_send_string(data);
     ffa:	ce 01       	movw	r24, r28
     ffc:	0b 96       	adiw	r24, 0x0b	; 11
     ffe:	0e 94 3e 05 	call	0xa7c	; 0xa7c <USART0_send_string>
            move((float)data[0],(float)data[1],(float)data[2]);
    1002:	6d 85       	ldd	r22, Y+13	; 0x0d
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatunsisf>
    100e:	4b 01       	movw	r8, r22
    1010:	5c 01       	movw	r10, r24
    1012:	6c 85       	ldd	r22, Y+12	; 0x0c
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatunsisf>
    101e:	2b 01       	movw	r4, r22
    1020:	3c 01       	movw	r6, r24
    1022:	6b 85       	ldd	r22, Y+11	; 0x0b
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatunsisf>
    102e:	85 01       	movw	r16, r10
    1030:	74 01       	movw	r14, r8
    1032:	a3 01       	movw	r20, r6
    1034:	92 01       	movw	r18, r4
    1036:	0e 94 e7 05 	call	0xbce	; 0xbce <move>
    103a:	94 cf       	rjmp	.-216    	; 0xf64 <main+0x5e>
        USART0_send_string((unsigned char*)"\r");
        USART0_Receive_String(data);
        // USART0_send_string(data);

        if (strcmp((char *)data,"eee~") == 0){
            USART0_send_string((unsigned char *)"eee~");
    103c:	8e e2       	ldi	r24, 0x2E	; 46
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	0e 94 3e 05 	call	0xa7c	; 0xa7c <USART0_send_string>
            path1();
    1044:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <path1>
    1048:	8d cf       	rjmp	.-230    	; 0xf64 <main+0x5e>

0000104a <__subsf3>:
    104a:	50 58       	subi	r21, 0x80	; 128

0000104c <__addsf3>:
    104c:	bb 27       	eor	r27, r27
    104e:	aa 27       	eor	r26, r26
    1050:	0e 94 3d 08 	call	0x107a	; 0x107a <__addsf3x>
    1054:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_round>
    1058:	0e 94 42 0a 	call	0x1484	; 0x1484 <__fp_pscA>
    105c:	38 f0       	brcs	.+14     	; 0x106c <__addsf3+0x20>
    105e:	0e 94 49 0a 	call	0x1492	; 0x1492 <__fp_pscB>
    1062:	20 f0       	brcs	.+8      	; 0x106c <__addsf3+0x20>
    1064:	39 f4       	brne	.+14     	; 0x1074 <__addsf3+0x28>
    1066:	9f 3f       	cpi	r25, 0xFF	; 255
    1068:	19 f4       	brne	.+6      	; 0x1070 <__addsf3+0x24>
    106a:	26 f4       	brtc	.+8      	; 0x1074 <__addsf3+0x28>
    106c:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__fp_nan>
    1070:	0e f4       	brtc	.+2      	; 0x1074 <__addsf3+0x28>
    1072:	e0 95       	com	r30
    1074:	e7 fb       	bst	r30, 7
    1076:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__fp_inf>

0000107a <__addsf3x>:
    107a:	e9 2f       	mov	r30, r25
    107c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fp_split3>
    1080:	58 f3       	brcs	.-42     	; 0x1058 <__addsf3+0xc>
    1082:	ba 17       	cp	r27, r26
    1084:	62 07       	cpc	r22, r18
    1086:	73 07       	cpc	r23, r19
    1088:	84 07       	cpc	r24, r20
    108a:	95 07       	cpc	r25, r21
    108c:	20 f0       	brcs	.+8      	; 0x1096 <__addsf3x+0x1c>
    108e:	79 f4       	brne	.+30     	; 0x10ae <__addsf3x+0x34>
    1090:	a6 f5       	brtc	.+104    	; 0x10fa <__addsf3x+0x80>
    1092:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__fp_zero>
    1096:	0e f4       	brtc	.+2      	; 0x109a <__addsf3x+0x20>
    1098:	e0 95       	com	r30
    109a:	0b 2e       	mov	r0, r27
    109c:	ba 2f       	mov	r27, r26
    109e:	a0 2d       	mov	r26, r0
    10a0:	0b 01       	movw	r0, r22
    10a2:	b9 01       	movw	r22, r18
    10a4:	90 01       	movw	r18, r0
    10a6:	0c 01       	movw	r0, r24
    10a8:	ca 01       	movw	r24, r20
    10aa:	a0 01       	movw	r20, r0
    10ac:	11 24       	eor	r1, r1
    10ae:	ff 27       	eor	r31, r31
    10b0:	59 1b       	sub	r21, r25
    10b2:	99 f0       	breq	.+38     	; 0x10da <__addsf3x+0x60>
    10b4:	59 3f       	cpi	r21, 0xF9	; 249
    10b6:	50 f4       	brcc	.+20     	; 0x10cc <__addsf3x+0x52>
    10b8:	50 3e       	cpi	r21, 0xE0	; 224
    10ba:	68 f1       	brcs	.+90     	; 0x1116 <__stack+0x17>
    10bc:	1a 16       	cp	r1, r26
    10be:	f0 40       	sbci	r31, 0x00	; 0
    10c0:	a2 2f       	mov	r26, r18
    10c2:	23 2f       	mov	r18, r19
    10c4:	34 2f       	mov	r19, r20
    10c6:	44 27       	eor	r20, r20
    10c8:	58 5f       	subi	r21, 0xF8	; 248
    10ca:	f3 cf       	rjmp	.-26     	; 0x10b2 <__addsf3x+0x38>
    10cc:	46 95       	lsr	r20
    10ce:	37 95       	ror	r19
    10d0:	27 95       	ror	r18
    10d2:	a7 95       	ror	r26
    10d4:	f0 40       	sbci	r31, 0x00	; 0
    10d6:	53 95       	inc	r21
    10d8:	c9 f7       	brne	.-14     	; 0x10cc <__addsf3x+0x52>
    10da:	7e f4       	brtc	.+30     	; 0x10fa <__addsf3x+0x80>
    10dc:	1f 16       	cp	r1, r31
    10de:	ba 0b       	sbc	r27, r26
    10e0:	62 0b       	sbc	r22, r18
    10e2:	73 0b       	sbc	r23, r19
    10e4:	84 0b       	sbc	r24, r20
    10e6:	ba f0       	brmi	.+46     	; 0x1116 <__stack+0x17>
    10e8:	91 50       	subi	r25, 0x01	; 1
    10ea:	a1 f0       	breq	.+40     	; 0x1114 <__stack+0x15>
    10ec:	ff 0f       	add	r31, r31
    10ee:	bb 1f       	adc	r27, r27
    10f0:	66 1f       	adc	r22, r22
    10f2:	77 1f       	adc	r23, r23
    10f4:	88 1f       	adc	r24, r24
    10f6:	c2 f7       	brpl	.-16     	; 0x10e8 <__addsf3x+0x6e>
    10f8:	0e c0       	rjmp	.+28     	; 0x1116 <__stack+0x17>
    10fa:	ba 0f       	add	r27, r26
    10fc:	62 1f       	adc	r22, r18
    10fe:	73 1f       	adc	r23, r19
    1100:	84 1f       	adc	r24, r20
    1102:	48 f4       	brcc	.+18     	; 0x1116 <__stack+0x17>
    1104:	87 95       	ror	r24
    1106:	77 95       	ror	r23
    1108:	67 95       	ror	r22
    110a:	b7 95       	ror	r27
    110c:	f7 95       	ror	r31
    110e:	9e 3f       	cpi	r25, 0xFE	; 254
    1110:	08 f0       	brcs	.+2      	; 0x1114 <__stack+0x15>
    1112:	b0 cf       	rjmp	.-160    	; 0x1074 <__addsf3+0x28>
    1114:	93 95       	inc	r25
    1116:	88 0f       	add	r24, r24
    1118:	08 f0       	brcs	.+2      	; 0x111c <__stack+0x1d>
    111a:	99 27       	eor	r25, r25
    111c:	ee 0f       	add	r30, r30
    111e:	97 95       	ror	r25
    1120:	87 95       	ror	r24
    1122:	08 95       	ret
    1124:	0e 94 42 0a 	call	0x1484	; 0x1484 <__fp_pscA>
    1128:	60 f0       	brcs	.+24     	; 0x1142 <__stack+0x43>
    112a:	80 e8       	ldi	r24, 0x80	; 128
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	09 f4       	brne	.+2      	; 0x1132 <__stack+0x33>
    1130:	9e ef       	ldi	r25, 0xFE	; 254
    1132:	0e 94 49 0a 	call	0x1492	; 0x1492 <__fp_pscB>
    1136:	28 f0       	brcs	.+10     	; 0x1142 <__stack+0x43>
    1138:	40 e8       	ldi	r20, 0x80	; 128
    113a:	51 e0       	ldi	r21, 0x01	; 1
    113c:	71 f4       	brne	.+28     	; 0x115a <atan2+0x10>
    113e:	5e ef       	ldi	r21, 0xFE	; 254
    1140:	0c c0       	rjmp	.+24     	; 0x115a <atan2+0x10>
    1142:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__fp_nan>
    1146:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__fp_zero>

0000114a <atan2>:
    114a:	e9 2f       	mov	r30, r25
    114c:	e0 78       	andi	r30, 0x80	; 128
    114e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fp_split3>
    1152:	40 f3       	brcs	.-48     	; 0x1124 <__stack+0x25>
    1154:	09 2e       	mov	r0, r25
    1156:	05 2a       	or	r0, r21
    1158:	b1 f3       	breq	.-20     	; 0x1146 <__stack+0x47>
    115a:	26 17       	cp	r18, r22
    115c:	37 07       	cpc	r19, r23
    115e:	48 07       	cpc	r20, r24
    1160:	59 07       	cpc	r21, r25
    1162:	38 f0       	brcs	.+14     	; 0x1172 <atan2+0x28>
    1164:	0e 2e       	mov	r0, r30
    1166:	07 f8       	bld	r0, 7
    1168:	e0 25       	eor	r30, r0
    116a:	69 f0       	breq	.+26     	; 0x1186 <atan2+0x3c>
    116c:	e0 25       	eor	r30, r0
    116e:	e0 64       	ori	r30, 0x40	; 64
    1170:	0a c0       	rjmp	.+20     	; 0x1186 <atan2+0x3c>
    1172:	ef 63       	ori	r30, 0x3F	; 63
    1174:	07 f8       	bld	r0, 7
    1176:	00 94       	com	r0
    1178:	07 fa       	bst	r0, 7
    117a:	db 01       	movw	r26, r22
    117c:	b9 01       	movw	r22, r18
    117e:	9d 01       	movw	r18, r26
    1180:	dc 01       	movw	r26, r24
    1182:	ca 01       	movw	r24, r20
    1184:	ad 01       	movw	r20, r26
    1186:	ef 93       	push	r30
    1188:	0e 94 20 09 	call	0x1240	; 0x1240 <__divsf3_pse>
    118c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fp_round>
    1190:	0e 94 d5 08 	call	0x11aa	; 0x11aa <atan>
    1194:	5f 91       	pop	r21
    1196:	55 23       	and	r21, r21
    1198:	39 f0       	breq	.+14     	; 0x11a8 <atan2+0x5e>
    119a:	2b ed       	ldi	r18, 0xDB	; 219
    119c:	3f e0       	ldi	r19, 0x0F	; 15
    119e:	49 e4       	ldi	r20, 0x49	; 73
    11a0:	50 fd       	sbrc	r21, 0
    11a2:	49 ec       	ldi	r20, 0xC9	; 201
    11a4:	0c 94 26 08 	jmp	0x104c	; 0x104c <__addsf3>
    11a8:	08 95       	ret

000011aa <atan>:
    11aa:	df 93       	push	r29
    11ac:	dd 27       	eor	r29, r29
    11ae:	b9 2f       	mov	r27, r25
    11b0:	bf 77       	andi	r27, 0x7F	; 127
    11b2:	40 e8       	ldi	r20, 0x80	; 128
    11b4:	5f e3       	ldi	r21, 0x3F	; 63
    11b6:	16 16       	cp	r1, r22
    11b8:	17 06       	cpc	r1, r23
    11ba:	48 07       	cpc	r20, r24
    11bc:	5b 07       	cpc	r21, r27
    11be:	18 f4       	brcc	.+6      	; 0x11c6 <atan+0x1c>
    11c0:	d9 2f       	mov	r29, r25
    11c2:	0e 94 8f 0a 	call	0x151e	; 0x151e <inverse>
    11c6:	9f 93       	push	r25
    11c8:	8f 93       	push	r24
    11ca:	7f 93       	push	r23
    11cc:	6f 93       	push	r22
    11ce:	0e 94 04 0b 	call	0x1608	; 0x1608 <square>
    11d2:	ec e8       	ldi	r30, 0x8C	; 140
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__fp_powser>
    11da:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fp_round>
    11de:	2f 91       	pop	r18
    11e0:	3f 91       	pop	r19
    11e2:	4f 91       	pop	r20
    11e4:	5f 91       	pop	r21
    11e6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__mulsf3x>
    11ea:	dd 23       	and	r29, r29
    11ec:	51 f0       	breq	.+20     	; 0x1202 <atan+0x58>
    11ee:	90 58       	subi	r25, 0x80	; 128
    11f0:	a2 ea       	ldi	r26, 0xA2	; 162
    11f2:	2a ed       	ldi	r18, 0xDA	; 218
    11f4:	3f e0       	ldi	r19, 0x0F	; 15
    11f6:	49 ec       	ldi	r20, 0xC9	; 201
    11f8:	5f e3       	ldi	r21, 0x3F	; 63
    11fa:	d0 78       	andi	r29, 0x80	; 128
    11fc:	5d 27       	eor	r21, r29
    11fe:	0e 94 3d 08 	call	0x107a	; 0x107a <__addsf3x>
    1202:	df 91       	pop	r29
    1204:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_round>

00001208 <__cmpsf2>:
    1208:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fp_cmp>
    120c:	08 f4       	brcc	.+2      	; 0x1210 <__cmpsf2+0x8>
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	08 95       	ret

00001212 <__divsf3>:
    1212:	0e 94 1d 09 	call	0x123a	; 0x123a <__divsf3x>
    1216:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_round>
    121a:	0e 94 49 0a 	call	0x1492	; 0x1492 <__fp_pscB>
    121e:	58 f0       	brcs	.+22     	; 0x1236 <__divsf3+0x24>
    1220:	0e 94 42 0a 	call	0x1484	; 0x1484 <__fp_pscA>
    1224:	40 f0       	brcs	.+16     	; 0x1236 <__divsf3+0x24>
    1226:	29 f4       	brne	.+10     	; 0x1232 <__divsf3+0x20>
    1228:	5f 3f       	cpi	r21, 0xFF	; 255
    122a:	29 f0       	breq	.+10     	; 0x1236 <__divsf3+0x24>
    122c:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__fp_inf>
    1230:	51 11       	cpse	r21, r1
    1232:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_szero>
    1236:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__fp_nan>

0000123a <__divsf3x>:
    123a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fp_split3>
    123e:	68 f3       	brcs	.-38     	; 0x121a <__divsf3+0x8>

00001240 <__divsf3_pse>:
    1240:	99 23       	and	r25, r25
    1242:	b1 f3       	breq	.-20     	; 0x1230 <__divsf3+0x1e>
    1244:	55 23       	and	r21, r21
    1246:	91 f3       	breq	.-28     	; 0x122c <__divsf3+0x1a>
    1248:	95 1b       	sub	r25, r21
    124a:	55 0b       	sbc	r21, r21
    124c:	bb 27       	eor	r27, r27
    124e:	aa 27       	eor	r26, r26
    1250:	62 17       	cp	r22, r18
    1252:	73 07       	cpc	r23, r19
    1254:	84 07       	cpc	r24, r20
    1256:	38 f0       	brcs	.+14     	; 0x1266 <__divsf3_pse+0x26>
    1258:	9f 5f       	subi	r25, 0xFF	; 255
    125a:	5f 4f       	sbci	r21, 0xFF	; 255
    125c:	22 0f       	add	r18, r18
    125e:	33 1f       	adc	r19, r19
    1260:	44 1f       	adc	r20, r20
    1262:	aa 1f       	adc	r26, r26
    1264:	a9 f3       	breq	.-22     	; 0x1250 <__divsf3_pse+0x10>
    1266:	35 d0       	rcall	.+106    	; 0x12d2 <__divsf3_pse+0x92>
    1268:	0e 2e       	mov	r0, r30
    126a:	3a f0       	brmi	.+14     	; 0x127a <__divsf3_pse+0x3a>
    126c:	e0 e8       	ldi	r30, 0x80	; 128
    126e:	32 d0       	rcall	.+100    	; 0x12d4 <__divsf3_pse+0x94>
    1270:	91 50       	subi	r25, 0x01	; 1
    1272:	50 40       	sbci	r21, 0x00	; 0
    1274:	e6 95       	lsr	r30
    1276:	00 1c       	adc	r0, r0
    1278:	ca f7       	brpl	.-14     	; 0x126c <__divsf3_pse+0x2c>
    127a:	2b d0       	rcall	.+86     	; 0x12d2 <__divsf3_pse+0x92>
    127c:	fe 2f       	mov	r31, r30
    127e:	29 d0       	rcall	.+82     	; 0x12d2 <__divsf3_pse+0x92>
    1280:	66 0f       	add	r22, r22
    1282:	77 1f       	adc	r23, r23
    1284:	88 1f       	adc	r24, r24
    1286:	bb 1f       	adc	r27, r27
    1288:	26 17       	cp	r18, r22
    128a:	37 07       	cpc	r19, r23
    128c:	48 07       	cpc	r20, r24
    128e:	ab 07       	cpc	r26, r27
    1290:	b0 e8       	ldi	r27, 0x80	; 128
    1292:	09 f0       	breq	.+2      	; 0x1296 <__divsf3_pse+0x56>
    1294:	bb 0b       	sbc	r27, r27
    1296:	80 2d       	mov	r24, r0
    1298:	bf 01       	movw	r22, r30
    129a:	ff 27       	eor	r31, r31
    129c:	93 58       	subi	r25, 0x83	; 131
    129e:	5f 4f       	sbci	r21, 0xFF	; 255
    12a0:	3a f0       	brmi	.+14     	; 0x12b0 <__divsf3_pse+0x70>
    12a2:	9e 3f       	cpi	r25, 0xFE	; 254
    12a4:	51 05       	cpc	r21, r1
    12a6:	78 f0       	brcs	.+30     	; 0x12c6 <__divsf3_pse+0x86>
    12a8:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__fp_inf>
    12ac:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_szero>
    12b0:	5f 3f       	cpi	r21, 0xFF	; 255
    12b2:	e4 f3       	brlt	.-8      	; 0x12ac <__divsf3_pse+0x6c>
    12b4:	98 3e       	cpi	r25, 0xE8	; 232
    12b6:	d4 f3       	brlt	.-12     	; 0x12ac <__divsf3_pse+0x6c>
    12b8:	86 95       	lsr	r24
    12ba:	77 95       	ror	r23
    12bc:	67 95       	ror	r22
    12be:	b7 95       	ror	r27
    12c0:	f7 95       	ror	r31
    12c2:	9f 5f       	subi	r25, 0xFF	; 255
    12c4:	c9 f7       	brne	.-14     	; 0x12b8 <__divsf3_pse+0x78>
    12c6:	88 0f       	add	r24, r24
    12c8:	91 1d       	adc	r25, r1
    12ca:	96 95       	lsr	r25
    12cc:	87 95       	ror	r24
    12ce:	97 f9       	bld	r25, 7
    12d0:	08 95       	ret
    12d2:	e1 e0       	ldi	r30, 0x01	; 1
    12d4:	66 0f       	add	r22, r22
    12d6:	77 1f       	adc	r23, r23
    12d8:	88 1f       	adc	r24, r24
    12da:	bb 1f       	adc	r27, r27
    12dc:	62 17       	cp	r22, r18
    12de:	73 07       	cpc	r23, r19
    12e0:	84 07       	cpc	r24, r20
    12e2:	ba 07       	cpc	r27, r26
    12e4:	20 f0       	brcs	.+8      	; 0x12ee <__divsf3_pse+0xae>
    12e6:	62 1b       	sub	r22, r18
    12e8:	73 0b       	sbc	r23, r19
    12ea:	84 0b       	sbc	r24, r20
    12ec:	ba 0b       	sbc	r27, r26
    12ee:	ee 1f       	adc	r30, r30
    12f0:	88 f7       	brcc	.-30     	; 0x12d4 <__divsf3_pse+0x94>
    12f2:	e0 95       	com	r30
    12f4:	08 95       	ret

000012f6 <__fixsfsi>:
    12f6:	0e 94 82 09 	call	0x1304	; 0x1304 <__fixunssfsi>
    12fa:	68 94       	set
    12fc:	b1 11       	cpse	r27, r1
    12fe:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_szero>
    1302:	08 95       	ret

00001304 <__fixunssfsi>:
    1304:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fp_splitA>
    1308:	88 f0       	brcs	.+34     	; 0x132c <__fixunssfsi+0x28>
    130a:	9f 57       	subi	r25, 0x7F	; 127
    130c:	98 f0       	brcs	.+38     	; 0x1334 <__fixunssfsi+0x30>
    130e:	b9 2f       	mov	r27, r25
    1310:	99 27       	eor	r25, r25
    1312:	b7 51       	subi	r27, 0x17	; 23
    1314:	b0 f0       	brcs	.+44     	; 0x1342 <__fixunssfsi+0x3e>
    1316:	e1 f0       	breq	.+56     	; 0x1350 <__fixunssfsi+0x4c>
    1318:	66 0f       	add	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	88 1f       	adc	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	1a f0       	brmi	.+6      	; 0x1328 <__fixunssfsi+0x24>
    1322:	ba 95       	dec	r27
    1324:	c9 f7       	brne	.-14     	; 0x1318 <__fixunssfsi+0x14>
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <__fixunssfsi+0x4c>
    1328:	b1 30       	cpi	r27, 0x01	; 1
    132a:	91 f0       	breq	.+36     	; 0x1350 <__fixunssfsi+0x4c>
    132c:	0e 94 83 0a 	call	0x1506	; 0x1506 <__fp_zero>
    1330:	b1 e0       	ldi	r27, 0x01	; 1
    1332:	08 95       	ret
    1334:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__fp_zero>
    1338:	67 2f       	mov	r22, r23
    133a:	78 2f       	mov	r23, r24
    133c:	88 27       	eor	r24, r24
    133e:	b8 5f       	subi	r27, 0xF8	; 248
    1340:	39 f0       	breq	.+14     	; 0x1350 <__fixunssfsi+0x4c>
    1342:	b9 3f       	cpi	r27, 0xF9	; 249
    1344:	cc f3       	brlt	.-14     	; 0x1338 <__fixunssfsi+0x34>
    1346:	86 95       	lsr	r24
    1348:	77 95       	ror	r23
    134a:	67 95       	ror	r22
    134c:	b3 95       	inc	r27
    134e:	d9 f7       	brne	.-10     	; 0x1346 <__fixunssfsi+0x42>
    1350:	3e f4       	brtc	.+14     	; 0x1360 <__fixunssfsi+0x5c>
    1352:	90 95       	com	r25
    1354:	80 95       	com	r24
    1356:	70 95       	com	r23
    1358:	61 95       	neg	r22
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	08 95       	ret

00001362 <__floatunsisf>:
    1362:	e8 94       	clt
    1364:	09 c0       	rjmp	.+18     	; 0x1378 <__floatsisf+0x12>

00001366 <__floatsisf>:
    1366:	97 fb       	bst	r25, 7
    1368:	3e f4       	brtc	.+14     	; 0x1378 <__floatsisf+0x12>
    136a:	90 95       	com	r25
    136c:	80 95       	com	r24
    136e:	70 95       	com	r23
    1370:	61 95       	neg	r22
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	8f 4f       	sbci	r24, 0xFF	; 255
    1376:	9f 4f       	sbci	r25, 0xFF	; 255
    1378:	99 23       	and	r25, r25
    137a:	a9 f0       	breq	.+42     	; 0x13a6 <__floatsisf+0x40>
    137c:	f9 2f       	mov	r31, r25
    137e:	96 e9       	ldi	r25, 0x96	; 150
    1380:	bb 27       	eor	r27, r27
    1382:	93 95       	inc	r25
    1384:	f6 95       	lsr	r31
    1386:	87 95       	ror	r24
    1388:	77 95       	ror	r23
    138a:	67 95       	ror	r22
    138c:	b7 95       	ror	r27
    138e:	f1 11       	cpse	r31, r1
    1390:	f8 cf       	rjmp	.-16     	; 0x1382 <__floatsisf+0x1c>
    1392:	fa f4       	brpl	.+62     	; 0x13d2 <__floatsisf+0x6c>
    1394:	bb 0f       	add	r27, r27
    1396:	11 f4       	brne	.+4      	; 0x139c <__floatsisf+0x36>
    1398:	60 ff       	sbrs	r22, 0
    139a:	1b c0       	rjmp	.+54     	; 0x13d2 <__floatsisf+0x6c>
    139c:	6f 5f       	subi	r22, 0xFF	; 255
    139e:	7f 4f       	sbci	r23, 0xFF	; 255
    13a0:	8f 4f       	sbci	r24, 0xFF	; 255
    13a2:	9f 4f       	sbci	r25, 0xFF	; 255
    13a4:	16 c0       	rjmp	.+44     	; 0x13d2 <__floatsisf+0x6c>
    13a6:	88 23       	and	r24, r24
    13a8:	11 f0       	breq	.+4      	; 0x13ae <__floatsisf+0x48>
    13aa:	96 e9       	ldi	r25, 0x96	; 150
    13ac:	11 c0       	rjmp	.+34     	; 0x13d0 <__floatsisf+0x6a>
    13ae:	77 23       	and	r23, r23
    13b0:	21 f0       	breq	.+8      	; 0x13ba <__floatsisf+0x54>
    13b2:	9e e8       	ldi	r25, 0x8E	; 142
    13b4:	87 2f       	mov	r24, r23
    13b6:	76 2f       	mov	r23, r22
    13b8:	05 c0       	rjmp	.+10     	; 0x13c4 <__floatsisf+0x5e>
    13ba:	66 23       	and	r22, r22
    13bc:	71 f0       	breq	.+28     	; 0x13da <__floatsisf+0x74>
    13be:	96 e8       	ldi	r25, 0x86	; 134
    13c0:	86 2f       	mov	r24, r22
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	2a f0       	brmi	.+10     	; 0x13d2 <__floatsisf+0x6c>
    13c8:	9a 95       	dec	r25
    13ca:	66 0f       	add	r22, r22
    13cc:	77 1f       	adc	r23, r23
    13ce:	88 1f       	adc	r24, r24
    13d0:	da f7       	brpl	.-10     	; 0x13c8 <__floatsisf+0x62>
    13d2:	88 0f       	add	r24, r24
    13d4:	96 95       	lsr	r25
    13d6:	87 95       	ror	r24
    13d8:	97 f9       	bld	r25, 7
    13da:	08 95       	ret

000013dc <__fp_cmp>:
    13dc:	99 0f       	add	r25, r25
    13de:	00 08       	sbc	r0, r0
    13e0:	55 0f       	add	r21, r21
    13e2:	aa 0b       	sbc	r26, r26
    13e4:	e0 e8       	ldi	r30, 0x80	; 128
    13e6:	fe ef       	ldi	r31, 0xFE	; 254
    13e8:	16 16       	cp	r1, r22
    13ea:	17 06       	cpc	r1, r23
    13ec:	e8 07       	cpc	r30, r24
    13ee:	f9 07       	cpc	r31, r25
    13f0:	c0 f0       	brcs	.+48     	; 0x1422 <__fp_cmp+0x46>
    13f2:	12 16       	cp	r1, r18
    13f4:	13 06       	cpc	r1, r19
    13f6:	e4 07       	cpc	r30, r20
    13f8:	f5 07       	cpc	r31, r21
    13fa:	98 f0       	brcs	.+38     	; 0x1422 <__fp_cmp+0x46>
    13fc:	62 1b       	sub	r22, r18
    13fe:	73 0b       	sbc	r23, r19
    1400:	84 0b       	sbc	r24, r20
    1402:	95 0b       	sbc	r25, r21
    1404:	39 f4       	brne	.+14     	; 0x1414 <__fp_cmp+0x38>
    1406:	0a 26       	eor	r0, r26
    1408:	61 f0       	breq	.+24     	; 0x1422 <__fp_cmp+0x46>
    140a:	23 2b       	or	r18, r19
    140c:	24 2b       	or	r18, r20
    140e:	25 2b       	or	r18, r21
    1410:	21 f4       	brne	.+8      	; 0x141a <__fp_cmp+0x3e>
    1412:	08 95       	ret
    1414:	0a 26       	eor	r0, r26
    1416:	09 f4       	brne	.+2      	; 0x141a <__fp_cmp+0x3e>
    1418:	a1 40       	sbci	r26, 0x01	; 1
    141a:	a6 95       	lsr	r26
    141c:	8f ef       	ldi	r24, 0xFF	; 255
    141e:	81 1d       	adc	r24, r1
    1420:	81 1d       	adc	r24, r1
    1422:	08 95       	ret

00001424 <__fp_inf>:
    1424:	97 f9       	bld	r25, 7
    1426:	9f 67       	ori	r25, 0x7F	; 127
    1428:	80 e8       	ldi	r24, 0x80	; 128
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	08 95       	ret

00001430 <__fp_nan>:
    1430:	9f ef       	ldi	r25, 0xFF	; 255
    1432:	80 ec       	ldi	r24, 0xC0	; 192
    1434:	08 95       	ret

00001436 <__fp_powser>:
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	1f 93       	push	r17
    143c:	0f 93       	push	r16
    143e:	ff 92       	push	r15
    1440:	ef 92       	push	r14
    1442:	df 92       	push	r13
    1444:	7b 01       	movw	r14, r22
    1446:	8c 01       	movw	r16, r24
    1448:	68 94       	set
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <__fp_powser+0x22>
    144c:	da 2e       	mov	r13, r26
    144e:	ef 01       	movw	r28, r30
    1450:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__mulsf3x>
    1454:	fe 01       	movw	r30, r28
    1456:	e8 94       	clt
    1458:	a5 91       	lpm	r26, Z+
    145a:	25 91       	lpm	r18, Z+
    145c:	35 91       	lpm	r19, Z+
    145e:	45 91       	lpm	r20, Z+
    1460:	55 91       	lpm	r21, Z+
    1462:	a6 f3       	brts	.-24     	; 0x144c <__fp_powser+0x16>
    1464:	ef 01       	movw	r28, r30
    1466:	0e 94 3d 08 	call	0x107a	; 0x107a <__addsf3x>
    146a:	fe 01       	movw	r30, r28
    146c:	97 01       	movw	r18, r14
    146e:	a8 01       	movw	r20, r16
    1470:	da 94       	dec	r13
    1472:	69 f7       	brne	.-38     	; 0x144e <__fp_powser+0x18>
    1474:	df 90       	pop	r13
    1476:	ef 90       	pop	r14
    1478:	ff 90       	pop	r15
    147a:	0f 91       	pop	r16
    147c:	1f 91       	pop	r17
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <__fp_pscA>:
    1484:	00 24       	eor	r0, r0
    1486:	0a 94       	dec	r0
    1488:	16 16       	cp	r1, r22
    148a:	17 06       	cpc	r1, r23
    148c:	18 06       	cpc	r1, r24
    148e:	09 06       	cpc	r0, r25
    1490:	08 95       	ret

00001492 <__fp_pscB>:
    1492:	00 24       	eor	r0, r0
    1494:	0a 94       	dec	r0
    1496:	12 16       	cp	r1, r18
    1498:	13 06       	cpc	r1, r19
    149a:	14 06       	cpc	r1, r20
    149c:	05 06       	cpc	r0, r21
    149e:	08 95       	ret

000014a0 <__fp_round>:
    14a0:	09 2e       	mov	r0, r25
    14a2:	03 94       	inc	r0
    14a4:	00 0c       	add	r0, r0
    14a6:	11 f4       	brne	.+4      	; 0x14ac <__fp_round+0xc>
    14a8:	88 23       	and	r24, r24
    14aa:	52 f0       	brmi	.+20     	; 0x14c0 <__fp_round+0x20>
    14ac:	bb 0f       	add	r27, r27
    14ae:	40 f4       	brcc	.+16     	; 0x14c0 <__fp_round+0x20>
    14b0:	bf 2b       	or	r27, r31
    14b2:	11 f4       	brne	.+4      	; 0x14b8 <__fp_round+0x18>
    14b4:	60 ff       	sbrs	r22, 0
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <__fp_round+0x20>
    14b8:	6f 5f       	subi	r22, 0xFF	; 255
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	8f 4f       	sbci	r24, 0xFF	; 255
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	08 95       	ret

000014c2 <__fp_split3>:
    14c2:	57 fd       	sbrc	r21, 7
    14c4:	90 58       	subi	r25, 0x80	; 128
    14c6:	44 0f       	add	r20, r20
    14c8:	55 1f       	adc	r21, r21
    14ca:	59 f0       	breq	.+22     	; 0x14e2 <__fp_splitA+0x10>
    14cc:	5f 3f       	cpi	r21, 0xFF	; 255
    14ce:	71 f0       	breq	.+28     	; 0x14ec <__fp_splitA+0x1a>
    14d0:	47 95       	ror	r20

000014d2 <__fp_splitA>:
    14d2:	88 0f       	add	r24, r24
    14d4:	97 fb       	bst	r25, 7
    14d6:	99 1f       	adc	r25, r25
    14d8:	61 f0       	breq	.+24     	; 0x14f2 <__fp_splitA+0x20>
    14da:	9f 3f       	cpi	r25, 0xFF	; 255
    14dc:	79 f0       	breq	.+30     	; 0x14fc <__fp_splitA+0x2a>
    14de:	87 95       	ror	r24
    14e0:	08 95       	ret
    14e2:	12 16       	cp	r1, r18
    14e4:	13 06       	cpc	r1, r19
    14e6:	14 06       	cpc	r1, r20
    14e8:	55 1f       	adc	r21, r21
    14ea:	f2 cf       	rjmp	.-28     	; 0x14d0 <__fp_split3+0xe>
    14ec:	46 95       	lsr	r20
    14ee:	f1 df       	rcall	.-30     	; 0x14d2 <__fp_splitA>
    14f0:	08 c0       	rjmp	.+16     	; 0x1502 <__fp_splitA+0x30>
    14f2:	16 16       	cp	r1, r22
    14f4:	17 06       	cpc	r1, r23
    14f6:	18 06       	cpc	r1, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	f1 cf       	rjmp	.-30     	; 0x14de <__fp_splitA+0xc>
    14fc:	86 95       	lsr	r24
    14fe:	71 05       	cpc	r23, r1
    1500:	61 05       	cpc	r22, r1
    1502:	08 94       	sec
    1504:	08 95       	ret

00001506 <__fp_zero>:
    1506:	e8 94       	clt

00001508 <__fp_szero>:
    1508:	bb 27       	eor	r27, r27
    150a:	66 27       	eor	r22, r22
    150c:	77 27       	eor	r23, r23
    150e:	cb 01       	movw	r24, r22
    1510:	97 f9       	bld	r25, 7
    1512:	08 95       	ret

00001514 <__gesf2>:
    1514:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fp_cmp>
    1518:	08 f4       	brcc	.+2      	; 0x151c <__gesf2+0x8>
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	08 95       	ret

0000151e <inverse>:
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	80 e8       	ldi	r24, 0x80	; 128
    1528:	9f e3       	ldi	r25, 0x3F	; 63
    152a:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__divsf3>

0000152e <__mulsf3>:
    152e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__mulsf3x>
    1532:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_round>
    1536:	0e 94 42 0a 	call	0x1484	; 0x1484 <__fp_pscA>
    153a:	38 f0       	brcs	.+14     	; 0x154a <__mulsf3+0x1c>
    153c:	0e 94 49 0a 	call	0x1492	; 0x1492 <__fp_pscB>
    1540:	20 f0       	brcs	.+8      	; 0x154a <__mulsf3+0x1c>
    1542:	95 23       	and	r25, r21
    1544:	11 f0       	breq	.+4      	; 0x154a <__mulsf3+0x1c>
    1546:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__fp_inf>
    154a:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__fp_nan>
    154e:	11 24       	eor	r1, r1
    1550:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_szero>

00001554 <__mulsf3x>:
    1554:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fp_split3>
    1558:	70 f3       	brcs	.-36     	; 0x1536 <__mulsf3+0x8>

0000155a <__mulsf3_pse>:
    155a:	95 9f       	mul	r25, r21
    155c:	c1 f3       	breq	.-16     	; 0x154e <__mulsf3+0x20>
    155e:	95 0f       	add	r25, r21
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	55 1f       	adc	r21, r21
    1564:	62 9f       	mul	r22, r18
    1566:	f0 01       	movw	r30, r0
    1568:	72 9f       	mul	r23, r18
    156a:	bb 27       	eor	r27, r27
    156c:	f0 0d       	add	r31, r0
    156e:	b1 1d       	adc	r27, r1
    1570:	63 9f       	mul	r22, r19
    1572:	aa 27       	eor	r26, r26
    1574:	f0 0d       	add	r31, r0
    1576:	b1 1d       	adc	r27, r1
    1578:	aa 1f       	adc	r26, r26
    157a:	64 9f       	mul	r22, r20
    157c:	66 27       	eor	r22, r22
    157e:	b0 0d       	add	r27, r0
    1580:	a1 1d       	adc	r26, r1
    1582:	66 1f       	adc	r22, r22
    1584:	82 9f       	mul	r24, r18
    1586:	22 27       	eor	r18, r18
    1588:	b0 0d       	add	r27, r0
    158a:	a1 1d       	adc	r26, r1
    158c:	62 1f       	adc	r22, r18
    158e:	73 9f       	mul	r23, r19
    1590:	b0 0d       	add	r27, r0
    1592:	a1 1d       	adc	r26, r1
    1594:	62 1f       	adc	r22, r18
    1596:	83 9f       	mul	r24, r19
    1598:	a0 0d       	add	r26, r0
    159a:	61 1d       	adc	r22, r1
    159c:	22 1f       	adc	r18, r18
    159e:	74 9f       	mul	r23, r20
    15a0:	33 27       	eor	r19, r19
    15a2:	a0 0d       	add	r26, r0
    15a4:	61 1d       	adc	r22, r1
    15a6:	23 1f       	adc	r18, r19
    15a8:	84 9f       	mul	r24, r20
    15aa:	60 0d       	add	r22, r0
    15ac:	21 1d       	adc	r18, r1
    15ae:	82 2f       	mov	r24, r18
    15b0:	76 2f       	mov	r23, r22
    15b2:	6a 2f       	mov	r22, r26
    15b4:	11 24       	eor	r1, r1
    15b6:	9f 57       	subi	r25, 0x7F	; 127
    15b8:	50 40       	sbci	r21, 0x00	; 0
    15ba:	9a f0       	brmi	.+38     	; 0x15e2 <__mulsf3_pse+0x88>
    15bc:	f1 f0       	breq	.+60     	; 0x15fa <__mulsf3_pse+0xa0>
    15be:	88 23       	and	r24, r24
    15c0:	4a f0       	brmi	.+18     	; 0x15d4 <__mulsf3_pse+0x7a>
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	bb 1f       	adc	r27, r27
    15c8:	66 1f       	adc	r22, r22
    15ca:	77 1f       	adc	r23, r23
    15cc:	88 1f       	adc	r24, r24
    15ce:	91 50       	subi	r25, 0x01	; 1
    15d0:	50 40       	sbci	r21, 0x00	; 0
    15d2:	a9 f7       	brne	.-22     	; 0x15be <__mulsf3_pse+0x64>
    15d4:	9e 3f       	cpi	r25, 0xFE	; 254
    15d6:	51 05       	cpc	r21, r1
    15d8:	80 f0       	brcs	.+32     	; 0x15fa <__mulsf3_pse+0xa0>
    15da:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__fp_inf>
    15de:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_szero>
    15e2:	5f 3f       	cpi	r21, 0xFF	; 255
    15e4:	e4 f3       	brlt	.-8      	; 0x15de <__mulsf3_pse+0x84>
    15e6:	98 3e       	cpi	r25, 0xE8	; 232
    15e8:	d4 f3       	brlt	.-12     	; 0x15de <__mulsf3_pse+0x84>
    15ea:	86 95       	lsr	r24
    15ec:	77 95       	ror	r23
    15ee:	67 95       	ror	r22
    15f0:	b7 95       	ror	r27
    15f2:	f7 95       	ror	r31
    15f4:	e7 95       	ror	r30
    15f6:	9f 5f       	subi	r25, 0xFF	; 255
    15f8:	c1 f7       	brne	.-16     	; 0x15ea <__mulsf3_pse+0x90>
    15fa:	fe 2b       	or	r31, r30
    15fc:	88 0f       	add	r24, r24
    15fe:	91 1d       	adc	r25, r1
    1600:	96 95       	lsr	r25
    1602:	87 95       	ror	r24
    1604:	97 f9       	bld	r25, 7
    1606:	08 95       	ret

00001608 <square>:
    1608:	9b 01       	movw	r18, r22
    160a:	ac 01       	movw	r20, r24
    160c:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__mulsf3>

00001610 <__divmodhi4>:
    1610:	97 fb       	bst	r25, 7
    1612:	07 2e       	mov	r0, r23
    1614:	16 f4       	brtc	.+4      	; 0x161a <__divmodhi4+0xa>
    1616:	00 94       	com	r0
    1618:	07 d0       	rcall	.+14     	; 0x1628 <__divmodhi4_neg1>
    161a:	77 fd       	sbrc	r23, 7
    161c:	09 d0       	rcall	.+18     	; 0x1630 <__divmodhi4_neg2>
    161e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__udivmodhi4>
    1622:	07 fc       	sbrc	r0, 7
    1624:	05 d0       	rcall	.+10     	; 0x1630 <__divmodhi4_neg2>
    1626:	3e f4       	brtc	.+14     	; 0x1636 <__divmodhi4_exit>

00001628 <__divmodhi4_neg1>:
    1628:	90 95       	com	r25
    162a:	81 95       	neg	r24
    162c:	9f 4f       	sbci	r25, 0xFF	; 255
    162e:	08 95       	ret

00001630 <__divmodhi4_neg2>:
    1630:	70 95       	com	r23
    1632:	61 95       	neg	r22
    1634:	7f 4f       	sbci	r23, 0xFF	; 255

00001636 <__divmodhi4_exit>:
    1636:	08 95       	ret

00001638 <__udivmodhi4>:
    1638:	aa 1b       	sub	r26, r26
    163a:	bb 1b       	sub	r27, r27
    163c:	51 e1       	ldi	r21, 0x11	; 17
    163e:	07 c0       	rjmp	.+14     	; 0x164e <__udivmodhi4_ep>

00001640 <__udivmodhi4_loop>:
    1640:	aa 1f       	adc	r26, r26
    1642:	bb 1f       	adc	r27, r27
    1644:	a6 17       	cp	r26, r22
    1646:	b7 07       	cpc	r27, r23
    1648:	10 f0       	brcs	.+4      	; 0x164e <__udivmodhi4_ep>
    164a:	a6 1b       	sub	r26, r22
    164c:	b7 0b       	sbc	r27, r23

0000164e <__udivmodhi4_ep>:
    164e:	88 1f       	adc	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	5a 95       	dec	r21
    1654:	a9 f7       	brne	.-22     	; 0x1640 <__udivmodhi4_loop>
    1656:	80 95       	com	r24
    1658:	90 95       	com	r25
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	08 95       	ret

00001660 <dtostrf>:
    1660:	ef 92       	push	r14
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	e8 01       	movw	r28, r16
    166c:	47 fd       	sbrc	r20, 7
    166e:	16 c0       	rjmp	.+44     	; 0x169c <dtostrf+0x3c>
    1670:	34 e0       	ldi	r19, 0x04	; 4
    1672:	04 2e       	mov	r0, r20
    1674:	00 0c       	add	r0, r0
    1676:	55 0b       	sbc	r21, r21
    1678:	57 ff       	sbrs	r21, 7
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <dtostrf+0x22>
    167c:	51 95       	neg	r21
    167e:	41 95       	neg	r20
    1680:	51 09       	sbc	r21, r1
    1682:	e3 2e       	mov	r14, r19
    1684:	02 2f       	mov	r16, r18
    1686:	24 2f       	mov	r18, r20
    1688:	ae 01       	movw	r20, r28
    168a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <dtoa_prf>
    168e:	ce 01       	movw	r24, r28
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	ef 90       	pop	r14
    169a:	08 95       	ret
    169c:	34 e1       	ldi	r19, 0x14	; 20
    169e:	e9 cf       	rjmp	.-46     	; 0x1672 <dtostrf+0x12>

000016a0 <strcmp>:
    16a0:	fb 01       	movw	r30, r22
    16a2:	dc 01       	movw	r26, r24
    16a4:	8d 91       	ld	r24, X+
    16a6:	01 90       	ld	r0, Z+
    16a8:	80 19       	sub	r24, r0
    16aa:	01 10       	cpse	r0, r1
    16ac:	d9 f3       	breq	.-10     	; 0x16a4 <strcmp+0x4>
    16ae:	99 0b       	sbc	r25, r25
    16b0:	08 95       	ret

000016b2 <dtoa_prf>:
    16b2:	8f 92       	push	r8
    16b4:	9f 92       	push	r9
    16b6:	af 92       	push	r10
    16b8:	bf 92       	push	r11
    16ba:	cf 92       	push	r12
    16bc:	df 92       	push	r13
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	29 97       	sbiw	r28, 0x09	; 9
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	6a 01       	movw	r12, r20
    16dc:	f2 2e       	mov	r15, r18
    16de:	b0 2e       	mov	r11, r16
    16e0:	2b e3       	ldi	r18, 0x3B	; 59
    16e2:	20 17       	cp	r18, r16
    16e4:	08 f4       	brcc	.+2      	; 0x16e8 <dtoa_prf+0x36>
    16e6:	5f c0       	rjmp	.+190    	; 0x17a6 <dtoa_prf+0xf4>
    16e8:	11 e0       	ldi	r17, 0x01	; 1
    16ea:	10 0f       	add	r17, r16
    16ec:	01 2f       	mov	r16, r17
    16ee:	27 e0       	ldi	r18, 0x07	; 7
    16f0:	ae 01       	movw	r20, r28
    16f2:	4f 5f       	subi	r20, 0xFF	; 255
    16f4:	5f 4f       	sbci	r21, 0xFF	; 255
    16f6:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__ftoa_engine>
    16fa:	bc 01       	movw	r22, r24
    16fc:	39 81       	ldd	r19, Y+1	; 0x01
    16fe:	83 2f       	mov	r24, r19
    1700:	89 70       	andi	r24, 0x09	; 9
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	09 f4       	brne	.+2      	; 0x1708 <dtoa_prf+0x56>
    1706:	51 c0       	rjmp	.+162    	; 0x17aa <dtoa_prf+0xf8>
    1708:	e1 fc       	sbrc	r14, 1
    170a:	51 c0       	rjmp	.+162    	; 0x17ae <dtoa_prf+0xfc>
    170c:	9e 2d       	mov	r25, r14
    170e:	91 70       	andi	r25, 0x01	; 1
    1710:	e0 fc       	sbrc	r14, 0
    1712:	90 e2       	ldi	r25, 0x20	; 32
    1714:	ae 2d       	mov	r26, r14
    1716:	a0 71       	andi	r26, 0x10	; 16
    1718:	83 2f       	mov	r24, r19
    171a:	88 70       	andi	r24, 0x08	; 8
    171c:	33 ff       	sbrs	r19, 3
    171e:	5a c0       	rjmp	.+180    	; 0x17d4 <dtoa_prf+0x122>
    1720:	91 11       	cpse	r25, r1
    1722:	47 c0       	rjmp	.+142    	; 0x17b2 <dtoa_prf+0x100>
    1724:	83 e0       	ldi	r24, 0x03	; 3
    1726:	8f 15       	cp	r24, r15
    1728:	08 f0       	brcs	.+2      	; 0x172c <dtoa_prf+0x7a>
    172a:	45 c0       	rjmp	.+138    	; 0x17b6 <dtoa_prf+0x104>
    172c:	f8 1a       	sub	r15, r24
    172e:	a1 11       	cpse	r26, r1
    1730:	08 c0       	rjmp	.+16     	; 0x1742 <dtoa_prf+0x90>
    1732:	f6 01       	movw	r30, r12
    1734:	8f 2d       	mov	r24, r15
    1736:	20 e2       	ldi	r18, 0x20	; 32
    1738:	81 11       	cpse	r24, r1
    173a:	3f c0       	rjmp	.+126    	; 0x17ba <dtoa_prf+0x108>
    173c:	cf 0c       	add	r12, r15
    173e:	d1 1c       	adc	r13, r1
    1740:	f1 2c       	mov	r15, r1
    1742:	99 23       	and	r25, r25
    1744:	29 f0       	breq	.+10     	; 0x1750 <dtoa_prf+0x9e>
    1746:	d6 01       	movw	r26, r12
    1748:	9c 93       	st	X, r25
    174a:	f6 01       	movw	r30, r12
    174c:	31 96       	adiw	r30, 0x01	; 1
    174e:	6f 01       	movw	r12, r30
    1750:	c6 01       	movw	r24, r12
    1752:	03 96       	adiw	r24, 0x03	; 3
    1754:	e2 fe       	sbrs	r14, 2
    1756:	34 c0       	rjmp	.+104    	; 0x17c0 <dtoa_prf+0x10e>
    1758:	2e e4       	ldi	r18, 0x4E	; 78
    175a:	d6 01       	movw	r26, r12
    175c:	2c 93       	st	X, r18
    175e:	31 e4       	ldi	r19, 0x41	; 65
    1760:	11 96       	adiw	r26, 0x01	; 1
    1762:	3c 93       	st	X, r19
    1764:	11 97       	sbiw	r26, 0x01	; 1
    1766:	12 96       	adiw	r26, 0x02	; 2
    1768:	2c 93       	st	X, r18
    176a:	fc 01       	movw	r30, r24
    176c:	2f 2d       	mov	r18, r15
    176e:	30 e2       	ldi	r19, 0x20	; 32
    1770:	21 11       	cpse	r18, r1
    1772:	2d c0       	rjmp	.+90     	; 0x17ce <dtoa_prf+0x11c>
    1774:	8f 0d       	add	r24, r15
    1776:	91 1d       	adc	r25, r1
    1778:	dc 01       	movw	r26, r24
    177a:	1c 92       	st	X, r1
    177c:	8e ef       	ldi	r24, 0xFE	; 254
    177e:	9f ef       	ldi	r25, 0xFF	; 255
    1780:	29 96       	adiw	r28, 0x09	; 9
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	bf 90       	pop	r11
    179e:	af 90       	pop	r10
    17a0:	9f 90       	pop	r9
    17a2:	8f 90       	pop	r8
    17a4:	08 95       	ret
    17a6:	1c e3       	ldi	r17, 0x3C	; 60
    17a8:	a1 cf       	rjmp	.-190    	; 0x16ec <dtoa_prf+0x3a>
    17aa:	9d e2       	ldi	r25, 0x2D	; 45
    17ac:	b3 cf       	rjmp	.-154    	; 0x1714 <dtoa_prf+0x62>
    17ae:	9b e2       	ldi	r25, 0x2B	; 43
    17b0:	b1 cf       	rjmp	.-158    	; 0x1714 <dtoa_prf+0x62>
    17b2:	84 e0       	ldi	r24, 0x04	; 4
    17b4:	b8 cf       	rjmp	.-144    	; 0x1726 <dtoa_prf+0x74>
    17b6:	f1 2c       	mov	r15, r1
    17b8:	ba cf       	rjmp	.-140    	; 0x172e <dtoa_prf+0x7c>
    17ba:	21 93       	st	Z+, r18
    17bc:	81 50       	subi	r24, 0x01	; 1
    17be:	bc cf       	rjmp	.-136    	; 0x1738 <dtoa_prf+0x86>
    17c0:	2e e6       	ldi	r18, 0x6E	; 110
    17c2:	f6 01       	movw	r30, r12
    17c4:	20 83       	st	Z, r18
    17c6:	31 e6       	ldi	r19, 0x61	; 97
    17c8:	31 83       	std	Z+1, r19	; 0x01
    17ca:	22 83       	std	Z+2, r18	; 0x02
    17cc:	ce cf       	rjmp	.-100    	; 0x176a <dtoa_prf+0xb8>
    17ce:	31 93       	st	Z+, r19
    17d0:	21 50       	subi	r18, 0x01	; 1
    17d2:	ce cf       	rjmp	.-100    	; 0x1770 <dtoa_prf+0xbe>
    17d4:	23 2f       	mov	r18, r19
    17d6:	24 70       	andi	r18, 0x04	; 4
    17d8:	32 ff       	sbrs	r19, 2
    17da:	41 c0       	rjmp	.+130    	; 0x185e <dtoa_prf+0x1ac>
    17dc:	91 11       	cpse	r25, r1
    17de:	2f c0       	rjmp	.+94     	; 0x183e <dtoa_prf+0x18c>
    17e0:	23 e0       	ldi	r18, 0x03	; 3
    17e2:	2f 15       	cp	r18, r15
    17e4:	10 f4       	brcc	.+4      	; 0x17ea <dtoa_prf+0x138>
    17e6:	8f 2d       	mov	r24, r15
    17e8:	82 1b       	sub	r24, r18
    17ea:	a1 11       	cpse	r26, r1
    17ec:	08 c0       	rjmp	.+16     	; 0x17fe <dtoa_prf+0x14c>
    17ee:	f6 01       	movw	r30, r12
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e2       	ldi	r19, 0x20	; 32
    17f4:	21 11       	cpse	r18, r1
    17f6:	25 c0       	rjmp	.+74     	; 0x1842 <dtoa_prf+0x190>
    17f8:	c8 0e       	add	r12, r24
    17fa:	d1 1c       	adc	r13, r1
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	99 23       	and	r25, r25
    1800:	31 f0       	breq	.+12     	; 0x180e <dtoa_prf+0x15c>
    1802:	f6 01       	movw	r30, r12
    1804:	90 83       	st	Z, r25
    1806:	96 01       	movw	r18, r12
    1808:	2f 5f       	subi	r18, 0xFF	; 255
    180a:	3f 4f       	sbci	r19, 0xFF	; 255
    180c:	69 01       	movw	r12, r18
    180e:	96 01       	movw	r18, r12
    1810:	2d 5f       	subi	r18, 0xFD	; 253
    1812:	3f 4f       	sbci	r19, 0xFF	; 255
    1814:	e2 fe       	sbrs	r14, 2
    1816:	18 c0       	rjmp	.+48     	; 0x1848 <dtoa_prf+0x196>
    1818:	99 e4       	ldi	r25, 0x49	; 73
    181a:	d6 01       	movw	r26, r12
    181c:	9c 93       	st	X, r25
    181e:	9e e4       	ldi	r25, 0x4E	; 78
    1820:	11 96       	adiw	r26, 0x01	; 1
    1822:	9c 93       	st	X, r25
    1824:	11 97       	sbiw	r26, 0x01	; 1
    1826:	96 e4       	ldi	r25, 0x46	; 70
    1828:	12 96       	adiw	r26, 0x02	; 2
    182a:	9c 93       	st	X, r25
    182c:	f9 01       	movw	r30, r18
    182e:	98 2f       	mov	r25, r24
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	91 11       	cpse	r25, r1
    1834:	11 c0       	rjmp	.+34     	; 0x1858 <dtoa_prf+0x1a6>
    1836:	28 0f       	add	r18, r24
    1838:	31 1d       	adc	r19, r1
    183a:	d9 01       	movw	r26, r18
    183c:	9e cf       	rjmp	.-196    	; 0x177a <dtoa_prf+0xc8>
    183e:	24 e0       	ldi	r18, 0x04	; 4
    1840:	d0 cf       	rjmp	.-96     	; 0x17e2 <dtoa_prf+0x130>
    1842:	31 93       	st	Z+, r19
    1844:	21 50       	subi	r18, 0x01	; 1
    1846:	d6 cf       	rjmp	.-84     	; 0x17f4 <dtoa_prf+0x142>
    1848:	99 e6       	ldi	r25, 0x69	; 105
    184a:	f6 01       	movw	r30, r12
    184c:	90 83       	st	Z, r25
    184e:	9e e6       	ldi	r25, 0x6E	; 110
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	96 e6       	ldi	r25, 0x66	; 102
    1854:	92 83       	std	Z+2, r25	; 0x02
    1856:	ea cf       	rjmp	.-44     	; 0x182c <dtoa_prf+0x17a>
    1858:	41 93       	st	Z+, r20
    185a:	91 50       	subi	r25, 0x01	; 1
    185c:	ea cf       	rjmp	.-44     	; 0x1832 <dtoa_prf+0x180>
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	91 11       	cpse	r25, r1
    1864:	02 c0       	rjmp	.+4      	; 0x186a <dtoa_prf+0x1b8>
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	16 16       	cp	r1, r22
    186c:	17 06       	cpc	r1, r23
    186e:	0c f0       	brlt	.+2      	; 0x1872 <dtoa_prf+0x1c0>
    1870:	75 c0       	rjmp	.+234    	; 0x195c <dtoa_prf+0x2aa>
    1872:	fb 01       	movw	r30, r22
    1874:	31 96       	adiw	r30, 0x01	; 1
    1876:	e4 0f       	add	r30, r20
    1878:	f5 1f       	adc	r31, r21
    187a:	bb 20       	and	r11, r11
    187c:	09 f4       	brne	.+2      	; 0x1880 <dtoa_prf+0x1ce>
    187e:	71 c0       	rjmp	.+226    	; 0x1962 <dtoa_prf+0x2b0>
    1880:	4b 2d       	mov	r20, r11
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	4f 5f       	subi	r20, 0xFF	; 255
    1886:	5f 4f       	sbci	r21, 0xFF	; 255
    1888:	4e 0f       	add	r20, r30
    188a:	5f 1f       	adc	r21, r31
    188c:	ef 2d       	mov	r30, r15
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	4e 17       	cp	r20, r30
    1892:	5f 07       	cpc	r21, r31
    1894:	14 f4       	brge	.+4      	; 0x189a <dtoa_prf+0x1e8>
    1896:	2f 2d       	mov	r18, r15
    1898:	24 1b       	sub	r18, r20
    189a:	8e 2d       	mov	r24, r14
    189c:	88 71       	andi	r24, 0x18	; 24
    189e:	41 f4       	brne	.+16     	; 0x18b0 <dtoa_prf+0x1fe>
    18a0:	f6 01       	movw	r30, r12
    18a2:	82 2f       	mov	r24, r18
    18a4:	40 e2       	ldi	r20, 0x20	; 32
    18a6:	81 11       	cpse	r24, r1
    18a8:	5f c0       	rjmp	.+190    	; 0x1968 <dtoa_prf+0x2b6>
    18aa:	c2 0e       	add	r12, r18
    18ac:	d1 1c       	adc	r13, r1
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	99 23       	and	r25, r25
    18b2:	29 f0       	breq	.+10     	; 0x18be <dtoa_prf+0x20c>
    18b4:	f6 01       	movw	r30, r12
    18b6:	90 83       	st	Z, r25
    18b8:	c6 01       	movw	r24, r12
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	6c 01       	movw	r12, r24
    18be:	a1 11       	cpse	r26, r1
    18c0:	08 c0       	rjmp	.+16     	; 0x18d2 <dtoa_prf+0x220>
    18c2:	f6 01       	movw	r30, r12
    18c4:	82 2f       	mov	r24, r18
    18c6:	90 e3       	ldi	r25, 0x30	; 48
    18c8:	81 11       	cpse	r24, r1
    18ca:	51 c0       	rjmp	.+162    	; 0x196e <dtoa_prf+0x2bc>
    18cc:	c2 0e       	add	r12, r18
    18ce:	d1 1c       	adc	r13, r1
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	01 2f       	mov	r16, r17
    18d4:	06 0f       	add	r16, r22
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	a3 2f       	mov	r26, r19
    18da:	a0 71       	andi	r26, 0x10	; 16
    18dc:	aa 2e       	mov	r10, r26
    18de:	34 ff       	sbrs	r19, 4
    18e0:	03 c0       	rjmp	.+6      	; 0x18e8 <dtoa_prf+0x236>
    18e2:	91 33       	cpi	r25, 0x31	; 49
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <dtoa_prf+0x236>
    18e6:	01 50       	subi	r16, 0x01	; 1
    18e8:	10 16       	cp	r1, r16
    18ea:	0c f0       	brlt	.+2      	; 0x18ee <dtoa_prf+0x23c>
    18ec:	43 c0       	rjmp	.+134    	; 0x1974 <dtoa_prf+0x2c2>
    18ee:	09 30       	cpi	r16, 0x09	; 9
    18f0:	08 f0       	brcs	.+2      	; 0x18f4 <dtoa_prf+0x242>
    18f2:	08 e0       	ldi	r16, 0x08	; 8
    18f4:	ab 01       	movw	r20, r22
    18f6:	77 ff       	sbrs	r23, 7
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <dtoa_prf+0x24c>
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	fb 01       	movw	r30, r22
    1900:	31 96       	adiw	r30, 0x01	; 1
    1902:	e4 1b       	sub	r30, r20
    1904:	f5 0b       	sbc	r31, r21
    1906:	a1 e0       	ldi	r26, 0x01	; 1
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	ac 0f       	add	r26, r28
    190c:	bd 1f       	adc	r27, r29
    190e:	ea 0f       	add	r30, r26
    1910:	fb 1f       	adc	r31, r27
    1912:	3e e2       	ldi	r19, 0x2E	; 46
    1914:	4b 01       	movw	r8, r22
    1916:	80 1a       	sub	r8, r16
    1918:	91 08       	sbc	r9, r1
    191a:	0b 2d       	mov	r16, r11
    191c:	10 e0       	ldi	r17, 0x00	; 0
    191e:	11 95       	neg	r17
    1920:	01 95       	neg	r16
    1922:	11 09       	sbc	r17, r1
    1924:	4f 3f       	cpi	r20, 0xFF	; 255
    1926:	bf ef       	ldi	r27, 0xFF	; 255
    1928:	5b 07       	cpc	r21, r27
    192a:	21 f4       	brne	.+8      	; 0x1934 <dtoa_prf+0x282>
    192c:	d6 01       	movw	r26, r12
    192e:	3c 93       	st	X, r19
    1930:	11 96       	adiw	r26, 0x01	; 1
    1932:	6d 01       	movw	r12, r26
    1934:	64 17       	cp	r22, r20
    1936:	75 07       	cpc	r23, r21
    1938:	fc f0       	brlt	.+62     	; 0x1978 <dtoa_prf+0x2c6>
    193a:	84 16       	cp	r8, r20
    193c:	95 06       	cpc	r9, r21
    193e:	e4 f4       	brge	.+56     	; 0x1978 <dtoa_prf+0x2c6>
    1940:	80 81       	ld	r24, Z
    1942:	41 50       	subi	r20, 0x01	; 1
    1944:	51 09       	sbc	r21, r1
    1946:	31 96       	adiw	r30, 0x01	; 1
    1948:	d6 01       	movw	r26, r12
    194a:	11 96       	adiw	r26, 0x01	; 1
    194c:	7d 01       	movw	r14, r26
    194e:	40 17       	cp	r20, r16
    1950:	51 07       	cpc	r21, r17
    1952:	a4 f0       	brlt	.+40     	; 0x197c <dtoa_prf+0x2ca>
    1954:	d6 01       	movw	r26, r12
    1956:	8c 93       	st	X, r24
    1958:	67 01       	movw	r12, r14
    195a:	e4 cf       	rjmp	.-56     	; 0x1924 <dtoa_prf+0x272>
    195c:	e1 e0       	ldi	r30, 0x01	; 1
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	8a cf       	rjmp	.-236    	; 0x1876 <dtoa_prf+0x1c4>
    1962:	40 e0       	ldi	r20, 0x00	; 0
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	90 cf       	rjmp	.-224    	; 0x1888 <dtoa_prf+0x1d6>
    1968:	41 93       	st	Z+, r20
    196a:	81 50       	subi	r24, 0x01	; 1
    196c:	9c cf       	rjmp	.-200    	; 0x18a6 <dtoa_prf+0x1f4>
    196e:	91 93       	st	Z+, r25
    1970:	81 50       	subi	r24, 0x01	; 1
    1972:	aa cf       	rjmp	.-172    	; 0x18c8 <dtoa_prf+0x216>
    1974:	01 e0       	ldi	r16, 0x01	; 1
    1976:	be cf       	rjmp	.-132    	; 0x18f4 <dtoa_prf+0x242>
    1978:	80 e3       	ldi	r24, 0x30	; 48
    197a:	e3 cf       	rjmp	.-58     	; 0x1942 <dtoa_prf+0x290>
    197c:	64 17       	cp	r22, r20
    197e:	75 07       	cpc	r23, r21
    1980:	31 f4       	brne	.+12     	; 0x198e <dtoa_prf+0x2dc>
    1982:	96 33       	cpi	r25, 0x36	; 54
    1984:	90 f4       	brcc	.+36     	; 0x19aa <dtoa_prf+0x2f8>
    1986:	95 33       	cpi	r25, 0x35	; 53
    1988:	11 f4       	brne	.+4      	; 0x198e <dtoa_prf+0x2dc>
    198a:	aa 20       	and	r10, r10
    198c:	71 f0       	breq	.+28     	; 0x19aa <dtoa_prf+0x2f8>
    198e:	f6 01       	movw	r30, r12
    1990:	80 83       	st	Z, r24
    1992:	f7 01       	movw	r30, r14
    1994:	82 2f       	mov	r24, r18
    1996:	90 e2       	ldi	r25, 0x20	; 32
    1998:	81 11       	cpse	r24, r1
    199a:	09 c0       	rjmp	.+18     	; 0x19ae <dtoa_prf+0x2fc>
    199c:	f7 01       	movw	r30, r14
    199e:	e2 0f       	add	r30, r18
    19a0:	f1 1d       	adc	r31, r1
    19a2:	10 82       	st	Z, r1
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	eb ce       	rjmp	.-554    	; 0x1780 <dtoa_prf+0xce>
    19aa:	81 e3       	ldi	r24, 0x31	; 49
    19ac:	f0 cf       	rjmp	.-32     	; 0x198e <dtoa_prf+0x2dc>
    19ae:	91 93       	st	Z+, r25
    19b0:	81 50       	subi	r24, 0x01	; 1
    19b2:	f2 cf       	rjmp	.-28     	; 0x1998 <dtoa_prf+0x2e6>

000019b4 <__ftoa_engine>:
    19b4:	28 30       	cpi	r18, 0x08	; 8
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <__ftoa_engine+0x6>
    19b8:	27 e0       	ldi	r18, 0x07	; 7
    19ba:	33 27       	eor	r19, r19
    19bc:	da 01       	movw	r26, r20
    19be:	99 0f       	add	r25, r25
    19c0:	31 1d       	adc	r19, r1
    19c2:	87 fd       	sbrc	r24, 7
    19c4:	91 60       	ori	r25, 0x01	; 1
    19c6:	00 96       	adiw	r24, 0x00	; 0
    19c8:	61 05       	cpc	r22, r1
    19ca:	71 05       	cpc	r23, r1
    19cc:	39 f4       	brne	.+14     	; 0x19dc <__ftoa_engine+0x28>
    19ce:	32 60       	ori	r19, 0x02	; 2
    19d0:	2e 5f       	subi	r18, 0xFE	; 254
    19d2:	3d 93       	st	X+, r19
    19d4:	30 e3       	ldi	r19, 0x30	; 48
    19d6:	2a 95       	dec	r18
    19d8:	e1 f7       	brne	.-8      	; 0x19d2 <__ftoa_engine+0x1e>
    19da:	08 95       	ret
    19dc:	9f 3f       	cpi	r25, 0xFF	; 255
    19de:	30 f0       	brcs	.+12     	; 0x19ec <__ftoa_engine+0x38>
    19e0:	80 38       	cpi	r24, 0x80	; 128
    19e2:	71 05       	cpc	r23, r1
    19e4:	61 05       	cpc	r22, r1
    19e6:	09 f0       	breq	.+2      	; 0x19ea <__ftoa_engine+0x36>
    19e8:	3c 5f       	subi	r19, 0xFC	; 252
    19ea:	3c 5f       	subi	r19, 0xFC	; 252
    19ec:	3d 93       	st	X+, r19
    19ee:	91 30       	cpi	r25, 0x01	; 1
    19f0:	08 f0       	brcs	.+2      	; 0x19f4 <__ftoa_engine+0x40>
    19f2:	80 68       	ori	r24, 0x80	; 128
    19f4:	91 1d       	adc	r25, r1
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	1f 93       	push	r17
    19fc:	0f 93       	push	r16
    19fe:	ff 92       	push	r15
    1a00:	ef 92       	push	r14
    1a02:	19 2f       	mov	r17, r25
    1a04:	98 7f       	andi	r25, 0xF8	; 248
    1a06:	96 95       	lsr	r25
    1a08:	e9 2f       	mov	r30, r25
    1a0a:	96 95       	lsr	r25
    1a0c:	96 95       	lsr	r25
    1a0e:	e9 0f       	add	r30, r25
    1a10:	ff 27       	eor	r31, r31
    1a12:	ec 5e       	subi	r30, 0xEC	; 236
    1a14:	fe 4f       	sbci	r31, 0xFE	; 254
    1a16:	99 27       	eor	r25, r25
    1a18:	33 27       	eor	r19, r19
    1a1a:	ee 24       	eor	r14, r14
    1a1c:	ff 24       	eor	r15, r15
    1a1e:	a7 01       	movw	r20, r14
    1a20:	e7 01       	movw	r28, r14
    1a22:	05 90       	lpm	r0, Z+
    1a24:	08 94       	sec
    1a26:	07 94       	ror	r0
    1a28:	28 f4       	brcc	.+10     	; 0x1a34 <__ftoa_engine+0x80>
    1a2a:	36 0f       	add	r19, r22
    1a2c:	e7 1e       	adc	r14, r23
    1a2e:	f8 1e       	adc	r15, r24
    1a30:	49 1f       	adc	r20, r25
    1a32:	51 1d       	adc	r21, r1
    1a34:	66 0f       	add	r22, r22
    1a36:	77 1f       	adc	r23, r23
    1a38:	88 1f       	adc	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	06 94       	lsr	r0
    1a3e:	a1 f7       	brne	.-24     	; 0x1a28 <__ftoa_engine+0x74>
    1a40:	05 90       	lpm	r0, Z+
    1a42:	07 94       	ror	r0
    1a44:	28 f4       	brcc	.+10     	; 0x1a50 <__ftoa_engine+0x9c>
    1a46:	e7 0e       	add	r14, r23
    1a48:	f8 1e       	adc	r15, r24
    1a4a:	49 1f       	adc	r20, r25
    1a4c:	56 1f       	adc	r21, r22
    1a4e:	c1 1d       	adc	r28, r1
    1a50:	77 0f       	add	r23, r23
    1a52:	88 1f       	adc	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	66 1f       	adc	r22, r22
    1a58:	06 94       	lsr	r0
    1a5a:	a1 f7       	brne	.-24     	; 0x1a44 <__ftoa_engine+0x90>
    1a5c:	05 90       	lpm	r0, Z+
    1a5e:	07 94       	ror	r0
    1a60:	28 f4       	brcc	.+10     	; 0x1a6c <__ftoa_engine+0xb8>
    1a62:	f8 0e       	add	r15, r24
    1a64:	49 1f       	adc	r20, r25
    1a66:	56 1f       	adc	r21, r22
    1a68:	c7 1f       	adc	r28, r23
    1a6a:	d1 1d       	adc	r29, r1
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	66 1f       	adc	r22, r22
    1a72:	77 1f       	adc	r23, r23
    1a74:	06 94       	lsr	r0
    1a76:	a1 f7       	brne	.-24     	; 0x1a60 <__ftoa_engine+0xac>
    1a78:	05 90       	lpm	r0, Z+
    1a7a:	07 94       	ror	r0
    1a7c:	20 f4       	brcc	.+8      	; 0x1a86 <__ftoa_engine+0xd2>
    1a7e:	49 0f       	add	r20, r25
    1a80:	56 1f       	adc	r21, r22
    1a82:	c7 1f       	adc	r28, r23
    1a84:	d8 1f       	adc	r29, r24
    1a86:	99 0f       	add	r25, r25
    1a88:	66 1f       	adc	r22, r22
    1a8a:	77 1f       	adc	r23, r23
    1a8c:	88 1f       	adc	r24, r24
    1a8e:	06 94       	lsr	r0
    1a90:	a9 f7       	brne	.-22     	; 0x1a7c <__ftoa_engine+0xc8>
    1a92:	84 91       	lpm	r24, Z
    1a94:	10 95       	com	r17
    1a96:	17 70       	andi	r17, 0x07	; 7
    1a98:	41 f0       	breq	.+16     	; 0x1aaa <__ftoa_engine+0xf6>
    1a9a:	d6 95       	lsr	r29
    1a9c:	c7 95       	ror	r28
    1a9e:	57 95       	ror	r21
    1aa0:	47 95       	ror	r20
    1aa2:	f7 94       	ror	r15
    1aa4:	e7 94       	ror	r14
    1aa6:	1a 95       	dec	r17
    1aa8:	c1 f7       	brne	.-16     	; 0x1a9a <__ftoa_engine+0xe6>
    1aaa:	ea eb       	ldi	r30, 0xBA	; 186
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	68 94       	set
    1ab0:	15 90       	lpm	r1, Z+
    1ab2:	15 91       	lpm	r17, Z+
    1ab4:	35 91       	lpm	r19, Z+
    1ab6:	65 91       	lpm	r22, Z+
    1ab8:	95 91       	lpm	r25, Z+
    1aba:	05 90       	lpm	r0, Z+
    1abc:	7f e2       	ldi	r23, 0x2F	; 47
    1abe:	73 95       	inc	r23
    1ac0:	e1 18       	sub	r14, r1
    1ac2:	f1 0a       	sbc	r15, r17
    1ac4:	43 0b       	sbc	r20, r19
    1ac6:	56 0b       	sbc	r21, r22
    1ac8:	c9 0b       	sbc	r28, r25
    1aca:	d0 09       	sbc	r29, r0
    1acc:	c0 f7       	brcc	.-16     	; 0x1abe <__ftoa_engine+0x10a>
    1ace:	e1 0c       	add	r14, r1
    1ad0:	f1 1e       	adc	r15, r17
    1ad2:	43 1f       	adc	r20, r19
    1ad4:	56 1f       	adc	r21, r22
    1ad6:	c9 1f       	adc	r28, r25
    1ad8:	d0 1d       	adc	r29, r0
    1ada:	7e f4       	brtc	.+30     	; 0x1afa <__ftoa_engine+0x146>
    1adc:	70 33       	cpi	r23, 0x30	; 48
    1ade:	11 f4       	brne	.+4      	; 0x1ae4 <__ftoa_engine+0x130>
    1ae0:	8a 95       	dec	r24
    1ae2:	e6 cf       	rjmp	.-52     	; 0x1ab0 <__ftoa_engine+0xfc>
    1ae4:	e8 94       	clt
    1ae6:	01 50       	subi	r16, 0x01	; 1
    1ae8:	30 f0       	brcs	.+12     	; 0x1af6 <__ftoa_engine+0x142>
    1aea:	08 0f       	add	r16, r24
    1aec:	0a f4       	brpl	.+2      	; 0x1af0 <__ftoa_engine+0x13c>
    1aee:	00 27       	eor	r16, r16
    1af0:	02 17       	cp	r16, r18
    1af2:	08 f4       	brcc	.+2      	; 0x1af6 <__ftoa_engine+0x142>
    1af4:	20 2f       	mov	r18, r16
    1af6:	23 95       	inc	r18
    1af8:	02 2f       	mov	r16, r18
    1afa:	7a 33       	cpi	r23, 0x3A	; 58
    1afc:	28 f0       	brcs	.+10     	; 0x1b08 <__ftoa_engine+0x154>
    1afe:	79 e3       	ldi	r23, 0x39	; 57
    1b00:	7d 93       	st	X+, r23
    1b02:	2a 95       	dec	r18
    1b04:	e9 f7       	brne	.-6      	; 0x1b00 <__ftoa_engine+0x14c>
    1b06:	10 c0       	rjmp	.+32     	; 0x1b28 <__ftoa_engine+0x174>
    1b08:	7d 93       	st	X+, r23
    1b0a:	2a 95       	dec	r18
    1b0c:	89 f6       	brne	.-94     	; 0x1ab0 <__ftoa_engine+0xfc>
    1b0e:	06 94       	lsr	r0
    1b10:	97 95       	ror	r25
    1b12:	67 95       	ror	r22
    1b14:	37 95       	ror	r19
    1b16:	17 95       	ror	r17
    1b18:	17 94       	ror	r1
    1b1a:	e1 18       	sub	r14, r1
    1b1c:	f1 0a       	sbc	r15, r17
    1b1e:	43 0b       	sbc	r20, r19
    1b20:	56 0b       	sbc	r21, r22
    1b22:	c9 0b       	sbc	r28, r25
    1b24:	d0 09       	sbc	r29, r0
    1b26:	98 f0       	brcs	.+38     	; 0x1b4e <__ftoa_engine+0x19a>
    1b28:	23 95       	inc	r18
    1b2a:	7e 91       	ld	r23, -X
    1b2c:	73 95       	inc	r23
    1b2e:	7a 33       	cpi	r23, 0x3A	; 58
    1b30:	08 f0       	brcs	.+2      	; 0x1b34 <__ftoa_engine+0x180>
    1b32:	70 e3       	ldi	r23, 0x30	; 48
    1b34:	7c 93       	st	X, r23
    1b36:	20 13       	cpse	r18, r16
    1b38:	b8 f7       	brcc	.-18     	; 0x1b28 <__ftoa_engine+0x174>
    1b3a:	7e 91       	ld	r23, -X
    1b3c:	70 61       	ori	r23, 0x10	; 16
    1b3e:	7d 93       	st	X+, r23
    1b40:	30 f0       	brcs	.+12     	; 0x1b4e <__ftoa_engine+0x19a>
    1b42:	83 95       	inc	r24
    1b44:	71 e3       	ldi	r23, 0x31	; 49
    1b46:	7d 93       	st	X+, r23
    1b48:	70 e3       	ldi	r23, 0x30	; 48
    1b4a:	2a 95       	dec	r18
    1b4c:	e1 f7       	brne	.-8      	; 0x1b46 <__ftoa_engine+0x192>
    1b4e:	11 24       	eor	r1, r1
    1b50:	ef 90       	pop	r14
    1b52:	ff 90       	pop	r15
    1b54:	0f 91       	pop	r16
    1b56:	1f 91       	pop	r17
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	99 27       	eor	r25, r25
    1b5e:	87 fd       	sbrc	r24, 7
    1b60:	90 95       	com	r25
    1b62:	08 95       	ret

00001b64 <_exit>:
    1b64:	f8 94       	cli

00001b66 <__stop_program>:
    1b66:	ff cf       	rjmp	.-2      	; 0x1b66 <__stop_program>
