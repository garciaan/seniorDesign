
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000144c  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000144c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800142  00800142  00001522  2**0
                  ALLOC
  3 .stab         00001c74  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001365  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000044fd  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004510  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  0000454c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00004ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  000053e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00005401  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__ctors_end>
       4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      24:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      28:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      34:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      48:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      4c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      54:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      58:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      5c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      60:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      64:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      68:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      6c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      70:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      74:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      78:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      7c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      80:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      84:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      88:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	00 40       	sbci	r16, 0x00	; 0
      8e:	7a 10       	cpse	r7, r10
      90:	f3 5a       	subi	r31, 0xA3	; 163
      92:	00 a0       	ldd	r0, Z+32	; 0x20
      94:	72 4e       	sbci	r23, 0xE2	; 226
      96:	18 09       	sbc	r17, r8
      98:	00 10       	cpse	r0, r0
      9a:	a5 d4       	rcall	.+2378   	; 0x9e6 <main+0x338>
      9c:	e8 00       	.word	0x00e8	; ????
      9e:	00 e8       	ldi	r16, 0x80	; 128
      a0:	76 48       	sbci	r23, 0x86	; 134
      a2:	17 00       	.word	0x0017	; ????
      a4:	00 e4       	ldi	r16, 0x40	; 64
      a6:	0b 54       	subi	r16, 0x4B	; 75
      a8:	02 00       	.word	0x0002	; ????
      aa:	00 ca       	rjmp	.-3072   	; 0xfffff4ac <__eeprom_end+0xff7ef4ac>
      ac:	9a 3b       	cpi	r25, 0xBA	; 186
      ae:	00 00       	nop
      b0:	00 e1       	ldi	r16, 0x10	; 16
      b2:	f5 05       	cpc	r31, r5
      b4:	00 00       	nop
      b6:	80 96       	adiw	r24, 0x20	; 32
      b8:	98 00       	.word	0x0098	; ????
      ba:	00 00       	nop
      bc:	40 42       	sbci	r20, 0x20	; 32
      be:	0f 00       	.word	0x000f	; ????
      c0:	00 00       	nop
      c2:	a0 86       	std	Z+8, r10	; 0x08
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	10 27       	eor	r17, r16
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	e8 03       	fmulsu	r22, r16
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	64 00       	.word	0x0064	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	0a 00       	.word	0x000a	; ????
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	01 00       	.word	0x0001	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	2c 76       	andi	r18, 0x6C	; 108
      e8:	d8 88       	ldd	r13, Y+16	; 0x10
      ea:	dc 67       	ori	r29, 0x7C	; 124
      ec:	4f 08       	sbc	r4, r15
      ee:	23 df       	rcall	.-442    	; 0xffffff36 <__eeprom_end+0xff7eff36>
      f0:	c1 df       	rcall	.-126    	; 0x74 <__SREG__+0x35>
      f2:	ae 59       	subi	r26, 0x9E	; 158
      f4:	e1 b1       	in	r30, 0x01	; 1
      f6:	b7 96       	adiw	r30, 0x27	; 39
      f8:	e5 e3       	ldi	r30, 0x35	; 53
      fa:	e4 53       	subi	r30, 0x34	; 52
      fc:	c6 3a       	cpi	r28, 0xA6	; 166
      fe:	e6 51       	subi	r30, 0x16	; 22
     100:	99 76       	andi	r25, 0x69	; 105
     102:	96 e8       	ldi	r25, 0x86	; 134
     104:	e6 c2       	rjmp	.+1484   	; 0x6d2 <main+0x24>
     106:	84 26       	eor	r8, r20
     108:	eb 89       	ldd	r30, Y+19	; 0x13
     10a:	8c 9b       	sbis	0x11, 4	; 17
     10c:	62 ed       	ldi	r22, 0xD2	; 210
     10e:	40 7c       	andi	r20, 0xC0	; 192
     110:	6f fc       	.word	0xfc6f	; ????
     112:	ef bc       	out	0x2f, r14	; 47
     114:	9c 9f       	mul	r25, r28
     116:	40 f2       	brcs	.-112    	; 0xa8 <__trampolines_end+0x1c>
     118:	ba a5       	ldd	r27, Y+42	; 0x2a
     11a:	6f a5       	ldd	r22, Y+47	; 0x2f
     11c:	f4 90       	lpm	r15, Z
     11e:	05 5a       	subi	r16, 0xA5	; 165
     120:	2a f7       	brpl	.-54     	; 0xec <__trampolines_end+0x60>
     122:	5c 93       	st	X, r21
     124:	6b 6c       	ori	r22, 0xCB	; 203
     126:	f9 67       	ori	r31, 0x79	; 121
     128:	6d c1       	rjmp	.+730    	; 0x404 <USART_send_string+0x12>
     12a:	1b fc       	.word	0xfc1b	; ????
     12c:	e0 e4       	ldi	r30, 0x40	; 64
     12e:	0d 47       	sbci	r16, 0x7D	; 125
     130:	fe f5       	brtc	.+126    	; 0x1b0 <__do_clear_bss+0x4>
     132:	20 e6       	ldi	r18, 0x60	; 96
     134:	b5 00       	.word	0x00b5	; ????
     136:	d0 ed       	ldi	r29, 0xD0	; 208
     138:	90 2e       	mov	r9, r16
     13a:	03 00       	.word	0x0003	; ????
     13c:	94 35       	cpi	r25, 0x54	; 84
     13e:	77 05       	cpc	r23, r7
     140:	00 80       	ld	r0, Z
     142:	84 1e       	adc	r8, r20
     144:	08 00       	.word	0x0008	; ????
     146:	00 20       	and	r0, r0
     148:	4e 0a       	sbc	r4, r30
     14a:	00 00       	nop
     14c:	00 c8       	rjmp	.-4096   	; 0xfffff14e <__eeprom_end+0xff7ef14e>
     14e:	0c 33       	cpi	r16, 0x3C	; 60
     150:	33 33       	cpi	r19, 0x33	; 51
     152:	33 0f       	add	r19, r19
     154:	98 6e       	ori	r25, 0xE8	; 232
     156:	12 83       	std	Z+2, r17	; 0x02
     158:	11 41       	sbci	r17, 0x11	; 17
     15a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     15c:	21 14       	cp	r2, r1
     15e:	89 3b       	cpi	r24, 0xB9	; 185
     160:	e6 55       	subi	r30, 0x56	; 86
     162:	16 cf       	rjmp	.-468    	; 0xffffff90 <__eeprom_end+0xff7eff90>
     164:	fe e6       	ldi	r31, 0x6E	; 110
     166:	db 18       	sub	r13, r11
     168:	d1 84       	ldd	r13, Z+9	; 0x09
     16a:	4b 38       	cpi	r20, 0x8B	; 139
     16c:	1b f7       	brvc	.-58     	; 0x134 <__trampolines_end+0xa8>
     16e:	7c 1d       	adc	r23, r12
     170:	90 1d       	adc	r25, r0
     172:	a4 bb       	out	0x14, r26	; 20
     174:	e4 24       	eor	r14, r4
     176:	20 32       	cpi	r18, 0x20	; 32
     178:	84 72       	andi	r24, 0x24	; 36
     17a:	5e 22       	and	r5, r30
     17c:	81 00       	.word	0x0081	; ????
     17e:	c9 f1       	breq	.+114    	; 0x1f2 <set_16bitPWM1+0x6>
     180:	24 ec       	ldi	r18, 0xC4	; 196
     182:	a1 e5       	ldi	r26, 0x51	; 81
     184:	3d 27       	eor	r19, r29

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d0 e1       	ldi	r29, 0x10	; 16
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_copy_data>:
     192:	11 e0       	ldi	r17, 0x01	; 1
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	ec e4       	ldi	r30, 0x4C	; 76
     19a:	f4 e1       	ldi	r31, 0x14	; 20
     19c:	00 e0       	ldi	r16, 0x00	; 0
     19e:	0b bf       	out	0x3b, r16	; 59
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x14>
     1a2:	07 90       	elpm	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	a2 34       	cpi	r26, 0x42	; 66
     1a8:	b1 07       	cpc	r27, r17
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0x10>

000001ac <__do_clear_bss>:
     1ac:	21 e0       	ldi	r18, 0x01	; 1
     1ae:	a2 e4       	ldi	r26, 0x42	; 66
     1b0:	b1 e0       	ldi	r27, 0x01	; 1
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
     1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
     1b6:	a4 34       	cpi	r26, 0x44	; 68
     1b8:	b2 07       	cpc	r27, r18
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
     1bc:	0e 94 57 03 	call	0x6ae	; 0x6ae <main>
     1c0:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c8 <init_esc>:

    return 0;
}

void init_esc(){
    PORTB |= (1 << 4);
     1c8:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ca:	8f e6       	ldi	r24, 0x6F	; 111
     1cc:	97 e1       	ldi	r25, 0x17	; 23
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <init_esc+0x6>
     1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <init_esc+0xc>
     1d4:	00 00       	nop
    _delay_us(STOP);
    PORTB &= ~(1 << 4);
     1d6:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d8:	9f ef       	ldi	r25, 0xFF	; 255
     1da:	23 ed       	ldi	r18, 0xD3	; 211
     1dc:	80 e3       	ldi	r24, 0x30	; 48
     1de:	91 50       	subi	r25, 0x01	; 1
     1e0:	20 40       	sbci	r18, 0x00	; 0
     1e2:	80 40       	sbci	r24, 0x00	; 0
     1e4:	e1 f7       	brne	.-8      	; 0x1de <init_esc+0x16>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <init_esc+0x20>
     1e8:	00 00       	nop
     1ea:	08 95       	ret

000001ec <set_16bitPWM1>:
    _delay_ms(1000);
}

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
     1ec:	8f b5       	in	r24, 0x2f	; 47
     1ee:	80 68       	ori	r24, 0x80	; 128
     1f0:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
     1f2:	8f b5       	in	r24, 0x2f	; 47
     1f4:	80 62       	ori	r24, 0x20	; 32
     1f6:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
     1f8:	8f b5       	in	r24, 0x2f	; 47
     1fa:	88 60       	ori	r24, 0x08	; 8
     1fc:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
     1fe:	8f b5       	in	r24, 0x2f	; 47
     200:	82 60       	ori	r24, 0x02	; 2
     202:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
     204:	8e b5       	in	r24, 0x2e	; 46
     206:	88 61       	ori	r24, 0x18	; 24
     208:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
     20a:	8e b5       	in	r24, 0x2e	; 46
     20c:	82 60       	ori	r24, 0x02	; 2
     20e:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     210:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     212:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	3d bd       	out	0x2d, r19	; 45
     21a:	2c bd       	out	0x2c, r18	; 44
    sei();
     21c:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     21e:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
     220:	8f ef       	ldi	r24, 0xFF	; 255
     222:	9f ef       	ldi	r25, 0xFF	; 255
     224:	97 bd       	out	0x27, r25	; 39
     226:	86 bd       	out	0x26, r24	; 38
     228:	2f ef       	ldi	r18, 0xFF	; 255
     22a:	81 ee       	ldi	r24, 0xE1	; 225
     22c:	94 e0       	ldi	r25, 0x04	; 4
     22e:	21 50       	subi	r18, 0x01	; 1
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	90 40       	sbci	r25, 0x00	; 0
     234:	e1 f7       	brne	.-8      	; 0x22e <set_16bitPWM1+0x42>
     236:	00 c0       	rjmp	.+0      	; 0x238 <set_16bitPWM1+0x4c>
     238:	00 00       	nop
     23a:	08 95       	ret

0000023c <TIM16_WriteTCNT1>:
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
     23c:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     23e:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     240:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     242:	3d bd       	out	0x2d, r19	; 45
     244:	2c bd       	out	0x2c, r18	; 44
    sei();
     246:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     248:	9f bf       	out	0x3f, r25	; 63
     24a:	08 95       	ret

0000024c <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
     24c:	4f 92       	push	r4
     24e:	5f 92       	push	r5
     250:	6f 92       	push	r6
     252:	7f 92       	push	r7
     254:	8f 92       	push	r8
     256:	9f 92       	push	r9
     258:	af 92       	push	r10
     25a:	bf 92       	push	r11
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	2b 01       	movw	r4, r22
     26e:	3c 01       	movw	r6, r24
     270:	49 01       	movw	r8, r18
     272:	5a 01       	movw	r10, r20
     274:	67 01       	movw	r12, r14
     276:	78 01       	movw	r14, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	a9 01       	movw	r20, r18
     27e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__cmpsf2>
     282:	87 fd       	sbrc	r24, 7
     284:	62 c0       	rjmp	.+196    	; 0x34a <move+0xfe>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	48 ec       	ldi	r20, 0xC8	; 200
     28c:	52 e4       	ldi	r21, 0x42	; 66
     28e:	c3 01       	movw	r24, r6
     290:	b2 01       	movw	r22, r4
     292:	0e 94 39 07 	call	0xe72	; 0xe72 <__gesf2>
     296:	18 16       	cp	r1, r24
     298:	0c f0       	brlt	.+2      	; 0x29c <move+0x50>
     29a:	61 c0       	rjmp	.+194    	; 0x35e <move+0x112>
     29c:	00 e1       	ldi	r16, 0x10	; 16
     29e:	1e e0       	ldi	r17, 0x0E	; 14
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	a9 01       	movw	r20, r18
     2a6:	c5 01       	movw	r24, r10
     2a8:	b4 01       	movw	r22, r8
     2aa:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__cmpsf2>
     2ae:	87 fd       	sbrc	r24, 7
     2b0:	53 c0       	rjmp	.+166    	; 0x358 <move+0x10c>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	48 ec       	ldi	r20, 0xC8	; 200
     2b8:	52 e4       	ldi	r21, 0x42	; 66
     2ba:	c5 01       	movw	r24, r10
     2bc:	b4 01       	movw	r22, r8
     2be:	0e 94 39 07 	call	0xe72	; 0xe72 <__gesf2>
     2c2:	18 16       	cp	r1, r24
     2c4:	0c f0       	brlt	.+2      	; 0x2c8 <move+0x7c>
     2c6:	5d c0       	rjmp	.+186    	; 0x382 <move+0x136>
     2c8:	c0 e1       	ldi	r28, 0x10	; 16
     2ca:	de e0       	ldi	r29, 0x0E	; 14
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + SATURATE_DIFFERENCE)){
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	a9 01       	movw	r20, r18
     2d2:	c7 01       	movw	r24, r14
     2d4:	b6 01       	movw	r22, r12
     2d6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__cmpsf2>
     2da:	87 fd       	sbrc	r24, 7
     2dc:	39 c0       	rjmp	.+114    	; 0x350 <move+0x104>
        z = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (z > (MAX_INPUT - SATURATE_DIFFERENCE)){
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	48 ec       	ldi	r20, 0xC8	; 200
     2e4:	52 e4       	ldi	r21, 0x42	; 66
     2e6:	c7 01       	movw	r24, r14
     2e8:	b6 01       	movw	r22, r12
     2ea:	0e 94 39 07 	call	0xe72	; 0xe72 <__gesf2>
     2ee:	18 16       	cp	r1, r24
     2f0:	0c f0       	brlt	.+2      	; 0x2f4 <move+0xa8>
     2f2:	59 c0       	rjmp	.+178    	; 0x3a6 <move+0x15a>
     2f4:	c1 2c       	mov	r12, r1
     2f6:	d1 2c       	mov	r13, r1
     2f8:	80 e8       	ldi	r24, 0x80	; 128
     2fa:	e8 2e       	mov	r14, r24
     2fc:	8f e3       	ldi	r24, 0x3F	; 63
     2fe:	f8 2e       	mov	r15, r24

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     300:	66 b5       	in	r22, 0x26	; 38
     302:	77 b5       	in	r23, 0x27	; 39
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 87 06 	call	0xd0e	; 0xd0e <__floatunsisf>
     30c:	a7 01       	movw	r20, r14
     30e:	96 01       	movw	r18, r12
     310:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__mulsf3>
     314:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__fixunssfsi>
    OCR1A = left_speed;
     318:	1b bd       	out	0x2b, r17	; 43
     31a:	0a bd       	out	0x2a, r16	; 42
    OCR1B = right_speed;
     31c:	d9 bd       	out	0x29, r29	; 41
     31e:	c8 bd       	out	0x28, r28	; 40
    OCR1C = z_speed;
     320:	70 93 79 00 	sts	0x0079, r23
     324:	60 93 78 00 	sts	0x0078, r22
	string2lcd((unsigned char *)utoa(left_speed,(char *)buffer,10));
	home_line2();
	string2lcd((unsigned char *)utoa(right_speed,(char *)buffer,10));
    */

}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	bf 90       	pop	r11
     33a:	af 90       	pop	r10
     33c:	9f 90       	pop	r9
     33e:	8f 90       	pop	r8
     340:	7f 90       	pop	r7
     342:	6f 90       	pop	r6
     344:	5f 90       	pop	r5
     346:	4f 90       	pop	r4
     348:	08 95       	ret
     34a:	00 e6       	ldi	r16, 0x60	; 96
     34c:	19 e0       	ldi	r17, 0x09	; 9
     34e:	a8 cf       	rjmp	.-176    	; 0x2a0 <move+0x54>
     350:	c1 2c       	mov	r12, r1
     352:	d1 2c       	mov	r13, r1
     354:	76 01       	movw	r14, r12
     356:	d4 cf       	rjmp	.-88     	; 0x300 <move+0xb4>
     358:	c0 e6       	ldi	r28, 0x60	; 96
     35a:	d9 e0       	ldi	r29, 0x09	; 9
     35c:	b7 cf       	rjmp	.-146    	; 0x2cc <move+0x80>
     35e:	2b ea       	ldi	r18, 0xAB	; 171
     360:	3a ea       	ldi	r19, 0xAA	; 170
     362:	4a ea       	ldi	r20, 0xAA	; 170
     364:	5d e3       	ldi	r21, 0x3D	; 61
     366:	c3 01       	movw	r24, r6
     368:	b2 01       	movw	r22, r4
     36a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__divsf3>
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	46 e1       	ldi	r20, 0x16	; 22
     374:	55 e4       	ldi	r21, 0x45	; 69
     376:	0e 94 75 05 	call	0xaea	; 0xaea <__addsf3>
     37a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__fixunssfsi>
     37e:	8b 01       	movw	r16, r22
     380:	8f cf       	rjmp	.-226    	; 0x2a0 <move+0x54>
     382:	2b ea       	ldi	r18, 0xAB	; 171
     384:	3a ea       	ldi	r19, 0xAA	; 170
     386:	4a ea       	ldi	r20, 0xAA	; 170
     388:	5d e3       	ldi	r21, 0x3D	; 61
     38a:	c5 01       	movw	r24, r10
     38c:	b4 01       	movw	r22, r8
     38e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__divsf3>
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	46 e1       	ldi	r20, 0x16	; 22
     398:	55 e4       	ldi	r21, 0x45	; 69
     39a:	0e 94 75 05 	call	0xaea	; 0xaea <__addsf3>
     39e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__fixunssfsi>
     3a2:	eb 01       	movw	r28, r22
     3a4:	93 cf       	rjmp	.-218    	; 0x2cc <move+0x80>
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	48 ec       	ldi	r20, 0xC8	; 200
     3ac:	52 e4       	ldi	r21, 0x42	; 66
     3ae:	c7 01       	movw	r24, r14
     3b0:	b6 01       	movw	r22, r12
     3b2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__divsf3>
     3b6:	6b 01       	movw	r12, r22
     3b8:	7c 01       	movw	r14, r24
     3ba:	a2 cf       	rjmp	.-188    	; 0x300 <move+0xb4>

000003bc <USART_Init>:


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     3bc:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
     3c0:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     3c4:	88 e1       	ldi	r24, 0x18	; 24
     3c6:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
     3ca:	8c e0       	ldi	r24, 0x0C	; 12
     3cc:	80 93 9d 00 	sts	0x009D, r24
     3d0:	2f ef       	ldi	r18, 0xFF	; 255
     3d2:	81 ee       	ldi	r24, 0xE1	; 225
     3d4:	94 e0       	ldi	r25, 0x04	; 4
     3d6:	21 50       	subi	r18, 0x01	; 1
     3d8:	80 40       	sbci	r24, 0x00	; 0
     3da:	90 40       	sbci	r25, 0x00	; 0
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <USART_Init+0x1a>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <USART_Init+0x24>
     3e0:	00 00       	nop
     3e2:	08 95       	ret

000003e4 <USART_Transmit>:
    _delay_ms(100);
}
void USART_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     3e4:	90 91 9b 00 	lds	r25, 0x009B
     3e8:	95 ff       	sbrs	r25, 5
     3ea:	fc cf       	rjmp	.-8      	; 0x3e4 <USART_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     3ec:	80 93 9c 00 	sts	0x009C, r24
     3f0:	08 95       	ret

000003f2 <USART_send_string>:
}

void USART_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 81       	ld	r18, Z
     3f6:	22 23       	and	r18, r18
     3f8:	51 f0       	breq	.+20     	; 0x40e <USART_send_string+0x1c>
     3fa:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
    _delay_ms(100);
}
void USART_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     3fc:	90 91 9b 00 	lds	r25, 0x009B
     400:	95 ff       	sbrs	r25, 5
     402:	fc cf       	rjmp	.-8      	; 0x3fc <USART_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     404:	20 93 9c 00 	sts	0x009C, r18
}

void USART_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     408:	21 91       	ld	r18, Z+
     40a:	21 11       	cpse	r18, r1
     40c:	f7 cf       	rjmp	.-18     	; 0x3fc <USART_send_string+0xa>
     40e:	08 95       	ret

00000410 <USART_Receive>:
        USART_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART_Receive(void){
     410:	80 e2       	ldi	r24, 0x20	; 32
     412:	9e e4       	ldi	r25, 0x4E	; 78
     414:	02 c0       	rjmp	.+4      	; 0x41a <USART_Receive+0xa>
     416:	01 97       	sbiw	r24, 0x01	; 1
    do {
        if((UCSR1A & (1<<RXC1))){
            /* Get and return received data from buffer */ 
            return UDR1;
        }
    } while (--timeout);
     418:	39 f0       	breq	.+14     	; 0x428 <USART_Receive+0x18>

unsigned char USART_Receive(void){
    uint16_t timeout = 20000;
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR1A & (1<<RXC1))){
     41a:	20 91 9b 00 	lds	r18, 0x009B
     41e:	27 ff       	sbrs	r18, 7
     420:	fa cf       	rjmp	.-12     	; 0x416 <USART_Receive+0x6>
            /* Get and return received data from buffer */ 
            return UDR1;
     422:	80 91 9c 00 	lds	r24, 0x009C
     426:	08 95       	ret
        }
    } while (--timeout);
    return -1;
     428:	8f ef       	ldi	r24, 0xFF	; 255
}
     42a:	08 95       	ret

0000042c <USART_Receive_String>:

void USART_Receive_String(unsigned char *str){
     42c:	dc 01       	movw	r26, r24
     42e:	fc 01       	movw	r30, r24
     430:	ac 01       	movw	r20, r24
     432:	4c 59       	subi	r20, 0x9C	; 156
     434:	5f 4f       	sbci	r21, 0xFF	; 255
    int i = 0;
    char c;

    while ((c = USART_Receive()) != '\n'){ //END_STRING == ~ or 0x7E
        if (c == -1){
            str[0] = 50;
     436:	82 e3       	ldi	r24, 0x32	; 50
        if((UCSR1A & (1<<RXC1))){
            /* Get and return received data from buffer */ 
            return UDR1;
        }
    } while (--timeout);
    return -1;
     438:	20 e2       	ldi	r18, 0x20	; 32
     43a:	3e e4       	ldi	r19, 0x4E	; 78
     43c:	03 c0       	rjmp	.+6      	; 0x444 <USART_Receive_String+0x18>
     43e:	21 50       	subi	r18, 0x01	; 1
     440:	31 09       	sbc	r19, r1
    do {
        if((UCSR1A & (1<<RXC1))){
            /* Get and return received data from buffer */ 
            return UDR1;
        }
    } while (--timeout);
     442:	91 f0       	breq	.+36     	; 0x468 <USART_Receive_String+0x3c>

unsigned char USART_Receive(void){
    uint16_t timeout = 20000;
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR1A & (1<<RXC1))){
     444:	90 91 9b 00 	lds	r25, 0x009B
     448:	97 ff       	sbrs	r25, 7
     44a:	f9 cf       	rjmp	.-14     	; 0x43e <USART_Receive_String+0x12>
            /* Get and return received data from buffer */ 
            return UDR1;
     44c:	90 91 9c 00 	lds	r25, 0x009C

void USART_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART_Receive()) != '\n'){ //END_STRING == ~ or 0x7E
     450:	9a 30       	cpi	r25, 0x0A	; 10
     452:	99 f0       	breq	.+38     	; 0x47a <USART_Receive_String+0x4e>
        if (c == -1){
     454:	9f 3f       	cpi	r25, 0xFF	; 255
     456:	49 f0       	breq	.+18     	; 0x46a <USART_Receive_String+0x3e>
            str[0] = 50;
            str[1] = 50;
            str[2] = 50;
        }
        str[i] = c;
     458:	91 93       	st	Z+, r25
        //char2lcd(c);
        //string2lcd(str);
        ++i;
        if (i >= MAX_STRING_SIZE){
     45a:	e4 17       	cp	r30, r20
     45c:	f5 07       	cpc	r31, r21
     45e:	61 f7       	brne	.-40     	; 0x438 <USART_Receive_String+0xc>
            str[MAX_STRING_SIZE - 1] = '\0';
     460:	ad 59       	subi	r26, 0x9D	; 157
     462:	bf 4f       	sbci	r27, 0xFF	; 255
     464:	1c 92       	st	X, r1

            return;
     466:	08 95       	ret
        if((UCSR1A & (1<<RXC1))){
            /* Get and return received data from buffer */ 
            return UDR1;
        }
    } while (--timeout);
    return -1;
     468:	9f ef       	ldi	r25, 0xFF	; 255
    int i = 0;
    char c;

    while ((c = USART_Receive()) != '\n'){ //END_STRING == ~ or 0x7E
        if (c == -1){
            str[0] = 50;
     46a:	8c 93       	st	X, r24
            str[1] = 50;
     46c:	11 96       	adiw	r26, 0x01	; 1
     46e:	8c 93       	st	X, r24
     470:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
     472:	12 96       	adiw	r26, 0x02	; 2
     474:	8c 93       	st	X, r24
     476:	12 97       	sbiw	r26, 0x02	; 2
     478:	ef cf       	rjmp	.-34     	; 0x458 <USART_Receive_String+0x2c>
     47a:	08 95       	ret

0000047c <strobe_lcd>:

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     47c:	e2 e6       	ldi	r30, 0x62	; 98
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	88 60       	ori	r24, 0x08	; 8
     484:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     486:	80 81       	ld	r24, Z
     488:	87 7f       	andi	r24, 0xF7	; 247
     48a:	80 83       	st	Z, r24
     48c:	08 95       	ret

0000048e <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     48e:	77 9b       	sbis	0x0e, 7	; 14
     490:	fe cf       	rjmp	.-4      	; 0x48e <clear_display>
    SPDR = 0x00;    //command, not data
     492:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     494:	77 9b       	sbis	0x0e, 7	; 14
     496:	fe cf       	rjmp	.-4      	; 0x494 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     49c:	77 9b       	sbis	0x0e, 7	; 14
     49e:	fe cf       	rjmp	.-4      	; 0x49c <clear_display+0xe>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     4a0:	80 91 62 00 	lds	r24, 0x0062
     4a4:	88 60       	ori	r24, 0x08	; 8
     4a6:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     4aa:	80 91 62 00 	lds	r24, 0x0062
     4ae:	87 7f       	andi	r24, 0xF7	; 247
     4b0:	80 93 62 00 	sts	0x0062, r24
     4b4:	8f e9       	ldi	r24, 0x9F	; 159
     4b6:	98 e2       	ldi	r25, 0x28	; 40
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <clear_display+0x2a>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <clear_display+0x30>
     4be:	00 00       	nop
     4c0:	08 95       	ret

000004c2 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     4c2:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4c4:	77 9b       	sbis	0x0e, 7	; 14
     4c6:	fe cf       	rjmp	.-4      	; 0x4c4 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     4c8:	80 ec       	ldi	r24, 0xC0	; 192
     4ca:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4cc:	77 9b       	sbis	0x0e, 7	; 14
     4ce:	fe cf       	rjmp	.-4      	; 0x4cc <home_line2+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     4d0:	80 91 62 00 	lds	r24, 0x0062
     4d4:	88 60       	ori	r24, 0x08	; 8
     4d6:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     4da:	80 91 62 00 	lds	r24, 0x0062
     4de:	87 7f       	andi	r24, 0xF7	; 247
     4e0:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e4:	85 ec       	ldi	r24, 0xC5	; 197
     4e6:	8a 95       	dec	r24
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <home_line2+0x24>
     4ea:	00 00       	nop
     4ec:	08 95       	ret

000004ee <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4f2:	77 9b       	sbis	0x0e, 7	; 14
     4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     4f6:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4f8:	77 9b       	sbis	0x0e, 7	; 14
     4fa:	fe cf       	rjmp	.-4      	; 0x4f8 <char2lcd+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     4fc:	80 91 62 00 	lds	r24, 0x0062
     500:	88 60       	ori	r24, 0x08	; 8
     502:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     506:	80 91 62 00 	lds	r24, 0x0062
     50a:	87 7f       	andi	r24, 0xF7	; 247
     50c:	80 93 62 00 	sts	0x0062, r24
     510:	85 ec       	ldi	r24, 0xC5	; 197
     512:	8a 95       	dec	r24
     514:	f1 f7       	brne	.-4      	; 0x512 <char2lcd+0x24>
     516:	00 00       	nop
     518:	08 95       	ret

0000051a <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	fc 01       	movw	r30, r24
     520:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     526:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     528:	77 9b       	sbis	0x0e, 7	; 14
     52a:	fe cf       	rjmp	.-4      	; 0x528 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     52c:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     52e:	77 9b       	sbis	0x0e, 7	; 14
     530:	fe cf       	rjmp	.-4      	; 0x52e <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     532:	8d 91       	ld	r24, X+
     534:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     536:	77 9b       	sbis	0x0e, 7	; 14
     538:	fe cf       	rjmp	.-4      	; 0x536 <string2lcd+0x1c>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     53a:	90 91 62 00 	lds	r25, 0x0062
     53e:	98 60       	ori	r25, 0x08	; 8
     540:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     544:	90 91 62 00 	lds	r25, 0x0062
     548:	97 7f       	andi	r25, 0xF7	; 247
     54a:	90 93 62 00 	sts	0x0062, r25
     54e:	85 ec       	ldi	r24, 0xC5	; 197
     550:	8a 95       	dec	r24
     552:	f1 f7       	brne	.-4      	; 0x550 <string2lcd+0x36>
     554:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     556:	4f 5f       	subi	r20, 0xFF	; 255
     558:	5f 4f       	sbci	r21, 0xFF	; 255
     55a:	ef 01       	movw	r28, r30
     55c:	09 90       	ld	r0, Y+
     55e:	00 20       	and	r0, r0
     560:	e9 f7       	brne	.-6      	; 0x55c <string2lcd+0x42>
     562:	9e 01       	movw	r18, r28
     564:	2e 1b       	sub	r18, r30
     566:	3f 0b       	sbc	r19, r31
     568:	22 50       	subi	r18, 0x02	; 2
     56a:	31 09       	sbc	r19, r1
     56c:	24 17       	cp	r18, r20
     56e:	35 07       	cpc	r19, r21
     570:	d8 f6       	brcc	.-74     	; 0x528 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     578:	e1 e6       	ldi	r30, 0x61	; 97
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 81       	ld	r24, Z
     57e:	88 60       	ori	r24, 0x08	; 8
     580:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     582:	88 b3       	in	r24, 0x18	; 24
     584:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     586:	87 b3       	in	r24, 0x17	; 23
     588:	87 60       	ori	r24, 0x07	; 7
     58a:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     58c:	80 e5       	ldi	r24, 0x50	; 80
     58e:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	8e b9       	out	0x0e, r24	; 14
     594:	08 95       	ret

00000596 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     596:	8f e5       	ldi	r24, 0x5F	; 95
     598:	9a ee       	ldi	r25, 0xEA	; 234
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <lcd_init+0x4>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <lcd_init+0xa>
     5a0:	00 00       	nop
     5a2:	23 e0       	ldi	r18, 0x03	; 3
     5a4:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     5a6:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     5a8:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5aa:	77 9b       	sbis	0x0e, 7	; 14
     5ac:	fe cf       	rjmp	.-4      	; 0x5aa <lcd_init+0x14>
        SPDR = 0x30;
     5ae:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5b0:	77 9b       	sbis	0x0e, 7	; 14
     5b2:	fe cf       	rjmp	.-4      	; 0x5b0 <lcd_init+0x1a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     5b4:	80 91 62 00 	lds	r24, 0x0062
     5b8:	88 60       	ori	r24, 0x08	; 8
     5ba:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     5be:	80 91 62 00 	lds	r24, 0x0062
     5c2:	87 7f       	andi	r24, 0xF7	; 247
     5c4:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c8:	85 ec       	ldi	r24, 0xC5	; 197
     5ca:	8a 95       	dec	r24
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <lcd_init+0x34>
     5ce:	00 00       	nop
     5d0:	21 50       	subi	r18, 0x01	; 1
     5d2:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     5d4:	49 f7       	brne	.-46     	; 0x5a8 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     5d6:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5d8:	77 9b       	sbis	0x0e, 7	; 14
     5da:	fe cf       	rjmp	.-4      	; 0x5d8 <lcd_init+0x42>
    SPDR = 0x38;
     5dc:	88 e3       	ldi	r24, 0x38	; 56
     5de:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5e0:	77 9b       	sbis	0x0e, 7	; 14
     5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <lcd_init+0x4a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     5e4:	80 91 62 00 	lds	r24, 0x0062
     5e8:	88 60       	ori	r24, 0x08	; 8
     5ea:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     5ee:	80 91 62 00 	lds	r24, 0x0062
     5f2:	87 7f       	andi	r24, 0xF7	; 247
     5f4:	80 93 62 00 	sts	0x0062, r24
     5f8:	95 ec       	ldi	r25, 0xC5	; 197
     5fa:	9a 95       	dec	r25
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <lcd_init+0x64>
     5fe:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     600:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     602:	77 9b       	sbis	0x0e, 7	; 14
     604:	fe cf       	rjmp	.-4      	; 0x602 <lcd_init+0x6c>
    SPDR = 0x08;
     606:	88 e0       	ldi	r24, 0x08	; 8
     608:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     60a:	77 9b       	sbis	0x0e, 7	; 14
     60c:	fe cf       	rjmp	.-4      	; 0x60a <lcd_init+0x74>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     60e:	80 91 62 00 	lds	r24, 0x0062
     612:	88 60       	ori	r24, 0x08	; 8
     614:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     618:	80 91 62 00 	lds	r24, 0x0062
     61c:	87 7f       	andi	r24, 0xF7	; 247
     61e:	80 93 62 00 	sts	0x0062, r24
     622:	85 ec       	ldi	r24, 0xC5	; 197
     624:	8a 95       	dec	r24
     626:	f1 f7       	brne	.-4      	; 0x624 <lcd_init+0x8e>
     628:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     62a:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     62c:	77 9b       	sbis	0x0e, 7	; 14
     62e:	fe cf       	rjmp	.-4      	; 0x62c <lcd_init+0x96>
    SPDR = 0x01;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     634:	77 9b       	sbis	0x0e, 7	; 14
     636:	fe cf       	rjmp	.-4      	; 0x634 <lcd_init+0x9e>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     638:	80 91 62 00 	lds	r24, 0x0062
     63c:	88 60       	ori	r24, 0x08	; 8
     63e:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     642:	80 91 62 00 	lds	r24, 0x0062
     646:	87 7f       	andi	r24, 0xF7	; 247
     648:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     64c:	8f ef       	ldi	r24, 0xFF	; 255
     64e:	98 e1       	ldi	r25, 0x18	; 24
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	f1 f7       	brne	.-4      	; 0x650 <lcd_init+0xba>
     654:	00 c0       	rjmp	.+0      	; 0x656 <lcd_init+0xc0>
     656:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
     658:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     65a:	77 9b       	sbis	0x0e, 7	; 14
     65c:	fe cf       	rjmp	.-4      	; 0x65a <lcd_init+0xc4>
    SPDR = 0x06;
     65e:	86 e0       	ldi	r24, 0x06	; 6
     660:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     662:	77 9b       	sbis	0x0e, 7	; 14
     664:	fe cf       	rjmp	.-4      	; 0x662 <lcd_init+0xcc>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     666:	80 91 62 00 	lds	r24, 0x0062
     66a:	88 60       	ori	r24, 0x08	; 8
     66c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     670:	80 91 62 00 	lds	r24, 0x0062
     674:	87 7f       	andi	r24, 0xF7	; 247
     676:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     67a:	95 ec       	ldi	r25, 0xC5	; 197
     67c:	9a 95       	dec	r25
     67e:	f1 f7       	brne	.-4      	; 0x67c <lcd_init+0xe6>
     680:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     682:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     684:	77 9b       	sbis	0x0e, 7	; 14
     686:	fe cf       	rjmp	.-4      	; 0x684 <lcd_init+0xee>
    SPDR = 0x0E;
     688:	8e e0       	ldi	r24, 0x0E	; 14
     68a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     68c:	77 9b       	sbis	0x0e, 7	; 14
     68e:	fe cf       	rjmp	.-4      	; 0x68c <lcd_init+0xf6>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     690:	80 91 62 00 	lds	r24, 0x0062
     694:	88 60       	ori	r24, 0x08	; 8
     696:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     69a:	80 91 62 00 	lds	r24, 0x0062
     69e:	87 7f       	andi	r24, 0xF7	; 247
     6a0:	80 93 62 00 	sts	0x0062, r24
     6a4:	85 ec       	ldi	r24, 0xC5	; 197
     6a6:	8a 95       	dec	r24
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <lcd_init+0x110>
     6aa:	00 00       	nop
     6ac:	08 95       	ret

000006ae <main>:
void init_esc();

uint8_t temp, read_byte;


int main(void){
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	60 97       	sbiw	r28, 0x10	; 16
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
    DDRB = 0xFF;
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
     6c6:	18 ba       	out	0x18, r1	; 24
    DDRD = 0x00;
     6c8:	11 ba       	out	0x11, r1	; 17
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     6ca:	80 91 61 00 	lds	r24, 0x0061
     6ce:	88 60       	ori	r24, 0x08	; 8
     6d0:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initalization for SPI
     6d4:	88 b3       	in	r24, 0x18	; 24
     6d6:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     6d8:	87 b3       	in	r24, 0x17	; 23
     6da:	87 60       	ori	r24, 0x07	; 7
     6dc:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     6de:	80 e5       	ldi	r24, 0x50	; 80
     6e0:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	8e b9       	out	0x0e, r24	; 14
    [2] == z motor power
    [3] == reserved for string terminator
    */

    spi_init();
    lcd_init();
     6e6:	0e 94 cb 02 	call	0x596	; 0x596 <lcd_init>

    //Wait for S1 to be pressed before doing anything, remove this eventually
    string2lcd((unsigned char *)"Press S1");
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
	while (((PIND) & (1 << 0)));
     6f2:	80 99       	sbic	0x10, 0	; 16
     6f4:	fe cf       	rjmp	.-4      	; 0x6f2 <main+0x44>
	clear_display();
     6f6:	0e 94 47 02 	call	0x48e	; 0x48e <clear_display>

    return 0;
}

void init_esc(){
    PORTB |= (1 << 4);
     6fa:	c4 9a       	sbi	0x18, 4	; 24
     6fc:	8f e6       	ldi	r24, 0x6F	; 111
     6fe:	97 e1       	ldi	r25, 0x17	; 23
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <main+0x52>
     704:	00 c0       	rjmp	.+0      	; 0x706 <main+0x58>
     706:	00 00       	nop
    _delay_us(STOP);
    PORTB &= ~(1 << 4);
     708:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70a:	9f ef       	ldi	r25, 0xFF	; 255
     70c:	23 ed       	ldi	r18, 0xD3	; 211
     70e:	80 e3       	ldi	r24, 0x30	; 48
     710:	91 50       	subi	r25, 0x01	; 1
     712:	20 40       	sbci	r18, 0x00	; 0
     714:	80 40       	sbci	r24, 0x00	; 0
     716:	e1 f7       	brne	.-8      	; 0x710 <main+0x62>
     718:	00 c0       	rjmp	.+0      	; 0x71a <main+0x6c>
     71a:	00 00       	nop
    string2lcd((unsigned char *)"Press S1");
	while (((PIND) & (1 << 0)));
	clear_display();

	init_esc();
    set_16bitPWM1();
     71c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <set_16bitPWM1>
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     720:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = (unsigned char)ubrr;
     724:	87 e6       	ldi	r24, 0x67	; 103
     726:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     72a:	88 e1       	ldi	r24, 0x18	; 24
     72c:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
     730:	8c e0       	ldi	r24, 0x0C	; 12
     732:	80 93 9d 00 	sts	0x009D, r24
     736:	9f ef       	ldi	r25, 0xFF	; 255
     738:	21 ee       	ldi	r18, 0xE1	; 225
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	91 50       	subi	r25, 0x01	; 1
     73e:	20 40       	sbci	r18, 0x00	; 0
     740:	80 40       	sbci	r24, 0x00	; 0
     742:	e1 f7       	brne	.-8      	; 0x73c <main+0x8e>
     744:	00 c0       	rjmp	.+0      	; 0x746 <main+0x98>
     746:	00 00       	nop
     748:	9f ef       	ldi	r25, 0xFF	; 255
     74a:	21 ee       	ldi	r18, 0xE1	; 225
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	91 50       	subi	r25, 0x01	; 1
     750:	20 40       	sbci	r18, 0x00	; 0
     752:	80 40       	sbci	r24, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <main+0xa0>
     756:	00 c0       	rjmp	.+0      	; 0x758 <main+0xaa>
     758:	00 00       	nop
	init_esc();
    set_16bitPWM1();
    
    USART_Init(MYUBRR);
    _delay_ms(100);
    float voltage = 0;
     75a:	41 2c       	mov	r4, r1
     75c:	51 2c       	mov	r5, r1
     75e:	32 01       	movw	r6, r4
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    SPDR = 0xC0;   // cursor go home on line 2
     760:	40 ec       	ldi	r20, 0xC0	; 192
     762:	d4 2e       	mov	r13, r20
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
    OCR1A = left_speed;
     764:	58 eb       	ldi	r21, 0xB8	; 184
     766:	25 2e       	mov	r2, r21
     768:	5b e0       	ldi	r21, 0x0B	; 11
     76a:	35 2e       	mov	r3, r21
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
            move(100,100,100);
		}
        else if (!((PIND) & (1 << 4))){
            val = MOTOR_MAX;
            OCR1C = val;
     76c:	68 ee       	ldi	r22, 0xE8	; 232
     76e:	a6 2e       	mov	r10, r22
     770:	60 e8       	ldi	r22, 0x80	; 128
     772:	b6 2e       	mov	r11, r22
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
    OCR1A = left_speed;
     774:	70 e1       	ldi	r23, 0x10	; 16
     776:	87 2e       	mov	r8, r23
     778:	7e e0       	ldi	r23, 0x0E	; 14
     77a:	97 2e       	mov	r9, r23
     77c:	e0 e6       	ldi	r30, 0x60	; 96
     77e:	ee 2e       	mov	r14, r30
     780:	e9 e0       	ldi	r30, 0x09	; 9
     782:	fe 2e       	mov	r15, r30
    unsigned int val = 0;
    unsigned char buffer[16];

    while(1){
        
        clear_display();
     784:	0e 94 47 02 	call	0x48e	; 0x48e <clear_display>
        if (!((PIND) & (1 << 7))){
     788:	87 99       	sbic	0x10, 7	; 16
     78a:	53 c0       	rjmp	.+166    	; 0x832 <main+0x184>
			string2lcd((unsigned char*)"1200us 1200us");
     78c:	89 e0       	ldi	r24, 0x09	; 9
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     794:	66 b5       	in	r22, 0x26	; 38
     796:	77 b5       	in	r23, 0x27	; 39
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 87 06 	call	0xd0e	; 0xd0e <__floatunsisf>
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	a9 01       	movw	r20, r18
     7a6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__mulsf3>
     7aa:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__fixunssfsi>
    OCR1A = left_speed;
     7ae:	fb bc       	out	0x2b, r15	; 43
     7b0:	ea bc       	out	0x2a, r14	; 42
    OCR1B = right_speed;
     7b2:	f9 bc       	out	0x29, r15	; 41
     7b4:	e8 bc       	out	0x28, r14	; 40
    OCR1C = z_speed;
     7b6:	70 93 79 00 	sts	0x0079, r23
     7ba:	60 93 78 00 	sts	0x0078, r22
        clear_display();
        if (!((PIND) & (1 << 7))){
			string2lcd((unsigned char*)"1200us 1200us");
            move(0,0,0);
            val = MOTOR_MAX;
            OCR1C = val;
     7be:	b0 92 79 00 	sts	0x0079, r11
     7c2:	a0 92 78 00 	sts	0x0078, r10
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     7c6:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7c8:	77 9b       	sbis	0x0e, 7	; 14
     7ca:	fe cf       	rjmp	.-4      	; 0x7c8 <main+0x11a>
    SPDR = 0xC0;   // cursor go home on line 2
     7cc:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7ce:	77 9b       	sbis	0x0e, 7	; 14
     7d0:	fe cf       	rjmp	.-4      	; 0x7ce <main+0x120>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     7d2:	80 91 62 00 	lds	r24, 0x0062
     7d6:	88 60       	ori	r24, 0x08	; 8
     7d8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     7dc:	80 91 62 00 	lds	r24, 0x0062
     7e0:	87 7f       	andi	r24, 0xF7	; 247
     7e2:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e6:	95 ec       	ldi	r25, 0xC5	; 197
     7e8:	9a 95       	dec	r25
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <main+0x13a>
     7ec:	00 00       	nop
            val = MOTOR_MAX;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     7ee:	8e 01       	movw	r16, r28
     7f0:	0f 5f       	subi	r16, 0xFF	; 255
     7f2:	1f 4f       	sbci	r17, 0xFF	; 255
     7f4:	23 e0       	ldi	r18, 0x03	; 3
     7f6:	42 e0       	ldi	r20, 0x02	; 2
     7f8:	62 ec       	ldi	r22, 0xC2	; 194
     7fa:	76 eb       	ldi	r23, 0xB6	; 182
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	91 e4       	ldi	r25, 0x41	; 65
     800:	0e 94 ab 07 	call	0xf56	; 0xf56 <dtostrf>
     804:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
            move(100,100,100);
		}
        else if (!((PIND) & (1 << 4))){
            val = MOTOR_MAX;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
     808:	32 ec       	ldi	r19, 0xC2	; 194
     80a:	43 2e       	mov	r4, r19
     80c:	36 eb       	ldi	r19, 0xB6	; 182
     80e:	53 2e       	mov	r5, r19
     810:	66 24       	eor	r6, r6
     812:	63 94       	inc	r6
     814:	31 e4       	ldi	r19, 0x41	; 65
     816:	73 2e       	mov	r7, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	99 ef       	ldi	r25, 0xF9	; 249
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	81 50       	subi	r24, 0x01	; 1
     820:	90 40       	sbci	r25, 0x00	; 0
     822:	20 40       	sbci	r18, 0x00	; 0
     824:	e1 f7       	brne	.-8      	; 0x81e <main+0x170>
     826:	00 c0       	rjmp	.+0      	; 0x828 <main+0x17a>
     828:	00 00       	nop
    unsigned int val = 0;
    unsigned char buffer[16];

    while(1){
        
        clear_display();
     82a:	0e 94 47 02 	call	0x48e	; 0x48e <clear_display>
        if (!((PIND) & (1 << 7))){
     82e:	87 9b       	sbis	0x10, 7	; 16
     830:	ad cf       	rjmp	.-166    	; 0x78c <main+0xde>
            OCR1C = val;
            home_line2();
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
		}
		else if (!((PIND) & (1 << 6))){
     832:	86 9b       	sbis	0x10, 6	; 16
     834:	3e c0       	rjmp	.+124    	; 0x8b2 <main+0x204>
			string2lcd((unsigned char*)"1200us 1800us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
            move(-100,1000,0);
		}
		else if (!((PIND) & (1 << 5))){
     836:	85 9b       	sbis	0x10, 5	; 16
     838:	75 c0       	rjmp	.+234    	; 0x924 <main+0x276>
			string2lcd((unsigned char*)"1800us 1800us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
            move(100,100,100);
		}
        else if (!((PIND) & (1 << 4))){
     83a:	84 9b       	sbis	0x10, 4	; 16
     83c:	a1 c0       	rjmp	.+322    	; 0x980 <main+0x2d2>
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 2))){
     83e:	82 9b       	sbis	0x10, 2	; 16
     840:	ae c0       	rjmp	.+348    	; 0x99e <main+0x2f0>
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 1))){
     842:	81 9b       	sbis	0x10, 1	; 16
     844:	1d c1       	rjmp	.+570    	; 0xa80 <main+0x3d2>
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 0))){
     846:	80 99       	sbic	0x10, 0	; 16
     848:	de c0       	rjmp	.+444    	; 0xa06 <main+0x358>
            val = MOTOR_MAX/4;
            OCR1C = val;
     84a:	8a e3       	ldi	r24, 0x3A	; 58
     84c:	90 e2       	ldi	r25, 0x20	; 32
     84e:	90 93 79 00 	sts	0x0079, r25
     852:	80 93 78 00 	sts	0x0078, r24
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
     856:	83 e3       	ldi	r24, 0x33	; 51
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     85e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     860:	77 9b       	sbis	0x0e, 7	; 14
     862:	fe cf       	rjmp	.-4      	; 0x860 <main+0x1b2>
    SPDR = 0xC0;   // cursor go home on line 2
     864:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     866:	77 9b       	sbis	0x0e, 7	; 14
     868:	fe cf       	rjmp	.-4      	; 0x866 <main+0x1b8>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     86a:	80 91 62 00 	lds	r24, 0x0062
     86e:	88 60       	ori	r24, 0x08	; 8
     870:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     874:	80 91 62 00 	lds	r24, 0x0062
     878:	87 7f       	andi	r24, 0xF7	; 247
     87a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     87e:	95 ec       	ldi	r25, 0xC5	; 197
     880:	9a 95       	dec	r25
     882:	f1 f7       	brne	.-4      	; 0x880 <main+0x1d2>
     884:	00 00       	nop
            val = MOTOR_MAX/4;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     886:	8e 01       	movw	r16, r28
     888:	0f 5f       	subi	r16, 0xFF	; 255
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
     88c:	23 e0       	ldi	r18, 0x03	; 3
     88e:	42 e0       	ldi	r20, 0x02	; 2
     890:	62 ec       	ldi	r22, 0xC2	; 194
     892:	76 eb       	ldi	r23, 0xB6	; 182
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	90 e4       	ldi	r25, 0x40	; 64
     898:	0e 94 ab 07 	call	0xf56	; 0xf56 <dtostrf>
     89c:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 0))){
            val = MOTOR_MAX/4;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
     8a0:	82 ec       	ldi	r24, 0xC2	; 194
     8a2:	48 2e       	mov	r4, r24
     8a4:	86 eb       	ldi	r24, 0xB6	; 182
     8a6:	58 2e       	mov	r5, r24
     8a8:	66 24       	eor	r6, r6
     8aa:	63 94       	inc	r6
     8ac:	80 e4       	ldi	r24, 0x40	; 64
     8ae:	78 2e       	mov	r7, r24
     8b0:	b3 cf       	rjmp	.-154    	; 0x818 <main+0x16a>
            home_line2();
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
		}
		else if (!((PIND) & (1 << 6))){
			string2lcd((unsigned char*)"1200us 1800us");
     8b2:	87 e1       	ldi	r24, 0x17	; 23
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     8ba:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8bc:	77 9b       	sbis	0x0e, 7	; 14
     8be:	fe cf       	rjmp	.-4      	; 0x8bc <main+0x20e>
    SPDR = 0xC0;   // cursor go home on line 2
     8c0:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8c2:	77 9b       	sbis	0x0e, 7	; 14
     8c4:	fe cf       	rjmp	.-4      	; 0x8c2 <main+0x214>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     8c6:	80 91 62 00 	lds	r24, 0x0062
     8ca:	88 60       	ori	r24, 0x08	; 8
     8cc:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     8d0:	80 91 62 00 	lds	r24, 0x0062
     8d4:	87 7f       	andi	r24, 0xF7	; 247
     8d6:	80 93 62 00 	sts	0x0062, r24
     8da:	25 ec       	ldi	r18, 0xC5	; 197
     8dc:	2a 95       	dec	r18
     8de:	f1 f7       	brne	.-4      	; 0x8dc <main+0x22e>
     8e0:	00 00       	nop
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
		}
		else if (!((PIND) & (1 << 6))){
			string2lcd((unsigned char*)"1200us 1800us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     8e2:	8e 01       	movw	r16, r28
     8e4:	0f 5f       	subi	r16, 0xFF	; 255
     8e6:	1f 4f       	sbci	r17, 0xFF	; 255
     8e8:	23 e0       	ldi	r18, 0x03	; 3
     8ea:	42 e0       	ldi	r20, 0x02	; 2
     8ec:	c3 01       	movw	r24, r6
     8ee:	b2 01       	movw	r22, r4
     8f0:	0e 94 ab 07 	call	0xf56	; 0xf56 <dtostrf>
     8f4:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     8f8:	66 b5       	in	r22, 0x26	; 38
     8fa:	77 b5       	in	r23, 0x27	; 39
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 87 06 	call	0xd0e	; 0xd0e <__floatunsisf>
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	a9 01       	movw	r20, r18
     90a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__mulsf3>
     90e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__fixunssfsi>
    OCR1A = left_speed;
     912:	fb bc       	out	0x2b, r15	; 43
     914:	ea bc       	out	0x2a, r14	; 42
    OCR1B = right_speed;
     916:	99 bc       	out	0x29, r9	; 41
     918:	88 bc       	out	0x28, r8	; 40
    OCR1C = z_speed;
     91a:	70 93 79 00 	sts	0x0079, r23
     91e:	60 93 78 00 	sts	0x0078, r22
     922:	7a cf       	rjmp	.-268    	; 0x818 <main+0x16a>
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
            move(-100,1000,0);
		}
		else if (!((PIND) & (1 << 5))){
			string2lcd((unsigned char*)"1800us 1800us");
     924:	85 e2       	ldi	r24, 0x25	; 37
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     92c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     92e:	77 9b       	sbis	0x0e, 7	; 14
     930:	fe cf       	rjmp	.-4      	; 0x92e <main+0x280>
    SPDR = 0xC0;   // cursor go home on line 2
     932:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     934:	77 9b       	sbis	0x0e, 7	; 14
     936:	fe cf       	rjmp	.-4      	; 0x934 <main+0x286>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     938:	80 91 62 00 	lds	r24, 0x0062
     93c:	88 60       	ori	r24, 0x08	; 8
     93e:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     942:	80 91 62 00 	lds	r24, 0x0062
     946:	87 7f       	andi	r24, 0xF7	; 247
     948:	80 93 62 00 	sts	0x0062, r24
     94c:	85 ec       	ldi	r24, 0xC5	; 197
     94e:	8a 95       	dec	r24
     950:	f1 f7       	brne	.-4      	; 0x94e <main+0x2a0>
     952:	00 00       	nop
            move(-100,1000,0);
		}
		else if (!((PIND) & (1 << 5))){
			string2lcd((unsigned char*)"1800us 1800us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     954:	8e 01       	movw	r16, r28
     956:	0f 5f       	subi	r16, 0xFF	; 255
     958:	1f 4f       	sbci	r17, 0xFF	; 255
     95a:	23 e0       	ldi	r18, 0x03	; 3
     95c:	42 e0       	ldi	r20, 0x02	; 2
     95e:	c3 01       	movw	r24, r6
     960:	b2 01       	movw	r22, r4
     962:	0e 94 ab 07 	call	0xf56	; 0xf56 <dtostrf>
     966:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     96a:	86 b5       	in	r24, 0x26	; 38
     96c:	97 b5       	in	r25, 0x27	; 39
    OCR1A = left_speed;
     96e:	9b bc       	out	0x2b, r9	; 43
     970:	8a bc       	out	0x2a, r8	; 42
    OCR1B = right_speed;
     972:	99 bc       	out	0x29, r9	; 41
     974:	88 bc       	out	0x28, r8	; 40
    OCR1C = z_speed;
     976:	90 93 79 00 	sts	0x0079, r25
     97a:	80 93 78 00 	sts	0x0078, r24
     97e:	4c cf       	rjmp	.-360    	; 0x818 <main+0x16a>
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
            move(100,100,100);
		}
        else if (!((PIND) & (1 << 4))){
            val = MOTOR_MAX;
            OCR1C = val;
     980:	b0 92 79 00 	sts	0x0079, r11
     984:	a0 92 78 00 	sts	0x0078, r10
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
     988:	83 e3       	ldi	r24, 0x33	; 51
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     990:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     992:	77 9b       	sbis	0x0e, 7	; 14
     994:	fe cf       	rjmp	.-4      	; 0x992 <main+0x2e4>
    SPDR = 0xC0;   // cursor go home on line 2
     996:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     998:	77 9b       	sbis	0x0e, 7	; 14
     99a:	fe cf       	rjmp	.-4      	; 0x998 <main+0x2ea>
     99c:	1a cf       	rjmp	.-460    	; 0x7d2 <main+0x124>
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 2))){
            val = 3*MOTOR_MAX/4;
            OCR1C = val;
     99e:	8e ea       	ldi	r24, 0xAE	; 174
     9a0:	90 e6       	ldi	r25, 0x60	; 96
     9a2:	90 93 79 00 	sts	0x0079, r25
     9a6:	80 93 78 00 	sts	0x0078, r24
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
     9aa:	83 e3       	ldi	r24, 0x33	; 51
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     9b2:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     9b4:	77 9b       	sbis	0x0e, 7	; 14
     9b6:	fe cf       	rjmp	.-4      	; 0x9b4 <main+0x306>
    SPDR = 0xC0;   // cursor go home on line 2
     9b8:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     9ba:	77 9b       	sbis	0x0e, 7	; 14
     9bc:	fe cf       	rjmp	.-4      	; 0x9ba <main+0x30c>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     9be:	80 91 62 00 	lds	r24, 0x0062
     9c2:	88 60       	ori	r24, 0x08	; 8
     9c4:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     9c8:	80 91 62 00 	lds	r24, 0x0062
     9cc:	87 7f       	andi	r24, 0xF7	; 247
     9ce:	80 93 62 00 	sts	0x0062, r24
     9d2:	95 ec       	ldi	r25, 0xC5	; 197
     9d4:	9a 95       	dec	r25
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <main+0x326>
     9d8:	00 00       	nop
            val = 3*MOTOR_MAX/4;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     9da:	8e 01       	movw	r16, r28
     9dc:	0f 5f       	subi	r16, 0xFF	; 255
     9de:	1f 4f       	sbci	r17, 0xFF	; 255
     9e0:	23 e0       	ldi	r18, 0x03	; 3
     9e2:	42 e0       	ldi	r20, 0x02	; 2
     9e4:	63 e2       	ldi	r22, 0x23	; 35
     9e6:	72 e9       	ldi	r23, 0x92	; 146
     9e8:	82 ec       	ldi	r24, 0xC2	; 194
     9ea:	90 e4       	ldi	r25, 0x40	; 64
     9ec:	0e 94 ab 07 	call	0xf56	; 0xf56 <dtostrf>
     9f0:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 2))){
            val = 3*MOTOR_MAX/4;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
     9f4:	23 e2       	ldi	r18, 0x23	; 35
     9f6:	42 2e       	mov	r4, r18
     9f8:	22 e9       	ldi	r18, 0x92	; 146
     9fa:	52 2e       	mov	r5, r18
     9fc:	22 ec       	ldi	r18, 0xC2	; 194
     9fe:	62 2e       	mov	r6, r18
     a00:	20 e4       	ldi	r18, 0x40	; 64
     a02:	72 2e       	mov	r7, r18
     a04:	09 cf       	rjmp	.-494    	; 0x818 <main+0x16a>
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
		else {
            string2lcd((unsigned char*)"1500us 1500us");
     a06:	83 e3       	ldi	r24, 0x33	; 51
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     a0e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     a10:	77 9b       	sbis	0x0e, 7	; 14
     a12:	fe cf       	rjmp	.-4      	; 0xa10 <main+0x362>
    SPDR = 0xC0;   // cursor go home on line 2
     a14:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     a16:	77 9b       	sbis	0x0e, 7	; 14
     a18:	fe cf       	rjmp	.-4      	; 0xa16 <main+0x368>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     a1a:	80 91 62 00 	lds	r24, 0x0062
     a1e:	88 60       	ori	r24, 0x08	; 8
     a20:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     a24:	80 91 62 00 	lds	r24, 0x0062
     a28:	87 7f       	andi	r24, 0xF7	; 247
     a2a:	80 93 62 00 	sts	0x0062, r24
     a2e:	25 ec       	ldi	r18, 0xC5	; 197
     a30:	2a 95       	dec	r18
     a32:	f1 f7       	brne	.-4      	; 0xa30 <main+0x382>
     a34:	00 00       	nop
		else {
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            val = 0;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     a36:	8e 01       	movw	r16, r28
     a38:	0f 5f       	subi	r16, 0xFF	; 255
     a3a:	1f 4f       	sbci	r17, 0xFF	; 255
     a3c:	23 e0       	ldi	r18, 0x03	; 3
     a3e:	42 e0       	ldi	r20, 0x02	; 2
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	cb 01       	movw	r24, r22
     a46:	0e 94 ab 07 	call	0xf56	; 0xf56 <dtostrf>
     a4a:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     a4e:	66 b5       	in	r22, 0x26	; 38
     a50:	77 b5       	in	r23, 0x27	; 39
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 87 06 	call	0xd0e	; 0xd0e <__floatunsisf>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	a9 01       	movw	r20, r18
     a60:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__mulsf3>
     a64:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__fixunssfsi>
    OCR1A = left_speed;
     a68:	3b bc       	out	0x2b, r3	; 43
     a6a:	2a bc       	out	0x2a, r2	; 42
    OCR1B = right_speed;
     a6c:	39 bc       	out	0x29, r3	; 41
     a6e:	28 bc       	out	0x28, r2	; 40
    OCR1C = z_speed;
     a70:	70 93 79 00 	sts	0x0079, r23
     a74:	60 93 78 00 	sts	0x0078, r22
        }
		else {
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            val = 0;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
     a78:	41 2c       	mov	r4, r1
     a7a:	51 2c       	mov	r5, r1
     a7c:	32 01       	movw	r6, r4
     a7e:	cc ce       	rjmp	.-616    	; 0x818 <main+0x16a>
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 1))){
            val = MOTOR_MAX/2;
            OCR1C = val;
     a80:	84 e7       	ldi	r24, 0x74	; 116
     a82:	90 e4       	ldi	r25, 0x40	; 64
     a84:	90 93 79 00 	sts	0x0079, r25
     a88:	80 93 78 00 	sts	0x0078, r24
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
     a8c:	83 e3       	ldi	r24, 0x33	; 51
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     a94:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     a96:	77 9b       	sbis	0x0e, 7	; 14
     a98:	fe cf       	rjmp	.-4      	; 0xa96 <main+0x3e8>
    SPDR = 0xC0;   // cursor go home on line 2
     a9a:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     a9c:	77 9b       	sbis	0x0e, 7	; 14
     a9e:	fe cf       	rjmp	.-4      	; 0xa9c <main+0x3ee>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     aa0:	80 91 62 00 	lds	r24, 0x0062
     aa4:	88 60       	ori	r24, 0x08	; 8
     aa6:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     aaa:	80 91 62 00 	lds	r24, 0x0062
     aae:	87 7f       	andi	r24, 0xF7	; 247
     ab0:	80 93 62 00 	sts	0x0062, r24
     ab4:	95 ec       	ldi	r25, 0xC5	; 197
     ab6:	9a 95       	dec	r25
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <main+0x408>
     aba:	00 00       	nop
            val = MOTOR_MAX/2;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     abc:	8e 01       	movw	r16, r28
     abe:	0f 5f       	subi	r16, 0xFF	; 255
     ac0:	1f 4f       	sbci	r17, 0xFF	; 255
     ac2:	23 e0       	ldi	r18, 0x03	; 3
     ac4:	42 e0       	ldi	r20, 0x02	; 2
     ac6:	62 ec       	ldi	r22, 0xC2	; 194
     ac8:	76 eb       	ldi	r23, 0xB6	; 182
     aca:	81 e8       	ldi	r24, 0x81	; 129
     acc:	90 e4       	ldi	r25, 0x40	; 64
     ace:	0e 94 ab 07 	call	0xf56	; 0xf56 <dtostrf>
     ad2:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 1))){
            val = MOTOR_MAX/2;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
     ad6:	92 ec       	ldi	r25, 0xC2	; 194
     ad8:	49 2e       	mov	r4, r25
     ada:	96 eb       	ldi	r25, 0xB6	; 182
     adc:	59 2e       	mov	r5, r25
     ade:	91 e8       	ldi	r25, 0x81	; 129
     ae0:	69 2e       	mov	r6, r25
     ae2:	90 e4       	ldi	r25, 0x40	; 64
     ae4:	79 2e       	mov	r7, r25
     ae6:	98 ce       	rjmp	.-720    	; 0x818 <main+0x16a>

00000ae8 <__subsf3>:
     ae8:	50 58       	subi	r21, 0x80	; 128

00000aea <__addsf3>:
     aea:	bb 27       	eor	r27, r27
     aec:	aa 27       	eor	r26, r26
     aee:	0e 94 8c 05 	call	0xb18	; 0xb18 <__addsf3x>
     af2:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_round>
     af6:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_pscA>
     afa:	38 f0       	brcs	.+14     	; 0xb0a <__addsf3+0x20>
     afc:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_pscB>
     b00:	20 f0       	brcs	.+8      	; 0xb0a <__addsf3+0x20>
     b02:	39 f4       	brne	.+14     	; 0xb12 <__addsf3+0x28>
     b04:	9f 3f       	cpi	r25, 0xFF	; 255
     b06:	19 f4       	brne	.+6      	; 0xb0e <__addsf3+0x24>
     b08:	26 f4       	brtc	.+8      	; 0xb12 <__addsf3+0x28>
     b0a:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_nan>
     b0e:	0e f4       	brtc	.+2      	; 0xb12 <__addsf3+0x28>
     b10:	e0 95       	com	r30
     b12:	e7 fb       	bst	r30, 7
     b14:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>

00000b18 <__addsf3x>:
     b18:	e9 2f       	mov	r30, r25
     b1a:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_split3>
     b1e:	58 f3       	brcs	.-42     	; 0xaf6 <__addsf3+0xc>
     b20:	ba 17       	cp	r27, r26
     b22:	62 07       	cpc	r22, r18
     b24:	73 07       	cpc	r23, r19
     b26:	84 07       	cpc	r24, r20
     b28:	95 07       	cpc	r25, r21
     b2a:	20 f0       	brcs	.+8      	; 0xb34 <__addsf3x+0x1c>
     b2c:	79 f4       	brne	.+30     	; 0xb4c <__addsf3x+0x34>
     b2e:	a6 f5       	brtc	.+104    	; 0xb98 <__addsf3x+0x80>
     b30:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_zero>
     b34:	0e f4       	brtc	.+2      	; 0xb38 <__addsf3x+0x20>
     b36:	e0 95       	com	r30
     b38:	0b 2e       	mov	r0, r27
     b3a:	ba 2f       	mov	r27, r26
     b3c:	a0 2d       	mov	r26, r0
     b3e:	0b 01       	movw	r0, r22
     b40:	b9 01       	movw	r22, r18
     b42:	90 01       	movw	r18, r0
     b44:	0c 01       	movw	r0, r24
     b46:	ca 01       	movw	r24, r20
     b48:	a0 01       	movw	r20, r0
     b4a:	11 24       	eor	r1, r1
     b4c:	ff 27       	eor	r31, r31
     b4e:	59 1b       	sub	r21, r25
     b50:	99 f0       	breq	.+38     	; 0xb78 <__addsf3x+0x60>
     b52:	59 3f       	cpi	r21, 0xF9	; 249
     b54:	50 f4       	brcc	.+20     	; 0xb6a <__addsf3x+0x52>
     b56:	50 3e       	cpi	r21, 0xE0	; 224
     b58:	68 f1       	brcs	.+90     	; 0xbb4 <__addsf3x+0x9c>
     b5a:	1a 16       	cp	r1, r26
     b5c:	f0 40       	sbci	r31, 0x00	; 0
     b5e:	a2 2f       	mov	r26, r18
     b60:	23 2f       	mov	r18, r19
     b62:	34 2f       	mov	r19, r20
     b64:	44 27       	eor	r20, r20
     b66:	58 5f       	subi	r21, 0xF8	; 248
     b68:	f3 cf       	rjmp	.-26     	; 0xb50 <__addsf3x+0x38>
     b6a:	46 95       	lsr	r20
     b6c:	37 95       	ror	r19
     b6e:	27 95       	ror	r18
     b70:	a7 95       	ror	r26
     b72:	f0 40       	sbci	r31, 0x00	; 0
     b74:	53 95       	inc	r21
     b76:	c9 f7       	brne	.-14     	; 0xb6a <__addsf3x+0x52>
     b78:	7e f4       	brtc	.+30     	; 0xb98 <__addsf3x+0x80>
     b7a:	1f 16       	cp	r1, r31
     b7c:	ba 0b       	sbc	r27, r26
     b7e:	62 0b       	sbc	r22, r18
     b80:	73 0b       	sbc	r23, r19
     b82:	84 0b       	sbc	r24, r20
     b84:	ba f0       	brmi	.+46     	; 0xbb4 <__addsf3x+0x9c>
     b86:	91 50       	subi	r25, 0x01	; 1
     b88:	a1 f0       	breq	.+40     	; 0xbb2 <__addsf3x+0x9a>
     b8a:	ff 0f       	add	r31, r31
     b8c:	bb 1f       	adc	r27, r27
     b8e:	66 1f       	adc	r22, r22
     b90:	77 1f       	adc	r23, r23
     b92:	88 1f       	adc	r24, r24
     b94:	c2 f7       	brpl	.-16     	; 0xb86 <__addsf3x+0x6e>
     b96:	0e c0       	rjmp	.+28     	; 0xbb4 <__addsf3x+0x9c>
     b98:	ba 0f       	add	r27, r26
     b9a:	62 1f       	adc	r22, r18
     b9c:	73 1f       	adc	r23, r19
     b9e:	84 1f       	adc	r24, r20
     ba0:	48 f4       	brcc	.+18     	; 0xbb4 <__addsf3x+0x9c>
     ba2:	87 95       	ror	r24
     ba4:	77 95       	ror	r23
     ba6:	67 95       	ror	r22
     ba8:	b7 95       	ror	r27
     baa:	f7 95       	ror	r31
     bac:	9e 3f       	cpi	r25, 0xFE	; 254
     bae:	08 f0       	brcs	.+2      	; 0xbb2 <__addsf3x+0x9a>
     bb0:	b0 cf       	rjmp	.-160    	; 0xb12 <__addsf3+0x28>
     bb2:	93 95       	inc	r25
     bb4:	88 0f       	add	r24, r24
     bb6:	08 f0       	brcs	.+2      	; 0xbba <__addsf3x+0xa2>
     bb8:	99 27       	eor	r25, r25
     bba:	ee 0f       	add	r30, r30
     bbc:	97 95       	ror	r25
     bbe:	87 95       	ror	r24
     bc0:	08 95       	ret

00000bc2 <__cmpsf2>:
     bc2:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fp_cmp>
     bc6:	08 f4       	brcc	.+2      	; 0xbca <__cmpsf2+0x8>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	08 95       	ret

00000bcc <__divsf3>:
     bcc:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__divsf3x>
     bd0:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_round>
     bd4:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_pscB>
     bd8:	58 f0       	brcs	.+22     	; 0xbf0 <__divsf3+0x24>
     bda:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_pscA>
     bde:	40 f0       	brcs	.+16     	; 0xbf0 <__divsf3+0x24>
     be0:	29 f4       	brne	.+10     	; 0xbec <__divsf3+0x20>
     be2:	5f 3f       	cpi	r21, 0xFF	; 255
     be4:	29 f0       	breq	.+10     	; 0xbf0 <__divsf3+0x24>
     be6:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
     bea:	51 11       	cpse	r21, r1
     bec:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_szero>
     bf0:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_nan>

00000bf4 <__divsf3x>:
     bf4:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_split3>
     bf8:	68 f3       	brcs	.-38     	; 0xbd4 <__divsf3+0x8>

00000bfa <__divsf3_pse>:
     bfa:	99 23       	and	r25, r25
     bfc:	b1 f3       	breq	.-20     	; 0xbea <__divsf3+0x1e>
     bfe:	55 23       	and	r21, r21
     c00:	91 f3       	breq	.-28     	; 0xbe6 <__divsf3+0x1a>
     c02:	95 1b       	sub	r25, r21
     c04:	55 0b       	sbc	r21, r21
     c06:	bb 27       	eor	r27, r27
     c08:	aa 27       	eor	r26, r26
     c0a:	62 17       	cp	r22, r18
     c0c:	73 07       	cpc	r23, r19
     c0e:	84 07       	cpc	r24, r20
     c10:	38 f0       	brcs	.+14     	; 0xc20 <__divsf3_pse+0x26>
     c12:	9f 5f       	subi	r25, 0xFF	; 255
     c14:	5f 4f       	sbci	r21, 0xFF	; 255
     c16:	22 0f       	add	r18, r18
     c18:	33 1f       	adc	r19, r19
     c1a:	44 1f       	adc	r20, r20
     c1c:	aa 1f       	adc	r26, r26
     c1e:	a9 f3       	breq	.-22     	; 0xc0a <__divsf3_pse+0x10>
     c20:	35 d0       	rcall	.+106    	; 0xc8c <__divsf3_pse+0x92>
     c22:	0e 2e       	mov	r0, r30
     c24:	3a f0       	brmi	.+14     	; 0xc34 <__divsf3_pse+0x3a>
     c26:	e0 e8       	ldi	r30, 0x80	; 128
     c28:	32 d0       	rcall	.+100    	; 0xc8e <__divsf3_pse+0x94>
     c2a:	91 50       	subi	r25, 0x01	; 1
     c2c:	50 40       	sbci	r21, 0x00	; 0
     c2e:	e6 95       	lsr	r30
     c30:	00 1c       	adc	r0, r0
     c32:	ca f7       	brpl	.-14     	; 0xc26 <__divsf3_pse+0x2c>
     c34:	2b d0       	rcall	.+86     	; 0xc8c <__divsf3_pse+0x92>
     c36:	fe 2f       	mov	r31, r30
     c38:	29 d0       	rcall	.+82     	; 0xc8c <__divsf3_pse+0x92>
     c3a:	66 0f       	add	r22, r22
     c3c:	77 1f       	adc	r23, r23
     c3e:	88 1f       	adc	r24, r24
     c40:	bb 1f       	adc	r27, r27
     c42:	26 17       	cp	r18, r22
     c44:	37 07       	cpc	r19, r23
     c46:	48 07       	cpc	r20, r24
     c48:	ab 07       	cpc	r26, r27
     c4a:	b0 e8       	ldi	r27, 0x80	; 128
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__divsf3_pse+0x56>
     c4e:	bb 0b       	sbc	r27, r27
     c50:	80 2d       	mov	r24, r0
     c52:	bf 01       	movw	r22, r30
     c54:	ff 27       	eor	r31, r31
     c56:	93 58       	subi	r25, 0x83	; 131
     c58:	5f 4f       	sbci	r21, 0xFF	; 255
     c5a:	3a f0       	brmi	.+14     	; 0xc6a <__divsf3_pse+0x70>
     c5c:	9e 3f       	cpi	r25, 0xFE	; 254
     c5e:	51 05       	cpc	r21, r1
     c60:	78 f0       	brcs	.+30     	; 0xc80 <__divsf3_pse+0x86>
     c62:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
     c66:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_szero>
     c6a:	5f 3f       	cpi	r21, 0xFF	; 255
     c6c:	e4 f3       	brlt	.-8      	; 0xc66 <__divsf3_pse+0x6c>
     c6e:	98 3e       	cpi	r25, 0xE8	; 232
     c70:	d4 f3       	brlt	.-12     	; 0xc66 <__divsf3_pse+0x6c>
     c72:	86 95       	lsr	r24
     c74:	77 95       	ror	r23
     c76:	67 95       	ror	r22
     c78:	b7 95       	ror	r27
     c7a:	f7 95       	ror	r31
     c7c:	9f 5f       	subi	r25, 0xFF	; 255
     c7e:	c9 f7       	brne	.-14     	; 0xc72 <__divsf3_pse+0x78>
     c80:	88 0f       	add	r24, r24
     c82:	91 1d       	adc	r25, r1
     c84:	96 95       	lsr	r25
     c86:	87 95       	ror	r24
     c88:	97 f9       	bld	r25, 7
     c8a:	08 95       	ret
     c8c:	e1 e0       	ldi	r30, 0x01	; 1
     c8e:	66 0f       	add	r22, r22
     c90:	77 1f       	adc	r23, r23
     c92:	88 1f       	adc	r24, r24
     c94:	bb 1f       	adc	r27, r27
     c96:	62 17       	cp	r22, r18
     c98:	73 07       	cpc	r23, r19
     c9a:	84 07       	cpc	r24, r20
     c9c:	ba 07       	cpc	r27, r26
     c9e:	20 f0       	brcs	.+8      	; 0xca8 <__divsf3_pse+0xae>
     ca0:	62 1b       	sub	r22, r18
     ca2:	73 0b       	sbc	r23, r19
     ca4:	84 0b       	sbc	r24, r20
     ca6:	ba 0b       	sbc	r27, r26
     ca8:	ee 1f       	adc	r30, r30
     caa:	88 f7       	brcc	.-30     	; 0xc8e <__divsf3_pse+0x94>
     cac:	e0 95       	com	r30
     cae:	08 95       	ret

00000cb0 <__fixunssfsi>:
     cb0:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_splitA>
     cb4:	88 f0       	brcs	.+34     	; 0xcd8 <__fixunssfsi+0x28>
     cb6:	9f 57       	subi	r25, 0x7F	; 127
     cb8:	98 f0       	brcs	.+38     	; 0xce0 <__fixunssfsi+0x30>
     cba:	b9 2f       	mov	r27, r25
     cbc:	99 27       	eor	r25, r25
     cbe:	b7 51       	subi	r27, 0x17	; 23
     cc0:	b0 f0       	brcs	.+44     	; 0xcee <__fixunssfsi+0x3e>
     cc2:	e1 f0       	breq	.+56     	; 0xcfc <__fixunssfsi+0x4c>
     cc4:	66 0f       	add	r22, r22
     cc6:	77 1f       	adc	r23, r23
     cc8:	88 1f       	adc	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	1a f0       	brmi	.+6      	; 0xcd4 <__fixunssfsi+0x24>
     cce:	ba 95       	dec	r27
     cd0:	c9 f7       	brne	.-14     	; 0xcc4 <__fixunssfsi+0x14>
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <__fixunssfsi+0x4c>
     cd4:	b1 30       	cpi	r27, 0x01	; 1
     cd6:	91 f0       	breq	.+36     	; 0xcfc <__fixunssfsi+0x4c>
     cd8:	0e 94 32 07 	call	0xe64	; 0xe64 <__fp_zero>
     cdc:	b1 e0       	ldi	r27, 0x01	; 1
     cde:	08 95       	ret
     ce0:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_zero>
     ce4:	67 2f       	mov	r22, r23
     ce6:	78 2f       	mov	r23, r24
     ce8:	88 27       	eor	r24, r24
     cea:	b8 5f       	subi	r27, 0xF8	; 248
     cec:	39 f0       	breq	.+14     	; 0xcfc <__fixunssfsi+0x4c>
     cee:	b9 3f       	cpi	r27, 0xF9	; 249
     cf0:	cc f3       	brlt	.-14     	; 0xce4 <__fixunssfsi+0x34>
     cf2:	86 95       	lsr	r24
     cf4:	77 95       	ror	r23
     cf6:	67 95       	ror	r22
     cf8:	b3 95       	inc	r27
     cfa:	d9 f7       	brne	.-10     	; 0xcf2 <__fixunssfsi+0x42>
     cfc:	3e f4       	brtc	.+14     	; 0xd0c <__fixunssfsi+0x5c>
     cfe:	90 95       	com	r25
     d00:	80 95       	com	r24
     d02:	70 95       	com	r23
     d04:	61 95       	neg	r22
     d06:	7f 4f       	sbci	r23, 0xFF	; 255
     d08:	8f 4f       	sbci	r24, 0xFF	; 255
     d0a:	9f 4f       	sbci	r25, 0xFF	; 255
     d0c:	08 95       	ret

00000d0e <__floatunsisf>:
     d0e:	e8 94       	clt
     d10:	09 c0       	rjmp	.+18     	; 0xd24 <__floatsisf+0x12>

00000d12 <__floatsisf>:
     d12:	97 fb       	bst	r25, 7
     d14:	3e f4       	brtc	.+14     	; 0xd24 <__floatsisf+0x12>
     d16:	90 95       	com	r25
     d18:	80 95       	com	r24
     d1a:	70 95       	com	r23
     d1c:	61 95       	neg	r22
     d1e:	7f 4f       	sbci	r23, 0xFF	; 255
     d20:	8f 4f       	sbci	r24, 0xFF	; 255
     d22:	9f 4f       	sbci	r25, 0xFF	; 255
     d24:	99 23       	and	r25, r25
     d26:	a9 f0       	breq	.+42     	; 0xd52 <__floatsisf+0x40>
     d28:	f9 2f       	mov	r31, r25
     d2a:	96 e9       	ldi	r25, 0x96	; 150
     d2c:	bb 27       	eor	r27, r27
     d2e:	93 95       	inc	r25
     d30:	f6 95       	lsr	r31
     d32:	87 95       	ror	r24
     d34:	77 95       	ror	r23
     d36:	67 95       	ror	r22
     d38:	b7 95       	ror	r27
     d3a:	f1 11       	cpse	r31, r1
     d3c:	f8 cf       	rjmp	.-16     	; 0xd2e <__floatsisf+0x1c>
     d3e:	fa f4       	brpl	.+62     	; 0xd7e <__floatsisf+0x6c>
     d40:	bb 0f       	add	r27, r27
     d42:	11 f4       	brne	.+4      	; 0xd48 <__floatsisf+0x36>
     d44:	60 ff       	sbrs	r22, 0
     d46:	1b c0       	rjmp	.+54     	; 0xd7e <__floatsisf+0x6c>
     d48:	6f 5f       	subi	r22, 0xFF	; 255
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	8f 4f       	sbci	r24, 0xFF	; 255
     d4e:	9f 4f       	sbci	r25, 0xFF	; 255
     d50:	16 c0       	rjmp	.+44     	; 0xd7e <__floatsisf+0x6c>
     d52:	88 23       	and	r24, r24
     d54:	11 f0       	breq	.+4      	; 0xd5a <__floatsisf+0x48>
     d56:	96 e9       	ldi	r25, 0x96	; 150
     d58:	11 c0       	rjmp	.+34     	; 0xd7c <__floatsisf+0x6a>
     d5a:	77 23       	and	r23, r23
     d5c:	21 f0       	breq	.+8      	; 0xd66 <__floatsisf+0x54>
     d5e:	9e e8       	ldi	r25, 0x8E	; 142
     d60:	87 2f       	mov	r24, r23
     d62:	76 2f       	mov	r23, r22
     d64:	05 c0       	rjmp	.+10     	; 0xd70 <__floatsisf+0x5e>
     d66:	66 23       	and	r22, r22
     d68:	71 f0       	breq	.+28     	; 0xd86 <__floatsisf+0x74>
     d6a:	96 e8       	ldi	r25, 0x86	; 134
     d6c:	86 2f       	mov	r24, r22
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	2a f0       	brmi	.+10     	; 0xd7e <__floatsisf+0x6c>
     d74:	9a 95       	dec	r25
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	88 1f       	adc	r24, r24
     d7c:	da f7       	brpl	.-10     	; 0xd74 <__floatsisf+0x62>
     d7e:	88 0f       	add	r24, r24
     d80:	96 95       	lsr	r25
     d82:	87 95       	ror	r24
     d84:	97 f9       	bld	r25, 7
     d86:	08 95       	ret

00000d88 <__fp_cmp>:
     d88:	99 0f       	add	r25, r25
     d8a:	00 08       	sbc	r0, r0
     d8c:	55 0f       	add	r21, r21
     d8e:	aa 0b       	sbc	r26, r26
     d90:	e0 e8       	ldi	r30, 0x80	; 128
     d92:	fe ef       	ldi	r31, 0xFE	; 254
     d94:	16 16       	cp	r1, r22
     d96:	17 06       	cpc	r1, r23
     d98:	e8 07       	cpc	r30, r24
     d9a:	f9 07       	cpc	r31, r25
     d9c:	c0 f0       	brcs	.+48     	; 0xdce <__fp_cmp+0x46>
     d9e:	12 16       	cp	r1, r18
     da0:	13 06       	cpc	r1, r19
     da2:	e4 07       	cpc	r30, r20
     da4:	f5 07       	cpc	r31, r21
     da6:	98 f0       	brcs	.+38     	; 0xdce <__fp_cmp+0x46>
     da8:	62 1b       	sub	r22, r18
     daa:	73 0b       	sbc	r23, r19
     dac:	84 0b       	sbc	r24, r20
     dae:	95 0b       	sbc	r25, r21
     db0:	39 f4       	brne	.+14     	; 0xdc0 <__fp_cmp+0x38>
     db2:	0a 26       	eor	r0, r26
     db4:	61 f0       	breq	.+24     	; 0xdce <__fp_cmp+0x46>
     db6:	23 2b       	or	r18, r19
     db8:	24 2b       	or	r18, r20
     dba:	25 2b       	or	r18, r21
     dbc:	21 f4       	brne	.+8      	; 0xdc6 <__fp_cmp+0x3e>
     dbe:	08 95       	ret
     dc0:	0a 26       	eor	r0, r26
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <__fp_cmp+0x3e>
     dc4:	a1 40       	sbci	r26, 0x01	; 1
     dc6:	a6 95       	lsr	r26
     dc8:	8f ef       	ldi	r24, 0xFF	; 255
     dca:	81 1d       	adc	r24, r1
     dcc:	81 1d       	adc	r24, r1
     dce:	08 95       	ret

00000dd0 <__fp_inf>:
     dd0:	97 f9       	bld	r25, 7
     dd2:	9f 67       	ori	r25, 0x7F	; 127
     dd4:	80 e8       	ldi	r24, 0x80	; 128
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	08 95       	ret

00000ddc <__fp_nan>:
     ddc:	9f ef       	ldi	r25, 0xFF	; 255
     dde:	80 ec       	ldi	r24, 0xC0	; 192
     de0:	08 95       	ret

00000de2 <__fp_pscA>:
     de2:	00 24       	eor	r0, r0
     de4:	0a 94       	dec	r0
     de6:	16 16       	cp	r1, r22
     de8:	17 06       	cpc	r1, r23
     dea:	18 06       	cpc	r1, r24
     dec:	09 06       	cpc	r0, r25
     dee:	08 95       	ret

00000df0 <__fp_pscB>:
     df0:	00 24       	eor	r0, r0
     df2:	0a 94       	dec	r0
     df4:	12 16       	cp	r1, r18
     df6:	13 06       	cpc	r1, r19
     df8:	14 06       	cpc	r1, r20
     dfa:	05 06       	cpc	r0, r21
     dfc:	08 95       	ret

00000dfe <__fp_round>:
     dfe:	09 2e       	mov	r0, r25
     e00:	03 94       	inc	r0
     e02:	00 0c       	add	r0, r0
     e04:	11 f4       	brne	.+4      	; 0xe0a <__fp_round+0xc>
     e06:	88 23       	and	r24, r24
     e08:	52 f0       	brmi	.+20     	; 0xe1e <__fp_round+0x20>
     e0a:	bb 0f       	add	r27, r27
     e0c:	40 f4       	brcc	.+16     	; 0xe1e <__fp_round+0x20>
     e0e:	bf 2b       	or	r27, r31
     e10:	11 f4       	brne	.+4      	; 0xe16 <__fp_round+0x18>
     e12:	60 ff       	sbrs	r22, 0
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <__fp_round+0x20>
     e16:	6f 5f       	subi	r22, 0xFF	; 255
     e18:	7f 4f       	sbci	r23, 0xFF	; 255
     e1a:	8f 4f       	sbci	r24, 0xFF	; 255
     e1c:	9f 4f       	sbci	r25, 0xFF	; 255
     e1e:	08 95       	ret

00000e20 <__fp_split3>:
     e20:	57 fd       	sbrc	r21, 7
     e22:	90 58       	subi	r25, 0x80	; 128
     e24:	44 0f       	add	r20, r20
     e26:	55 1f       	adc	r21, r21
     e28:	59 f0       	breq	.+22     	; 0xe40 <__fp_splitA+0x10>
     e2a:	5f 3f       	cpi	r21, 0xFF	; 255
     e2c:	71 f0       	breq	.+28     	; 0xe4a <__fp_splitA+0x1a>
     e2e:	47 95       	ror	r20

00000e30 <__fp_splitA>:
     e30:	88 0f       	add	r24, r24
     e32:	97 fb       	bst	r25, 7
     e34:	99 1f       	adc	r25, r25
     e36:	61 f0       	breq	.+24     	; 0xe50 <__fp_splitA+0x20>
     e38:	9f 3f       	cpi	r25, 0xFF	; 255
     e3a:	79 f0       	breq	.+30     	; 0xe5a <__fp_splitA+0x2a>
     e3c:	87 95       	ror	r24
     e3e:	08 95       	ret
     e40:	12 16       	cp	r1, r18
     e42:	13 06       	cpc	r1, r19
     e44:	14 06       	cpc	r1, r20
     e46:	55 1f       	adc	r21, r21
     e48:	f2 cf       	rjmp	.-28     	; 0xe2e <__fp_split3+0xe>
     e4a:	46 95       	lsr	r20
     e4c:	f1 df       	rcall	.-30     	; 0xe30 <__fp_splitA>
     e4e:	08 c0       	rjmp	.+16     	; 0xe60 <__fp_splitA+0x30>
     e50:	16 16       	cp	r1, r22
     e52:	17 06       	cpc	r1, r23
     e54:	18 06       	cpc	r1, r24
     e56:	99 1f       	adc	r25, r25
     e58:	f1 cf       	rjmp	.-30     	; 0xe3c <__fp_splitA+0xc>
     e5a:	86 95       	lsr	r24
     e5c:	71 05       	cpc	r23, r1
     e5e:	61 05       	cpc	r22, r1
     e60:	08 94       	sec
     e62:	08 95       	ret

00000e64 <__fp_zero>:
     e64:	e8 94       	clt

00000e66 <__fp_szero>:
     e66:	bb 27       	eor	r27, r27
     e68:	66 27       	eor	r22, r22
     e6a:	77 27       	eor	r23, r23
     e6c:	cb 01       	movw	r24, r22
     e6e:	97 f9       	bld	r25, 7
     e70:	08 95       	ret

00000e72 <__gesf2>:
     e72:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fp_cmp>
     e76:	08 f4       	brcc	.+2      	; 0xe7a <__gesf2+0x8>
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	08 95       	ret

00000e7c <__mulsf3>:
     e7c:	0e 94 51 07 	call	0xea2	; 0xea2 <__mulsf3x>
     e80:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_round>
     e84:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_pscA>
     e88:	38 f0       	brcs	.+14     	; 0xe98 <__mulsf3+0x1c>
     e8a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_pscB>
     e8e:	20 f0       	brcs	.+8      	; 0xe98 <__mulsf3+0x1c>
     e90:	95 23       	and	r25, r21
     e92:	11 f0       	breq	.+4      	; 0xe98 <__mulsf3+0x1c>
     e94:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
     e98:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_nan>
     e9c:	11 24       	eor	r1, r1
     e9e:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_szero>

00000ea2 <__mulsf3x>:
     ea2:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_split3>
     ea6:	70 f3       	brcs	.-36     	; 0xe84 <__mulsf3+0x8>

00000ea8 <__mulsf3_pse>:
     ea8:	95 9f       	mul	r25, r21
     eaa:	c1 f3       	breq	.-16     	; 0xe9c <__mulsf3+0x20>
     eac:	95 0f       	add	r25, r21
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	55 1f       	adc	r21, r21
     eb2:	62 9f       	mul	r22, r18
     eb4:	f0 01       	movw	r30, r0
     eb6:	72 9f       	mul	r23, r18
     eb8:	bb 27       	eor	r27, r27
     eba:	f0 0d       	add	r31, r0
     ebc:	b1 1d       	adc	r27, r1
     ebe:	63 9f       	mul	r22, r19
     ec0:	aa 27       	eor	r26, r26
     ec2:	f0 0d       	add	r31, r0
     ec4:	b1 1d       	adc	r27, r1
     ec6:	aa 1f       	adc	r26, r26
     ec8:	64 9f       	mul	r22, r20
     eca:	66 27       	eor	r22, r22
     ecc:	b0 0d       	add	r27, r0
     ece:	a1 1d       	adc	r26, r1
     ed0:	66 1f       	adc	r22, r22
     ed2:	82 9f       	mul	r24, r18
     ed4:	22 27       	eor	r18, r18
     ed6:	b0 0d       	add	r27, r0
     ed8:	a1 1d       	adc	r26, r1
     eda:	62 1f       	adc	r22, r18
     edc:	73 9f       	mul	r23, r19
     ede:	b0 0d       	add	r27, r0
     ee0:	a1 1d       	adc	r26, r1
     ee2:	62 1f       	adc	r22, r18
     ee4:	83 9f       	mul	r24, r19
     ee6:	a0 0d       	add	r26, r0
     ee8:	61 1d       	adc	r22, r1
     eea:	22 1f       	adc	r18, r18
     eec:	74 9f       	mul	r23, r20
     eee:	33 27       	eor	r19, r19
     ef0:	a0 0d       	add	r26, r0
     ef2:	61 1d       	adc	r22, r1
     ef4:	23 1f       	adc	r18, r19
     ef6:	84 9f       	mul	r24, r20
     ef8:	60 0d       	add	r22, r0
     efa:	21 1d       	adc	r18, r1
     efc:	82 2f       	mov	r24, r18
     efe:	76 2f       	mov	r23, r22
     f00:	6a 2f       	mov	r22, r26
     f02:	11 24       	eor	r1, r1
     f04:	9f 57       	subi	r25, 0x7F	; 127
     f06:	50 40       	sbci	r21, 0x00	; 0
     f08:	9a f0       	brmi	.+38     	; 0xf30 <__mulsf3_pse+0x88>
     f0a:	f1 f0       	breq	.+60     	; 0xf48 <__mulsf3_pse+0xa0>
     f0c:	88 23       	and	r24, r24
     f0e:	4a f0       	brmi	.+18     	; 0xf22 <__mulsf3_pse+0x7a>
     f10:	ee 0f       	add	r30, r30
     f12:	ff 1f       	adc	r31, r31
     f14:	bb 1f       	adc	r27, r27
     f16:	66 1f       	adc	r22, r22
     f18:	77 1f       	adc	r23, r23
     f1a:	88 1f       	adc	r24, r24
     f1c:	91 50       	subi	r25, 0x01	; 1
     f1e:	50 40       	sbci	r21, 0x00	; 0
     f20:	a9 f7       	brne	.-22     	; 0xf0c <__mulsf3_pse+0x64>
     f22:	9e 3f       	cpi	r25, 0xFE	; 254
     f24:	51 05       	cpc	r21, r1
     f26:	80 f0       	brcs	.+32     	; 0xf48 <__mulsf3_pse+0xa0>
     f28:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
     f2c:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_szero>
     f30:	5f 3f       	cpi	r21, 0xFF	; 255
     f32:	e4 f3       	brlt	.-8      	; 0xf2c <__mulsf3_pse+0x84>
     f34:	98 3e       	cpi	r25, 0xE8	; 232
     f36:	d4 f3       	brlt	.-12     	; 0xf2c <__mulsf3_pse+0x84>
     f38:	86 95       	lsr	r24
     f3a:	77 95       	ror	r23
     f3c:	67 95       	ror	r22
     f3e:	b7 95       	ror	r27
     f40:	f7 95       	ror	r31
     f42:	e7 95       	ror	r30
     f44:	9f 5f       	subi	r25, 0xFF	; 255
     f46:	c1 f7       	brne	.-16     	; 0xf38 <__mulsf3_pse+0x90>
     f48:	fe 2b       	or	r31, r30
     f4a:	88 0f       	add	r24, r24
     f4c:	91 1d       	adc	r25, r1
     f4e:	96 95       	lsr	r25
     f50:	87 95       	ror	r24
     f52:	97 f9       	bld	r25, 7
     f54:	08 95       	ret

00000f56 <dtostrf>:
     f56:	ef 92       	push	r14
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	e8 01       	movw	r28, r16
     f62:	47 fd       	sbrc	r20, 7
     f64:	16 c0       	rjmp	.+44     	; 0xf92 <dtostrf+0x3c>
     f66:	34 e0       	ldi	r19, 0x04	; 4
     f68:	04 2e       	mov	r0, r20
     f6a:	00 0c       	add	r0, r0
     f6c:	55 0b       	sbc	r21, r21
     f6e:	57 ff       	sbrs	r21, 7
     f70:	03 c0       	rjmp	.+6      	; 0xf78 <dtostrf+0x22>
     f72:	51 95       	neg	r21
     f74:	41 95       	neg	r20
     f76:	51 09       	sbc	r21, r1
     f78:	e3 2e       	mov	r14, r19
     f7a:	02 2f       	mov	r16, r18
     f7c:	24 2f       	mov	r18, r20
     f7e:	ae 01       	movw	r20, r28
     f80:	0e 94 cb 07 	call	0xf96	; 0xf96 <dtoa_prf>
     f84:	ce 01       	movw	r24, r28
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ef 90       	pop	r14
     f90:	08 95       	ret
     f92:	34 e1       	ldi	r19, 0x14	; 20
     f94:	e9 cf       	rjmp	.-46     	; 0xf68 <dtostrf+0x12>

00000f96 <dtoa_prf>:
     f96:	8f 92       	push	r8
     f98:	9f 92       	push	r9
     f9a:	af 92       	push	r10
     f9c:	bf 92       	push	r11
     f9e:	cf 92       	push	r12
     fa0:	df 92       	push	r13
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	29 97       	sbiw	r28, 0x09	; 9
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	6a 01       	movw	r12, r20
     fc0:	f2 2e       	mov	r15, r18
     fc2:	b0 2e       	mov	r11, r16
     fc4:	2b e3       	ldi	r18, 0x3B	; 59
     fc6:	20 17       	cp	r18, r16
     fc8:	08 f4       	brcc	.+2      	; 0xfcc <dtoa_prf+0x36>
     fca:	5f c0       	rjmp	.+190    	; 0x108a <dtoa_prf+0xf4>
     fcc:	11 e0       	ldi	r17, 0x01	; 1
     fce:	10 0f       	add	r17, r16
     fd0:	01 2f       	mov	r16, r17
     fd2:	27 e0       	ldi	r18, 0x07	; 7
     fd4:	ae 01       	movw	r20, r28
     fd6:	4f 5f       	subi	r20, 0xFF	; 255
     fd8:	5f 4f       	sbci	r21, 0xFF	; 255
     fda:	0e 94 4c 09 	call	0x1298	; 0x1298 <__ftoa_engine>
     fde:	bc 01       	movw	r22, r24
     fe0:	39 81       	ldd	r19, Y+1	; 0x01
     fe2:	83 2f       	mov	r24, r19
     fe4:	89 70       	andi	r24, 0x09	; 9
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	09 f4       	brne	.+2      	; 0xfec <dtoa_prf+0x56>
     fea:	51 c0       	rjmp	.+162    	; 0x108e <dtoa_prf+0xf8>
     fec:	e1 fc       	sbrc	r14, 1
     fee:	51 c0       	rjmp	.+162    	; 0x1092 <dtoa_prf+0xfc>
     ff0:	9e 2d       	mov	r25, r14
     ff2:	91 70       	andi	r25, 0x01	; 1
     ff4:	e0 fc       	sbrc	r14, 0
     ff6:	90 e2       	ldi	r25, 0x20	; 32
     ff8:	ae 2d       	mov	r26, r14
     ffa:	a0 71       	andi	r26, 0x10	; 16
     ffc:	83 2f       	mov	r24, r19
     ffe:	88 70       	andi	r24, 0x08	; 8
    1000:	33 ff       	sbrs	r19, 3
    1002:	5a c0       	rjmp	.+180    	; 0x10b8 <dtoa_prf+0x122>
    1004:	91 11       	cpse	r25, r1
    1006:	47 c0       	rjmp	.+142    	; 0x1096 <dtoa_prf+0x100>
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	8f 15       	cp	r24, r15
    100c:	08 f0       	brcs	.+2      	; 0x1010 <dtoa_prf+0x7a>
    100e:	45 c0       	rjmp	.+138    	; 0x109a <dtoa_prf+0x104>
    1010:	f8 1a       	sub	r15, r24
    1012:	a1 11       	cpse	r26, r1
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <dtoa_prf+0x90>
    1016:	f6 01       	movw	r30, r12
    1018:	8f 2d       	mov	r24, r15
    101a:	20 e2       	ldi	r18, 0x20	; 32
    101c:	81 11       	cpse	r24, r1
    101e:	3f c0       	rjmp	.+126    	; 0x109e <dtoa_prf+0x108>
    1020:	cf 0c       	add	r12, r15
    1022:	d1 1c       	adc	r13, r1
    1024:	f1 2c       	mov	r15, r1
    1026:	99 23       	and	r25, r25
    1028:	29 f0       	breq	.+10     	; 0x1034 <dtoa_prf+0x9e>
    102a:	d6 01       	movw	r26, r12
    102c:	9c 93       	st	X, r25
    102e:	f6 01       	movw	r30, r12
    1030:	31 96       	adiw	r30, 0x01	; 1
    1032:	6f 01       	movw	r12, r30
    1034:	c6 01       	movw	r24, r12
    1036:	03 96       	adiw	r24, 0x03	; 3
    1038:	e2 fe       	sbrs	r14, 2
    103a:	34 c0       	rjmp	.+104    	; 0x10a4 <dtoa_prf+0x10e>
    103c:	2e e4       	ldi	r18, 0x4E	; 78
    103e:	d6 01       	movw	r26, r12
    1040:	2c 93       	st	X, r18
    1042:	31 e4       	ldi	r19, 0x41	; 65
    1044:	11 96       	adiw	r26, 0x01	; 1
    1046:	3c 93       	st	X, r19
    1048:	11 97       	sbiw	r26, 0x01	; 1
    104a:	12 96       	adiw	r26, 0x02	; 2
    104c:	2c 93       	st	X, r18
    104e:	fc 01       	movw	r30, r24
    1050:	2f 2d       	mov	r18, r15
    1052:	30 e2       	ldi	r19, 0x20	; 32
    1054:	21 11       	cpse	r18, r1
    1056:	2d c0       	rjmp	.+90     	; 0x10b2 <dtoa_prf+0x11c>
    1058:	8f 0d       	add	r24, r15
    105a:	91 1d       	adc	r25, r1
    105c:	dc 01       	movw	r26, r24
    105e:	1c 92       	st	X, r1
    1060:	8e ef       	ldi	r24, 0xFE	; 254
    1062:	9f ef       	ldi	r25, 0xFF	; 255
    1064:	29 96       	adiw	r28, 0x09	; 9
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	cf 90       	pop	r12
    1080:	bf 90       	pop	r11
    1082:	af 90       	pop	r10
    1084:	9f 90       	pop	r9
    1086:	8f 90       	pop	r8
    1088:	08 95       	ret
    108a:	1c e3       	ldi	r17, 0x3C	; 60
    108c:	a1 cf       	rjmp	.-190    	; 0xfd0 <dtoa_prf+0x3a>
    108e:	9d e2       	ldi	r25, 0x2D	; 45
    1090:	b3 cf       	rjmp	.-154    	; 0xff8 <dtoa_prf+0x62>
    1092:	9b e2       	ldi	r25, 0x2B	; 43
    1094:	b1 cf       	rjmp	.-158    	; 0xff8 <dtoa_prf+0x62>
    1096:	84 e0       	ldi	r24, 0x04	; 4
    1098:	b8 cf       	rjmp	.-144    	; 0x100a <dtoa_prf+0x74>
    109a:	f1 2c       	mov	r15, r1
    109c:	ba cf       	rjmp	.-140    	; 0x1012 <dtoa_prf+0x7c>
    109e:	21 93       	st	Z+, r18
    10a0:	81 50       	subi	r24, 0x01	; 1
    10a2:	bc cf       	rjmp	.-136    	; 0x101c <dtoa_prf+0x86>
    10a4:	2e e6       	ldi	r18, 0x6E	; 110
    10a6:	f6 01       	movw	r30, r12
    10a8:	20 83       	st	Z, r18
    10aa:	31 e6       	ldi	r19, 0x61	; 97
    10ac:	31 83       	std	Z+1, r19	; 0x01
    10ae:	22 83       	std	Z+2, r18	; 0x02
    10b0:	ce cf       	rjmp	.-100    	; 0x104e <dtoa_prf+0xb8>
    10b2:	31 93       	st	Z+, r19
    10b4:	21 50       	subi	r18, 0x01	; 1
    10b6:	ce cf       	rjmp	.-100    	; 0x1054 <dtoa_prf+0xbe>
    10b8:	23 2f       	mov	r18, r19
    10ba:	24 70       	andi	r18, 0x04	; 4
    10bc:	32 ff       	sbrs	r19, 2
    10be:	41 c0       	rjmp	.+130    	; 0x1142 <__stack+0x43>
    10c0:	91 11       	cpse	r25, r1
    10c2:	2f c0       	rjmp	.+94     	; 0x1122 <__stack+0x23>
    10c4:	23 e0       	ldi	r18, 0x03	; 3
    10c6:	2f 15       	cp	r18, r15
    10c8:	10 f4       	brcc	.+4      	; 0x10ce <dtoa_prf+0x138>
    10ca:	8f 2d       	mov	r24, r15
    10cc:	82 1b       	sub	r24, r18
    10ce:	a1 11       	cpse	r26, r1
    10d0:	08 c0       	rjmp	.+16     	; 0x10e2 <dtoa_prf+0x14c>
    10d2:	f6 01       	movw	r30, r12
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e2       	ldi	r19, 0x20	; 32
    10d8:	21 11       	cpse	r18, r1
    10da:	25 c0       	rjmp	.+74     	; 0x1126 <__stack+0x27>
    10dc:	c8 0e       	add	r12, r24
    10de:	d1 1c       	adc	r13, r1
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	99 23       	and	r25, r25
    10e4:	31 f0       	breq	.+12     	; 0x10f2 <dtoa_prf+0x15c>
    10e6:	f6 01       	movw	r30, r12
    10e8:	90 83       	st	Z, r25
    10ea:	96 01       	movw	r18, r12
    10ec:	2f 5f       	subi	r18, 0xFF	; 255
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	69 01       	movw	r12, r18
    10f2:	96 01       	movw	r18, r12
    10f4:	2d 5f       	subi	r18, 0xFD	; 253
    10f6:	3f 4f       	sbci	r19, 0xFF	; 255
    10f8:	e2 fe       	sbrs	r14, 2
    10fa:	18 c0       	rjmp	.+48     	; 0x112c <__stack+0x2d>
    10fc:	99 e4       	ldi	r25, 0x49	; 73
    10fe:	d6 01       	movw	r26, r12
    1100:	9c 93       	st	X, r25
    1102:	9e e4       	ldi	r25, 0x4E	; 78
    1104:	11 96       	adiw	r26, 0x01	; 1
    1106:	9c 93       	st	X, r25
    1108:	11 97       	sbiw	r26, 0x01	; 1
    110a:	96 e4       	ldi	r25, 0x46	; 70
    110c:	12 96       	adiw	r26, 0x02	; 2
    110e:	9c 93       	st	X, r25
    1110:	f9 01       	movw	r30, r18
    1112:	98 2f       	mov	r25, r24
    1114:	40 e2       	ldi	r20, 0x20	; 32
    1116:	91 11       	cpse	r25, r1
    1118:	11 c0       	rjmp	.+34     	; 0x113c <__stack+0x3d>
    111a:	28 0f       	add	r18, r24
    111c:	31 1d       	adc	r19, r1
    111e:	d9 01       	movw	r26, r18
    1120:	9e cf       	rjmp	.-196    	; 0x105e <dtoa_prf+0xc8>
    1122:	24 e0       	ldi	r18, 0x04	; 4
    1124:	d0 cf       	rjmp	.-96     	; 0x10c6 <dtoa_prf+0x130>
    1126:	31 93       	st	Z+, r19
    1128:	21 50       	subi	r18, 0x01	; 1
    112a:	d6 cf       	rjmp	.-84     	; 0x10d8 <dtoa_prf+0x142>
    112c:	99 e6       	ldi	r25, 0x69	; 105
    112e:	f6 01       	movw	r30, r12
    1130:	90 83       	st	Z, r25
    1132:	9e e6       	ldi	r25, 0x6E	; 110
    1134:	91 83       	std	Z+1, r25	; 0x01
    1136:	96 e6       	ldi	r25, 0x66	; 102
    1138:	92 83       	std	Z+2, r25	; 0x02
    113a:	ea cf       	rjmp	.-44     	; 0x1110 <__stack+0x11>
    113c:	41 93       	st	Z+, r20
    113e:	91 50       	subi	r25, 0x01	; 1
    1140:	ea cf       	rjmp	.-44     	; 0x1116 <__stack+0x17>
    1142:	41 e0       	ldi	r20, 0x01	; 1
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	91 11       	cpse	r25, r1
    1148:	02 c0       	rjmp	.+4      	; 0x114e <__stack+0x4f>
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	16 16       	cp	r1, r22
    1150:	17 06       	cpc	r1, r23
    1152:	0c f0       	brlt	.+2      	; 0x1156 <__stack+0x57>
    1154:	75 c0       	rjmp	.+234    	; 0x1240 <__stack+0x141>
    1156:	fb 01       	movw	r30, r22
    1158:	31 96       	adiw	r30, 0x01	; 1
    115a:	e4 0f       	add	r30, r20
    115c:	f5 1f       	adc	r31, r21
    115e:	bb 20       	and	r11, r11
    1160:	09 f4       	brne	.+2      	; 0x1164 <__stack+0x65>
    1162:	71 c0       	rjmp	.+226    	; 0x1246 <__stack+0x147>
    1164:	4b 2d       	mov	r20, r11
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	4f 5f       	subi	r20, 0xFF	; 255
    116a:	5f 4f       	sbci	r21, 0xFF	; 255
    116c:	4e 0f       	add	r20, r30
    116e:	5f 1f       	adc	r21, r31
    1170:	ef 2d       	mov	r30, r15
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	4e 17       	cp	r20, r30
    1176:	5f 07       	cpc	r21, r31
    1178:	14 f4       	brge	.+4      	; 0x117e <__stack+0x7f>
    117a:	2f 2d       	mov	r18, r15
    117c:	24 1b       	sub	r18, r20
    117e:	8e 2d       	mov	r24, r14
    1180:	88 71       	andi	r24, 0x18	; 24
    1182:	41 f4       	brne	.+16     	; 0x1194 <__stack+0x95>
    1184:	f6 01       	movw	r30, r12
    1186:	82 2f       	mov	r24, r18
    1188:	40 e2       	ldi	r20, 0x20	; 32
    118a:	81 11       	cpse	r24, r1
    118c:	5f c0       	rjmp	.+190    	; 0x124c <__stack+0x14d>
    118e:	c2 0e       	add	r12, r18
    1190:	d1 1c       	adc	r13, r1
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	99 23       	and	r25, r25
    1196:	29 f0       	breq	.+10     	; 0x11a2 <__stack+0xa3>
    1198:	f6 01       	movw	r30, r12
    119a:	90 83       	st	Z, r25
    119c:	c6 01       	movw	r24, r12
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	6c 01       	movw	r12, r24
    11a2:	a1 11       	cpse	r26, r1
    11a4:	08 c0       	rjmp	.+16     	; 0x11b6 <__stack+0xb7>
    11a6:	f6 01       	movw	r30, r12
    11a8:	82 2f       	mov	r24, r18
    11aa:	90 e3       	ldi	r25, 0x30	; 48
    11ac:	81 11       	cpse	r24, r1
    11ae:	51 c0       	rjmp	.+162    	; 0x1252 <__stack+0x153>
    11b0:	c2 0e       	add	r12, r18
    11b2:	d1 1c       	adc	r13, r1
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	01 2f       	mov	r16, r17
    11b8:	06 0f       	add	r16, r22
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	a3 2f       	mov	r26, r19
    11be:	a0 71       	andi	r26, 0x10	; 16
    11c0:	aa 2e       	mov	r10, r26
    11c2:	34 ff       	sbrs	r19, 4
    11c4:	03 c0       	rjmp	.+6      	; 0x11cc <__stack+0xcd>
    11c6:	91 33       	cpi	r25, 0x31	; 49
    11c8:	09 f4       	brne	.+2      	; 0x11cc <__stack+0xcd>
    11ca:	01 50       	subi	r16, 0x01	; 1
    11cc:	10 16       	cp	r1, r16
    11ce:	0c f0       	brlt	.+2      	; 0x11d2 <__stack+0xd3>
    11d0:	43 c0       	rjmp	.+134    	; 0x1258 <__stack+0x159>
    11d2:	09 30       	cpi	r16, 0x09	; 9
    11d4:	08 f0       	brcs	.+2      	; 0x11d8 <__stack+0xd9>
    11d6:	08 e0       	ldi	r16, 0x08	; 8
    11d8:	ab 01       	movw	r20, r22
    11da:	77 ff       	sbrs	r23, 7
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <__stack+0xe3>
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	fb 01       	movw	r30, r22
    11e4:	31 96       	adiw	r30, 0x01	; 1
    11e6:	e4 1b       	sub	r30, r20
    11e8:	f5 0b       	sbc	r31, r21
    11ea:	a1 e0       	ldi	r26, 0x01	; 1
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	ac 0f       	add	r26, r28
    11f0:	bd 1f       	adc	r27, r29
    11f2:	ea 0f       	add	r30, r26
    11f4:	fb 1f       	adc	r31, r27
    11f6:	3e e2       	ldi	r19, 0x2E	; 46
    11f8:	4b 01       	movw	r8, r22
    11fa:	80 1a       	sub	r8, r16
    11fc:	91 08       	sbc	r9, r1
    11fe:	0b 2d       	mov	r16, r11
    1200:	10 e0       	ldi	r17, 0x00	; 0
    1202:	11 95       	neg	r17
    1204:	01 95       	neg	r16
    1206:	11 09       	sbc	r17, r1
    1208:	4f 3f       	cpi	r20, 0xFF	; 255
    120a:	bf ef       	ldi	r27, 0xFF	; 255
    120c:	5b 07       	cpc	r21, r27
    120e:	21 f4       	brne	.+8      	; 0x1218 <__stack+0x119>
    1210:	d6 01       	movw	r26, r12
    1212:	3c 93       	st	X, r19
    1214:	11 96       	adiw	r26, 0x01	; 1
    1216:	6d 01       	movw	r12, r26
    1218:	64 17       	cp	r22, r20
    121a:	75 07       	cpc	r23, r21
    121c:	fc f0       	brlt	.+62     	; 0x125c <__stack+0x15d>
    121e:	84 16       	cp	r8, r20
    1220:	95 06       	cpc	r9, r21
    1222:	e4 f4       	brge	.+56     	; 0x125c <__stack+0x15d>
    1224:	80 81       	ld	r24, Z
    1226:	41 50       	subi	r20, 0x01	; 1
    1228:	51 09       	sbc	r21, r1
    122a:	31 96       	adiw	r30, 0x01	; 1
    122c:	d6 01       	movw	r26, r12
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	7d 01       	movw	r14, r26
    1232:	40 17       	cp	r20, r16
    1234:	51 07       	cpc	r21, r17
    1236:	a4 f0       	brlt	.+40     	; 0x1260 <__stack+0x161>
    1238:	d6 01       	movw	r26, r12
    123a:	8c 93       	st	X, r24
    123c:	67 01       	movw	r12, r14
    123e:	e4 cf       	rjmp	.-56     	; 0x1208 <__stack+0x109>
    1240:	e1 e0       	ldi	r30, 0x01	; 1
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	8a cf       	rjmp	.-236    	; 0x115a <__stack+0x5b>
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	90 cf       	rjmp	.-224    	; 0x116c <__stack+0x6d>
    124c:	41 93       	st	Z+, r20
    124e:	81 50       	subi	r24, 0x01	; 1
    1250:	9c cf       	rjmp	.-200    	; 0x118a <__stack+0x8b>
    1252:	91 93       	st	Z+, r25
    1254:	81 50       	subi	r24, 0x01	; 1
    1256:	aa cf       	rjmp	.-172    	; 0x11ac <__stack+0xad>
    1258:	01 e0       	ldi	r16, 0x01	; 1
    125a:	be cf       	rjmp	.-132    	; 0x11d8 <__stack+0xd9>
    125c:	80 e3       	ldi	r24, 0x30	; 48
    125e:	e3 cf       	rjmp	.-58     	; 0x1226 <__stack+0x127>
    1260:	64 17       	cp	r22, r20
    1262:	75 07       	cpc	r23, r21
    1264:	31 f4       	brne	.+12     	; 0x1272 <__stack+0x173>
    1266:	96 33       	cpi	r25, 0x36	; 54
    1268:	90 f4       	brcc	.+36     	; 0x128e <__stack+0x18f>
    126a:	95 33       	cpi	r25, 0x35	; 53
    126c:	11 f4       	brne	.+4      	; 0x1272 <__stack+0x173>
    126e:	aa 20       	and	r10, r10
    1270:	71 f0       	breq	.+28     	; 0x128e <__stack+0x18f>
    1272:	f6 01       	movw	r30, r12
    1274:	80 83       	st	Z, r24
    1276:	f7 01       	movw	r30, r14
    1278:	82 2f       	mov	r24, r18
    127a:	90 e2       	ldi	r25, 0x20	; 32
    127c:	81 11       	cpse	r24, r1
    127e:	09 c0       	rjmp	.+18     	; 0x1292 <__stack+0x193>
    1280:	f7 01       	movw	r30, r14
    1282:	e2 0f       	add	r30, r18
    1284:	f1 1d       	adc	r31, r1
    1286:	10 82       	st	Z, r1
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	eb ce       	rjmp	.-554    	; 0x1064 <dtoa_prf+0xce>
    128e:	81 e3       	ldi	r24, 0x31	; 49
    1290:	f0 cf       	rjmp	.-32     	; 0x1272 <__stack+0x173>
    1292:	91 93       	st	Z+, r25
    1294:	81 50       	subi	r24, 0x01	; 1
    1296:	f2 cf       	rjmp	.-28     	; 0x127c <__stack+0x17d>

00001298 <__ftoa_engine>:
    1298:	28 30       	cpi	r18, 0x08	; 8
    129a:	08 f0       	brcs	.+2      	; 0x129e <__ftoa_engine+0x6>
    129c:	27 e0       	ldi	r18, 0x07	; 7
    129e:	33 27       	eor	r19, r19
    12a0:	da 01       	movw	r26, r20
    12a2:	99 0f       	add	r25, r25
    12a4:	31 1d       	adc	r19, r1
    12a6:	87 fd       	sbrc	r24, 7
    12a8:	91 60       	ori	r25, 0x01	; 1
    12aa:	00 96       	adiw	r24, 0x00	; 0
    12ac:	61 05       	cpc	r22, r1
    12ae:	71 05       	cpc	r23, r1
    12b0:	39 f4       	brne	.+14     	; 0x12c0 <__ftoa_engine+0x28>
    12b2:	32 60       	ori	r19, 0x02	; 2
    12b4:	2e 5f       	subi	r18, 0xFE	; 254
    12b6:	3d 93       	st	X+, r19
    12b8:	30 e3       	ldi	r19, 0x30	; 48
    12ba:	2a 95       	dec	r18
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <__ftoa_engine+0x1e>
    12be:	08 95       	ret
    12c0:	9f 3f       	cpi	r25, 0xFF	; 255
    12c2:	30 f0       	brcs	.+12     	; 0x12d0 <__ftoa_engine+0x38>
    12c4:	80 38       	cpi	r24, 0x80	; 128
    12c6:	71 05       	cpc	r23, r1
    12c8:	61 05       	cpc	r22, r1
    12ca:	09 f0       	breq	.+2      	; 0x12ce <__ftoa_engine+0x36>
    12cc:	3c 5f       	subi	r19, 0xFC	; 252
    12ce:	3c 5f       	subi	r19, 0xFC	; 252
    12d0:	3d 93       	st	X+, r19
    12d2:	91 30       	cpi	r25, 0x01	; 1
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <__ftoa_engine+0x40>
    12d6:	80 68       	ori	r24, 0x80	; 128
    12d8:	91 1d       	adc	r25, r1
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	1f 93       	push	r17
    12e0:	0f 93       	push	r16
    12e2:	ff 92       	push	r15
    12e4:	ef 92       	push	r14
    12e6:	19 2f       	mov	r17, r25
    12e8:	98 7f       	andi	r25, 0xF8	; 248
    12ea:	96 95       	lsr	r25
    12ec:	e9 2f       	mov	r30, r25
    12ee:	96 95       	lsr	r25
    12f0:	96 95       	lsr	r25
    12f2:	e9 0f       	add	r30, r25
    12f4:	ff 27       	eor	r31, r31
    12f6:	ea 51       	subi	r30, 0x1A	; 26
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	99 27       	eor	r25, r25
    12fc:	33 27       	eor	r19, r19
    12fe:	ee 24       	eor	r14, r14
    1300:	ff 24       	eor	r15, r15
    1302:	a7 01       	movw	r20, r14
    1304:	e7 01       	movw	r28, r14
    1306:	05 90       	lpm	r0, Z+
    1308:	08 94       	sec
    130a:	07 94       	ror	r0
    130c:	28 f4       	brcc	.+10     	; 0x1318 <__ftoa_engine+0x80>
    130e:	36 0f       	add	r19, r22
    1310:	e7 1e       	adc	r14, r23
    1312:	f8 1e       	adc	r15, r24
    1314:	49 1f       	adc	r20, r25
    1316:	51 1d       	adc	r21, r1
    1318:	66 0f       	add	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	88 1f       	adc	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	06 94       	lsr	r0
    1322:	a1 f7       	brne	.-24     	; 0x130c <__ftoa_engine+0x74>
    1324:	05 90       	lpm	r0, Z+
    1326:	07 94       	ror	r0
    1328:	28 f4       	brcc	.+10     	; 0x1334 <__ftoa_engine+0x9c>
    132a:	e7 0e       	add	r14, r23
    132c:	f8 1e       	adc	r15, r24
    132e:	49 1f       	adc	r20, r25
    1330:	56 1f       	adc	r21, r22
    1332:	c1 1d       	adc	r28, r1
    1334:	77 0f       	add	r23, r23
    1336:	88 1f       	adc	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	66 1f       	adc	r22, r22
    133c:	06 94       	lsr	r0
    133e:	a1 f7       	brne	.-24     	; 0x1328 <__ftoa_engine+0x90>
    1340:	05 90       	lpm	r0, Z+
    1342:	07 94       	ror	r0
    1344:	28 f4       	brcc	.+10     	; 0x1350 <__ftoa_engine+0xb8>
    1346:	f8 0e       	add	r15, r24
    1348:	49 1f       	adc	r20, r25
    134a:	56 1f       	adc	r21, r22
    134c:	c7 1f       	adc	r28, r23
    134e:	d1 1d       	adc	r29, r1
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	66 1f       	adc	r22, r22
    1356:	77 1f       	adc	r23, r23
    1358:	06 94       	lsr	r0
    135a:	a1 f7       	brne	.-24     	; 0x1344 <__ftoa_engine+0xac>
    135c:	05 90       	lpm	r0, Z+
    135e:	07 94       	ror	r0
    1360:	20 f4       	brcc	.+8      	; 0x136a <__ftoa_engine+0xd2>
    1362:	49 0f       	add	r20, r25
    1364:	56 1f       	adc	r21, r22
    1366:	c7 1f       	adc	r28, r23
    1368:	d8 1f       	adc	r29, r24
    136a:	99 0f       	add	r25, r25
    136c:	66 1f       	adc	r22, r22
    136e:	77 1f       	adc	r23, r23
    1370:	88 1f       	adc	r24, r24
    1372:	06 94       	lsr	r0
    1374:	a9 f7       	brne	.-22     	; 0x1360 <__ftoa_engine+0xc8>
    1376:	84 91       	lpm	r24, Z
    1378:	10 95       	com	r17
    137a:	17 70       	andi	r17, 0x07	; 7
    137c:	41 f0       	breq	.+16     	; 0x138e <__ftoa_engine+0xf6>
    137e:	d6 95       	lsr	r29
    1380:	c7 95       	ror	r28
    1382:	57 95       	ror	r21
    1384:	47 95       	ror	r20
    1386:	f7 94       	ror	r15
    1388:	e7 94       	ror	r14
    138a:	1a 95       	dec	r17
    138c:	c1 f7       	brne	.-16     	; 0x137e <__ftoa_engine+0xe6>
    138e:	ec e8       	ldi	r30, 0x8C	; 140
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	68 94       	set
    1394:	15 90       	lpm	r1, Z+
    1396:	15 91       	lpm	r17, Z+
    1398:	35 91       	lpm	r19, Z+
    139a:	65 91       	lpm	r22, Z+
    139c:	95 91       	lpm	r25, Z+
    139e:	05 90       	lpm	r0, Z+
    13a0:	7f e2       	ldi	r23, 0x2F	; 47
    13a2:	73 95       	inc	r23
    13a4:	e1 18       	sub	r14, r1
    13a6:	f1 0a       	sbc	r15, r17
    13a8:	43 0b       	sbc	r20, r19
    13aa:	56 0b       	sbc	r21, r22
    13ac:	c9 0b       	sbc	r28, r25
    13ae:	d0 09       	sbc	r29, r0
    13b0:	c0 f7       	brcc	.-16     	; 0x13a2 <__ftoa_engine+0x10a>
    13b2:	e1 0c       	add	r14, r1
    13b4:	f1 1e       	adc	r15, r17
    13b6:	43 1f       	adc	r20, r19
    13b8:	56 1f       	adc	r21, r22
    13ba:	c9 1f       	adc	r28, r25
    13bc:	d0 1d       	adc	r29, r0
    13be:	7e f4       	brtc	.+30     	; 0x13de <__ftoa_engine+0x146>
    13c0:	70 33       	cpi	r23, 0x30	; 48
    13c2:	11 f4       	brne	.+4      	; 0x13c8 <__ftoa_engine+0x130>
    13c4:	8a 95       	dec	r24
    13c6:	e6 cf       	rjmp	.-52     	; 0x1394 <__ftoa_engine+0xfc>
    13c8:	e8 94       	clt
    13ca:	01 50       	subi	r16, 0x01	; 1
    13cc:	30 f0       	brcs	.+12     	; 0x13da <__ftoa_engine+0x142>
    13ce:	08 0f       	add	r16, r24
    13d0:	0a f4       	brpl	.+2      	; 0x13d4 <__ftoa_engine+0x13c>
    13d2:	00 27       	eor	r16, r16
    13d4:	02 17       	cp	r16, r18
    13d6:	08 f4       	brcc	.+2      	; 0x13da <__ftoa_engine+0x142>
    13d8:	20 2f       	mov	r18, r16
    13da:	23 95       	inc	r18
    13dc:	02 2f       	mov	r16, r18
    13de:	7a 33       	cpi	r23, 0x3A	; 58
    13e0:	28 f0       	brcs	.+10     	; 0x13ec <__ftoa_engine+0x154>
    13e2:	79 e3       	ldi	r23, 0x39	; 57
    13e4:	7d 93       	st	X+, r23
    13e6:	2a 95       	dec	r18
    13e8:	e9 f7       	brne	.-6      	; 0x13e4 <__ftoa_engine+0x14c>
    13ea:	10 c0       	rjmp	.+32     	; 0x140c <__ftoa_engine+0x174>
    13ec:	7d 93       	st	X+, r23
    13ee:	2a 95       	dec	r18
    13f0:	89 f6       	brne	.-94     	; 0x1394 <__ftoa_engine+0xfc>
    13f2:	06 94       	lsr	r0
    13f4:	97 95       	ror	r25
    13f6:	67 95       	ror	r22
    13f8:	37 95       	ror	r19
    13fa:	17 95       	ror	r17
    13fc:	17 94       	ror	r1
    13fe:	e1 18       	sub	r14, r1
    1400:	f1 0a       	sbc	r15, r17
    1402:	43 0b       	sbc	r20, r19
    1404:	56 0b       	sbc	r21, r22
    1406:	c9 0b       	sbc	r28, r25
    1408:	d0 09       	sbc	r29, r0
    140a:	98 f0       	brcs	.+38     	; 0x1432 <__ftoa_engine+0x19a>
    140c:	23 95       	inc	r18
    140e:	7e 91       	ld	r23, -X
    1410:	73 95       	inc	r23
    1412:	7a 33       	cpi	r23, 0x3A	; 58
    1414:	08 f0       	brcs	.+2      	; 0x1418 <__ftoa_engine+0x180>
    1416:	70 e3       	ldi	r23, 0x30	; 48
    1418:	7c 93       	st	X, r23
    141a:	20 13       	cpse	r18, r16
    141c:	b8 f7       	brcc	.-18     	; 0x140c <__ftoa_engine+0x174>
    141e:	7e 91       	ld	r23, -X
    1420:	70 61       	ori	r23, 0x10	; 16
    1422:	7d 93       	st	X+, r23
    1424:	30 f0       	brcs	.+12     	; 0x1432 <__ftoa_engine+0x19a>
    1426:	83 95       	inc	r24
    1428:	71 e3       	ldi	r23, 0x31	; 49
    142a:	7d 93       	st	X+, r23
    142c:	70 e3       	ldi	r23, 0x30	; 48
    142e:	2a 95       	dec	r18
    1430:	e1 f7       	brne	.-8      	; 0x142a <__ftoa_engine+0x192>
    1432:	11 24       	eor	r1, r1
    1434:	ef 90       	pop	r14
    1436:	ff 90       	pop	r15
    1438:	0f 91       	pop	r16
    143a:	1f 91       	pop	r17
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	99 27       	eor	r25, r25
    1442:	87 fd       	sbrc	r24, 7
    1444:	90 95       	com	r25
    1446:	08 95       	ret

00001448 <_exit>:
    1448:	f8 94       	cli

0000144a <__stop_program>:
    144a:	ff cf       	rjmp	.-2      	; 0x144a <__stop_program>
