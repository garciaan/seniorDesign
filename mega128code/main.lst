
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001afe  00001b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080011c  0080011c  00001bae  2**0
                  ALLOC
  3 .stab         00002874  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001517  00000000  00000000  00004424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000593b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000594c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000020  00000000  00000000  00005988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000ba9  00000000  00000000  000059a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008ab  00000000  00000000  00006551  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000124  00000000  00000000  00006dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000164  00000000  00000000  00006f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000426  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000006d1  00000000  00000000  000074aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  00007b7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__ctors_end>
       4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       8:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      10:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      14:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      18:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      1c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      20:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      24:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      28:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      2c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      30:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      34:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      3c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      40:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      44:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      48:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      4c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      50:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      54:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      58:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      5c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      60:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      64:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      68:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      6c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      70:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      74:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      78:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      7c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      80:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      84:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      88:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__trampolines_end>:
      ba:	00 40       	sbci	r16, 0x00	; 0
      bc:	7a 10       	cpse	r7, r10
      be:	f3 5a       	subi	r31, 0xA3	; 163
      c0:	00 a0       	ldd	r0, Z+32	; 0x20
      c2:	72 4e       	sbci	r23, 0xE2	; 226
      c4:	18 09       	sbc	r17, r8
      c6:	00 10       	cpse	r0, r0
      c8:	a5 d4       	rcall	.+2378   	; 0xa14 <turn+0x25c>
      ca:	e8 00       	.word	0x00e8	; ????
      cc:	00 e8       	ldi	r16, 0x80	; 128
      ce:	76 48       	sbci	r23, 0x86	; 134
      d0:	17 00       	.word	0x0017	; ????
      d2:	00 e4       	ldi	r16, 0x40	; 64
      d4:	0b 54       	subi	r16, 0x4B	; 75
      d6:	02 00       	.word	0x0002	; ????
      d8:	00 ca       	rjmp	.-3072   	; 0xfffff4da <__eeprom_end+0xff7ef4da>
      da:	9a 3b       	cpi	r25, 0xBA	; 186
      dc:	00 00       	nop
      de:	00 e1       	ldi	r16, 0x10	; 16
      e0:	f5 05       	cpc	r31, r5
      e2:	00 00       	nop
      e4:	80 96       	adiw	r24, 0x20	; 32
      e6:	98 00       	.word	0x0098	; ????
      e8:	00 00       	nop
      ea:	40 42       	sbci	r20, 0x20	; 32
      ec:	0f 00       	.word	0x000f	; ????
      ee:	00 00       	nop
      f0:	a0 86       	std	Z+8, r10	; 0x08
      f2:	01 00       	.word	0x0001	; ????
      f4:	00 00       	nop
      f6:	10 27       	eor	r17, r16
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	e8 03       	fmulsu	r22, r16
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	64 00       	.word	0x0064	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	0a 00       	.word	0x000a	; ????
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	00 00       	nop
     114:	2c 76       	andi	r18, 0x6C	; 108
     116:	d8 88       	ldd	r13, Y+16	; 0x10
     118:	dc 67       	ori	r29, 0x7C	; 124
     11a:	4f 08       	sbc	r4, r15
     11c:	23 df       	rcall	.-442    	; 0xffffff64 <__eeprom_end+0xff7eff64>
     11e:	c1 df       	rcall	.-126    	; 0xa2 <__SREG__+0x63>
     120:	ae 59       	subi	r26, 0x9E	; 158
     122:	e1 b1       	in	r30, 0x01	; 1
     124:	b7 96       	adiw	r30, 0x27	; 39
     126:	e5 e3       	ldi	r30, 0x35	; 53
     128:	e4 53       	subi	r30, 0x34	; 52
     12a:	c6 3a       	cpi	r28, 0xA6	; 166
     12c:	e6 51       	subi	r30, 0x16	; 22
     12e:	99 76       	andi	r25, 0x69	; 105
     130:	96 e8       	ldi	r25, 0x86	; 134
     132:	e6 c2       	rjmp	.+1484   	; 0x700 <clear_display+0x32>
     134:	84 26       	eor	r8, r20
     136:	eb 89       	ldd	r30, Y+19	; 0x13
     138:	8c 9b       	sbis	0x11, 4	; 17
     13a:	62 ed       	ldi	r22, 0xD2	; 210
     13c:	40 7c       	andi	r20, 0xC0	; 192
     13e:	6f fc       	.word	0xfc6f	; ????
     140:	ef bc       	out	0x2f, r14	; 47
     142:	9c 9f       	mul	r25, r28
     144:	40 f2       	brcs	.-112    	; 0xd6 <__trampolines_end+0x1c>
     146:	ba a5       	ldd	r27, Y+42	; 0x2a
     148:	6f a5       	ldd	r22, Y+47	; 0x2f
     14a:	f4 90       	lpm	r15, Z
     14c:	05 5a       	subi	r16, 0xA5	; 165
     14e:	2a f7       	brpl	.-54     	; 0x11a <__trampolines_end+0x60>
     150:	5c 93       	st	X, r21
     152:	6b 6c       	ori	r22, 0xCB	; 203
     154:	f9 67       	ori	r31, 0x79	; 121
     156:	6d c1       	rjmp	.+730    	; 0x432 <move+0x6e>
     158:	1b fc       	.word	0xfc1b	; ????
     15a:	e0 e4       	ldi	r30, 0x40	; 64
     15c:	0d 47       	sbci	r16, 0x7D	; 125
     15e:	fe f5       	brtc	.+126    	; 0x1de <__do_clear_bss+0x4>
     160:	20 e6       	ldi	r18, 0x60	; 96
     162:	b5 00       	.word	0x00b5	; ????
     164:	d0 ed       	ldi	r29, 0xD0	; 208
     166:	90 2e       	mov	r9, r16
     168:	03 00       	.word	0x0003	; ????
     16a:	94 35       	cpi	r25, 0x54	; 84
     16c:	77 05       	cpc	r23, r7
     16e:	00 80       	ld	r0, Z
     170:	84 1e       	adc	r8, r20
     172:	08 00       	.word	0x0008	; ????
     174:	00 20       	and	r0, r0
     176:	4e 0a       	sbc	r4, r30
     178:	00 00       	nop
     17a:	00 c8       	rjmp	.-4096   	; 0xfffff17c <__eeprom_end+0xff7ef17c>
     17c:	0c 33       	cpi	r16, 0x3C	; 60
     17e:	33 33       	cpi	r19, 0x33	; 51
     180:	33 0f       	add	r19, r19
     182:	98 6e       	ori	r25, 0xE8	; 232
     184:	12 83       	std	Z+2, r17	; 0x02
     186:	11 41       	sbci	r17, 0x11	; 17
     188:	ef 8d       	ldd	r30, Y+31	; 0x1f
     18a:	21 14       	cp	r2, r1
     18c:	89 3b       	cpi	r24, 0xB9	; 185
     18e:	e6 55       	subi	r30, 0x56	; 86
     190:	16 cf       	rjmp	.-468    	; 0xffffffbe <__eeprom_end+0xff7effbe>
     192:	fe e6       	ldi	r31, 0x6E	; 110
     194:	db 18       	sub	r13, r11
     196:	d1 84       	ldd	r13, Z+9	; 0x09
     198:	4b 38       	cpi	r20, 0x8B	; 139
     19a:	1b f7       	brvc	.-58     	; 0x162 <__trampolines_end+0xa8>
     19c:	7c 1d       	adc	r23, r12
     19e:	90 1d       	adc	r25, r0
     1a0:	a4 bb       	out	0x14, r26	; 20
     1a2:	e4 24       	eor	r14, r4
     1a4:	20 32       	cpi	r18, 0x20	; 32
     1a6:	84 72       	andi	r24, 0x24	; 36
     1a8:	5e 22       	and	r5, r30
     1aa:	81 00       	.word	0x0081	; ????
     1ac:	c9 f1       	breq	.+114    	; 0x220 <init_HMC5883L+0x24>
     1ae:	24 ec       	ldi	r18, 0xC4	; 196
     1b0:	a1 e5       	ldi	r26, 0x51	; 81
     1b2:	3d 27       	eor	r19, r29

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d0 e1       	ldi	r29, 0x10	; 16
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	11 e0       	ldi	r17, 0x01	; 1
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	ee ef       	ldi	r30, 0xFE	; 254
     1c8:	fa e1       	ldi	r31, 0x1A	; 26
     1ca:	00 e0       	ldi	r16, 0x00	; 0
     1cc:	0b bf       	out	0x3b, r16	; 59
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__do_copy_data+0x14>
     1d0:	07 90       	elpm	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	ac 31       	cpi	r26, 0x1C	; 28
     1d6:	b1 07       	cpc	r27, r17
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <__do_copy_data+0x10>

000001da <__do_clear_bss>:
     1da:	21 e0       	ldi	r18, 0x01	; 1
     1dc:	ac e1       	ldi	r26, 0x1C	; 28
     1de:	b1 e0       	ldi	r27, 0x01	; 1
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <.do_clear_bss_start>

000001e2 <.do_clear_bss_loop>:
     1e2:	1d 92       	st	X+, r1

000001e4 <.do_clear_bss_start>:
     1e4:	a6 32       	cpi	r26, 0x26	; 38
     1e6:	b2 07       	cpc	r27, r18
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <.do_clear_bss_loop>
     1ea:	0e 94 56 07 	call	0xeac	; 0xeac <main>
     1ee:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <_exit>

000001f2 <__bad_interrupt>:
     1f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f6 <path1>:
     1f6:	08 95       	ret

000001f8 <path2>:
     1f8:	08 95       	ret

000001fa <path3>:
    //Complete (back in some position as start)
}
void path2(){
    //Implement if necessary
}
void path3(){
     1fa:	08 95       	ret

000001fc <init_HMC5883L>:
        }
    }
}
void init_HMC5883L(void){

    i2c_start(HMC5883L_WRITE);
     1fc:	8c e3       	ldi	r24, 0x3C	; 60
     1fe:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <i2c_start>
    i2c_write(0x00); // set pointer to CRA
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	0e 94 1c 06 	call	0xc38	; 0xc38 <i2c_write>
    i2c_write(0x70); // write 0x70 to CRA
     208:	80 e7       	ldi	r24, 0x70	; 112
     20a:	0e 94 1c 06 	call	0xc38	; 0xc38 <i2c_write>
    i2c_stop();
     20e:	0e 94 06 07 	call	0xe0c	; 0xe0c <i2c_stop>

    i2c_start(HMC5883L_WRITE);
     212:	8c e3       	ldi	r24, 0x3C	; 60
     214:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <i2c_start>
    i2c_write(0x01); // set pointer to CRB
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	0e 94 1c 06 	call	0xc38	; 0xc38 <i2c_write>
    i2c_write(0xA0);
     21e:	80 ea       	ldi	r24, 0xA0	; 160
     220:	0e 94 1c 06 	call	0xc38	; 0xc38 <i2c_write>
    i2c_stop();
     224:	0e 94 06 07 	call	0xe0c	; 0xe0c <i2c_stop>

    i2c_start(HMC5883L_WRITE);
     228:	8c e3       	ldi	r24, 0x3C	; 60
     22a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <i2c_start>
    i2c_write(0x02); // set pointer to measurement mode
     22e:	82 e0       	ldi	r24, 0x02	; 2
     230:	0e 94 1c 06 	call	0xc38	; 0xc38 <i2c_write>
    i2c_write(0x00); // continous measurement
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	0e 94 1c 06 	call	0xc38	; 0xc38 <i2c_write>
    i2c_stop();
     23a:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <i2c_stop>

0000023e <getHeading>:
}
float getHeading(void){
     23e:	cf 92       	push	r12
     240:	df 92       	push	r13
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15

    i2c_start(HMC5883L_WRITE);
     246:	8c e3       	ldi	r24, 0x3C	; 60
     248:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <i2c_start>
    i2c_write(0x03); // set pointer to X axis MSB
     24c:	83 e0       	ldi	r24, 0x03	; 3
     24e:	0e 94 1c 06 	call	0xc38	; 0xc38 <i2c_write>
    i2c_stop();
     252:	0e 94 06 07 	call	0xe0c	; 0xe0c <i2c_stop>

    i2c_start(HMC5883L_READ);
     256:	8d e3       	ldi	r24, 0x3D	; 61
     258:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <i2c_start>

    raw_x = ((uint8_t)i2c_read_ack())<<8;
     25c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <i2c_read_ack>
     260:	10 92 24 01 	sts	0x0124, r1
     264:	80 93 25 01 	sts	0x0125, r24
    raw_x |= i2c_read_ack();
     268:	0e 94 2d 06 	call	0xc5a	; 0xc5a <i2c_read_ack>
     26c:	20 91 24 01 	lds	r18, 0x0124
     270:	30 91 25 01 	lds	r19, 0x0125
     274:	28 2b       	or	r18, r24
     276:	30 93 25 01 	sts	0x0125, r19
     27a:	20 93 24 01 	sts	0x0124, r18

    raw_z = ((uint8_t)i2c_read_ack())<<8;
     27e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <i2c_read_ack>
     282:	10 92 20 01 	sts	0x0120, r1
     286:	80 93 21 01 	sts	0x0121, r24
    raw_z |= i2c_read_ack();
     28a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <i2c_read_ack>
     28e:	20 91 20 01 	lds	r18, 0x0120
     292:	30 91 21 01 	lds	r19, 0x0121
     296:	28 2b       	or	r18, r24
     298:	30 93 21 01 	sts	0x0121, r19
     29c:	20 93 20 01 	sts	0x0120, r18

    raw_y = ((uint8_t)i2c_read_ack())<<8;
     2a0:	0e 94 2d 06 	call	0xc5a	; 0xc5a <i2c_read_ack>
     2a4:	10 92 22 01 	sts	0x0122, r1
     2a8:	80 93 23 01 	sts	0x0123, r24
    raw_y |= i2c_read_nack();
     2ac:	0e 94 37 06 	call	0xc6e	; 0xc6e <i2c_read_nack>
     2b0:	20 91 22 01 	lds	r18, 0x0122
     2b4:	30 91 23 01 	lds	r19, 0x0123
     2b8:	28 2b       	or	r18, r24
     2ba:	30 93 23 01 	sts	0x0123, r19
     2be:	20 93 22 01 	sts	0x0122, r18

    i2c_stop();
     2c2:	0e 94 06 07 	call	0xe0c	; 0xe0c <i2c_stop>

    headingDegrees = atan2((double)raw_y,(double)raw_x) * 180 / 3.141592654 + 180;
     2c6:	60 91 24 01 	lds	r22, 0x0124
     2ca:	70 91 25 01 	lds	r23, 0x0125
     2ce:	07 2e       	mov	r0, r23
     2d0:	00 0c       	add	r0, r0
     2d2:	88 0b       	sbc	r24, r24
     2d4:	99 0b       	sbc	r25, r25
     2d6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__floatsisf>
     2da:	6b 01       	movw	r12, r22
     2dc:	7c 01       	movw	r14, r24
     2de:	60 91 22 01 	lds	r22, 0x0122
     2e2:	70 91 23 01 	lds	r23, 0x0123
     2e6:	07 2e       	mov	r0, r23
     2e8:	00 0c       	add	r0, r0
     2ea:	88 0b       	sbc	r24, r24
     2ec:	99 0b       	sbc	r25, r25
     2ee:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__floatsisf>
     2f2:	a7 01       	movw	r20, r14
     2f4:	96 01       	movw	r18, r12
     2f6:	0e 94 44 08 	call	0x1088	; 0x1088 <atan2>
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	44 e3       	ldi	r20, 0x34	; 52
     300:	53 e4       	ldi	r21, 0x43	; 67
     302:	0e 94 36 0a 	call	0x146c	; 0x146c <__mulsf3>
     306:	2b ed       	ldi	r18, 0xDB	; 219
     308:	3f e0       	ldi	r19, 0x0F	; 15
     30a:	49 e4       	ldi	r20, 0x49	; 73
     30c:	50 e4       	ldi	r21, 0x40	; 64
     30e:	0e 94 a8 08 	call	0x1150	; 0x1150 <__divsf3>
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	44 e3       	ldi	r20, 0x34	; 52
     318:	53 e4       	ldi	r21, 0x43	; 67
     31a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__addsf3>
     31e:	60 93 1c 01 	sts	0x011C, r22
     322:	70 93 1d 01 	sts	0x011D, r23
     326:	80 93 1e 01 	sts	0x011E, r24
     32a:	90 93 1f 01 	sts	0x011F, r25

    return headingDegrees;
}
     32e:	ff 90       	pop	r15
     330:	ef 90       	pop	r14
     332:	df 90       	pop	r13
     334:	cf 90       	pop	r12
     336:	08 95       	ret

00000338 <init_esc>:

void init_esc(){
     338:	83 e0       	ldi	r24, 0x03	; 3
     33a:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
     33c:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     33e:	ef e6       	ldi	r30, 0x6F	; 111
     340:	f7 e1       	ldi	r31, 0x17	; 23
     342:	31 97       	sbiw	r30, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <init_esc+0xa>
     346:	00 c0       	rjmp	.+0      	; 0x348 <init_esc+0x10>
     348:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
     34a:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34c:	ff ef       	ldi	r31, 0xFF	; 255
     34e:	23 ed       	ldi	r18, 0xD3	; 211
     350:	30 e3       	ldi	r19, 0x30	; 48
     352:	f1 50       	subi	r31, 0x01	; 1
     354:	20 40       	sbci	r18, 0x00	; 0
     356:	30 40       	sbci	r19, 0x00	; 0
     358:	e1 f7       	brne	.-8      	; 0x352 <init_esc+0x1a>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <init_esc+0x24>
     35c:	00 00       	nop
     35e:	01 97       	sbiw	r24, 0x01	; 1
    return headingDegrees;
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
     360:	69 f7       	brne	.-38     	; 0x33c <init_esc+0x4>
        PORTB |= (1 << 4);
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
        _delay_ms(1000);
    }
}
     362:	08 95       	ret

00000364 <set_16bitPWM1>:

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
     364:	8f b5       	in	r24, 0x2f	; 47
     366:	80 68       	ori	r24, 0x80	; 128
     368:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
     36a:	8f b5       	in	r24, 0x2f	; 47
     36c:	80 62       	ori	r24, 0x20	; 32
     36e:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
     370:	8f b5       	in	r24, 0x2f	; 47
     372:	88 60       	ori	r24, 0x08	; 8
     374:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
     376:	8f b5       	in	r24, 0x2f	; 47
     378:	82 60       	ori	r24, 0x02	; 2
     37a:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
     37c:	8e b5       	in	r24, 0x2e	; 46
     37e:	88 61       	ori	r24, 0x18	; 24
     380:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
     382:	8e b5       	in	r24, 0x2e	; 46
     384:	82 60       	ori	r24, 0x02	; 2
     386:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     388:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     38a:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	3d bd       	out	0x2d, r19	; 45
     392:	2c bd       	out	0x2c, r18	; 44
    sei();
     394:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     396:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
     398:	8f ef       	ldi	r24, 0xFF	; 255
     39a:	9f ef       	ldi	r25, 0xFF	; 255
     39c:	97 bd       	out	0x27, r25	; 39
     39e:	86 bd       	out	0x26, r24	; 38
     3a0:	2f ef       	ldi	r18, 0xFF	; 255
     3a2:	81 ee       	ldi	r24, 0xE1	; 225
     3a4:	94 e0       	ldi	r25, 0x04	; 4
     3a6:	21 50       	subi	r18, 0x01	; 1
     3a8:	80 40       	sbci	r24, 0x00	; 0
     3aa:	90 40       	sbci	r25, 0x00	; 0
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <set_16bitPWM1+0x42>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <set_16bitPWM1+0x4c>
     3b0:	00 00       	nop
     3b2:	08 95       	ret

000003b4 <TIM16_WriteTCNT1>:
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
     3b4:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     3b6:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     3b8:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     3ba:	3d bd       	out	0x2d, r19	; 45
     3bc:	2c bd       	out	0x2c, r18	; 44
    sei();
     3be:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     3c0:	9f bf       	out	0x3f, r25	; 63
     3c2:	08 95       	ret

000003c4 <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
     3c4:	4f 92       	push	r4
     3c6:	5f 92       	push	r5
     3c8:	6f 92       	push	r6
     3ca:	7f 92       	push	r7
     3cc:	8f 92       	push	r8
     3ce:	9f 92       	push	r9
     3d0:	af 92       	push	r10
     3d2:	bf 92       	push	r11
     3d4:	cf 92       	push	r12
     3d6:	df 92       	push	r13
     3d8:	ef 92       	push	r14
     3da:	ff 92       	push	r15
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	2b 01       	movw	r4, r22
     3e6:	3c 01       	movw	r6, r24
     3e8:	49 01       	movw	r8, r18
     3ea:	5a 01       	movw	r10, r20
     3ec:	67 01       	movw	r12, r14
     3ee:	78 01       	movw	r14, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 ef       	ldi	r20, 0xF0	; 240
     3f6:	51 e4       	ldi	r21, 0x41	; 65
     3f8:	0e 94 a3 08 	call	0x1146	; 0x1146 <__cmpsf2>
     3fc:	87 fd       	sbrc	r24, 7
     3fe:	64 c0       	rjmp	.+200    	; 0x4c8 <move+0x104>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	4c e8       	ldi	r20, 0x8C	; 140
     406:	52 e4       	ldi	r21, 0x42	; 66
     408:	c3 01       	movw	r24, r6
     40a:	b2 01       	movw	r22, r4
     40c:	0e 94 29 0a 	call	0x1452	; 0x1452 <__gesf2>
     410:	18 16       	cp	r1, r24
     412:	0c f0       	brlt	.+2      	; 0x416 <move+0x52>
     414:	67 c0       	rjmp	.+206    	; 0x4e4 <move+0x120>
     416:	08 ef       	ldi	r16, 0xF8	; 248
     418:	1c e0       	ldi	r17, 0x0C	; 12
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	40 ef       	ldi	r20, 0xF0	; 240
     420:	51 e4       	ldi	r21, 0x41	; 65
     422:	c5 01       	movw	r24, r10
     424:	b4 01       	movw	r22, r8
     426:	0e 94 a3 08 	call	0x1146	; 0x1146 <__cmpsf2>
     42a:	87 fd       	sbrc	r24, 7
     42c:	58 c0       	rjmp	.+176    	; 0x4de <move+0x11a>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	4c e8       	ldi	r20, 0x8C	; 140
     434:	52 e4       	ldi	r21, 0x42	; 66
     436:	c5 01       	movw	r24, r10
     438:	b4 01       	movw	r22, r8
     43a:	0e 94 29 0a 	call	0x1452	; 0x1452 <__gesf2>
     43e:	18 16       	cp	r1, r24
     440:	0c f0       	brlt	.+2      	; 0x444 <move+0x80>
     442:	6d c0       	rjmp	.+218    	; 0x51e <move+0x15a>
     444:	c8 ef       	ldi	r28, 0xF8	; 248
     446:	dc e0       	ldi	r29, 0x0C	; 12
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + SATURATE_DIFFERENCE)){
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	40 ef       	ldi	r20, 0xF0	; 240
     44e:	51 e4       	ldi	r21, 0x41	; 65
     450:	c7 01       	movw	r24, r14
     452:	b6 01       	movw	r22, r12
     454:	0e 94 a3 08 	call	0x1146	; 0x1146 <__cmpsf2>
     458:	87 fd       	sbrc	r24, 7
     45a:	39 c0       	rjmp	.+114    	; 0x4ce <move+0x10a>
        z = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (z > (MAX_INPUT - SATURATE_DIFFERENCE)){
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	4c e8       	ldi	r20, 0x8C	; 140
     462:	52 e4       	ldi	r21, 0x42	; 66
     464:	c7 01       	movw	r24, r14
     466:	b6 01       	movw	r22, r12
     468:	0e 94 29 0a 	call	0x1452	; 0x1452 <__gesf2>
     46c:	18 16       	cp	r1, r24
     46e:	0c f0       	brlt	.+2      	; 0x472 <move+0xae>
     470:	4b c0       	rjmp	.+150    	; 0x508 <move+0x144>
     472:	83 e3       	ldi	r24, 0x33	; 51
     474:	c8 2e       	mov	r12, r24
     476:	dc 2c       	mov	r13, r12
     478:	ec 2c       	mov	r14, r12
     47a:	8f e3       	ldi	r24, 0x3F	; 63
     47c:	f8 2e       	mov	r15, r24

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     47e:	66 b5       	in	r22, 0x26	; 38
     480:	77 b5       	in	r23, 0x27	; 39
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__floatunsisf>
     48a:	a7 01       	movw	r20, r14
     48c:	96 01       	movw	r18, r12
     48e:	0e 94 36 0a 	call	0x146c	; 0x146c <__mulsf3>
     492:	0e 94 21 09 	call	0x1242	; 0x1242 <__fixunssfsi>
    OCR1A = left_speed;
     496:	1b bd       	out	0x2b, r17	; 43
     498:	0a bd       	out	0x2a, r16	; 42
    OCR1B = right_speed;
     49a:	d9 bd       	out	0x29, r29	; 41
     49c:	c8 bd       	out	0x28, r28	; 40
    OCR1C = z_speed;
     49e:	70 93 79 00 	sts	0x0079, r23
     4a2:	60 93 78 00 	sts	0x0078, r22
    //string2lcd((unsigned char *)utoa(left_speed,(char *)buffer,10));
    //home_line2();
    //string2lcd((unsigned char *)utoa(right_speed,(char *)buffer,10));
    

}
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	bf 90       	pop	r11
     4b8:	af 90       	pop	r10
     4ba:	9f 90       	pop	r9
     4bc:	8f 90       	pop	r8
     4be:	7f 90       	pop	r7
     4c0:	6f 90       	pop	r6
     4c2:	5f 90       	pop	r5
     4c4:	4f 90       	pop	r4
     4c6:	08 95       	ret
     4c8:	08 e7       	ldi	r16, 0x78	; 120
     4ca:	1a e0       	ldi	r17, 0x0A	; 10
     4cc:	a6 cf       	rjmp	.-180    	; 0x41a <move+0x56>
     4ce:	9a e9       	ldi	r25, 0x9A	; 154
     4d0:	c9 2e       	mov	r12, r25
     4d2:	99 e9       	ldi	r25, 0x99	; 153
     4d4:	d9 2e       	mov	r13, r25
     4d6:	ed 2c       	mov	r14, r13
     4d8:	9e e3       	ldi	r25, 0x3E	; 62
     4da:	f9 2e       	mov	r15, r25
     4dc:	d0 cf       	rjmp	.-96     	; 0x47e <move+0xba>
     4de:	c8 e7       	ldi	r28, 0x78	; 120
     4e0:	da e0       	ldi	r29, 0x0A	; 10
     4e2:	b2 cf       	rjmp	.-156    	; 0x448 <move+0x84>
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	40 e8       	ldi	r20, 0x80	; 128
     4ea:	51 e4       	ldi	r21, 0x41	; 65
     4ec:	c3 01       	movw	r24, r6
     4ee:	b2 01       	movw	r22, r4
     4f0:	0e 94 36 0a 	call	0x146c	; 0x146c <__mulsf3>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e8       	ldi	r19, 0x80	; 128
     4f8:	49 e0       	ldi	r20, 0x09	; 9
     4fa:	55 e4       	ldi	r21, 0x45	; 69
     4fc:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__addsf3>
     500:	0e 94 21 09 	call	0x1242	; 0x1242 <__fixunssfsi>
     504:	8b 01       	movw	r16, r22
     506:	89 cf       	rjmp	.-238    	; 0x41a <move+0x56>
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	48 ec       	ldi	r20, 0xC8	; 200
     50e:	52 e4       	ldi	r21, 0x42	; 66
     510:	c7 01       	movw	r24, r14
     512:	b6 01       	movw	r22, r12
     514:	0e 94 a8 08 	call	0x1150	; 0x1150 <__divsf3>
     518:	6b 01       	movw	r12, r22
     51a:	7c 01       	movw	r14, r24
     51c:	b0 cf       	rjmp	.-160    	; 0x47e <move+0xba>
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	40 e8       	ldi	r20, 0x80	; 128
     524:	51 e4       	ldi	r21, 0x41	; 65
     526:	c5 01       	movw	r24, r10
     528:	b4 01       	movw	r22, r8
     52a:	0e 94 36 0a 	call	0x146c	; 0x146c <__mulsf3>
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e8       	ldi	r19, 0x80	; 128
     532:	49 e0       	ldi	r20, 0x09	; 9
     534:	55 e4       	ldi	r21, 0x45	; 69
     536:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__addsf3>
     53a:	0e 94 21 09 	call	0x1242	; 0x1242 <__fixunssfsi>
     53e:	eb 01       	movw	r28, r22
     540:	83 cf       	rjmp	.-250    	; 0x448 <move+0x84>

00000542 <USART_Init>:


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     542:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
     546:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     54a:	88 e1       	ldi	r24, 0x18	; 24
     54c:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
     550:	8c e0       	ldi	r24, 0x0C	; 12
     552:	80 93 9d 00 	sts	0x009D, r24
     556:	2f ef       	ldi	r18, 0xFF	; 255
     558:	81 ee       	ldi	r24, 0xE1	; 225
     55a:	94 e0       	ldi	r25, 0x04	; 4
     55c:	21 50       	subi	r18, 0x01	; 1
     55e:	80 40       	sbci	r24, 0x00	; 0
     560:	90 40       	sbci	r25, 0x00	; 0
     562:	e1 f7       	brne	.-8      	; 0x55c <USART_Init+0x1a>
     564:	00 c0       	rjmp	.+0      	; 0x566 <USART_Init+0x24>
     566:	00 00       	nop
     568:	08 95       	ret

0000056a <USART_Transmit>:
    _delay_ms(100);
}
void USART_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     56a:	90 91 9b 00 	lds	r25, 0x009B
     56e:	95 ff       	sbrs	r25, 5
     570:	fc cf       	rjmp	.-8      	; 0x56a <USART_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     572:	80 93 9c 00 	sts	0x009C, r24
     576:	08 95       	ret

00000578 <USART_send_string>:
}

void USART_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     578:	fc 01       	movw	r30, r24
     57a:	20 81       	ld	r18, Z
     57c:	22 23       	and	r18, r18
     57e:	51 f0       	breq	.+20     	; 0x594 <USART_send_string+0x1c>
     580:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
    _delay_ms(100);
}
void USART_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     582:	90 91 9b 00 	lds	r25, 0x009B
     586:	95 ff       	sbrs	r25, 5
     588:	fc cf       	rjmp	.-8      	; 0x582 <USART_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     58a:	20 93 9c 00 	sts	0x009C, r18
}

void USART_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     58e:	21 91       	ld	r18, Z+
     590:	21 11       	cpse	r18, r1
     592:	f7 cf       	rjmp	.-18     	; 0x582 <USART_send_string+0xa>
     594:	08 95       	ret

00000596 <USART_Receive>:
        USART_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART_Receive(void){
     596:	80 e2       	ldi	r24, 0x20	; 32
     598:	9e e4       	ldi	r25, 0x4E	; 78
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <USART_Receive+0xa>
     59c:	01 97       	sbiw	r24, 0x01	; 1
    do {
        if((UCSR1A & (1<<RXC1))){
            /* Get and return received data from buffer */ 
            return UDR1;
        }
    } while (--timeout);
     59e:	39 f0       	breq	.+14     	; 0x5ae <USART_Receive+0x18>

unsigned char USART_Receive(void){
    uint16_t timeout = 20000;
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR1A & (1<<RXC1))){
     5a0:	20 91 9b 00 	lds	r18, 0x009B
     5a4:	27 ff       	sbrs	r18, 7
     5a6:	fa cf       	rjmp	.-12     	; 0x59c <USART_Receive+0x6>
            /* Get and return received data from buffer */ 
            return UDR1;
     5a8:	80 91 9c 00 	lds	r24, 0x009C
     5ac:	08 95       	ret
        }
    } while (--timeout);
    return -1;
     5ae:	8f ef       	ldi	r24, 0xFF	; 255
}
     5b0:	08 95       	ret

000005b2 <USART_Receive_String>:

void USART_Receive_String(unsigned char *str){
     5b2:	dc 01       	movw	r26, r24
     5b4:	fc 01       	movw	r30, r24
     5b6:	ac 01       	movw	r20, r24
     5b8:	4c 5f       	subi	r20, 0xFC	; 252
     5ba:	5f 4f       	sbci	r21, 0xFF	; 255
    int i = 0;
    char c;

    while ((c = USART_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == -1){
            str[0] = 50;
     5bc:	82 e3       	ldi	r24, 0x32	; 50
        if((UCSR1A & (1<<RXC1))){
            /* Get and return received data from buffer */ 
            return UDR1;
        }
    } while (--timeout);
    return -1;
     5be:	20 e2       	ldi	r18, 0x20	; 32
     5c0:	3e e4       	ldi	r19, 0x4E	; 78
     5c2:	03 c0       	rjmp	.+6      	; 0x5ca <USART_Receive_String+0x18>
     5c4:	21 50       	subi	r18, 0x01	; 1
     5c6:	31 09       	sbc	r19, r1
    do {
        if((UCSR1A & (1<<RXC1))){
            /* Get and return received data from buffer */ 
            return UDR1;
        }
    } while (--timeout);
     5c8:	89 f0       	breq	.+34     	; 0x5ec <USART_Receive_String+0x3a>

unsigned char USART_Receive(void){
    uint16_t timeout = 20000;
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR1A & (1<<RXC1))){
     5ca:	90 91 9b 00 	lds	r25, 0x009B
     5ce:	97 ff       	sbrs	r25, 7
     5d0:	f9 cf       	rjmp	.-14     	; 0x5c4 <USART_Receive_String+0x12>
            /* Get and return received data from buffer */ 
            return UDR1;
     5d2:	90 91 9c 00 	lds	r25, 0x009C

void USART_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     5d6:	9e 37       	cpi	r25, 0x7E	; 126
     5d8:	91 f0       	breq	.+36     	; 0x5fe <USART_Receive_String+0x4c>
        if (c == -1){
     5da:	9f 3f       	cpi	r25, 0xFF	; 255
     5dc:	41 f0       	breq	.+16     	; 0x5ee <USART_Receive_String+0x3c>
            str[0] = 50;
            str[1] = 50;
            str[2] = 50;
        }
        str[i] = c;
     5de:	91 93       	st	Z+, r25
        //char2lcd(c);
        //string2lcd(str);
        ++i;
        if (i >= MAX_STRING_SIZE){
     5e0:	e4 17       	cp	r30, r20
     5e2:	f5 07       	cpc	r31, r21
     5e4:	61 f7       	brne	.-40     	; 0x5be <USART_Receive_String+0xc>
            str[MAX_STRING_SIZE - 1] = '\0';
     5e6:	13 96       	adiw	r26, 0x03	; 3
     5e8:	1c 92       	st	X, r1

            return;
     5ea:	08 95       	ret
        if((UCSR1A & (1<<RXC1))){
            /* Get and return received data from buffer */ 
            return UDR1;
        }
    } while (--timeout);
    return -1;
     5ec:	9f ef       	ldi	r25, 0xFF	; 255
    int i = 0;
    char c;

    while ((c = USART_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == -1){
            str[0] = 50;
     5ee:	8c 93       	st	X, r24
            str[1] = 50;
     5f0:	11 96       	adiw	r26, 0x01	; 1
     5f2:	8c 93       	st	X, r24
     5f4:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
     5f6:	12 96       	adiw	r26, 0x02	; 2
     5f8:	8c 93       	st	X, r24
     5fa:	12 97       	sbiw	r26, 0x02	; 2
     5fc:	f0 cf       	rjmp	.-32     	; 0x5de <USART_Receive_String+0x2c>
     5fe:	08 95       	ret

00000600 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     600:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
     604:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     606:	88 e1       	ldi	r24, 0x18	; 24
     608:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 1stop bit */ 
    UCSR0C = (3<<UCSZ00);
     60a:	86 e0       	ldi	r24, 0x06	; 6
     60c:	80 93 95 00 	sts	0x0095, r24
     610:	2f ef       	ldi	r18, 0xFF	; 255
     612:	81 ee       	ldi	r24, 0xE1	; 225
     614:	94 e0       	ldi	r25, 0x04	; 4
     616:	21 50       	subi	r18, 0x01	; 1
     618:	80 40       	sbci	r24, 0x00	; 0
     61a:	90 40       	sbci	r25, 0x00	; 0
     61c:	e1 f7       	brne	.-8      	; 0x616 <USART0_Init+0x16>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <USART0_Init+0x20>
     620:	00 00       	nop
     622:	08 95       	ret

00000624 <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     624:	5d 9b       	sbis	0x0b, 5	; 11
     626:	fe cf       	rjmp	.-4      	; 0x624 <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     628:	8c b9       	out	0x0c, r24	; 12
     62a:	08 95       	ret

0000062c <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
     62c:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
     62e:	90 81       	ld	r25, Z
     630:	99 23       	and	r25, r25
     632:	39 f0       	breq	.+14     	; 0x642 <USART0_send_string+0x16>
     634:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     636:	5d 9b       	sbis	0x0b, 5	; 11
     638:	fe cf       	rjmp	.-4      	; 0x636 <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     63a:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     63c:	91 91       	ld	r25, Z+
     63e:	91 11       	cpse	r25, r1
     640:	fa cf       	rjmp	.-12     	; 0x636 <USART0_send_string+0xa>
     642:	08 95       	ret

00000644 <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
     644:	80 e5       	ldi	r24, 0x50	; 80
     646:	93 ec       	ldi	r25, 0xC3	; 195
     648:	06 c0       	rjmp	.+12     	; 0x656 <USART0_Receive+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     64a:	25 e3       	ldi	r18, 0x35	; 53
     64c:	2a 95       	dec	r18
     64e:	f1 f7       	brne	.-4      	; 0x64c <USART0_Receive+0x8>
     650:	00 00       	nop
     652:	01 97       	sbiw	r24, 0x01	; 1
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout > 0) {
     654:	21 f0       	breq	.+8      	; 0x65e <USART0_Receive+0x1a>
        if((UCSR0A & (1<<RXC0))){
     656:	5f 9b       	sbis	0x0b, 7	; 11
     658:	f8 cf       	rjmp	.-16     	; 0x64a <USART0_Receive+0x6>
            /* Get and return received data from buffer */ 
            return UDR0;
     65a:	8c b1       	in	r24, 0x0c	; 12
     65c:	08 95       	ret
        //clear_display();
        //string2lcd((unsigned char *)utoa((unsigned int)timeout,buffer,10));
        _delay_us(10);
        --timeout;
    }
    return 255;
     65e:	8f ef       	ldi	r24, 0xFF	; 255
}
     660:	08 95       	ret

00000662 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
     662:	dc 01       	movw	r26, r24
     664:	fc 01       	movw	r30, r24
    int i = 0;
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	20 e5       	ldi	r18, 0x50	; 80
     66c:	33 ec       	ldi	r19, 0xC3	; 195
     66e:	07 c0       	rjmp	.+14     	; 0x67e <USART0_Receive_String+0x1c>
     670:	85 e3       	ldi	r24, 0x35	; 53
     672:	8a 95       	dec	r24
     674:	f1 f7       	brne	.-4      	; 0x672 <USART0_Receive_String+0x10>
     676:	00 00       	nop
     678:	21 50       	subi	r18, 0x01	; 1
     67a:	31 09       	sbc	r19, r1

unsigned char USART0_Receive(void){
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout > 0) {
     67c:	81 f0       	breq	.+32     	; 0x69e <USART0_Receive_String+0x3c>
        if((UCSR0A & (1<<RXC0))){
     67e:	5f 9b       	sbis	0x0b, 7	; 11
     680:	f7 cf       	rjmp	.-18     	; 0x670 <USART0_Receive_String+0xe>
            /* Get and return received data from buffer */ 
            return UDR0;
     682:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     684:	9e 37       	cpi	r25, 0x7E	; 126
     686:	b1 f0       	breq	.+44     	; 0x6b4 <USART0_Receive_String+0x52>
        if (c == 255){
     688:	9f 3f       	cpi	r25, 0xFF	; 255
     68a:	49 f0       	breq	.+18     	; 0x69e <USART0_Receive_String+0x3c>
            str[1] = 50;
            str[2] = 50;
            str[3] = '\0';
            return;
        }
        str[i] = c;
     68c:	91 93       	st	Z+, r25
        //char2lcd(c);
        //string2lcd(str);
        ++i;
     68e:	4f 5f       	subi	r20, 0xFF	; 255
     690:	5f 4f       	sbci	r21, 0xFF	; 255
        if (i >= MAX_STRING_SIZE){
     692:	44 30       	cpi	r20, 0x04	; 4
     694:	51 05       	cpc	r21, r1
     696:	49 f7       	brne	.-46     	; 0x66a <USART0_Receive_String+0x8>
            str[MAX_STRING_SIZE - 1] = '\0';
     698:	13 96       	adiw	r26, 0x03	; 3
     69a:	1c 92       	st	X, r1

            return;
     69c:	08 95       	ret
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255){
            str[0] = 50;
     69e:	82 e3       	ldi	r24, 0x32	; 50
     6a0:	8c 93       	st	X, r24
            str[1] = 50;
     6a2:	11 96       	adiw	r26, 0x01	; 1
     6a4:	8c 93       	st	X, r24
     6a6:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
     6a8:	12 96       	adiw	r26, 0x02	; 2
     6aa:	8c 93       	st	X, r24
     6ac:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = '\0';
     6ae:	13 96       	adiw	r26, 0x03	; 3
     6b0:	1c 92       	st	X, r1
            return;
     6b2:	08 95       	ret
            str[MAX_STRING_SIZE - 1] = '\0';

            return;
        }
    }
    str[i] = '\0';
     6b4:	a4 0f       	add	r26, r20
     6b6:	b5 1f       	adc	r27, r21
     6b8:	1c 92       	st	X, r1
     6ba:	08 95       	ret

000006bc <strobe_lcd>:
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     6bc:	e2 e6       	ldi	r30, 0x62	; 98
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	88 60       	ori	r24, 0x08	; 8
     6c4:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     6c6:	80 81       	ld	r24, Z
     6c8:	87 7f       	andi	r24, 0xF7	; 247
     6ca:	80 83       	st	Z, r24
     6cc:	08 95       	ret

000006ce <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6ce:	77 9b       	sbis	0x0e, 7	; 14
     6d0:	fe cf       	rjmp	.-4      	; 0x6ce <clear_display>
    SPDR = 0x00;    //command, not data
     6d2:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6d4:	77 9b       	sbis	0x0e, 7	; 14
     6d6:	fe cf       	rjmp	.-4      	; 0x6d4 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6dc:	77 9b       	sbis	0x0e, 7	; 14
     6de:	fe cf       	rjmp	.-4      	; 0x6dc <clear_display+0xe>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     6e0:	80 91 62 00 	lds	r24, 0x0062
     6e4:	88 60       	ori	r24, 0x08	; 8
     6e6:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     6ea:	80 91 62 00 	lds	r24, 0x0062
     6ee:	87 7f       	andi	r24, 0xF7	; 247
     6f0:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f4:	8f e9       	ldi	r24, 0x9F	; 159
     6f6:	98 e2       	ldi	r25, 0x28	; 40
     6f8:	01 97       	sbiw	r24, 0x01	; 1
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <clear_display+0x2a>
     6fc:	00 c0       	rjmp	.+0      	; 0x6fe <clear_display+0x30>
     6fe:	00 00       	nop
     700:	08 95       	ret

00000702 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     702:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     704:	77 9b       	sbis	0x0e, 7	; 14
     706:	fe cf       	rjmp	.-4      	; 0x704 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     708:	80 ec       	ldi	r24, 0xC0	; 192
     70a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     70c:	77 9b       	sbis	0x0e, 7	; 14
     70e:	fe cf       	rjmp	.-4      	; 0x70c <home_line2+0xa>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     710:	80 91 62 00 	lds	r24, 0x0062
     714:	88 60       	ori	r24, 0x08	; 8
     716:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     71a:	80 91 62 00 	lds	r24, 0x0062
     71e:	87 7f       	andi	r24, 0xF7	; 247
     720:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     724:	85 ec       	ldi	r24, 0xC5	; 197
     726:	8a 95       	dec	r24
     728:	f1 f7       	brne	.-4      	; 0x726 <home_line2+0x24>
     72a:	00 00       	nop
     72c:	08 95       	ret

0000072e <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     732:	77 9b       	sbis	0x0e, 7	; 14
     734:	fe cf       	rjmp	.-4      	; 0x732 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     736:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     738:	77 9b       	sbis	0x0e, 7	; 14
     73a:	fe cf       	rjmp	.-4      	; 0x738 <char2lcd+0xa>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     73c:	80 91 62 00 	lds	r24, 0x0062
     740:	88 60       	ori	r24, 0x08	; 8
     742:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     746:	80 91 62 00 	lds	r24, 0x0062
     74a:	87 7f       	andi	r24, 0xF7	; 247
     74c:	80 93 62 00 	sts	0x0062, r24
     750:	85 ec       	ldi	r24, 0xC5	; 197
     752:	8a 95       	dec	r24
     754:	f1 f7       	brne	.-4      	; 0x752 <char2lcd+0x24>
     756:	00 00       	nop
     758:	08 95       	ret

0000075a <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	fc 01       	movw	r30, r24
     760:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     762:	40 e0       	ldi	r20, 0x00	; 0
     764:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     766:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     768:	77 9b       	sbis	0x0e, 7	; 14
     76a:	fe cf       	rjmp	.-4      	; 0x768 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     76c:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     76e:	77 9b       	sbis	0x0e, 7	; 14
     770:	fe cf       	rjmp	.-4      	; 0x76e <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     772:	8d 91       	ld	r24, X+
     774:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     776:	77 9b       	sbis	0x0e, 7	; 14
     778:	fe cf       	rjmp	.-4      	; 0x776 <string2lcd+0x1c>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     77a:	90 91 62 00 	lds	r25, 0x0062
     77e:	98 60       	ori	r25, 0x08	; 8
     780:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     784:	90 91 62 00 	lds	r25, 0x0062
     788:	97 7f       	andi	r25, 0xF7	; 247
     78a:	90 93 62 00 	sts	0x0062, r25
     78e:	85 ec       	ldi	r24, 0xC5	; 197
     790:	8a 95       	dec	r24
     792:	f1 f7       	brne	.-4      	; 0x790 <string2lcd+0x36>
     794:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     796:	4f 5f       	subi	r20, 0xFF	; 255
     798:	5f 4f       	sbci	r21, 0xFF	; 255
     79a:	ef 01       	movw	r28, r30
     79c:	09 90       	ld	r0, Y+
     79e:	00 20       	and	r0, r0
     7a0:	e9 f7       	brne	.-6      	; 0x79c <string2lcd+0x42>
     7a2:	9e 01       	movw	r18, r28
     7a4:	2e 1b       	sub	r18, r30
     7a6:	3f 0b       	sbc	r19, r31
     7a8:	22 50       	subi	r18, 0x02	; 2
     7aa:	31 09       	sbc	r19, r1
     7ac:	24 17       	cp	r18, r20
     7ae:	35 07       	cpc	r19, r21
     7b0:	d8 f6       	brcc	.-74     	; 0x768 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <turn>:
}
void path3(){
    //Implement if necessary
}

void turn(int degrees){
     7b8:	7f 92       	push	r7
     7ba:	8f 92       	push	r8
     7bc:	9f 92       	push	r9
     7be:	af 92       	push	r10
     7c0:	bf 92       	push	r11
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	60 97       	sbiw	r28, 0x10	; 16
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	7c 01       	movw	r14, r24
    char lcd[16];
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
     7e4:	bc 01       	movw	r22, r24
     7e6:	99 0f       	add	r25, r25
     7e8:	88 0b       	sbc	r24, r24
     7ea:	99 0b       	sbc	r25, r25
     7ec:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__floatsisf>
     7f0:	20 91 1c 01 	lds	r18, 0x011C
     7f4:	30 91 1d 01 	lds	r19, 0x011D
     7f8:	40 91 1e 01 	lds	r20, 0x011E
     7fc:	50 91 1f 01 	lds	r21, 0x011F
     800:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__addsf3>
     804:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fixsfsi>
     808:	cb 01       	movw	r24, r22
     80a:	68 e6       	ldi	r22, 0x68	; 104
     80c:	71 e0       	ldi	r23, 0x01	; 1
     80e:	0e 94 a7 0a 	call	0x154e	; 0x154e <__divmodhi4>
     812:	5c 01       	movw	r10, r24
    getHeading();
     814:	0e 94 1f 01 	call	0x23e	; 0x23e <getHeading>
    if (degrees < 0){
     818:	f7 fc       	sbrc	r15, 7
     81a:	b2 c0       	rjmp	.+356    	; 0x980 <turn+0x1c8>
            getHeading();
            dtostrf((double)raw_y,3,6,lcd);
            _delay_ms(100);
        }
    }
    else if (degrees > 0){
     81c:	ef 28       	or	r14, r15
     81e:	09 f4       	brne	.+2      	; 0x822 <turn+0x6a>
     820:	9b c0       	rjmp	.+310    	; 0x958 <turn+0x1a0>
        //Spin right until new heading
        while ((int)headingDegrees != (int)new_heading){
     822:	60 91 1c 01 	lds	r22, 0x011C
     826:	70 91 1d 01 	lds	r23, 0x011D
     82a:	80 91 1e 01 	lds	r24, 0x011E
     82e:	90 91 1f 01 	lds	r25, 0x011F
     832:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fixsfsi>
     836:	a6 16       	cp	r10, r22
     838:	b7 06       	cpc	r11, r23
     83a:	09 f4       	brne	.+2      	; 0x83e <turn+0x86>
     83c:	8d c0       	rjmp	.+282    	; 0x958 <turn+0x1a0>
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	7c 01       	movw	r14, r24
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
    OCR1A = left_speed;
     844:	48 e7       	ldi	r20, 0x78	; 120
     846:	c4 2e       	mov	r12, r20
     848:	4a e0       	ldi	r20, 0x0A	; 10
     84a:	d4 2e       	mov	r13, r20

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     84c:	77 24       	eor	r7, r7
     84e:	73 94       	inc	r7
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    SPDR = a_char; //send the char to the SPI port
     850:	50 e2       	ldi	r21, 0x20	; 32
     852:	85 2e       	mov	r8, r21
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    SPDR = 0xC0;   // cursor go home on line 2
     854:	60 ec       	ldi	r22, 0xC0	; 192
     856:	96 2e       	mov	r9, r22

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     858:	66 b5       	in	r22, 0x26	; 38
     85a:	77 b5       	in	r23, 0x27	; 39
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__floatunsisf>
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	5f e3       	ldi	r21, 0x3F	; 63
     86c:	0e 94 36 0a 	call	0x146c	; 0x146c <__mulsf3>
     870:	0e 94 21 09 	call	0x1242	; 0x1242 <__fixunssfsi>
    OCR1A = left_speed;
     874:	db bc       	out	0x2b, r13	; 43
     876:	ca bc       	out	0x2a, r12	; 42
    OCR1B = right_speed;
     878:	d9 bc       	out	0x29, r13	; 41
     87a:	c8 bc       	out	0x28, r12	; 40
    OCR1C = z_speed;
     87c:	70 93 79 00 	sts	0x0079, r23
     880:	60 93 78 00 	sts	0x0078, r22
    }
    else if (degrees > 0){
        //Spin right until new heading
        while ((int)headingDegrees != (int)new_heading){
            move(TURN_SPEED,-TURN_SPEED,50);
            getHeading();
     884:	0e 94 1f 01 	call	0x23e	; 0x23e <getHeading>
            itoa(OCR1A/2,lcd,10);
     888:	8a b5       	in	r24, 0x2a	; 42
     88a:	9b b5       	in	r25, 0x2b	; 43
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     88c:	4a e0       	ldi	r20, 0x0A	; 10
     88e:	b7 01       	movw	r22, r14
     890:	96 95       	lsr	r25
     892:	87 95       	ror	r24
     894:	0e 94 ef 0a 	call	0x15de	; 0x15de <__itoa_ncheck>
            clear_display();
     898:	0e 94 67 03 	call	0x6ce	; 0x6ce <clear_display>
            string2lcd((unsigned char *)lcd);
     89c:	c7 01       	movw	r24, r14
     89e:	0e 94 ad 03 	call	0x75a	; 0x75a <string2lcd>

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     8a2:	7f b8       	out	0x0f, r7	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8a4:	77 9b       	sbis	0x0e, 7	; 14
     8a6:	fe cf       	rjmp	.-4      	; 0x8a4 <turn+0xec>
    SPDR = a_char; //send the char to the SPI port
     8a8:	8f b8       	out	0x0f, r8	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8aa:	77 9b       	sbis	0x0e, 7	; 14
     8ac:	fe cf       	rjmp	.-4      	; 0x8aa <turn+0xf2>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     8ae:	80 91 62 00 	lds	r24, 0x0062
     8b2:	88 60       	ori	r24, 0x08	; 8
     8b4:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     8b8:	80 91 62 00 	lds	r24, 0x0062
     8bc:	87 7f       	andi	r24, 0xF7	; 247
     8be:	80 93 62 00 	sts	0x0062, r24
     8c2:	95 ec       	ldi	r25, 0xC5	; 197
     8c4:	9a 95       	dec	r25
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <turn+0x10c>
     8c8:	00 00       	nop
            getHeading();
            itoa(OCR1A/2,lcd,10);
            clear_display();
            string2lcd((unsigned char *)lcd);
            char2lcd((unsigned char)' ');
            itoa(OCR1B/2,lcd,10);
     8ca:	88 b5       	in	r24, 0x28	; 40
     8cc:	99 b5       	in	r25, 0x29	; 41
     8ce:	4a e0       	ldi	r20, 0x0A	; 10
     8d0:	b7 01       	movw	r22, r14
     8d2:	96 95       	lsr	r25
     8d4:	87 95       	ror	r24
     8d6:	0e 94 ef 0a 	call	0x15de	; 0x15de <__itoa_ncheck>
            string2lcd((unsigned char *)lcd);
     8da:	c7 01       	movw	r24, r14
     8dc:	0e 94 ad 03 	call	0x75a	; 0x75a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     8e0:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8e2:	77 9b       	sbis	0x0e, 7	; 14
     8e4:	fe cf       	rjmp	.-4      	; 0x8e2 <turn+0x12a>
    SPDR = 0xC0;   // cursor go home on line 2
     8e6:	9f b8       	out	0x0f, r9	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8e8:	77 9b       	sbis	0x0e, 7	; 14
     8ea:	fe cf       	rjmp	.-4      	; 0x8e8 <turn+0x130>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     8ec:	80 91 62 00 	lds	r24, 0x0062
     8f0:	88 60       	ori	r24, 0x08	; 8
     8f2:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     8f6:	80 91 62 00 	lds	r24, 0x0062
     8fa:	87 7f       	andi	r24, 0xF7	; 247
     8fc:	80 93 62 00 	sts	0x0062, r24
     900:	25 ec       	ldi	r18, 0xC5	; 197
     902:	2a 95       	dec	r18
     904:	f1 f7       	brne	.-4      	; 0x902 <turn+0x14a>
     906:	00 00       	nop
            string2lcd((unsigned char *)lcd);
            char2lcd((unsigned char)' ');
            itoa(OCR1B/2,lcd,10);
            string2lcd((unsigned char *)lcd);
            home_line2();
            getHeading();
     908:	0e 94 1f 01 	call	0x23e	; 0x23e <getHeading>
            dtostrf((double)raw_y,3,6,lcd);
     90c:	60 91 22 01 	lds	r22, 0x0122
     910:	70 91 23 01 	lds	r23, 0x0123
     914:	07 2e       	mov	r0, r23
     916:	00 0c       	add	r0, r0
     918:	88 0b       	sbc	r24, r24
     91a:	99 0b       	sbc	r25, r25
     91c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__floatsisf>
     920:	87 01       	movw	r16, r14
     922:	26 e0       	ldi	r18, 0x06	; 6
     924:	43 e0       	ldi	r20, 0x03	; 3
     926:	0e 94 cf 0a 	call	0x159e	; 0x159e <dtostrf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	91 ee       	ldi	r25, 0xE1	; 225
     92e:	24 e0       	ldi	r18, 0x04	; 4
     930:	81 50       	subi	r24, 0x01	; 1
     932:	90 40       	sbci	r25, 0x00	; 0
     934:	20 40       	sbci	r18, 0x00	; 0
     936:	e1 f7       	brne	.-8      	; 0x930 <turn+0x178>
     938:	00 c0       	rjmp	.+0      	; 0x93a <turn+0x182>
     93a:	00 00       	nop
            _delay_ms(100);
        }
    }
    else if (degrees > 0){
        //Spin right until new heading
        while ((int)headingDegrees != (int)new_heading){
     93c:	60 91 1c 01 	lds	r22, 0x011C
     940:	70 91 1d 01 	lds	r23, 0x011D
     944:	80 91 1e 01 	lds	r24, 0x011E
     948:	90 91 1f 01 	lds	r25, 0x011F
     94c:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fixsfsi>
     950:	a6 16       	cp	r10, r22
     952:	b7 06       	cpc	r11, r23
     954:	09 f0       	breq	.+2      	; 0x958 <turn+0x1a0>
     956:	80 cf       	rjmp	.-256    	; 0x858 <turn+0xa0>
            getHeading();
            dtostrf((double)raw_y,3,6,lcd);
            _delay_ms(100);
        }
    }
}
     958:	60 96       	adiw	r28, 0x10	; 16
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	af 90       	pop	r10
     978:	9f 90       	pop	r9
     97a:	8f 90       	pop	r8
     97c:	7f 90       	pop	r7
     97e:	08 95       	ret
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
    getHeading();
    if (degrees < 0){
        //Spin left until new heading
        while ((int)headingDegrees != new_heading){
     980:	60 91 1c 01 	lds	r22, 0x011C
     984:	70 91 1d 01 	lds	r23, 0x011D
     988:	80 91 1e 01 	lds	r24, 0x011E
     98c:	90 91 1f 01 	lds	r25, 0x011F
     990:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fixsfsi>
     994:	a6 16       	cp	r10, r22
     996:	b7 06       	cpc	r11, r23
     998:	f9 f2       	breq	.-66     	; 0x958 <turn+0x1a0>
     99a:	ce 01       	movw	r24, r28
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	7c 01       	movw	r14, r24
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
    OCR1A = left_speed;
     9a0:	a8 e7       	ldi	r26, 0x78	; 120
     9a2:	ca 2e       	mov	r12, r26
     9a4:	aa e0       	ldi	r26, 0x0A	; 10
     9a6:	da 2e       	mov	r13, r26

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     9a8:	77 24       	eor	r7, r7
     9aa:	73 94       	inc	r7
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    SPDR = a_char; //send the char to the SPI port
     9ac:	b0 e2       	ldi	r27, 0x20	; 32
     9ae:	8b 2e       	mov	r8, r27
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    SPDR = 0xC0;   // cursor go home on line 2
     9b0:	10 ec       	ldi	r17, 0xC0	; 192
     9b2:	91 2e       	mov	r9, r17

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     9b4:	66 b5       	in	r22, 0x26	; 38
     9b6:	77 b5       	in	r23, 0x27	; 39
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__floatunsisf>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	5f e3       	ldi	r21, 0x3F	; 63
     9c8:	0e 94 36 0a 	call	0x146c	; 0x146c <__mulsf3>
     9cc:	0e 94 21 09 	call	0x1242	; 0x1242 <__fixunssfsi>
    OCR1A = left_speed;
     9d0:	db bc       	out	0x2b, r13	; 43
     9d2:	ca bc       	out	0x2a, r12	; 42
    OCR1B = right_speed;
     9d4:	d9 bc       	out	0x29, r13	; 41
     9d6:	c8 bc       	out	0x28, r12	; 40
    OCR1C = z_speed;
     9d8:	70 93 79 00 	sts	0x0079, r23
     9dc:	60 93 78 00 	sts	0x0078, r22
    getHeading();
    if (degrees < 0){
        //Spin left until new heading
        while ((int)headingDegrees != new_heading){
            move(-TURN_SPEED,TURN_SPEED,50);
            getHeading();
     9e0:	0e 94 1f 01 	call	0x23e	; 0x23e <getHeading>
            itoa(OCR1A/2,lcd,10);
     9e4:	8a b5       	in	r24, 0x2a	; 42
     9e6:	9b b5       	in	r25, 0x2b	; 43
     9e8:	4a e0       	ldi	r20, 0x0A	; 10
     9ea:	b7 01       	movw	r22, r14
     9ec:	96 95       	lsr	r25
     9ee:	87 95       	ror	r24
     9f0:	0e 94 ef 0a 	call	0x15de	; 0x15de <__itoa_ncheck>
            clear_display();
     9f4:	0e 94 67 03 	call	0x6ce	; 0x6ce <clear_display>
            string2lcd((unsigned char *)lcd);
     9f8:	c7 01       	movw	r24, r14
     9fa:	0e 94 ad 03 	call	0x75a	; 0x75a <string2lcd>

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     9fe:	7f b8       	out	0x0f, r7	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     a00:	77 9b       	sbis	0x0e, 7	; 14
     a02:	fe cf       	rjmp	.-4      	; 0xa00 <turn+0x248>
    SPDR = a_char; //send the char to the SPI port
     a04:	8f b8       	out	0x0f, r8	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     a06:	77 9b       	sbis	0x0e, 7	; 14
     a08:	fe cf       	rjmp	.-4      	; 0xa06 <turn+0x24e>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     a0a:	80 91 62 00 	lds	r24, 0x0062
     a0e:	88 60       	ori	r24, 0x08	; 8
     a10:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     a14:	80 91 62 00 	lds	r24, 0x0062
     a18:	87 7f       	andi	r24, 0xF7	; 247
     a1a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a1e:	95 ec       	ldi	r25, 0xC5	; 197
     a20:	9a 95       	dec	r25
     a22:	f1 f7       	brne	.-4      	; 0xa20 <turn+0x268>
     a24:	00 00       	nop
            getHeading();
            itoa(OCR1A/2,lcd,10);
            clear_display();
            string2lcd((unsigned char *)lcd);
            char2lcd((unsigned char)' ');
            itoa(OCR1B/2,lcd,10);
     a26:	88 b5       	in	r24, 0x28	; 40
     a28:	99 b5       	in	r25, 0x29	; 41
     a2a:	4a e0       	ldi	r20, 0x0A	; 10
     a2c:	b7 01       	movw	r22, r14
     a2e:	96 95       	lsr	r25
     a30:	87 95       	ror	r24
     a32:	0e 94 ef 0a 	call	0x15de	; 0x15de <__itoa_ncheck>
            string2lcd((unsigned char *)lcd);
     a36:	c7 01       	movw	r24, r14
     a38:	0e 94 ad 03 	call	0x75a	; 0x75a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     a3c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     a3e:	77 9b       	sbis	0x0e, 7	; 14
     a40:	fe cf       	rjmp	.-4      	; 0xa3e <turn+0x286>
    SPDR = 0xC0;   // cursor go home on line 2
     a42:	9f b8       	out	0x0f, r9	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     a44:	77 9b       	sbis	0x0e, 7	; 14
     a46:	fe cf       	rjmp	.-4      	; 0xa44 <turn+0x28c>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     a48:	80 91 62 00 	lds	r24, 0x0062
     a4c:	88 60       	ori	r24, 0x08	; 8
     a4e:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     a52:	80 91 62 00 	lds	r24, 0x0062
     a56:	87 7f       	andi	r24, 0xF7	; 247
     a58:	80 93 62 00 	sts	0x0062, r24
     a5c:	25 ec       	ldi	r18, 0xC5	; 197
     a5e:	2a 95       	dec	r18
     a60:	f1 f7       	brne	.-4      	; 0xa5e <turn+0x2a6>
     a62:	00 00       	nop
            string2lcd((unsigned char *)lcd);
            char2lcd((unsigned char)' ');
            itoa(OCR1B/2,lcd,10);
            string2lcd((unsigned char *)lcd);
            home_line2();
            getHeading();
     a64:	0e 94 1f 01 	call	0x23e	; 0x23e <getHeading>
            dtostrf((double)raw_y,3,6,lcd);
     a68:	60 91 22 01 	lds	r22, 0x0122
     a6c:	70 91 23 01 	lds	r23, 0x0123
     a70:	07 2e       	mov	r0, r23
     a72:	00 0c       	add	r0, r0
     a74:	88 0b       	sbc	r24, r24
     a76:	99 0b       	sbc	r25, r25
     a78:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__floatsisf>
     a7c:	87 01       	movw	r16, r14
     a7e:	26 e0       	ldi	r18, 0x06	; 6
     a80:	43 e0       	ldi	r20, 0x03	; 3
     a82:	0e 94 cf 0a 	call	0x159e	; 0x159e <dtostrf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	91 ee       	ldi	r25, 0xE1	; 225
     a8a:	24 e0       	ldi	r18, 0x04	; 4
     a8c:	81 50       	subi	r24, 0x01	; 1
     a8e:	90 40       	sbci	r25, 0x00	; 0
     a90:	20 40       	sbci	r18, 0x00	; 0
     a92:	e1 f7       	brne	.-8      	; 0xa8c <turn+0x2d4>
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <turn+0x2de>
     a96:	00 00       	nop
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
    getHeading();
    if (degrees < 0){
        //Spin left until new heading
        while ((int)headingDegrees != new_heading){
     a98:	60 91 1c 01 	lds	r22, 0x011C
     a9c:	70 91 1d 01 	lds	r23, 0x011D
     aa0:	80 91 1e 01 	lds	r24, 0x011E
     aa4:	90 91 1f 01 	lds	r25, 0x011F
     aa8:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fixsfsi>
     aac:	a6 16       	cp	r10, r22
     aae:	b7 06       	cpc	r11, r23
     ab0:	09 f0       	breq	.+2      	; 0xab4 <turn+0x2fc>
     ab2:	80 cf       	rjmp	.-256    	; 0x9b4 <turn+0x1fc>
     ab4:	51 cf       	rjmp	.-350    	; 0x958 <turn+0x1a0>

00000ab6 <spi_init>:
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     ab6:	e1 e6       	ldi	r30, 0x61	; 97
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	88 60       	ori	r24, 0x08	; 8
     abe:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     ac0:	88 b3       	in	r24, 0x18	; 24
     ac2:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     ac4:	87 b3       	in	r24, 0x17	; 23
     ac6:	87 60       	ori	r24, 0x07	; 7
     ac8:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     aca:	80 e5       	ldi	r24, 0x50	; 80
     acc:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	8e b9       	out	0x0e, r24	; 14
     ad2:	08 95       	ret

00000ad4 <lcd_init>:
     ad4:	8f e5       	ldi	r24, 0x5F	; 95
     ad6:	9a ee       	ldi	r25, 0xEA	; 234
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <lcd_init+0x4>
     adc:	00 c0       	rjmp	.+0      	; 0xade <lcd_init+0xa>
     ade:	00 00       	nop
     ae0:	23 e0       	ldi	r18, 0x03	; 3
     ae2:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     ae4:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     ae6:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ae8:	77 9b       	sbis	0x0e, 7	; 14
     aea:	fe cf       	rjmp	.-4      	; 0xae8 <lcd_init+0x14>
        SPDR = 0x30;
     aec:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     aee:	77 9b       	sbis	0x0e, 7	; 14
     af0:	fe cf       	rjmp	.-4      	; 0xaee <lcd_init+0x1a>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     af2:	80 91 62 00 	lds	r24, 0x0062
     af6:	88 60       	ori	r24, 0x08	; 8
     af8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     afc:	80 91 62 00 	lds	r24, 0x0062
     b00:	87 7f       	andi	r24, 0xF7	; 247
     b02:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b06:	85 ec       	ldi	r24, 0xC5	; 197
     b08:	8a 95       	dec	r24
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <lcd_init+0x34>
     b0c:	00 00       	nop
     b0e:	21 50       	subi	r18, 0x01	; 1
     b10:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     b12:	49 f7       	brne	.-46     	; 0xae6 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     b14:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     b16:	77 9b       	sbis	0x0e, 7	; 14
     b18:	fe cf       	rjmp	.-4      	; 0xb16 <lcd_init+0x42>
    SPDR = 0x38;
     b1a:	88 e3       	ldi	r24, 0x38	; 56
     b1c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     b1e:	77 9b       	sbis	0x0e, 7	; 14
     b20:	fe cf       	rjmp	.-4      	; 0xb1e <lcd_init+0x4a>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     b22:	80 91 62 00 	lds	r24, 0x0062
     b26:	88 60       	ori	r24, 0x08	; 8
     b28:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     b2c:	80 91 62 00 	lds	r24, 0x0062
     b30:	87 7f       	andi	r24, 0xF7	; 247
     b32:	80 93 62 00 	sts	0x0062, r24
     b36:	95 ec       	ldi	r25, 0xC5	; 197
     b38:	9a 95       	dec	r25
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <lcd_init+0x64>
     b3c:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     b3e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     b40:	77 9b       	sbis	0x0e, 7	; 14
     b42:	fe cf       	rjmp	.-4      	; 0xb40 <lcd_init+0x6c>
    SPDR = 0x08;
     b44:	88 e0       	ldi	r24, 0x08	; 8
     b46:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     b48:	77 9b       	sbis	0x0e, 7	; 14
     b4a:	fe cf       	rjmp	.-4      	; 0xb48 <lcd_init+0x74>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     b4c:	80 91 62 00 	lds	r24, 0x0062
     b50:	88 60       	ori	r24, 0x08	; 8
     b52:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     b56:	80 91 62 00 	lds	r24, 0x0062
     b5a:	87 7f       	andi	r24, 0xF7	; 247
     b5c:	80 93 62 00 	sts	0x0062, r24
     b60:	85 ec       	ldi	r24, 0xC5	; 197
     b62:	8a 95       	dec	r24
     b64:	f1 f7       	brne	.-4      	; 0xb62 <lcd_init+0x8e>
     b66:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     b68:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     b6a:	77 9b       	sbis	0x0e, 7	; 14
     b6c:	fe cf       	rjmp	.-4      	; 0xb6a <lcd_init+0x96>
    SPDR = 0x01;
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     b72:	77 9b       	sbis	0x0e, 7	; 14
     b74:	fe cf       	rjmp	.-4      	; 0xb72 <lcd_init+0x9e>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     b76:	80 91 62 00 	lds	r24, 0x0062
     b7a:	88 60       	ori	r24, 0x08	; 8
     b7c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     b80:	80 91 62 00 	lds	r24, 0x0062
     b84:	87 7f       	andi	r24, 0xF7	; 247
     b86:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	98 e1       	ldi	r25, 0x18	; 24
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	f1 f7       	brne	.-4      	; 0xb8e <lcd_init+0xba>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <lcd_init+0xc0>
     b94:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
     b96:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     b98:	77 9b       	sbis	0x0e, 7	; 14
     b9a:	fe cf       	rjmp	.-4      	; 0xb98 <lcd_init+0xc4>
    SPDR = 0x06;
     b9c:	86 e0       	ldi	r24, 0x06	; 6
     b9e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ba0:	77 9b       	sbis	0x0e, 7	; 14
     ba2:	fe cf       	rjmp	.-4      	; 0xba0 <lcd_init+0xcc>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     ba4:	80 91 62 00 	lds	r24, 0x0062
     ba8:	88 60       	ori	r24, 0x08	; 8
     baa:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     bae:	80 91 62 00 	lds	r24, 0x0062
     bb2:	87 7f       	andi	r24, 0xF7	; 247
     bb4:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bb8:	95 ec       	ldi	r25, 0xC5	; 197
     bba:	9a 95       	dec	r25
     bbc:	f1 f7       	brne	.-4      	; 0xbba <lcd_init+0xe6>
     bbe:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     bc0:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     bc2:	77 9b       	sbis	0x0e, 7	; 14
     bc4:	fe cf       	rjmp	.-4      	; 0xbc2 <lcd_init+0xee>
    SPDR = 0x0E;
     bc6:	8e e0       	ldi	r24, 0x0E	; 14
     bc8:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     bca:	77 9b       	sbis	0x0e, 7	; 14
     bcc:	fe cf       	rjmp	.-4      	; 0xbca <lcd_init+0xf6>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     bce:	80 91 62 00 	lds	r24, 0x0062
     bd2:	88 60       	ori	r24, 0x08	; 8
     bd4:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     bd8:	80 91 62 00 	lds	r24, 0x0062
     bdc:	87 7f       	andi	r24, 0xF7	; 247
     bde:	80 93 62 00 	sts	0x0062, r24
     be2:	85 ec       	ldi	r24, 0xC5	; 197
     be4:	8a 95       	dec	r24
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <lcd_init+0x110>
     be8:	00 00       	nop
     bea:	08 95       	ret

00000bec <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     bec:	88 e4       	ldi	r24, 0x48	; 72
     bee:	80 93 70 00 	sts	0x0070, r24
     bf2:	08 95       	ret

00000bf4 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     bf4:	10 92 74 00 	sts	0x0074, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     bf8:	94 ea       	ldi	r25, 0xA4	; 164
     bfa:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     bfe:	90 91 74 00 	lds	r25, 0x0074
     c02:	97 ff       	sbrs	r25, 7
     c04:	fc cf       	rjmp	.-8      	; 0xbfe <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     c06:	90 91 71 00 	lds	r25, 0x0071
     c0a:	98 7f       	andi	r25, 0xF8	; 248
     c0c:	98 30       	cpi	r25, 0x08	; 8
     c0e:	11 f0       	breq	.+4      	; 0xc14 <i2c_start+0x20>
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
     c14:	80 93 73 00 	sts	0x0073, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     c18:	84 e8       	ldi	r24, 0x84	; 132
     c1a:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     c1e:	80 91 74 00 	lds	r24, 0x0074
     c22:	87 ff       	sbrs	r24, 7
     c24:	fc cf       	rjmp	.-8      	; 0xc1e <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     c26:	80 91 71 00 	lds	r24, 0x0071
     c2a:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     c2c:	88 31       	cpi	r24, 0x18	; 24
     c2e:	11 f0       	breq	.+4      	; 0xc34 <i2c_start+0x40>
     c30:	80 34       	cpi	r24, 0x40	; 64
     c32:	71 f7       	brne	.-36     	; 0xc10 <i2c_start+0x1c>
	
	return 0;
     c34:	80 e0       	ldi	r24, 0x00	; 0
}
     c36:	08 95       	ret

00000c38 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     c38:	80 93 73 00 	sts	0x0073, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     c3c:	84 e8       	ldi	r24, 0x84	; 132
     c3e:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     c42:	80 91 74 00 	lds	r24, 0x0074
     c46:	87 ff       	sbrs	r24, 7
     c48:	fc cf       	rjmp	.-8      	; 0xc42 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     c4a:	90 91 71 00 	lds	r25, 0x0071
     c4e:	98 7f       	andi	r25, 0xF8	; 248
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	98 32       	cpi	r25, 0x28	; 40
     c54:	09 f4       	brne	.+2      	; 0xc58 <i2c_write+0x20>
     c56:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     c58:	08 95       	ret

00000c5a <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     c5a:	84 ec       	ldi	r24, 0xC4	; 196
     c5c:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     c60:	80 91 74 00 	lds	r24, 0x0074
     c64:	87 ff       	sbrs	r24, 7
     c66:	fc cf       	rjmp	.-8      	; 0xc60 <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
     c68:	80 91 73 00 	lds	r24, 0x0073
}
     c6c:	08 95       	ret

00000c6e <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     c6e:	84 e8       	ldi	r24, 0x84	; 132
     c70:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     c74:	80 91 74 00 	lds	r24, 0x0074
     c78:	87 ff       	sbrs	r24, 7
     c7a:	fc cf       	rjmp	.-8      	; 0xc74 <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
     c7c:	80 91 73 00 	lds	r24, 0x0073
}
     c80:	08 95       	ret

00000c82 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	d6 2e       	mov	r13, r22
     c92:	07 2f       	mov	r16, r23
     c94:	7a 01       	movw	r14, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     c96:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <i2c_start>
     c9a:	18 2f       	mov	r17, r24
     c9c:	81 11       	cpse	r24, r1
     c9e:	10 c0       	rjmp	.+32     	; 0xcc0 <i2c_transmit+0x3e>
     ca0:	cd 2d       	mov	r28, r13
     ca2:	d0 2f       	mov	r29, r16
     ca4:	ec 0e       	add	r14, r28
     ca6:	fd 1e       	adc	r15, r29
	
	for (uint16_t i = 0; i < length; i++)
     ca8:	ce 15       	cp	r28, r14
     caa:	df 05       	cpc	r29, r15
     cac:	21 f4       	brne	.+8      	; 0xcb6 <i2c_transmit+0x34>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     cae:	84 e9       	ldi	r24, 0x94	; 148
     cb0:	80 93 74 00 	sts	0x0074, r24
		if (i2c_write(data[i])) return 1;
	}
	
	i2c_stop();
	
	return 0;
     cb4:	06 c0       	rjmp	.+12     	; 0xcc2 <i2c_transmit+0x40>
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     cb6:	89 91       	ld	r24, Y+
     cb8:	0e 94 1c 06 	call	0xc38	; 0xc38 <i2c_write>
     cbc:	88 23       	and	r24, r24
     cbe:	a1 f3       	breq	.-24     	; 0xca8 <i2c_transmit+0x26>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     cc0:	11 e0       	ldi	r17, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
     cc2:	81 2f       	mov	r24, r17
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	df 90       	pop	r13
     cd2:	08 95       	ret

00000cd4 <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
     cd4:	cf 92       	push	r12
     cd6:	df 92       	push	r13
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	eb 01       	movw	r28, r22
     ce4:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_READ)) return 1;
     ce6:	81 60       	ori	r24, 0x01	; 1
     ce8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <i2c_start>
     cec:	f8 2e       	mov	r15, r24
     cee:	81 11       	cpse	r24, r1
     cf0:	20 c0       	rjmp	.+64     	; 0xd32 <i2c_receive+0x5e>
     cf2:	6e 01       	movw	r12, r28
	
	for (uint16_t i = 0; i < (length-1); i++)
     cf4:	01 50       	subi	r16, 0x01	; 1
     cf6:	11 09       	sbc	r17, r1
     cf8:	c6 01       	movw	r24, r12
     cfa:	8c 1b       	sub	r24, r28
     cfc:	9d 0b       	sbc	r25, r29
     cfe:	80 17       	cp	r24, r16
     d00:	91 07       	cpc	r25, r17
     d02:	88 f0       	brcs	.+34     	; 0xd26 <i2c_receive+0x52>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     d04:	c0 0f       	add	r28, r16
     d06:	d1 1f       	adc	r29, r17
     d08:	0e 94 37 06 	call	0xc6e	; 0xc6e <i2c_read_nack>
     d0c:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     d0e:	84 e9       	ldi	r24, 0x94	; 148
     d10:	80 93 74 00 	sts	0x0074, r24
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     d14:	8f 2d       	mov	r24, r15
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	df 90       	pop	r13
     d22:	cf 90       	pop	r12
     d24:	08 95       	ret
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     d26:	0e 94 2d 06 	call	0xc5a	; 0xc5a <i2c_read_ack>
     d2a:	f6 01       	movw	r30, r12
     d2c:	81 93       	st	Z+, r24
     d2e:	6f 01       	movw	r12, r30
     d30:	e3 cf       	rjmp	.-58     	; 0xcf8 <i2c_receive+0x24>
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
     d32:	ff 24       	eor	r15, r15
     d34:	f3 94       	inc	r15
     d36:	ee cf       	rjmp	.-36     	; 0xd14 <i2c_receive+0x40>

00000d38 <i2c_writeReg>:
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     d38:	df 92       	push	r13
     d3a:	ef 92       	push	r14
     d3c:	ff 92       	push	r15
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	c6 2f       	mov	r28, r22
     d48:	d4 2e       	mov	r13, r20
     d4a:	05 2f       	mov	r16, r21
     d4c:	79 01       	movw	r14, r18
	if (i2c_start(devaddr | 0x00)) return 1;
     d4e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <i2c_start>
     d52:	18 2f       	mov	r17, r24
     d54:	88 23       	and	r24, r24
     d56:	51 f0       	breq	.+20     	; 0xd6c <i2c_writeReg+0x34>
     d58:	11 e0       	ldi	r17, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
     d5a:	81 2f       	mov	r24, r17
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	08 95       	ret

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);
     d6c:	8c 2f       	mov	r24, r28
     d6e:	0e 94 1c 06 	call	0xc38	; 0xc38 <i2c_write>
     d72:	cd 2d       	mov	r28, r13
     d74:	d0 2f       	mov	r29, r16
     d76:	ec 0e       	add	r14, r28
     d78:	fd 1e       	adc	r15, r29

	for (uint16_t i = 0; i < length; i++)
     d7a:	ce 15       	cp	r28, r14
     d7c:	df 05       	cpc	r29, r15
     d7e:	21 f4       	brne	.+8      	; 0xd88 <i2c_writeReg+0x50>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     d80:	84 e9       	ldi	r24, 0x94	; 148
     d82:	80 93 74 00 	sts	0x0074, r24
		if (i2c_write(data[i])) return 1;
	}

	i2c_stop();

	return 0;
     d86:	e9 cf       	rjmp	.-46     	; 0xd5a <i2c_writeReg+0x22>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     d88:	89 91       	ld	r24, Y+
     d8a:	0e 94 1c 06 	call	0xc38	; 0xc38 <i2c_write>
     d8e:	88 23       	and	r24, r24
     d90:	a1 f3       	breq	.-24     	; 0xd7a <i2c_writeReg+0x42>
     d92:	e2 cf       	rjmp	.-60     	; 0xd58 <i2c_writeReg+0x20>

00000d94 <i2c_readReg>:

	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     d94:	cf 92       	push	r12
     d96:	df 92       	push	r13
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	f8 2e       	mov	r15, r24
     da4:	d6 2e       	mov	r13, r22
     da6:	ea 01       	movw	r28, r20
     da8:	89 01       	movw	r16, r18
	if (i2c_start(devaddr)) return 1;
     daa:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <i2c_start>
     dae:	88 23       	and	r24, r24
     db0:	59 f0       	breq	.+22     	; 0xdc8 <i2c_readReg+0x34>
     db2:	ff 24       	eor	r15, r15
     db4:	f3 94       	inc	r15
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     db6:	8f 2d       	mov	r24, r15
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	df 90       	pop	r13
     dc4:	cf 90       	pop	r12
     dc6:	08 95       	ret

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);
     dc8:	8d 2d       	mov	r24, r13
     dca:	0e 94 1c 06 	call	0xc38	; 0xc38 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
     dce:	8f 2d       	mov	r24, r15
     dd0:	81 60       	ori	r24, 0x01	; 1
     dd2:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <i2c_start>
     dd6:	f8 2e       	mov	r15, r24
     dd8:	81 11       	cpse	r24, r1
     dda:	eb cf       	rjmp	.-42     	; 0xdb2 <i2c_readReg+0x1e>
     ddc:	6e 01       	movw	r12, r28

	for (uint16_t i = 0; i < (length-1); i++)
     dde:	01 50       	subi	r16, 0x01	; 1
     de0:	11 09       	sbc	r17, r1
     de2:	c6 01       	movw	r24, r12
     de4:	8c 1b       	sub	r24, r28
     de6:	9d 0b       	sbc	r25, r29
     de8:	80 17       	cp	r24, r16
     dea:	91 07       	cpc	r25, r17
     dec:	48 f0       	brcs	.+18     	; 0xe00 <i2c_readReg+0x6c>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     dee:	c0 0f       	add	r28, r16
     df0:	d1 1f       	adc	r29, r17
     df2:	0e 94 37 06 	call	0xc6e	; 0xc6e <i2c_read_nack>
     df6:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     df8:	84 e9       	ldi	r24, 0x94	; 148
     dfa:	80 93 74 00 	sts	0x0074, r24
	}
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
     dfe:	db cf       	rjmp	.-74     	; 0xdb6 <i2c_readReg+0x22>

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     e00:	0e 94 2d 06 	call	0xc5a	; 0xc5a <i2c_read_ack>
     e04:	f6 01       	movw	r30, r12
     e06:	81 93       	st	Z+, r24
     e08:	6f 01       	movw	r12, r30
     e0a:	eb cf       	rjmp	.-42     	; 0xde2 <i2c_readReg+0x4e>

00000e0c <i2c_stop>:
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     e0c:	84 e9       	ldi	r24, 0x94	; 148
     e0e:	80 93 74 00 	sts	0x0074, r24
     e12:	08 95       	ret

00000e14 <enable_adc>:

void enable_adc(int pin){
	if (pin > 7 || pin < 0){
		//return;
	}
	DDRF = 0x00;
     e14:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0x00;
     e18:	10 92 62 00 	sts	0x0062, r1
	//internally wire REFSn bits in the ADMUX register to connect VREF 
		//to internal 2.56v reference --> 0.0025 v/step
	ADMUX = (1 << REFS0) | (1 << REFS1);
     e1c:	90 ec       	ldi	r25, 0xC0	; 192
     e1e:	97 b9       	out	0x07, r25	; 7
	//Set analog input channel by writing to the MUX in ADMUX
	//Single ended input, gain is not allowed
	ADMUX |= pin;
     e20:	97 b1       	in	r25, 0x07	; 7
     e22:	89 2b       	or	r24, r25
     e24:	87 b9       	out	0x07, r24	; 7
	
	//Default Right Adjusted

	//Set ADEN in ADSCRA to enable ADC
	ADCSRA = (1 << ADEN);
     e26:	80 e8       	ldi	r24, 0x80	; 128
     e28:	86 b9       	out	0x06, r24	; 6
	//Set the ADC Clock frequency prescaler to 128 --> 125kHz
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     e2a:	86 b1       	in	r24, 0x06	; 6
     e2c:	87 60       	ori	r24, 0x07	; 7
     e2e:	86 b9       	out	0x06, r24	; 6
	//Set free running mode
	//ADCSRA |= (1 << ADFR);
	//Enable the ADC Interrupt Flag
	ADCSRA |= (1 << ADIE);
     e30:	33 9a       	sbi	0x06, 3	; 6
	//Start first conversion by setting ADSC in ADCSRA
	ADCSRA |= (1 << ADSC);
     e32:	36 9a       	sbi	0x06, 6	; 6
     e34:	08 95       	ret

00000e36 <read_adc>:

}
int read_adc(int pin){
     e36:	fc 01       	movw	r30, r24
	int data;
	if (pin > 7){
     e38:	08 97       	sbiw	r24, 0x08	; 8
     e3a:	fc f4       	brge	.+62     	; 0xe7a <read_adc+0x44>
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	50 e0       	ldi	r21, 0x00	; 0
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
		ADMUX &= ~(1 << i);
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	97 b1       	in	r25, 0x07	; 7
     e46:	9b 01       	movw	r18, r22
     e48:	04 2e       	mov	r0, r20
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <read_adc+0x18>
     e4c:	22 0f       	add	r18, r18
     e4e:	0a 94       	dec	r0
     e50:	ea f7       	brpl	.-6      	; 0xe4c <read_adc+0x16>
     e52:	20 95       	com	r18
     e54:	29 23       	and	r18, r25
     e56:	27 b9       	out	0x07, r18	; 7
	if (pin > 7){
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
     e58:	4f 5f       	subi	r20, 0xFF	; 255
     e5a:	5f 4f       	sbci	r21, 0xFF	; 255
     e5c:	45 30       	cpi	r20, 0x05	; 5
     e5e:	51 05       	cpc	r21, r1
     e60:	89 f7       	brne	.-30     	; 0xe44 <read_adc+0xe>
		ADMUX &= ~(1 << i);
	}
	//set the new mux bit
	ADMUX |= pin;
     e62:	97 b1       	in	r25, 0x07	; 7
     e64:	89 2f       	mov	r24, r25
     e66:	8e 2b       	or	r24, r30
     e68:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
     e6a:	36 9a       	sbi	0x06, 6	; 6
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
     e6c:	34 9b       	sbis	0x06, 4	; 6
     e6e:	fe cf       	rjmp	.-4      	; 0xe6c <read_adc+0x36>
	data = ADCL;
     e70:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);
     e72:	25 b1       	in	r18, 0x05	; 5
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	92 2b       	or	r25, r18
     e78:	08 95       	ret

}
int read_adc(int pin){
	int data;
	if (pin > 7){
		return -1;
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	9f ef       	ldi	r25, 0xFF	; 255
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
	data = ADCL;
	data |= (ADCH << 8);
	return data;
}
     e7e:	08 95       	ret

00000e80 <get_voltage>:
     e80:	88 30       	cpi	r24, 0x08	; 8
     e82:	91 05       	cpc	r25, r1
     e84:	20 f0       	brcs	.+8      	; 0xe8e <get_voltage+0xe>
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	cb 01       	movw	r24, r22
     e8c:	08 95       	ret
     e8e:	0e 94 1b 07 	call	0xe36	; 0xe36 <read_adc>
     e92:	bc 01       	movw	r22, r24
     e94:	99 0f       	add	r25, r25
     e96:	88 0b       	sbc	r24, r24
     e98:	99 0b       	sbc	r25, r25
     e9a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__floatsisf>
     e9e:	2a e0       	ldi	r18, 0x0A	; 10
     ea0:	37 ed       	ldi	r19, 0xD7	; 215
     ea2:	43 e2       	ldi	r20, 0x23	; 35
     ea4:	5b e3       	ldi	r21, 0x3B	; 59
     ea6:	0e 94 36 0a 	call	0x146c	; 0x146c <__mulsf3>
     eaa:	08 95       	ret

00000eac <main>:
float getHeading(void);

#define PSENSOR_MIN .5      //voltage at sea level (just above water)
#define PSENSOR_PIN 0       //PORTF pin that is attach to sensor

int main(){
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <main+0x6>
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <main+0x8>
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     eb8:	80 91 61 00 	lds	r24, 0x0061
     ebc:	88 60       	ori	r24, 0x08	; 8
     ebe:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initalization for SPI
     ec2:	88 b3       	in	r24, 0x18	; 24
     ec4:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     ec6:	87 b3       	in	r24, 0x17	; 23
     ec8:	87 60       	ori	r24, 0x07	; 7
     eca:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     ecc:	80 e5       	ldi	r24, 0x50	; 80
     ece:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	8e b9       	out	0x0e, r24	; 14
#define PSENSOR_PIN 0       //PORTF pin that is attach to sensor

int main(){

    spi_init();
    lcd_init();
     ed4:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_init>

    double depth; 
    int adc;
    enable_adc(PSENSOR_PIN);
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 0a 07 	call	0xe14	; 0xe14 <enable_adc>
    unsigned char buffer[MAX_STRING_SIZE]; 
    int i;
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        buffer[i] = ' ';
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	8b 83       	std	Y+3, r24	; 0x03
     ee8:	8c 83       	std	Y+4, r24	; 0x04
    }

    string2lcd("Hello World");
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	0e 94 ad 03 	call	0x75a	; 0x75a <string2lcd>
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     ef2:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = (unsigned char)ubrr;
     ef6:	87 e6       	ldi	r24, 0x67	; 103
     ef8:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     efa:	88 e1       	ldi	r24, 0x18	; 24
     efc:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 1stop bit */ 
    UCSR0C = (3<<UCSZ00);
     efe:	86 e0       	ldi	r24, 0x06	; 6
     f00:	80 93 95 00 	sts	0x0095, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f04:	2f ef       	ldi	r18, 0xFF	; 255
     f06:	81 ee       	ldi	r24, 0xE1	; 225
     f08:	94 e0       	ldi	r25, 0x04	; 4
     f0a:	21 50       	subi	r18, 0x01	; 1
     f0c:	80 40       	sbci	r24, 0x00	; 0
     f0e:	90 40       	sbci	r25, 0x00	; 0
     f10:	e1 f7       	brne	.-8      	; 0xf0a <main+0x5e>
     f12:	00 c0       	rjmp	.+0      	; 0xf14 <main+0x68>
     f14:	00 00       	nop
     f16:	2f ef       	ldi	r18, 0xFF	; 255
     f18:	81 ee       	ldi	r24, 0xE1	; 225
     f1a:	94 e0       	ldi	r25, 0x04	; 4
     f1c:	21 50       	subi	r18, 0x01	; 1
     f1e:	80 40       	sbci	r24, 0x00	; 0
     f20:	90 40       	sbci	r25, 0x00	; 0
     f22:	e1 f7       	brne	.-8      	; 0xf1c <main+0x70>
     f24:	00 c0       	rjmp	.+0      	; 0xf26 <main+0x7a>
     f26:	00 00       	nop
    USART0_Init(MYUBRR);
    _delay_ms(100);

    while (1){

        adc = read_adc(PSENSOR_PIN);
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 1b 07 	call	0xe36	; 0xe36 <read_adc>
     f30:	4a e0       	ldi	r20, 0x0A	; 10
     f32:	be 01       	movw	r22, r28
     f34:	6f 5f       	subi	r22, 0xFF	; 255
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	0e 94 ef 0a 	call	0x15de	; 0x15de <__itoa_ncheck>
        itoa(adc,(char*)buffer,10);
        string2lcd(buffer);
     f3c:	ce 01       	movw	r24, r28
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	0e 94 ad 03 	call	0x75a	; 0x75a <string2lcd>
     f44:	ed e0       	ldi	r30, 0x0D	; 13
     f46:	f1 e0       	ldi	r31, 0x01	; 1
     f48:	80 e2       	ldi	r24, 0x20	; 32
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     f4a:	5d 9b       	sbis	0x0b, 5	; 11
     f4c:	fe cf       	rjmp	.-4      	; 0xf4a <main+0x9e>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     f4e:	8c b9       	out	0x0c, r24	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     f50:	81 91       	ld	r24, Z+
     f52:	81 11       	cpse	r24, r1
     f54:	fa cf       	rjmp	.-12     	; 0xf4a <main+0x9e>
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	88 23       	and	r24, r24
     f5a:	41 f0       	breq	.+16     	; 0xf6c <main+0xc0>
     f5c:	fe 01       	movw	r30, r28
     f5e:	32 96       	adiw	r30, 0x02	; 2
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     f60:	5d 9b       	sbis	0x0b, 5	; 11
     f62:	fe cf       	rjmp	.-4      	; 0xf60 <main+0xb4>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     f64:	8c b9       	out	0x0c, r24	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     f66:	81 91       	ld	r24, Z+
     f68:	81 11       	cpse	r24, r1
     f6a:	fa cf       	rjmp	.-12     	; 0xf60 <main+0xb4>
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     f6c:	5d 9b       	sbis	0x0b, 5	; 11
     f6e:	fe cf       	rjmp	.-4      	; 0xf6c <main+0xc0>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     f70:	8a e0       	ldi	r24, 0x0A	; 10
     f72:	8c b9       	out	0x0c, r24	; 12
     f74:	2f ef       	ldi	r18, 0xFF	; 255
     f76:	81 ee       	ldi	r24, 0xE1	; 225
     f78:	94 e0       	ldi	r25, 0x04	; 4
     f7a:	21 50       	subi	r18, 0x01	; 1
     f7c:	80 40       	sbci	r24, 0x00	; 0
     f7e:	90 40       	sbci	r25, 0x00	; 0
     f80:	e1 f7       	brne	.-8      	; 0xf7a <main+0xce>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <main+0xd8>
     f84:	00 00       	nop
     f86:	d0 cf       	rjmp	.-96     	; 0xf28 <main+0x7c>

00000f88 <__subsf3>:
     f88:	50 58       	subi	r21, 0x80	; 128

00000f8a <__addsf3>:
     f8a:	bb 27       	eor	r27, r27
     f8c:	aa 27       	eor	r26, r26
     f8e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__addsf3x>
     f92:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_round>
     f96:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fp_pscA>
     f9a:	38 f0       	brcs	.+14     	; 0xfaa <__addsf3+0x20>
     f9c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__fp_pscB>
     fa0:	20 f0       	brcs	.+8      	; 0xfaa <__addsf3+0x20>
     fa2:	39 f4       	brne	.+14     	; 0xfb2 <__addsf3+0x28>
     fa4:	9f 3f       	cpi	r25, 0xFF	; 255
     fa6:	19 f4       	brne	.+6      	; 0xfae <__addsf3+0x24>
     fa8:	26 f4       	brtc	.+8      	; 0xfb2 <__addsf3+0x28>
     faa:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__fp_nan>
     fae:	0e f4       	brtc	.+2      	; 0xfb2 <__addsf3+0x28>
     fb0:	e0 95       	com	r30
     fb2:	e7 fb       	bst	r30, 7
     fb4:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_inf>

00000fb8 <__addsf3x>:
     fb8:	e9 2f       	mov	r30, r25
     fba:	0e 94 00 0a 	call	0x1400	; 0x1400 <__fp_split3>
     fbe:	58 f3       	brcs	.-42     	; 0xf96 <__addsf3+0xc>
     fc0:	ba 17       	cp	r27, r26
     fc2:	62 07       	cpc	r22, r18
     fc4:	73 07       	cpc	r23, r19
     fc6:	84 07       	cpc	r24, r20
     fc8:	95 07       	cpc	r25, r21
     fca:	20 f0       	brcs	.+8      	; 0xfd4 <__addsf3x+0x1c>
     fcc:	79 f4       	brne	.+30     	; 0xfec <__addsf3x+0x34>
     fce:	a6 f5       	brtc	.+104    	; 0x1038 <__addsf3x+0x80>
     fd0:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_zero>
     fd4:	0e f4       	brtc	.+2      	; 0xfd8 <__addsf3x+0x20>
     fd6:	e0 95       	com	r30
     fd8:	0b 2e       	mov	r0, r27
     fda:	ba 2f       	mov	r27, r26
     fdc:	a0 2d       	mov	r26, r0
     fde:	0b 01       	movw	r0, r22
     fe0:	b9 01       	movw	r22, r18
     fe2:	90 01       	movw	r18, r0
     fe4:	0c 01       	movw	r0, r24
     fe6:	ca 01       	movw	r24, r20
     fe8:	a0 01       	movw	r20, r0
     fea:	11 24       	eor	r1, r1
     fec:	ff 27       	eor	r31, r31
     fee:	59 1b       	sub	r21, r25
     ff0:	99 f0       	breq	.+38     	; 0x1018 <__addsf3x+0x60>
     ff2:	59 3f       	cpi	r21, 0xF9	; 249
     ff4:	50 f4       	brcc	.+20     	; 0x100a <__addsf3x+0x52>
     ff6:	50 3e       	cpi	r21, 0xE0	; 224
     ff8:	68 f1       	brcs	.+90     	; 0x1054 <__addsf3x+0x9c>
     ffa:	1a 16       	cp	r1, r26
     ffc:	f0 40       	sbci	r31, 0x00	; 0
     ffe:	a2 2f       	mov	r26, r18
    1000:	23 2f       	mov	r18, r19
    1002:	34 2f       	mov	r19, r20
    1004:	44 27       	eor	r20, r20
    1006:	58 5f       	subi	r21, 0xF8	; 248
    1008:	f3 cf       	rjmp	.-26     	; 0xff0 <__addsf3x+0x38>
    100a:	46 95       	lsr	r20
    100c:	37 95       	ror	r19
    100e:	27 95       	ror	r18
    1010:	a7 95       	ror	r26
    1012:	f0 40       	sbci	r31, 0x00	; 0
    1014:	53 95       	inc	r21
    1016:	c9 f7       	brne	.-14     	; 0x100a <__addsf3x+0x52>
    1018:	7e f4       	brtc	.+30     	; 0x1038 <__addsf3x+0x80>
    101a:	1f 16       	cp	r1, r31
    101c:	ba 0b       	sbc	r27, r26
    101e:	62 0b       	sbc	r22, r18
    1020:	73 0b       	sbc	r23, r19
    1022:	84 0b       	sbc	r24, r20
    1024:	ba f0       	brmi	.+46     	; 0x1054 <__addsf3x+0x9c>
    1026:	91 50       	subi	r25, 0x01	; 1
    1028:	a1 f0       	breq	.+40     	; 0x1052 <__addsf3x+0x9a>
    102a:	ff 0f       	add	r31, r31
    102c:	bb 1f       	adc	r27, r27
    102e:	66 1f       	adc	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	88 1f       	adc	r24, r24
    1034:	c2 f7       	brpl	.-16     	; 0x1026 <__addsf3x+0x6e>
    1036:	0e c0       	rjmp	.+28     	; 0x1054 <__addsf3x+0x9c>
    1038:	ba 0f       	add	r27, r26
    103a:	62 1f       	adc	r22, r18
    103c:	73 1f       	adc	r23, r19
    103e:	84 1f       	adc	r24, r20
    1040:	48 f4       	brcc	.+18     	; 0x1054 <__addsf3x+0x9c>
    1042:	87 95       	ror	r24
    1044:	77 95       	ror	r23
    1046:	67 95       	ror	r22
    1048:	b7 95       	ror	r27
    104a:	f7 95       	ror	r31
    104c:	9e 3f       	cpi	r25, 0xFE	; 254
    104e:	08 f0       	brcs	.+2      	; 0x1052 <__addsf3x+0x9a>
    1050:	b0 cf       	rjmp	.-160    	; 0xfb2 <__addsf3+0x28>
    1052:	93 95       	inc	r25
    1054:	88 0f       	add	r24, r24
    1056:	08 f0       	brcs	.+2      	; 0x105a <__addsf3x+0xa2>
    1058:	99 27       	eor	r25, r25
    105a:	ee 0f       	add	r30, r30
    105c:	97 95       	ror	r25
    105e:	87 95       	ror	r24
    1060:	08 95       	ret
    1062:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fp_pscA>
    1066:	60 f0       	brcs	.+24     	; 0x1080 <__addsf3x+0xc8>
    1068:	80 e8       	ldi	r24, 0x80	; 128
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	09 f4       	brne	.+2      	; 0x1070 <__addsf3x+0xb8>
    106e:	9e ef       	ldi	r25, 0xFE	; 254
    1070:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__fp_pscB>
    1074:	28 f0       	brcs	.+10     	; 0x1080 <__addsf3x+0xc8>
    1076:	40 e8       	ldi	r20, 0x80	; 128
    1078:	51 e0       	ldi	r21, 0x01	; 1
    107a:	71 f4       	brne	.+28     	; 0x1098 <atan2+0x10>
    107c:	5e ef       	ldi	r21, 0xFE	; 254
    107e:	0c c0       	rjmp	.+24     	; 0x1098 <atan2+0x10>
    1080:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__fp_nan>
    1084:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_zero>

00001088 <atan2>:
    1088:	e9 2f       	mov	r30, r25
    108a:	e0 78       	andi	r30, 0x80	; 128
    108c:	0e 94 00 0a 	call	0x1400	; 0x1400 <__fp_split3>
    1090:	40 f3       	brcs	.-48     	; 0x1062 <__addsf3x+0xaa>
    1092:	09 2e       	mov	r0, r25
    1094:	05 2a       	or	r0, r21
    1096:	b1 f3       	breq	.-20     	; 0x1084 <__addsf3x+0xcc>
    1098:	26 17       	cp	r18, r22
    109a:	37 07       	cpc	r19, r23
    109c:	48 07       	cpc	r20, r24
    109e:	59 07       	cpc	r21, r25
    10a0:	38 f0       	brcs	.+14     	; 0x10b0 <atan2+0x28>
    10a2:	0e 2e       	mov	r0, r30
    10a4:	07 f8       	bld	r0, 7
    10a6:	e0 25       	eor	r30, r0
    10a8:	69 f0       	breq	.+26     	; 0x10c4 <atan2+0x3c>
    10aa:	e0 25       	eor	r30, r0
    10ac:	e0 64       	ori	r30, 0x40	; 64
    10ae:	0a c0       	rjmp	.+20     	; 0x10c4 <atan2+0x3c>
    10b0:	ef 63       	ori	r30, 0x3F	; 63
    10b2:	07 f8       	bld	r0, 7
    10b4:	00 94       	com	r0
    10b6:	07 fa       	bst	r0, 7
    10b8:	db 01       	movw	r26, r22
    10ba:	b9 01       	movw	r22, r18
    10bc:	9d 01       	movw	r18, r26
    10be:	dc 01       	movw	r26, r24
    10c0:	ca 01       	movw	r24, r20
    10c2:	ad 01       	movw	r20, r26
    10c4:	ef 93       	push	r30
    10c6:	0e 94 bf 08 	call	0x117e	; 0x117e <__divsf3_pse>
    10ca:	0e 94 ef 09 	call	0x13de	; 0x13de <__fp_round>
    10ce:	0e 94 74 08 	call	0x10e8	; 0x10e8 <atan>
    10d2:	5f 91       	pop	r21
    10d4:	55 23       	and	r21, r21
    10d6:	39 f0       	breq	.+14     	; 0x10e6 <atan2+0x5e>
    10d8:	2b ed       	ldi	r18, 0xDB	; 219
    10da:	3f e0       	ldi	r19, 0x0F	; 15
    10dc:	49 e4       	ldi	r20, 0x49	; 73
    10de:	50 fd       	sbrc	r21, 0
    10e0:	49 ec       	ldi	r20, 0xC9	; 201
    10e2:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__addsf3>
    10e6:	08 95       	ret

000010e8 <atan>:
    10e8:	df 93       	push	r29
    10ea:	dd 27       	eor	r29, r29
    10ec:	b9 2f       	mov	r27, r25
    10ee:	bf 77       	andi	r27, 0x7F	; 127
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	16 16       	cp	r1, r22
    10f6:	17 06       	cpc	r1, r23
    10f8:	48 07       	cpc	r20, r24
    10fa:	5b 07       	cpc	r21, r27
    10fc:	18 f4       	brcc	.+6      	; 0x1104 <__stack+0x5>
    10fe:	d9 2f       	mov	r29, r25
    1100:	0e 94 2e 0a 	call	0x145c	; 0x145c <inverse>
    1104:	9f 93       	push	r25
    1106:	8f 93       	push	r24
    1108:	7f 93       	push	r23
    110a:	6f 93       	push	r22
    110c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <square>
    1110:	ec e8       	ldi	r30, 0x8C	; 140
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	0e 94 ba 09 	call	0x1374	; 0x1374 <__fp_powser>
    1118:	0e 94 ef 09 	call	0x13de	; 0x13de <__fp_round>
    111c:	2f 91       	pop	r18
    111e:	3f 91       	pop	r19
    1120:	4f 91       	pop	r20
    1122:	5f 91       	pop	r21
    1124:	0e 94 49 0a 	call	0x1492	; 0x1492 <__mulsf3x>
    1128:	dd 23       	and	r29, r29
    112a:	51 f0       	breq	.+20     	; 0x1140 <__stack+0x41>
    112c:	90 58       	subi	r25, 0x80	; 128
    112e:	a2 ea       	ldi	r26, 0xA2	; 162
    1130:	2a ed       	ldi	r18, 0xDA	; 218
    1132:	3f e0       	ldi	r19, 0x0F	; 15
    1134:	49 ec       	ldi	r20, 0xC9	; 201
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	d0 78       	andi	r29, 0x80	; 128
    113a:	5d 27       	eor	r21, r29
    113c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__addsf3x>
    1140:	df 91       	pop	r29
    1142:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_round>

00001146 <__cmpsf2>:
    1146:	0e 94 8d 09 	call	0x131a	; 0x131a <__fp_cmp>
    114a:	08 f4       	brcc	.+2      	; 0x114e <__cmpsf2+0x8>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	08 95       	ret

00001150 <__divsf3>:
    1150:	0e 94 bc 08 	call	0x1178	; 0x1178 <__divsf3x>
    1154:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_round>
    1158:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__fp_pscB>
    115c:	58 f0       	brcs	.+22     	; 0x1174 <__divsf3+0x24>
    115e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fp_pscA>
    1162:	40 f0       	brcs	.+16     	; 0x1174 <__divsf3+0x24>
    1164:	29 f4       	brne	.+10     	; 0x1170 <__divsf3+0x20>
    1166:	5f 3f       	cpi	r21, 0xFF	; 255
    1168:	29 f0       	breq	.+10     	; 0x1174 <__divsf3+0x24>
    116a:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_inf>
    116e:	51 11       	cpse	r21, r1
    1170:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__fp_szero>
    1174:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__fp_nan>

00001178 <__divsf3x>:
    1178:	0e 94 00 0a 	call	0x1400	; 0x1400 <__fp_split3>
    117c:	68 f3       	brcs	.-38     	; 0x1158 <__divsf3+0x8>

0000117e <__divsf3_pse>:
    117e:	99 23       	and	r25, r25
    1180:	b1 f3       	breq	.-20     	; 0x116e <__divsf3+0x1e>
    1182:	55 23       	and	r21, r21
    1184:	91 f3       	breq	.-28     	; 0x116a <__divsf3+0x1a>
    1186:	95 1b       	sub	r25, r21
    1188:	55 0b       	sbc	r21, r21
    118a:	bb 27       	eor	r27, r27
    118c:	aa 27       	eor	r26, r26
    118e:	62 17       	cp	r22, r18
    1190:	73 07       	cpc	r23, r19
    1192:	84 07       	cpc	r24, r20
    1194:	38 f0       	brcs	.+14     	; 0x11a4 <__divsf3_pse+0x26>
    1196:	9f 5f       	subi	r25, 0xFF	; 255
    1198:	5f 4f       	sbci	r21, 0xFF	; 255
    119a:	22 0f       	add	r18, r18
    119c:	33 1f       	adc	r19, r19
    119e:	44 1f       	adc	r20, r20
    11a0:	aa 1f       	adc	r26, r26
    11a2:	a9 f3       	breq	.-22     	; 0x118e <__divsf3_pse+0x10>
    11a4:	35 d0       	rcall	.+106    	; 0x1210 <__divsf3_pse+0x92>
    11a6:	0e 2e       	mov	r0, r30
    11a8:	3a f0       	brmi	.+14     	; 0x11b8 <__divsf3_pse+0x3a>
    11aa:	e0 e8       	ldi	r30, 0x80	; 128
    11ac:	32 d0       	rcall	.+100    	; 0x1212 <__divsf3_pse+0x94>
    11ae:	91 50       	subi	r25, 0x01	; 1
    11b0:	50 40       	sbci	r21, 0x00	; 0
    11b2:	e6 95       	lsr	r30
    11b4:	00 1c       	adc	r0, r0
    11b6:	ca f7       	brpl	.-14     	; 0x11aa <__divsf3_pse+0x2c>
    11b8:	2b d0       	rcall	.+86     	; 0x1210 <__divsf3_pse+0x92>
    11ba:	fe 2f       	mov	r31, r30
    11bc:	29 d0       	rcall	.+82     	; 0x1210 <__divsf3_pse+0x92>
    11be:	66 0f       	add	r22, r22
    11c0:	77 1f       	adc	r23, r23
    11c2:	88 1f       	adc	r24, r24
    11c4:	bb 1f       	adc	r27, r27
    11c6:	26 17       	cp	r18, r22
    11c8:	37 07       	cpc	r19, r23
    11ca:	48 07       	cpc	r20, r24
    11cc:	ab 07       	cpc	r26, r27
    11ce:	b0 e8       	ldi	r27, 0x80	; 128
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <__divsf3_pse+0x56>
    11d2:	bb 0b       	sbc	r27, r27
    11d4:	80 2d       	mov	r24, r0
    11d6:	bf 01       	movw	r22, r30
    11d8:	ff 27       	eor	r31, r31
    11da:	93 58       	subi	r25, 0x83	; 131
    11dc:	5f 4f       	sbci	r21, 0xFF	; 255
    11de:	3a f0       	brmi	.+14     	; 0x11ee <__divsf3_pse+0x70>
    11e0:	9e 3f       	cpi	r25, 0xFE	; 254
    11e2:	51 05       	cpc	r21, r1
    11e4:	78 f0       	brcs	.+30     	; 0x1204 <__divsf3_pse+0x86>
    11e6:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_inf>
    11ea:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__fp_szero>
    11ee:	5f 3f       	cpi	r21, 0xFF	; 255
    11f0:	e4 f3       	brlt	.-8      	; 0x11ea <__divsf3_pse+0x6c>
    11f2:	98 3e       	cpi	r25, 0xE8	; 232
    11f4:	d4 f3       	brlt	.-12     	; 0x11ea <__divsf3_pse+0x6c>
    11f6:	86 95       	lsr	r24
    11f8:	77 95       	ror	r23
    11fa:	67 95       	ror	r22
    11fc:	b7 95       	ror	r27
    11fe:	f7 95       	ror	r31
    1200:	9f 5f       	subi	r25, 0xFF	; 255
    1202:	c9 f7       	brne	.-14     	; 0x11f6 <__divsf3_pse+0x78>
    1204:	88 0f       	add	r24, r24
    1206:	91 1d       	adc	r25, r1
    1208:	96 95       	lsr	r25
    120a:	87 95       	ror	r24
    120c:	97 f9       	bld	r25, 7
    120e:	08 95       	ret
    1210:	e1 e0       	ldi	r30, 0x01	; 1
    1212:	66 0f       	add	r22, r22
    1214:	77 1f       	adc	r23, r23
    1216:	88 1f       	adc	r24, r24
    1218:	bb 1f       	adc	r27, r27
    121a:	62 17       	cp	r22, r18
    121c:	73 07       	cpc	r23, r19
    121e:	84 07       	cpc	r24, r20
    1220:	ba 07       	cpc	r27, r26
    1222:	20 f0       	brcs	.+8      	; 0x122c <__divsf3_pse+0xae>
    1224:	62 1b       	sub	r22, r18
    1226:	73 0b       	sbc	r23, r19
    1228:	84 0b       	sbc	r24, r20
    122a:	ba 0b       	sbc	r27, r26
    122c:	ee 1f       	adc	r30, r30
    122e:	88 f7       	brcc	.-30     	; 0x1212 <__divsf3_pse+0x94>
    1230:	e0 95       	com	r30
    1232:	08 95       	ret

00001234 <__fixsfsi>:
    1234:	0e 94 21 09 	call	0x1242	; 0x1242 <__fixunssfsi>
    1238:	68 94       	set
    123a:	b1 11       	cpse	r27, r1
    123c:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__fp_szero>
    1240:	08 95       	ret

00001242 <__fixunssfsi>:
    1242:	0e 94 08 0a 	call	0x1410	; 0x1410 <__fp_splitA>
    1246:	88 f0       	brcs	.+34     	; 0x126a <__fixunssfsi+0x28>
    1248:	9f 57       	subi	r25, 0x7F	; 127
    124a:	98 f0       	brcs	.+38     	; 0x1272 <__fixunssfsi+0x30>
    124c:	b9 2f       	mov	r27, r25
    124e:	99 27       	eor	r25, r25
    1250:	b7 51       	subi	r27, 0x17	; 23
    1252:	b0 f0       	brcs	.+44     	; 0x1280 <__fixunssfsi+0x3e>
    1254:	e1 f0       	breq	.+56     	; 0x128e <__fixunssfsi+0x4c>
    1256:	66 0f       	add	r22, r22
    1258:	77 1f       	adc	r23, r23
    125a:	88 1f       	adc	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	1a f0       	brmi	.+6      	; 0x1266 <__fixunssfsi+0x24>
    1260:	ba 95       	dec	r27
    1262:	c9 f7       	brne	.-14     	; 0x1256 <__fixunssfsi+0x14>
    1264:	14 c0       	rjmp	.+40     	; 0x128e <__fixunssfsi+0x4c>
    1266:	b1 30       	cpi	r27, 0x01	; 1
    1268:	91 f0       	breq	.+36     	; 0x128e <__fixunssfsi+0x4c>
    126a:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fp_zero>
    126e:	b1 e0       	ldi	r27, 0x01	; 1
    1270:	08 95       	ret
    1272:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_zero>
    1276:	67 2f       	mov	r22, r23
    1278:	78 2f       	mov	r23, r24
    127a:	88 27       	eor	r24, r24
    127c:	b8 5f       	subi	r27, 0xF8	; 248
    127e:	39 f0       	breq	.+14     	; 0x128e <__fixunssfsi+0x4c>
    1280:	b9 3f       	cpi	r27, 0xF9	; 249
    1282:	cc f3       	brlt	.-14     	; 0x1276 <__fixunssfsi+0x34>
    1284:	86 95       	lsr	r24
    1286:	77 95       	ror	r23
    1288:	67 95       	ror	r22
    128a:	b3 95       	inc	r27
    128c:	d9 f7       	brne	.-10     	; 0x1284 <__fixunssfsi+0x42>
    128e:	3e f4       	brtc	.+14     	; 0x129e <__fixunssfsi+0x5c>
    1290:	90 95       	com	r25
    1292:	80 95       	com	r24
    1294:	70 95       	com	r23
    1296:	61 95       	neg	r22
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	8f 4f       	sbci	r24, 0xFF	; 255
    129c:	9f 4f       	sbci	r25, 0xFF	; 255
    129e:	08 95       	ret

000012a0 <__floatunsisf>:
    12a0:	e8 94       	clt
    12a2:	09 c0       	rjmp	.+18     	; 0x12b6 <__floatsisf+0x12>

000012a4 <__floatsisf>:
    12a4:	97 fb       	bst	r25, 7
    12a6:	3e f4       	brtc	.+14     	; 0x12b6 <__floatsisf+0x12>
    12a8:	90 95       	com	r25
    12aa:	80 95       	com	r24
    12ac:	70 95       	com	r23
    12ae:	61 95       	neg	r22
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	8f 4f       	sbci	r24, 0xFF	; 255
    12b4:	9f 4f       	sbci	r25, 0xFF	; 255
    12b6:	99 23       	and	r25, r25
    12b8:	a9 f0       	breq	.+42     	; 0x12e4 <__floatsisf+0x40>
    12ba:	f9 2f       	mov	r31, r25
    12bc:	96 e9       	ldi	r25, 0x96	; 150
    12be:	bb 27       	eor	r27, r27
    12c0:	93 95       	inc	r25
    12c2:	f6 95       	lsr	r31
    12c4:	87 95       	ror	r24
    12c6:	77 95       	ror	r23
    12c8:	67 95       	ror	r22
    12ca:	b7 95       	ror	r27
    12cc:	f1 11       	cpse	r31, r1
    12ce:	f8 cf       	rjmp	.-16     	; 0x12c0 <__floatsisf+0x1c>
    12d0:	fa f4       	brpl	.+62     	; 0x1310 <__floatsisf+0x6c>
    12d2:	bb 0f       	add	r27, r27
    12d4:	11 f4       	brne	.+4      	; 0x12da <__floatsisf+0x36>
    12d6:	60 ff       	sbrs	r22, 0
    12d8:	1b c0       	rjmp	.+54     	; 0x1310 <__floatsisf+0x6c>
    12da:	6f 5f       	subi	r22, 0xFF	; 255
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	16 c0       	rjmp	.+44     	; 0x1310 <__floatsisf+0x6c>
    12e4:	88 23       	and	r24, r24
    12e6:	11 f0       	breq	.+4      	; 0x12ec <__floatsisf+0x48>
    12e8:	96 e9       	ldi	r25, 0x96	; 150
    12ea:	11 c0       	rjmp	.+34     	; 0x130e <__floatsisf+0x6a>
    12ec:	77 23       	and	r23, r23
    12ee:	21 f0       	breq	.+8      	; 0x12f8 <__floatsisf+0x54>
    12f0:	9e e8       	ldi	r25, 0x8E	; 142
    12f2:	87 2f       	mov	r24, r23
    12f4:	76 2f       	mov	r23, r22
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <__floatsisf+0x5e>
    12f8:	66 23       	and	r22, r22
    12fa:	71 f0       	breq	.+28     	; 0x1318 <__floatsisf+0x74>
    12fc:	96 e8       	ldi	r25, 0x86	; 134
    12fe:	86 2f       	mov	r24, r22
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	2a f0       	brmi	.+10     	; 0x1310 <__floatsisf+0x6c>
    1306:	9a 95       	dec	r25
    1308:	66 0f       	add	r22, r22
    130a:	77 1f       	adc	r23, r23
    130c:	88 1f       	adc	r24, r24
    130e:	da f7       	brpl	.-10     	; 0x1306 <__floatsisf+0x62>
    1310:	88 0f       	add	r24, r24
    1312:	96 95       	lsr	r25
    1314:	87 95       	ror	r24
    1316:	97 f9       	bld	r25, 7
    1318:	08 95       	ret

0000131a <__fp_cmp>:
    131a:	99 0f       	add	r25, r25
    131c:	00 08       	sbc	r0, r0
    131e:	55 0f       	add	r21, r21
    1320:	aa 0b       	sbc	r26, r26
    1322:	e0 e8       	ldi	r30, 0x80	; 128
    1324:	fe ef       	ldi	r31, 0xFE	; 254
    1326:	16 16       	cp	r1, r22
    1328:	17 06       	cpc	r1, r23
    132a:	e8 07       	cpc	r30, r24
    132c:	f9 07       	cpc	r31, r25
    132e:	c0 f0       	brcs	.+48     	; 0x1360 <__fp_cmp+0x46>
    1330:	12 16       	cp	r1, r18
    1332:	13 06       	cpc	r1, r19
    1334:	e4 07       	cpc	r30, r20
    1336:	f5 07       	cpc	r31, r21
    1338:	98 f0       	brcs	.+38     	; 0x1360 <__fp_cmp+0x46>
    133a:	62 1b       	sub	r22, r18
    133c:	73 0b       	sbc	r23, r19
    133e:	84 0b       	sbc	r24, r20
    1340:	95 0b       	sbc	r25, r21
    1342:	39 f4       	brne	.+14     	; 0x1352 <__fp_cmp+0x38>
    1344:	0a 26       	eor	r0, r26
    1346:	61 f0       	breq	.+24     	; 0x1360 <__fp_cmp+0x46>
    1348:	23 2b       	or	r18, r19
    134a:	24 2b       	or	r18, r20
    134c:	25 2b       	or	r18, r21
    134e:	21 f4       	brne	.+8      	; 0x1358 <__fp_cmp+0x3e>
    1350:	08 95       	ret
    1352:	0a 26       	eor	r0, r26
    1354:	09 f4       	brne	.+2      	; 0x1358 <__fp_cmp+0x3e>
    1356:	a1 40       	sbci	r26, 0x01	; 1
    1358:	a6 95       	lsr	r26
    135a:	8f ef       	ldi	r24, 0xFF	; 255
    135c:	81 1d       	adc	r24, r1
    135e:	81 1d       	adc	r24, r1
    1360:	08 95       	ret

00001362 <__fp_inf>:
    1362:	97 f9       	bld	r25, 7
    1364:	9f 67       	ori	r25, 0x7F	; 127
    1366:	80 e8       	ldi	r24, 0x80	; 128
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	08 95       	ret

0000136e <__fp_nan>:
    136e:	9f ef       	ldi	r25, 0xFF	; 255
    1370:	80 ec       	ldi	r24, 0xC0	; 192
    1372:	08 95       	ret

00001374 <__fp_powser>:
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	1f 93       	push	r17
    137a:	0f 93       	push	r16
    137c:	ff 92       	push	r15
    137e:	ef 92       	push	r14
    1380:	df 92       	push	r13
    1382:	7b 01       	movw	r14, r22
    1384:	8c 01       	movw	r16, r24
    1386:	68 94       	set
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <__fp_powser+0x22>
    138a:	da 2e       	mov	r13, r26
    138c:	ef 01       	movw	r28, r30
    138e:	0e 94 49 0a 	call	0x1492	; 0x1492 <__mulsf3x>
    1392:	fe 01       	movw	r30, r28
    1394:	e8 94       	clt
    1396:	a5 91       	lpm	r26, Z+
    1398:	25 91       	lpm	r18, Z+
    139a:	35 91       	lpm	r19, Z+
    139c:	45 91       	lpm	r20, Z+
    139e:	55 91       	lpm	r21, Z+
    13a0:	a6 f3       	brts	.-24     	; 0x138a <__fp_powser+0x16>
    13a2:	ef 01       	movw	r28, r30
    13a4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__addsf3x>
    13a8:	fe 01       	movw	r30, r28
    13aa:	97 01       	movw	r18, r14
    13ac:	a8 01       	movw	r20, r16
    13ae:	da 94       	dec	r13
    13b0:	69 f7       	brne	.-38     	; 0x138c <__fp_powser+0x18>
    13b2:	df 90       	pop	r13
    13b4:	ef 90       	pop	r14
    13b6:	ff 90       	pop	r15
    13b8:	0f 91       	pop	r16
    13ba:	1f 91       	pop	r17
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <__fp_pscA>:
    13c2:	00 24       	eor	r0, r0
    13c4:	0a 94       	dec	r0
    13c6:	16 16       	cp	r1, r22
    13c8:	17 06       	cpc	r1, r23
    13ca:	18 06       	cpc	r1, r24
    13cc:	09 06       	cpc	r0, r25
    13ce:	08 95       	ret

000013d0 <__fp_pscB>:
    13d0:	00 24       	eor	r0, r0
    13d2:	0a 94       	dec	r0
    13d4:	12 16       	cp	r1, r18
    13d6:	13 06       	cpc	r1, r19
    13d8:	14 06       	cpc	r1, r20
    13da:	05 06       	cpc	r0, r21
    13dc:	08 95       	ret

000013de <__fp_round>:
    13de:	09 2e       	mov	r0, r25
    13e0:	03 94       	inc	r0
    13e2:	00 0c       	add	r0, r0
    13e4:	11 f4       	brne	.+4      	; 0x13ea <__fp_round+0xc>
    13e6:	88 23       	and	r24, r24
    13e8:	52 f0       	brmi	.+20     	; 0x13fe <__fp_round+0x20>
    13ea:	bb 0f       	add	r27, r27
    13ec:	40 f4       	brcc	.+16     	; 0x13fe <__fp_round+0x20>
    13ee:	bf 2b       	or	r27, r31
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <__fp_round+0x18>
    13f2:	60 ff       	sbrs	r22, 0
    13f4:	04 c0       	rjmp	.+8      	; 0x13fe <__fp_round+0x20>
    13f6:	6f 5f       	subi	r22, 0xFF	; 255
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	8f 4f       	sbci	r24, 0xFF	; 255
    13fc:	9f 4f       	sbci	r25, 0xFF	; 255
    13fe:	08 95       	ret

00001400 <__fp_split3>:
    1400:	57 fd       	sbrc	r21, 7
    1402:	90 58       	subi	r25, 0x80	; 128
    1404:	44 0f       	add	r20, r20
    1406:	55 1f       	adc	r21, r21
    1408:	59 f0       	breq	.+22     	; 0x1420 <__fp_splitA+0x10>
    140a:	5f 3f       	cpi	r21, 0xFF	; 255
    140c:	71 f0       	breq	.+28     	; 0x142a <__fp_splitA+0x1a>
    140e:	47 95       	ror	r20

00001410 <__fp_splitA>:
    1410:	88 0f       	add	r24, r24
    1412:	97 fb       	bst	r25, 7
    1414:	99 1f       	adc	r25, r25
    1416:	61 f0       	breq	.+24     	; 0x1430 <__fp_splitA+0x20>
    1418:	9f 3f       	cpi	r25, 0xFF	; 255
    141a:	79 f0       	breq	.+30     	; 0x143a <__fp_splitA+0x2a>
    141c:	87 95       	ror	r24
    141e:	08 95       	ret
    1420:	12 16       	cp	r1, r18
    1422:	13 06       	cpc	r1, r19
    1424:	14 06       	cpc	r1, r20
    1426:	55 1f       	adc	r21, r21
    1428:	f2 cf       	rjmp	.-28     	; 0x140e <__fp_split3+0xe>
    142a:	46 95       	lsr	r20
    142c:	f1 df       	rcall	.-30     	; 0x1410 <__fp_splitA>
    142e:	08 c0       	rjmp	.+16     	; 0x1440 <__fp_splitA+0x30>
    1430:	16 16       	cp	r1, r22
    1432:	17 06       	cpc	r1, r23
    1434:	18 06       	cpc	r1, r24
    1436:	99 1f       	adc	r25, r25
    1438:	f1 cf       	rjmp	.-30     	; 0x141c <__fp_splitA+0xc>
    143a:	86 95       	lsr	r24
    143c:	71 05       	cpc	r23, r1
    143e:	61 05       	cpc	r22, r1
    1440:	08 94       	sec
    1442:	08 95       	ret

00001444 <__fp_zero>:
    1444:	e8 94       	clt

00001446 <__fp_szero>:
    1446:	bb 27       	eor	r27, r27
    1448:	66 27       	eor	r22, r22
    144a:	77 27       	eor	r23, r23
    144c:	cb 01       	movw	r24, r22
    144e:	97 f9       	bld	r25, 7
    1450:	08 95       	ret

00001452 <__gesf2>:
    1452:	0e 94 8d 09 	call	0x131a	; 0x131a <__fp_cmp>
    1456:	08 f4       	brcc	.+2      	; 0x145a <__gesf2+0x8>
    1458:	8f ef       	ldi	r24, 0xFF	; 255
    145a:	08 95       	ret

0000145c <inverse>:
    145c:	9b 01       	movw	r18, r22
    145e:	ac 01       	movw	r20, r24
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	80 e8       	ldi	r24, 0x80	; 128
    1466:	9f e3       	ldi	r25, 0x3F	; 63
    1468:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__divsf3>

0000146c <__mulsf3>:
    146c:	0e 94 49 0a 	call	0x1492	; 0x1492 <__mulsf3x>
    1470:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_round>
    1474:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fp_pscA>
    1478:	38 f0       	brcs	.+14     	; 0x1488 <__mulsf3+0x1c>
    147a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__fp_pscB>
    147e:	20 f0       	brcs	.+8      	; 0x1488 <__mulsf3+0x1c>
    1480:	95 23       	and	r25, r21
    1482:	11 f0       	breq	.+4      	; 0x1488 <__mulsf3+0x1c>
    1484:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_inf>
    1488:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__fp_nan>
    148c:	11 24       	eor	r1, r1
    148e:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__fp_szero>

00001492 <__mulsf3x>:
    1492:	0e 94 00 0a 	call	0x1400	; 0x1400 <__fp_split3>
    1496:	70 f3       	brcs	.-36     	; 0x1474 <__mulsf3+0x8>

00001498 <__mulsf3_pse>:
    1498:	95 9f       	mul	r25, r21
    149a:	c1 f3       	breq	.-16     	; 0x148c <__mulsf3+0x20>
    149c:	95 0f       	add	r25, r21
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	55 1f       	adc	r21, r21
    14a2:	62 9f       	mul	r22, r18
    14a4:	f0 01       	movw	r30, r0
    14a6:	72 9f       	mul	r23, r18
    14a8:	bb 27       	eor	r27, r27
    14aa:	f0 0d       	add	r31, r0
    14ac:	b1 1d       	adc	r27, r1
    14ae:	63 9f       	mul	r22, r19
    14b0:	aa 27       	eor	r26, r26
    14b2:	f0 0d       	add	r31, r0
    14b4:	b1 1d       	adc	r27, r1
    14b6:	aa 1f       	adc	r26, r26
    14b8:	64 9f       	mul	r22, r20
    14ba:	66 27       	eor	r22, r22
    14bc:	b0 0d       	add	r27, r0
    14be:	a1 1d       	adc	r26, r1
    14c0:	66 1f       	adc	r22, r22
    14c2:	82 9f       	mul	r24, r18
    14c4:	22 27       	eor	r18, r18
    14c6:	b0 0d       	add	r27, r0
    14c8:	a1 1d       	adc	r26, r1
    14ca:	62 1f       	adc	r22, r18
    14cc:	73 9f       	mul	r23, r19
    14ce:	b0 0d       	add	r27, r0
    14d0:	a1 1d       	adc	r26, r1
    14d2:	62 1f       	adc	r22, r18
    14d4:	83 9f       	mul	r24, r19
    14d6:	a0 0d       	add	r26, r0
    14d8:	61 1d       	adc	r22, r1
    14da:	22 1f       	adc	r18, r18
    14dc:	74 9f       	mul	r23, r20
    14de:	33 27       	eor	r19, r19
    14e0:	a0 0d       	add	r26, r0
    14e2:	61 1d       	adc	r22, r1
    14e4:	23 1f       	adc	r18, r19
    14e6:	84 9f       	mul	r24, r20
    14e8:	60 0d       	add	r22, r0
    14ea:	21 1d       	adc	r18, r1
    14ec:	82 2f       	mov	r24, r18
    14ee:	76 2f       	mov	r23, r22
    14f0:	6a 2f       	mov	r22, r26
    14f2:	11 24       	eor	r1, r1
    14f4:	9f 57       	subi	r25, 0x7F	; 127
    14f6:	50 40       	sbci	r21, 0x00	; 0
    14f8:	9a f0       	brmi	.+38     	; 0x1520 <__mulsf3_pse+0x88>
    14fa:	f1 f0       	breq	.+60     	; 0x1538 <__mulsf3_pse+0xa0>
    14fc:	88 23       	and	r24, r24
    14fe:	4a f0       	brmi	.+18     	; 0x1512 <__mulsf3_pse+0x7a>
    1500:	ee 0f       	add	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	bb 1f       	adc	r27, r27
    1506:	66 1f       	adc	r22, r22
    1508:	77 1f       	adc	r23, r23
    150a:	88 1f       	adc	r24, r24
    150c:	91 50       	subi	r25, 0x01	; 1
    150e:	50 40       	sbci	r21, 0x00	; 0
    1510:	a9 f7       	brne	.-22     	; 0x14fc <__mulsf3_pse+0x64>
    1512:	9e 3f       	cpi	r25, 0xFE	; 254
    1514:	51 05       	cpc	r21, r1
    1516:	80 f0       	brcs	.+32     	; 0x1538 <__mulsf3_pse+0xa0>
    1518:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_inf>
    151c:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__fp_szero>
    1520:	5f 3f       	cpi	r21, 0xFF	; 255
    1522:	e4 f3       	brlt	.-8      	; 0x151c <__mulsf3_pse+0x84>
    1524:	98 3e       	cpi	r25, 0xE8	; 232
    1526:	d4 f3       	brlt	.-12     	; 0x151c <__mulsf3_pse+0x84>
    1528:	86 95       	lsr	r24
    152a:	77 95       	ror	r23
    152c:	67 95       	ror	r22
    152e:	b7 95       	ror	r27
    1530:	f7 95       	ror	r31
    1532:	e7 95       	ror	r30
    1534:	9f 5f       	subi	r25, 0xFF	; 255
    1536:	c1 f7       	brne	.-16     	; 0x1528 <__mulsf3_pse+0x90>
    1538:	fe 2b       	or	r31, r30
    153a:	88 0f       	add	r24, r24
    153c:	91 1d       	adc	r25, r1
    153e:	96 95       	lsr	r25
    1540:	87 95       	ror	r24
    1542:	97 f9       	bld	r25, 7
    1544:	08 95       	ret

00001546 <square>:
    1546:	9b 01       	movw	r18, r22
    1548:	ac 01       	movw	r20, r24
    154a:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__mulsf3>

0000154e <__divmodhi4>:
    154e:	97 fb       	bst	r25, 7
    1550:	07 2e       	mov	r0, r23
    1552:	16 f4       	brtc	.+4      	; 0x1558 <__divmodhi4+0xa>
    1554:	00 94       	com	r0
    1556:	07 d0       	rcall	.+14     	; 0x1566 <__divmodhi4_neg1>
    1558:	77 fd       	sbrc	r23, 7
    155a:	09 d0       	rcall	.+18     	; 0x156e <__divmodhi4_neg2>
    155c:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__udivmodhi4>
    1560:	07 fc       	sbrc	r0, 7
    1562:	05 d0       	rcall	.+10     	; 0x156e <__divmodhi4_neg2>
    1564:	3e f4       	brtc	.+14     	; 0x1574 <__divmodhi4_exit>

00001566 <__divmodhi4_neg1>:
    1566:	90 95       	com	r25
    1568:	81 95       	neg	r24
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	08 95       	ret

0000156e <__divmodhi4_neg2>:
    156e:	70 95       	com	r23
    1570:	61 95       	neg	r22
    1572:	7f 4f       	sbci	r23, 0xFF	; 255

00001574 <__divmodhi4_exit>:
    1574:	08 95       	ret

00001576 <__udivmodhi4>:
    1576:	aa 1b       	sub	r26, r26
    1578:	bb 1b       	sub	r27, r27
    157a:	51 e1       	ldi	r21, 0x11	; 17
    157c:	07 c0       	rjmp	.+14     	; 0x158c <__udivmodhi4_ep>

0000157e <__udivmodhi4_loop>:
    157e:	aa 1f       	adc	r26, r26
    1580:	bb 1f       	adc	r27, r27
    1582:	a6 17       	cp	r26, r22
    1584:	b7 07       	cpc	r27, r23
    1586:	10 f0       	brcs	.+4      	; 0x158c <__udivmodhi4_ep>
    1588:	a6 1b       	sub	r26, r22
    158a:	b7 0b       	sbc	r27, r23

0000158c <__udivmodhi4_ep>:
    158c:	88 1f       	adc	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	5a 95       	dec	r21
    1592:	a9 f7       	brne	.-22     	; 0x157e <__udivmodhi4_loop>
    1594:	80 95       	com	r24
    1596:	90 95       	com	r25
    1598:	bc 01       	movw	r22, r24
    159a:	cd 01       	movw	r24, r26
    159c:	08 95       	ret

0000159e <dtostrf>:
    159e:	ef 92       	push	r14
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	e8 01       	movw	r28, r16
    15aa:	47 fd       	sbrc	r20, 7
    15ac:	16 c0       	rjmp	.+44     	; 0x15da <dtostrf+0x3c>
    15ae:	34 e0       	ldi	r19, 0x04	; 4
    15b0:	04 2e       	mov	r0, r20
    15b2:	00 0c       	add	r0, r0
    15b4:	55 0b       	sbc	r21, r21
    15b6:	57 ff       	sbrs	r21, 7
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <dtostrf+0x22>
    15ba:	51 95       	neg	r21
    15bc:	41 95       	neg	r20
    15be:	51 09       	sbc	r21, r1
    15c0:	e3 2e       	mov	r14, r19
    15c2:	02 2f       	mov	r16, r18
    15c4:	24 2f       	mov	r18, r20
    15c6:	ae 01       	movw	r20, r28
    15c8:	0e 94 14 0b 	call	0x1628	; 0x1628 <dtoa_prf>
    15cc:	ce 01       	movw	r24, r28
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ef 90       	pop	r14
    15d8:	08 95       	ret
    15da:	34 e1       	ldi	r19, 0x14	; 20
    15dc:	e9 cf       	rjmp	.-46     	; 0x15b0 <dtostrf+0x12>

000015de <__itoa_ncheck>:
    15de:	bb 27       	eor	r27, r27
    15e0:	4a 30       	cpi	r20, 0x0A	; 10
    15e2:	31 f4       	brne	.+12     	; 0x15f0 <__itoa_ncheck+0x12>
    15e4:	99 23       	and	r25, r25
    15e6:	22 f4       	brpl	.+8      	; 0x15f0 <__itoa_ncheck+0x12>
    15e8:	bd e2       	ldi	r27, 0x2D	; 45
    15ea:	90 95       	com	r25
    15ec:	81 95       	neg	r24
    15ee:	9f 4f       	sbci	r25, 0xFF	; 255
    15f0:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__utoa_common>

000015f4 <__utoa_ncheck>:
    15f4:	bb 27       	eor	r27, r27

000015f6 <__utoa_common>:
    15f6:	fb 01       	movw	r30, r22
    15f8:	55 27       	eor	r21, r21
    15fa:	aa 27       	eor	r26, r26
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	aa 1f       	adc	r26, r26
    1602:	a4 17       	cp	r26, r20
    1604:	10 f0       	brcs	.+4      	; 0x160a <__utoa_common+0x14>
    1606:	a4 1b       	sub	r26, r20
    1608:	83 95       	inc	r24
    160a:	50 51       	subi	r21, 0x10	; 16
    160c:	b9 f7       	brne	.-18     	; 0x15fc <__utoa_common+0x6>
    160e:	a0 5d       	subi	r26, 0xD0	; 208
    1610:	aa 33       	cpi	r26, 0x3A	; 58
    1612:	08 f0       	brcs	.+2      	; 0x1616 <__utoa_common+0x20>
    1614:	a9 5d       	subi	r26, 0xD9	; 217
    1616:	a1 93       	st	Z+, r26
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	79 f7       	brne	.-34     	; 0x15fa <__utoa_common+0x4>
    161c:	b1 11       	cpse	r27, r1
    161e:	b1 93       	st	Z+, r27
    1620:	11 92       	st	Z+, r1
    1622:	cb 01       	movw	r24, r22
    1624:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <strrev>

00001628 <dtoa_prf>:
    1628:	8f 92       	push	r8
    162a:	9f 92       	push	r9
    162c:	af 92       	push	r10
    162e:	bf 92       	push	r11
    1630:	cf 92       	push	r12
    1632:	df 92       	push	r13
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	29 97       	sbiw	r28, 0x09	; 9
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	6a 01       	movw	r12, r20
    1652:	f2 2e       	mov	r15, r18
    1654:	b0 2e       	mov	r11, r16
    1656:	2b e3       	ldi	r18, 0x3B	; 59
    1658:	20 17       	cp	r18, r16
    165a:	08 f4       	brcc	.+2      	; 0x165e <dtoa_prf+0x36>
    165c:	5f c0       	rjmp	.+190    	; 0x171c <dtoa_prf+0xf4>
    165e:	11 e0       	ldi	r17, 0x01	; 1
    1660:	10 0f       	add	r17, r16
    1662:	01 2f       	mov	r16, r17
    1664:	27 e0       	ldi	r18, 0x07	; 7
    1666:	ae 01       	movw	r20, r28
    1668:	4f 5f       	subi	r20, 0xFF	; 255
    166a:	5f 4f       	sbci	r21, 0xFF	; 255
    166c:	0e 94 95 0c 	call	0x192a	; 0x192a <__ftoa_engine>
    1670:	bc 01       	movw	r22, r24
    1672:	39 81       	ldd	r19, Y+1	; 0x01
    1674:	83 2f       	mov	r24, r19
    1676:	89 70       	andi	r24, 0x09	; 9
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	09 f4       	brne	.+2      	; 0x167e <dtoa_prf+0x56>
    167c:	51 c0       	rjmp	.+162    	; 0x1720 <dtoa_prf+0xf8>
    167e:	e1 fc       	sbrc	r14, 1
    1680:	51 c0       	rjmp	.+162    	; 0x1724 <dtoa_prf+0xfc>
    1682:	9e 2d       	mov	r25, r14
    1684:	91 70       	andi	r25, 0x01	; 1
    1686:	e0 fc       	sbrc	r14, 0
    1688:	90 e2       	ldi	r25, 0x20	; 32
    168a:	ae 2d       	mov	r26, r14
    168c:	a0 71       	andi	r26, 0x10	; 16
    168e:	83 2f       	mov	r24, r19
    1690:	88 70       	andi	r24, 0x08	; 8
    1692:	33 ff       	sbrs	r19, 3
    1694:	5a c0       	rjmp	.+180    	; 0x174a <dtoa_prf+0x122>
    1696:	91 11       	cpse	r25, r1
    1698:	47 c0       	rjmp	.+142    	; 0x1728 <dtoa_prf+0x100>
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	8f 15       	cp	r24, r15
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <dtoa_prf+0x7a>
    16a0:	45 c0       	rjmp	.+138    	; 0x172c <dtoa_prf+0x104>
    16a2:	f8 1a       	sub	r15, r24
    16a4:	a1 11       	cpse	r26, r1
    16a6:	08 c0       	rjmp	.+16     	; 0x16b8 <dtoa_prf+0x90>
    16a8:	f6 01       	movw	r30, r12
    16aa:	8f 2d       	mov	r24, r15
    16ac:	20 e2       	ldi	r18, 0x20	; 32
    16ae:	81 11       	cpse	r24, r1
    16b0:	3f c0       	rjmp	.+126    	; 0x1730 <dtoa_prf+0x108>
    16b2:	cf 0c       	add	r12, r15
    16b4:	d1 1c       	adc	r13, r1
    16b6:	f1 2c       	mov	r15, r1
    16b8:	99 23       	and	r25, r25
    16ba:	29 f0       	breq	.+10     	; 0x16c6 <dtoa_prf+0x9e>
    16bc:	d6 01       	movw	r26, r12
    16be:	9c 93       	st	X, r25
    16c0:	f6 01       	movw	r30, r12
    16c2:	31 96       	adiw	r30, 0x01	; 1
    16c4:	6f 01       	movw	r12, r30
    16c6:	c6 01       	movw	r24, r12
    16c8:	03 96       	adiw	r24, 0x03	; 3
    16ca:	e2 fe       	sbrs	r14, 2
    16cc:	34 c0       	rjmp	.+104    	; 0x1736 <dtoa_prf+0x10e>
    16ce:	2e e4       	ldi	r18, 0x4E	; 78
    16d0:	d6 01       	movw	r26, r12
    16d2:	2c 93       	st	X, r18
    16d4:	31 e4       	ldi	r19, 0x41	; 65
    16d6:	11 96       	adiw	r26, 0x01	; 1
    16d8:	3c 93       	st	X, r19
    16da:	11 97       	sbiw	r26, 0x01	; 1
    16dc:	12 96       	adiw	r26, 0x02	; 2
    16de:	2c 93       	st	X, r18
    16e0:	fc 01       	movw	r30, r24
    16e2:	2f 2d       	mov	r18, r15
    16e4:	30 e2       	ldi	r19, 0x20	; 32
    16e6:	21 11       	cpse	r18, r1
    16e8:	2d c0       	rjmp	.+90     	; 0x1744 <dtoa_prf+0x11c>
    16ea:	8f 0d       	add	r24, r15
    16ec:	91 1d       	adc	r25, r1
    16ee:	dc 01       	movw	r26, r24
    16f0:	1c 92       	st	X, r1
    16f2:	8e ef       	ldi	r24, 0xFE	; 254
    16f4:	9f ef       	ldi	r25, 0xFF	; 255
    16f6:	29 96       	adiw	r28, 0x09	; 9
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	df 90       	pop	r13
    1710:	cf 90       	pop	r12
    1712:	bf 90       	pop	r11
    1714:	af 90       	pop	r10
    1716:	9f 90       	pop	r9
    1718:	8f 90       	pop	r8
    171a:	08 95       	ret
    171c:	1c e3       	ldi	r17, 0x3C	; 60
    171e:	a1 cf       	rjmp	.-190    	; 0x1662 <dtoa_prf+0x3a>
    1720:	9d e2       	ldi	r25, 0x2D	; 45
    1722:	b3 cf       	rjmp	.-154    	; 0x168a <dtoa_prf+0x62>
    1724:	9b e2       	ldi	r25, 0x2B	; 43
    1726:	b1 cf       	rjmp	.-158    	; 0x168a <dtoa_prf+0x62>
    1728:	84 e0       	ldi	r24, 0x04	; 4
    172a:	b8 cf       	rjmp	.-144    	; 0x169c <dtoa_prf+0x74>
    172c:	f1 2c       	mov	r15, r1
    172e:	ba cf       	rjmp	.-140    	; 0x16a4 <dtoa_prf+0x7c>
    1730:	21 93       	st	Z+, r18
    1732:	81 50       	subi	r24, 0x01	; 1
    1734:	bc cf       	rjmp	.-136    	; 0x16ae <dtoa_prf+0x86>
    1736:	2e e6       	ldi	r18, 0x6E	; 110
    1738:	f6 01       	movw	r30, r12
    173a:	20 83       	st	Z, r18
    173c:	31 e6       	ldi	r19, 0x61	; 97
    173e:	31 83       	std	Z+1, r19	; 0x01
    1740:	22 83       	std	Z+2, r18	; 0x02
    1742:	ce cf       	rjmp	.-100    	; 0x16e0 <dtoa_prf+0xb8>
    1744:	31 93       	st	Z+, r19
    1746:	21 50       	subi	r18, 0x01	; 1
    1748:	ce cf       	rjmp	.-100    	; 0x16e6 <dtoa_prf+0xbe>
    174a:	23 2f       	mov	r18, r19
    174c:	24 70       	andi	r18, 0x04	; 4
    174e:	32 ff       	sbrs	r19, 2
    1750:	41 c0       	rjmp	.+130    	; 0x17d4 <dtoa_prf+0x1ac>
    1752:	91 11       	cpse	r25, r1
    1754:	2f c0       	rjmp	.+94     	; 0x17b4 <dtoa_prf+0x18c>
    1756:	23 e0       	ldi	r18, 0x03	; 3
    1758:	2f 15       	cp	r18, r15
    175a:	10 f4       	brcc	.+4      	; 0x1760 <dtoa_prf+0x138>
    175c:	8f 2d       	mov	r24, r15
    175e:	82 1b       	sub	r24, r18
    1760:	a1 11       	cpse	r26, r1
    1762:	08 c0       	rjmp	.+16     	; 0x1774 <dtoa_prf+0x14c>
    1764:	f6 01       	movw	r30, r12
    1766:	28 2f       	mov	r18, r24
    1768:	30 e2       	ldi	r19, 0x20	; 32
    176a:	21 11       	cpse	r18, r1
    176c:	25 c0       	rjmp	.+74     	; 0x17b8 <dtoa_prf+0x190>
    176e:	c8 0e       	add	r12, r24
    1770:	d1 1c       	adc	r13, r1
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	99 23       	and	r25, r25
    1776:	31 f0       	breq	.+12     	; 0x1784 <dtoa_prf+0x15c>
    1778:	f6 01       	movw	r30, r12
    177a:	90 83       	st	Z, r25
    177c:	96 01       	movw	r18, r12
    177e:	2f 5f       	subi	r18, 0xFF	; 255
    1780:	3f 4f       	sbci	r19, 0xFF	; 255
    1782:	69 01       	movw	r12, r18
    1784:	96 01       	movw	r18, r12
    1786:	2d 5f       	subi	r18, 0xFD	; 253
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	e2 fe       	sbrs	r14, 2
    178c:	18 c0       	rjmp	.+48     	; 0x17be <dtoa_prf+0x196>
    178e:	99 e4       	ldi	r25, 0x49	; 73
    1790:	d6 01       	movw	r26, r12
    1792:	9c 93       	st	X, r25
    1794:	9e e4       	ldi	r25, 0x4E	; 78
    1796:	11 96       	adiw	r26, 0x01	; 1
    1798:	9c 93       	st	X, r25
    179a:	11 97       	sbiw	r26, 0x01	; 1
    179c:	96 e4       	ldi	r25, 0x46	; 70
    179e:	12 96       	adiw	r26, 0x02	; 2
    17a0:	9c 93       	st	X, r25
    17a2:	f9 01       	movw	r30, r18
    17a4:	98 2f       	mov	r25, r24
    17a6:	40 e2       	ldi	r20, 0x20	; 32
    17a8:	91 11       	cpse	r25, r1
    17aa:	11 c0       	rjmp	.+34     	; 0x17ce <dtoa_prf+0x1a6>
    17ac:	28 0f       	add	r18, r24
    17ae:	31 1d       	adc	r19, r1
    17b0:	d9 01       	movw	r26, r18
    17b2:	9e cf       	rjmp	.-196    	; 0x16f0 <dtoa_prf+0xc8>
    17b4:	24 e0       	ldi	r18, 0x04	; 4
    17b6:	d0 cf       	rjmp	.-96     	; 0x1758 <dtoa_prf+0x130>
    17b8:	31 93       	st	Z+, r19
    17ba:	21 50       	subi	r18, 0x01	; 1
    17bc:	d6 cf       	rjmp	.-84     	; 0x176a <dtoa_prf+0x142>
    17be:	99 e6       	ldi	r25, 0x69	; 105
    17c0:	f6 01       	movw	r30, r12
    17c2:	90 83       	st	Z, r25
    17c4:	9e e6       	ldi	r25, 0x6E	; 110
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	96 e6       	ldi	r25, 0x66	; 102
    17ca:	92 83       	std	Z+2, r25	; 0x02
    17cc:	ea cf       	rjmp	.-44     	; 0x17a2 <dtoa_prf+0x17a>
    17ce:	41 93       	st	Z+, r20
    17d0:	91 50       	subi	r25, 0x01	; 1
    17d2:	ea cf       	rjmp	.-44     	; 0x17a8 <dtoa_prf+0x180>
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	91 11       	cpse	r25, r1
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <dtoa_prf+0x1b8>
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	16 16       	cp	r1, r22
    17e2:	17 06       	cpc	r1, r23
    17e4:	0c f0       	brlt	.+2      	; 0x17e8 <dtoa_prf+0x1c0>
    17e6:	75 c0       	rjmp	.+234    	; 0x18d2 <dtoa_prf+0x2aa>
    17e8:	fb 01       	movw	r30, r22
    17ea:	31 96       	adiw	r30, 0x01	; 1
    17ec:	e4 0f       	add	r30, r20
    17ee:	f5 1f       	adc	r31, r21
    17f0:	bb 20       	and	r11, r11
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <dtoa_prf+0x1ce>
    17f4:	71 c0       	rjmp	.+226    	; 0x18d8 <dtoa_prf+0x2b0>
    17f6:	4b 2d       	mov	r20, r11
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	4f 5f       	subi	r20, 0xFF	; 255
    17fc:	5f 4f       	sbci	r21, 0xFF	; 255
    17fe:	4e 0f       	add	r20, r30
    1800:	5f 1f       	adc	r21, r31
    1802:	ef 2d       	mov	r30, r15
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	4e 17       	cp	r20, r30
    1808:	5f 07       	cpc	r21, r31
    180a:	14 f4       	brge	.+4      	; 0x1810 <dtoa_prf+0x1e8>
    180c:	2f 2d       	mov	r18, r15
    180e:	24 1b       	sub	r18, r20
    1810:	8e 2d       	mov	r24, r14
    1812:	88 71       	andi	r24, 0x18	; 24
    1814:	41 f4       	brne	.+16     	; 0x1826 <dtoa_prf+0x1fe>
    1816:	f6 01       	movw	r30, r12
    1818:	82 2f       	mov	r24, r18
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	81 11       	cpse	r24, r1
    181e:	5f c0       	rjmp	.+190    	; 0x18de <dtoa_prf+0x2b6>
    1820:	c2 0e       	add	r12, r18
    1822:	d1 1c       	adc	r13, r1
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	99 23       	and	r25, r25
    1828:	29 f0       	breq	.+10     	; 0x1834 <dtoa_prf+0x20c>
    182a:	f6 01       	movw	r30, r12
    182c:	90 83       	st	Z, r25
    182e:	c6 01       	movw	r24, r12
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	6c 01       	movw	r12, r24
    1834:	a1 11       	cpse	r26, r1
    1836:	08 c0       	rjmp	.+16     	; 0x1848 <dtoa_prf+0x220>
    1838:	f6 01       	movw	r30, r12
    183a:	82 2f       	mov	r24, r18
    183c:	90 e3       	ldi	r25, 0x30	; 48
    183e:	81 11       	cpse	r24, r1
    1840:	51 c0       	rjmp	.+162    	; 0x18e4 <dtoa_prf+0x2bc>
    1842:	c2 0e       	add	r12, r18
    1844:	d1 1c       	adc	r13, r1
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	01 2f       	mov	r16, r17
    184a:	06 0f       	add	r16, r22
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	a3 2f       	mov	r26, r19
    1850:	a0 71       	andi	r26, 0x10	; 16
    1852:	aa 2e       	mov	r10, r26
    1854:	34 ff       	sbrs	r19, 4
    1856:	03 c0       	rjmp	.+6      	; 0x185e <dtoa_prf+0x236>
    1858:	91 33       	cpi	r25, 0x31	; 49
    185a:	09 f4       	brne	.+2      	; 0x185e <dtoa_prf+0x236>
    185c:	01 50       	subi	r16, 0x01	; 1
    185e:	10 16       	cp	r1, r16
    1860:	0c f0       	brlt	.+2      	; 0x1864 <dtoa_prf+0x23c>
    1862:	43 c0       	rjmp	.+134    	; 0x18ea <dtoa_prf+0x2c2>
    1864:	09 30       	cpi	r16, 0x09	; 9
    1866:	08 f0       	brcs	.+2      	; 0x186a <dtoa_prf+0x242>
    1868:	08 e0       	ldi	r16, 0x08	; 8
    186a:	ab 01       	movw	r20, r22
    186c:	77 ff       	sbrs	r23, 7
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <dtoa_prf+0x24c>
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	fb 01       	movw	r30, r22
    1876:	31 96       	adiw	r30, 0x01	; 1
    1878:	e4 1b       	sub	r30, r20
    187a:	f5 0b       	sbc	r31, r21
    187c:	a1 e0       	ldi	r26, 0x01	; 1
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	ac 0f       	add	r26, r28
    1882:	bd 1f       	adc	r27, r29
    1884:	ea 0f       	add	r30, r26
    1886:	fb 1f       	adc	r31, r27
    1888:	3e e2       	ldi	r19, 0x2E	; 46
    188a:	4b 01       	movw	r8, r22
    188c:	80 1a       	sub	r8, r16
    188e:	91 08       	sbc	r9, r1
    1890:	0b 2d       	mov	r16, r11
    1892:	10 e0       	ldi	r17, 0x00	; 0
    1894:	11 95       	neg	r17
    1896:	01 95       	neg	r16
    1898:	11 09       	sbc	r17, r1
    189a:	4f 3f       	cpi	r20, 0xFF	; 255
    189c:	bf ef       	ldi	r27, 0xFF	; 255
    189e:	5b 07       	cpc	r21, r27
    18a0:	21 f4       	brne	.+8      	; 0x18aa <dtoa_prf+0x282>
    18a2:	d6 01       	movw	r26, r12
    18a4:	3c 93       	st	X, r19
    18a6:	11 96       	adiw	r26, 0x01	; 1
    18a8:	6d 01       	movw	r12, r26
    18aa:	64 17       	cp	r22, r20
    18ac:	75 07       	cpc	r23, r21
    18ae:	fc f0       	brlt	.+62     	; 0x18ee <dtoa_prf+0x2c6>
    18b0:	84 16       	cp	r8, r20
    18b2:	95 06       	cpc	r9, r21
    18b4:	e4 f4       	brge	.+56     	; 0x18ee <dtoa_prf+0x2c6>
    18b6:	80 81       	ld	r24, Z
    18b8:	41 50       	subi	r20, 0x01	; 1
    18ba:	51 09       	sbc	r21, r1
    18bc:	31 96       	adiw	r30, 0x01	; 1
    18be:	d6 01       	movw	r26, r12
    18c0:	11 96       	adiw	r26, 0x01	; 1
    18c2:	7d 01       	movw	r14, r26
    18c4:	40 17       	cp	r20, r16
    18c6:	51 07       	cpc	r21, r17
    18c8:	a4 f0       	brlt	.+40     	; 0x18f2 <dtoa_prf+0x2ca>
    18ca:	d6 01       	movw	r26, r12
    18cc:	8c 93       	st	X, r24
    18ce:	67 01       	movw	r12, r14
    18d0:	e4 cf       	rjmp	.-56     	; 0x189a <dtoa_prf+0x272>
    18d2:	e1 e0       	ldi	r30, 0x01	; 1
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	8a cf       	rjmp	.-236    	; 0x17ec <dtoa_prf+0x1c4>
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	90 cf       	rjmp	.-224    	; 0x17fe <dtoa_prf+0x1d6>
    18de:	41 93       	st	Z+, r20
    18e0:	81 50       	subi	r24, 0x01	; 1
    18e2:	9c cf       	rjmp	.-200    	; 0x181c <dtoa_prf+0x1f4>
    18e4:	91 93       	st	Z+, r25
    18e6:	81 50       	subi	r24, 0x01	; 1
    18e8:	aa cf       	rjmp	.-172    	; 0x183e <dtoa_prf+0x216>
    18ea:	01 e0       	ldi	r16, 0x01	; 1
    18ec:	be cf       	rjmp	.-132    	; 0x186a <dtoa_prf+0x242>
    18ee:	80 e3       	ldi	r24, 0x30	; 48
    18f0:	e3 cf       	rjmp	.-58     	; 0x18b8 <dtoa_prf+0x290>
    18f2:	64 17       	cp	r22, r20
    18f4:	75 07       	cpc	r23, r21
    18f6:	31 f4       	brne	.+12     	; 0x1904 <dtoa_prf+0x2dc>
    18f8:	96 33       	cpi	r25, 0x36	; 54
    18fa:	90 f4       	brcc	.+36     	; 0x1920 <dtoa_prf+0x2f8>
    18fc:	95 33       	cpi	r25, 0x35	; 53
    18fe:	11 f4       	brne	.+4      	; 0x1904 <dtoa_prf+0x2dc>
    1900:	aa 20       	and	r10, r10
    1902:	71 f0       	breq	.+28     	; 0x1920 <dtoa_prf+0x2f8>
    1904:	f6 01       	movw	r30, r12
    1906:	80 83       	st	Z, r24
    1908:	f7 01       	movw	r30, r14
    190a:	82 2f       	mov	r24, r18
    190c:	90 e2       	ldi	r25, 0x20	; 32
    190e:	81 11       	cpse	r24, r1
    1910:	09 c0       	rjmp	.+18     	; 0x1924 <dtoa_prf+0x2fc>
    1912:	f7 01       	movw	r30, r14
    1914:	e2 0f       	add	r30, r18
    1916:	f1 1d       	adc	r31, r1
    1918:	10 82       	st	Z, r1
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	eb ce       	rjmp	.-554    	; 0x16f6 <dtoa_prf+0xce>
    1920:	81 e3       	ldi	r24, 0x31	; 49
    1922:	f0 cf       	rjmp	.-32     	; 0x1904 <dtoa_prf+0x2dc>
    1924:	91 93       	st	Z+, r25
    1926:	81 50       	subi	r24, 0x01	; 1
    1928:	f2 cf       	rjmp	.-28     	; 0x190e <dtoa_prf+0x2e6>

0000192a <__ftoa_engine>:
    192a:	28 30       	cpi	r18, 0x08	; 8
    192c:	08 f0       	brcs	.+2      	; 0x1930 <__ftoa_engine+0x6>
    192e:	27 e0       	ldi	r18, 0x07	; 7
    1930:	33 27       	eor	r19, r19
    1932:	da 01       	movw	r26, r20
    1934:	99 0f       	add	r25, r25
    1936:	31 1d       	adc	r19, r1
    1938:	87 fd       	sbrc	r24, 7
    193a:	91 60       	ori	r25, 0x01	; 1
    193c:	00 96       	adiw	r24, 0x00	; 0
    193e:	61 05       	cpc	r22, r1
    1940:	71 05       	cpc	r23, r1
    1942:	39 f4       	brne	.+14     	; 0x1952 <__ftoa_engine+0x28>
    1944:	32 60       	ori	r19, 0x02	; 2
    1946:	2e 5f       	subi	r18, 0xFE	; 254
    1948:	3d 93       	st	X+, r19
    194a:	30 e3       	ldi	r19, 0x30	; 48
    194c:	2a 95       	dec	r18
    194e:	e1 f7       	brne	.-8      	; 0x1948 <__ftoa_engine+0x1e>
    1950:	08 95       	ret
    1952:	9f 3f       	cpi	r25, 0xFF	; 255
    1954:	30 f0       	brcs	.+12     	; 0x1962 <__ftoa_engine+0x38>
    1956:	80 38       	cpi	r24, 0x80	; 128
    1958:	71 05       	cpc	r23, r1
    195a:	61 05       	cpc	r22, r1
    195c:	09 f0       	breq	.+2      	; 0x1960 <__ftoa_engine+0x36>
    195e:	3c 5f       	subi	r19, 0xFC	; 252
    1960:	3c 5f       	subi	r19, 0xFC	; 252
    1962:	3d 93       	st	X+, r19
    1964:	91 30       	cpi	r25, 0x01	; 1
    1966:	08 f0       	brcs	.+2      	; 0x196a <__ftoa_engine+0x40>
    1968:	80 68       	ori	r24, 0x80	; 128
    196a:	91 1d       	adc	r25, r1
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	1f 93       	push	r17
    1972:	0f 93       	push	r16
    1974:	ff 92       	push	r15
    1976:	ef 92       	push	r14
    1978:	19 2f       	mov	r17, r25
    197a:	98 7f       	andi	r25, 0xF8	; 248
    197c:	96 95       	lsr	r25
    197e:	e9 2f       	mov	r30, r25
    1980:	96 95       	lsr	r25
    1982:	96 95       	lsr	r25
    1984:	e9 0f       	add	r30, r25
    1986:	ff 27       	eor	r31, r31
    1988:	ec 5e       	subi	r30, 0xEC	; 236
    198a:	fe 4f       	sbci	r31, 0xFE	; 254
    198c:	99 27       	eor	r25, r25
    198e:	33 27       	eor	r19, r19
    1990:	ee 24       	eor	r14, r14
    1992:	ff 24       	eor	r15, r15
    1994:	a7 01       	movw	r20, r14
    1996:	e7 01       	movw	r28, r14
    1998:	05 90       	lpm	r0, Z+
    199a:	08 94       	sec
    199c:	07 94       	ror	r0
    199e:	28 f4       	brcc	.+10     	; 0x19aa <__ftoa_engine+0x80>
    19a0:	36 0f       	add	r19, r22
    19a2:	e7 1e       	adc	r14, r23
    19a4:	f8 1e       	adc	r15, r24
    19a6:	49 1f       	adc	r20, r25
    19a8:	51 1d       	adc	r21, r1
    19aa:	66 0f       	add	r22, r22
    19ac:	77 1f       	adc	r23, r23
    19ae:	88 1f       	adc	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	06 94       	lsr	r0
    19b4:	a1 f7       	brne	.-24     	; 0x199e <__ftoa_engine+0x74>
    19b6:	05 90       	lpm	r0, Z+
    19b8:	07 94       	ror	r0
    19ba:	28 f4       	brcc	.+10     	; 0x19c6 <__ftoa_engine+0x9c>
    19bc:	e7 0e       	add	r14, r23
    19be:	f8 1e       	adc	r15, r24
    19c0:	49 1f       	adc	r20, r25
    19c2:	56 1f       	adc	r21, r22
    19c4:	c1 1d       	adc	r28, r1
    19c6:	77 0f       	add	r23, r23
    19c8:	88 1f       	adc	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	66 1f       	adc	r22, r22
    19ce:	06 94       	lsr	r0
    19d0:	a1 f7       	brne	.-24     	; 0x19ba <__ftoa_engine+0x90>
    19d2:	05 90       	lpm	r0, Z+
    19d4:	07 94       	ror	r0
    19d6:	28 f4       	brcc	.+10     	; 0x19e2 <__ftoa_engine+0xb8>
    19d8:	f8 0e       	add	r15, r24
    19da:	49 1f       	adc	r20, r25
    19dc:	56 1f       	adc	r21, r22
    19de:	c7 1f       	adc	r28, r23
    19e0:	d1 1d       	adc	r29, r1
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	66 1f       	adc	r22, r22
    19e8:	77 1f       	adc	r23, r23
    19ea:	06 94       	lsr	r0
    19ec:	a1 f7       	brne	.-24     	; 0x19d6 <__ftoa_engine+0xac>
    19ee:	05 90       	lpm	r0, Z+
    19f0:	07 94       	ror	r0
    19f2:	20 f4       	brcc	.+8      	; 0x19fc <__ftoa_engine+0xd2>
    19f4:	49 0f       	add	r20, r25
    19f6:	56 1f       	adc	r21, r22
    19f8:	c7 1f       	adc	r28, r23
    19fa:	d8 1f       	adc	r29, r24
    19fc:	99 0f       	add	r25, r25
    19fe:	66 1f       	adc	r22, r22
    1a00:	77 1f       	adc	r23, r23
    1a02:	88 1f       	adc	r24, r24
    1a04:	06 94       	lsr	r0
    1a06:	a9 f7       	brne	.-22     	; 0x19f2 <__ftoa_engine+0xc8>
    1a08:	84 91       	lpm	r24, Z
    1a0a:	10 95       	com	r17
    1a0c:	17 70       	andi	r17, 0x07	; 7
    1a0e:	41 f0       	breq	.+16     	; 0x1a20 <__ftoa_engine+0xf6>
    1a10:	d6 95       	lsr	r29
    1a12:	c7 95       	ror	r28
    1a14:	57 95       	ror	r21
    1a16:	47 95       	ror	r20
    1a18:	f7 94       	ror	r15
    1a1a:	e7 94       	ror	r14
    1a1c:	1a 95       	dec	r17
    1a1e:	c1 f7       	brne	.-16     	; 0x1a10 <__ftoa_engine+0xe6>
    1a20:	ea eb       	ldi	r30, 0xBA	; 186
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	68 94       	set
    1a26:	15 90       	lpm	r1, Z+
    1a28:	15 91       	lpm	r17, Z+
    1a2a:	35 91       	lpm	r19, Z+
    1a2c:	65 91       	lpm	r22, Z+
    1a2e:	95 91       	lpm	r25, Z+
    1a30:	05 90       	lpm	r0, Z+
    1a32:	7f e2       	ldi	r23, 0x2F	; 47
    1a34:	73 95       	inc	r23
    1a36:	e1 18       	sub	r14, r1
    1a38:	f1 0a       	sbc	r15, r17
    1a3a:	43 0b       	sbc	r20, r19
    1a3c:	56 0b       	sbc	r21, r22
    1a3e:	c9 0b       	sbc	r28, r25
    1a40:	d0 09       	sbc	r29, r0
    1a42:	c0 f7       	brcc	.-16     	; 0x1a34 <__ftoa_engine+0x10a>
    1a44:	e1 0c       	add	r14, r1
    1a46:	f1 1e       	adc	r15, r17
    1a48:	43 1f       	adc	r20, r19
    1a4a:	56 1f       	adc	r21, r22
    1a4c:	c9 1f       	adc	r28, r25
    1a4e:	d0 1d       	adc	r29, r0
    1a50:	7e f4       	brtc	.+30     	; 0x1a70 <__ftoa_engine+0x146>
    1a52:	70 33       	cpi	r23, 0x30	; 48
    1a54:	11 f4       	brne	.+4      	; 0x1a5a <__ftoa_engine+0x130>
    1a56:	8a 95       	dec	r24
    1a58:	e6 cf       	rjmp	.-52     	; 0x1a26 <__ftoa_engine+0xfc>
    1a5a:	e8 94       	clt
    1a5c:	01 50       	subi	r16, 0x01	; 1
    1a5e:	30 f0       	brcs	.+12     	; 0x1a6c <__ftoa_engine+0x142>
    1a60:	08 0f       	add	r16, r24
    1a62:	0a f4       	brpl	.+2      	; 0x1a66 <__ftoa_engine+0x13c>
    1a64:	00 27       	eor	r16, r16
    1a66:	02 17       	cp	r16, r18
    1a68:	08 f4       	brcc	.+2      	; 0x1a6c <__ftoa_engine+0x142>
    1a6a:	20 2f       	mov	r18, r16
    1a6c:	23 95       	inc	r18
    1a6e:	02 2f       	mov	r16, r18
    1a70:	7a 33       	cpi	r23, 0x3A	; 58
    1a72:	28 f0       	brcs	.+10     	; 0x1a7e <__ftoa_engine+0x154>
    1a74:	79 e3       	ldi	r23, 0x39	; 57
    1a76:	7d 93       	st	X+, r23
    1a78:	2a 95       	dec	r18
    1a7a:	e9 f7       	brne	.-6      	; 0x1a76 <__ftoa_engine+0x14c>
    1a7c:	10 c0       	rjmp	.+32     	; 0x1a9e <__ftoa_engine+0x174>
    1a7e:	7d 93       	st	X+, r23
    1a80:	2a 95       	dec	r18
    1a82:	89 f6       	brne	.-94     	; 0x1a26 <__ftoa_engine+0xfc>
    1a84:	06 94       	lsr	r0
    1a86:	97 95       	ror	r25
    1a88:	67 95       	ror	r22
    1a8a:	37 95       	ror	r19
    1a8c:	17 95       	ror	r17
    1a8e:	17 94       	ror	r1
    1a90:	e1 18       	sub	r14, r1
    1a92:	f1 0a       	sbc	r15, r17
    1a94:	43 0b       	sbc	r20, r19
    1a96:	56 0b       	sbc	r21, r22
    1a98:	c9 0b       	sbc	r28, r25
    1a9a:	d0 09       	sbc	r29, r0
    1a9c:	98 f0       	brcs	.+38     	; 0x1ac4 <__ftoa_engine+0x19a>
    1a9e:	23 95       	inc	r18
    1aa0:	7e 91       	ld	r23, -X
    1aa2:	73 95       	inc	r23
    1aa4:	7a 33       	cpi	r23, 0x3A	; 58
    1aa6:	08 f0       	brcs	.+2      	; 0x1aaa <__ftoa_engine+0x180>
    1aa8:	70 e3       	ldi	r23, 0x30	; 48
    1aaa:	7c 93       	st	X, r23
    1aac:	20 13       	cpse	r18, r16
    1aae:	b8 f7       	brcc	.-18     	; 0x1a9e <__ftoa_engine+0x174>
    1ab0:	7e 91       	ld	r23, -X
    1ab2:	70 61       	ori	r23, 0x10	; 16
    1ab4:	7d 93       	st	X+, r23
    1ab6:	30 f0       	brcs	.+12     	; 0x1ac4 <__ftoa_engine+0x19a>
    1ab8:	83 95       	inc	r24
    1aba:	71 e3       	ldi	r23, 0x31	; 49
    1abc:	7d 93       	st	X+, r23
    1abe:	70 e3       	ldi	r23, 0x30	; 48
    1ac0:	2a 95       	dec	r18
    1ac2:	e1 f7       	brne	.-8      	; 0x1abc <__ftoa_engine+0x192>
    1ac4:	11 24       	eor	r1, r1
    1ac6:	ef 90       	pop	r14
    1ac8:	ff 90       	pop	r15
    1aca:	0f 91       	pop	r16
    1acc:	1f 91       	pop	r17
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	99 27       	eor	r25, r25
    1ad4:	87 fd       	sbrc	r24, 7
    1ad6:	90 95       	com	r25
    1ad8:	08 95       	ret

00001ada <strrev>:
    1ada:	dc 01       	movw	r26, r24
    1adc:	fc 01       	movw	r30, r24
    1ade:	67 2f       	mov	r22, r23
    1ae0:	71 91       	ld	r23, Z+
    1ae2:	77 23       	and	r23, r23
    1ae4:	e1 f7       	brne	.-8      	; 0x1ade <strrev+0x4>
    1ae6:	32 97       	sbiw	r30, 0x02	; 2
    1ae8:	04 c0       	rjmp	.+8      	; 0x1af2 <strrev+0x18>
    1aea:	7c 91       	ld	r23, X
    1aec:	6d 93       	st	X+, r22
    1aee:	70 83       	st	Z, r23
    1af0:	62 91       	ld	r22, -Z
    1af2:	ae 17       	cp	r26, r30
    1af4:	bf 07       	cpc	r27, r31
    1af6:	c8 f3       	brcs	.-14     	; 0x1aea <strrev+0x10>
    1af8:	08 95       	ret

00001afa <_exit>:
    1afa:	f8 94       	cli

00001afc <__stop_program>:
    1afc:	ff cf       	rjmp	.-2      	; 0x1afc <__stop_program>
