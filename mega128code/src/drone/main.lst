
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001da  00800100  00002314  000023a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002314  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008002da  008002da  00002582  2**0
                  ALLOC
  3 .stab         000054f0  00000000  00000000  00002584  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cd4  00000000  00000000  00007a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00009748  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000975c  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00009798  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00009f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  0000a630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000a64d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__ctors_end>
       4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       8:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      10:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      14:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      18:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_7>
      20:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_8>
      24:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      28:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      2c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      30:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      34:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      3c:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_15>
      40:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      44:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      48:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      4c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      50:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      54:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      58:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      5c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      60:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      64:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      68:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      6c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      70:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      74:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      78:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      7c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      80:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      84:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      88:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__trampolines_end>:
      ba:	00 40       	sbci	r16, 0x00	; 0
      bc:	7a 10       	cpse	r7, r10
      be:	f3 5a       	subi	r31, 0xA3	; 163
      c0:	00 a0       	ldd	r0, Z+32	; 0x20
      c2:	72 4e       	sbci	r23, 0xE2	; 226
      c4:	18 09       	sbc	r17, r8
      c6:	00 10       	cpse	r0, r0
      c8:	a5 d4       	rcall	.+2378   	; 0xa14 <i2c_start+0x38>
      ca:	e8 00       	.word	0x00e8	; ????
      cc:	00 e8       	ldi	r16, 0x80	; 128
      ce:	76 48       	sbci	r23, 0x86	; 134
      d0:	17 00       	.word	0x0017	; ????
      d2:	00 e4       	ldi	r16, 0x40	; 64
      d4:	0b 54       	subi	r16, 0x4B	; 75
      d6:	02 00       	.word	0x0002	; ????
      d8:	00 ca       	rjmp	.-3072   	; 0xfffff4da <__eeprom_end+0xff7ef4da>
      da:	9a 3b       	cpi	r25, 0xBA	; 186
      dc:	00 00       	nop
      de:	00 e1       	ldi	r16, 0x10	; 16
      e0:	f5 05       	cpc	r31, r5
      e2:	00 00       	nop
      e4:	80 96       	adiw	r24, 0x20	; 32
      e6:	98 00       	.word	0x0098	; ????
      e8:	00 00       	nop
      ea:	40 42       	sbci	r20, 0x20	; 32
      ec:	0f 00       	.word	0x000f	; ????
      ee:	00 00       	nop
      f0:	a0 86       	std	Z+8, r10	; 0x08
      f2:	01 00       	.word	0x0001	; ????
      f4:	00 00       	nop
      f6:	10 27       	eor	r17, r16
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	e8 03       	fmulsu	r22, r16
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	64 00       	.word	0x0064	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	0a 00       	.word	0x000a	; ????
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	00 00       	nop
     114:	2c 76       	andi	r18, 0x6C	; 108
     116:	d8 88       	ldd	r13, Y+16	; 0x10
     118:	dc 67       	ori	r29, 0x7C	; 124
     11a:	4f 08       	sbc	r4, r15
     11c:	23 df       	rcall	.-442    	; 0xffffff64 <__eeprom_end+0xff7eff64>
     11e:	c1 df       	rcall	.-126    	; 0xa2 <__SREG__+0x63>
     120:	ae 59       	subi	r26, 0x9E	; 158
     122:	e1 b1       	in	r30, 0x01	; 1
     124:	b7 96       	adiw	r30, 0x27	; 39
     126:	e5 e3       	ldi	r30, 0x35	; 53
     128:	e4 53       	subi	r30, 0x34	; 52
     12a:	c6 3a       	cpi	r28, 0xA6	; 166
     12c:	e6 51       	subi	r30, 0x16	; 22
     12e:	99 76       	andi	r25, 0x69	; 105
     130:	96 e8       	ldi	r25, 0x86	; 134
     132:	e6 c2       	rjmp	.+1484   	; 0x700 <path1+0x132>
     134:	84 26       	eor	r8, r20
     136:	eb 89       	ldd	r30, Y+19	; 0x13
     138:	8c 9b       	sbis	0x11, 4	; 17
     13a:	62 ed       	ldi	r22, 0xD2	; 210
     13c:	40 7c       	andi	r20, 0xC0	; 192
     13e:	6f fc       	.word	0xfc6f	; ????
     140:	ef bc       	out	0x2f, r14	; 47
     142:	9c 9f       	mul	r25, r28
     144:	40 f2       	brcs	.-112    	; 0xd6 <__trampolines_end+0x1c>
     146:	ba a5       	ldd	r27, Y+42	; 0x2a
     148:	6f a5       	ldd	r22, Y+47	; 0x2f
     14a:	f4 90       	lpm	r15, Z
     14c:	05 5a       	subi	r16, 0xA5	; 165
     14e:	2a f7       	brpl	.-54     	; 0x11a <__trampolines_end+0x60>
     150:	5c 93       	st	X, r21
     152:	6b 6c       	ori	r22, 0xCB	; 203
     154:	f9 67       	ori	r31, 0x79	; 121
     156:	6d c1       	rjmp	.+730    	; 0x432 <bumper_response+0xb6>
     158:	1b fc       	.word	0xfc1b	; ????
     15a:	e0 e4       	ldi	r30, 0x40	; 64
     15c:	0d 47       	sbci	r16, 0x7D	; 125
     15e:	fe f5       	brtc	.+126    	; 0x1de <__do_clear_bss+0x4>
     160:	20 e6       	ldi	r18, 0x60	; 96
     162:	b5 00       	.word	0x00b5	; ????
     164:	d0 ed       	ldi	r29, 0xD0	; 208
     166:	90 2e       	mov	r9, r16
     168:	03 00       	.word	0x0003	; ????
     16a:	94 35       	cpi	r25, 0x54	; 84
     16c:	77 05       	cpc	r23, r7
     16e:	00 80       	ld	r0, Z
     170:	84 1e       	adc	r8, r20
     172:	08 00       	.word	0x0008	; ????
     174:	00 20       	and	r0, r0
     176:	4e 0a       	sbc	r4, r30
     178:	00 00       	nop
     17a:	00 c8       	rjmp	.-4096   	; 0xfffff17c <__eeprom_end+0xff7ef17c>
     17c:	0c 33       	cpi	r16, 0x3C	; 60
     17e:	33 33       	cpi	r19, 0x33	; 51
     180:	33 0f       	add	r19, r19
     182:	98 6e       	ori	r25, 0xE8	; 232
     184:	12 83       	std	Z+2, r17	; 0x02
     186:	11 41       	sbci	r17, 0x11	; 17
     188:	ef 8d       	ldd	r30, Y+31	; 0x1f
     18a:	21 14       	cp	r2, r1
     18c:	89 3b       	cpi	r24, 0xB9	; 185
     18e:	e6 55       	subi	r30, 0x56	; 86
     190:	16 cf       	rjmp	.-468    	; 0xffffffbe <__eeprom_end+0xff7effbe>
     192:	fe e6       	ldi	r31, 0x6E	; 110
     194:	db 18       	sub	r13, r11
     196:	d1 84       	ldd	r13, Z+9	; 0x09
     198:	4b 38       	cpi	r20, 0x8B	; 139
     19a:	1b f7       	brvc	.-58     	; 0x162 <__trampolines_end+0xa8>
     19c:	7c 1d       	adc	r23, r12
     19e:	90 1d       	adc	r25, r0
     1a0:	a4 bb       	out	0x14, r26	; 20
     1a2:	e4 24       	eor	r14, r4
     1a4:	20 32       	cpi	r18, 0x20	; 32
     1a6:	84 72       	andi	r24, 0x24	; 36
     1a8:	5e 22       	and	r5, r30
     1aa:	81 00       	.word	0x0081	; ????
     1ac:	c9 f1       	breq	.+114    	; 0x220 <__vector_7+0x2a>
     1ae:	24 ec       	ldi	r18, 0xC4	; 196
     1b0:	a1 e5       	ldi	r26, 0x51	; 81
     1b2:	3d 27       	eor	r19, r29

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d0 e1       	ldi	r29, 0x10	; 16
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	12 e0       	ldi	r17, 0x02	; 2
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	e4 e1       	ldi	r30, 0x14	; 20
     1c8:	f3 e2       	ldi	r31, 0x23	; 35
     1ca:	00 e0       	ldi	r16, 0x00	; 0
     1cc:	0b bf       	out	0x3b, r16	; 59
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__do_copy_data+0x14>
     1d0:	07 90       	elpm	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	aa 3d       	cpi	r26, 0xDA	; 218
     1d6:	b1 07       	cpc	r27, r17
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <__do_copy_data+0x10>

000001da <__do_clear_bss>:
     1da:	22 e0       	ldi	r18, 0x02	; 2
     1dc:	aa ed       	ldi	r26, 0xDA	; 218
     1de:	b2 e0       	ldi	r27, 0x02	; 2
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <.do_clear_bss_start>

000001e2 <.do_clear_bss_loop>:
     1e2:	1d 92       	st	X+, r1

000001e4 <.do_clear_bss_start>:
     1e4:	ae 3e       	cpi	r26, 0xEE	; 238
     1e6:	b2 07       	cpc	r27, r18
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <.do_clear_bss_loop>
     1ea:	0e 94 c0 0a 	call	0x1580	; 0x1580 <main>
     1ee:	0c 94 88 11 	jmp	0x2310	; 0x2310 <_exit>

000001f2 <__bad_interrupt>:
     1f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f6 <__vector_7>:
    }

    return 0;
}

ISR(INT6_vect){  //Left bumper on PE6
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	11 24       	eor	r1, r1
     200:	8f 93       	push	r24
     202:	9f 93       	push	r25
    bumper_hit = 1;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	90 93 e1 02 	sts	0x02E1, r25
     20c:	80 93 e0 02 	sts	0x02E0, r24
    EIFR |= (1 << INTF6);
     210:	88 b7       	in	r24, 0x38	; 56
     212:	80 64       	ori	r24, 0x40	; 64
     214:	88 bf       	out	0x38, r24	; 56
}
     216:	9f 91       	pop	r25
     218:	8f 91       	pop	r24
     21a:	0f 90       	pop	r0
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	0f 90       	pop	r0
     220:	1f 90       	pop	r1
     222:	18 95       	reti

00000224 <__vector_8>:

ISR(INT7_vect){  //Right bumper on PE7
     224:	1f 92       	push	r1
     226:	0f 92       	push	r0
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	0f 92       	push	r0
     22c:	11 24       	eor	r1, r1
     22e:	8f 93       	push	r24
     230:	9f 93       	push	r25
    bumper_hit = 1;
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	90 93 e1 02 	sts	0x02E1, r25
     23a:	80 93 e0 02 	sts	0x02E0, r24
    EIFR |= (1 << INTF7);
     23e:	88 b7       	in	r24, 0x38	; 56
     240:	80 68       	ori	r24, 0x80	; 128
     242:	88 bf       	out	0x38, r24	; 56
}
     244:	9f 91       	pop	r25
     246:	8f 91       	pop	r24
     248:	0f 90       	pop	r0
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	0f 90       	pop	r0
     24e:	1f 90       	pop	r1
     250:	18 95       	reti

00000252 <__vector_15>:
        Depth: ddd.dddddd
        Object: (NO | YES)
        Heading: ddd.dddddd
        Water Level: (OK | WARNING | ERROR) : dd.dd
*******************/
ISR(TIMER0_COMP_vect){
     252:	1f 92       	push	r1
     254:	0f 92       	push	r0
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	0f 92       	push	r0
     25a:	11 24       	eor	r1, r1
     25c:	0b b6       	in	r0, 0x3b	; 59
     25e:	0f 92       	push	r0
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	2f 93       	push	r18
     266:	3f 93       	push	r19
     268:	4f 93       	push	r20
     26a:	5f 93       	push	r21
     26c:	6f 93       	push	r22
     26e:	7f 93       	push	r23
     270:	8f 93       	push	r24
     272:	9f 93       	push	r25
     274:	af 93       	push	r26
     276:	bf 93       	push	r27
     278:	ef 93       	push	r30
     27a:	ff 93       	push	r31
    if (data_timer_counter >= TIMER0_DIVIDER){ 
     27c:	80 91 ec 02 	lds	r24, 0x02EC
     280:	90 91 ed 02 	lds	r25, 0x02ED
     284:	0f 97       	sbiw	r24, 0x0f	; 15
     286:	f4 f4       	brge	.+60     	; 0x2c4 <__vector_15+0x72>
        USART0_send_string((unsigned char*)"Not yet implemented");
        USART0_send_string((unsigned char*)"\r\n");
        USART0_send_string((unsigned char*)"\r\n");
    }
    else {
        ++data_timer_counter;
     288:	80 91 ec 02 	lds	r24, 0x02EC
     28c:	90 91 ed 02 	lds	r25, 0x02ED
     290:	01 96       	adiw	r24, 0x01	; 1
     292:	90 93 ed 02 	sts	0x02ED, r25
     296:	80 93 ec 02 	sts	0x02EC, r24
    }
}
     29a:	ff 91       	pop	r31
     29c:	ef 91       	pop	r30
     29e:	bf 91       	pop	r27
     2a0:	af 91       	pop	r26
     2a2:	9f 91       	pop	r25
     2a4:	8f 91       	pop	r24
     2a6:	7f 91       	pop	r23
     2a8:	6f 91       	pop	r22
     2aa:	5f 91       	pop	r21
     2ac:	4f 91       	pop	r20
     2ae:	3f 91       	pop	r19
     2b0:	2f 91       	pop	r18
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	0f 90       	pop	r0
     2b8:	0b be       	out	0x3b, r0	; 59
     2ba:	0f 90       	pop	r0
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	0f 90       	pop	r0
     2c0:	1f 90       	pop	r1
     2c2:	18 95       	reti
        Heading: ddd.dddddd
        Water Level: (OK | WARNING | ERROR) : dd.dd
*******************/
ISR(TIMER0_COMP_vect){
    if (data_timer_counter >= TIMER0_DIVIDER){ 
        data_timer_counter = 0;
     2c4:	10 92 ed 02 	sts	0x02ED, r1
     2c8:	10 92 ec 02 	sts	0x02EC, r1
        USART0_send_string((unsigned char *)"Depth: ");
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        USART0_send_string((unsigned char *)dtostrf(get_depth_feet(),3,7,buffer));
     2d4:	0e 94 57 0a 	call	0x14ae	; 0x14ae <get_depth_feet>
     2d8:	02 ee       	ldi	r16, 0xE2	; 226
     2da:	12 e0       	ldi	r17, 0x02	; 2
     2dc:	27 e0       	ldi	r18, 0x07	; 7
     2de:	43 e0       	ldi	r20, 0x03	; 3
     2e0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <dtostrf>
     2e4:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        USART0_send_string((unsigned char*)"\r\n");
     2e8:	8f eb       	ldi	r24, 0xBF	; 191
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        USART0_send_string((unsigned char*)"Object: ");
     2f0:	8a e0       	ldi	r24, 0x0A	; 10
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        if (object_detected){
     2f8:	80 91 da 02 	lds	r24, 0x02DA
     2fc:	90 91 db 02 	lds	r25, 0x02DB
     300:	89 2b       	or	r24, r25
     302:	29 f5       	brne	.+74     	; 0x34e <__vector_15+0xfc>
            USART0_send_string((unsigned char*)"YES");
            object_detected = 0;
        }
        else {
            USART0_send_string((unsigned char*)"NO");
     304:	87 e1       	ldi	r24, 0x17	; 23
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        }
        USART0_send_string((unsigned char*)"\r\n");
     30c:	8f eb       	ldi	r24, 0xBF	; 191
     30e:	92 e0       	ldi	r25, 0x02	; 2
     310:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        USART0_send_string((unsigned char*)"Heading: ");
     314:	8a e1       	ldi	r24, 0x1A	; 26
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        USART0_send_string((unsigned char*)"Not yet implemented");
     31c:	84 e2       	ldi	r24, 0x24	; 36
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        USART0_send_string((unsigned char*)"\r\n");
     324:	8f eb       	ldi	r24, 0xBF	; 191
     326:	92 e0       	ldi	r25, 0x02	; 2
     328:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        USART0_send_string((unsigned char*)"Water Level: ");
     32c:	88 e3       	ldi	r24, 0x38	; 56
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        USART0_send_string((unsigned char*)"Not yet implemented");
     334:	84 e2       	ldi	r24, 0x24	; 36
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        USART0_send_string((unsigned char*)"\r\n");
     33c:	8f eb       	ldi	r24, 0xBF	; 191
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        USART0_send_string((unsigned char*)"\r\n");
     344:	8f eb       	ldi	r24, 0xBF	; 191
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
     34c:	a6 cf       	rjmp	.-180    	; 0x29a <__vector_15+0x48>
        USART0_send_string((unsigned char *)"Depth: ");
        USART0_send_string((unsigned char *)dtostrf(get_depth_feet(),3,7,buffer));
        USART0_send_string((unsigned char*)"\r\n");
        USART0_send_string((unsigned char*)"Object: ");
        if (object_detected){
            USART0_send_string((unsigned char*)"YES");
     34e:	83 e1       	ldi	r24, 0x13	; 19
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
            object_detected = 0;
     356:	10 92 db 02 	sts	0x02DB, r1
     35a:	10 92 da 02 	sts	0x02DA, r1
     35e:	d6 cf       	rjmp	.-84     	; 0x30c <__vector_15+0xba>

00000360 <enable_bumpers>:
/*********
* Need to do rising edge
**********/
void enable_bumpers(){
    //Set pins as inputs
    DDRE &= ~(1 << 6);
     360:	16 98       	cbi	0x02, 6	; 2
    DDRE &= ~(1 << 7);
     362:	17 98       	cbi	0x02, 7	; 2
    
    //Enable internal pullups
    PORTE |= (1 << 6);
     364:	1e 9a       	sbi	0x03, 6	; 3
    PORTE |= (1 << 7);
     366:	1f 9a       	sbi	0x03, 7	; 3

    //Set both interrupt 4 and 5 to rising edge
    EICRB |= (1 << ISC61) | (1 << ISC60);
     368:	8a b7       	in	r24, 0x3a	; 58
     36a:	80 63       	ori	r24, 0x30	; 48
     36c:	8a bf       	out	0x3a, r24	; 58
    EICRB |= (1 << ISC71) | (1 << ISC70);
     36e:	8a b7       	in	r24, 0x3a	; 58
     370:	80 6c       	ori	r24, 0xC0	; 192
     372:	8a bf       	out	0x3a, r24	; 58

    //enable the interrupts
    EIMSK |= (1 << INT7);
     374:	89 b7       	in	r24, 0x39	; 57
     376:	80 68       	ori	r24, 0x80	; 128
     378:	89 bf       	out	0x39, r24	; 57
     37a:	08 95       	ret

0000037c <bumper_response>:
}

void bumper_response(){
     37c:	ef 92       	push	r14
     37e:	ff 92       	push	r15
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
    set_rgb(RED);
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	8f ef       	ldi	r24, 0xFF	; 255
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <set_rgb>
    object_detected = 1;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	90 93 db 02 	sts	0x02DB, r25
     39c:	80 93 da 02 	sts	0x02DA, r24
    USART0_send_string((unsigned char *)"--------------------------------\r\n");
     3a0:	86 e4       	ldi	r24, 0x46	; 70
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    USART0_send_string((unsigned char *)"Bumper Hit\r\n");
     3a8:	89 e6       	ldi	r24, 0x69	; 105
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    USART0_send_string((unsigned char *)"Object: YES\r\n");
     3b0:	86 e7       	ldi	r24, 0x76	; 118
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>

    //reverse
    USART0_send_string((unsigned char *)"Reversing\r\n");
     3b8:	84 e8       	ldi	r24, 0x84	; 132
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    move(0,0,STABLE_Z);
     3c0:	60 91 00 01 	lds	r22, 0x0100
     3c4:	70 91 01 01 	lds	r23, 0x0101
     3c8:	07 2e       	mov	r0, r23
     3ca:	00 0c       	add	r0, r0
     3cc:	88 0b       	sbc	r24, r24
     3ce:	99 0b       	sbc	r25, r25
     3d0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
     3d4:	7b 01       	movw	r14, r22
     3d6:	8c 01       	movw	r16, r24
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	a9 01       	movw	r20, r18
     3de:	ca 01       	movw	r24, r20
     3e0:	b9 01       	movw	r22, r18
     3e2:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e6:	2f ef       	ldi	r18, 0xFF	; 255
     3e8:	83 ed       	ldi	r24, 0xD3	; 211
     3ea:	90 e3       	ldi	r25, 0x30	; 48
     3ec:	21 50       	subi	r18, 0x01	; 1
     3ee:	80 40       	sbci	r24, 0x00	; 0
     3f0:	90 40       	sbci	r25, 0x00	; 0
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <bumper_response+0x70>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <bumper_response+0x7a>
     3f6:	00 00       	nop
    _delay_ms(1000);
    

    move (50,50,STABLE_Z);
     3f8:	60 91 00 01 	lds	r22, 0x0100
     3fc:	70 91 01 01 	lds	r23, 0x0101
     400:	07 2e       	mov	r0, r23
     402:	00 0c       	add	r0, r0
     404:	88 0b       	sbc	r24, r24
     406:	99 0b       	sbc	r25, r25
     408:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
     40c:	7b 01       	movw	r14, r22
     40e:	8c 01       	movw	r16, r24
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	48 e4       	ldi	r20, 0x48	; 72
     416:	52 e4       	ldi	r21, 0x42	; 66
     418:	ca 01       	movw	r24, r20
     41a:	b9 01       	movw	r22, r18
     41c:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
     420:	2f ef       	ldi	r18, 0xFF	; 255
     422:	89 e6       	ldi	r24, 0x69	; 105
     424:	98 e1       	ldi	r25, 0x18	; 24
     426:	21 50       	subi	r18, 0x01	; 1
     428:	80 40       	sbci	r24, 0x00	; 0
     42a:	90 40       	sbci	r25, 0x00	; 0
     42c:	e1 f7       	brne	.-8      	; 0x426 <bumper_response+0xaa>
     42e:	00 c0       	rjmp	.+0      	; 0x430 <bumper_response+0xb4>
     430:	00 00       	nop
    _delay_ms(500);

    //turn left
    USART0_send_string((unsigned char *)"Turning Left\r\n");
     432:	80 e9       	ldi	r24, 0x90	; 144
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    move(50 + TURN_SPEED,50 - TURN_SPEED,STABLE_Z);
     43a:	60 91 00 01 	lds	r22, 0x0100
     43e:	70 91 01 01 	lds	r23, 0x0101
     442:	07 2e       	mov	r0, r23
     444:	00 0c       	add	r0, r0
     446:	88 0b       	sbc	r24, r24
     448:	99 0b       	sbc	r25, r25
     44a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	4c e0       	ldi	r20, 0x0C	; 12
     458:	52 e4       	ldi	r21, 0x42	; 66
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	82 e8       	ldi	r24, 0x82	; 130
     460:	92 e4       	ldi	r25, 0x42	; 66
     462:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
     466:	2f ef       	ldi	r18, 0xFF	; 255
     468:	83 ed       	ldi	r24, 0xD3	; 211
     46a:	90 e3       	ldi	r25, 0x30	; 48
     46c:	21 50       	subi	r18, 0x01	; 1
     46e:	80 40       	sbci	r24, 0x00	; 0
     470:	90 40       	sbci	r25, 0x00	; 0
     472:	e1 f7       	brne	.-8      	; 0x46c <bumper_response+0xf0>
     474:	00 c0       	rjmp	.+0      	; 0x476 <bumper_response+0xfa>
     476:	00 00       	nop
    _delay_ms(1000);
    move(50,50,STABLE_Z);
     478:	60 91 00 01 	lds	r22, 0x0100
     47c:	70 91 01 01 	lds	r23, 0x0101
     480:	07 2e       	mov	r0, r23
     482:	00 0c       	add	r0, r0
     484:	88 0b       	sbc	r24, r24
     486:	99 0b       	sbc	r25, r25
     488:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
     48c:	7b 01       	movw	r14, r22
     48e:	8c 01       	movw	r16, r24
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	48 e4       	ldi	r20, 0x48	; 72
     496:	52 e4       	ldi	r21, 0x42	; 66
     498:	ca 01       	movw	r24, r20
     49a:	b9 01       	movw	r22, r18
     49c:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
    USART0_send_string((unsigned char*)"Resuming\r\n");
     4a0:	8f e9       	ldi	r24, 0x9F	; 159
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    USART0_send_string((unsigned char *)"--------------------------------\r\n");
     4a8:	86 e4       	ldi	r24, 0x46	; 70
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    EIFR |= (1 << INTF7);
     4b0:	88 b7       	in	r24, 0x38	; 56
     4b2:	80 68       	ori	r24, 0x80	; 128
     4b4:	88 bf       	out	0x38, r24	; 56
    bumper_hit = 0;
     4b6:	10 92 e1 02 	sts	0x02E1, r1
     4ba:	10 92 e0 02 	sts	0x02E0, r1
}
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	08 95       	ret

000004c8 <dive>:
    else {
        ++data_timer_counter;
    }
}

void dive(float depth){
     4c8:	4f 92       	push	r4
     4ca:	5f 92       	push	r5
     4cc:	6f 92       	push	r6
     4ce:	7f 92       	push	r7
     4d0:	8f 92       	push	r8
     4d2:	9f 92       	push	r9
     4d4:	af 92       	push	r10
     4d6:	bf 92       	push	r11
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	2b 01       	movw	r4, r22
     4e2:	3c 01       	movw	r6, r24
    float current_depth = 0;
    while (current_depth < depth){
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	a9 01       	movw	r20, r18
     4ea:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__gesf2>
     4ee:	18 16       	cp	r1, r24
     4f0:	4c f0       	brlt	.+18     	; 0x504 <dive+0x3c>
     4f2:	31 c0       	rjmp	.+98     	; 0x556 <dive+0x8e>
     4f4:	a5 01       	movw	r20, r10
     4f6:	94 01       	movw	r18, r8
     4f8:	c3 01       	movw	r24, r6
     4fa:	b2 01       	movw	r22, r4
     4fc:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__gesf2>
     500:	18 16       	cp	r1, r24
     502:	4c f5       	brge	.+82     	; 0x556 <dive+0x8e>
        current_depth = get_depth_feet();
     504:	0e 94 57 0a 	call	0x14ae	; 0x14ae <get_depth_feet>
     508:	4b 01       	movw	r8, r22
     50a:	5c 01       	movw	r10, r24
        move(50,50,STABLE_Z + 20);
     50c:	60 91 00 01 	lds	r22, 0x0100
     510:	70 91 01 01 	lds	r23, 0x0101
     514:	6c 5e       	subi	r22, 0xEC	; 236
     516:	7f 4f       	sbci	r23, 0xFF	; 255
     518:	07 2e       	mov	r0, r23
     51a:	00 0c       	add	r0, r0
     51c:	88 0b       	sbc	r24, r24
     51e:	99 0b       	sbc	r25, r25
     520:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
     524:	7b 01       	movw	r14, r22
     526:	8c 01       	movw	r16, r24
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	48 e4       	ldi	r20, 0x48	; 72
     52e:	52 e4       	ldi	r21, 0x42	; 66
     530:	ca 01       	movw	r24, r20
     532:	b9 01       	movw	r22, r18
     534:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
     538:	8f e9       	ldi	r24, 0x9F	; 159
     53a:	9f e0       	ldi	r25, 0x0F	; 15
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	f1 f7       	brne	.-4      	; 0x53c <dive+0x74>
     540:	00 c0       	rjmp	.+0      	; 0x542 <dive+0x7a>
     542:	00 00       	nop
    set_rgb(red,green,blue);
}

void auto_delay(int ms){
    _delay_ms(1);
    if (bumper_hit){
     544:	80 91 e0 02 	lds	r24, 0x02E0
     548:	90 91 e1 02 	lds	r25, 0x02E1
     54c:	89 2b       	or	r24, r25
     54e:	91 f2       	breq	.-92     	; 0x4f4 <dive+0x2c>
        bumper_response();
     550:	0e 94 be 01 	call	0x37c	; 0x37c <bumper_response>
     554:	cf cf       	rjmp	.-98     	; 0x4f4 <dive+0x2c>
    while (current_depth < depth){
        current_depth = get_depth_feet();
        move(50,50,STABLE_Z + 20);
        auto_delay(100);
    }
    move(50,50,STABLE_Z);
     556:	60 91 00 01 	lds	r22, 0x0100
     55a:	70 91 01 01 	lds	r23, 0x0101
     55e:	07 2e       	mov	r0, r23
     560:	00 0c       	add	r0, r0
     562:	88 0b       	sbc	r24, r24
     564:	99 0b       	sbc	r25, r25
     566:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
     56a:	7b 01       	movw	r14, r22
     56c:	8c 01       	movw	r16, r24
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	48 e4       	ldi	r20, 0x48	; 72
     574:	52 e4       	ldi	r21, 0x42	; 66
     576:	ca 01       	movw	r24, r20
     578:	b9 01       	movw	r22, r18
     57a:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
}
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	bf 90       	pop	r11
     588:	af 90       	pop	r10
     58a:	9f 90       	pop	r9
     58c:	8f 90       	pop	r8
     58e:	7f 90       	pop	r7
     590:	6f 90       	pop	r6
     592:	5f 90       	pop	r5
     594:	4f 90       	pop	r4
     596:	08 95       	ret

00000598 <init_data_timer>:
/**********
*    Timer 0
**********/
void init_data_timer(){
    //CTC Mode
    TCCR0 |= (1 << WGM01);
     598:	83 b7       	in	r24, 0x33	; 51
     59a:	88 60       	ori	r24, 0x08	; 8
     59c:	83 bf       	out	0x33, r24	; 51
    TCCR0 &= ~(1 << WGM00);
     59e:	83 b7       	in	r24, 0x33	; 51
     5a0:	8f 7b       	andi	r24, 0xBF	; 191
     5a2:	83 bf       	out	0x33, r24	; 51

    //Prescalar 1024
    TCCR0 |= (1 << CS02);
     5a4:	83 b7       	in	r24, 0x33	; 51
     5a6:	84 60       	ori	r24, 0x04	; 4
     5a8:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1 << CS01);
     5aa:	83 b7       	in	r24, 0x33	; 51
     5ac:	82 60       	ori	r24, 0x02	; 2
     5ae:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1 << CS00);
     5b0:	83 b7       	in	r24, 0x33	; 51
     5b2:	81 60       	ori	r24, 0x01	; 1
     5b4:	83 bf       	out	0x33, r24	; 51

    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     5b6:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     5b8:	f8 94       	cli
    /* Set TCNTn to 1 */
    TCNT0 = 1;
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	92 bf       	out	0x32, r25	; 50
    sei();
     5be:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     5c0:	8f bf       	out	0x3f, r24	; 63
    OCR0 = 255;
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	81 bf       	out	0x31, r24	; 49

    //Enable timer0 interrupt
    ETIMSK = (1 << OCIE0);
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	80 93 7d 00 	sts	0x007D, r24
     5cc:	08 95       	ret

000005ce <path1>:

}

void path1(){
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r\n");
     5d6:	8a ea       	ldi	r24, 0xAA	; 170
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    move(50 + (MOVE_SPEED/2),50 + (MOVE_SPEED/2),0);
     5de:	e1 2c       	mov	r14, r1
     5e0:	f1 2c       	mov	r15, r1
     5e2:	87 01       	movw	r16, r14
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	46 e9       	ldi	r20, 0x96	; 150
     5ea:	52 e4       	ldi	r21, 0x42	; 66
     5ec:	ca 01       	movw	r24, r20
     5ee:	b9 01       	movw	r22, r18
     5f0:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
     5f4:	8f e9       	ldi	r24, 0x9F	; 159
     5f6:	9f e0       	ldi	r25, 0x0F	; 15
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <path1+0x2a>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <path1+0x30>
     5fe:	00 00       	nop
    set_rgb(red,green,blue);
}

void auto_delay(int ms){
    _delay_ms(1);
    if (bumper_hit){
     600:	80 91 e0 02 	lds	r24, 0x02E0
     604:	90 91 e1 02 	lds	r25, 0x02E1
     608:	89 2b       	or	r24, r25
     60a:	09 f0       	breq	.+2      	; 0x60e <path1+0x40>
     60c:	1d c1       	rjmp	.+570    	; 0x848 <path1+0x27a>
    move(50 + (MOVE_SPEED/2),50 + (MOVE_SPEED/2),0);
    auto_delay(2000);
    //Down 3 seconds (aim for about 4 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Down");
    USART0_send_string((unsigned char*)"Move Down\r\n");
     60e:	89 eb       	ldi	r24, 0xB9	; 185
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    move (50,50,0);
     616:	e1 2c       	mov	r14, r1
     618:	f1 2c       	mov	r15, r1
     61a:	87 01       	movw	r16, r14
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	48 e4       	ldi	r20, 0x48	; 72
     622:	52 e4       	ldi	r21, 0x42	; 66
     624:	ca 01       	movw	r24, r20
     626:	b9 01       	movw	r22, r18
     628:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
    while (get_depth_feet() < AUTO_DIVE_DEPTH);
     62c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <get_depth_feet>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 ea       	ldi	r20, 0xA0	; 160
     636:	50 e4       	ldi	r21, 0x40	; 64
     638:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__cmpsf2>
     63c:	87 fd       	sbrc	r24, 7
     63e:	f6 cf       	rjmp	.-20     	; 0x62c <path1+0x5e>
    //spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    USART0_send_string((unsigned char*)"Turn Left\r\n");
     640:	85 ec       	ldi	r24, 0xC5	; 197
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     648:	60 91 00 01 	lds	r22, 0x0100
     64c:	70 91 01 01 	lds	r23, 0x0101
     650:	07 2e       	mov	r0, r23
     652:	00 0c       	add	r0, r0
     654:	88 0b       	sbc	r24, r24
     656:	99 0b       	sbc	r25, r25
     658:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
     65c:	7b 01       	movw	r14, r22
     65e:	8c 01       	movw	r16, r24
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	46 e9       	ldi	r20, 0x96	; 150
     666:	52 e4       	ldi	r21, 0x42	; 66
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	88 ec       	ldi	r24, 0xC8	; 200
     66e:	91 e4       	ldi	r25, 0x41	; 65
     670:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
     674:	8f e9       	ldi	r24, 0x9F	; 159
     676:	9f e0       	ldi	r25, 0x0F	; 15
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	f1 f7       	brne	.-4      	; 0x678 <path1+0xaa>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <path1+0xb0>
     67e:	00 00       	nop
    set_rgb(red,green,blue);
}

void auto_delay(int ms){
    _delay_ms(1);
    if (bumper_hit){
     680:	80 91 e0 02 	lds	r24, 0x02E0
     684:	90 91 e1 02 	lds	r25, 0x02E1
     688:	89 2b       	or	r24, r25
     68a:	09 f0       	breq	.+2      	; 0x68e <path1+0xc0>
     68c:	da c0       	rjmp	.+436    	; 0x842 <path1+0x274>
    auto_delay(500);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r\n");
     68e:	8a ea       	ldi	r24, 0xAA	; 170
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     696:	60 91 00 01 	lds	r22, 0x0100
     69a:	70 91 01 01 	lds	r23, 0x0101
     69e:	07 2e       	mov	r0, r23
     6a0:	00 0c       	add	r0, r0
     6a2:	88 0b       	sbc	r24, r24
     6a4:	99 0b       	sbc	r25, r25
     6a6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
     6aa:	7b 01       	movw	r14, r22
     6ac:	8c 01       	movw	r16, r24
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	46 e9       	ldi	r20, 0x96	; 150
     6b4:	52 e4       	ldi	r21, 0x42	; 66
     6b6:	ca 01       	movw	r24, r20
     6b8:	b9 01       	movw	r22, r18
     6ba:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
     6be:	8f e9       	ldi	r24, 0x9F	; 159
     6c0:	9f e0       	ldi	r25, 0x0F	; 15
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <path1+0xf4>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <path1+0xfa>
     6c8:	00 00       	nop
    set_rgb(red,green,blue);
}

void auto_delay(int ms){
    _delay_ms(1);
    if (bumper_hit){
     6ca:	80 91 e0 02 	lds	r24, 0x02E0
     6ce:	90 91 e1 02 	lds	r25, 0x02E1
     6d2:	89 2b       	or	r24, r25
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <path1+0x10a>
     6d6:	b2 c0       	rjmp	.+356    	; 0x83c <path1+0x26e>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
    auto_delay(2000);
    //Spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    USART0_send_string((unsigned char*)"Turn Left\r\n");
     6d8:	85 ec       	ldi	r24, 0xC5	; 197
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     6e0:	60 91 00 01 	lds	r22, 0x0100
     6e4:	70 91 01 01 	lds	r23, 0x0101
     6e8:	07 2e       	mov	r0, r23
     6ea:	00 0c       	add	r0, r0
     6ec:	88 0b       	sbc	r24, r24
     6ee:	99 0b       	sbc	r25, r25
     6f0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
     6f4:	7b 01       	movw	r14, r22
     6f6:	8c 01       	movw	r16, r24
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	46 e9       	ldi	r20, 0x96	; 150
     6fe:	52 e4       	ldi	r21, 0x42	; 66
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	88 ec       	ldi	r24, 0xC8	; 200
     706:	91 e4       	ldi	r25, 0x41	; 65
     708:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
     70c:	8f e9       	ldi	r24, 0x9F	; 159
     70e:	9f e0       	ldi	r25, 0x0F	; 15
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	f1 f7       	brne	.-4      	; 0x710 <path1+0x142>
     714:	00 c0       	rjmp	.+0      	; 0x716 <path1+0x148>
     716:	00 00       	nop
    set_rgb(red,green,blue);
}

void auto_delay(int ms){
    _delay_ms(1);
    if (bumper_hit){
     718:	80 91 e0 02 	lds	r24, 0x02E0
     71c:	90 91 e1 02 	lds	r25, 0x02E1
     720:	89 2b       	or	r24, r25
     722:	09 f0       	breq	.+2      	; 0x726 <path1+0x158>
     724:	88 c0       	rjmp	.+272    	; 0x836 <path1+0x268>
    auto_delay(500);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r\n");
     726:	8a ea       	ldi	r24, 0xAA	; 170
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     72e:	60 91 00 01 	lds	r22, 0x0100
     732:	70 91 01 01 	lds	r23, 0x0101
     736:	07 2e       	mov	r0, r23
     738:	00 0c       	add	r0, r0
     73a:	88 0b       	sbc	r24, r24
     73c:	99 0b       	sbc	r25, r25
     73e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
     742:	7b 01       	movw	r14, r22
     744:	8c 01       	movw	r16, r24
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	46 e9       	ldi	r20, 0x96	; 150
     74c:	52 e4       	ldi	r21, 0x42	; 66
     74e:	ca 01       	movw	r24, r20
     750:	b9 01       	movw	r22, r18
     752:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
     756:	8f e9       	ldi	r24, 0x9F	; 159
     758:	9f e0       	ldi	r25, 0x0F	; 15
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <path1+0x18c>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <path1+0x192>
     760:	00 00       	nop
    set_rgb(red,green,blue);
}

void auto_delay(int ms){
    _delay_ms(1);
    if (bumper_hit){
     762:	80 91 e0 02 	lds	r24, 0x02E0
     766:	90 91 e1 02 	lds	r25, 0x02E1
     76a:	89 2b       	or	r24, r25
     76c:	09 f0       	breq	.+2      	; 0x770 <path1+0x1a2>
     76e:	60 c0       	rjmp	.+192    	; 0x830 <path1+0x262>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
    auto_delay(2000);
    //Up 3 seconds (resurface)
    // clear_display();
    // string2lcd((unsigned char *)"Up");
    USART0_send_string((unsigned char*)"Move Up\r\n");
     770:	81 ed       	ldi	r24, 0xD1	; 209
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    move(50,50,100);
     778:	e1 2c       	mov	r14, r1
     77a:	f1 2c       	mov	r15, r1
     77c:	08 ec       	ldi	r16, 0xC8	; 200
     77e:	12 e4       	ldi	r17, 0x42	; 66
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	48 e4       	ldi	r20, 0x48	; 72
     786:	52 e4       	ldi	r21, 0x42	; 66
     788:	ca 01       	movw	r24, r20
     78a:	b9 01       	movw	r22, r18
     78c:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
    while (get_depth_feet() > 1);
     790:	0e 94 57 0a 	call	0x14ae	; 0x14ae <get_depth_feet>
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e8       	ldi	r20, 0x80	; 128
     79a:	5f e3       	ldi	r21, 0x3F	; 63
     79c:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__gesf2>
     7a0:	18 16       	cp	r1, r24
     7a2:	b4 f3       	brlt	.-20     	; 0x790 <path1+0x1c2>
    //Spin left 90 degrees
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r\n");
     7a4:	8a ea       	ldi	r24, 0xAA	; 170
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, 0);
     7ac:	e1 2c       	mov	r14, r1
     7ae:	f1 2c       	mov	r15, r1
     7b0:	87 01       	movw	r16, r14
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	46 e9       	ldi	r20, 0x96	; 150
     7b8:	52 e4       	ldi	r21, 0x42	; 66
     7ba:	ca 01       	movw	r24, r20
     7bc:	b9 01       	movw	r22, r18
     7be:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
     7c2:	8f e9       	ldi	r24, 0x9F	; 159
     7c4:	9f e0       	ldi	r25, 0x0F	; 15
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <path1+0x1f8>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <path1+0x1fe>
     7cc:	00 00       	nop
    set_rgb(red,green,blue);
}

void auto_delay(int ms){
    _delay_ms(1);
    if (bumper_hit){
     7ce:	80 91 e0 02 	lds	r24, 0x02E0
     7d2:	90 91 e1 02 	lds	r25, 0x02E1
     7d6:	89 2b       	or	r24, r25
     7d8:	41 f5       	brne	.+80     	; 0x82a <path1+0x25c>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, 0);
    auto_delay(2000);
    //Spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    USART0_send_string((unsigned char*)"Turn Left\r\n");
     7da:	85 ec       	ldi	r24, 0xC5	; 197
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, 0);
     7e2:	e1 2c       	mov	r14, r1
     7e4:	f1 2c       	mov	r15, r1
     7e6:	87 01       	movw	r16, r14
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	46 e9       	ldi	r20, 0x96	; 150
     7ee:	52 e4       	ldi	r21, 0x42	; 66
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	88 ec       	ldi	r24, 0xC8	; 200
     7f6:	91 e4       	ldi	r25, 0x41	; 65
     7f8:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
     7fc:	8f e9       	ldi	r24, 0x9F	; 159
     7fe:	9f e0       	ldi	r25, 0x0F	; 15
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	f1 f7       	brne	.-4      	; 0x800 <path1+0x232>
     804:	00 c0       	rjmp	.+0      	; 0x806 <path1+0x238>
     806:	00 00       	nop
    set_rgb(red,green,blue);
}

void auto_delay(int ms){
    _delay_ms(1);
    if (bumper_hit){
     808:	80 91 e0 02 	lds	r24, 0x02E0
     80c:	90 91 e1 02 	lds	r25, 0x02E1
     810:	89 2b       	or	r24, r25
     812:	29 f4       	brne	.+10     	; 0x81e <path1+0x250>
    USART0_send_string((unsigned char*)"Turn Left\r\n");
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, 0);
    auto_delay(500);
    //turn(-90);
    //Complete (back in some position as start)
}
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	08 95       	ret
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
}

void auto_delay(int ms){
    _delay_ms(1);
    if (bumper_hit){
        bumper_response();
     826:	0c 94 be 01 	jmp	0x37c	; 0x37c <bumper_response>
     82a:	0e 94 be 01 	call	0x37c	; 0x37c <bumper_response>
     82e:	d5 cf       	rjmp	.-86     	; 0x7da <path1+0x20c>
     830:	0e 94 be 01 	call	0x37c	; 0x37c <bumper_response>
     834:	9d cf       	rjmp	.-198    	; 0x770 <path1+0x1a2>
     836:	0e 94 be 01 	call	0x37c	; 0x37c <bumper_response>
     83a:	75 cf       	rjmp	.-278    	; 0x726 <path1+0x158>
     83c:	0e 94 be 01 	call	0x37c	; 0x37c <bumper_response>
     840:	4b cf       	rjmp	.-362    	; 0x6d8 <path1+0x10a>
     842:	0e 94 be 01 	call	0x37c	; 0x37c <bumper_response>
     846:	23 cf       	rjmp	.-442    	; 0x68e <path1+0xc0>
     848:	0e 94 be 01 	call	0x37c	; 0x37c <bumper_response>
     84c:	e0 ce       	rjmp	.-576    	; 0x60e <path1+0x40>

0000084e <path2>:
     84e:	08 95       	ret

00000850 <path3>:
}
void path2(){
    //Implement if necessary

}
void path3(){
     850:	08 95       	ret

00000852 <turn>:
    //Implement if necessary
}

void turn(int degrees){
     852:	cf 92       	push	r12
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	ec 01       	movw	r28, r24
    int *x = 0;
    int *y = 0;
    int *z = 0;
    float headingDegrees = getHeading(x,y,z);
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 7e 09 	call	0x12fc	; 0x12fc <getHeading>
     874:	6b 01       	movw	r12, r22
     876:	7c 01       	movw	r14, r24
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
     878:	be 01       	movw	r22, r28
     87a:	0d 2e       	mov	r0, r29
     87c:	00 0c       	add	r0, r0
     87e:	88 0b       	sbc	r24, r24
     880:	99 0b       	sbc	r25, r25
     882:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
     886:	a7 01       	movw	r20, r14
     888:	96 01       	movw	r18, r12
     88a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3>
     88e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fixsfsi>
     892:	cb 01       	movw	r24, r22
     894:	68 e6       	ldi	r22, 0x68	; 104
     896:	71 e0       	ldi	r23, 0x01	; 1
     898:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__divmodhi4>
     89c:	8c 01       	movw	r16, r24
    if (degrees < 0){
     89e:	d7 fd       	sbrc	r29, 7
     8a0:	29 c0       	rjmp	.+82     	; 0x8f4 <turn+0xa2>
        while ((int)headingDegrees != new_heading){
            move(-TURN_SPEED,TURN_SPEED,50);
            getHeading(x,y,z);
        }
    }
    else if (degrees > 0){
     8a2:	cd 2b       	or	r28, r29
     8a4:	f1 f0       	breq	.+60     	; 0x8e2 <turn+0x90>
        //Spin right until new heading
        while ((int)headingDegrees != (int)new_heading){
     8a6:	c7 01       	movw	r24, r14
     8a8:	b6 01       	movw	r22, r12
     8aa:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fixsfsi>
     8ae:	06 17       	cp	r16, r22
     8b0:	17 07       	cpc	r17, r23
     8b2:	b9 f0       	breq	.+46     	; 0x8e2 <turn+0x90>
            move(TURN_SPEED,-TURN_SPEED,50);
     8b4:	e1 2c       	mov	r14, r1
     8b6:	f1 2c       	mov	r15, r1
     8b8:	08 e4       	ldi	r16, 0x48	; 72
     8ba:	12 e4       	ldi	r17, 0x42	; 66
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	40 e7       	ldi	r20, 0x70	; 112
     8c2:	51 ec       	ldi	r21, 0xC1	; 193
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	80 e7       	ldi	r24, 0x70	; 112
     8ca:	91 e4       	ldi	r25, 0x41	; 65
     8cc:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
            getHeading(x,y,z);
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 7e 09 	call	0x12fc	; 0x12fc <getHeading>
     8e0:	e9 cf       	rjmp	.-46     	; 0x8b4 <turn+0x62>
        }
    }
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	08 95       	ret
    float headingDegrees = getHeading(x,y,z);
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
    if (degrees < 0){
        //Spin left until new heading
        while ((int)headingDegrees != new_heading){
     8f4:	c7 01       	movw	r24, r14
     8f6:	b6 01       	movw	r22, r12
     8f8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fixsfsi>
     8fc:	06 17       	cp	r16, r22
     8fe:	17 07       	cpc	r17, r23
     900:	81 f3       	breq	.-32     	; 0x8e2 <turn+0x90>
            move(-TURN_SPEED,TURN_SPEED,50);
     902:	e1 2c       	mov	r14, r1
     904:	f1 2c       	mov	r15, r1
     906:	08 e4       	ldi	r16, 0x48	; 72
     908:	12 e4       	ldi	r17, 0x42	; 66
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e7       	ldi	r20, 0x70	; 112
     910:	51 e4       	ldi	r21, 0x41	; 65
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 e7       	ldi	r24, 0x70	; 112
     918:	91 ec       	ldi	r25, 0xC1	; 193
     91a:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
            getHeading(x,y,z);
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <getHeading>
     92e:	e9 cf       	rjmp	.-46     	; 0x902 <turn+0xb0>

00000930 <depth_to_leds>:
            getHeading(x,y,z);
        }
    }
}

void depth_to_leds(){
     930:	8f 92       	push	r8
     932:	9f 92       	push	r9
     934:	af 92       	push	r10
     936:	bf 92       	push	r11
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
    float depth = get_depth_feet();
     940:	0e 94 57 0a 	call	0x14ae	; 0x14ae <get_depth_feet>
     944:	6b 01       	movw	r12, r22
     946:	7c 01       	movw	r14, r24
    int red = 0;
    int green = 0;
    int blue = 0;

    red = (int)((depth)/((float)MAX_DEPTH) * 255);
    green = (int)((MAX_DEPTH - depth)/((float)MAX_DEPTH) * 255);
     948:	9b 01       	movw	r18, r22
     94a:	ac 01       	movw	r20, r24
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	80 e4       	ldi	r24, 0x40	; 64
     952:	91 e4       	ldi	r25, 0x41	; 65
     954:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__subsf3>
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	40 e4       	ldi	r20, 0x40	; 64
     95e:	51 e4       	ldi	r21, 0x41	; 65
     960:	0e 94 df 0c 	call	0x19be	; 0x19be <__divsf3>
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	4f e7       	ldi	r20, 0x7F	; 127
     96a:	53 e4       	ldi	r21, 0x43	; 67
     96c:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__mulsf3>
     970:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fixsfsi>
     974:	4b 01       	movw	r8, r22
     976:	5c 01       	movw	r10, r24
    float depth = get_depth_feet();
    int red = 0;
    int green = 0;
    int blue = 0;

    red = (int)((depth)/((float)MAX_DEPTH) * 255);
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	40 e4       	ldi	r20, 0x40	; 64
     97e:	51 e4       	ldi	r21, 0x41	; 65
     980:	c7 01       	movw	r24, r14
     982:	b6 01       	movw	r22, r12
     984:	0e 94 df 0c 	call	0x19be	; 0x19be <__divsf3>
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	4f e7       	ldi	r20, 0x7F	; 127
     98e:	53 e4       	ldi	r21, 0x43	; 67
     990:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__mulsf3>
     994:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fixsfsi>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
    green = (int)((MAX_DEPTH - depth)/((float)MAX_DEPTH) * 255);

    set_rgb(red,green,blue);
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	b4 01       	movw	r22, r8
}
     9a2:	ff 90       	pop	r15
     9a4:	ef 90       	pop	r14
     9a6:	df 90       	pop	r13
     9a8:	cf 90       	pop	r12
     9aa:	bf 90       	pop	r11
     9ac:	af 90       	pop	r10
     9ae:	9f 90       	pop	r9
     9b0:	8f 90       	pop	r8
    int blue = 0;

    red = (int)((depth)/((float)MAX_DEPTH) * 255);
    green = (int)((MAX_DEPTH - depth)/((float)MAX_DEPTH) * 255);

    set_rgb(red,green,blue);
     9b2:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <set_rgb>

000009b6 <auto_delay>:
     9b6:	8f e9       	ldi	r24, 0x9F	; 159
     9b8:	9f e0       	ldi	r25, 0x0F	; 15
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <auto_delay+0x4>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <auto_delay+0xa>
     9c0:	00 00       	nop
}

void auto_delay(int ms){
    _delay_ms(1);
    if (bumper_hit){
     9c2:	80 91 e0 02 	lds	r24, 0x02E0
     9c6:	90 91 e1 02 	lds	r25, 0x02E1
     9ca:	89 2b       	or	r24, r25
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <auto_delay+0x1a>
     9ce:	08 95       	ret
        bumper_response();
     9d0:	0c 94 be 01 	jmp	0x37c	; 0x37c <bumper_response>

000009d4 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     9d4:	88 e4       	ldi	r24, 0x48	; 72
     9d6:	80 93 70 00 	sts	0x0070, r24
     9da:	08 95       	ret

000009dc <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     9dc:	10 92 74 00 	sts	0x0074, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     9e0:	94 ea       	ldi	r25, 0xA4	; 164
     9e2:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     9e6:	90 91 74 00 	lds	r25, 0x0074
     9ea:	97 ff       	sbrs	r25, 7
     9ec:	fc cf       	rjmp	.-8      	; 0x9e6 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     9ee:	90 91 71 00 	lds	r25, 0x0071
     9f2:	98 7f       	andi	r25, 0xF8	; 248
     9f4:	98 30       	cpi	r25, 0x08	; 8
     9f6:	11 f0       	breq	.+4      	; 0x9fc <i2c_start+0x20>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
     9fc:	80 93 73 00 	sts	0x0073, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     a00:	84 e8       	ldi	r24, 0x84	; 132
     a02:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a06:	80 91 74 00 	lds	r24, 0x0074
     a0a:	87 ff       	sbrs	r24, 7
     a0c:	fc cf       	rjmp	.-8      	; 0xa06 <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     a0e:	80 91 71 00 	lds	r24, 0x0071
     a12:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     a14:	88 31       	cpi	r24, 0x18	; 24
     a16:	11 f0       	breq	.+4      	; 0xa1c <i2c_start+0x40>
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	71 f7       	brne	.-36     	; 0x9f8 <i2c_start+0x1c>
	
	return 0;
     a1c:	80 e0       	ldi	r24, 0x00	; 0
}
     a1e:	08 95       	ret

00000a20 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     a20:	80 93 73 00 	sts	0x0073, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     a24:	84 e8       	ldi	r24, 0x84	; 132
     a26:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a2a:	80 91 74 00 	lds	r24, 0x0074
     a2e:	87 ff       	sbrs	r24, 7
     a30:	fc cf       	rjmp	.-8      	; 0xa2a <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     a32:	90 91 71 00 	lds	r25, 0x0071
     a36:	98 7f       	andi	r25, 0xF8	; 248
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	98 32       	cpi	r25, 0x28	; 40
     a3c:	09 f0       	breq	.+2      	; 0xa40 <i2c_write+0x20>
	
	return 0;
}
     a3e:	08 95       	ret
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     a40:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     a42:	08 95       	ret

00000a44 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     a44:	84 ec       	ldi	r24, 0xC4	; 196
     a46:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a4a:	80 91 74 00 	lds	r24, 0x0074
     a4e:	87 ff       	sbrs	r24, 7
     a50:	fc cf       	rjmp	.-8      	; 0xa4a <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
     a52:	80 91 73 00 	lds	r24, 0x0073
}
     a56:	08 95       	ret

00000a58 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     a58:	84 e8       	ldi	r24, 0x84	; 132
     a5a:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a5e:	80 91 74 00 	lds	r24, 0x0074
     a62:	87 ff       	sbrs	r24, 7
     a64:	fc cf       	rjmp	.-8      	; 0xa5e <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
     a66:	80 91 73 00 	lds	r24, 0x0073
}
     a6a:	08 95       	ret

00000a6c <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	8b 01       	movw	r16, r22
     a76:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     a78:	0e 94 ee 04 	call	0x9dc	; 0x9dc <i2c_start>
     a7c:	81 11       	cpse	r24, r1
     a7e:	1f c0       	rjmp	.+62     	; 0xabe <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
     a80:	20 97       	sbiw	r28, 0x00	; 0
     a82:	a9 f0       	breq	.+42     	; 0xaae <i2c_transmit+0x42>
     a84:	f8 01       	movw	r30, r16
     a86:	c0 0f       	add	r28, r16
     a88:	d1 1f       	adc	r29, r17
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     a8a:	24 e8       	ldi	r18, 0x84	; 132
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     a8c:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     a8e:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     a92:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a96:	90 91 74 00 	lds	r25, 0x0074
     a9a:	97 ff       	sbrs	r25, 7
     a9c:	fc cf       	rjmp	.-8      	; 0xa96 <i2c_transmit+0x2a>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     a9e:	90 91 71 00 	lds	r25, 0x0071
     aa2:	98 7f       	andi	r25, 0xF8	; 248
     aa4:	98 32       	cpi	r25, 0x28	; 40
     aa6:	59 f4       	brne	.+22     	; 0xabe <i2c_transmit+0x52>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
     aa8:	ec 17       	cp	r30, r28
     aaa:	fd 07       	cpc	r31, r29
     aac:	79 f7       	brne	.-34     	; 0xa8c <i2c_transmit+0x20>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     aae:	94 e9       	ldi	r25, 0x94	; 148
     ab0:	90 93 74 00 	sts	0x0074, r25
	}
	
	i2c_stop();
	
	return 0;
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	08 95       	ret
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     abe:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	08 95       	ret

00000aca <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	8b 01       	movw	r16, r22
     ad4:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_READ)) return 1;
     ad6:	81 60       	ori	r24, 0x01	; 1
     ad8:	0e 94 ee 04 	call	0x9dc	; 0x9dc <i2c_start>
     adc:	81 11       	cpse	r24, r1
     ade:	25 c0       	rjmp	.+74     	; 0xb2a <i2c_receive+0x60>
	
	for (uint16_t i = 0; i < (length-1); i++)
     ae0:	de 01       	movw	r26, r28
     ae2:	11 97       	sbiw	r26, 0x01	; 1
     ae4:	41 f1       	breq	.+80     	; 0xb36 <i2c_receive+0x6c>
     ae6:	f8 01       	movw	r30, r16
     ae8:	a0 0f       	add	r26, r16
     aea:	b1 1f       	adc	r27, r17

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     aec:	24 ec       	ldi	r18, 0xC4	; 196
     aee:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     af2:	90 91 74 00 	lds	r25, 0x0074
     af6:	97 ff       	sbrs	r25, 7
     af8:	fc cf       	rjmp	.-8      	; 0xaf2 <i2c_receive+0x28>
	// return received data from TWDR
	return TWDR;
     afa:	90 91 73 00 	lds	r25, 0x0073
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     afe:	91 93       	st	Z+, r25

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
     b00:	ae 17       	cp	r26, r30
     b02:	bf 07       	cpc	r27, r31
     b04:	a1 f7       	brne	.-24     	; 0xaee <i2c_receive+0x24>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     b06:	94 e8       	ldi	r25, 0x84	; 132
     b08:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     b0c:	90 91 74 00 	lds	r25, 0x0074
     b10:	97 ff       	sbrs	r25, 7
     b12:	fc cf       	rjmp	.-8      	; 0xb0c <i2c_receive+0x42>
	// return received data from TWDR
	return TWDR;
     b14:	90 91 73 00 	lds	r25, 0x0073
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     b18:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     b1a:	94 e9       	ldi	r25, 0x94	; 148
     b1c:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	08 95       	ret
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	08 95       	ret
     b36:	d8 01       	movw	r26, r16
     b38:	e6 cf       	rjmp	.-52     	; 0xb06 <i2c_receive+0x3c>

00000b3a <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	16 2f       	mov	r17, r22
     b46:	f4 2e       	mov	r15, r20
     b48:	05 2f       	mov	r16, r21
     b4a:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr | 0x00)) return 1;
     b4c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <i2c_start>
     b50:	81 11       	cpse	r24, r1
     b52:	2c c0       	rjmp	.+88     	; 0xbac <i2c_writeReg+0x72>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     b54:	10 93 73 00 	sts	0x0073, r17
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     b58:	94 e8       	ldi	r25, 0x84	; 132
     b5a:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     b5e:	90 91 74 00 	lds	r25, 0x0074
     b62:	97 ff       	sbrs	r25, 7
     b64:	fc cf       	rjmp	.-8      	; 0xb5e <i2c_writeReg+0x24>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     b66:	90 91 71 00 	lds	r25, 0x0071
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     b6a:	20 97       	sbiw	r28, 0x00	; 0
     b6c:	b1 f0       	breq	.+44     	; 0xb9a <i2c_writeReg+0x60>
     b6e:	ef 2d       	mov	r30, r15
     b70:	f0 2f       	mov	r31, r16
     b72:	ce 0f       	add	r28, r30
     b74:	df 1f       	adc	r29, r31
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     b76:	44 e8       	ldi	r20, 0x84	; 132

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     b78:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     b7a:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     b7e:	40 93 74 00 	sts	0x0074, r20
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     b82:	90 91 74 00 	lds	r25, 0x0074
     b86:	97 ff       	sbrs	r25, 7
     b88:	fc cf       	rjmp	.-8      	; 0xb82 <i2c_writeReg+0x48>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     b8a:	90 91 71 00 	lds	r25, 0x0071
     b8e:	98 7f       	andi	r25, 0xF8	; 248
     b90:	98 32       	cpi	r25, 0x28	; 40
     b92:	61 f4       	brne	.+24     	; 0xbac <i2c_writeReg+0x72>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     b94:	ec 17       	cp	r30, r28
     b96:	fd 07       	cpc	r31, r29
     b98:	79 f7       	brne	.-34     	; 0xb78 <i2c_writeReg+0x3e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     b9a:	94 e9       	ldi	r25, 0x94	; 148
     b9c:	90 93 74 00 	sts	0x0074, r25
	}

	i2c_stop();

	return 0;
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	ff 90       	pop	r15
     baa:	08 95       	ret
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	ff 90       	pop	r15
     bb8:	08 95       	ret

00000bba <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     bba:	ef 92       	push	r14
     bbc:	ff 92       	push	r15
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	18 2f       	mov	r17, r24
     bc8:	06 2f       	mov	r16, r22
     bca:	7a 01       	movw	r14, r20
     bcc:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
     bce:	0e 94 ee 04 	call	0x9dc	; 0x9dc <i2c_start>
     bd2:	81 11       	cpse	r24, r1
     bd4:	38 c0       	rjmp	.+112    	; 0xc46 <i2c_readReg+0x8c>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     bd6:	00 93 73 00 	sts	0x0073, r16
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     bda:	84 e8       	ldi	r24, 0x84	; 132
     bdc:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     be0:	80 91 74 00 	lds	r24, 0x0074
     be4:	87 ff       	sbrs	r24, 7
     be6:	fc cf       	rjmp	.-8      	; 0xbe0 <i2c_readReg+0x26>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     be8:	80 91 71 00 	lds	r24, 0x0071
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
     bec:	81 2f       	mov	r24, r17
     bee:	81 60       	ori	r24, 0x01	; 1
     bf0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <i2c_start>
     bf4:	81 11       	cpse	r24, r1
     bf6:	27 c0       	rjmp	.+78     	; 0xc46 <i2c_readReg+0x8c>

	for (uint16_t i = 0; i < (length-1); i++)
     bf8:	de 01       	movw	r26, r28
     bfa:	11 97       	sbiw	r26, 0x01	; 1
     bfc:	61 f1       	breq	.+88     	; 0xc56 <i2c_readReg+0x9c>
     bfe:	f7 01       	movw	r30, r14
     c00:	ae 0d       	add	r26, r14
     c02:	bf 1d       	adc	r27, r15

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     c04:	24 ec       	ldi	r18, 0xC4	; 196
     c06:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     c0a:	90 91 74 00 	lds	r25, 0x0074
     c0e:	97 ff       	sbrs	r25, 7
     c10:	fc cf       	rjmp	.-8      	; 0xc0a <i2c_readReg+0x50>
	// return received data from TWDR
	return TWDR;
     c12:	90 91 73 00 	lds	r25, 0x0073

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     c16:	91 93       	st	Z+, r25

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
     c18:	ea 17       	cp	r30, r26
     c1a:	fb 07       	cpc	r31, r27
     c1c:	a1 f7       	brne	.-24     	; 0xc06 <i2c_readReg+0x4c>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     c1e:	94 e8       	ldi	r25, 0x84	; 132
     c20:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     c24:	90 91 74 00 	lds	r25, 0x0074
     c28:	97 ff       	sbrs	r25, 7
     c2a:	fc cf       	rjmp	.-8      	; 0xc24 <i2c_readReg+0x6a>
	// return received data from TWDR
	return TWDR;
     c2c:	90 91 73 00 	lds	r25, 0x0073

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     c30:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     c32:	94 e9       	ldi	r25, 0x94	; 148
     c34:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	08 95       	ret
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
     c46:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	ef 90       	pop	r14
     c54:	08 95       	ret
     c56:	d7 01       	movw	r26, r14
     c58:	e2 cf       	rjmp	.-60     	; 0xc1e <i2c_readReg+0x64>

00000c5a <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     c5a:	84 e9       	ldi	r24, 0x94	; 148
     c5c:	80 93 74 00 	sts	0x0074, r24
     c60:	08 95       	ret

00000c62 <enable_adc>:
#include "./adc.h"


void enable_adc(){
	DDRF = 0x00;
     c62:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0x00;
     c66:	10 92 62 00 	sts	0x0062, r1
	//internally wire REFSn bits in the ADMUX register to connect VREF 
		//to internal 2.56v reference --> 0.0025 v/step
	//ADMUX = (1 << REFS0) | (1 << REFS1); //2.56v
	ADMUX = (1 << REFS0); //AVCC
     c6a:	80 e4       	ldi	r24, 0x40	; 64
     c6c:	87 b9       	out	0x07, r24	; 7
	//Single ended input, gain is not allowed
	
	//Default Right Adjusted

	//Set ADEN in ADSCRA to enable ADC
	ADCSRA = (1 << ADEN);
     c6e:	80 e8       	ldi	r24, 0x80	; 128
     c70:	86 b9       	out	0x06, r24	; 6
	//Set the ADC Clock frequency prescaler to 128 --> 125kHz
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     c72:	86 b1       	in	r24, 0x06	; 6
     c74:	87 60       	ori	r24, 0x07	; 7
     c76:	86 b9       	out	0x06, r24	; 6
	//Set free running mode
	//ADCSRA |= (1 << ADFR);
	//Enable the ADC Interrupt Flag
	//ADCSRA |= (1 << ADIE);
	//Start first conversion by setting ADSC in ADCSRA
	ADCSRA |= (1 << ADSC);
     c78:	36 9a       	sbi	0x06, 6	; 6
     c7a:	08 95       	ret

00000c7c <read_adc>:

}
int read_adc(int pin){
     c7c:	fc 01       	movw	r30, r24
	int data;
	if (pin > 7){
     c7e:	08 97       	sbiw	r24, 0x08	; 8
     c80:	fc f4       	brge	.+62     	; 0xcc0 <read_adc+0x44>
     c82:	40 e0       	ldi	r20, 0x00	; 0
     c84:	50 e0       	ldi	r21, 0x00	; 0
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
		ADMUX &= ~(1 << i);
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	97 b1       	in	r25, 0x07	; 7
     c8c:	9b 01       	movw	r18, r22
     c8e:	04 2e       	mov	r0, r20
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <read_adc+0x18>
     c92:	22 0f       	add	r18, r18
     c94:	0a 94       	dec	r0
     c96:	ea f7       	brpl	.-6      	; 0xc92 <read_adc+0x16>
     c98:	20 95       	com	r18
     c9a:	29 23       	and	r18, r25
     c9c:	27 b9       	out	0x07, r18	; 7
	if (pin > 7){
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
     c9e:	4f 5f       	subi	r20, 0xFF	; 255
     ca0:	5f 4f       	sbci	r21, 0xFF	; 255
     ca2:	45 30       	cpi	r20, 0x05	; 5
     ca4:	51 05       	cpc	r21, r1
     ca6:	89 f7       	brne	.-30     	; 0xc8a <read_adc+0xe>
		ADMUX &= ~(1 << i);
	}
	//set the new mux bit
	ADMUX |= pin;
     ca8:	97 b1       	in	r25, 0x07	; 7
     caa:	89 2f       	mov	r24, r25
     cac:	8e 2b       	or	r24, r30
     cae:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
     cb0:	36 9a       	sbi	0x06, 6	; 6
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
     cb2:	34 9b       	sbis	0x06, 4	; 6
     cb4:	fe cf       	rjmp	.-4      	; 0xcb2 <read_adc+0x36>
	data = ADCL;
     cb6:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);
     cb8:	25 b1       	in	r18, 0x05	; 5
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	92 2b       	or	r25, r18
     cbe:	08 95       	ret

}
int read_adc(int pin){
	int data;
	if (pin > 7){
		return -1;
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	9f ef       	ldi	r25, 0xFF	; 255
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
	data = ADCL;
	data |= (ADCH << 8);
	return data;
}
     cc4:	08 95       	ret

00000cc6 <get_voltage>:
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
     cc6:	88 30       	cpi	r24, 0x08	; 8
     cc8:	91 05       	cpc	r25, r1
     cca:	20 f0       	brcs	.+8      	; 0xcd4 <get_voltage+0xe>
		return 0;
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
}
     cd2:	08 95       	ret
}
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
		return 0;
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
     cd4:	0e 94 3e 06 	call	0xc7c	; 0xc7c <read_adc>
     cd8:	bc 01       	movw	r22, r24
     cda:	99 0f       	add	r25, r25
     cdc:	88 0b       	sbc	r24, r24
     cde:	99 0b       	sbc	r25, r25
     ce0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 ea       	ldi	r20, 0xA0	; 160
     cea:	5b e3       	ldi	r21, 0x3B	; 59
     cec:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__mulsf3>
     cf0:	08 95       	ret

00000cf2 <strobe_lcd>:
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     cf2:	e2 e6       	ldi	r30, 0x62	; 98
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	88 60       	ori	r24, 0x08	; 8
     cfa:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     cfc:	80 81       	ld	r24, Z
     cfe:	87 7f       	andi	r24, 0xF7	; 247
     d00:	80 83       	st	Z, r24
     d02:	08 95       	ret

00000d04 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     d04:	77 9b       	sbis	0x0e, 7	; 14
     d06:	fe cf       	rjmp	.-4      	; 0xd04 <clear_display>
    SPDR = 0x00;    //command, not data
     d08:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     d0a:	77 9b       	sbis	0x0e, 7	; 14
     d0c:	fe cf       	rjmp	.-4      	; 0xd0a <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     d12:	77 9b       	sbis	0x0e, 7	; 14
     d14:	fe cf       	rjmp	.-4      	; 0xd12 <clear_display+0xe>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     d16:	80 91 62 00 	lds	r24, 0x0062
     d1a:	88 60       	ori	r24, 0x08	; 8
     d1c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     d20:	80 91 62 00 	lds	r24, 0x0062
     d24:	87 7f       	andi	r24, 0xF7	; 247
     d26:	80 93 62 00 	sts	0x0062, r24
     d2a:	8f e9       	ldi	r24, 0x9F	; 159
     d2c:	98 e2       	ldi	r25, 0x28	; 40
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <clear_display+0x2a>
     d32:	00 c0       	rjmp	.+0      	; 0xd34 <clear_display+0x30>
     d34:	00 00       	nop
     d36:	08 95       	ret

00000d38 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     d38:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     d3a:	77 9b       	sbis	0x0e, 7	; 14
     d3c:	fe cf       	rjmp	.-4      	; 0xd3a <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     d3e:	80 ec       	ldi	r24, 0xC0	; 192
     d40:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     d42:	77 9b       	sbis	0x0e, 7	; 14
     d44:	fe cf       	rjmp	.-4      	; 0xd42 <home_line2+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     d46:	80 91 62 00 	lds	r24, 0x0062
     d4a:	88 60       	ori	r24, 0x08	; 8
     d4c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     d50:	80 91 62 00 	lds	r24, 0x0062
     d54:	87 7f       	andi	r24, 0xF7	; 247
     d56:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d5a:	85 ec       	ldi	r24, 0xC5	; 197
     d5c:	8a 95       	dec	r24
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <home_line2+0x24>
     d60:	00 00       	nop
     d62:	08 95       	ret

00000d64 <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     d68:	77 9b       	sbis	0x0e, 7	; 14
     d6a:	fe cf       	rjmp	.-4      	; 0xd68 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     d6c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     d6e:	77 9b       	sbis	0x0e, 7	; 14
     d70:	fe cf       	rjmp	.-4      	; 0xd6e <char2lcd+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     d72:	80 91 62 00 	lds	r24, 0x0062
     d76:	88 60       	ori	r24, 0x08	; 8
     d78:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     d7c:	80 91 62 00 	lds	r24, 0x0062
     d80:	87 7f       	andi	r24, 0xF7	; 247
     d82:	80 93 62 00 	sts	0x0062, r24
     d86:	85 ec       	ldi	r24, 0xC5	; 197
     d88:	8a 95       	dec	r24
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <char2lcd+0x24>
     d8c:	00 00       	nop
     d8e:	08 95       	ret

00000d90 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	fc 01       	movw	r30, r24
     d96:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     d9c:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     d9e:	77 9b       	sbis	0x0e, 7	; 14
     da0:	fe cf       	rjmp	.-4      	; 0xd9e <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     da2:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     da4:	77 9b       	sbis	0x0e, 7	; 14
     da6:	fe cf       	rjmp	.-4      	; 0xda4 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     da8:	8d 91       	ld	r24, X+
     daa:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     dac:	77 9b       	sbis	0x0e, 7	; 14
     dae:	fe cf       	rjmp	.-4      	; 0xdac <string2lcd+0x1c>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     db0:	90 91 62 00 	lds	r25, 0x0062
     db4:	98 60       	ori	r25, 0x08	; 8
     db6:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     dba:	90 91 62 00 	lds	r25, 0x0062
     dbe:	97 7f       	andi	r25, 0xF7	; 247
     dc0:	90 93 62 00 	sts	0x0062, r25
     dc4:	85 ec       	ldi	r24, 0xC5	; 197
     dc6:	8a 95       	dec	r24
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <string2lcd+0x36>
     dca:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     dcc:	4f 5f       	subi	r20, 0xFF	; 255
     dce:	5f 4f       	sbci	r21, 0xFF	; 255
     dd0:	ef 01       	movw	r28, r30
     dd2:	09 90       	ld	r0, Y+
     dd4:	00 20       	and	r0, r0
     dd6:	e9 f7       	brne	.-6      	; 0xdd2 <string2lcd+0x42>
     dd8:	9e 01       	movw	r18, r28
     dda:	2e 1b       	sub	r18, r30
     ddc:	3f 0b       	sbc	r19, r31
     dde:	22 50       	subi	r18, 0x02	; 2
     de0:	31 09       	sbc	r19, r1
     de2:	24 17       	cp	r18, r20
     de4:	35 07       	cpc	r19, r21
     de6:	d8 f6       	brcc	.-74     	; 0xd9e <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	08 95       	ret

00000dee <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     dee:	e1 e6       	ldi	r30, 0x61	; 97
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	88 60       	ori	r24, 0x08	; 8
     df6:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     df8:	88 b3       	in	r24, 0x18	; 24
     dfa:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     dfc:	87 b3       	in	r24, 0x17	; 23
     dfe:	87 60       	ori	r24, 0x07	; 7
     e00:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     e02:	80 e5       	ldi	r24, 0x50	; 80
     e04:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	8e b9       	out	0x0e, r24	; 14
     e0a:	08 95       	ret

00000e0c <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e0c:	8f e5       	ldi	r24, 0x5F	; 95
     e0e:	9a ee       	ldi	r25, 0xEA	; 234
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <lcd_init+0x4>
     e14:	00 c0       	rjmp	.+0      	; 0xe16 <lcd_init+0xa>
     e16:	00 00       	nop
     e18:	23 e0       	ldi	r18, 0x03	; 3
     e1a:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     e1c:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     e1e:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e20:	77 9b       	sbis	0x0e, 7	; 14
     e22:	fe cf       	rjmp	.-4      	; 0xe20 <lcd_init+0x14>
        SPDR = 0x30;
     e24:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e26:	77 9b       	sbis	0x0e, 7	; 14
     e28:	fe cf       	rjmp	.-4      	; 0xe26 <lcd_init+0x1a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     e2a:	80 91 62 00 	lds	r24, 0x0062
     e2e:	88 60       	ori	r24, 0x08	; 8
     e30:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     e34:	80 91 62 00 	lds	r24, 0x0062
     e38:	87 7f       	andi	r24, 0xF7	; 247
     e3a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e3e:	85 ec       	ldi	r24, 0xC5	; 197
     e40:	8a 95       	dec	r24
     e42:	f1 f7       	brne	.-4      	; 0xe40 <lcd_init+0x34>
     e44:	00 00       	nop
     e46:	21 50       	subi	r18, 0x01	; 1
     e48:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     e4a:	49 f7       	brne	.-46     	; 0xe1e <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     e4c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e4e:	77 9b       	sbis	0x0e, 7	; 14
     e50:	fe cf       	rjmp	.-4      	; 0xe4e <lcd_init+0x42>
    SPDR = 0x38;
     e52:	88 e3       	ldi	r24, 0x38	; 56
     e54:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e56:	77 9b       	sbis	0x0e, 7	; 14
     e58:	fe cf       	rjmp	.-4      	; 0xe56 <lcd_init+0x4a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     e5a:	80 91 62 00 	lds	r24, 0x0062
     e5e:	88 60       	ori	r24, 0x08	; 8
     e60:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     e64:	80 91 62 00 	lds	r24, 0x0062
     e68:	87 7f       	andi	r24, 0xF7	; 247
     e6a:	80 93 62 00 	sts	0x0062, r24
     e6e:	95 ec       	ldi	r25, 0xC5	; 197
     e70:	9a 95       	dec	r25
     e72:	f1 f7       	brne	.-4      	; 0xe70 <lcd_init+0x64>
     e74:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     e76:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e78:	77 9b       	sbis	0x0e, 7	; 14
     e7a:	fe cf       	rjmp	.-4      	; 0xe78 <lcd_init+0x6c>
    SPDR = 0x08;
     e7c:	88 e0       	ldi	r24, 0x08	; 8
     e7e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e80:	77 9b       	sbis	0x0e, 7	; 14
     e82:	fe cf       	rjmp	.-4      	; 0xe80 <lcd_init+0x74>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     e84:	80 91 62 00 	lds	r24, 0x0062
     e88:	88 60       	ori	r24, 0x08	; 8
     e8a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     e8e:	80 91 62 00 	lds	r24, 0x0062
     e92:	87 7f       	andi	r24, 0xF7	; 247
     e94:	80 93 62 00 	sts	0x0062, r24
     e98:	85 ec       	ldi	r24, 0xC5	; 197
     e9a:	8a 95       	dec	r24
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <lcd_init+0x8e>
     e9e:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     ea0:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ea2:	77 9b       	sbis	0x0e, 7	; 14
     ea4:	fe cf       	rjmp	.-4      	; 0xea2 <lcd_init+0x96>
    SPDR = 0x01;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     eaa:	77 9b       	sbis	0x0e, 7	; 14
     eac:	fe cf       	rjmp	.-4      	; 0xeaa <lcd_init+0x9e>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     eae:	80 91 62 00 	lds	r24, 0x0062
     eb2:	88 60       	ori	r24, 0x08	; 8
     eb4:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     eb8:	80 91 62 00 	lds	r24, 0x0062
     ebc:	87 7f       	andi	r24, 0xF7	; 247
     ebe:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	98 e1       	ldi	r25, 0x18	; 24
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <lcd_init+0xba>
     eca:	00 c0       	rjmp	.+0      	; 0xecc <lcd_init+0xc0>
     ecc:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
     ece:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ed0:	77 9b       	sbis	0x0e, 7	; 14
     ed2:	fe cf       	rjmp	.-4      	; 0xed0 <lcd_init+0xc4>
    SPDR = 0x06;
     ed4:	86 e0       	ldi	r24, 0x06	; 6
     ed6:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ed8:	77 9b       	sbis	0x0e, 7	; 14
     eda:	fe cf       	rjmp	.-4      	; 0xed8 <lcd_init+0xcc>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     edc:	80 91 62 00 	lds	r24, 0x0062
     ee0:	88 60       	ori	r24, 0x08	; 8
     ee2:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     ee6:	80 91 62 00 	lds	r24, 0x0062
     eea:	87 7f       	andi	r24, 0xF7	; 247
     eec:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ef0:	95 ec       	ldi	r25, 0xC5	; 197
     ef2:	9a 95       	dec	r25
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <lcd_init+0xe6>
     ef6:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     ef8:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     efa:	77 9b       	sbis	0x0e, 7	; 14
     efc:	fe cf       	rjmp	.-4      	; 0xefa <lcd_init+0xee>
    SPDR = 0x0E;
     efe:	8e e0       	ldi	r24, 0x0E	; 14
     f00:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     f02:	77 9b       	sbis	0x0e, 7	; 14
     f04:	fe cf       	rjmp	.-4      	; 0xf02 <lcd_init+0xf6>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     f06:	80 91 62 00 	lds	r24, 0x0062
     f0a:	88 60       	ori	r24, 0x08	; 8
     f0c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     f10:	80 91 62 00 	lds	r24, 0x0062
     f14:	87 7f       	andi	r24, 0xF7	; 247
     f16:	80 93 62 00 	sts	0x0062, r24
     f1a:	85 ec       	ldi	r24, 0xC5	; 197
     f1c:	8a 95       	dec	r24
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <lcd_init+0x110>
     f20:	00 00       	nop
     f22:	08 95       	ret

00000f24 <USART1_Init>:
#include "uart.h"


void USART1_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     f24:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
     f28:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     f2c:	88 e1       	ldi	r24, 0x18	; 24
     f2e:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (3<<UCSZ10);
     f32:	86 e0       	ldi	r24, 0x06	; 6
     f34:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f38:	2f ef       	ldi	r18, 0xFF	; 255
     f3a:	81 ee       	ldi	r24, 0xE1	; 225
     f3c:	94 e0       	ldi	r25, 0x04	; 4
     f3e:	21 50       	subi	r18, 0x01	; 1
     f40:	80 40       	sbci	r24, 0x00	; 0
     f42:	90 40       	sbci	r25, 0x00	; 0
     f44:	e1 f7       	brne	.-8      	; 0xf3e <USART1_Init+0x1a>
     f46:	00 c0       	rjmp	.+0      	; 0xf48 <USART1_Init+0x24>
     f48:	00 00       	nop
     f4a:	08 95       	ret

00000f4c <USART1_Transmit>:
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     f4c:	90 91 9b 00 	lds	r25, 0x009B
     f50:	95 ff       	sbrs	r25, 5
     f52:	fc cf       	rjmp	.-8      	; 0xf4c <USART1_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     f54:	80 93 9c 00 	sts	0x009C, r24
     f58:	08 95       	ret

00000f5a <USART1_send_string>:
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     f5a:	fc 01       	movw	r30, r24
     f5c:	20 81       	ld	r18, Z
     f5e:	22 23       	and	r18, r18
     f60:	51 f0       	breq	.+20     	; 0xf76 <USART1_send_string+0x1c>
     f62:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     f64:	90 91 9b 00 	lds	r25, 0x009B
     f68:	95 ff       	sbrs	r25, 5
     f6a:	fc cf       	rjmp	.-8      	; 0xf64 <USART1_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     f6c:	20 93 9c 00 	sts	0x009C, r18
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     f70:	21 91       	ld	r18, Z+
     f72:	21 11       	cpse	r18, r1
     f74:	f7 cf       	rjmp	.-18     	; 0xf64 <USART1_send_string+0xa>
     f76:	08 95       	ret

00000f78 <USART1_Receive>:
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     f78:	80 91 9b 00 	lds	r24, 0x009B
     f7c:	87 ff       	sbrs	r24, 7
     f7e:	fc cf       	rjmp	.-8      	; 0xf78 <USART1_Receive>
    return UDR1;
     f80:	80 91 9c 00 	lds	r24, 0x009C
}
     f84:	08 95       	ret

00000f86 <USART1_Receive_String>:

void USART1_Receive_String(unsigned char *str){
     f86:	dc 01       	movw	r26, r24
     f88:	fc 01       	movw	r30, r24
     f8a:	9c 01       	movw	r18, r24
     f8c:	2b 5f       	subi	r18, 0xFB	; 251
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     f90:	90 91 9b 00 	lds	r25, 0x009B
     f94:	97 ff       	sbrs	r25, 7
     f96:	fc cf       	rjmp	.-8      	; 0xf90 <USART1_Receive_String+0xa>
    return UDR1;
     f98:	90 91 9c 00 	lds	r25, 0x009C

void USART1_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     f9c:	9e 37       	cpi	r25, 0x7E	; 126
     f9e:	29 f0       	breq	.+10     	; 0xfaa <USART1_Receive_String+0x24>
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
     fa0:	e2 17       	cp	r30, r18
     fa2:	f3 07       	cpc	r31, r19
     fa4:	19 f0       	breq	.+6      	; 0xfac <USART1_Receive_String+0x26>
            str[2] = 75;
            str[3] = END_STRING;
            str[4] = '\0';
            break;
        }
        str[i] = c;
     fa6:	91 93       	st	Z+, r25
     fa8:	f3 cf       	rjmp	.-26     	; 0xf90 <USART1_Receive_String+0xa>
     faa:	08 95       	ret
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
     fac:	82 e3       	ldi	r24, 0x32	; 50
     fae:	8c 93       	st	X, r24
            str[1] = 25;
     fb0:	89 e1       	ldi	r24, 0x19	; 25
     fb2:	11 96       	adiw	r26, 0x01	; 1
     fb4:	8c 93       	st	X, r24
     fb6:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 75;
     fb8:	8b e4       	ldi	r24, 0x4B	; 75
     fba:	12 96       	adiw	r26, 0x02	; 2
     fbc:	8c 93       	st	X, r24
     fbe:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
     fc0:	8e e7       	ldi	r24, 0x7E	; 126
     fc2:	13 96       	adiw	r26, 0x03	; 3
     fc4:	8c 93       	st	X, r24
     fc6:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
     fc8:	14 96       	adiw	r26, 0x04	; 4
     fca:	1c 92       	st	X, r1
            break;
     fcc:	08 95       	ret

00000fce <USART1_flush>:
        str[i] = c;
        ++i;
    }
}

void USART1_flush(){
     fce:	ec ec       	ldi	r30, 0xCC	; 204
     fd0:	f2 e0       	ldi	r31, 0x02	; 2
     fd2:	96 e4       	ldi	r25, 0x46	; 70
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     fd4:	80 91 9b 00 	lds	r24, 0x009B
     fd8:	85 ff       	sbrs	r24, 5
     fda:	fc cf       	rjmp	.-8      	; 0xfd4 <USART1_flush+0x6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     fdc:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     fe0:	91 91       	ld	r25, Z+
     fe2:	91 11       	cpse	r25, r1
     fe4:	f7 cf       	rjmp	.-18     	; 0xfd4 <USART1_flush+0x6>
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     fe6:	80 91 9b 00 	lds	r24, 0x009B
     fea:	87 ff       	sbrs	r24, 7
     fec:	0c c0       	rjmp	.+24     	; 0x1006 <USART1_flush+0x38>
        dummy = UDR1;
     fee:	90 91 9c 00 	lds	r25, 0x009C
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     ff2:	80 91 9b 00 	lds	r24, 0x009B
     ff6:	85 ff       	sbrs	r24, 5
     ff8:	fc cf       	rjmp	.-8      	; 0xff2 <USART1_flush+0x24>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     ffa:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     ffe:	80 91 9b 00 	lds	r24, 0x009B
    1002:	87 fd       	sbrc	r24, 7
    1004:	f4 cf       	rjmp	.-24     	; 0xfee <USART1_flush+0x20>
    1006:	08 95       	ret

00001008 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
    1008:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
    100c:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    100e:	88 e1       	ldi	r24, 0x18	; 24
    1010:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */ 
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    1012:	8e e0       	ldi	r24, 0x0E	; 14
    1014:	80 93 95 00 	sts	0x0095, r24
    1018:	2f ef       	ldi	r18, 0xFF	; 255
    101a:	81 ee       	ldi	r24, 0xE1	; 225
    101c:	94 e0       	ldi	r25, 0x04	; 4
    101e:	21 50       	subi	r18, 0x01	; 1
    1020:	80 40       	sbci	r24, 0x00	; 0
    1022:	90 40       	sbci	r25, 0x00	; 0
    1024:	e1 f7       	brne	.-8      	; 0x101e <USART0_Init+0x16>
    1026:	00 c0       	rjmp	.+0      	; 0x1028 <USART0_Init+0x20>
    1028:	00 00       	nop
    102a:	08 95       	ret

0000102c <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
    102c:	5d 9b       	sbis	0x0b, 5	; 11
    102e:	fe cf       	rjmp	.-4      	; 0x102c <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
    1030:	8c b9       	out	0x0c, r24	; 12
    1032:	08 95       	ret

00001034 <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
    1034:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
    1036:	90 81       	ld	r25, Z
    1038:	99 23       	and	r25, r25
    103a:	39 f0       	breq	.+14     	; 0x104a <USART0_send_string+0x16>
    103c:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
    103e:	5d 9b       	sbis	0x0b, 5	; 11
    1040:	fe cf       	rjmp	.-4      	; 0x103e <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
    1042:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
    1044:	91 91       	ld	r25, Z+
    1046:	91 11       	cpse	r25, r1
    1048:	fa cf       	rjmp	.-12     	; 0x103e <USART0_send_string+0xa>
    104a:	08 95       	ret

0000104c <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
    104c:	80 e8       	ldi	r24, 0x80	; 128
    104e:	9d e8       	ldi	r25, 0x8D	; 141
    1050:	ab e5       	ldi	r26, 0x5B	; 91
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	04 c0       	rjmp	.+8      	; 0x105e <USART0_Receive+0x12>
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	a1 09       	sbc	r26, r1
    105a:	b1 09       	sbc	r27, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
    105c:	21 f0       	breq	.+8      	; 0x1066 <USART0_Receive+0x1a>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
    105e:	5f 9b       	sbis	0x0b, 7	; 11
    1060:	fa cf       	rjmp	.-12     	; 0x1056 <USART0_Receive+0xa>
            /* Get and return received data from buffer */ 
            return UDR0;
    1062:	8c b1       	in	r24, 0x0c	; 12
    1064:	08 95       	ret
        }
    } while (--timeout);
    return 255;
    1066:	8f ef       	ldi	r24, 0xFF	; 255
    /********
    * This is the original
    ************/
    //while (!(UCSR0A & (1<<RXC0)));
    //return UDR0;
}
    1068:	08 95       	ret

0000106a <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
    106a:	dc 01       	movw	r26, r24
    106c:	fc 01       	movw	r30, r24
    106e:	9c 01       	movw	r18, r24
    1070:	2b 5f       	subi	r18, 0xFB	; 251
    1072:	3f 4f       	sbci	r19, 0xFF	; 255
    1074:	40 e8       	ldi	r20, 0x80	; 128
    1076:	5d e8       	ldi	r21, 0x8D	; 141
    1078:	6b e5       	ldi	r22, 0x5B	; 91
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	05 c0       	rjmp	.+10     	; 0x1088 <USART0_Receive_String+0x1e>
    107e:	41 50       	subi	r20, 0x01	; 1
    1080:	51 09       	sbc	r21, r1
    1082:	61 09       	sbc	r22, r1
    1084:	71 09       	sbc	r23, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
    1086:	61 f0       	breq	.+24     	; 0x10a0 <USART0_Receive_String+0x36>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
    1088:	5f 9b       	sbis	0x0b, 7	; 11
    108a:	f9 cf       	rjmp	.-14     	; 0x107e <USART0_Receive_String+0x14>
            /* Get and return received data from buffer */ 
            return UDR0;
    108c:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
    108e:	9e 37       	cpi	r25, 0x7E	; 126
    1090:	b1 f0       	breq	.+44     	; 0x10be <USART0_Receive_String+0x54>
        if (c == 255 || i > MAX_STRING_SIZE - 1){
    1092:	9f 3f       	cpi	r25, 0xFF	; 255
    1094:	29 f0       	breq	.+10     	; 0x10a0 <USART0_Receive_String+0x36>
    1096:	e2 17       	cp	r30, r18
    1098:	f3 07       	cpc	r31, r19
    109a:	11 f0       	breq	.+4      	; 0x10a0 <USART0_Receive_String+0x36>
            str[2] = 50;
            str[3] = END_STRING;
            str[4] = '\0';
            return;
        }
        str[i] = c;
    109c:	91 93       	st	Z+, r25
    109e:	ea cf       	rjmp	.-44     	; 0x1074 <USART0_Receive_String+0xa>
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
    10a0:	82 e3       	ldi	r24, 0x32	; 50
    10a2:	8c 93       	st	X, r24
            str[1] = 50;
    10a4:	11 96       	adiw	r26, 0x01	; 1
    10a6:	8c 93       	st	X, r24
    10a8:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
    10aa:	12 96       	adiw	r26, 0x02	; 2
    10ac:	8c 93       	st	X, r24
    10ae:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
    10b0:	8e e7       	ldi	r24, 0x7E	; 126
    10b2:	13 96       	adiw	r26, 0x03	; 3
    10b4:	8c 93       	st	X, r24
    10b6:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
    10b8:	14 96       	adiw	r26, 0x04	; 4
    10ba:	1c 92       	st	X, r1
            return;
    10bc:	08 95       	ret
    10be:	08 95       	ret

000010c0 <USART0_flush>:
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
    10c0:	5f 9b       	sbis	0x0b, 7	; 11
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <USART0_flush+0xa>
        dummy = UDR0;
    10c4:	8c b1       	in	r24, 0x0c	; 12
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
    10c6:	5f 99       	sbic	0x0b, 7	; 11
    10c8:	fd cf       	rjmp	.-6      	; 0x10c4 <USART0_flush+0x4>
    10ca:	08 95       	ret

000010cc <init_esc>:

void init_motors(){
    set_16bitPWM1();
}

void init_esc(){
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
    10d0:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10d2:	ef e6       	ldi	r30, 0x6F	; 111
    10d4:	f7 e1       	ldi	r31, 0x17	; 23
    10d6:	31 97       	sbiw	r30, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <init_esc+0xa>
    10da:	00 c0       	rjmp	.+0      	; 0x10dc <init_esc+0x10>
    10dc:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
    10de:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10e0:	ff ef       	ldi	r31, 0xFF	; 255
    10e2:	23 ed       	ldi	r18, 0xD3	; 211
    10e4:	30 e3       	ldi	r19, 0x30	; 48
    10e6:	f1 50       	subi	r31, 0x01	; 1
    10e8:	20 40       	sbci	r18, 0x00	; 0
    10ea:	30 40       	sbci	r19, 0x00	; 0
    10ec:	e1 f7       	brne	.-8      	; 0x10e6 <init_esc+0x1a>
    10ee:	00 c0       	rjmp	.+0      	; 0x10f0 <init_esc+0x24>
    10f0:	00 00       	nop
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
    10f4:	69 f7       	brne	.-38     	; 0x10d0 <init_esc+0x4>
        PORTB |= (1 << 4);
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
        _delay_ms(1000);
    }
}
    10f6:	08 95       	ret

000010f8 <set_16bitPWM1>:

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
    10f8:	8f b5       	in	r24, 0x2f	; 47
    10fa:	80 68       	ori	r24, 0x80	; 128
    10fc:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
    10fe:	8f b5       	in	r24, 0x2f	; 47
    1100:	80 62       	ori	r24, 0x20	; 32
    1102:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
    1104:	8f b5       	in	r24, 0x2f	; 47
    1106:	88 60       	ori	r24, 0x08	; 8
    1108:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
    110a:	8f b5       	in	r24, 0x2f	; 47
    110c:	82 60       	ori	r24, 0x02	; 2
    110e:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
    1110:	8e b5       	in	r24, 0x2e	; 46
    1112:	88 61       	ori	r24, 0x18	; 24
    1114:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
    1116:	8e b5       	in	r24, 0x2e	; 46
    1118:	82 60       	ori	r24, 0x02	; 2
    111a:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
    111c:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
    111e:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
    1120:	21 e0       	ldi	r18, 0x01	; 1
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	3d bd       	out	0x2d, r19	; 45
    1126:	2c bd       	out	0x2c, r18	; 44
    sei();
    1128:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
    112a:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    112c:	8f ef       	ldi	r24, 0xFF	; 255
    112e:	9f ef       	ldi	r25, 0xFF	; 255
    1130:	97 bd       	out	0x27, r25	; 39
    1132:	86 bd       	out	0x26, r24	; 38
    1134:	2f ef       	ldi	r18, 0xFF	; 255
    1136:	81 ee       	ldi	r24, 0xE1	; 225
    1138:	94 e0       	ldi	r25, 0x04	; 4
    113a:	21 50       	subi	r18, 0x01	; 1
    113c:	80 40       	sbci	r24, 0x00	; 0
    113e:	90 40       	sbci	r25, 0x00	; 0
    1140:	e1 f7       	brne	.-8      	; 0x113a <__stack+0x3b>
    1142:	00 c0       	rjmp	.+0      	; 0x1144 <__stack+0x45>
    1144:	00 00       	nop
    1146:	08 95       	ret

00001148 <init_motors>:
#include "motors.h"

void init_motors(){
    set_16bitPWM1();
    1148:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <set_16bitPWM1>

0000114c <TIM16_WriteTCNT1>:
    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
    114c:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
    114e:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
    1150:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
    1152:	3d bd       	out	0x2d, r19	; 45
    1154:	2c bd       	out	0x2c, r18	; 44
    sei();
    1156:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
    1158:	9f bf       	out	0x3f, r25	; 63
    115a:	08 95       	ret

0000115c <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
    115c:	4f 92       	push	r4
    115e:	5f 92       	push	r5
    1160:	6f 92       	push	r6
    1162:	7f 92       	push	r7
    1164:	8f 92       	push	r8
    1166:	9f 92       	push	r9
    1168:	af 92       	push	r10
    116a:	bf 92       	push	r11
    116c:	cf 92       	push	r12
    116e:	df 92       	push	r13
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	2b 01       	movw	r4, r22
    117e:	3c 01       	movw	r6, r24
    1180:	49 01       	movw	r8, r18
    1182:	5a 01       	movw	r10, r20
    1184:	67 01       	movw	r12, r14
    1186:	78 01       	movw	r14, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 ea       	ldi	r20, 0xA0	; 160
    118e:	51 e4       	ldi	r21, 0x41	; 65
    1190:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__cmpsf2>
    1194:	87 fd       	sbrc	r24, 7
    1196:	53 c0       	rjmp	.+166    	; 0x123e <move+0xe2>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 ea       	ldi	r20, 0xA0	; 160
    119e:	52 e4       	ldi	r21, 0x42	; 66
    11a0:	c3 01       	movw	r24, r6
    11a2:	b2 01       	movw	r22, r4
    11a4:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__gesf2>
    11a8:	18 16       	cp	r1, r24
    11aa:	0c f0       	brlt	.+2      	; 0x11ae <move+0x52>
    11ac:	51 c0       	rjmp	.+162    	; 0x1250 <move+0xf4>
    11ae:	c8 e9       	ldi	r28, 0x98	; 152
    11b0:	dd e0       	ldi	r29, 0x0D	; 13
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 ea       	ldi	r20, 0xA0	; 160
    11b8:	51 e4       	ldi	r21, 0x41	; 65
    11ba:	c5 01       	movw	r24, r10
    11bc:	b4 01       	movw	r22, r8
    11be:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__cmpsf2>
    11c2:	87 fd       	sbrc	r24, 7
    11c4:	42 c0       	rjmp	.+132    	; 0x124a <move+0xee>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 ea       	ldi	r20, 0xA0	; 160
    11cc:	52 e4       	ldi	r21, 0x42	; 66
    11ce:	c5 01       	movw	r24, r10
    11d0:	b4 01       	movw	r22, r8
    11d2:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__gesf2>
    11d6:	18 16       	cp	r1, r24
    11d8:	0c f0       	brlt	.+2      	; 0x11dc <move+0x80>
    11da:	5d c0       	rjmp	.+186    	; 0x1296 <move+0x13a>
    11dc:	08 e9       	ldi	r16, 0x98	; 152
    11de:	1d e0       	ldi	r17, 0x0D	; 13
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + Z_SATURATE_DIFFERENCE)){
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e2       	ldi	r20, 0x20	; 32
    11e6:	51 e4       	ldi	r21, 0x41	; 65
    11e8:	c7 01       	movw	r24, r14
    11ea:	b6 01       	movw	r22, r12
    11ec:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__cmpsf2>
    11f0:	87 fd       	sbrc	r24, 7
    11f2:	28 c0       	rjmp	.+80     	; 0x1244 <move+0xe8>
        z = MIN_INPUT + 1;
    }
    if (z > (MAX_INPUT - Z_SATURATE_DIFFERENCE)){
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	44 eb       	ldi	r20, 0xB4	; 180
    11fa:	52 e4       	ldi	r21, 0x42	; 66
    11fc:	c7 01       	movw	r24, r14
    11fe:	b6 01       	movw	r22, r12
    1200:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__gesf2>
    1204:	18 16       	cp	r1, r24
    1206:	b4 f5       	brge	.+108    	; 0x1274 <move+0x118>
    1208:	68 ed       	ldi	r22, 0xD8	; 216
    120a:	7e e0       	ldi	r23, 0x0E	; 14
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different speed controller
    z_speed = (unsigned int)((z - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    OCR1A = left_speed;
    120c:	db bd       	out	0x2b, r29	; 43
    120e:	ca bd       	out	0x2a, r28	; 42
    OCR1B = right_speed;
    1210:	19 bd       	out	0x29, r17	; 41
    1212:	08 bd       	out	0x28, r16	; 40
    OCR1C = z_speed;
    1214:	70 93 79 00 	sts	0x0079, r23
    1218:	60 93 78 00 	sts	0x0078, r22

}
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	bf 90       	pop	r11
    122e:	af 90       	pop	r10
    1230:	9f 90       	pop	r9
    1232:	8f 90       	pop	r8
    1234:	7f 90       	pop	r7
    1236:	6f 90       	pop	r6
    1238:	5f 90       	pop	r5
    123a:	4f 90       	pop	r4
    123c:	08 95       	ret
    123e:	c8 ed       	ldi	r28, 0xD8	; 216
    1240:	d9 e0       	ldi	r29, 0x09	; 9
    1242:	b7 cf       	rjmp	.-146    	; 0x11b2 <move+0x56>
    1244:	68 ea       	ldi	r22, 0xA8	; 168
    1246:	78 e0       	ldi	r23, 0x08	; 8
    1248:	e1 cf       	rjmp	.-62     	; 0x120c <move+0xb0>
    124a:	08 ed       	ldi	r16, 0xD8	; 216
    124c:	19 e0       	ldi	r17, 0x09	; 9
    124e:	c8 cf       	rjmp	.-112    	; 0x11e0 <move+0x84>
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e8       	ldi	r20, 0x80	; 128
    1256:	51 e4       	ldi	r21, 0x41	; 65
    1258:	c3 01       	movw	r24, r6
    125a:	b2 01       	movw	r22, r4
    125c:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__mulsf3>
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e8       	ldi	r19, 0x80	; 128
    1264:	49 e0       	ldi	r20, 0x09	; 9
    1266:	55 e4       	ldi	r21, 0x45	; 69
    1268:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3>
    126c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fixunssfsi>
    1270:	eb 01       	movw	r28, r22
    1272:	9f cf       	rjmp	.-194    	; 0x11b2 <move+0x56>
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e8       	ldi	r20, 0x80	; 128
    127a:	51 e4       	ldi	r21, 0x41	; 65
    127c:	c7 01       	movw	r24, r14
    127e:	b6 01       	movw	r22, r12
    1280:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__mulsf3>
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e8       	ldi	r19, 0x80	; 128
    1288:	49 e0       	ldi	r20, 0x09	; 9
    128a:	55 e4       	ldi	r21, 0x45	; 69
    128c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3>
    1290:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fixunssfsi>
    1294:	bb cf       	rjmp	.-138    	; 0x120c <move+0xb0>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e8       	ldi	r20, 0x80	; 128
    129c:	51 e4       	ldi	r21, 0x41	; 65
    129e:	c5 01       	movw	r24, r10
    12a0:	b4 01       	movw	r22, r8
    12a2:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__mulsf3>
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e8       	ldi	r19, 0x80	; 128
    12aa:	49 e0       	ldi	r20, 0x09	; 9
    12ac:	55 e4       	ldi	r21, 0x45	; 69
    12ae:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3>
    12b2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fixunssfsi>
    12b6:	8b 01       	movw	r16, r22
    12b8:	93 cf       	rjmp	.-218    	; 0x11e0 <move+0x84>

000012ba <init_HMC5883L>:
#include "magnometer.h"

void init_HMC5883L(void){

    i2c_start(HMC5883L_WRITE);
    12ba:	8c e3       	ldi	r24, 0x3C	; 60
    12bc:	0e 94 ee 04 	call	0x9dc	; 0x9dc <i2c_start>
    i2c_write(0x00); // set pointer to CRA
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0e 94 10 05 	call	0xa20	; 0xa20 <i2c_write>
    i2c_write(0x70); // write 0x70 to CRA
    12c6:	80 e7       	ldi	r24, 0x70	; 112
    12c8:	0e 94 10 05 	call	0xa20	; 0xa20 <i2c_write>
    i2c_stop();
    12cc:	0e 94 2d 06 	call	0xc5a	; 0xc5a <i2c_stop>

    i2c_start(HMC5883L_WRITE);
    12d0:	8c e3       	ldi	r24, 0x3C	; 60
    12d2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <i2c_start>
    i2c_write(0x01); // set pointer to CRB
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	0e 94 10 05 	call	0xa20	; 0xa20 <i2c_write>
    i2c_write(0xA0);
    12dc:	80 ea       	ldi	r24, 0xA0	; 160
    12de:	0e 94 10 05 	call	0xa20	; 0xa20 <i2c_write>
    i2c_stop();
    12e2:	0e 94 2d 06 	call	0xc5a	; 0xc5a <i2c_stop>

    i2c_start(HMC5883L_WRITE);
    12e6:	8c e3       	ldi	r24, 0x3C	; 60
    12e8:	0e 94 ee 04 	call	0x9dc	; 0x9dc <i2c_start>
    i2c_write(0x02); // set pointer to measurement mode
    12ec:	82 e0       	ldi	r24, 0x02	; 2
    12ee:	0e 94 10 05 	call	0xa20	; 0xa20 <i2c_write>
    i2c_write(0x00); // continous measurement
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	0e 94 10 05 	call	0xa20	; 0xa20 <i2c_write>
    i2c_stop();
    12f8:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <i2c_stop>

000012fc <getHeading>:
}
float getHeading(int16_t *x, int16_t *y, int16_t *z){
    12fc:	cf 92       	push	r12
    12fe:	df 92       	push	r13
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	8c 01       	movw	r16, r24
    130e:	eb 01       	movw	r28, r22
    1310:	7a 01       	movw	r14, r20

    float headingDegrees;
    
    i2c_start(HMC5883L_WRITE);
    1312:	8c e3       	ldi	r24, 0x3C	; 60
    1314:	0e 94 ee 04 	call	0x9dc	; 0x9dc <i2c_start>
    i2c_write(0x03); // set pointer to X axis MSB
    1318:	83 e0       	ldi	r24, 0x03	; 3
    131a:	0e 94 10 05 	call	0xa20	; 0xa20 <i2c_write>
    i2c_stop();
    131e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <i2c_stop>

    i2c_start(HMC5883L_READ);
    1322:	8d e3       	ldi	r24, 0x3D	; 61
    1324:	0e 94 ee 04 	call	0x9dc	; 0x9dc <i2c_start>

    *x = ((uint8_t)i2c_read_ack())<<8;
    1328:	0e 94 22 05 	call	0xa44	; 0xa44 <i2c_read_ack>
    132c:	f8 01       	movw	r30, r16
    132e:	10 82       	st	Z, r1
    1330:	81 83       	std	Z+1, r24	; 0x01
    *x |= i2c_read_ack();
    1332:	0e 94 22 05 	call	0xa44	; 0xa44 <i2c_read_ack>
    1336:	f8 01       	movw	r30, r16
    1338:	20 81       	ld	r18, Z
    133a:	31 81       	ldd	r19, Z+1	; 0x01
    133c:	28 2b       	or	r18, r24
    133e:	31 83       	std	Z+1, r19	; 0x01
    1340:	20 83       	st	Z, r18

    *z = ((uint8_t)i2c_read_ack())<<8;
    1342:	0e 94 22 05 	call	0xa44	; 0xa44 <i2c_read_ack>
    1346:	f7 01       	movw	r30, r14
    1348:	10 82       	st	Z, r1
    134a:	81 83       	std	Z+1, r24	; 0x01
    *z |= i2c_read_ack();
    134c:	0e 94 22 05 	call	0xa44	; 0xa44 <i2c_read_ack>
    1350:	f7 01       	movw	r30, r14
    1352:	20 81       	ld	r18, Z
    1354:	31 81       	ldd	r19, Z+1	; 0x01
    1356:	28 2b       	or	r18, r24
    1358:	31 83       	std	Z+1, r19	; 0x01
    135a:	20 83       	st	Z, r18

    *y = ((uint8_t)i2c_read_ack())<<8;
    135c:	0e 94 22 05 	call	0xa44	; 0xa44 <i2c_read_ack>
    1360:	18 82       	st	Y, r1
    1362:	89 83       	std	Y+1, r24	; 0x01
    *y |= i2c_read_nack();
    1364:	0e 94 2c 05 	call	0xa58	; 0xa58 <i2c_read_nack>
    1368:	28 81       	ld	r18, Y
    136a:	39 81       	ldd	r19, Y+1	; 0x01
    136c:	28 2b       	or	r18, r24
    136e:	39 83       	std	Y+1, r19	; 0x01
    1370:	28 83       	st	Y, r18

    i2c_stop();
    1372:	0e 94 2d 06 	call	0xc5a	; 0xc5a <i2c_stop>

    headingDegrees = atan2((double)*y,(double)*x) * 180 / 3.141592654 + 180;
    1376:	f8 01       	movw	r30, r16
    1378:	60 81       	ld	r22, Z
    137a:	71 81       	ldd	r23, Z+1	; 0x01
    137c:	07 2e       	mov	r0, r23
    137e:	00 0c       	add	r0, r0
    1380:	88 0b       	sbc	r24, r24
    1382:	99 0b       	sbc	r25, r25
    1384:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
    1388:	6b 01       	movw	r12, r22
    138a:	7c 01       	movw	r14, r24
    138c:	68 81       	ld	r22, Y
    138e:	79 81       	ldd	r23, Y+1	; 0x01
    1390:	07 2e       	mov	r0, r23
    1392:	00 0c       	add	r0, r0
    1394:	88 0b       	sbc	r24, r24
    1396:	99 0b       	sbc	r25, r25
    1398:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
    139c:	a7 01       	movw	r20, r14
    139e:	96 01       	movw	r18, r12
    13a0:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <atan2>
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	44 e3       	ldi	r20, 0x34	; 52
    13aa:	53 e4       	ldi	r21, 0x43	; 67
    13ac:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__mulsf3>
    13b0:	2b ed       	ldi	r18, 0xDB	; 219
    13b2:	3f e0       	ldi	r19, 0x0F	; 15
    13b4:	49 e4       	ldi	r20, 0x49	; 73
    13b6:	50 e4       	ldi	r21, 0x40	; 64
    13b8:	0e 94 df 0c 	call	0x19be	; 0x19be <__divsf3>
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	44 e3       	ldi	r20, 0x34	; 52
    13c2:	53 e4       	ldi	r21, 0x43	; 67
    13c4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3>

    return headingDegrees;
}
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	cf 90       	pop	r12
    13d8:	08 95       	ret

000013da <get_distance>:
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	cb 01       	movw	r24, r22
    13e0:	08 95       	ret

000013e2 <print_distance>:
    return 0;
}

double print_distance(unsigned int pin){
    return 0;
}
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	cb 01       	movw	r24, r22
    13e8:	08 95       	ret

000013ea <enable_laser_sensor>:
void enable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
    13ea:	43 98       	cbi	0x08, 3	; 8

    //enable analog comparator multiplexer, set SFIOR:ACME
    SFIOR |= (1 << ACME);
    13ec:	80 b5       	in	r24, 0x20	; 32
    13ee:	88 60       	ori	r24, 0x08	; 8
    13f0:	80 bd       	out	0x20, r24	; 32

    //set AIN1 to laser sensor pin
    ADMUX &= 0b11111000; //clear the admux input pin bits
    13f2:	87 b1       	in	r24, 0x07	; 7
    13f4:	88 7f       	andi	r24, 0xF8	; 248
    13f6:	87 b9       	out	0x07, r24	; 7
    ADMUX |= LASER_SENSOR;  //set the new bits
    13f8:	38 9a       	sbi	0x07, 0	; 7
    
    //enable analog comparator, clear ACSR:ACD
    ACSR &= ~(1 << ACD);
    13fa:	47 98       	cbi	0x08, 7	; 8
    
    //set comparator interrupt on rising output edge, set ACSR:ACIS1, set ACSR:ACIS0
    ACSR |= (1 << ACIS1) | (1 << ACIS0);
    13fc:	88 b1       	in	r24, 0x08	; 8
    13fe:	83 60       	ori	r24, 0x03	; 3
    1400:	88 b9       	out	0x08, r24	; 8
    
    //enable analog comparator interrupt, set ACSR:ACIE
    ACSR |= (1 << ACIE);
    1402:	43 9a       	sbi	0x08, 3	; 8
    1404:	08 95       	ret

00001406 <disable_laser_sensor>:
    
    //Be sure to handle the interrupt until ACSR:ACO goes low
}
void disable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
    1406:	43 98       	cbi	0x08, 3	; 8

    //disable analog comparator, set ACSR:ACD
    ACSR |= (1 << ACD);
    1408:	47 9a       	sbi	0x08, 7	; 8

    //disable analog comparator multiplexor, clear SFIOR:ACME
    SFIOR &= ~(1 << ACME);
    140a:	80 b5       	in	r24, 0x20	; 32
    140c:	87 7f       	andi	r24, 0xF7	; 247
    140e:	80 bd       	out	0x20, r24	; 32
    1410:	08 95       	ret

00001412 <laser_off>:
}

void laser_off(){
    PORTB |= (1 << LASER);
    1412:	c0 9a       	sbi	0x18, 0	; 24
    1414:	08 95       	ret

00001416 <laser_on>:
}
void laser_on(){
    PORTB &= ~(1 << LASER);
    1416:	c0 98       	cbi	0x18, 0	; 24
    1418:	08 95       	ret

0000141a <calibrate_pressure_sensor>:
#define	PRESSURESENSOR_C

#include "pressuresensor.h"

void calibrate_pressure_sensor(){
	PSENSOR_MIN = get_voltage(PSENSOR_PIN);;
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <get_voltage>
    1422:	60 93 dc 02 	sts	0x02DC, r22
    1426:	70 93 dd 02 	sts	0x02DD, r23
    142a:	80 93 de 02 	sts	0x02DE, r24
    142e:	90 93 df 02 	sts	0x02DF, r25
    1432:	08 95       	ret

00001434 <get_depth_mpa>:
}

double get_depth_mpa(){
    1434:	8f 92       	push	r8
    1436:	9f 92       	push	r9
    1438:	af 92       	push	r10
    143a:	bf 92       	push	r11
    143c:	cf 92       	push	r12
    143e:	df 92       	push	r13
    1440:	ef 92       	push	r14
    1442:	ff 92       	push	r15
	return 1.2 * (get_voltage(PSENSOR_PIN) - PSENSOR_MIN)/(4.5-PSENSOR_MIN);
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 63 06 	call	0xcc6	; 0xcc6 <get_voltage>
    144c:	20 91 dc 02 	lds	r18, 0x02DC
    1450:	30 91 dd 02 	lds	r19, 0x02DD
    1454:	40 91 de 02 	lds	r20, 0x02DE
    1458:	50 91 df 02 	lds	r21, 0x02DF
    145c:	80 90 dc 02 	lds	r8, 0x02DC
    1460:	90 90 dd 02 	lds	r9, 0x02DD
    1464:	a0 90 de 02 	lds	r10, 0x02DE
    1468:	b0 90 df 02 	lds	r11, 0x02DF
    146c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__subsf3>
    1470:	2a e9       	ldi	r18, 0x9A	; 154
    1472:	39 e9       	ldi	r19, 0x99	; 153
    1474:	49 e9       	ldi	r20, 0x99	; 153
    1476:	5f e3       	ldi	r21, 0x3F	; 63
    1478:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__mulsf3>
    147c:	6b 01       	movw	r12, r22
    147e:	7c 01       	movw	r14, r24
    1480:	a5 01       	movw	r20, r10
    1482:	94 01       	movw	r18, r8
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	80 e9       	ldi	r24, 0x90	; 144
    148a:	90 e4       	ldi	r25, 0x40	; 64
    148c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__subsf3>
    1490:	9b 01       	movw	r18, r22
    1492:	ac 01       	movw	r20, r24
    1494:	c7 01       	movw	r24, r14
    1496:	b6 01       	movw	r22, r12
    1498:	0e 94 df 0c 	call	0x19be	; 0x19be <__divsf3>
}
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	df 90       	pop	r13
    14a2:	cf 90       	pop	r12
    14a4:	bf 90       	pop	r11
    14a6:	af 90       	pop	r10
    14a8:	9f 90       	pop	r9
    14aa:	8f 90       	pop	r8
    14ac:	08 95       	ret

000014ae <get_depth_feet>:
double get_depth_feet(){
	return 334.56229215 * get_depth_mpa();
    14ae:	0e 94 1a 0a 	call	0x1434	; 0x1434 <get_depth_mpa>
    14b2:	29 ef       	ldi	r18, 0xF9	; 249
    14b4:	37 e4       	ldi	r19, 0x47	; 71
    14b6:	47 ea       	ldi	r20, 0xA7	; 167
    14b8:	53 e4       	ldi	r21, 0x43	; 67
    14ba:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__mulsf3>
}
    14be:	08 95       	ret

000014c0 <set_rgb>:
        blue = 0;
    if (blue > 255)
        blue = 255;
    temp = (255 - red)/(float)255;
    //OCR3A = temp*ICR3;
    OCR3A = 32000;
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	9d e7       	ldi	r25, 0x7D	; 125
    14c4:	90 93 87 00 	sts	0x0087, r25
    14c8:	80 93 86 00 	sts	0x0086, r24
    temp = (255 - green)/(float)255;
    //OCR3B = temp*ICR3;
    OCR3B = 32000;
    14cc:	90 93 85 00 	sts	0x0085, r25
    14d0:	80 93 84 00 	sts	0x0084, r24
    temp = (255 - blue)/(float)255;
    //OCR3C = temp*ICR3;
    OCR3C = 32000;
    14d4:	90 93 83 00 	sts	0x0083, r25
    14d8:	80 93 82 00 	sts	0x0082, r24
    14dc:	08 95       	ret

000014de <set_16bitPWM3>:

}

void set_16bitPWM3(){

    TCCR3A |= (1 << COM3A1); //non-inverting
    14de:	eb e8       	ldi	r30, 0x8B	; 139
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	80 68       	ori	r24, 0x80	; 128
    14e6:	80 83       	st	Z, r24
    TCCR3A |= (1 << COM3B1); //non-inverting
    14e8:	80 81       	ld	r24, Z
    14ea:	80 62       	ori	r24, 0x20	; 32
    14ec:	80 83       	st	Z, r24
    TCCR3A |= (1 << COM3C1); //non-inverting
    14ee:	80 81       	ld	r24, Z
    14f0:	88 60       	ori	r24, 0x08	; 8
    14f2:	80 83       	st	Z, r24

    //Fast PWM w/ TOP ICR1
    TCCR3A |= (1 << WGM31); 
    14f4:	80 81       	ld	r24, Z
    14f6:	82 60       	ori	r24, 0x02	; 2
    14f8:	80 83       	st	Z, r24
    TCCR3B |= (1 << WGM33) | (1 << WGM32);
    14fa:	ea e8       	ldi	r30, 0x8A	; 138
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	88 61       	ori	r24, 0x18	; 24
    1502:	80 83       	st	Z, r24
    
    switch (LED_PRESCALER){
        case 1:
            TCCR3B |= (1 << CS30); //244.140625 Hz
    1504:	80 81       	ld	r24, Z
    1506:	81 60       	ori	r24, 0x01	; 1
    1508:	80 83       	st	Z, r24
}

void TIM16_WriteTCNT3( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
    150a:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
    150c:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT3 = i;
    150e:	21 e0       	ldi	r18, 0x01	; 1
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	30 93 89 00 	sts	0x0089, r19
    1516:	20 93 88 00 	sts	0x0088, r18
    sei();
    151a:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
    151c:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT3(1);
    ICR3 = (unsigned int) 65535;
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	9f ef       	ldi	r25, 0xFF	; 255
    1522:	90 93 81 00 	sts	0x0081, r25
    1526:	80 93 80 00 	sts	0x0080, r24
    152a:	2f ef       	ldi	r18, 0xFF	; 255
    152c:	81 ee       	ldi	r24, 0xE1	; 225
    152e:	94 e0       	ldi	r25, 0x04	; 4
    1530:	21 50       	subi	r18, 0x01	; 1
    1532:	80 40       	sbci	r24, 0x00	; 0
    1534:	90 40       	sbci	r25, 0x00	; 0
    1536:	e1 f7       	brne	.-8      	; 0x1530 <set_16bitPWM3+0x52>
    1538:	00 c0       	rjmp	.+0      	; 0x153a <set_16bitPWM3+0x5c>
    153a:	00 00       	nop
    153c:	08 95       	ret

0000153e <init_leds>:
#include "leds.h"

void init_leds(){
    DDRE |= (1 << 3) | (1 << 4) | (1 << 5);
    153e:	82 b1       	in	r24, 0x02	; 2
    1540:	88 63       	ori	r24, 0x38	; 56
    1542:	82 b9       	out	0x02, r24	; 2
    PORTE &= ~((1 << 3) | (1 << 4) | (1 << 5));
    1544:	83 b1       	in	r24, 0x03	; 3
    1546:	87 7c       	andi	r24, 0xC7	; 199
    1548:	83 b9       	out	0x03, r24	; 3
    set_16bitPWM3();
    154a:	0e 94 6f 0a 	call	0x14de	; 0x14de <set_16bitPWM3>
        blue = 0;
    if (blue > 255)
        blue = 255;
    temp = (255 - red)/(float)255;
    //OCR3A = temp*ICR3;
    OCR3A = 32000;
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	9d e7       	ldi	r25, 0x7D	; 125
    1552:	90 93 87 00 	sts	0x0087, r25
    1556:	80 93 86 00 	sts	0x0086, r24
    temp = (255 - green)/(float)255;
    //OCR3B = temp*ICR3;
    OCR3B = 32000;
    155a:	90 93 85 00 	sts	0x0085, r25
    155e:	80 93 84 00 	sts	0x0084, r24
    temp = (255 - blue)/(float)255;
    //OCR3C = temp*ICR3;
    OCR3C = 32000;
    1562:	90 93 83 00 	sts	0x0083, r25
    1566:	80 93 82 00 	sts	0x0082, r24
    156a:	08 95       	ret

0000156c <TIM16_WriteTCNT3>:
    156c:	9c 01       	movw	r18, r24
    156e:	9f b7       	in	r25, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	30 93 89 00 	sts	0x0089, r19
    1576:	20 93 88 00 	sts	0x0088, r18
    157a:	78 94       	sei
    157c:	9f bf       	out	0x3f, r25	; 63
    157e:	08 95       	ret

00001580 <main>:

char buffer[10];
volatile int object_detected = 0;


int main(){
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	00 d0       	rcall	.+0      	; 0x1586 <main+0x6>
    1586:	00 d0       	rcall	.+0      	; 0x1588 <main+0x8>
    1588:	1f 92       	push	r1
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0xFF;
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	87 bb       	out	0x17, r24	; 23
    PORTB = 0;
    1592:	18 ba       	out	0x18, r1	; 24
    USART0_Init(MYUBRR);
    1594:	87 e6       	ldi	r24, 0x67	; 103
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 04 08 	call	0x1008	; 0x1008 <USART0_Init>
    USART0_send_string((unsigned char *)"USART0 (RS232) Initialized\r\n");
    159c:	8b ed       	ldi	r24, 0xDB	; 219
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    STABLE_Z = 50;
    15a4:	82 e3       	ldi	r24, 0x32	; 50
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	90 93 01 01 	sts	0x0101, r25
    15ac:	80 93 00 01 	sts	0x0100, r24
    enable_adc();
    15b0:	0e 94 31 06 	call	0xc62	; 0xc62 <enable_adc>
    calibrate_pressure_sensor();
    15b4:	0e 94 0d 0a 	call	0x141a	; 0x141a <calibrate_pressure_sensor>
    //init_HMC5883L(); //magnometer
    init_motors();
    15b8:	0e 94 a4 08 	call	0x1148	; 0x1148 <init_motors>
    data_timer_counter = 0;
    15bc:	10 92 ed 02 	sts	0x02ED, r1
    15c0:	10 92 ec 02 	sts	0x02EC, r1
    init_data_timer();
    15c4:	0e 94 cc 02 	call	0x598	; 0x598 <init_data_timer>
    enable_bumpers();
    15c8:	0e 94 b0 01 	call	0x360	; 0x360 <enable_bumpers>
    //init_leds();
    //set_rgb(RED);
    sei();
    15cc:	78 94       	sei
    

    unsigned char data[MAX_STRING_SIZE];
    int i;
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        data[i] = '\0';
    15ce:	19 82       	std	Y+1, r1	; 0x01
    15d0:	1a 82       	std	Y+2, r1	; 0x02
    15d2:	1b 82       	std	Y+3, r1	; 0x03
    15d4:	1d 82       	std	Y+5, r1	; 0x05
    }
    data[MAX_STRING_SIZE - 2] = '~';
    15d6:	8e e7       	ldi	r24, 0x7E	; 126
    15d8:	8c 83       	std	Y+4, r24	; 0x04

    move(50,50,50);
    15da:	e1 2c       	mov	r14, r1
    15dc:	f1 2c       	mov	r15, r1
    15de:	08 e4       	ldi	r16, 0x48	; 72
    15e0:	12 e4       	ldi	r17, 0x42	; 66
    15e2:	a8 01       	movw	r20, r16
    15e4:	97 01       	movw	r18, r14
    15e6:	c8 01       	movw	r24, r16
    15e8:	b7 01       	movw	r22, r14
    15ea:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
    15ee:	53 c0       	rjmp	.+166    	; 0x1696 <main+0x116>
        if (bumper_hit) {
            bumper_hit = 0;
            bumper_response();
            bumper_hit = 0;
        }
        USART0_Receive_String(data);
    15f0:	ce 01       	movw	r24, r28
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	0e 94 35 08 	call	0x106a	; 0x106a <USART0_Receive_String>
        USART0_send_string((unsigned char *)"Data received: ");
    15f8:	88 ef       	ldi	r24, 0xF8	; 248
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        USART0_send_string(data);
    1600:	ce 01       	movw	r24, r28
    1602:	01 96       	adiw	r24, 0x01	; 1
    1604:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        USART0_send_string((unsigned char *)"\r\n");
    1608:	8f eb       	ldi	r24, 0xBF	; 191
    160a:	92 e0       	ldi	r25, 0x02	; 2
    160c:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
        //depth_to_leds();
        if (strcmp((char *)data,"eee~") == 0){
    1610:	68 e0       	ldi	r22, 0x08	; 8
    1612:	72 e0       	ldi	r23, 0x02	; 2
    1614:	ce 01       	movw	r24, r28
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <strcmp>
    161c:	89 2b       	or	r24, r25
    161e:	09 f4       	brne	.+2      	; 0x1622 <main+0xa2>
    1620:	4c c0       	rjmp	.+152    	; 0x16ba <main+0x13a>
            UCSR0B &= ~(1<<RXEN0);
            path1();
            //enable RX0
            UCSR0B |= (1<<RXEN0);
        }
        else if (data[0] == 103 && data[1] == 103 && data[3] == 126){ //0x67 0x67 0xdd 0x7e or 103 103 ddd 126
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	87 36       	cpi	r24, 0x67	; 103
    1626:	09 f4       	brne	.+2      	; 0x162a <main+0xaa>
    1628:	99 c0       	rjmp	.+306    	; 0x175c <main+0x1dc>
            USART0_send_string((unsigned char *)"Stable Z Set\r\n");
            STABLE_Z = data[2]; 
        }
        else if (strcmp((char *)data,"hhh~") == 0){ //0x68 0x68 0x68 0x7e or 104 104 104 126
    162a:	60 e3       	ldi	r22, 0x30	; 48
    162c:	72 e0       	ldi	r23, 0x02	; 2
    162e:	ce 01       	movw	r24, r28
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <strcmp>
    1636:	89 2b       	or	r24, r25
    1638:	09 f4       	brne	.+2      	; 0x163c <main+0xbc>
    163a:	48 c0       	rjmp	.+144    	; 0x16cc <main+0x14c>
            USART0_send_string((unsigned char *)"Depth reached. Waiting for 10 seconds.\r\n");
            auto_delay(10000);
            move(50,50,STABLE_Z);
            USART0_send_string((unsigned char *)"Returning to surface\r\n");
        }
        else if (strcmp((char *)data,"fff~") == 0){ //0x66 0x66 0x66 0x7e or 102 102 102 126
    163c:	69 e8       	ldi	r22, 0x89	; 137
    163e:	72 e0       	ldi	r23, 0x02	; 2
    1640:	ce 01       	movw	r24, r28
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <strcmp>
    1648:	89 2b       	or	r24, r25
    164a:	09 f4       	brne	.+2      	; 0x164e <main+0xce>
    164c:	c3 c0       	rjmp	.+390    	; 0x17d4 <main+0x254>
            USART0_send_string((unsigned char *)"Calibrating\r\n");
            calibrate_pressure_sensor();
            USART0_send_string((unsigned char *)"Calibrate complete\r\n");
        }
        else if (strcmp((char *)data,"222~") == 0){
    164e:	61 eb       	ldi	r22, 0xB1	; 177
    1650:	72 e0       	ldi	r23, 0x02	; 2
    1652:	ce 01       	movw	r24, r28
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <strcmp>
    165a:	89 2b       	or	r24, r25
    165c:	09 f0       	breq	.+2      	; 0x1660 <main+0xe0>
    165e:	91 c0       	rjmp	.+290    	; 0x1782 <main+0x202>
            USART0_send_string((unsigned char *)"Stopping \r\n");
    1660:	86 eb       	ldi	r24, 0xB6	; 182
    1662:	92 e0       	ldi	r25, 0x02	; 2
    1664:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
            move(50,50,50);
    1668:	e1 2c       	mov	r14, r1
    166a:	f1 2c       	mov	r15, r1
    166c:	08 e4       	ldi	r16, 0x48	; 72
    166e:	12 e4       	ldi	r17, 0x42	; 66
    1670:	a8 01       	movw	r20, r16
    1672:	97 01       	movw	r18, r14
    1674:	c8 01       	movw	r24, r16
    1676:	b7 01       	movw	r22, r14
    1678:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
    167c:	8f e9       	ldi	r24, 0x9F	; 159
    167e:	9f e0       	ldi	r25, 0x0F	; 15
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <main+0x100>
    1684:	00 c0       	rjmp	.+0      	; 0x1686 <main+0x106>
    1686:	00 00       	nop
    set_rgb(red,green,blue);
}

void auto_delay(int ms){
    _delay_ms(1);
    if (bumper_hit){
    1688:	80 91 e0 02 	lds	r24, 0x02E0
    168c:	90 91 e1 02 	lds	r25, 0x02E1
    1690:	89 2b       	or	r24, r25
    1692:	09 f0       	breq	.+2      	; 0x1696 <main+0x116>
    1694:	aa c0       	rjmp	.+340    	; 0x17ea <main+0x26a>
    data[MAX_STRING_SIZE - 2] = '~';

    move(50,50,50);
    while (1){
        //PORTB &= ((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3));
        if (bumper_hit) {
    1696:	80 91 e0 02 	lds	r24, 0x02E0
    169a:	90 91 e1 02 	lds	r25, 0x02E1
    169e:	89 2b       	or	r24, r25
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <main+0x124>
    16a2:	a6 cf       	rjmp	.-180    	; 0x15f0 <main+0x70>
            bumper_hit = 0;
    16a4:	10 92 e1 02 	sts	0x02E1, r1
    16a8:	10 92 e0 02 	sts	0x02E0, r1
            bumper_response();
    16ac:	0e 94 be 01 	call	0x37c	; 0x37c <bumper_response>
            bumper_hit = 0;
    16b0:	10 92 e1 02 	sts	0x02E1, r1
    16b4:	10 92 e0 02 	sts	0x02E0, r1
    16b8:	9b cf       	rjmp	.-202    	; 0x15f0 <main+0x70>
        USART0_send_string((unsigned char *)"Data received: ");
        USART0_send_string(data);
        USART0_send_string((unsigned char *)"\r\n");
        //depth_to_leds();
        if (strcmp((char *)data,"eee~") == 0){
            USART0_send_string((unsigned char *)"Initiating path 1\r\n");
    16ba:	8d e0       	ldi	r24, 0x0D	; 13
    16bc:	92 e0       	ldi	r25, 0x02	; 2
    16be:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
            //disable RX0
            UCSR0B &= ~(1<<RXEN0);
    16c2:	54 98       	cbi	0x0a, 4	; 10
            path1();
    16c4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <path1>
            //enable RX0
            UCSR0B |= (1<<RXEN0);
    16c8:	54 9a       	sbi	0x0a, 4	; 10
    16ca:	d8 cf       	rjmp	.-80     	; 0x167c <main+0xfc>
        else if (data[0] == 103 && data[1] == 103 && data[3] == 126){ //0x67 0x67 0xdd 0x7e or 103 103 ddd 126
            USART0_send_string((unsigned char *)"Stable Z Set\r\n");
            STABLE_Z = data[2]; 
        }
        else if (strcmp((char *)data,"hhh~") == 0){ //0x68 0x68 0x68 0x7e or 104 104 104 126
            USART0_send_string((unsigned char *)"Diving to 10 feet\r\n");
    16cc:	85 e3       	ldi	r24, 0x35	; 53
    16ce:	92 e0       	ldi	r25, 0x02	; 2
    16d0:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
            dive(10);
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	80 e2       	ldi	r24, 0x20	; 32
    16da:	91 e4       	ldi	r25, 0x41	; 65
    16dc:	0e 94 64 02 	call	0x4c8	; 0x4c8 <dive>
            move(50,50,STABLE_Z);
    16e0:	60 91 00 01 	lds	r22, 0x0100
    16e4:	70 91 01 01 	lds	r23, 0x0101
    16e8:	07 2e       	mov	r0, r23
    16ea:	00 0c       	add	r0, r0
    16ec:	88 0b       	sbc	r24, r24
    16ee:	99 0b       	sbc	r25, r25
    16f0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
    16f4:	7b 01       	movw	r14, r22
    16f6:	8c 01       	movw	r16, r24
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	48 e4       	ldi	r20, 0x48	; 72
    16fe:	52 e4       	ldi	r21, 0x42	; 66
    1700:	ca 01       	movw	r24, r20
    1702:	b9 01       	movw	r22, r18
    1704:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
            USART0_send_string((unsigned char *)"Depth reached. Waiting for 10 seconds.\r\n");
    1708:	89 e4       	ldi	r24, 0x49	; 73
    170a:	92 e0       	ldi	r25, 0x02	; 2
    170c:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    1710:	8f e9       	ldi	r24, 0x9F	; 159
    1712:	9f e0       	ldi	r25, 0x0F	; 15
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <main+0x194>
    1718:	00 c0       	rjmp	.+0      	; 0x171a <main+0x19a>
    171a:	00 00       	nop
    set_rgb(red,green,blue);
}

void auto_delay(int ms){
    _delay_ms(1);
    if (bumper_hit){
    171c:	80 91 e0 02 	lds	r24, 0x02E0
    1720:	90 91 e1 02 	lds	r25, 0x02E1
    1724:	89 2b       	or	r24, r25
    1726:	09 f0       	breq	.+2      	; 0x172a <main+0x1aa>
    1728:	63 c0       	rjmp	.+198    	; 0x17f0 <main+0x270>
            USART0_send_string((unsigned char *)"Diving to 10 feet\r\n");
            dive(10);
            move(50,50,STABLE_Z);
            USART0_send_string((unsigned char *)"Depth reached. Waiting for 10 seconds.\r\n");
            auto_delay(10000);
            move(50,50,STABLE_Z);
    172a:	60 91 00 01 	lds	r22, 0x0100
    172e:	70 91 01 01 	lds	r23, 0x0101
    1732:	07 2e       	mov	r0, r23
    1734:	00 0c       	add	r0, r0
    1736:	88 0b       	sbc	r24, r24
    1738:	99 0b       	sbc	r25, r25
    173a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__floatsisf>
    173e:	7b 01       	movw	r14, r22
    1740:	8c 01       	movw	r16, r24
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	48 e4       	ldi	r20, 0x48	; 72
    1748:	52 e4       	ldi	r21, 0x42	; 66
    174a:	ca 01       	movw	r24, r20
    174c:	b9 01       	movw	r22, r18
    174e:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
            USART0_send_string((unsigned char *)"Returning to surface\r\n");
    1752:	82 e7       	ldi	r24, 0x72	; 114
    1754:	92 e0       	ldi	r25, 0x02	; 2
    1756:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    175a:	90 cf       	rjmp	.-224    	; 0x167c <main+0xfc>
            UCSR0B &= ~(1<<RXEN0);
            path1();
            //enable RX0
            UCSR0B |= (1<<RXEN0);
        }
        else if (data[0] == 103 && data[1] == 103 && data[3] == 126){ //0x67 0x67 0xdd 0x7e or 103 103 ddd 126
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	87 36       	cpi	r24, 0x67	; 103
    1760:	09 f0       	breq	.+2      	; 0x1764 <main+0x1e4>
    1762:	63 cf       	rjmp	.-314    	; 0x162a <main+0xaa>
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	8e 37       	cpi	r24, 0x7E	; 126
    1768:	09 f0       	breq	.+2      	; 0x176c <main+0x1ec>
    176a:	5f cf       	rjmp	.-322    	; 0x162a <main+0xaa>
            USART0_send_string((unsigned char *)"Stable Z Set\r\n");
    176c:	81 e2       	ldi	r24, 0x21	; 33
    176e:	92 e0       	ldi	r25, 0x02	; 2
    1770:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
            STABLE_Z = data[2]; 
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	90 93 01 01 	sts	0x0101, r25
    177c:	80 93 00 01 	sts	0x0100, r24
    1780:	7d cf       	rjmp	.-262    	; 0x167c <main+0xfc>
        else if (strcmp((char *)data,"222~") == 0){
            USART0_send_string((unsigned char *)"Stopping \r\n");
            move(50,50,50);
        }
        else{
            USART0_send_string((unsigned char *)"Moving: ");
    1782:	82 ec       	ldi	r24, 0xC2	; 194
    1784:	92 e0       	ldi	r25, 0x02	; 2
    1786:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
            USART0_send_string(data);
    178a:	ce 01       	movw	r24, r28
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
            USART0_send_string((unsigned char*)"\r\n");
    1792:	8f eb       	ldi	r24, 0xBF	; 191
    1794:	92 e0       	ldi	r25, 0x02	; 2
    1796:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
            move((float)data[0],(float)data[1],(float)data[2]);
    179a:	6b 81       	ldd	r22, Y+3	; 0x03
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__floatunsisf>
    17a6:	6b 01       	movw	r12, r22
    17a8:	7c 01       	movw	r14, r24
    17aa:	6a 81       	ldd	r22, Y+2	; 0x02
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__floatunsisf>
    17b6:	4b 01       	movw	r8, r22
    17b8:	5c 01       	movw	r10, r24
    17ba:	69 81       	ldd	r22, Y+1	; 0x01
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__floatunsisf>
    17c6:	87 01       	movw	r16, r14
    17c8:	76 01       	movw	r14, r12
    17ca:	a5 01       	movw	r20, r10
    17cc:	94 01       	movw	r18, r8
    17ce:	0e 94 ae 08 	call	0x115c	; 0x115c <move>
    17d2:	54 cf       	rjmp	.-344    	; 0x167c <main+0xfc>
            auto_delay(10000);
            move(50,50,STABLE_Z);
            USART0_send_string((unsigned char *)"Returning to surface\r\n");
        }
        else if (strcmp((char *)data,"fff~") == 0){ //0x66 0x66 0x66 0x7e or 102 102 102 126
            USART0_send_string((unsigned char *)"Calibrating\r\n");
    17d4:	8e e8       	ldi	r24, 0x8E	; 142
    17d6:	92 e0       	ldi	r25, 0x02	; 2
    17d8:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
            calibrate_pressure_sensor();
    17dc:	0e 94 0d 0a 	call	0x141a	; 0x141a <calibrate_pressure_sensor>
            USART0_send_string((unsigned char *)"Calibrate complete\r\n");
    17e0:	8c e9       	ldi	r24, 0x9C	; 156
    17e2:	92 e0       	ldi	r25, 0x02	; 2
    17e4:	0e 94 1a 08 	call	0x1034	; 0x1034 <USART0_send_string>
    17e8:	49 cf       	rjmp	.-366    	; 0x167c <main+0xfc>
}

void auto_delay(int ms){
    _delay_ms(1);
    if (bumper_hit){
        bumper_response();
    17ea:	0e 94 be 01 	call	0x37c	; 0x37c <bumper_response>
    17ee:	53 cf       	rjmp	.-346    	; 0x1696 <main+0x116>
    17f0:	0e 94 be 01 	call	0x37c	; 0x37c <bumper_response>
    17f4:	9a cf       	rjmp	.-204    	; 0x172a <main+0x1aa>

000017f6 <__subsf3>:
    17f6:	50 58       	subi	r21, 0x80	; 128

000017f8 <__addsf3>:
    17f8:	bb 27       	eor	r27, r27
    17fa:	aa 27       	eor	r26, r26
    17fc:	0e 94 13 0c 	call	0x1826	; 0x1826 <__addsf3x>
    1800:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_round>
    1804:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_pscA>
    1808:	38 f0       	brcs	.+14     	; 0x1818 <__addsf3+0x20>
    180a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fp_pscB>
    180e:	20 f0       	brcs	.+8      	; 0x1818 <__addsf3+0x20>
    1810:	39 f4       	brne	.+14     	; 0x1820 <__addsf3+0x28>
    1812:	9f 3f       	cpi	r25, 0xFF	; 255
    1814:	19 f4       	brne	.+6      	; 0x181c <__addsf3+0x24>
    1816:	26 f4       	brtc	.+8      	; 0x1820 <__addsf3+0x28>
    1818:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__fp_nan>
    181c:	0e f4       	brtc	.+2      	; 0x1820 <__addsf3+0x28>
    181e:	e0 95       	com	r30
    1820:	e7 fb       	bst	r30, 7
    1822:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__fp_inf>

00001826 <__addsf3x>:
    1826:	e9 2f       	mov	r30, r25
    1828:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fp_split3>
    182c:	58 f3       	brcs	.-42     	; 0x1804 <__addsf3+0xc>
    182e:	ba 17       	cp	r27, r26
    1830:	62 07       	cpc	r22, r18
    1832:	73 07       	cpc	r23, r19
    1834:	84 07       	cpc	r24, r20
    1836:	95 07       	cpc	r25, r21
    1838:	20 f0       	brcs	.+8      	; 0x1842 <__addsf3x+0x1c>
    183a:	79 f4       	brne	.+30     	; 0x185a <__addsf3x+0x34>
    183c:	a6 f5       	brtc	.+104    	; 0x18a6 <__addsf3x+0x80>
    183e:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_zero>
    1842:	0e f4       	brtc	.+2      	; 0x1846 <__addsf3x+0x20>
    1844:	e0 95       	com	r30
    1846:	0b 2e       	mov	r0, r27
    1848:	ba 2f       	mov	r27, r26
    184a:	a0 2d       	mov	r26, r0
    184c:	0b 01       	movw	r0, r22
    184e:	b9 01       	movw	r22, r18
    1850:	90 01       	movw	r18, r0
    1852:	0c 01       	movw	r0, r24
    1854:	ca 01       	movw	r24, r20
    1856:	a0 01       	movw	r20, r0
    1858:	11 24       	eor	r1, r1
    185a:	ff 27       	eor	r31, r31
    185c:	59 1b       	sub	r21, r25
    185e:	99 f0       	breq	.+38     	; 0x1886 <__addsf3x+0x60>
    1860:	59 3f       	cpi	r21, 0xF9	; 249
    1862:	50 f4       	brcc	.+20     	; 0x1878 <__addsf3x+0x52>
    1864:	50 3e       	cpi	r21, 0xE0	; 224
    1866:	68 f1       	brcs	.+90     	; 0x18c2 <__addsf3x+0x9c>
    1868:	1a 16       	cp	r1, r26
    186a:	f0 40       	sbci	r31, 0x00	; 0
    186c:	a2 2f       	mov	r26, r18
    186e:	23 2f       	mov	r18, r19
    1870:	34 2f       	mov	r19, r20
    1872:	44 27       	eor	r20, r20
    1874:	58 5f       	subi	r21, 0xF8	; 248
    1876:	f3 cf       	rjmp	.-26     	; 0x185e <__addsf3x+0x38>
    1878:	46 95       	lsr	r20
    187a:	37 95       	ror	r19
    187c:	27 95       	ror	r18
    187e:	a7 95       	ror	r26
    1880:	f0 40       	sbci	r31, 0x00	; 0
    1882:	53 95       	inc	r21
    1884:	c9 f7       	brne	.-14     	; 0x1878 <__addsf3x+0x52>
    1886:	7e f4       	brtc	.+30     	; 0x18a6 <__addsf3x+0x80>
    1888:	1f 16       	cp	r1, r31
    188a:	ba 0b       	sbc	r27, r26
    188c:	62 0b       	sbc	r22, r18
    188e:	73 0b       	sbc	r23, r19
    1890:	84 0b       	sbc	r24, r20
    1892:	ba f0       	brmi	.+46     	; 0x18c2 <__addsf3x+0x9c>
    1894:	91 50       	subi	r25, 0x01	; 1
    1896:	a1 f0       	breq	.+40     	; 0x18c0 <__addsf3x+0x9a>
    1898:	ff 0f       	add	r31, r31
    189a:	bb 1f       	adc	r27, r27
    189c:	66 1f       	adc	r22, r22
    189e:	77 1f       	adc	r23, r23
    18a0:	88 1f       	adc	r24, r24
    18a2:	c2 f7       	brpl	.-16     	; 0x1894 <__addsf3x+0x6e>
    18a4:	0e c0       	rjmp	.+28     	; 0x18c2 <__addsf3x+0x9c>
    18a6:	ba 0f       	add	r27, r26
    18a8:	62 1f       	adc	r22, r18
    18aa:	73 1f       	adc	r23, r19
    18ac:	84 1f       	adc	r24, r20
    18ae:	48 f4       	brcc	.+18     	; 0x18c2 <__addsf3x+0x9c>
    18b0:	87 95       	ror	r24
    18b2:	77 95       	ror	r23
    18b4:	67 95       	ror	r22
    18b6:	b7 95       	ror	r27
    18b8:	f7 95       	ror	r31
    18ba:	9e 3f       	cpi	r25, 0xFE	; 254
    18bc:	08 f0       	brcs	.+2      	; 0x18c0 <__addsf3x+0x9a>
    18be:	b0 cf       	rjmp	.-160    	; 0x1820 <__addsf3+0x28>
    18c0:	93 95       	inc	r25
    18c2:	88 0f       	add	r24, r24
    18c4:	08 f0       	brcs	.+2      	; 0x18c8 <__addsf3x+0xa2>
    18c6:	99 27       	eor	r25, r25
    18c8:	ee 0f       	add	r30, r30
    18ca:	97 95       	ror	r25
    18cc:	87 95       	ror	r24
    18ce:	08 95       	ret
    18d0:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_pscA>
    18d4:	60 f0       	brcs	.+24     	; 0x18ee <__addsf3x+0xc8>
    18d6:	80 e8       	ldi	r24, 0x80	; 128
    18d8:	91 e0       	ldi	r25, 0x01	; 1
    18da:	09 f4       	brne	.+2      	; 0x18de <__addsf3x+0xb8>
    18dc:	9e ef       	ldi	r25, 0xFE	; 254
    18de:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fp_pscB>
    18e2:	28 f0       	brcs	.+10     	; 0x18ee <__addsf3x+0xc8>
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	51 e0       	ldi	r21, 0x01	; 1
    18e8:	71 f4       	brne	.+28     	; 0x1906 <atan2+0x10>
    18ea:	5e ef       	ldi	r21, 0xFE	; 254
    18ec:	0c c0       	rjmp	.+24     	; 0x1906 <atan2+0x10>
    18ee:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__fp_nan>
    18f2:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_zero>

000018f6 <atan2>:
    18f6:	e9 2f       	mov	r30, r25
    18f8:	e0 78       	andi	r30, 0x80	; 128
    18fa:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fp_split3>
    18fe:	40 f3       	brcs	.-48     	; 0x18d0 <__addsf3x+0xaa>
    1900:	09 2e       	mov	r0, r25
    1902:	05 2a       	or	r0, r21
    1904:	b1 f3       	breq	.-20     	; 0x18f2 <__addsf3x+0xcc>
    1906:	26 17       	cp	r18, r22
    1908:	37 07       	cpc	r19, r23
    190a:	48 07       	cpc	r20, r24
    190c:	59 07       	cpc	r21, r25
    190e:	38 f0       	brcs	.+14     	; 0x191e <atan2+0x28>
    1910:	0e 2e       	mov	r0, r30
    1912:	07 f8       	bld	r0, 7
    1914:	e0 25       	eor	r30, r0
    1916:	69 f0       	breq	.+26     	; 0x1932 <atan2+0x3c>
    1918:	e0 25       	eor	r30, r0
    191a:	e0 64       	ori	r30, 0x40	; 64
    191c:	0a c0       	rjmp	.+20     	; 0x1932 <atan2+0x3c>
    191e:	ef 63       	ori	r30, 0x3F	; 63
    1920:	07 f8       	bld	r0, 7
    1922:	00 94       	com	r0
    1924:	07 fa       	bst	r0, 7
    1926:	db 01       	movw	r26, r22
    1928:	b9 01       	movw	r22, r18
    192a:	9d 01       	movw	r18, r26
    192c:	dc 01       	movw	r26, r24
    192e:	ca 01       	movw	r24, r20
    1930:	ad 01       	movw	r20, r26
    1932:	ef 93       	push	r30
    1934:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__divsf3_pse>
    1938:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__fp_round>
    193c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <atan>
    1940:	5f 91       	pop	r21
    1942:	55 23       	and	r21, r21
    1944:	39 f0       	breq	.+14     	; 0x1954 <atan2+0x5e>
    1946:	2b ed       	ldi	r18, 0xDB	; 219
    1948:	3f e0       	ldi	r19, 0x0F	; 15
    194a:	49 e4       	ldi	r20, 0x49	; 73
    194c:	50 fd       	sbrc	r21, 0
    194e:	49 ec       	ldi	r20, 0xC9	; 201
    1950:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__addsf3>
    1954:	08 95       	ret

00001956 <atan>:
    1956:	df 93       	push	r29
    1958:	dd 27       	eor	r29, r29
    195a:	b9 2f       	mov	r27, r25
    195c:	bf 77       	andi	r27, 0x7F	; 127
    195e:	40 e8       	ldi	r20, 0x80	; 128
    1960:	5f e3       	ldi	r21, 0x3F	; 63
    1962:	16 16       	cp	r1, r22
    1964:	17 06       	cpc	r1, r23
    1966:	48 07       	cpc	r20, r24
    1968:	5b 07       	cpc	r21, r27
    196a:	18 f4       	brcc	.+6      	; 0x1972 <atan+0x1c>
    196c:	d9 2f       	mov	r29, r25
    196e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <inverse>
    1972:	9f 93       	push	r25
    1974:	8f 93       	push	r24
    1976:	7f 93       	push	r23
    1978:	6f 93       	push	r22
    197a:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <square>
    197e:	ec e8       	ldi	r30, 0x8C	; 140
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fp_powser>
    1986:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__fp_round>
    198a:	2f 91       	pop	r18
    198c:	3f 91       	pop	r19
    198e:	4f 91       	pop	r20
    1990:	5f 91       	pop	r21
    1992:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3x>
    1996:	dd 23       	and	r29, r29
    1998:	51 f0       	breq	.+20     	; 0x19ae <atan+0x58>
    199a:	90 58       	subi	r25, 0x80	; 128
    199c:	a2 ea       	ldi	r26, 0xA2	; 162
    199e:	2a ed       	ldi	r18, 0xDA	; 218
    19a0:	3f e0       	ldi	r19, 0x0F	; 15
    19a2:	49 ec       	ldi	r20, 0xC9	; 201
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	d0 78       	andi	r29, 0x80	; 128
    19a8:	5d 27       	eor	r21, r29
    19aa:	0e 94 13 0c 	call	0x1826	; 0x1826 <__addsf3x>
    19ae:	df 91       	pop	r29
    19b0:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_round>

000019b4 <__cmpsf2>:
    19b4:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__fp_cmp>
    19b8:	08 f4       	brcc	.+2      	; 0x19bc <__cmpsf2+0x8>
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	08 95       	ret

000019be <__divsf3>:
    19be:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__divsf3x>
    19c2:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_round>
    19c6:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fp_pscB>
    19ca:	58 f0       	brcs	.+22     	; 0x19e2 <__divsf3+0x24>
    19cc:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_pscA>
    19d0:	40 f0       	brcs	.+16     	; 0x19e2 <__divsf3+0x24>
    19d2:	29 f4       	brne	.+10     	; 0x19de <__divsf3+0x20>
    19d4:	5f 3f       	cpi	r21, 0xFF	; 255
    19d6:	29 f0       	breq	.+10     	; 0x19e2 <__divsf3+0x24>
    19d8:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__fp_inf>
    19dc:	51 11       	cpse	r21, r1
    19de:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__fp_szero>
    19e2:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__fp_nan>

000019e6 <__divsf3x>:
    19e6:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fp_split3>
    19ea:	68 f3       	brcs	.-38     	; 0x19c6 <__divsf3+0x8>

000019ec <__divsf3_pse>:
    19ec:	99 23       	and	r25, r25
    19ee:	b1 f3       	breq	.-20     	; 0x19dc <__divsf3+0x1e>
    19f0:	55 23       	and	r21, r21
    19f2:	91 f3       	breq	.-28     	; 0x19d8 <__divsf3+0x1a>
    19f4:	95 1b       	sub	r25, r21
    19f6:	55 0b       	sbc	r21, r21
    19f8:	bb 27       	eor	r27, r27
    19fa:	aa 27       	eor	r26, r26
    19fc:	62 17       	cp	r22, r18
    19fe:	73 07       	cpc	r23, r19
    1a00:	84 07       	cpc	r24, r20
    1a02:	38 f0       	brcs	.+14     	; 0x1a12 <__divsf3_pse+0x26>
    1a04:	9f 5f       	subi	r25, 0xFF	; 255
    1a06:	5f 4f       	sbci	r21, 0xFF	; 255
    1a08:	22 0f       	add	r18, r18
    1a0a:	33 1f       	adc	r19, r19
    1a0c:	44 1f       	adc	r20, r20
    1a0e:	aa 1f       	adc	r26, r26
    1a10:	a9 f3       	breq	.-22     	; 0x19fc <__divsf3_pse+0x10>
    1a12:	35 d0       	rcall	.+106    	; 0x1a7e <__divsf3_pse+0x92>
    1a14:	0e 2e       	mov	r0, r30
    1a16:	3a f0       	brmi	.+14     	; 0x1a26 <__divsf3_pse+0x3a>
    1a18:	e0 e8       	ldi	r30, 0x80	; 128
    1a1a:	32 d0       	rcall	.+100    	; 0x1a80 <__divsf3_pse+0x94>
    1a1c:	91 50       	subi	r25, 0x01	; 1
    1a1e:	50 40       	sbci	r21, 0x00	; 0
    1a20:	e6 95       	lsr	r30
    1a22:	00 1c       	adc	r0, r0
    1a24:	ca f7       	brpl	.-14     	; 0x1a18 <__divsf3_pse+0x2c>
    1a26:	2b d0       	rcall	.+86     	; 0x1a7e <__divsf3_pse+0x92>
    1a28:	fe 2f       	mov	r31, r30
    1a2a:	29 d0       	rcall	.+82     	; 0x1a7e <__divsf3_pse+0x92>
    1a2c:	66 0f       	add	r22, r22
    1a2e:	77 1f       	adc	r23, r23
    1a30:	88 1f       	adc	r24, r24
    1a32:	bb 1f       	adc	r27, r27
    1a34:	26 17       	cp	r18, r22
    1a36:	37 07       	cpc	r19, r23
    1a38:	48 07       	cpc	r20, r24
    1a3a:	ab 07       	cpc	r26, r27
    1a3c:	b0 e8       	ldi	r27, 0x80	; 128
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <__divsf3_pse+0x56>
    1a40:	bb 0b       	sbc	r27, r27
    1a42:	80 2d       	mov	r24, r0
    1a44:	bf 01       	movw	r22, r30
    1a46:	ff 27       	eor	r31, r31
    1a48:	93 58       	subi	r25, 0x83	; 131
    1a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4c:	3a f0       	brmi	.+14     	; 0x1a5c <__divsf3_pse+0x70>
    1a4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a50:	51 05       	cpc	r21, r1
    1a52:	78 f0       	brcs	.+30     	; 0x1a72 <__divsf3_pse+0x86>
    1a54:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__fp_inf>
    1a58:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__fp_szero>
    1a5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a5e:	e4 f3       	brlt	.-8      	; 0x1a58 <__divsf3_pse+0x6c>
    1a60:	98 3e       	cpi	r25, 0xE8	; 232
    1a62:	d4 f3       	brlt	.-12     	; 0x1a58 <__divsf3_pse+0x6c>
    1a64:	86 95       	lsr	r24
    1a66:	77 95       	ror	r23
    1a68:	67 95       	ror	r22
    1a6a:	b7 95       	ror	r27
    1a6c:	f7 95       	ror	r31
    1a6e:	9f 5f       	subi	r25, 0xFF	; 255
    1a70:	c9 f7       	brne	.-14     	; 0x1a64 <__divsf3_pse+0x78>
    1a72:	88 0f       	add	r24, r24
    1a74:	91 1d       	adc	r25, r1
    1a76:	96 95       	lsr	r25
    1a78:	87 95       	ror	r24
    1a7a:	97 f9       	bld	r25, 7
    1a7c:	08 95       	ret
    1a7e:	e1 e0       	ldi	r30, 0x01	; 1
    1a80:	66 0f       	add	r22, r22
    1a82:	77 1f       	adc	r23, r23
    1a84:	88 1f       	adc	r24, r24
    1a86:	bb 1f       	adc	r27, r27
    1a88:	62 17       	cp	r22, r18
    1a8a:	73 07       	cpc	r23, r19
    1a8c:	84 07       	cpc	r24, r20
    1a8e:	ba 07       	cpc	r27, r26
    1a90:	20 f0       	brcs	.+8      	; 0x1a9a <__divsf3_pse+0xae>
    1a92:	62 1b       	sub	r22, r18
    1a94:	73 0b       	sbc	r23, r19
    1a96:	84 0b       	sbc	r24, r20
    1a98:	ba 0b       	sbc	r27, r26
    1a9a:	ee 1f       	adc	r30, r30
    1a9c:	88 f7       	brcc	.-30     	; 0x1a80 <__divsf3_pse+0x94>
    1a9e:	e0 95       	com	r30
    1aa0:	08 95       	ret

00001aa2 <__fixsfsi>:
    1aa2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fixunssfsi>
    1aa6:	68 94       	set
    1aa8:	b1 11       	cpse	r27, r1
    1aaa:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__fp_szero>
    1aae:	08 95       	ret

00001ab0 <__fixunssfsi>:
    1ab0:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__fp_splitA>
    1ab4:	88 f0       	brcs	.+34     	; 0x1ad8 <__fixunssfsi+0x28>
    1ab6:	9f 57       	subi	r25, 0x7F	; 127
    1ab8:	98 f0       	brcs	.+38     	; 0x1ae0 <__fixunssfsi+0x30>
    1aba:	b9 2f       	mov	r27, r25
    1abc:	99 27       	eor	r25, r25
    1abe:	b7 51       	subi	r27, 0x17	; 23
    1ac0:	b0 f0       	brcs	.+44     	; 0x1aee <__fixunssfsi+0x3e>
    1ac2:	e1 f0       	breq	.+56     	; 0x1afc <__fixunssfsi+0x4c>
    1ac4:	66 0f       	add	r22, r22
    1ac6:	77 1f       	adc	r23, r23
    1ac8:	88 1f       	adc	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	1a f0       	brmi	.+6      	; 0x1ad4 <__fixunssfsi+0x24>
    1ace:	ba 95       	dec	r27
    1ad0:	c9 f7       	brne	.-14     	; 0x1ac4 <__fixunssfsi+0x14>
    1ad2:	14 c0       	rjmp	.+40     	; 0x1afc <__fixunssfsi+0x4c>
    1ad4:	b1 30       	cpi	r27, 0x01	; 1
    1ad6:	91 f0       	breq	.+36     	; 0x1afc <__fixunssfsi+0x4c>
    1ad8:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__fp_zero>
    1adc:	b1 e0       	ldi	r27, 0x01	; 1
    1ade:	08 95       	ret
    1ae0:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_zero>
    1ae4:	67 2f       	mov	r22, r23
    1ae6:	78 2f       	mov	r23, r24
    1ae8:	88 27       	eor	r24, r24
    1aea:	b8 5f       	subi	r27, 0xF8	; 248
    1aec:	39 f0       	breq	.+14     	; 0x1afc <__fixunssfsi+0x4c>
    1aee:	b9 3f       	cpi	r27, 0xF9	; 249
    1af0:	cc f3       	brlt	.-14     	; 0x1ae4 <__fixunssfsi+0x34>
    1af2:	86 95       	lsr	r24
    1af4:	77 95       	ror	r23
    1af6:	67 95       	ror	r22
    1af8:	b3 95       	inc	r27
    1afa:	d9 f7       	brne	.-10     	; 0x1af2 <__fixunssfsi+0x42>
    1afc:	3e f4       	brtc	.+14     	; 0x1b0c <__fixunssfsi+0x5c>
    1afe:	90 95       	com	r25
    1b00:	80 95       	com	r24
    1b02:	70 95       	com	r23
    1b04:	61 95       	neg	r22
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	8f 4f       	sbci	r24, 0xFF	; 255
    1b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0c:	08 95       	ret

00001b0e <__floatunsisf>:
    1b0e:	e8 94       	clt
    1b10:	09 c0       	rjmp	.+18     	; 0x1b24 <__floatsisf+0x12>

00001b12 <__floatsisf>:
    1b12:	97 fb       	bst	r25, 7
    1b14:	3e f4       	brtc	.+14     	; 0x1b24 <__floatsisf+0x12>
    1b16:	90 95       	com	r25
    1b18:	80 95       	com	r24
    1b1a:	70 95       	com	r23
    1b1c:	61 95       	neg	r22
    1b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b20:	8f 4f       	sbci	r24, 0xFF	; 255
    1b22:	9f 4f       	sbci	r25, 0xFF	; 255
    1b24:	99 23       	and	r25, r25
    1b26:	a9 f0       	breq	.+42     	; 0x1b52 <__floatsisf+0x40>
    1b28:	f9 2f       	mov	r31, r25
    1b2a:	96 e9       	ldi	r25, 0x96	; 150
    1b2c:	bb 27       	eor	r27, r27
    1b2e:	93 95       	inc	r25
    1b30:	f6 95       	lsr	r31
    1b32:	87 95       	ror	r24
    1b34:	77 95       	ror	r23
    1b36:	67 95       	ror	r22
    1b38:	b7 95       	ror	r27
    1b3a:	f1 11       	cpse	r31, r1
    1b3c:	f8 cf       	rjmp	.-16     	; 0x1b2e <__floatsisf+0x1c>
    1b3e:	fa f4       	brpl	.+62     	; 0x1b7e <__floatsisf+0x6c>
    1b40:	bb 0f       	add	r27, r27
    1b42:	11 f4       	brne	.+4      	; 0x1b48 <__floatsisf+0x36>
    1b44:	60 ff       	sbrs	r22, 0
    1b46:	1b c0       	rjmp	.+54     	; 0x1b7e <__floatsisf+0x6c>
    1b48:	6f 5f       	subi	r22, 0xFF	; 255
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b50:	16 c0       	rjmp	.+44     	; 0x1b7e <__floatsisf+0x6c>
    1b52:	88 23       	and	r24, r24
    1b54:	11 f0       	breq	.+4      	; 0x1b5a <__floatsisf+0x48>
    1b56:	96 e9       	ldi	r25, 0x96	; 150
    1b58:	11 c0       	rjmp	.+34     	; 0x1b7c <__floatsisf+0x6a>
    1b5a:	77 23       	and	r23, r23
    1b5c:	21 f0       	breq	.+8      	; 0x1b66 <__floatsisf+0x54>
    1b5e:	9e e8       	ldi	r25, 0x8E	; 142
    1b60:	87 2f       	mov	r24, r23
    1b62:	76 2f       	mov	r23, r22
    1b64:	05 c0       	rjmp	.+10     	; 0x1b70 <__floatsisf+0x5e>
    1b66:	66 23       	and	r22, r22
    1b68:	71 f0       	breq	.+28     	; 0x1b86 <__floatsisf+0x74>
    1b6a:	96 e8       	ldi	r25, 0x86	; 134
    1b6c:	86 2f       	mov	r24, r22
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	2a f0       	brmi	.+10     	; 0x1b7e <__floatsisf+0x6c>
    1b74:	9a 95       	dec	r25
    1b76:	66 0f       	add	r22, r22
    1b78:	77 1f       	adc	r23, r23
    1b7a:	88 1f       	adc	r24, r24
    1b7c:	da f7       	brpl	.-10     	; 0x1b74 <__floatsisf+0x62>
    1b7e:	88 0f       	add	r24, r24
    1b80:	96 95       	lsr	r25
    1b82:	87 95       	ror	r24
    1b84:	97 f9       	bld	r25, 7
    1b86:	08 95       	ret

00001b88 <__fp_cmp>:
    1b88:	99 0f       	add	r25, r25
    1b8a:	00 08       	sbc	r0, r0
    1b8c:	55 0f       	add	r21, r21
    1b8e:	aa 0b       	sbc	r26, r26
    1b90:	e0 e8       	ldi	r30, 0x80	; 128
    1b92:	fe ef       	ldi	r31, 0xFE	; 254
    1b94:	16 16       	cp	r1, r22
    1b96:	17 06       	cpc	r1, r23
    1b98:	e8 07       	cpc	r30, r24
    1b9a:	f9 07       	cpc	r31, r25
    1b9c:	c0 f0       	brcs	.+48     	; 0x1bce <__fp_cmp+0x46>
    1b9e:	12 16       	cp	r1, r18
    1ba0:	13 06       	cpc	r1, r19
    1ba2:	e4 07       	cpc	r30, r20
    1ba4:	f5 07       	cpc	r31, r21
    1ba6:	98 f0       	brcs	.+38     	; 0x1bce <__fp_cmp+0x46>
    1ba8:	62 1b       	sub	r22, r18
    1baa:	73 0b       	sbc	r23, r19
    1bac:	84 0b       	sbc	r24, r20
    1bae:	95 0b       	sbc	r25, r21
    1bb0:	39 f4       	brne	.+14     	; 0x1bc0 <__fp_cmp+0x38>
    1bb2:	0a 26       	eor	r0, r26
    1bb4:	61 f0       	breq	.+24     	; 0x1bce <__fp_cmp+0x46>
    1bb6:	23 2b       	or	r18, r19
    1bb8:	24 2b       	or	r18, r20
    1bba:	25 2b       	or	r18, r21
    1bbc:	21 f4       	brne	.+8      	; 0x1bc6 <__fp_cmp+0x3e>
    1bbe:	08 95       	ret
    1bc0:	0a 26       	eor	r0, r26
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <__fp_cmp+0x3e>
    1bc4:	a1 40       	sbci	r26, 0x01	; 1
    1bc6:	a6 95       	lsr	r26
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	81 1d       	adc	r24, r1
    1bcc:	81 1d       	adc	r24, r1
    1bce:	08 95       	ret

00001bd0 <__fp_inf>:
    1bd0:	97 f9       	bld	r25, 7
    1bd2:	9f 67       	ori	r25, 0x7F	; 127
    1bd4:	80 e8       	ldi	r24, 0x80	; 128
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	08 95       	ret

00001bdc <__fp_nan>:
    1bdc:	9f ef       	ldi	r25, 0xFF	; 255
    1bde:	80 ec       	ldi	r24, 0xC0	; 192
    1be0:	08 95       	ret

00001be2 <__fp_powser>:
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	1f 93       	push	r17
    1be8:	0f 93       	push	r16
    1bea:	ff 92       	push	r15
    1bec:	ef 92       	push	r14
    1bee:	df 92       	push	r13
    1bf0:	7b 01       	movw	r14, r22
    1bf2:	8c 01       	movw	r16, r24
    1bf4:	68 94       	set
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <__fp_powser+0x22>
    1bf8:	da 2e       	mov	r13, r26
    1bfa:	ef 01       	movw	r28, r30
    1bfc:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3x>
    1c00:	fe 01       	movw	r30, r28
    1c02:	e8 94       	clt
    1c04:	a5 91       	lpm	r26, Z+
    1c06:	25 91       	lpm	r18, Z+
    1c08:	35 91       	lpm	r19, Z+
    1c0a:	45 91       	lpm	r20, Z+
    1c0c:	55 91       	lpm	r21, Z+
    1c0e:	a6 f3       	brts	.-24     	; 0x1bf8 <__fp_powser+0x16>
    1c10:	ef 01       	movw	r28, r30
    1c12:	0e 94 13 0c 	call	0x1826	; 0x1826 <__addsf3x>
    1c16:	fe 01       	movw	r30, r28
    1c18:	97 01       	movw	r18, r14
    1c1a:	a8 01       	movw	r20, r16
    1c1c:	da 94       	dec	r13
    1c1e:	69 f7       	brne	.-38     	; 0x1bfa <__fp_powser+0x18>
    1c20:	df 90       	pop	r13
    1c22:	ef 90       	pop	r14
    1c24:	ff 90       	pop	r15
    1c26:	0f 91       	pop	r16
    1c28:	1f 91       	pop	r17
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <__fp_pscA>:
    1c30:	00 24       	eor	r0, r0
    1c32:	0a 94       	dec	r0
    1c34:	16 16       	cp	r1, r22
    1c36:	17 06       	cpc	r1, r23
    1c38:	18 06       	cpc	r1, r24
    1c3a:	09 06       	cpc	r0, r25
    1c3c:	08 95       	ret

00001c3e <__fp_pscB>:
    1c3e:	00 24       	eor	r0, r0
    1c40:	0a 94       	dec	r0
    1c42:	12 16       	cp	r1, r18
    1c44:	13 06       	cpc	r1, r19
    1c46:	14 06       	cpc	r1, r20
    1c48:	05 06       	cpc	r0, r21
    1c4a:	08 95       	ret

00001c4c <__fp_round>:
    1c4c:	09 2e       	mov	r0, r25
    1c4e:	03 94       	inc	r0
    1c50:	00 0c       	add	r0, r0
    1c52:	11 f4       	brne	.+4      	; 0x1c58 <__fp_round+0xc>
    1c54:	88 23       	and	r24, r24
    1c56:	52 f0       	brmi	.+20     	; 0x1c6c <__fp_round+0x20>
    1c58:	bb 0f       	add	r27, r27
    1c5a:	40 f4       	brcc	.+16     	; 0x1c6c <__fp_round+0x20>
    1c5c:	bf 2b       	or	r27, r31
    1c5e:	11 f4       	brne	.+4      	; 0x1c64 <__fp_round+0x18>
    1c60:	60 ff       	sbrs	r22, 0
    1c62:	04 c0       	rjmp	.+8      	; 0x1c6c <__fp_round+0x20>
    1c64:	6f 5f       	subi	r22, 0xFF	; 255
    1c66:	7f 4f       	sbci	r23, 0xFF	; 255
    1c68:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6c:	08 95       	ret

00001c6e <__fp_split3>:
    1c6e:	57 fd       	sbrc	r21, 7
    1c70:	90 58       	subi	r25, 0x80	; 128
    1c72:	44 0f       	add	r20, r20
    1c74:	55 1f       	adc	r21, r21
    1c76:	59 f0       	breq	.+22     	; 0x1c8e <__fp_splitA+0x10>
    1c78:	5f 3f       	cpi	r21, 0xFF	; 255
    1c7a:	71 f0       	breq	.+28     	; 0x1c98 <__fp_splitA+0x1a>
    1c7c:	47 95       	ror	r20

00001c7e <__fp_splitA>:
    1c7e:	88 0f       	add	r24, r24
    1c80:	97 fb       	bst	r25, 7
    1c82:	99 1f       	adc	r25, r25
    1c84:	61 f0       	breq	.+24     	; 0x1c9e <__fp_splitA+0x20>
    1c86:	9f 3f       	cpi	r25, 0xFF	; 255
    1c88:	79 f0       	breq	.+30     	; 0x1ca8 <__fp_splitA+0x2a>
    1c8a:	87 95       	ror	r24
    1c8c:	08 95       	ret
    1c8e:	12 16       	cp	r1, r18
    1c90:	13 06       	cpc	r1, r19
    1c92:	14 06       	cpc	r1, r20
    1c94:	55 1f       	adc	r21, r21
    1c96:	f2 cf       	rjmp	.-28     	; 0x1c7c <__fp_split3+0xe>
    1c98:	46 95       	lsr	r20
    1c9a:	f1 df       	rcall	.-30     	; 0x1c7e <__fp_splitA>
    1c9c:	08 c0       	rjmp	.+16     	; 0x1cae <__fp_splitA+0x30>
    1c9e:	16 16       	cp	r1, r22
    1ca0:	17 06       	cpc	r1, r23
    1ca2:	18 06       	cpc	r1, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	f1 cf       	rjmp	.-30     	; 0x1c8a <__fp_splitA+0xc>
    1ca8:	86 95       	lsr	r24
    1caa:	71 05       	cpc	r23, r1
    1cac:	61 05       	cpc	r22, r1
    1cae:	08 94       	sec
    1cb0:	08 95       	ret

00001cb2 <__fp_zero>:
    1cb2:	e8 94       	clt

00001cb4 <__fp_szero>:
    1cb4:	bb 27       	eor	r27, r27
    1cb6:	66 27       	eor	r22, r22
    1cb8:	77 27       	eor	r23, r23
    1cba:	cb 01       	movw	r24, r22
    1cbc:	97 f9       	bld	r25, 7
    1cbe:	08 95       	ret

00001cc0 <__gesf2>:
    1cc0:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__fp_cmp>
    1cc4:	08 f4       	brcc	.+2      	; 0x1cc8 <__gesf2+0x8>
    1cc6:	8f ef       	ldi	r24, 0xFF	; 255
    1cc8:	08 95       	ret

00001cca <inverse>:
    1cca:	9b 01       	movw	r18, r22
    1ccc:	ac 01       	movw	r20, r24
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	80 e8       	ldi	r24, 0x80	; 128
    1cd4:	9f e3       	ldi	r25, 0x3F	; 63
    1cd6:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__divsf3>

00001cda <__mulsf3>:
    1cda:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3x>
    1cde:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_round>
    1ce2:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_pscA>
    1ce6:	38 f0       	brcs	.+14     	; 0x1cf6 <__mulsf3+0x1c>
    1ce8:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fp_pscB>
    1cec:	20 f0       	brcs	.+8      	; 0x1cf6 <__mulsf3+0x1c>
    1cee:	95 23       	and	r25, r21
    1cf0:	11 f0       	breq	.+4      	; 0x1cf6 <__mulsf3+0x1c>
    1cf2:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__fp_inf>
    1cf6:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__fp_nan>
    1cfa:	11 24       	eor	r1, r1
    1cfc:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__fp_szero>

00001d00 <__mulsf3x>:
    1d00:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fp_split3>
    1d04:	70 f3       	brcs	.-36     	; 0x1ce2 <__mulsf3+0x8>

00001d06 <__mulsf3_pse>:
    1d06:	95 9f       	mul	r25, r21
    1d08:	c1 f3       	breq	.-16     	; 0x1cfa <__mulsf3+0x20>
    1d0a:	95 0f       	add	r25, r21
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	55 1f       	adc	r21, r21
    1d10:	62 9f       	mul	r22, r18
    1d12:	f0 01       	movw	r30, r0
    1d14:	72 9f       	mul	r23, r18
    1d16:	bb 27       	eor	r27, r27
    1d18:	f0 0d       	add	r31, r0
    1d1a:	b1 1d       	adc	r27, r1
    1d1c:	63 9f       	mul	r22, r19
    1d1e:	aa 27       	eor	r26, r26
    1d20:	f0 0d       	add	r31, r0
    1d22:	b1 1d       	adc	r27, r1
    1d24:	aa 1f       	adc	r26, r26
    1d26:	64 9f       	mul	r22, r20
    1d28:	66 27       	eor	r22, r22
    1d2a:	b0 0d       	add	r27, r0
    1d2c:	a1 1d       	adc	r26, r1
    1d2e:	66 1f       	adc	r22, r22
    1d30:	82 9f       	mul	r24, r18
    1d32:	22 27       	eor	r18, r18
    1d34:	b0 0d       	add	r27, r0
    1d36:	a1 1d       	adc	r26, r1
    1d38:	62 1f       	adc	r22, r18
    1d3a:	73 9f       	mul	r23, r19
    1d3c:	b0 0d       	add	r27, r0
    1d3e:	a1 1d       	adc	r26, r1
    1d40:	62 1f       	adc	r22, r18
    1d42:	83 9f       	mul	r24, r19
    1d44:	a0 0d       	add	r26, r0
    1d46:	61 1d       	adc	r22, r1
    1d48:	22 1f       	adc	r18, r18
    1d4a:	74 9f       	mul	r23, r20
    1d4c:	33 27       	eor	r19, r19
    1d4e:	a0 0d       	add	r26, r0
    1d50:	61 1d       	adc	r22, r1
    1d52:	23 1f       	adc	r18, r19
    1d54:	84 9f       	mul	r24, r20
    1d56:	60 0d       	add	r22, r0
    1d58:	21 1d       	adc	r18, r1
    1d5a:	82 2f       	mov	r24, r18
    1d5c:	76 2f       	mov	r23, r22
    1d5e:	6a 2f       	mov	r22, r26
    1d60:	11 24       	eor	r1, r1
    1d62:	9f 57       	subi	r25, 0x7F	; 127
    1d64:	50 40       	sbci	r21, 0x00	; 0
    1d66:	9a f0       	brmi	.+38     	; 0x1d8e <__mulsf3_pse+0x88>
    1d68:	f1 f0       	breq	.+60     	; 0x1da6 <__mulsf3_pse+0xa0>
    1d6a:	88 23       	and	r24, r24
    1d6c:	4a f0       	brmi	.+18     	; 0x1d80 <__mulsf3_pse+0x7a>
    1d6e:	ee 0f       	add	r30, r30
    1d70:	ff 1f       	adc	r31, r31
    1d72:	bb 1f       	adc	r27, r27
    1d74:	66 1f       	adc	r22, r22
    1d76:	77 1f       	adc	r23, r23
    1d78:	88 1f       	adc	r24, r24
    1d7a:	91 50       	subi	r25, 0x01	; 1
    1d7c:	50 40       	sbci	r21, 0x00	; 0
    1d7e:	a9 f7       	brne	.-22     	; 0x1d6a <__mulsf3_pse+0x64>
    1d80:	9e 3f       	cpi	r25, 0xFE	; 254
    1d82:	51 05       	cpc	r21, r1
    1d84:	80 f0       	brcs	.+32     	; 0x1da6 <__mulsf3_pse+0xa0>
    1d86:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__fp_inf>
    1d8a:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__fp_szero>
    1d8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d90:	e4 f3       	brlt	.-8      	; 0x1d8a <__mulsf3_pse+0x84>
    1d92:	98 3e       	cpi	r25, 0xE8	; 232
    1d94:	d4 f3       	brlt	.-12     	; 0x1d8a <__mulsf3_pse+0x84>
    1d96:	86 95       	lsr	r24
    1d98:	77 95       	ror	r23
    1d9a:	67 95       	ror	r22
    1d9c:	b7 95       	ror	r27
    1d9e:	f7 95       	ror	r31
    1da0:	e7 95       	ror	r30
    1da2:	9f 5f       	subi	r25, 0xFF	; 255
    1da4:	c1 f7       	brne	.-16     	; 0x1d96 <__mulsf3_pse+0x90>
    1da6:	fe 2b       	or	r31, r30
    1da8:	88 0f       	add	r24, r24
    1daa:	91 1d       	adc	r25, r1
    1dac:	96 95       	lsr	r25
    1dae:	87 95       	ror	r24
    1db0:	97 f9       	bld	r25, 7
    1db2:	08 95       	ret

00001db4 <square>:
    1db4:	9b 01       	movw	r18, r22
    1db6:	ac 01       	movw	r20, r24
    1db8:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__mulsf3>

00001dbc <__divmodhi4>:
    1dbc:	97 fb       	bst	r25, 7
    1dbe:	07 2e       	mov	r0, r23
    1dc0:	16 f4       	brtc	.+4      	; 0x1dc6 <__divmodhi4+0xa>
    1dc2:	00 94       	com	r0
    1dc4:	07 d0       	rcall	.+14     	; 0x1dd4 <__divmodhi4_neg1>
    1dc6:	77 fd       	sbrc	r23, 7
    1dc8:	09 d0       	rcall	.+18     	; 0x1ddc <__divmodhi4_neg2>
    1dca:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__udivmodhi4>
    1dce:	07 fc       	sbrc	r0, 7
    1dd0:	05 d0       	rcall	.+10     	; 0x1ddc <__divmodhi4_neg2>
    1dd2:	3e f4       	brtc	.+14     	; 0x1de2 <__divmodhi4_exit>

00001dd4 <__divmodhi4_neg1>:
    1dd4:	90 95       	com	r25
    1dd6:	81 95       	neg	r24
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	08 95       	ret

00001ddc <__divmodhi4_neg2>:
    1ddc:	70 95       	com	r23
    1dde:	61 95       	neg	r22
    1de0:	7f 4f       	sbci	r23, 0xFF	; 255

00001de2 <__divmodhi4_exit>:
    1de2:	08 95       	ret

00001de4 <__udivmodhi4>:
    1de4:	aa 1b       	sub	r26, r26
    1de6:	bb 1b       	sub	r27, r27
    1de8:	51 e1       	ldi	r21, 0x11	; 17
    1dea:	07 c0       	rjmp	.+14     	; 0x1dfa <__udivmodhi4_ep>

00001dec <__udivmodhi4_loop>:
    1dec:	aa 1f       	adc	r26, r26
    1dee:	bb 1f       	adc	r27, r27
    1df0:	a6 17       	cp	r26, r22
    1df2:	b7 07       	cpc	r27, r23
    1df4:	10 f0       	brcs	.+4      	; 0x1dfa <__udivmodhi4_ep>
    1df6:	a6 1b       	sub	r26, r22
    1df8:	b7 0b       	sbc	r27, r23

00001dfa <__udivmodhi4_ep>:
    1dfa:	88 1f       	adc	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	5a 95       	dec	r21
    1e00:	a9 f7       	brne	.-22     	; 0x1dec <__udivmodhi4_loop>
    1e02:	80 95       	com	r24
    1e04:	90 95       	com	r25
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	08 95       	ret

00001e0c <dtostrf>:
    1e0c:	ef 92       	push	r14
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	e8 01       	movw	r28, r16
    1e18:	47 fd       	sbrc	r20, 7
    1e1a:	16 c0       	rjmp	.+44     	; 0x1e48 <dtostrf+0x3c>
    1e1c:	34 e0       	ldi	r19, 0x04	; 4
    1e1e:	04 2e       	mov	r0, r20
    1e20:	00 0c       	add	r0, r0
    1e22:	55 0b       	sbc	r21, r21
    1e24:	57 ff       	sbrs	r21, 7
    1e26:	03 c0       	rjmp	.+6      	; 0x1e2e <dtostrf+0x22>
    1e28:	51 95       	neg	r21
    1e2a:	41 95       	neg	r20
    1e2c:	51 09       	sbc	r21, r1
    1e2e:	e3 2e       	mov	r14, r19
    1e30:	02 2f       	mov	r16, r18
    1e32:	24 2f       	mov	r18, r20
    1e34:	ae 01       	movw	r20, r28
    1e36:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <dtoa_prf>
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	1f 91       	pop	r17
    1e42:	0f 91       	pop	r16
    1e44:	ef 90       	pop	r14
    1e46:	08 95       	ret
    1e48:	34 e1       	ldi	r19, 0x14	; 20
    1e4a:	e9 cf       	rjmp	.-46     	; 0x1e1e <dtostrf+0x12>

00001e4c <strcmp>:
    1e4c:	fb 01       	movw	r30, r22
    1e4e:	dc 01       	movw	r26, r24
    1e50:	8d 91       	ld	r24, X+
    1e52:	01 90       	ld	r0, Z+
    1e54:	80 19       	sub	r24, r0
    1e56:	01 10       	cpse	r0, r1
    1e58:	d9 f3       	breq	.-10     	; 0x1e50 <strcmp+0x4>
    1e5a:	99 0b       	sbc	r25, r25
    1e5c:	08 95       	ret

00001e5e <dtoa_prf>:
    1e5e:	8f 92       	push	r8
    1e60:	9f 92       	push	r9
    1e62:	af 92       	push	r10
    1e64:	bf 92       	push	r11
    1e66:	cf 92       	push	r12
    1e68:	df 92       	push	r13
    1e6a:	ef 92       	push	r14
    1e6c:	ff 92       	push	r15
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	29 97       	sbiw	r28, 0x09	; 9
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	6a 01       	movw	r12, r20
    1e88:	f2 2e       	mov	r15, r18
    1e8a:	b0 2e       	mov	r11, r16
    1e8c:	2b e3       	ldi	r18, 0x3B	; 59
    1e8e:	20 17       	cp	r18, r16
    1e90:	08 f4       	brcc	.+2      	; 0x1e94 <dtoa_prf+0x36>
    1e92:	5f c0       	rjmp	.+190    	; 0x1f52 <dtoa_prf+0xf4>
    1e94:	11 e0       	ldi	r17, 0x01	; 1
    1e96:	10 0f       	add	r17, r16
    1e98:	01 2f       	mov	r16, r17
    1e9a:	27 e0       	ldi	r18, 0x07	; 7
    1e9c:	ae 01       	movw	r20, r28
    1e9e:	4f 5f       	subi	r20, 0xFF	; 255
    1ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea2:	0e 94 b0 10 	call	0x2160	; 0x2160 <__ftoa_engine>
    1ea6:	bc 01       	movw	r22, r24
    1ea8:	39 81       	ldd	r19, Y+1	; 0x01
    1eaa:	83 2f       	mov	r24, r19
    1eac:	89 70       	andi	r24, 0x09	; 9
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <dtoa_prf+0x56>
    1eb2:	51 c0       	rjmp	.+162    	; 0x1f56 <dtoa_prf+0xf8>
    1eb4:	e1 fc       	sbrc	r14, 1
    1eb6:	51 c0       	rjmp	.+162    	; 0x1f5a <dtoa_prf+0xfc>
    1eb8:	9e 2d       	mov	r25, r14
    1eba:	91 70       	andi	r25, 0x01	; 1
    1ebc:	e0 fc       	sbrc	r14, 0
    1ebe:	90 e2       	ldi	r25, 0x20	; 32
    1ec0:	ae 2d       	mov	r26, r14
    1ec2:	a0 71       	andi	r26, 0x10	; 16
    1ec4:	83 2f       	mov	r24, r19
    1ec6:	88 70       	andi	r24, 0x08	; 8
    1ec8:	33 ff       	sbrs	r19, 3
    1eca:	5a c0       	rjmp	.+180    	; 0x1f80 <dtoa_prf+0x122>
    1ecc:	91 11       	cpse	r25, r1
    1ece:	47 c0       	rjmp	.+142    	; 0x1f5e <dtoa_prf+0x100>
    1ed0:	83 e0       	ldi	r24, 0x03	; 3
    1ed2:	8f 15       	cp	r24, r15
    1ed4:	08 f0       	brcs	.+2      	; 0x1ed8 <dtoa_prf+0x7a>
    1ed6:	45 c0       	rjmp	.+138    	; 0x1f62 <dtoa_prf+0x104>
    1ed8:	f8 1a       	sub	r15, r24
    1eda:	a1 11       	cpse	r26, r1
    1edc:	08 c0       	rjmp	.+16     	; 0x1eee <dtoa_prf+0x90>
    1ede:	f6 01       	movw	r30, r12
    1ee0:	8f 2d       	mov	r24, r15
    1ee2:	20 e2       	ldi	r18, 0x20	; 32
    1ee4:	81 11       	cpse	r24, r1
    1ee6:	3f c0       	rjmp	.+126    	; 0x1f66 <dtoa_prf+0x108>
    1ee8:	cf 0c       	add	r12, r15
    1eea:	d1 1c       	adc	r13, r1
    1eec:	f1 2c       	mov	r15, r1
    1eee:	99 23       	and	r25, r25
    1ef0:	29 f0       	breq	.+10     	; 0x1efc <dtoa_prf+0x9e>
    1ef2:	d6 01       	movw	r26, r12
    1ef4:	9c 93       	st	X, r25
    1ef6:	f6 01       	movw	r30, r12
    1ef8:	31 96       	adiw	r30, 0x01	; 1
    1efa:	6f 01       	movw	r12, r30
    1efc:	c6 01       	movw	r24, r12
    1efe:	03 96       	adiw	r24, 0x03	; 3
    1f00:	e2 fe       	sbrs	r14, 2
    1f02:	34 c0       	rjmp	.+104    	; 0x1f6c <dtoa_prf+0x10e>
    1f04:	2e e4       	ldi	r18, 0x4E	; 78
    1f06:	d6 01       	movw	r26, r12
    1f08:	2c 93       	st	X, r18
    1f0a:	31 e4       	ldi	r19, 0x41	; 65
    1f0c:	11 96       	adiw	r26, 0x01	; 1
    1f0e:	3c 93       	st	X, r19
    1f10:	11 97       	sbiw	r26, 0x01	; 1
    1f12:	12 96       	adiw	r26, 0x02	; 2
    1f14:	2c 93       	st	X, r18
    1f16:	fc 01       	movw	r30, r24
    1f18:	2f 2d       	mov	r18, r15
    1f1a:	30 e2       	ldi	r19, 0x20	; 32
    1f1c:	21 11       	cpse	r18, r1
    1f1e:	2d c0       	rjmp	.+90     	; 0x1f7a <dtoa_prf+0x11c>
    1f20:	8f 0d       	add	r24, r15
    1f22:	91 1d       	adc	r25, r1
    1f24:	dc 01       	movw	r26, r24
    1f26:	1c 92       	st	X, r1
    1f28:	8e ef       	ldi	r24, 0xFE	; 254
    1f2a:	9f ef       	ldi	r25, 0xFF	; 255
    1f2c:	29 96       	adiw	r28, 0x09	; 9
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	ff 90       	pop	r15
    1f42:	ef 90       	pop	r14
    1f44:	df 90       	pop	r13
    1f46:	cf 90       	pop	r12
    1f48:	bf 90       	pop	r11
    1f4a:	af 90       	pop	r10
    1f4c:	9f 90       	pop	r9
    1f4e:	8f 90       	pop	r8
    1f50:	08 95       	ret
    1f52:	1c e3       	ldi	r17, 0x3C	; 60
    1f54:	a1 cf       	rjmp	.-190    	; 0x1e98 <dtoa_prf+0x3a>
    1f56:	9d e2       	ldi	r25, 0x2D	; 45
    1f58:	b3 cf       	rjmp	.-154    	; 0x1ec0 <dtoa_prf+0x62>
    1f5a:	9b e2       	ldi	r25, 0x2B	; 43
    1f5c:	b1 cf       	rjmp	.-158    	; 0x1ec0 <dtoa_prf+0x62>
    1f5e:	84 e0       	ldi	r24, 0x04	; 4
    1f60:	b8 cf       	rjmp	.-144    	; 0x1ed2 <dtoa_prf+0x74>
    1f62:	f1 2c       	mov	r15, r1
    1f64:	ba cf       	rjmp	.-140    	; 0x1eda <dtoa_prf+0x7c>
    1f66:	21 93       	st	Z+, r18
    1f68:	81 50       	subi	r24, 0x01	; 1
    1f6a:	bc cf       	rjmp	.-136    	; 0x1ee4 <dtoa_prf+0x86>
    1f6c:	2e e6       	ldi	r18, 0x6E	; 110
    1f6e:	f6 01       	movw	r30, r12
    1f70:	20 83       	st	Z, r18
    1f72:	31 e6       	ldi	r19, 0x61	; 97
    1f74:	31 83       	std	Z+1, r19	; 0x01
    1f76:	22 83       	std	Z+2, r18	; 0x02
    1f78:	ce cf       	rjmp	.-100    	; 0x1f16 <dtoa_prf+0xb8>
    1f7a:	31 93       	st	Z+, r19
    1f7c:	21 50       	subi	r18, 0x01	; 1
    1f7e:	ce cf       	rjmp	.-100    	; 0x1f1c <dtoa_prf+0xbe>
    1f80:	23 2f       	mov	r18, r19
    1f82:	24 70       	andi	r18, 0x04	; 4
    1f84:	32 ff       	sbrs	r19, 2
    1f86:	41 c0       	rjmp	.+130    	; 0x200a <dtoa_prf+0x1ac>
    1f88:	91 11       	cpse	r25, r1
    1f8a:	2f c0       	rjmp	.+94     	; 0x1fea <dtoa_prf+0x18c>
    1f8c:	23 e0       	ldi	r18, 0x03	; 3
    1f8e:	2f 15       	cp	r18, r15
    1f90:	10 f4       	brcc	.+4      	; 0x1f96 <dtoa_prf+0x138>
    1f92:	8f 2d       	mov	r24, r15
    1f94:	82 1b       	sub	r24, r18
    1f96:	a1 11       	cpse	r26, r1
    1f98:	08 c0       	rjmp	.+16     	; 0x1faa <dtoa_prf+0x14c>
    1f9a:	f6 01       	movw	r30, r12
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e2       	ldi	r19, 0x20	; 32
    1fa0:	21 11       	cpse	r18, r1
    1fa2:	25 c0       	rjmp	.+74     	; 0x1fee <dtoa_prf+0x190>
    1fa4:	c8 0e       	add	r12, r24
    1fa6:	d1 1c       	adc	r13, r1
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	99 23       	and	r25, r25
    1fac:	31 f0       	breq	.+12     	; 0x1fba <dtoa_prf+0x15c>
    1fae:	f6 01       	movw	r30, r12
    1fb0:	90 83       	st	Z, r25
    1fb2:	96 01       	movw	r18, r12
    1fb4:	2f 5f       	subi	r18, 0xFF	; 255
    1fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb8:	69 01       	movw	r12, r18
    1fba:	96 01       	movw	r18, r12
    1fbc:	2d 5f       	subi	r18, 0xFD	; 253
    1fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc0:	e2 fe       	sbrs	r14, 2
    1fc2:	18 c0       	rjmp	.+48     	; 0x1ff4 <dtoa_prf+0x196>
    1fc4:	99 e4       	ldi	r25, 0x49	; 73
    1fc6:	d6 01       	movw	r26, r12
    1fc8:	9c 93       	st	X, r25
    1fca:	9e e4       	ldi	r25, 0x4E	; 78
    1fcc:	11 96       	adiw	r26, 0x01	; 1
    1fce:	9c 93       	st	X, r25
    1fd0:	11 97       	sbiw	r26, 0x01	; 1
    1fd2:	96 e4       	ldi	r25, 0x46	; 70
    1fd4:	12 96       	adiw	r26, 0x02	; 2
    1fd6:	9c 93       	st	X, r25
    1fd8:	f9 01       	movw	r30, r18
    1fda:	98 2f       	mov	r25, r24
    1fdc:	40 e2       	ldi	r20, 0x20	; 32
    1fde:	91 11       	cpse	r25, r1
    1fe0:	11 c0       	rjmp	.+34     	; 0x2004 <dtoa_prf+0x1a6>
    1fe2:	28 0f       	add	r18, r24
    1fe4:	31 1d       	adc	r19, r1
    1fe6:	d9 01       	movw	r26, r18
    1fe8:	9e cf       	rjmp	.-196    	; 0x1f26 <dtoa_prf+0xc8>
    1fea:	24 e0       	ldi	r18, 0x04	; 4
    1fec:	d0 cf       	rjmp	.-96     	; 0x1f8e <dtoa_prf+0x130>
    1fee:	31 93       	st	Z+, r19
    1ff0:	21 50       	subi	r18, 0x01	; 1
    1ff2:	d6 cf       	rjmp	.-84     	; 0x1fa0 <dtoa_prf+0x142>
    1ff4:	99 e6       	ldi	r25, 0x69	; 105
    1ff6:	f6 01       	movw	r30, r12
    1ff8:	90 83       	st	Z, r25
    1ffa:	9e e6       	ldi	r25, 0x6E	; 110
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	96 e6       	ldi	r25, 0x66	; 102
    2000:	92 83       	std	Z+2, r25	; 0x02
    2002:	ea cf       	rjmp	.-44     	; 0x1fd8 <dtoa_prf+0x17a>
    2004:	41 93       	st	Z+, r20
    2006:	91 50       	subi	r25, 0x01	; 1
    2008:	ea cf       	rjmp	.-44     	; 0x1fde <dtoa_prf+0x180>
    200a:	41 e0       	ldi	r20, 0x01	; 1
    200c:	50 e0       	ldi	r21, 0x00	; 0
    200e:	91 11       	cpse	r25, r1
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <dtoa_prf+0x1b8>
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	50 e0       	ldi	r21, 0x00	; 0
    2016:	16 16       	cp	r1, r22
    2018:	17 06       	cpc	r1, r23
    201a:	0c f0       	brlt	.+2      	; 0x201e <dtoa_prf+0x1c0>
    201c:	75 c0       	rjmp	.+234    	; 0x2108 <dtoa_prf+0x2aa>
    201e:	fb 01       	movw	r30, r22
    2020:	31 96       	adiw	r30, 0x01	; 1
    2022:	e4 0f       	add	r30, r20
    2024:	f5 1f       	adc	r31, r21
    2026:	bb 20       	and	r11, r11
    2028:	09 f4       	brne	.+2      	; 0x202c <dtoa_prf+0x1ce>
    202a:	71 c0       	rjmp	.+226    	; 0x210e <dtoa_prf+0x2b0>
    202c:	4b 2d       	mov	r20, r11
    202e:	50 e0       	ldi	r21, 0x00	; 0
    2030:	4f 5f       	subi	r20, 0xFF	; 255
    2032:	5f 4f       	sbci	r21, 0xFF	; 255
    2034:	4e 0f       	add	r20, r30
    2036:	5f 1f       	adc	r21, r31
    2038:	ef 2d       	mov	r30, r15
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	4e 17       	cp	r20, r30
    203e:	5f 07       	cpc	r21, r31
    2040:	14 f4       	brge	.+4      	; 0x2046 <dtoa_prf+0x1e8>
    2042:	2f 2d       	mov	r18, r15
    2044:	24 1b       	sub	r18, r20
    2046:	8e 2d       	mov	r24, r14
    2048:	88 71       	andi	r24, 0x18	; 24
    204a:	41 f4       	brne	.+16     	; 0x205c <dtoa_prf+0x1fe>
    204c:	f6 01       	movw	r30, r12
    204e:	82 2f       	mov	r24, r18
    2050:	40 e2       	ldi	r20, 0x20	; 32
    2052:	81 11       	cpse	r24, r1
    2054:	5f c0       	rjmp	.+190    	; 0x2114 <dtoa_prf+0x2b6>
    2056:	c2 0e       	add	r12, r18
    2058:	d1 1c       	adc	r13, r1
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	99 23       	and	r25, r25
    205e:	29 f0       	breq	.+10     	; 0x206a <dtoa_prf+0x20c>
    2060:	f6 01       	movw	r30, r12
    2062:	90 83       	st	Z, r25
    2064:	c6 01       	movw	r24, r12
    2066:	01 96       	adiw	r24, 0x01	; 1
    2068:	6c 01       	movw	r12, r24
    206a:	a1 11       	cpse	r26, r1
    206c:	08 c0       	rjmp	.+16     	; 0x207e <dtoa_prf+0x220>
    206e:	f6 01       	movw	r30, r12
    2070:	82 2f       	mov	r24, r18
    2072:	90 e3       	ldi	r25, 0x30	; 48
    2074:	81 11       	cpse	r24, r1
    2076:	51 c0       	rjmp	.+162    	; 0x211a <dtoa_prf+0x2bc>
    2078:	c2 0e       	add	r12, r18
    207a:	d1 1c       	adc	r13, r1
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	01 2f       	mov	r16, r17
    2080:	06 0f       	add	r16, r22
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	a3 2f       	mov	r26, r19
    2086:	a0 71       	andi	r26, 0x10	; 16
    2088:	aa 2e       	mov	r10, r26
    208a:	34 ff       	sbrs	r19, 4
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <dtoa_prf+0x236>
    208e:	91 33       	cpi	r25, 0x31	; 49
    2090:	09 f4       	brne	.+2      	; 0x2094 <dtoa_prf+0x236>
    2092:	01 50       	subi	r16, 0x01	; 1
    2094:	10 16       	cp	r1, r16
    2096:	0c f0       	brlt	.+2      	; 0x209a <dtoa_prf+0x23c>
    2098:	43 c0       	rjmp	.+134    	; 0x2120 <dtoa_prf+0x2c2>
    209a:	09 30       	cpi	r16, 0x09	; 9
    209c:	08 f0       	brcs	.+2      	; 0x20a0 <dtoa_prf+0x242>
    209e:	08 e0       	ldi	r16, 0x08	; 8
    20a0:	ab 01       	movw	r20, r22
    20a2:	77 ff       	sbrs	r23, 7
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <dtoa_prf+0x24c>
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	50 e0       	ldi	r21, 0x00	; 0
    20aa:	fb 01       	movw	r30, r22
    20ac:	31 96       	adiw	r30, 0x01	; 1
    20ae:	e4 1b       	sub	r30, r20
    20b0:	f5 0b       	sbc	r31, r21
    20b2:	a1 e0       	ldi	r26, 0x01	; 1
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	ac 0f       	add	r26, r28
    20b8:	bd 1f       	adc	r27, r29
    20ba:	ea 0f       	add	r30, r26
    20bc:	fb 1f       	adc	r31, r27
    20be:	3e e2       	ldi	r19, 0x2E	; 46
    20c0:	4b 01       	movw	r8, r22
    20c2:	80 1a       	sub	r8, r16
    20c4:	91 08       	sbc	r9, r1
    20c6:	0b 2d       	mov	r16, r11
    20c8:	10 e0       	ldi	r17, 0x00	; 0
    20ca:	11 95       	neg	r17
    20cc:	01 95       	neg	r16
    20ce:	11 09       	sbc	r17, r1
    20d0:	4f 3f       	cpi	r20, 0xFF	; 255
    20d2:	bf ef       	ldi	r27, 0xFF	; 255
    20d4:	5b 07       	cpc	r21, r27
    20d6:	21 f4       	brne	.+8      	; 0x20e0 <dtoa_prf+0x282>
    20d8:	d6 01       	movw	r26, r12
    20da:	3c 93       	st	X, r19
    20dc:	11 96       	adiw	r26, 0x01	; 1
    20de:	6d 01       	movw	r12, r26
    20e0:	64 17       	cp	r22, r20
    20e2:	75 07       	cpc	r23, r21
    20e4:	fc f0       	brlt	.+62     	; 0x2124 <dtoa_prf+0x2c6>
    20e6:	84 16       	cp	r8, r20
    20e8:	95 06       	cpc	r9, r21
    20ea:	e4 f4       	brge	.+56     	; 0x2124 <dtoa_prf+0x2c6>
    20ec:	80 81       	ld	r24, Z
    20ee:	41 50       	subi	r20, 0x01	; 1
    20f0:	51 09       	sbc	r21, r1
    20f2:	31 96       	adiw	r30, 0x01	; 1
    20f4:	d6 01       	movw	r26, r12
    20f6:	11 96       	adiw	r26, 0x01	; 1
    20f8:	7d 01       	movw	r14, r26
    20fa:	40 17       	cp	r20, r16
    20fc:	51 07       	cpc	r21, r17
    20fe:	a4 f0       	brlt	.+40     	; 0x2128 <dtoa_prf+0x2ca>
    2100:	d6 01       	movw	r26, r12
    2102:	8c 93       	st	X, r24
    2104:	67 01       	movw	r12, r14
    2106:	e4 cf       	rjmp	.-56     	; 0x20d0 <dtoa_prf+0x272>
    2108:	e1 e0       	ldi	r30, 0x01	; 1
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	8a cf       	rjmp	.-236    	; 0x2022 <dtoa_prf+0x1c4>
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	50 e0       	ldi	r21, 0x00	; 0
    2112:	90 cf       	rjmp	.-224    	; 0x2034 <dtoa_prf+0x1d6>
    2114:	41 93       	st	Z+, r20
    2116:	81 50       	subi	r24, 0x01	; 1
    2118:	9c cf       	rjmp	.-200    	; 0x2052 <dtoa_prf+0x1f4>
    211a:	91 93       	st	Z+, r25
    211c:	81 50       	subi	r24, 0x01	; 1
    211e:	aa cf       	rjmp	.-172    	; 0x2074 <dtoa_prf+0x216>
    2120:	01 e0       	ldi	r16, 0x01	; 1
    2122:	be cf       	rjmp	.-132    	; 0x20a0 <dtoa_prf+0x242>
    2124:	80 e3       	ldi	r24, 0x30	; 48
    2126:	e3 cf       	rjmp	.-58     	; 0x20ee <dtoa_prf+0x290>
    2128:	64 17       	cp	r22, r20
    212a:	75 07       	cpc	r23, r21
    212c:	31 f4       	brne	.+12     	; 0x213a <dtoa_prf+0x2dc>
    212e:	96 33       	cpi	r25, 0x36	; 54
    2130:	90 f4       	brcc	.+36     	; 0x2156 <dtoa_prf+0x2f8>
    2132:	95 33       	cpi	r25, 0x35	; 53
    2134:	11 f4       	brne	.+4      	; 0x213a <dtoa_prf+0x2dc>
    2136:	aa 20       	and	r10, r10
    2138:	71 f0       	breq	.+28     	; 0x2156 <dtoa_prf+0x2f8>
    213a:	f6 01       	movw	r30, r12
    213c:	80 83       	st	Z, r24
    213e:	f7 01       	movw	r30, r14
    2140:	82 2f       	mov	r24, r18
    2142:	90 e2       	ldi	r25, 0x20	; 32
    2144:	81 11       	cpse	r24, r1
    2146:	09 c0       	rjmp	.+18     	; 0x215a <dtoa_prf+0x2fc>
    2148:	f7 01       	movw	r30, r14
    214a:	e2 0f       	add	r30, r18
    214c:	f1 1d       	adc	r31, r1
    214e:	10 82       	st	Z, r1
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	eb ce       	rjmp	.-554    	; 0x1f2c <dtoa_prf+0xce>
    2156:	81 e3       	ldi	r24, 0x31	; 49
    2158:	f0 cf       	rjmp	.-32     	; 0x213a <dtoa_prf+0x2dc>
    215a:	91 93       	st	Z+, r25
    215c:	81 50       	subi	r24, 0x01	; 1
    215e:	f2 cf       	rjmp	.-28     	; 0x2144 <dtoa_prf+0x2e6>

00002160 <__ftoa_engine>:
    2160:	28 30       	cpi	r18, 0x08	; 8
    2162:	08 f0       	brcs	.+2      	; 0x2166 <__ftoa_engine+0x6>
    2164:	27 e0       	ldi	r18, 0x07	; 7
    2166:	33 27       	eor	r19, r19
    2168:	da 01       	movw	r26, r20
    216a:	99 0f       	add	r25, r25
    216c:	31 1d       	adc	r19, r1
    216e:	87 fd       	sbrc	r24, 7
    2170:	91 60       	ori	r25, 0x01	; 1
    2172:	00 96       	adiw	r24, 0x00	; 0
    2174:	61 05       	cpc	r22, r1
    2176:	71 05       	cpc	r23, r1
    2178:	39 f4       	brne	.+14     	; 0x2188 <__ftoa_engine+0x28>
    217a:	32 60       	ori	r19, 0x02	; 2
    217c:	2e 5f       	subi	r18, 0xFE	; 254
    217e:	3d 93       	st	X+, r19
    2180:	30 e3       	ldi	r19, 0x30	; 48
    2182:	2a 95       	dec	r18
    2184:	e1 f7       	brne	.-8      	; 0x217e <__ftoa_engine+0x1e>
    2186:	08 95       	ret
    2188:	9f 3f       	cpi	r25, 0xFF	; 255
    218a:	30 f0       	brcs	.+12     	; 0x2198 <__ftoa_engine+0x38>
    218c:	80 38       	cpi	r24, 0x80	; 128
    218e:	71 05       	cpc	r23, r1
    2190:	61 05       	cpc	r22, r1
    2192:	09 f0       	breq	.+2      	; 0x2196 <__ftoa_engine+0x36>
    2194:	3c 5f       	subi	r19, 0xFC	; 252
    2196:	3c 5f       	subi	r19, 0xFC	; 252
    2198:	3d 93       	st	X+, r19
    219a:	91 30       	cpi	r25, 0x01	; 1
    219c:	08 f0       	brcs	.+2      	; 0x21a0 <__ftoa_engine+0x40>
    219e:	80 68       	ori	r24, 0x80	; 128
    21a0:	91 1d       	adc	r25, r1
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	1f 93       	push	r17
    21a8:	0f 93       	push	r16
    21aa:	ff 92       	push	r15
    21ac:	ef 92       	push	r14
    21ae:	19 2f       	mov	r17, r25
    21b0:	98 7f       	andi	r25, 0xF8	; 248
    21b2:	96 95       	lsr	r25
    21b4:	e9 2f       	mov	r30, r25
    21b6:	96 95       	lsr	r25
    21b8:	96 95       	lsr	r25
    21ba:	e9 0f       	add	r30, r25
    21bc:	ff 27       	eor	r31, r31
    21be:	ec 5e       	subi	r30, 0xEC	; 236
    21c0:	fe 4f       	sbci	r31, 0xFE	; 254
    21c2:	99 27       	eor	r25, r25
    21c4:	33 27       	eor	r19, r19
    21c6:	ee 24       	eor	r14, r14
    21c8:	ff 24       	eor	r15, r15
    21ca:	a7 01       	movw	r20, r14
    21cc:	e7 01       	movw	r28, r14
    21ce:	05 90       	lpm	r0, Z+
    21d0:	08 94       	sec
    21d2:	07 94       	ror	r0
    21d4:	28 f4       	brcc	.+10     	; 0x21e0 <__ftoa_engine+0x80>
    21d6:	36 0f       	add	r19, r22
    21d8:	e7 1e       	adc	r14, r23
    21da:	f8 1e       	adc	r15, r24
    21dc:	49 1f       	adc	r20, r25
    21de:	51 1d       	adc	r21, r1
    21e0:	66 0f       	add	r22, r22
    21e2:	77 1f       	adc	r23, r23
    21e4:	88 1f       	adc	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	06 94       	lsr	r0
    21ea:	a1 f7       	brne	.-24     	; 0x21d4 <__ftoa_engine+0x74>
    21ec:	05 90       	lpm	r0, Z+
    21ee:	07 94       	ror	r0
    21f0:	28 f4       	brcc	.+10     	; 0x21fc <__ftoa_engine+0x9c>
    21f2:	e7 0e       	add	r14, r23
    21f4:	f8 1e       	adc	r15, r24
    21f6:	49 1f       	adc	r20, r25
    21f8:	56 1f       	adc	r21, r22
    21fa:	c1 1d       	adc	r28, r1
    21fc:	77 0f       	add	r23, r23
    21fe:	88 1f       	adc	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	66 1f       	adc	r22, r22
    2204:	06 94       	lsr	r0
    2206:	a1 f7       	brne	.-24     	; 0x21f0 <__ftoa_engine+0x90>
    2208:	05 90       	lpm	r0, Z+
    220a:	07 94       	ror	r0
    220c:	28 f4       	brcc	.+10     	; 0x2218 <__ftoa_engine+0xb8>
    220e:	f8 0e       	add	r15, r24
    2210:	49 1f       	adc	r20, r25
    2212:	56 1f       	adc	r21, r22
    2214:	c7 1f       	adc	r28, r23
    2216:	d1 1d       	adc	r29, r1
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	66 1f       	adc	r22, r22
    221e:	77 1f       	adc	r23, r23
    2220:	06 94       	lsr	r0
    2222:	a1 f7       	brne	.-24     	; 0x220c <__ftoa_engine+0xac>
    2224:	05 90       	lpm	r0, Z+
    2226:	07 94       	ror	r0
    2228:	20 f4       	brcc	.+8      	; 0x2232 <__ftoa_engine+0xd2>
    222a:	49 0f       	add	r20, r25
    222c:	56 1f       	adc	r21, r22
    222e:	c7 1f       	adc	r28, r23
    2230:	d8 1f       	adc	r29, r24
    2232:	99 0f       	add	r25, r25
    2234:	66 1f       	adc	r22, r22
    2236:	77 1f       	adc	r23, r23
    2238:	88 1f       	adc	r24, r24
    223a:	06 94       	lsr	r0
    223c:	a9 f7       	brne	.-22     	; 0x2228 <__ftoa_engine+0xc8>
    223e:	84 91       	lpm	r24, Z
    2240:	10 95       	com	r17
    2242:	17 70       	andi	r17, 0x07	; 7
    2244:	41 f0       	breq	.+16     	; 0x2256 <__ftoa_engine+0xf6>
    2246:	d6 95       	lsr	r29
    2248:	c7 95       	ror	r28
    224a:	57 95       	ror	r21
    224c:	47 95       	ror	r20
    224e:	f7 94       	ror	r15
    2250:	e7 94       	ror	r14
    2252:	1a 95       	dec	r17
    2254:	c1 f7       	brne	.-16     	; 0x2246 <__ftoa_engine+0xe6>
    2256:	ea eb       	ldi	r30, 0xBA	; 186
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	68 94       	set
    225c:	15 90       	lpm	r1, Z+
    225e:	15 91       	lpm	r17, Z+
    2260:	35 91       	lpm	r19, Z+
    2262:	65 91       	lpm	r22, Z+
    2264:	95 91       	lpm	r25, Z+
    2266:	05 90       	lpm	r0, Z+
    2268:	7f e2       	ldi	r23, 0x2F	; 47
    226a:	73 95       	inc	r23
    226c:	e1 18       	sub	r14, r1
    226e:	f1 0a       	sbc	r15, r17
    2270:	43 0b       	sbc	r20, r19
    2272:	56 0b       	sbc	r21, r22
    2274:	c9 0b       	sbc	r28, r25
    2276:	d0 09       	sbc	r29, r0
    2278:	c0 f7       	brcc	.-16     	; 0x226a <__ftoa_engine+0x10a>
    227a:	e1 0c       	add	r14, r1
    227c:	f1 1e       	adc	r15, r17
    227e:	43 1f       	adc	r20, r19
    2280:	56 1f       	adc	r21, r22
    2282:	c9 1f       	adc	r28, r25
    2284:	d0 1d       	adc	r29, r0
    2286:	7e f4       	brtc	.+30     	; 0x22a6 <__ftoa_engine+0x146>
    2288:	70 33       	cpi	r23, 0x30	; 48
    228a:	11 f4       	brne	.+4      	; 0x2290 <__ftoa_engine+0x130>
    228c:	8a 95       	dec	r24
    228e:	e6 cf       	rjmp	.-52     	; 0x225c <__ftoa_engine+0xfc>
    2290:	e8 94       	clt
    2292:	01 50       	subi	r16, 0x01	; 1
    2294:	30 f0       	brcs	.+12     	; 0x22a2 <__ftoa_engine+0x142>
    2296:	08 0f       	add	r16, r24
    2298:	0a f4       	brpl	.+2      	; 0x229c <__ftoa_engine+0x13c>
    229a:	00 27       	eor	r16, r16
    229c:	02 17       	cp	r16, r18
    229e:	08 f4       	brcc	.+2      	; 0x22a2 <__ftoa_engine+0x142>
    22a0:	20 2f       	mov	r18, r16
    22a2:	23 95       	inc	r18
    22a4:	02 2f       	mov	r16, r18
    22a6:	7a 33       	cpi	r23, 0x3A	; 58
    22a8:	28 f0       	brcs	.+10     	; 0x22b4 <__ftoa_engine+0x154>
    22aa:	79 e3       	ldi	r23, 0x39	; 57
    22ac:	7d 93       	st	X+, r23
    22ae:	2a 95       	dec	r18
    22b0:	e9 f7       	brne	.-6      	; 0x22ac <__ftoa_engine+0x14c>
    22b2:	10 c0       	rjmp	.+32     	; 0x22d4 <__ftoa_engine+0x174>
    22b4:	7d 93       	st	X+, r23
    22b6:	2a 95       	dec	r18
    22b8:	89 f6       	brne	.-94     	; 0x225c <__ftoa_engine+0xfc>
    22ba:	06 94       	lsr	r0
    22bc:	97 95       	ror	r25
    22be:	67 95       	ror	r22
    22c0:	37 95       	ror	r19
    22c2:	17 95       	ror	r17
    22c4:	17 94       	ror	r1
    22c6:	e1 18       	sub	r14, r1
    22c8:	f1 0a       	sbc	r15, r17
    22ca:	43 0b       	sbc	r20, r19
    22cc:	56 0b       	sbc	r21, r22
    22ce:	c9 0b       	sbc	r28, r25
    22d0:	d0 09       	sbc	r29, r0
    22d2:	98 f0       	brcs	.+38     	; 0x22fa <__ftoa_engine+0x19a>
    22d4:	23 95       	inc	r18
    22d6:	7e 91       	ld	r23, -X
    22d8:	73 95       	inc	r23
    22da:	7a 33       	cpi	r23, 0x3A	; 58
    22dc:	08 f0       	brcs	.+2      	; 0x22e0 <__ftoa_engine+0x180>
    22de:	70 e3       	ldi	r23, 0x30	; 48
    22e0:	7c 93       	st	X, r23
    22e2:	20 13       	cpse	r18, r16
    22e4:	b8 f7       	brcc	.-18     	; 0x22d4 <__ftoa_engine+0x174>
    22e6:	7e 91       	ld	r23, -X
    22e8:	70 61       	ori	r23, 0x10	; 16
    22ea:	7d 93       	st	X+, r23
    22ec:	30 f0       	brcs	.+12     	; 0x22fa <__ftoa_engine+0x19a>
    22ee:	83 95       	inc	r24
    22f0:	71 e3       	ldi	r23, 0x31	; 49
    22f2:	7d 93       	st	X+, r23
    22f4:	70 e3       	ldi	r23, 0x30	; 48
    22f6:	2a 95       	dec	r18
    22f8:	e1 f7       	brne	.-8      	; 0x22f2 <__ftoa_engine+0x192>
    22fa:	11 24       	eor	r1, r1
    22fc:	ef 90       	pop	r14
    22fe:	ff 90       	pop	r15
    2300:	0f 91       	pop	r16
    2302:	1f 91       	pop	r17
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	99 27       	eor	r25, r25
    230a:	87 fd       	sbrc	r24, 7
    230c:	90 95       	com	r25
    230e:	08 95       	ret

00002310 <_exit>:
    2310:	f8 94       	cli

00002312 <__stop_program>:
    2312:	ff cf       	rjmp	.-2      	; 0x2312 <__stop_program>
