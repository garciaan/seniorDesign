Archive member included to satisfy reference by file (symbol)

/usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
                              /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o (exit)
/usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800100 0x000000000000ff00 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o
LOAD main.o
LOAD ../../../lib/lcd/lcd.o
LOAD ../../../lib/uart/uart.o
LOAD /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/libm.a
START GROUP
LOAD /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a
LOAD /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/libm.a
LOAD /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/libc.a
LOAD /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/libatmega128.a
END GROUP

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x52a
 *(.vectors)
 .vectors       0x0000000000000000       0x8c /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
                0x000000000000008c                . = ALIGN (0x2)
                0x000000000000008c                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x000000000000008c        0x0 linker stubs
 *(.trampolines*)
                0x000000000000008c                __trampolines_end = .
 *(.progmem*)
                0x000000000000008c                . = ALIGN (0x2)
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x000000000000008c                __ctors_start = .
 *(.ctors)
                0x000000000000008c                __ctors_end = .
                0x000000000000008c                __dtors_start = .
 *(.dtors)
                0x000000000000008c                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x000000000000008c        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o
                0x000000000000008c                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x000000000000008c        0xc /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000098       0x1a /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_copy_data.o)
                0x0000000000000098                __do_copy_data
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000000000000b2        0x8 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o
 *(.init9)
 *(.text)
 .text          0x00000000000000ba        0x4 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o
                0x00000000000000ba                __vector_20
                0x00000000000000ba                __vector_28
                0x00000000000000ba                __vector_1
                0x00000000000000ba                __vector_32
                0x00000000000000ba                __vector_34
                0x00000000000000ba                __vector_24
                0x00000000000000ba                __vector_12
                0x00000000000000ba                __bad_interrupt
                0x00000000000000ba                __vector_6
                0x00000000000000ba                __vector_31
                0x00000000000000ba                __vector_3
                0x00000000000000ba                __vector_23
                0x00000000000000ba                __vector_30
                0x00000000000000ba                __vector_25
                0x00000000000000ba                __vector_11
                0x00000000000000ba                __vector_13
                0x00000000000000ba                __vector_17
                0x00000000000000ba                __vector_19
                0x00000000000000ba                __vector_7
                0x00000000000000ba                __vector_27
                0x00000000000000ba                __vector_5
                0x00000000000000ba                __vector_33
                0x00000000000000ba                __vector_4
                0x00000000000000ba                __vector_9
                0x00000000000000ba                __vector_2
                0x00000000000000ba                __vector_21
                0x00000000000000ba                __vector_15
                0x00000000000000ba                __vector_29
                0x00000000000000ba                __vector_8
                0x00000000000000ba                __vector_26
                0x00000000000000ba                __vector_14
                0x00000000000000ba                __vector_10
                0x00000000000000ba                __vector_16
                0x00000000000000ba                __vector_18
                0x00000000000000ba                __vector_22
 .text          0x00000000000000be        0x0 main.o
 .text          0x00000000000000be      0x232 ../../../lib/lcd/lcd.o
                0x00000000000000be                strobe_lcd
                0x00000000000000d0                clear_display
                0x0000000000000104                home_line2
                0x0000000000000130                char2lcd
                0x000000000000015c                string2lcd
                0x00000000000001ba                spi_init
                0x00000000000001d8                lcd_init
 .text          0x00000000000002f0      0x1a8 ../../../lib/uart/uart.o
                0x00000000000002f0                USART1_Init
                0x0000000000000318                USART1_Transmit
                0x0000000000000326                USART1_send_string
                0x0000000000000344                USART1_Receive
                0x0000000000000352                USART1_Receive_String
                0x000000000000039a                USART1_flush
                0x00000000000003d4                USART0_Init
                0x00000000000003f8                USART0_Transmit
                0x0000000000000400                USART0_send_string
                0x0000000000000418                USART0_Receive
                0x0000000000000436                USART0_Receive_String
                0x000000000000048c                USART0_flush
 .text          0x0000000000000498        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
 .text          0x0000000000000498        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_copy_data.o)
                0x0000000000000498                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x0000000000000498       0x8e main.o
                0x0000000000000498                main
 .text.libgcc.mul
                0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
 .text.libgcc.div
                0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.fixed
                0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_copy_data.o)
                0x0000000000000526                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000000526        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
                0x0000000000000526                exit
                0x0000000000000526                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000000526        0x4 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
 *(.fini0)
                0x000000000000052a                _etext = .

.data           0x0000000000800100       0x48 load address 0x000000000000052a
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o
 .data          0x0000000000800100        0x0 main.o
 .data          0x0000000000800100        0x0 ../../../lib/lcd/lcd.o
 .data          0x0000000000800100        0x0 ../../../lib/uart/uart.o
 .data          0x0000000000800100        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
 .data          0x0000000000800100        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_copy_data.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 .rodata.str1.1
                0x0000000000800100       0x38 main.o
 .rodata.str1.1
                0x0000000000800138        0xf ../../../lib/uart/uart.o
 *(.gnu.linkonce.d*)
                0x0000000000800148                . = ALIGN (0x2)
 *fill*         0x0000000000800147        0x1 
                0x0000000000800148                _edata = .
                0x0000000000800148                PROVIDE (__data_end, .)

.bss            0x0000000000800148        0x0
                0x0000000000800148                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800148        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o
 .bss           0x0000000000800148        0x0 main.o
 .bss           0x0000000000800148        0x0 ../../../lib/lcd/lcd.o
 .bss           0x0000000000800148        0x0 ../../../lib/uart/uart.o
 .bss           0x0000000000800148        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
 .bss           0x0000000000800148        0x0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_copy_data.o)
 *(.bss*)
 *(COMMON)
                0x0000000000800148                PROVIDE (__bss_end, .)
                0x000000000000052a                __data_load_start = LOADADDR (.data)
                0x0000000000000572                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800148        0x0
                0x0000000000800148                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800148                PROVIDE (__noinit_end, .)
                0x0000000000800148                _end = .
                0x0000000000800148                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000     0x1b18
 *(.stab)
 .stab          0x0000000000000000      0x630 main.o
 .stab          0x0000000000000630      0x9d8 ../../../lib/lcd/lcd.o
                                        0xbc4 (size before relaxing)
 .stab          0x0000000000001008      0x9b4 ../../../lib/uart/uart.o
                                        0xba0 (size before relaxing)
 .stab          0x00000000000019bc       0x6c /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_exit.o)
                                         0x78 (size before relaxing)
 .stab          0x0000000000001a28       0xf0 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/avr51/libgcc.a(_copy_data.o)
                                         0xfc (size before relaxing)

.stabstr        0x0000000000000000     0x115c
 *(.stabstr)
 .stabstr       0x0000000000000000     0x115c main.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 main.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000011       0x12 ../../../lib/lcd/lcd.o
 .comment       0x0000000000000011       0x12 ../../../lib/uart/uart.o

.note.gnu.avr.deviceinfo
                0x0000000000000000       0x3c
 .note.gnu.avr.deviceinfo
                0x0000000000000000       0x3c /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o

.note.gnu.build-id
 *(.note.gnu.build-id)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info     0x0000000000000000      0x780
 *(.debug_info .gnu.linkonce.wi.*)
 .debug_info    0x0000000000000000      0x780 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o

.debug_abbrev   0x0000000000000000      0x718
 *(.debug_abbrev)
 .debug_abbrev  0x0000000000000000      0x718 /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o

.debug_line     0x0000000000000000       0x1d
 *(.debug_line .debug_line.* .debug_line_end)
 .debug_line    0x0000000000000000       0x1d /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o

.debug_frame
 *(.debug_frame)

.debug_str      0x0000000000000000      0x27d
 *(.debug_str)
 .debug_str     0x0000000000000000      0x27d /usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/../../../../avr/lib/avr51/crtatmega128.o

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(main.elf elf32-avr)
LOAD linker stubs
