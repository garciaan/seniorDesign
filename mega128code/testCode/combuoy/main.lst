
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000d00  00000d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  00000d9e  2**0
                  ALLOC
  3 .stab         00001c44  00000000  00000000  00000da0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013e9  00000000  00000000  000029e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003dcd  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003de0  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00003e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  0000459c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00004cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00004cd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 8b 03 	call	0x716	; 0x716 <main>
  c6:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <init_esc>:

    return 0;
}

void init_esc(){
    PORTB |= (1 << 4);
  ce:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e6       	ldi	r24, 0x6F	; 111
  d2:	97 e1       	ldi	r25, 0x17	; 23
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <init_esc+0x6>
  d8:	00 c0       	rjmp	.+0      	; 0xda <init_esc+0xc>
  da:	00 00       	nop
    _delay_us(STOP);
    PORTB &= ~(1 << 4);
  dc:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	9f ef       	ldi	r25, 0xFF	; 255
  e0:	23 ed       	ldi	r18, 0xD3	; 211
  e2:	80 e3       	ldi	r24, 0x30	; 48
  e4:	91 50       	subi	r25, 0x01	; 1
  e6:	20 40       	sbci	r18, 0x00	; 0
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <init_esc+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <init_esc+0x20>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <set_16bitPWM1>:
    _delay_ms(1000);
}

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
  f2:	8f b5       	in	r24, 0x2f	; 47
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
  f8:	8f b5       	in	r24, 0x2f	; 47
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
  fe:	8f b5       	in	r24, 0x2f	; 47
 100:	88 60       	ori	r24, 0x08	; 8
 102:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
 104:	8f b5       	in	r24, 0x2f	; 47
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
 10a:	8e b5       	in	r24, 0x2e	; 46
 10c:	88 61       	ori	r24, 0x18	; 24
 10e:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
 110:	8e b5       	in	r24, 0x2e	; 46
 112:	82 60       	ori	r24, 0x02	; 2
 114:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
 116:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
 118:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	3d bd       	out	0x2d, r19	; 45
 120:	2c bd       	out	0x2c, r18	; 44
    sei();
 122:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
 124:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	9f ef       	ldi	r25, 0xFF	; 255
 12a:	97 bd       	out	0x27, r25	; 39
 12c:	86 bd       	out	0x26, r24	; 38
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	81 ee       	ldi	r24, 0xE1	; 225
 132:	94 e0       	ldi	r25, 0x04	; 4
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <set_16bitPWM1+0x42>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <set_16bitPWM1+0x4c>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <TIM16_WriteTCNT1>:
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
 142:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
 144:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
 146:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
 148:	3d bd       	out	0x2d, r19	; 45
 14a:	2c bd       	out	0x2c, r18	; 44
    sei();
 14c:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
 14e:	9f bf       	out	0x3f, r25	; 63
 150:	08 95       	ret

00000152 <USART_Init>:
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
 152:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
 156:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 15a:	88 e1       	ldi	r24, 0x18	; 24
 15c:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 1stop bit */ 
    UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	80 93 9d 00 	sts	0x009D, r24
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	94 e0       	ldi	r25, 0x04	; 4
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <USART_Init+0x1a>
 174:	00 c0       	rjmp	.+0      	; 0x176 <USART_Init+0x24>
 176:	00 00       	nop
 178:	08 95       	ret

0000017a <USART_Transmit>:

    _delay_ms(100);
}
void USART_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 17a:	90 91 9b 00 	lds	r25, 0x009B
 17e:	95 ff       	sbrs	r25, 5
 180:	fc cf       	rjmp	.-8      	; 0x17a <USART_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 182:	80 93 9c 00 	sts	0x009C, r24
 186:	08 95       	ret

00000188 <USART_send_string>:
}

void USART_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 188:	fc 01       	movw	r30, r24
 18a:	20 81       	ld	r18, Z
 18c:	22 23       	and	r18, r18
 18e:	51 f0       	breq	.+20     	; 0x1a4 <USART_send_string+0x1c>
 190:	31 96       	adiw	r30, 0x01	; 1

    _delay_ms(100);
}
void USART_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 192:	90 91 9b 00 	lds	r25, 0x009B
 196:	95 ff       	sbrs	r25, 5
 198:	fc cf       	rjmp	.-8      	; 0x192 <USART_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 19a:	20 93 9c 00 	sts	0x009C, r18
}

void USART_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 19e:	21 91       	ld	r18, Z+
 1a0:	21 11       	cpse	r18, r1
 1a2:	f7 cf       	rjmp	.-18     	; 0x192 <USART_send_string+0xa>
 1a4:	08 95       	ret

000001a6 <USART_Receive>:
        USART_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART_Receive(void){
 1a6:	80 e5       	ldi	r24, 0x50	; 80
 1a8:	93 ec       	ldi	r25, 0xC3	; 195
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <USART_Receive+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	20 ea       	ldi	r18, 0xA0	; 160
 1ae:	2a 95       	dec	r18
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <USART_Receive+0x8>
 1b2:	01 97       	sbiw	r24, 0x01	; 1
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout) {
 1b4:	39 f0       	breq	.+14     	; 0x1c4 <USART_Receive+0x1e>
        if((UCSR1A & (1<<RXC1))){
 1b6:	20 91 9b 00 	lds	r18, 0x009B
 1ba:	27 ff       	sbrs	r18, 7
 1bc:	f7 cf       	rjmp	.-18     	; 0x1ac <USART_Receive+0x6>
            /* Get and return received data from buffer */ 
            return UDR1;
 1be:	80 91 9c 00 	lds	r24, 0x009C
 1c2:	08 95       	ret
        --timeout;
    }
    //while (!(UCSR1A & (1 << RXC1))){
    //}

    return 255;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
}
 1c6:	08 95       	ret

000001c8 <USART_Receive_String>:

void USART_Receive_String(unsigned char *str){
 1c8:	dc 01       	movw	r26, r24
    int i = 0;
    unsigned char c;

    str[0] = 50;
 1ca:	82 e3       	ldi	r24, 0x32	; 50
 1cc:	8c 93       	st	X, r24
    str[1] = 50;
 1ce:	11 96       	adiw	r26, 0x01	; 1
 1d0:	8c 93       	st	X, r24
 1d2:	11 97       	sbiw	r26, 0x01	; 1
    str[2] = 50;
 1d4:	12 96       	adiw	r26, 0x02	; 2
 1d6:	8c 93       	st	X, r24
 1d8:	12 97       	sbiw	r26, 0x02	; 2
    str[3] = '\0';
 1da:	13 96       	adiw	r26, 0x03	; 3
 1dc:	1c 92       	st	X, r1
 1de:	13 97       	sbiw	r26, 0x03	; 3
 1e0:	fd 01       	movw	r30, r26

    return 255;
}

void USART_Receive_String(unsigned char *str){
    int i = 0;
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	20 e5       	ldi	r18, 0x50	; 80
 1e8:	33 ec       	ldi	r19, 0xC3	; 195
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <USART_Receive_String+0x30>
 1ec:	80 ea       	ldi	r24, 0xA0	; 160
 1ee:	8a 95       	dec	r24
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <USART_Receive_String+0x26>
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	31 09       	sbc	r19, r1

unsigned char USART_Receive(void){
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout) {
 1f6:	b9 f0       	breq	.+46     	; 0x226 <USART_Receive_String+0x5e>
        if((UCSR1A & (1<<RXC1))){
 1f8:	90 91 9b 00 	lds	r25, 0x009B
 1fc:	97 ff       	sbrs	r25, 7
 1fe:	f6 cf       	rjmp	.-20     	; 0x1ec <USART_Receive_String+0x24>
            /* Get and return received data from buffer */ 
            return UDR1;
 200:	90 91 9c 00 	lds	r25, 0x009C

    str[0] = 50;
    str[1] = 50;
    str[2] = 50;
    str[3] = '\0';
    while ((c = (unsigned char)USART_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 204:	9e 37       	cpi	r25, 0x7E	; 126
 206:	59 f0       	breq	.+22     	; 0x21e <USART_Receive_String+0x56>
        if (c == 255){
 208:	9f 3f       	cpi	r25, 0xFF	; 255
 20a:	61 f0       	breq	.+24     	; 0x224 <USART_Receive_String+0x5c>
            //str[1] = 50;
            //str[2] = 50;
            //str[3] = '\0';
            return;
        }
        str[i] = c;
 20c:	91 93       	st	Z+, r25
        //char2lcd(c);
        //string2lcd(str);
        ++i;
 20e:	4f 5f       	subi	r20, 0xFF	; 255
 210:	5f 4f       	sbci	r21, 0xFF	; 255
        if (i >= MAX_STRING_SIZE){
 212:	44 30       	cpi	r20, 0x04	; 4
 214:	51 05       	cpc	r21, r1
 216:	39 f7       	brne	.-50     	; 0x1e6 <USART_Receive_String+0x1e>
            str[MAX_STRING_SIZE - 1] = '\0';
 218:	13 96       	adiw	r26, 0x03	; 3
 21a:	1c 92       	st	X, r1

            return;
 21c:	08 95       	ret
        }
    }
    str[i] = '\0';
 21e:	a4 0f       	add	r26, r20
 220:	b5 1f       	adc	r27, r21
 222:	1c 92       	st	X, r1
 224:	08 95       	ret
 226:	08 95       	ret

00000228 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
 228:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
 22c:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 22e:	88 e1       	ldi	r24, 0x18	; 24
 230:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 1stop bit */ 
    UCSR0C = (3<<UCSZ00);
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	80 93 95 00 	sts	0x0095, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	81 ee       	ldi	r24, 0xE1	; 225
 23c:	94 e0       	ldi	r25, 0x04	; 4
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <USART0_Init+0x16>
 246:	00 c0       	rjmp	.+0      	; 0x248 <USART0_Init+0x20>
 248:	00 00       	nop
 24a:	08 95       	ret

0000024c <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
 24c:	5d 9b       	sbis	0x0b, 5	; 11
 24e:	fe cf       	rjmp	.-4      	; 0x24c <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
 250:	8c b9       	out	0x0c, r24	; 12
 252:	08 95       	ret

00000254 <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
 254:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
 256:	90 81       	ld	r25, Z
 258:	99 23       	and	r25, r25
 25a:	39 f0       	breq	.+14     	; 0x26a <USART0_send_string+0x16>
 25c:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
 25e:	5d 9b       	sbis	0x0b, 5	; 11
 260:	fe cf       	rjmp	.-4      	; 0x25e <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
 262:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 264:	91 91       	ld	r25, Z+
 266:	91 11       	cpse	r25, r1
 268:	fa cf       	rjmp	.-12     	; 0x25e <USART0_send_string+0xa>
 26a:	08 95       	ret

0000026c <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
 26c:	80 e5       	ldi	r24, 0x50	; 80
 26e:	93 ec       	ldi	r25, 0xC3	; 195
 270:	06 c0       	rjmp	.+12     	; 0x27e <USART0_Receive+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	25 e3       	ldi	r18, 0x35	; 53
 274:	2a 95       	dec	r18
 276:	f1 f7       	brne	.-4      	; 0x274 <USART0_Receive+0x8>
 278:	00 00       	nop
 27a:	01 97       	sbiw	r24, 0x01	; 1
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout > 0) {
 27c:	21 f0       	breq	.+8      	; 0x286 <USART0_Receive+0x1a>
        if((UCSR0A & (1<<RXC0))){
 27e:	5f 9b       	sbis	0x0b, 7	; 11
 280:	f8 cf       	rjmp	.-16     	; 0x272 <USART0_Receive+0x6>
            /* Get and return received data from buffer */ 
            return UDR0;
 282:	8c b1       	in	r24, 0x0c	; 12
 284:	08 95       	ret
        //clear_display();
        //string2lcd((unsigned char *)utoa((unsigned int)timeout,buffer,10));
        _delay_us(10);
        --timeout;
    }
    return 255;
 286:	8f ef       	ldi	r24, 0xFF	; 255
}
 288:	08 95       	ret

0000028a <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
 28a:	dc 01       	movw	r26, r24
 28c:	fc 01       	movw	r30, r24
    int i = 0;
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	20 e5       	ldi	r18, 0x50	; 80
 294:	33 ec       	ldi	r19, 0xC3	; 195
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <USART0_Receive_String+0x1c>
 298:	85 e3       	ldi	r24, 0x35	; 53
 29a:	8a 95       	dec	r24
 29c:	f1 f7       	brne	.-4      	; 0x29a <USART0_Receive_String+0x10>
 29e:	00 00       	nop
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	31 09       	sbc	r19, r1

unsigned char USART0_Receive(void){
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout > 0) {
 2a4:	81 f0       	breq	.+32     	; 0x2c6 <USART0_Receive_String+0x3c>
        if((UCSR0A & (1<<RXC0))){
 2a6:	5f 9b       	sbis	0x0b, 7	; 11
 2a8:	f7 cf       	rjmp	.-18     	; 0x298 <USART0_Receive_String+0xe>
            /* Get and return received data from buffer */ 
            return UDR0;
 2aa:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 2ac:	9e 37       	cpi	r25, 0x7E	; 126
 2ae:	b1 f0       	breq	.+44     	; 0x2dc <USART0_Receive_String+0x52>
        if (c == 255){
 2b0:	9f 3f       	cpi	r25, 0xFF	; 255
 2b2:	49 f0       	breq	.+18     	; 0x2c6 <USART0_Receive_String+0x3c>
            str[1] = 50;
            str[2] = 50;
            str[3] = '\0';
            return;
        }
        str[i] = c;
 2b4:	91 93       	st	Z+, r25
        //char2lcd(c);
        //string2lcd(str);
        ++i;
 2b6:	4f 5f       	subi	r20, 0xFF	; 255
 2b8:	5f 4f       	sbci	r21, 0xFF	; 255
        if (i >= MAX_STRING_SIZE){
 2ba:	44 30       	cpi	r20, 0x04	; 4
 2bc:	51 05       	cpc	r21, r1
 2be:	49 f7       	brne	.-46     	; 0x292 <USART0_Receive_String+0x8>
            str[MAX_STRING_SIZE - 1] = '\0';
 2c0:	13 96       	adiw	r26, 0x03	; 3
 2c2:	1c 92       	st	X, r1

            return;
 2c4:	08 95       	ret
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255){
            str[0] = 50;
 2c6:	82 e3       	ldi	r24, 0x32	; 50
 2c8:	8c 93       	st	X, r24
            str[1] = 50;
 2ca:	11 96       	adiw	r26, 0x01	; 1
 2cc:	8c 93       	st	X, r24
 2ce:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
 2d0:	12 96       	adiw	r26, 0x02	; 2
 2d2:	8c 93       	st	X, r24
 2d4:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = '\0';
 2d6:	13 96       	adiw	r26, 0x03	; 3
 2d8:	1c 92       	st	X, r1
 2da:	08 95       	ret
            str[MAX_STRING_SIZE - 1] = '\0';

            return;
        }
    }
    str[i] = '\0';
 2dc:	a4 0f       	add	r26, r20
 2de:	b5 1f       	adc	r27, r21
 2e0:	1c 92       	st	X, r1
 2e2:	08 95       	ret

000002e4 <strobe_lcd>:

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 2e4:	e2 e6       	ldi	r30, 0x62	; 98
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	88 60       	ori	r24, 0x08	; 8
 2ec:	80 83       	st	Z, r24
    PORTF &= ~0x08;
 2ee:	80 81       	ld	r24, Z
 2f0:	87 7f       	andi	r24, 0xF7	; 247
 2f2:	80 83       	st	Z, r24
 2f4:	08 95       	ret

000002f6 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2f6:	77 9b       	sbis	0x0e, 7	; 14
 2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <clear_display>
    SPDR = 0x00;    //command, not data
 2fa:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2fc:	77 9b       	sbis	0x0e, 7	; 14
 2fe:	fe cf       	rjmp	.-4      	; 0x2fc <clear_display+0x6>
    SPDR = 0x01;    //clear display command
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 304:	77 9b       	sbis	0x0e, 7	; 14
 306:	fe cf       	rjmp	.-4      	; 0x304 <clear_display+0xe>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 308:	80 91 62 00 	lds	r24, 0x0062
 30c:	88 60       	ori	r24, 0x08	; 8
 30e:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 312:	80 91 62 00 	lds	r24, 0x0062
 316:	87 7f       	andi	r24, 0xF7	; 247
 318:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31c:	8f e9       	ldi	r24, 0x9F	; 159
 31e:	98 e2       	ldi	r25, 0x28	; 40
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <clear_display+0x2a>
 324:	00 c0       	rjmp	.+0      	; 0x326 <clear_display+0x30>
 326:	00 00       	nop
 328:	08 95       	ret

0000032a <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 32a:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 32c:	77 9b       	sbis	0x0e, 7	; 14
 32e:	fe cf       	rjmp	.-4      	; 0x32c <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
 330:	80 ec       	ldi	r24, 0xC0	; 192
 332:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 334:	77 9b       	sbis	0x0e, 7	; 14
 336:	fe cf       	rjmp	.-4      	; 0x334 <home_line2+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 338:	80 91 62 00 	lds	r24, 0x0062
 33c:	88 60       	ori	r24, 0x08	; 8
 33e:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 342:	80 91 62 00 	lds	r24, 0x0062
 346:	87 7f       	andi	r24, 0xF7	; 247
 348:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34c:	85 ec       	ldi	r24, 0xC5	; 197
 34e:	8a 95       	dec	r24
 350:	f1 f7       	brne	.-4      	; 0x34e <home_line2+0x24>
 352:	00 00       	nop
 354:	08 95       	ret

00000356 <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 35a:	77 9b       	sbis	0x0e, 7	; 14
 35c:	fe cf       	rjmp	.-4      	; 0x35a <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
 35e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 360:	77 9b       	sbis	0x0e, 7	; 14
 362:	fe cf       	rjmp	.-4      	; 0x360 <char2lcd+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 364:	80 91 62 00 	lds	r24, 0x0062
 368:	88 60       	ori	r24, 0x08	; 8
 36a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 36e:	80 91 62 00 	lds	r24, 0x0062
 372:	87 7f       	andi	r24, 0xF7	; 247
 374:	80 93 62 00 	sts	0x0062, r24
 378:	85 ec       	ldi	r24, 0xC5	; 197
 37a:	8a 95       	dec	r24
 37c:	f1 f7       	brne	.-4      	; 0x37a <char2lcd+0x24>
 37e:	00 00       	nop
 380:	08 95       	ret

00000382 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	fc 01       	movw	r30, r24
 388:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
 38e:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 390:	77 9b       	sbis	0x0e, 7	; 14
 392:	fe cf       	rjmp	.-4      	; 0x390 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
 394:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 396:	77 9b       	sbis	0x0e, 7	; 14
 398:	fe cf       	rjmp	.-4      	; 0x396 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
 39a:	8d 91       	ld	r24, X+
 39c:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 39e:	77 9b       	sbis	0x0e, 7	; 14
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <string2lcd+0x1c>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 3a2:	90 91 62 00 	lds	r25, 0x0062
 3a6:	98 60       	ori	r25, 0x08	; 8
 3a8:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
 3ac:	90 91 62 00 	lds	r25, 0x0062
 3b0:	97 7f       	andi	r25, 0xF7	; 247
 3b2:	90 93 62 00 	sts	0x0062, r25
 3b6:	85 ec       	ldi	r24, 0xC5	; 197
 3b8:	8a 95       	dec	r24
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <string2lcd+0x36>
 3bc:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
 3be:	4f 5f       	subi	r20, 0xFF	; 255
 3c0:	5f 4f       	sbci	r21, 0xFF	; 255
 3c2:	ef 01       	movw	r28, r30
 3c4:	09 90       	ld	r0, Y+
 3c6:	00 20       	and	r0, r0
 3c8:	e9 f7       	brne	.-6      	; 0x3c4 <string2lcd+0x42>
 3ca:	9e 01       	movw	r18, r28
 3cc:	2e 1b       	sub	r18, r30
 3ce:	3f 0b       	sbc	r19, r31
 3d0:	22 50       	subi	r18, 0x02	; 2
 3d2:	31 09       	sbc	r19, r1
 3d4:	24 17       	cp	r18, r20
 3d6:	35 07       	cpc	r19, r21
 3d8:	d8 f6       	brcc	.-74     	; 0x390 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
 3e0:	4f 92       	push	r4
 3e2:	5f 92       	push	r5
 3e4:	6f 92       	push	r6
 3e6:	7f 92       	push	r7
 3e8:	8f 92       	push	r8
 3ea:	9f 92       	push	r9
 3ec:	af 92       	push	r10
 3ee:	bf 92       	push	r11
 3f0:	cf 92       	push	r12
 3f2:	df 92       	push	r13
 3f4:	ef 92       	push	r14
 3f6:	ff 92       	push	r15
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
 404:	64 97       	sbiw	r28, 0x14	; 20
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	f8 94       	cli
 40a:	de bf       	out	0x3e, r29	; 62
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	cd bf       	out	0x3d, r28	; 61
 410:	69 8b       	std	Y+17, r22	; 0x11
 412:	7a 8b       	std	Y+18, r23	; 0x12
 414:	8b 8b       	std	Y+19, r24	; 0x13
 416:	9c 8b       	std	Y+20, r25	; 0x14
 418:	29 01       	movw	r4, r18
 41a:	3a 01       	movw	r6, r20
 41c:	47 01       	movw	r8, r14
 41e:	58 01       	movw	r10, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
 420:	20 e0       	ldi	r18, 0x00	; 0
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	40 ef       	ldi	r20, 0xF0	; 240
 426:	51 e4       	ldi	r21, 0x41	; 65
 428:	0e 94 8a 04 	call	0x914	; 0x914 <__cmpsf2>
 42c:	87 fd       	sbrc	r24, 7
 42e:	a2 c0       	rjmp	.+324    	; 0x574 <move+0x194>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	4c e8       	ldi	r20, 0x8C	; 140
 436:	52 e4       	ldi	r21, 0x42	; 66
 438:	69 89       	ldd	r22, Y+17	; 0x11
 43a:	7a 89       	ldd	r23, Y+18	; 0x12
 43c:	8b 89       	ldd	r24, Y+19	; 0x13
 43e:	9c 89       	ldd	r25, Y+20	; 0x14
 440:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__gesf2>
 444:	18 16       	cp	r1, r24
 446:	0c f0       	brlt	.+2      	; 0x44a <move+0x6a>
 448:	9a c0       	rjmp	.+308    	; 0x57e <move+0x19e>
 44a:	28 ef       	ldi	r18, 0xF8	; 248
 44c:	c2 2e       	mov	r12, r18
 44e:	2c e0       	ldi	r18, 0x0C	; 12
 450:	d2 2e       	mov	r13, r18
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	40 ef       	ldi	r20, 0xF0	; 240
 458:	51 e4       	ldi	r21, 0x41	; 65
 45a:	c3 01       	movw	r24, r6
 45c:	b2 01       	movw	r22, r4
 45e:	0e 94 8a 04 	call	0x914	; 0x914 <__cmpsf2>
 462:	87 fd       	sbrc	r24, 7
 464:	84 c0       	rjmp	.+264    	; 0x56e <move+0x18e>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	4c e8       	ldi	r20, 0x8C	; 140
 46c:	52 e4       	ldi	r21, 0x42	; 66
 46e:	c3 01       	movw	r24, r6
 470:	b2 01       	movw	r22, r4
 472:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__gesf2>
 476:	18 16       	cp	r1, r24
 478:	0c f0       	brlt	.+2      	; 0x47c <move+0x9c>
 47a:	a0 c0       	rjmp	.+320    	; 0x5bc <move+0x1dc>
 47c:	08 ef       	ldi	r16, 0xF8	; 248
 47e:	1c e0       	ldi	r17, 0x0C	; 12
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + SATURATE_DIFFERENCE)){
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	40 ef       	ldi	r20, 0xF0	; 240
 486:	51 e4       	ldi	r21, 0x41	; 65
 488:	c5 01       	movw	r24, r10
 48a:	b4 01       	movw	r22, r8
 48c:	0e 94 8a 04 	call	0x914	; 0x914 <__cmpsf2>
 490:	87 fd       	sbrc	r24, 7
 492:	65 c0       	rjmp	.+202    	; 0x55e <move+0x17e>
        z = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (z > (MAX_INPUT - SATURATE_DIFFERENCE)){
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	4c e8       	ldi	r20, 0x8C	; 140
 49a:	52 e4       	ldi	r21, 0x42	; 66
 49c:	c5 01       	movw	r24, r10
 49e:	b4 01       	movw	r22, r8
 4a0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__gesf2>
 4a4:	18 16       	cp	r1, r24
 4a6:	0c f0       	brlt	.+2      	; 0x4aa <move+0xca>
 4a8:	7e c0       	rjmp	.+252    	; 0x5a6 <move+0x1c6>
 4aa:	83 e3       	ldi	r24, 0x33	; 51
 4ac:	88 2e       	mov	r8, r24
 4ae:	98 2c       	mov	r9, r8
 4b0:	a8 2c       	mov	r10, r8
 4b2:	8f e3       	ldi	r24, 0x3F	; 63
 4b4:	b8 2e       	mov	r11, r24

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
 4b6:	66 b5       	in	r22, 0x26	; 38
 4b8:	77 b5       	in	r23, 0x27	; 39
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 30 05 	call	0xa60	; 0xa60 <__floatunsisf>
 4c2:	a5 01       	movw	r20, r10
 4c4:	94 01       	movw	r18, r8
 4c6:	0e 94 e7 05 	call	0xbce	; 0xbce <__mulsf3>
 4ca:	0e 94 01 05 	call	0xa02	; 0xa02 <__fixunssfsi>
    OCR1A = left_speed;
 4ce:	db bc       	out	0x2b, r13	; 43
 4d0:	ca bc       	out	0x2a, r12	; 42
    OCR1B = right_speed;
 4d2:	19 bd       	out	0x29, r17	; 41
 4d4:	08 bd       	out	0x28, r16	; 40
    OCR1C = z_speed;
 4d6:	70 93 79 00 	sts	0x0079, r23
 4da:	60 93 78 00 	sts	0x0078, r22
    
	unsigned char buffer[16];
    clear_display();
 4de:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <clear_display>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 4e2:	4a e0       	ldi	r20, 0x0A	; 10
 4e4:	be 01       	movw	r22, r28
 4e6:	6f 5f       	subi	r22, 0xFF	; 255
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	c6 01       	movw	r24, r12
 4ec:	0e 94 54 06 	call	0xca8	; 0xca8 <__utoa_ncheck>
	string2lcd((unsigned char *)utoa(left_speed,(char *)buffer,10));
 4f0:	0e 94 c1 01 	call	0x382	; 0x382 <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 4f4:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 4f6:	77 9b       	sbis	0x0e, 7	; 14
 4f8:	fe cf       	rjmp	.-4      	; 0x4f6 <move+0x116>
    SPDR = 0xC0;   // cursor go home on line 2
 4fa:	80 ec       	ldi	r24, 0xC0	; 192
 4fc:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 4fe:	77 9b       	sbis	0x0e, 7	; 14
 500:	fe cf       	rjmp	.-4      	; 0x4fe <move+0x11e>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 502:	80 91 62 00 	lds	r24, 0x0062
 506:	88 60       	ori	r24, 0x08	; 8
 508:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 50c:	80 91 62 00 	lds	r24, 0x0062
 510:	87 7f       	andi	r24, 0xF7	; 247
 512:	80 93 62 00 	sts	0x0062, r24
 516:	85 ec       	ldi	r24, 0xC5	; 197
 518:	8a 95       	dec	r24
 51a:	f1 f7       	brne	.-4      	; 0x518 <move+0x138>
 51c:	00 00       	nop
 51e:	4a e0       	ldi	r20, 0x0A	; 10
 520:	be 01       	movw	r22, r28
 522:	6f 5f       	subi	r22, 0xFF	; 255
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	c8 01       	movw	r24, r16
 528:	0e 94 54 06 	call	0xca8	; 0xca8 <__utoa_ncheck>
    
	unsigned char buffer[16];
    clear_display();
	string2lcd((unsigned char *)utoa(left_speed,(char *)buffer,10));
	home_line2();
	string2lcd((unsigned char *)utoa(right_speed,(char *)buffer,10));
 52c:	0e 94 c1 01 	call	0x382	; 0x382 <string2lcd>
    

}
 530:	64 96       	adiw	r28, 0x14	; 20
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	f8 94       	cli
 536:	de bf       	out	0x3e, r29	; 62
 538:	0f be       	out	0x3f, r0	; 63
 53a:	cd bf       	out	0x3d, r28	; 61
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	1f 91       	pop	r17
 542:	0f 91       	pop	r16
 544:	ff 90       	pop	r15
 546:	ef 90       	pop	r14
 548:	df 90       	pop	r13
 54a:	cf 90       	pop	r12
 54c:	bf 90       	pop	r11
 54e:	af 90       	pop	r10
 550:	9f 90       	pop	r9
 552:	8f 90       	pop	r8
 554:	7f 90       	pop	r7
 556:	6f 90       	pop	r6
 558:	5f 90       	pop	r5
 55a:	4f 90       	pop	r4
 55c:	08 95       	ret
 55e:	9a e9       	ldi	r25, 0x9A	; 154
 560:	89 2e       	mov	r8, r25
 562:	99 e9       	ldi	r25, 0x99	; 153
 564:	99 2e       	mov	r9, r25
 566:	a9 2c       	mov	r10, r9
 568:	9e e3       	ldi	r25, 0x3E	; 62
 56a:	b9 2e       	mov	r11, r25
 56c:	a4 cf       	rjmp	.-184    	; 0x4b6 <move+0xd6>
 56e:	08 e7       	ldi	r16, 0x78	; 120
 570:	1a e0       	ldi	r17, 0x0A	; 10
 572:	86 cf       	rjmp	.-244    	; 0x480 <move+0xa0>
 574:	38 e7       	ldi	r19, 0x78	; 120
 576:	c3 2e       	mov	r12, r19
 578:	3a e0       	ldi	r19, 0x0A	; 10
 57a:	d3 2e       	mov	r13, r19
 57c:	6a cf       	rjmp	.-300    	; 0x452 <move+0x72>
 57e:	20 e0       	ldi	r18, 0x00	; 0
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	40 e8       	ldi	r20, 0x80	; 128
 584:	51 e4       	ldi	r21, 0x41	; 65
 586:	69 89       	ldd	r22, Y+17	; 0x11
 588:	7a 89       	ldd	r23, Y+18	; 0x12
 58a:	8b 89       	ldd	r24, Y+19	; 0x13
 58c:	9c 89       	ldd	r25, Y+20	; 0x14
 58e:	0e 94 e7 05 	call	0xbce	; 0xbce <__mulsf3>
 592:	20 e0       	ldi	r18, 0x00	; 0
 594:	30 e8       	ldi	r19, 0x80	; 128
 596:	49 e0       	ldi	r20, 0x09	; 9
 598:	55 e4       	ldi	r21, 0x45	; 69
 59a:	0e 94 1e 04 	call	0x83c	; 0x83c <__addsf3>
 59e:	0e 94 01 05 	call	0xa02	; 0xa02 <__fixunssfsi>
 5a2:	6b 01       	movw	r12, r22
 5a4:	56 cf       	rjmp	.-340    	; 0x452 <move+0x72>
 5a6:	20 e0       	ldi	r18, 0x00	; 0
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	48 ec       	ldi	r20, 0xC8	; 200
 5ac:	52 e4       	ldi	r21, 0x42	; 66
 5ae:	c5 01       	movw	r24, r10
 5b0:	b4 01       	movw	r22, r8
 5b2:	0e 94 8f 04 	call	0x91e	; 0x91e <__divsf3>
 5b6:	4b 01       	movw	r8, r22
 5b8:	5c 01       	movw	r10, r24
 5ba:	7d cf       	rjmp	.-262    	; 0x4b6 <move+0xd6>
 5bc:	20 e0       	ldi	r18, 0x00	; 0
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	40 e8       	ldi	r20, 0x80	; 128
 5c2:	51 e4       	ldi	r21, 0x41	; 65
 5c4:	c3 01       	movw	r24, r6
 5c6:	b2 01       	movw	r22, r4
 5c8:	0e 94 e7 05 	call	0xbce	; 0xbce <__mulsf3>
 5cc:	20 e0       	ldi	r18, 0x00	; 0
 5ce:	30 e8       	ldi	r19, 0x80	; 128
 5d0:	49 e0       	ldi	r20, 0x09	; 9
 5d2:	55 e4       	ldi	r21, 0x45	; 69
 5d4:	0e 94 1e 04 	call	0x83c	; 0x83c <__addsf3>
 5d8:	0e 94 01 05 	call	0xa02	; 0xa02 <__fixunssfsi>
 5dc:	8b 01       	movw	r16, r22
 5de:	50 cf       	rjmp	.-352    	; 0x480 <move+0xa0>

000005e0 <spi_init>:
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 5e0:	e1 e6       	ldi	r30, 0x61	; 97
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	88 60       	ori	r24, 0x08	; 8
 5e8:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
 5ea:	88 b3       	in	r24, 0x18	; 24
 5ec:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 5ee:	87 b3       	in	r24, 0x17	; 23
 5f0:	87 60       	ori	r24, 0x07	; 7
 5f2:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 5f4:	80 e5       	ldi	r24, 0x50	; 80
 5f6:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	8e b9       	out	0x0e, r24	; 14
 5fc:	08 95       	ret

000005fe <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5fe:	8f e5       	ldi	r24, 0x5F	; 95
 600:	9a ee       	ldi	r25, 0xEA	; 234
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	f1 f7       	brne	.-4      	; 0x602 <lcd_init+0x4>
 606:	00 c0       	rjmp	.+0      	; 0x608 <lcd_init+0xa>
 608:	00 00       	nop
 60a:	23 e0       	ldi	r18, 0x03	; 3
 60c:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
 60e:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
 610:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 612:	77 9b       	sbis	0x0e, 7	; 14
 614:	fe cf       	rjmp	.-4      	; 0x612 <lcd_init+0x14>
        SPDR = 0x30;
 616:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 618:	77 9b       	sbis	0x0e, 7	; 14
 61a:	fe cf       	rjmp	.-4      	; 0x618 <lcd_init+0x1a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 61c:	80 91 62 00 	lds	r24, 0x0062
 620:	88 60       	ori	r24, 0x08	; 8
 622:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 626:	80 91 62 00 	lds	r24, 0x0062
 62a:	87 7f       	andi	r24, 0xF7	; 247
 62c:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 630:	85 ec       	ldi	r24, 0xC5	; 197
 632:	8a 95       	dec	r24
 634:	f1 f7       	brne	.-4      	; 0x632 <lcd_init+0x34>
 636:	00 00       	nop
 638:	21 50       	subi	r18, 0x01	; 1
 63a:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
 63c:	49 f7       	brne	.-46     	; 0x610 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
 63e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 640:	77 9b       	sbis	0x0e, 7	; 14
 642:	fe cf       	rjmp	.-4      	; 0x640 <lcd_init+0x42>
    SPDR = 0x38;
 644:	88 e3       	ldi	r24, 0x38	; 56
 646:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 648:	77 9b       	sbis	0x0e, 7	; 14
 64a:	fe cf       	rjmp	.-4      	; 0x648 <lcd_init+0x4a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 64c:	80 91 62 00 	lds	r24, 0x0062
 650:	88 60       	ori	r24, 0x08	; 8
 652:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 656:	80 91 62 00 	lds	r24, 0x0062
 65a:	87 7f       	andi	r24, 0xF7	; 247
 65c:	80 93 62 00 	sts	0x0062, r24
 660:	95 ec       	ldi	r25, 0xC5	; 197
 662:	9a 95       	dec	r25
 664:	f1 f7       	brne	.-4      	; 0x662 <lcd_init+0x64>
 666:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 668:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 66a:	77 9b       	sbis	0x0e, 7	; 14
 66c:	fe cf       	rjmp	.-4      	; 0x66a <lcd_init+0x6c>
    SPDR = 0x08;
 66e:	88 e0       	ldi	r24, 0x08	; 8
 670:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 672:	77 9b       	sbis	0x0e, 7	; 14
 674:	fe cf       	rjmp	.-4      	; 0x672 <lcd_init+0x74>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 676:	80 91 62 00 	lds	r24, 0x0062
 67a:	88 60       	ori	r24, 0x08	; 8
 67c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 680:	80 91 62 00 	lds	r24, 0x0062
 684:	87 7f       	andi	r24, 0xF7	; 247
 686:	80 93 62 00 	sts	0x0062, r24
 68a:	85 ec       	ldi	r24, 0xC5	; 197
 68c:	8a 95       	dec	r24
 68e:	f1 f7       	brne	.-4      	; 0x68c <lcd_init+0x8e>
 690:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 692:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 694:	77 9b       	sbis	0x0e, 7	; 14
 696:	fe cf       	rjmp	.-4      	; 0x694 <lcd_init+0x96>
    SPDR = 0x01;
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 69c:	77 9b       	sbis	0x0e, 7	; 14
 69e:	fe cf       	rjmp	.-4      	; 0x69c <lcd_init+0x9e>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 6a0:	80 91 62 00 	lds	r24, 0x0062
 6a4:	88 60       	ori	r24, 0x08	; 8
 6a6:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 6aa:	80 91 62 00 	lds	r24, 0x0062
 6ae:	87 7f       	andi	r24, 0xF7	; 247
 6b0:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6b4:	8f ef       	ldi	r24, 0xFF	; 255
 6b6:	98 e1       	ldi	r25, 0x18	; 24
 6b8:	01 97       	sbiw	r24, 0x01	; 1
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <lcd_init+0xba>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <lcd_init+0xc0>
 6be:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
 6c0:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 6c2:	77 9b       	sbis	0x0e, 7	; 14
 6c4:	fe cf       	rjmp	.-4      	; 0x6c2 <lcd_init+0xc4>
    SPDR = 0x06;
 6c6:	86 e0       	ldi	r24, 0x06	; 6
 6c8:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 6ca:	77 9b       	sbis	0x0e, 7	; 14
 6cc:	fe cf       	rjmp	.-4      	; 0x6ca <lcd_init+0xcc>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 6ce:	80 91 62 00 	lds	r24, 0x0062
 6d2:	88 60       	ori	r24, 0x08	; 8
 6d4:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 6d8:	80 91 62 00 	lds	r24, 0x0062
 6dc:	87 7f       	andi	r24, 0xF7	; 247
 6de:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6e2:	95 ec       	ldi	r25, 0xC5	; 197
 6e4:	9a 95       	dec	r25
 6e6:	f1 f7       	brne	.-4      	; 0x6e4 <lcd_init+0xe6>
 6e8:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 6ea:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 6ec:	77 9b       	sbis	0x0e, 7	; 14
 6ee:	fe cf       	rjmp	.-4      	; 0x6ec <lcd_init+0xee>
    SPDR = 0x0E;
 6f0:	8e e0       	ldi	r24, 0x0E	; 14
 6f2:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 6f4:	77 9b       	sbis	0x0e, 7	; 14
 6f6:	fe cf       	rjmp	.-4      	; 0x6f4 <lcd_init+0xf6>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 6f8:	80 91 62 00 	lds	r24, 0x0062
 6fc:	88 60       	ori	r24, 0x08	; 8
 6fe:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 702:	80 91 62 00 	lds	r24, 0x0062
 706:	87 7f       	andi	r24, 0xF7	; 247
 708:	80 93 62 00 	sts	0x0062, r24
 70c:	85 ec       	ldi	r24, 0xC5	; 197
 70e:	8a 95       	dec	r24
 710:	f1 f7       	brne	.-4      	; 0x70e <lcd_init+0x110>
 712:	00 00       	nop
 714:	08 95       	ret

00000716 <main>:
void init_esc();

uint8_t temp, read_byte;


int main(void){
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	00 d0       	rcall	.+0      	; 0x71c <main+0x6>
 71c:	00 d0       	rcall	.+0      	; 0x71e <main+0x8>
 71e:	cd b7       	in	r28, 0x3d	; 61
 720:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0xFF;
 722:	8f ef       	ldi	r24, 0xFF	; 255
 724:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
 726:	18 ba       	out	0x18, r1	; 24
    DDRD = 0x00 | (1 << 2);
 728:	84 e0       	ldi	r24, 0x04	; 4
 72a:	81 bb       	out	0x11, r24	; 17
    [3] == reserved for string terminator
    */
    unsigned char buffer[MAX_STRING_SIZE]; 
    int i;
    for (i = 0; i < 4; ++i){
        buffer[i] = ' ';
 72c:	80 e2       	ldi	r24, 0x20	; 32
 72e:	89 83       	std	Y+1, r24	; 0x01
 730:	8a 83       	std	Y+2, r24	; 0x02
 732:	8b 83       	std	Y+3, r24	; 0x03
 734:	8c 83       	std	Y+4, r24	; 0x04
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 736:	80 91 61 00 	lds	r24, 0x0061
 73a:	88 60       	ori	r24, 0x08	; 8
 73c:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initalization for SPI
 740:	88 b3       	in	r24, 0x18	; 24
 742:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 744:	87 b3       	in	r24, 0x17	; 23
 746:	87 60       	ori	r24, 0x07	; 7
 748:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 74a:	80 e5       	ldi	r24, 0x50	; 80
 74c:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	8e b9       	out	0x0e, r24	; 14
    for (i = 0; i < 4; ++i){
        buffer[i] = ' ';
    }

    spi_init();
    lcd_init();
 752:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd_init>

    //Wait for S1 to be pressed before doing anything, remove this eventually
    string2lcd((unsigned char *)"Press S1");
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	91 e0       	ldi	r25, 0x01	; 1
 75a:	0e 94 c1 01 	call	0x382	; 0x382 <string2lcd>
	while (((PIND) & (1 << 0)));
 75e:	80 99       	sbic	0x10, 0	; 16
 760:	fe cf       	rjmp	.-4      	; 0x75e <main+0x48>
	clear_display();
 762:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <clear_display>

    return 0;
}

void init_esc(){
    PORTB |= (1 << 4);
 766:	c4 9a       	sbi	0x18, 4	; 24
 768:	8f e6       	ldi	r24, 0x6F	; 111
 76a:	97 e1       	ldi	r25, 0x17	; 23
 76c:	01 97       	sbiw	r24, 0x01	; 1
 76e:	f1 f7       	brne	.-4      	; 0x76c <main+0x56>
 770:	00 c0       	rjmp	.+0      	; 0x772 <main+0x5c>
 772:	00 00       	nop
    _delay_us(STOP);
    PORTB &= ~(1 << 4);
 774:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 776:	9f ef       	ldi	r25, 0xFF	; 255
 778:	23 ed       	ldi	r18, 0xD3	; 211
 77a:	30 e3       	ldi	r19, 0x30	; 48
 77c:	91 50       	subi	r25, 0x01	; 1
 77e:	20 40       	sbci	r18, 0x00	; 0
 780:	30 40       	sbci	r19, 0x00	; 0
 782:	e1 f7       	brne	.-8      	; 0x77c <main+0x66>
 784:	00 c0       	rjmp	.+0      	; 0x786 <main+0x70>
 786:	00 00       	nop
    string2lcd((unsigned char *)"Press S1");
	while (((PIND) & (1 << 0)));
	clear_display();

	init_esc();
    set_16bitPWM1();
 788:	0e 94 79 00 	call	0xf2	; 0xf2 <set_16bitPWM1>
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
 78c:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = (unsigned char)ubrr;
 790:	27 e6       	ldi	r18, 0x67	; 103
 792:	20 93 99 00 	sts	0x0099, r18
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 796:	98 e1       	ldi	r25, 0x18	; 24
 798:	90 93 9a 00 	sts	0x009A, r25
    /* Set frame format: 8data, 1stop bit */ 
    UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
 79c:	86 e0       	ldi	r24, 0x06	; 6
 79e:	80 93 9d 00 	sts	0x009D, r24
 7a2:	4f ef       	ldi	r20, 0xFF	; 255
 7a4:	51 ee       	ldi	r21, 0xE1	; 225
 7a6:	34 e0       	ldi	r19, 0x04	; 4
 7a8:	41 50       	subi	r20, 0x01	; 1
 7aa:	50 40       	sbci	r21, 0x00	; 0
 7ac:	30 40       	sbci	r19, 0x00	; 0
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <main+0x92>
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <main+0x9c>
 7b2:	00 00       	nop
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
 7b4:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = (unsigned char)ubrr;
 7b8:	29 b9       	out	0x09, r18	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 7ba:	9a b9       	out	0x0a, r25	; 10
    /* Set frame format: 8data, 1stop bit */ 
    UCSR0C = (3<<UCSZ00);
 7bc:	80 93 95 00 	sts	0x0095, r24
 7c0:	4f ef       	ldi	r20, 0xFF	; 255
 7c2:	51 ee       	ldi	r21, 0xE1	; 225
 7c4:	84 e0       	ldi	r24, 0x04	; 4
 7c6:	41 50       	subi	r20, 0x01	; 1
 7c8:	50 40       	sbci	r21, 0x00	; 0
 7ca:	80 40       	sbci	r24, 0x00	; 0
 7cc:	e1 f7       	brne	.-8      	; 0x7c6 <main+0xb0>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <main+0xba>
 7d0:	00 00       	nop
 7d2:	9f ef       	ldi	r25, 0xFF	; 255
 7d4:	21 ee       	ldi	r18, 0xE1	; 225
 7d6:	34 e0       	ldi	r19, 0x04	; 4
 7d8:	91 50       	subi	r25, 0x01	; 1
 7da:	20 40       	sbci	r18, 0x00	; 0
 7dc:	30 40       	sbci	r19, 0x00	; 0
 7de:	e1 f7       	brne	.-8      	; 0x7d8 <main+0xc2>
 7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <main+0xcc>
 7e2:	00 00       	nop
    USART0_Init(MYUBRR);
    _delay_ms(100);
    unsigned char c;
    while(1){

        USART0_Receive_String(buffer);
 7e4:	ce 01       	movw	r24, r28
 7e6:	01 96       	adiw	r24, 0x01	; 1
 7e8:	0e 94 45 01 	call	0x28a	; 0x28a <USART0_Receive_String>
        if (buffer[0] == 0 && buffer[1] == 0 && buffer[2] == 0 && buffer[3] == 0){
 7ec:	89 81       	ldd	r24, Y+1	; 0x01
 7ee:	81 11       	cpse	r24, r1
 7f0:	09 c0       	rjmp	.+18     	; 0x804 <main+0xee>
 7f2:	8a 81       	ldd	r24, Y+2	; 0x02
 7f4:	81 11       	cpse	r24, r1
 7f6:	06 c0       	rjmp	.+12     	; 0x804 <main+0xee>
 7f8:	8b 81       	ldd	r24, Y+3	; 0x03
 7fa:	81 11       	cpse	r24, r1
 7fc:	03 c0       	rjmp	.+6      	; 0x804 <main+0xee>
 7fe:	8c 81       	ldd	r24, Y+4	; 0x04
 800:	88 23       	and	r24, r24
 802:	81 f3       	breq	.-32     	; 0x7e4 <main+0xce>
            continue;
        }
        clear_display();
 804:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <clear_display>
        string2lcd(buffer);
 808:	ce 01       	movw	r24, r28
 80a:	01 96       	adiw	r24, 0x01	; 1
 80c:	0e 94 c1 01 	call	0x382	; 0x382 <string2lcd>
    UDR0 = data;
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 810:	89 81       	ldd	r24, Y+1	; 0x01
 812:	88 23       	and	r24, r24
 814:	41 f0       	breq	.+16     	; 0x826 <main+0x110>
 816:	fe 01       	movw	r30, r28
 818:	32 96       	adiw	r30, 0x02	; 2
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
 81a:	5d 9b       	sbis	0x0b, 5	; 11
 81c:	fe cf       	rjmp	.-4      	; 0x81a <main+0x104>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
 81e:	8c b9       	out	0x0c, r24	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 820:	81 91       	ld	r24, Z+
 822:	81 11       	cpse	r24, r1
 824:	fa cf       	rjmp	.-12     	; 0x81a <main+0x104>
 826:	4f ef       	ldi	r20, 0xFF	; 255
 828:	59 ef       	ldi	r21, 0xF9	; 249
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	41 50       	subi	r20, 0x01	; 1
 82e:	50 40       	sbci	r21, 0x00	; 0
 830:	80 40       	sbci	r24, 0x00	; 0
 832:	e1 f7       	brne	.-8      	; 0x82c <main+0x116>
 834:	00 c0       	rjmp	.+0      	; 0x836 <main+0x120>
 836:	00 00       	nop
 838:	d5 cf       	rjmp	.-86     	; 0x7e4 <main+0xce>

0000083a <__subsf3>:
 83a:	50 58       	subi	r21, 0x80	; 128

0000083c <__addsf3>:
 83c:	bb 27       	eor	r27, r27
 83e:	aa 27       	eor	r26, r26
 840:	0e 94 35 04 	call	0x86a	; 0x86a <__addsf3x>
 844:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_round>
 848:	0e 94 9a 05 	call	0xb34	; 0xb34 <__fp_pscA>
 84c:	38 f0       	brcs	.+14     	; 0x85c <__addsf3+0x20>
 84e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_pscB>
 852:	20 f0       	brcs	.+8      	; 0x85c <__addsf3+0x20>
 854:	39 f4       	brne	.+14     	; 0x864 <__addsf3+0x28>
 856:	9f 3f       	cpi	r25, 0xFF	; 255
 858:	19 f4       	brne	.+6      	; 0x860 <__addsf3+0x24>
 85a:	26 f4       	brtc	.+8      	; 0x864 <__addsf3+0x28>
 85c:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__fp_nan>
 860:	0e f4       	brtc	.+2      	; 0x864 <__addsf3+0x28>
 862:	e0 95       	com	r30
 864:	e7 fb       	bst	r30, 7
 866:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_inf>

0000086a <__addsf3x>:
 86a:	e9 2f       	mov	r30, r25
 86c:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fp_split3>
 870:	58 f3       	brcs	.-42     	; 0x848 <__addsf3+0xc>
 872:	ba 17       	cp	r27, r26
 874:	62 07       	cpc	r22, r18
 876:	73 07       	cpc	r23, r19
 878:	84 07       	cpc	r24, r20
 87a:	95 07       	cpc	r25, r21
 87c:	20 f0       	brcs	.+8      	; 0x886 <__addsf3x+0x1c>
 87e:	79 f4       	brne	.+30     	; 0x89e <__addsf3x+0x34>
 880:	a6 f5       	brtc	.+104    	; 0x8ea <__addsf3x+0x80>
 882:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_zero>
 886:	0e f4       	brtc	.+2      	; 0x88a <__addsf3x+0x20>
 888:	e0 95       	com	r30
 88a:	0b 2e       	mov	r0, r27
 88c:	ba 2f       	mov	r27, r26
 88e:	a0 2d       	mov	r26, r0
 890:	0b 01       	movw	r0, r22
 892:	b9 01       	movw	r22, r18
 894:	90 01       	movw	r18, r0
 896:	0c 01       	movw	r0, r24
 898:	ca 01       	movw	r24, r20
 89a:	a0 01       	movw	r20, r0
 89c:	11 24       	eor	r1, r1
 89e:	ff 27       	eor	r31, r31
 8a0:	59 1b       	sub	r21, r25
 8a2:	99 f0       	breq	.+38     	; 0x8ca <__addsf3x+0x60>
 8a4:	59 3f       	cpi	r21, 0xF9	; 249
 8a6:	50 f4       	brcc	.+20     	; 0x8bc <__addsf3x+0x52>
 8a8:	50 3e       	cpi	r21, 0xE0	; 224
 8aa:	68 f1       	brcs	.+90     	; 0x906 <__addsf3x+0x9c>
 8ac:	1a 16       	cp	r1, r26
 8ae:	f0 40       	sbci	r31, 0x00	; 0
 8b0:	a2 2f       	mov	r26, r18
 8b2:	23 2f       	mov	r18, r19
 8b4:	34 2f       	mov	r19, r20
 8b6:	44 27       	eor	r20, r20
 8b8:	58 5f       	subi	r21, 0xF8	; 248
 8ba:	f3 cf       	rjmp	.-26     	; 0x8a2 <__addsf3x+0x38>
 8bc:	46 95       	lsr	r20
 8be:	37 95       	ror	r19
 8c0:	27 95       	ror	r18
 8c2:	a7 95       	ror	r26
 8c4:	f0 40       	sbci	r31, 0x00	; 0
 8c6:	53 95       	inc	r21
 8c8:	c9 f7       	brne	.-14     	; 0x8bc <__addsf3x+0x52>
 8ca:	7e f4       	brtc	.+30     	; 0x8ea <__addsf3x+0x80>
 8cc:	1f 16       	cp	r1, r31
 8ce:	ba 0b       	sbc	r27, r26
 8d0:	62 0b       	sbc	r22, r18
 8d2:	73 0b       	sbc	r23, r19
 8d4:	84 0b       	sbc	r24, r20
 8d6:	ba f0       	brmi	.+46     	; 0x906 <__addsf3x+0x9c>
 8d8:	91 50       	subi	r25, 0x01	; 1
 8da:	a1 f0       	breq	.+40     	; 0x904 <__addsf3x+0x9a>
 8dc:	ff 0f       	add	r31, r31
 8de:	bb 1f       	adc	r27, r27
 8e0:	66 1f       	adc	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	c2 f7       	brpl	.-16     	; 0x8d8 <__addsf3x+0x6e>
 8e8:	0e c0       	rjmp	.+28     	; 0x906 <__addsf3x+0x9c>
 8ea:	ba 0f       	add	r27, r26
 8ec:	62 1f       	adc	r22, r18
 8ee:	73 1f       	adc	r23, r19
 8f0:	84 1f       	adc	r24, r20
 8f2:	48 f4       	brcc	.+18     	; 0x906 <__addsf3x+0x9c>
 8f4:	87 95       	ror	r24
 8f6:	77 95       	ror	r23
 8f8:	67 95       	ror	r22
 8fa:	b7 95       	ror	r27
 8fc:	f7 95       	ror	r31
 8fe:	9e 3f       	cpi	r25, 0xFE	; 254
 900:	08 f0       	brcs	.+2      	; 0x904 <__addsf3x+0x9a>
 902:	b0 cf       	rjmp	.-160    	; 0x864 <__addsf3+0x28>
 904:	93 95       	inc	r25
 906:	88 0f       	add	r24, r24
 908:	08 f0       	brcs	.+2      	; 0x90c <__addsf3x+0xa2>
 90a:	99 27       	eor	r25, r25
 90c:	ee 0f       	add	r30, r30
 90e:	97 95       	ror	r25
 910:	87 95       	ror	r24
 912:	08 95       	ret

00000914 <__cmpsf2>:
 914:	0e 94 6d 05 	call	0xada	; 0xada <__fp_cmp>
 918:	08 f4       	brcc	.+2      	; 0x91c <__cmpsf2+0x8>
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	08 95       	ret

0000091e <__divsf3>:
 91e:	0e 94 a3 04 	call	0x946	; 0x946 <__divsf3x>
 922:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_round>
 926:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_pscB>
 92a:	58 f0       	brcs	.+22     	; 0x942 <__divsf3+0x24>
 92c:	0e 94 9a 05 	call	0xb34	; 0xb34 <__fp_pscA>
 930:	40 f0       	brcs	.+16     	; 0x942 <__divsf3+0x24>
 932:	29 f4       	brne	.+10     	; 0x93e <__divsf3+0x20>
 934:	5f 3f       	cpi	r21, 0xFF	; 255
 936:	29 f0       	breq	.+10     	; 0x942 <__divsf3+0x24>
 938:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_inf>
 93c:	51 11       	cpse	r21, r1
 93e:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_szero>
 942:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__fp_nan>

00000946 <__divsf3x>:
 946:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fp_split3>
 94a:	68 f3       	brcs	.-38     	; 0x926 <__divsf3+0x8>

0000094c <__divsf3_pse>:
 94c:	99 23       	and	r25, r25
 94e:	b1 f3       	breq	.-20     	; 0x93c <__divsf3+0x1e>
 950:	55 23       	and	r21, r21
 952:	91 f3       	breq	.-28     	; 0x938 <__divsf3+0x1a>
 954:	95 1b       	sub	r25, r21
 956:	55 0b       	sbc	r21, r21
 958:	bb 27       	eor	r27, r27
 95a:	aa 27       	eor	r26, r26
 95c:	62 17       	cp	r22, r18
 95e:	73 07       	cpc	r23, r19
 960:	84 07       	cpc	r24, r20
 962:	38 f0       	brcs	.+14     	; 0x972 <__divsf3_pse+0x26>
 964:	9f 5f       	subi	r25, 0xFF	; 255
 966:	5f 4f       	sbci	r21, 0xFF	; 255
 968:	22 0f       	add	r18, r18
 96a:	33 1f       	adc	r19, r19
 96c:	44 1f       	adc	r20, r20
 96e:	aa 1f       	adc	r26, r26
 970:	a9 f3       	breq	.-22     	; 0x95c <__divsf3_pse+0x10>
 972:	35 d0       	rcall	.+106    	; 0x9de <__divsf3_pse+0x92>
 974:	0e 2e       	mov	r0, r30
 976:	3a f0       	brmi	.+14     	; 0x986 <__divsf3_pse+0x3a>
 978:	e0 e8       	ldi	r30, 0x80	; 128
 97a:	32 d0       	rcall	.+100    	; 0x9e0 <__divsf3_pse+0x94>
 97c:	91 50       	subi	r25, 0x01	; 1
 97e:	50 40       	sbci	r21, 0x00	; 0
 980:	e6 95       	lsr	r30
 982:	00 1c       	adc	r0, r0
 984:	ca f7       	brpl	.-14     	; 0x978 <__divsf3_pse+0x2c>
 986:	2b d0       	rcall	.+86     	; 0x9de <__divsf3_pse+0x92>
 988:	fe 2f       	mov	r31, r30
 98a:	29 d0       	rcall	.+82     	; 0x9de <__divsf3_pse+0x92>
 98c:	66 0f       	add	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	bb 1f       	adc	r27, r27
 994:	26 17       	cp	r18, r22
 996:	37 07       	cpc	r19, r23
 998:	48 07       	cpc	r20, r24
 99a:	ab 07       	cpc	r26, r27
 99c:	b0 e8       	ldi	r27, 0x80	; 128
 99e:	09 f0       	breq	.+2      	; 0x9a2 <__divsf3_pse+0x56>
 9a0:	bb 0b       	sbc	r27, r27
 9a2:	80 2d       	mov	r24, r0
 9a4:	bf 01       	movw	r22, r30
 9a6:	ff 27       	eor	r31, r31
 9a8:	93 58       	subi	r25, 0x83	; 131
 9aa:	5f 4f       	sbci	r21, 0xFF	; 255
 9ac:	3a f0       	brmi	.+14     	; 0x9bc <__divsf3_pse+0x70>
 9ae:	9e 3f       	cpi	r25, 0xFE	; 254
 9b0:	51 05       	cpc	r21, r1
 9b2:	78 f0       	brcs	.+30     	; 0x9d2 <__divsf3_pse+0x86>
 9b4:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_inf>
 9b8:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_szero>
 9bc:	5f 3f       	cpi	r21, 0xFF	; 255
 9be:	e4 f3       	brlt	.-8      	; 0x9b8 <__divsf3_pse+0x6c>
 9c0:	98 3e       	cpi	r25, 0xE8	; 232
 9c2:	d4 f3       	brlt	.-12     	; 0x9b8 <__divsf3_pse+0x6c>
 9c4:	86 95       	lsr	r24
 9c6:	77 95       	ror	r23
 9c8:	67 95       	ror	r22
 9ca:	b7 95       	ror	r27
 9cc:	f7 95       	ror	r31
 9ce:	9f 5f       	subi	r25, 0xFF	; 255
 9d0:	c9 f7       	brne	.-14     	; 0x9c4 <__divsf3_pse+0x78>
 9d2:	88 0f       	add	r24, r24
 9d4:	91 1d       	adc	r25, r1
 9d6:	96 95       	lsr	r25
 9d8:	87 95       	ror	r24
 9da:	97 f9       	bld	r25, 7
 9dc:	08 95       	ret
 9de:	e1 e0       	ldi	r30, 0x01	; 1
 9e0:	66 0f       	add	r22, r22
 9e2:	77 1f       	adc	r23, r23
 9e4:	88 1f       	adc	r24, r24
 9e6:	bb 1f       	adc	r27, r27
 9e8:	62 17       	cp	r22, r18
 9ea:	73 07       	cpc	r23, r19
 9ec:	84 07       	cpc	r24, r20
 9ee:	ba 07       	cpc	r27, r26
 9f0:	20 f0       	brcs	.+8      	; 0x9fa <__divsf3_pse+0xae>
 9f2:	62 1b       	sub	r22, r18
 9f4:	73 0b       	sbc	r23, r19
 9f6:	84 0b       	sbc	r24, r20
 9f8:	ba 0b       	sbc	r27, r26
 9fa:	ee 1f       	adc	r30, r30
 9fc:	88 f7       	brcc	.-30     	; 0x9e0 <__divsf3_pse+0x94>
 9fe:	e0 95       	com	r30
 a00:	08 95       	ret

00000a02 <__fixunssfsi>:
 a02:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_splitA>
 a06:	88 f0       	brcs	.+34     	; 0xa2a <__fixunssfsi+0x28>
 a08:	9f 57       	subi	r25, 0x7F	; 127
 a0a:	98 f0       	brcs	.+38     	; 0xa32 <__fixunssfsi+0x30>
 a0c:	b9 2f       	mov	r27, r25
 a0e:	99 27       	eor	r25, r25
 a10:	b7 51       	subi	r27, 0x17	; 23
 a12:	b0 f0       	brcs	.+44     	; 0xa40 <__fixunssfsi+0x3e>
 a14:	e1 f0       	breq	.+56     	; 0xa4e <__fixunssfsi+0x4c>
 a16:	66 0f       	add	r22, r22
 a18:	77 1f       	adc	r23, r23
 a1a:	88 1f       	adc	r24, r24
 a1c:	99 1f       	adc	r25, r25
 a1e:	1a f0       	brmi	.+6      	; 0xa26 <__fixunssfsi+0x24>
 a20:	ba 95       	dec	r27
 a22:	c9 f7       	brne	.-14     	; 0xa16 <__fixunssfsi+0x14>
 a24:	14 c0       	rjmp	.+40     	; 0xa4e <__fixunssfsi+0x4c>
 a26:	b1 30       	cpi	r27, 0x01	; 1
 a28:	91 f0       	breq	.+36     	; 0xa4e <__fixunssfsi+0x4c>
 a2a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fp_zero>
 a2e:	b1 e0       	ldi	r27, 0x01	; 1
 a30:	08 95       	ret
 a32:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_zero>
 a36:	67 2f       	mov	r22, r23
 a38:	78 2f       	mov	r23, r24
 a3a:	88 27       	eor	r24, r24
 a3c:	b8 5f       	subi	r27, 0xF8	; 248
 a3e:	39 f0       	breq	.+14     	; 0xa4e <__fixunssfsi+0x4c>
 a40:	b9 3f       	cpi	r27, 0xF9	; 249
 a42:	cc f3       	brlt	.-14     	; 0xa36 <__fixunssfsi+0x34>
 a44:	86 95       	lsr	r24
 a46:	77 95       	ror	r23
 a48:	67 95       	ror	r22
 a4a:	b3 95       	inc	r27
 a4c:	d9 f7       	brne	.-10     	; 0xa44 <__fixunssfsi+0x42>
 a4e:	3e f4       	brtc	.+14     	; 0xa5e <__fixunssfsi+0x5c>
 a50:	90 95       	com	r25
 a52:	80 95       	com	r24
 a54:	70 95       	com	r23
 a56:	61 95       	neg	r22
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	8f 4f       	sbci	r24, 0xFF	; 255
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	08 95       	ret

00000a60 <__floatunsisf>:
 a60:	e8 94       	clt
 a62:	09 c0       	rjmp	.+18     	; 0xa76 <__floatsisf+0x12>

00000a64 <__floatsisf>:
 a64:	97 fb       	bst	r25, 7
 a66:	3e f4       	brtc	.+14     	; 0xa76 <__floatsisf+0x12>
 a68:	90 95       	com	r25
 a6a:	80 95       	com	r24
 a6c:	70 95       	com	r23
 a6e:	61 95       	neg	r22
 a70:	7f 4f       	sbci	r23, 0xFF	; 255
 a72:	8f 4f       	sbci	r24, 0xFF	; 255
 a74:	9f 4f       	sbci	r25, 0xFF	; 255
 a76:	99 23       	and	r25, r25
 a78:	a9 f0       	breq	.+42     	; 0xaa4 <__floatsisf+0x40>
 a7a:	f9 2f       	mov	r31, r25
 a7c:	96 e9       	ldi	r25, 0x96	; 150
 a7e:	bb 27       	eor	r27, r27
 a80:	93 95       	inc	r25
 a82:	f6 95       	lsr	r31
 a84:	87 95       	ror	r24
 a86:	77 95       	ror	r23
 a88:	67 95       	ror	r22
 a8a:	b7 95       	ror	r27
 a8c:	f1 11       	cpse	r31, r1
 a8e:	f8 cf       	rjmp	.-16     	; 0xa80 <__floatsisf+0x1c>
 a90:	fa f4       	brpl	.+62     	; 0xad0 <__floatsisf+0x6c>
 a92:	bb 0f       	add	r27, r27
 a94:	11 f4       	brne	.+4      	; 0xa9a <__floatsisf+0x36>
 a96:	60 ff       	sbrs	r22, 0
 a98:	1b c0       	rjmp	.+54     	; 0xad0 <__floatsisf+0x6c>
 a9a:	6f 5f       	subi	r22, 0xFF	; 255
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	16 c0       	rjmp	.+44     	; 0xad0 <__floatsisf+0x6c>
 aa4:	88 23       	and	r24, r24
 aa6:	11 f0       	breq	.+4      	; 0xaac <__floatsisf+0x48>
 aa8:	96 e9       	ldi	r25, 0x96	; 150
 aaa:	11 c0       	rjmp	.+34     	; 0xace <__floatsisf+0x6a>
 aac:	77 23       	and	r23, r23
 aae:	21 f0       	breq	.+8      	; 0xab8 <__floatsisf+0x54>
 ab0:	9e e8       	ldi	r25, 0x8E	; 142
 ab2:	87 2f       	mov	r24, r23
 ab4:	76 2f       	mov	r23, r22
 ab6:	05 c0       	rjmp	.+10     	; 0xac2 <__floatsisf+0x5e>
 ab8:	66 23       	and	r22, r22
 aba:	71 f0       	breq	.+28     	; 0xad8 <__floatsisf+0x74>
 abc:	96 e8       	ldi	r25, 0x86	; 134
 abe:	86 2f       	mov	r24, r22
 ac0:	70 e0       	ldi	r23, 0x00	; 0
 ac2:	60 e0       	ldi	r22, 0x00	; 0
 ac4:	2a f0       	brmi	.+10     	; 0xad0 <__floatsisf+0x6c>
 ac6:	9a 95       	dec	r25
 ac8:	66 0f       	add	r22, r22
 aca:	77 1f       	adc	r23, r23
 acc:	88 1f       	adc	r24, r24
 ace:	da f7       	brpl	.-10     	; 0xac6 <__floatsisf+0x62>
 ad0:	88 0f       	add	r24, r24
 ad2:	96 95       	lsr	r25
 ad4:	87 95       	ror	r24
 ad6:	97 f9       	bld	r25, 7
 ad8:	08 95       	ret

00000ada <__fp_cmp>:
 ada:	99 0f       	add	r25, r25
 adc:	00 08       	sbc	r0, r0
 ade:	55 0f       	add	r21, r21
 ae0:	aa 0b       	sbc	r26, r26
 ae2:	e0 e8       	ldi	r30, 0x80	; 128
 ae4:	fe ef       	ldi	r31, 0xFE	; 254
 ae6:	16 16       	cp	r1, r22
 ae8:	17 06       	cpc	r1, r23
 aea:	e8 07       	cpc	r30, r24
 aec:	f9 07       	cpc	r31, r25
 aee:	c0 f0       	brcs	.+48     	; 0xb20 <__fp_cmp+0x46>
 af0:	12 16       	cp	r1, r18
 af2:	13 06       	cpc	r1, r19
 af4:	e4 07       	cpc	r30, r20
 af6:	f5 07       	cpc	r31, r21
 af8:	98 f0       	brcs	.+38     	; 0xb20 <__fp_cmp+0x46>
 afa:	62 1b       	sub	r22, r18
 afc:	73 0b       	sbc	r23, r19
 afe:	84 0b       	sbc	r24, r20
 b00:	95 0b       	sbc	r25, r21
 b02:	39 f4       	brne	.+14     	; 0xb12 <__fp_cmp+0x38>
 b04:	0a 26       	eor	r0, r26
 b06:	61 f0       	breq	.+24     	; 0xb20 <__fp_cmp+0x46>
 b08:	23 2b       	or	r18, r19
 b0a:	24 2b       	or	r18, r20
 b0c:	25 2b       	or	r18, r21
 b0e:	21 f4       	brne	.+8      	; 0xb18 <__fp_cmp+0x3e>
 b10:	08 95       	ret
 b12:	0a 26       	eor	r0, r26
 b14:	09 f4       	brne	.+2      	; 0xb18 <__fp_cmp+0x3e>
 b16:	a1 40       	sbci	r26, 0x01	; 1
 b18:	a6 95       	lsr	r26
 b1a:	8f ef       	ldi	r24, 0xFF	; 255
 b1c:	81 1d       	adc	r24, r1
 b1e:	81 1d       	adc	r24, r1
 b20:	08 95       	ret

00000b22 <__fp_inf>:
 b22:	97 f9       	bld	r25, 7
 b24:	9f 67       	ori	r25, 0x7F	; 127
 b26:	80 e8       	ldi	r24, 0x80	; 128
 b28:	70 e0       	ldi	r23, 0x00	; 0
 b2a:	60 e0       	ldi	r22, 0x00	; 0
 b2c:	08 95       	ret

00000b2e <__fp_nan>:
 b2e:	9f ef       	ldi	r25, 0xFF	; 255
 b30:	80 ec       	ldi	r24, 0xC0	; 192
 b32:	08 95       	ret

00000b34 <__fp_pscA>:
 b34:	00 24       	eor	r0, r0
 b36:	0a 94       	dec	r0
 b38:	16 16       	cp	r1, r22
 b3a:	17 06       	cpc	r1, r23
 b3c:	18 06       	cpc	r1, r24
 b3e:	09 06       	cpc	r0, r25
 b40:	08 95       	ret

00000b42 <__fp_pscB>:
 b42:	00 24       	eor	r0, r0
 b44:	0a 94       	dec	r0
 b46:	12 16       	cp	r1, r18
 b48:	13 06       	cpc	r1, r19
 b4a:	14 06       	cpc	r1, r20
 b4c:	05 06       	cpc	r0, r21
 b4e:	08 95       	ret

00000b50 <__fp_round>:
 b50:	09 2e       	mov	r0, r25
 b52:	03 94       	inc	r0
 b54:	00 0c       	add	r0, r0
 b56:	11 f4       	brne	.+4      	; 0xb5c <__fp_round+0xc>
 b58:	88 23       	and	r24, r24
 b5a:	52 f0       	brmi	.+20     	; 0xb70 <__fp_round+0x20>
 b5c:	bb 0f       	add	r27, r27
 b5e:	40 f4       	brcc	.+16     	; 0xb70 <__fp_round+0x20>
 b60:	bf 2b       	or	r27, r31
 b62:	11 f4       	brne	.+4      	; 0xb68 <__fp_round+0x18>
 b64:	60 ff       	sbrs	r22, 0
 b66:	04 c0       	rjmp	.+8      	; 0xb70 <__fp_round+0x20>
 b68:	6f 5f       	subi	r22, 0xFF	; 255
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	8f 4f       	sbci	r24, 0xFF	; 255
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	08 95       	ret

00000b72 <__fp_split3>:
 b72:	57 fd       	sbrc	r21, 7
 b74:	90 58       	subi	r25, 0x80	; 128
 b76:	44 0f       	add	r20, r20
 b78:	55 1f       	adc	r21, r21
 b7a:	59 f0       	breq	.+22     	; 0xb92 <__fp_splitA+0x10>
 b7c:	5f 3f       	cpi	r21, 0xFF	; 255
 b7e:	71 f0       	breq	.+28     	; 0xb9c <__fp_splitA+0x1a>
 b80:	47 95       	ror	r20

00000b82 <__fp_splitA>:
 b82:	88 0f       	add	r24, r24
 b84:	97 fb       	bst	r25, 7
 b86:	99 1f       	adc	r25, r25
 b88:	61 f0       	breq	.+24     	; 0xba2 <__fp_splitA+0x20>
 b8a:	9f 3f       	cpi	r25, 0xFF	; 255
 b8c:	79 f0       	breq	.+30     	; 0xbac <__fp_splitA+0x2a>
 b8e:	87 95       	ror	r24
 b90:	08 95       	ret
 b92:	12 16       	cp	r1, r18
 b94:	13 06       	cpc	r1, r19
 b96:	14 06       	cpc	r1, r20
 b98:	55 1f       	adc	r21, r21
 b9a:	f2 cf       	rjmp	.-28     	; 0xb80 <__fp_split3+0xe>
 b9c:	46 95       	lsr	r20
 b9e:	f1 df       	rcall	.-30     	; 0xb82 <__fp_splitA>
 ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <__fp_splitA+0x30>
 ba2:	16 16       	cp	r1, r22
 ba4:	17 06       	cpc	r1, r23
 ba6:	18 06       	cpc	r1, r24
 ba8:	99 1f       	adc	r25, r25
 baa:	f1 cf       	rjmp	.-30     	; 0xb8e <__fp_splitA+0xc>
 bac:	86 95       	lsr	r24
 bae:	71 05       	cpc	r23, r1
 bb0:	61 05       	cpc	r22, r1
 bb2:	08 94       	sec
 bb4:	08 95       	ret

00000bb6 <__fp_zero>:
 bb6:	e8 94       	clt

00000bb8 <__fp_szero>:
 bb8:	bb 27       	eor	r27, r27
 bba:	66 27       	eor	r22, r22
 bbc:	77 27       	eor	r23, r23
 bbe:	cb 01       	movw	r24, r22
 bc0:	97 f9       	bld	r25, 7
 bc2:	08 95       	ret

00000bc4 <__gesf2>:
 bc4:	0e 94 6d 05 	call	0xada	; 0xada <__fp_cmp>
 bc8:	08 f4       	brcc	.+2      	; 0xbcc <__gesf2+0x8>
 bca:	8f ef       	ldi	r24, 0xFF	; 255
 bcc:	08 95       	ret

00000bce <__mulsf3>:
 bce:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__mulsf3x>
 bd2:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_round>
 bd6:	0e 94 9a 05 	call	0xb34	; 0xb34 <__fp_pscA>
 bda:	38 f0       	brcs	.+14     	; 0xbea <__mulsf3+0x1c>
 bdc:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_pscB>
 be0:	20 f0       	brcs	.+8      	; 0xbea <__mulsf3+0x1c>
 be2:	95 23       	and	r25, r21
 be4:	11 f0       	breq	.+4      	; 0xbea <__mulsf3+0x1c>
 be6:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_inf>
 bea:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__fp_nan>
 bee:	11 24       	eor	r1, r1
 bf0:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_szero>

00000bf4 <__mulsf3x>:
 bf4:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fp_split3>
 bf8:	70 f3       	brcs	.-36     	; 0xbd6 <__mulsf3+0x8>

00000bfa <__mulsf3_pse>:
 bfa:	95 9f       	mul	r25, r21
 bfc:	c1 f3       	breq	.-16     	; 0xbee <__mulsf3+0x20>
 bfe:	95 0f       	add	r25, r21
 c00:	50 e0       	ldi	r21, 0x00	; 0
 c02:	55 1f       	adc	r21, r21
 c04:	62 9f       	mul	r22, r18
 c06:	f0 01       	movw	r30, r0
 c08:	72 9f       	mul	r23, r18
 c0a:	bb 27       	eor	r27, r27
 c0c:	f0 0d       	add	r31, r0
 c0e:	b1 1d       	adc	r27, r1
 c10:	63 9f       	mul	r22, r19
 c12:	aa 27       	eor	r26, r26
 c14:	f0 0d       	add	r31, r0
 c16:	b1 1d       	adc	r27, r1
 c18:	aa 1f       	adc	r26, r26
 c1a:	64 9f       	mul	r22, r20
 c1c:	66 27       	eor	r22, r22
 c1e:	b0 0d       	add	r27, r0
 c20:	a1 1d       	adc	r26, r1
 c22:	66 1f       	adc	r22, r22
 c24:	82 9f       	mul	r24, r18
 c26:	22 27       	eor	r18, r18
 c28:	b0 0d       	add	r27, r0
 c2a:	a1 1d       	adc	r26, r1
 c2c:	62 1f       	adc	r22, r18
 c2e:	73 9f       	mul	r23, r19
 c30:	b0 0d       	add	r27, r0
 c32:	a1 1d       	adc	r26, r1
 c34:	62 1f       	adc	r22, r18
 c36:	83 9f       	mul	r24, r19
 c38:	a0 0d       	add	r26, r0
 c3a:	61 1d       	adc	r22, r1
 c3c:	22 1f       	adc	r18, r18
 c3e:	74 9f       	mul	r23, r20
 c40:	33 27       	eor	r19, r19
 c42:	a0 0d       	add	r26, r0
 c44:	61 1d       	adc	r22, r1
 c46:	23 1f       	adc	r18, r19
 c48:	84 9f       	mul	r24, r20
 c4a:	60 0d       	add	r22, r0
 c4c:	21 1d       	adc	r18, r1
 c4e:	82 2f       	mov	r24, r18
 c50:	76 2f       	mov	r23, r22
 c52:	6a 2f       	mov	r22, r26
 c54:	11 24       	eor	r1, r1
 c56:	9f 57       	subi	r25, 0x7F	; 127
 c58:	50 40       	sbci	r21, 0x00	; 0
 c5a:	9a f0       	brmi	.+38     	; 0xc82 <__mulsf3_pse+0x88>
 c5c:	f1 f0       	breq	.+60     	; 0xc9a <__mulsf3_pse+0xa0>
 c5e:	88 23       	and	r24, r24
 c60:	4a f0       	brmi	.+18     	; 0xc74 <__mulsf3_pse+0x7a>
 c62:	ee 0f       	add	r30, r30
 c64:	ff 1f       	adc	r31, r31
 c66:	bb 1f       	adc	r27, r27
 c68:	66 1f       	adc	r22, r22
 c6a:	77 1f       	adc	r23, r23
 c6c:	88 1f       	adc	r24, r24
 c6e:	91 50       	subi	r25, 0x01	; 1
 c70:	50 40       	sbci	r21, 0x00	; 0
 c72:	a9 f7       	brne	.-22     	; 0xc5e <__mulsf3_pse+0x64>
 c74:	9e 3f       	cpi	r25, 0xFE	; 254
 c76:	51 05       	cpc	r21, r1
 c78:	80 f0       	brcs	.+32     	; 0xc9a <__mulsf3_pse+0xa0>
 c7a:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_inf>
 c7e:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_szero>
 c82:	5f 3f       	cpi	r21, 0xFF	; 255
 c84:	e4 f3       	brlt	.-8      	; 0xc7e <__mulsf3_pse+0x84>
 c86:	98 3e       	cpi	r25, 0xE8	; 232
 c88:	d4 f3       	brlt	.-12     	; 0xc7e <__mulsf3_pse+0x84>
 c8a:	86 95       	lsr	r24
 c8c:	77 95       	ror	r23
 c8e:	67 95       	ror	r22
 c90:	b7 95       	ror	r27
 c92:	f7 95       	ror	r31
 c94:	e7 95       	ror	r30
 c96:	9f 5f       	subi	r25, 0xFF	; 255
 c98:	c1 f7       	brne	.-16     	; 0xc8a <__mulsf3_pse+0x90>
 c9a:	fe 2b       	or	r31, r30
 c9c:	88 0f       	add	r24, r24
 c9e:	91 1d       	adc	r25, r1
 ca0:	96 95       	lsr	r25
 ca2:	87 95       	ror	r24
 ca4:	97 f9       	bld	r25, 7
 ca6:	08 95       	ret

00000ca8 <__utoa_ncheck>:
 ca8:	bb 27       	eor	r27, r27

00000caa <__utoa_common>:
 caa:	fb 01       	movw	r30, r22
 cac:	55 27       	eor	r21, r21
 cae:	aa 27       	eor	r26, r26
 cb0:	88 0f       	add	r24, r24
 cb2:	99 1f       	adc	r25, r25
 cb4:	aa 1f       	adc	r26, r26
 cb6:	a4 17       	cp	r26, r20
 cb8:	10 f0       	brcs	.+4      	; 0xcbe <__utoa_common+0x14>
 cba:	a4 1b       	sub	r26, r20
 cbc:	83 95       	inc	r24
 cbe:	50 51       	subi	r21, 0x10	; 16
 cc0:	b9 f7       	brne	.-18     	; 0xcb0 <__utoa_common+0x6>
 cc2:	a0 5d       	subi	r26, 0xD0	; 208
 cc4:	aa 33       	cpi	r26, 0x3A	; 58
 cc6:	08 f0       	brcs	.+2      	; 0xcca <__utoa_common+0x20>
 cc8:	a9 5d       	subi	r26, 0xD9	; 217
 cca:	a1 93       	st	Z+, r26
 ccc:	00 97       	sbiw	r24, 0x00	; 0
 cce:	79 f7       	brne	.-34     	; 0xcae <__utoa_common+0x4>
 cd0:	b1 11       	cpse	r27, r1
 cd2:	b1 93       	st	Z+, r27
 cd4:	11 92       	st	Z+, r1
 cd6:	cb 01       	movw	r24, r22
 cd8:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <strrev>

00000cdc <strrev>:
 cdc:	dc 01       	movw	r26, r24
 cde:	fc 01       	movw	r30, r24
 ce0:	67 2f       	mov	r22, r23
 ce2:	71 91       	ld	r23, Z+
 ce4:	77 23       	and	r23, r23
 ce6:	e1 f7       	brne	.-8      	; 0xce0 <strrev+0x4>
 ce8:	32 97       	sbiw	r30, 0x02	; 2
 cea:	04 c0       	rjmp	.+8      	; 0xcf4 <strrev+0x18>
 cec:	7c 91       	ld	r23, X
 cee:	6d 93       	st	X+, r22
 cf0:	70 83       	st	Z, r23
 cf2:	62 91       	ld	r22, -Z
 cf4:	ae 17       	cp	r26, r30
 cf6:	bf 07       	cpc	r27, r31
 cf8:	c8 f3       	brcs	.-14     	; 0xcec <strrev+0x10>
 cfa:	08 95       	ret

00000cfc <_exit>:
 cfc:	f8 94       	cli

00000cfe <__stop_program>:
 cfe:	ff cf       	rjmp	.-2      	; 0xcfe <__stop_program>
