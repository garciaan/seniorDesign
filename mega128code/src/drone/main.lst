
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  00002136  000021ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800218  00800218  000022e2  2**0
                  ALLOC
  3 .stab         00004c5c  00000000  00000000  000022e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b58  00000000  00000000  00006f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008a98  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008aac  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00008ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00009268  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00009980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000999d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__ctors_end>
       4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       8:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      10:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_5>
      18:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_6>
      1c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      20:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      24:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      28:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      2c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      30:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      34:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      3c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      40:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      44:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      48:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      4c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      50:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      54:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      58:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      5c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      60:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      64:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      68:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_26>
      6c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      70:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      74:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      78:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      7c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      80:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      84:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      88:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__trampolines_end>:
      ba:	00 40       	sbci	r16, 0x00	; 0
      bc:	7a 10       	cpse	r7, r10
      be:	f3 5a       	subi	r31, 0xA3	; 163
      c0:	00 a0       	ldd	r0, Z+32	; 0x20
      c2:	72 4e       	sbci	r23, 0xE2	; 226
      c4:	18 09       	sbc	r17, r8
      c6:	00 10       	cpse	r0, r0
      c8:	a5 d4       	rcall	.+2378   	; 0xa14 <i2c_read_nack+0x10>
      ca:	e8 00       	.word	0x00e8	; ????
      cc:	00 e8       	ldi	r16, 0x80	; 128
      ce:	76 48       	sbci	r23, 0x86	; 134
      d0:	17 00       	.word	0x0017	; ????
      d2:	00 e4       	ldi	r16, 0x40	; 64
      d4:	0b 54       	subi	r16, 0x4B	; 75
      d6:	02 00       	.word	0x0002	; ????
      d8:	00 ca       	rjmp	.-3072   	; 0xfffff4da <__eeprom_end+0xff7ef4da>
      da:	9a 3b       	cpi	r25, 0xBA	; 186
      dc:	00 00       	nop
      de:	00 e1       	ldi	r16, 0x10	; 16
      e0:	f5 05       	cpc	r31, r5
      e2:	00 00       	nop
      e4:	80 96       	adiw	r24, 0x20	; 32
      e6:	98 00       	.word	0x0098	; ????
      e8:	00 00       	nop
      ea:	40 42       	sbci	r20, 0x20	; 32
      ec:	0f 00       	.word	0x000f	; ????
      ee:	00 00       	nop
      f0:	a0 86       	std	Z+8, r10	; 0x08
      f2:	01 00       	.word	0x0001	; ????
      f4:	00 00       	nop
      f6:	10 27       	eor	r17, r16
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	e8 03       	fmulsu	r22, r16
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	64 00       	.word	0x0064	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	0a 00       	.word	0x000a	; ????
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	00 00       	nop
     114:	2c 76       	andi	r18, 0x6C	; 108
     116:	d8 88       	ldd	r13, Y+16	; 0x10
     118:	dc 67       	ori	r29, 0x7C	; 124
     11a:	4f 08       	sbc	r4, r15
     11c:	23 df       	rcall	.-442    	; 0xffffff64 <__eeprom_end+0xff7eff64>
     11e:	c1 df       	rcall	.-126    	; 0xa2 <__SREG__+0x63>
     120:	ae 59       	subi	r26, 0x9E	; 158
     122:	e1 b1       	in	r30, 0x01	; 1
     124:	b7 96       	adiw	r30, 0x27	; 39
     126:	e5 e3       	ldi	r30, 0x35	; 53
     128:	e4 53       	subi	r30, 0x34	; 52
     12a:	c6 3a       	cpi	r28, 0xA6	; 166
     12c:	e6 51       	subi	r30, 0x16	; 22
     12e:	99 76       	andi	r25, 0x69	; 105
     130:	96 e8       	ldi	r25, 0x86	; 134
     132:	e6 c2       	rjmp	.+1484   	; 0x700 <path1+0x8c>
     134:	84 26       	eor	r8, r20
     136:	eb 89       	ldd	r30, Y+19	; 0x13
     138:	8c 9b       	sbis	0x11, 4	; 17
     13a:	62 ed       	ldi	r22, 0xD2	; 210
     13c:	40 7c       	andi	r20, 0xC0	; 192
     13e:	6f fc       	.word	0xfc6f	; ????
     140:	ef bc       	out	0x2f, r14	; 47
     142:	9c 9f       	mul	r25, r28
     144:	40 f2       	brcs	.-112    	; 0xd6 <__trampolines_end+0x1c>
     146:	ba a5       	ldd	r27, Y+42	; 0x2a
     148:	6f a5       	ldd	r22, Y+47	; 0x2f
     14a:	f4 90       	lpm	r15, Z
     14c:	05 5a       	subi	r16, 0xA5	; 165
     14e:	2a f7       	brpl	.-54     	; 0x11a <__trampolines_end+0x60>
     150:	5c 93       	st	X, r21
     152:	6b 6c       	ori	r22, 0xCB	; 203
     154:	f9 67       	ori	r31, 0x79	; 121
     156:	6d c1       	rjmp	.+730    	; 0x432 <__vector_6+0x104>
     158:	1b fc       	.word	0xfc1b	; ????
     15a:	e0 e4       	ldi	r30, 0x40	; 64
     15c:	0d 47       	sbci	r16, 0x7D	; 125
     15e:	fe f5       	brtc	.+126    	; 0x1de <__do_clear_bss+0x4>
     160:	20 e6       	ldi	r18, 0x60	; 96
     162:	b5 00       	.word	0x00b5	; ????
     164:	d0 ed       	ldi	r29, 0xD0	; 208
     166:	90 2e       	mov	r9, r16
     168:	03 00       	.word	0x0003	; ????
     16a:	94 35       	cpi	r25, 0x54	; 84
     16c:	77 05       	cpc	r23, r7
     16e:	00 80       	ld	r0, Z
     170:	84 1e       	adc	r8, r20
     172:	08 00       	.word	0x0008	; ????
     174:	00 20       	and	r0, r0
     176:	4e 0a       	sbc	r4, r30
     178:	00 00       	nop
     17a:	00 c8       	rjmp	.-4096   	; 0xfffff17c <__eeprom_end+0xff7ef17c>
     17c:	0c 33       	cpi	r16, 0x3C	; 60
     17e:	33 33       	cpi	r19, 0x33	; 51
     180:	33 0f       	add	r19, r19
     182:	98 6e       	ori	r25, 0xE8	; 232
     184:	12 83       	std	Z+2, r17	; 0x02
     186:	11 41       	sbci	r17, 0x11	; 17
     188:	ef 8d       	ldd	r30, Y+31	; 0x1f
     18a:	21 14       	cp	r2, r1
     18c:	89 3b       	cpi	r24, 0xB9	; 185
     18e:	e6 55       	subi	r30, 0x56	; 86
     190:	16 cf       	rjmp	.-468    	; 0xffffffbe <__eeprom_end+0xff7effbe>
     192:	fe e6       	ldi	r31, 0x6E	; 110
     194:	db 18       	sub	r13, r11
     196:	d1 84       	ldd	r13, Z+9	; 0x09
     198:	4b 38       	cpi	r20, 0x8B	; 139
     19a:	1b f7       	brvc	.-58     	; 0x162 <__trampolines_end+0xa8>
     19c:	7c 1d       	adc	r23, r12
     19e:	90 1d       	adc	r25, r0
     1a0:	a4 bb       	out	0x14, r26	; 20
     1a2:	e4 24       	eor	r14, r4
     1a4:	20 32       	cpi	r18, 0x20	; 32
     1a6:	84 72       	andi	r24, 0x24	; 36
     1a8:	5e 22       	and	r5, r30
     1aa:	81 00       	.word	0x0081	; ????
     1ac:	c9 f1       	breq	.+114    	; 0x220 <__vector_5+0x2a>
     1ae:	24 ec       	ldi	r18, 0xC4	; 196
     1b0:	a1 e5       	ldi	r26, 0x51	; 81
     1b2:	3d 27       	eor	r19, r29

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d0 e1       	ldi	r29, 0x10	; 16
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	12 e0       	ldi	r17, 0x02	; 2
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	e6 e3       	ldi	r30, 0x36	; 54
     1c8:	f1 e2       	ldi	r31, 0x21	; 33
     1ca:	00 e0       	ldi	r16, 0x00	; 0
     1cc:	0b bf       	out	0x3b, r16	; 59
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__do_copy_data+0x14>
     1d0:	07 90       	elpm	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	a8 31       	cpi	r26, 0x18	; 24
     1d6:	b1 07       	cpc	r27, r17
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <__do_copy_data+0x10>

000001da <__do_clear_bss>:
     1da:	22 e0       	ldi	r18, 0x02	; 2
     1dc:	a8 e1       	ldi	r26, 0x18	; 24
     1de:	b2 e0       	ldi	r27, 0x02	; 2
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <.do_clear_bss_start>

000001e2 <.do_clear_bss_loop>:
     1e2:	1d 92       	st	X+, r1

000001e4 <.do_clear_bss_start>:
     1e4:	aa 32       	cpi	r26, 0x2A	; 42
     1e6:	b2 07       	cpc	r27, r18
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <.do_clear_bss_loop>
     1ea:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <main>
     1ee:	0c 94 99 10 	jmp	0x2132	; 0x2132 <_exit>

000001f2 <__bad_interrupt>:
     1f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f6 <__vector_5>:
void enable_bumpers();

char buffer[10];
volatile int object_detected = 0;

ISR(INT4_vect){  //Left bumper on PE4
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	11 24       	eor	r1, r1
     200:	0b b6       	in	r0, 0x3b	; 59
     202:	0f 92       	push	r0
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	2f 93       	push	r18
     20e:	3f 93       	push	r19
     210:	4f 93       	push	r20
     212:	5f 93       	push	r21
     214:	6f 93       	push	r22
     216:	7f 93       	push	r23
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	af 93       	push	r26
     21e:	bf 93       	push	r27
     220:	ef 93       	push	r30
     222:	ff 93       	push	r31
    object_detected = 1;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	90 93 19 02 	sts	0x0219, r25
     22c:	80 93 18 02 	sts	0x0218, r24
    USART0_send_string((unsigned char *)"Left Bumper Hit\r");
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>

    //reverse
    USART0_send_string((unsigned char *)"Reversing\r");
     238:	81 e1       	ldi	r24, 0x11	; 17
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    move(0,0,STABLE_Z);
     240:	60 91 1a 02 	lds	r22, 0x021A
     244:	70 91 1b 02 	lds	r23, 0x021B
     248:	07 2e       	mov	r0, r23
     24a:	00 0c       	add	r0, r0
     24c:	88 0b       	sbc	r24, r24
     24e:	99 0b       	sbc	r25, r25
     250:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     254:	7b 01       	movw	r14, r22
     256:	8c 01       	movw	r16, r24
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	a9 01       	movw	r20, r18
     25e:	ca 01       	movw	r24, r20
     260:	b9 01       	movw	r22, r18
     262:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     266:	2f ef       	ldi	r18, 0xFF	; 255
     268:	83 ed       	ldi	r24, 0xD3	; 211
     26a:	90 e3       	ldi	r25, 0x30	; 48
     26c:	21 50       	subi	r18, 0x01	; 1
     26e:	80 40       	sbci	r24, 0x00	; 0
     270:	90 40       	sbci	r25, 0x00	; 0
     272:	e1 f7       	brne	.-8      	; 0x26c <__vector_5+0x76>
     274:	00 c0       	rjmp	.+0      	; 0x276 <__vector_5+0x80>
     276:	00 00       	nop
    _delay_ms(1000);
    

    move (50,50,STABLE_Z);
     278:	60 91 1a 02 	lds	r22, 0x021A
     27c:	70 91 1b 02 	lds	r23, 0x021B
     280:	07 2e       	mov	r0, r23
     282:	00 0c       	add	r0, r0
     284:	88 0b       	sbc	r24, r24
     286:	99 0b       	sbc	r25, r25
     288:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     28c:	7b 01       	movw	r14, r22
     28e:	8c 01       	movw	r16, r24
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	48 e4       	ldi	r20, 0x48	; 72
     296:	52 e4       	ldi	r21, 0x42	; 66
     298:	ca 01       	movw	r24, r20
     29a:	b9 01       	movw	r22, r18
     29c:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
     2a0:	2f ef       	ldi	r18, 0xFF	; 255
     2a2:	89 e6       	ldi	r24, 0x69	; 105
     2a4:	98 e1       	ldi	r25, 0x18	; 24
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	80 40       	sbci	r24, 0x00	; 0
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <__vector_5+0xb0>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <__vector_5+0xba>
     2b0:	00 00       	nop
    _delay_ms(500);

    //turn left
    USART0_send_string((unsigned char *)"Turning Right\r");
     2b2:	8c e1       	ldi	r24, 0x1C	; 28
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    move(50 - TURN_SPEED,50 + TURN_SPEED,STABLE_Z);
     2ba:	60 91 1a 02 	lds	r22, 0x021A
     2be:	70 91 1b 02 	lds	r23, 0x021B
     2c2:	07 2e       	mov	r0, r23
     2c4:	00 0c       	add	r0, r0
     2c6:	88 0b       	sbc	r24, r24
     2c8:	99 0b       	sbc	r25, r25
     2ca:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     2ce:	7b 01       	movw	r14, r22
     2d0:	8c 01       	movw	r16, r24
     2d2:	20 e0       	ldi	r18, 0x00	; 0
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	42 e8       	ldi	r20, 0x82	; 130
     2d8:	52 e4       	ldi	r21, 0x42	; 66
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	8c e0       	ldi	r24, 0x0C	; 12
     2e0:	92 e4       	ldi	r25, 0x42	; 66
     2e2:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
     2e6:	2f ef       	ldi	r18, 0xFF	; 255
     2e8:	83 ed       	ldi	r24, 0xD3	; 211
     2ea:	90 e3       	ldi	r25, 0x30	; 48
     2ec:	21 50       	subi	r18, 0x01	; 1
     2ee:	80 40       	sbci	r24, 0x00	; 0
     2f0:	90 40       	sbci	r25, 0x00	; 0
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <__vector_5+0xf6>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <__vector_5+0x100>
     2f6:	00 00       	nop
    _delay_ms(1000);
    USART0_send_string((unsigned char*)"Resuming\r");
     2f8:	8b e2       	ldi	r24, 0x2B	; 43
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
}
     300:	ff 91       	pop	r31
     302:	ef 91       	pop	r30
     304:	bf 91       	pop	r27
     306:	af 91       	pop	r26
     308:	9f 91       	pop	r25
     30a:	8f 91       	pop	r24
     30c:	7f 91       	pop	r23
     30e:	6f 91       	pop	r22
     310:	5f 91       	pop	r21
     312:	4f 91       	pop	r20
     314:	3f 91       	pop	r19
     316:	2f 91       	pop	r18
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	ff 90       	pop	r15
     31e:	ef 90       	pop	r14
     320:	0f 90       	pop	r0
     322:	0b be       	out	0x3b, r0	; 59
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <__vector_6>:

ISR(INT5_vect){  //Right bumper on PE5
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	0b b6       	in	r0, 0x3b	; 59
     33a:	0f 92       	push	r0
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	2f 93       	push	r18
     346:	3f 93       	push	r19
     348:	4f 93       	push	r20
     34a:	5f 93       	push	r21
     34c:	6f 93       	push	r22
     34e:	7f 93       	push	r23
     350:	8f 93       	push	r24
     352:	9f 93       	push	r25
     354:	af 93       	push	r26
     356:	bf 93       	push	r27
     358:	ef 93       	push	r30
     35a:	ff 93       	push	r31
    object_detected = 1;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	90 93 19 02 	sts	0x0219, r25
     364:	80 93 18 02 	sts	0x0218, r24
    USART0_send_string((unsigned char *)"Right Bumper Hit\r");
     368:	85 e3       	ldi	r24, 0x35	; 53
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>

    //reverse
    USART0_send_string((unsigned char *)"Reversing\r");
     370:	81 e1       	ldi	r24, 0x11	; 17
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    move(0,0,STABLE_Z);
     378:	60 91 1a 02 	lds	r22, 0x021A
     37c:	70 91 1b 02 	lds	r23, 0x021B
     380:	07 2e       	mov	r0, r23
     382:	00 0c       	add	r0, r0
     384:	88 0b       	sbc	r24, r24
     386:	99 0b       	sbc	r25, r25
     388:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     38c:	7b 01       	movw	r14, r22
     38e:	8c 01       	movw	r16, r24
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	a9 01       	movw	r20, r18
     396:	ca 01       	movw	r24, r20
     398:	b9 01       	movw	r22, r18
     39a:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
     39e:	2f ef       	ldi	r18, 0xFF	; 255
     3a0:	83 ed       	ldi	r24, 0xD3	; 211
     3a2:	90 e3       	ldi	r25, 0x30	; 48
     3a4:	21 50       	subi	r18, 0x01	; 1
     3a6:	80 40       	sbci	r24, 0x00	; 0
     3a8:	90 40       	sbci	r25, 0x00	; 0
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <__vector_6+0x76>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <__vector_6+0x80>
     3ae:	00 00       	nop
    _delay_ms(1000);
    

    move (50,50,STABLE_Z);
     3b0:	60 91 1a 02 	lds	r22, 0x021A
     3b4:	70 91 1b 02 	lds	r23, 0x021B
     3b8:	07 2e       	mov	r0, r23
     3ba:	00 0c       	add	r0, r0
     3bc:	88 0b       	sbc	r24, r24
     3be:	99 0b       	sbc	r25, r25
     3c0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     3c4:	7b 01       	movw	r14, r22
     3c6:	8c 01       	movw	r16, r24
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	48 e4       	ldi	r20, 0x48	; 72
     3ce:	52 e4       	ldi	r21, 0x42	; 66
     3d0:	ca 01       	movw	r24, r20
     3d2:	b9 01       	movw	r22, r18
     3d4:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
     3d8:	2f ef       	ldi	r18, 0xFF	; 255
     3da:	89 e6       	ldi	r24, 0x69	; 105
     3dc:	98 e1       	ldi	r25, 0x18	; 24
     3de:	21 50       	subi	r18, 0x01	; 1
     3e0:	80 40       	sbci	r24, 0x00	; 0
     3e2:	90 40       	sbci	r25, 0x00	; 0
     3e4:	e1 f7       	brne	.-8      	; 0x3de <__vector_6+0xb0>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <__vector_6+0xba>
     3e8:	00 00       	nop
    _delay_ms(500);

    //turn left
    USART0_send_string((unsigned char *)"Turning Left\r");
     3ea:	87 e4       	ldi	r24, 0x47	; 71
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    move(50 + TURN_SPEED,50 - TURN_SPEED,STABLE_Z);
     3f2:	60 91 1a 02 	lds	r22, 0x021A
     3f6:	70 91 1b 02 	lds	r23, 0x021B
     3fa:	07 2e       	mov	r0, r23
     3fc:	00 0c       	add	r0, r0
     3fe:	88 0b       	sbc	r24, r24
     400:	99 0b       	sbc	r25, r25
     402:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     406:	7b 01       	movw	r14, r22
     408:	8c 01       	movw	r16, r24
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	4c e0       	ldi	r20, 0x0C	; 12
     410:	52 e4       	ldi	r21, 0x42	; 66
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	82 e8       	ldi	r24, 0x82	; 130
     418:	92 e4       	ldi	r25, 0x42	; 66
     41a:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
     41e:	2f ef       	ldi	r18, 0xFF	; 255
     420:	83 ed       	ldi	r24, 0xD3	; 211
     422:	90 e3       	ldi	r25, 0x30	; 48
     424:	21 50       	subi	r18, 0x01	; 1
     426:	80 40       	sbci	r24, 0x00	; 0
     428:	90 40       	sbci	r25, 0x00	; 0
     42a:	e1 f7       	brne	.-8      	; 0x424 <__vector_6+0xf6>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <__vector_6+0x100>
     42e:	00 00       	nop
    _delay_ms(1000);
    USART0_send_string((unsigned char*)"Resuming\r");
     430:	8b e2       	ldi	r24, 0x2B	; 43
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
}
     438:	ff 91       	pop	r31
     43a:	ef 91       	pop	r30
     43c:	bf 91       	pop	r27
     43e:	af 91       	pop	r26
     440:	9f 91       	pop	r25
     442:	8f 91       	pop	r24
     444:	7f 91       	pop	r23
     446:	6f 91       	pop	r22
     448:	5f 91       	pop	r21
     44a:	4f 91       	pop	r20
     44c:	3f 91       	pop	r19
     44e:	2f 91       	pop	r18
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	0f 90       	pop	r0
     45a:	0b be       	out	0x3b, r0	; 59
     45c:	0f 90       	pop	r0
     45e:	0f be       	out	0x3f, r0	; 63
     460:	0f 90       	pop	r0
     462:	1f 90       	pop	r1
     464:	18 95       	reti

00000466 <__vector_26>:
        Depth: ddd.dddddd
        Object: (NO | YES)
        Heading: ddd.dddddd
        Water Level: (OK | WARNING | ERROR) : dd.dd
*******************/
ISR(TIMER3_COMPA_vect){ 
     466:	1f 92       	push	r1
     468:	0f 92       	push	r0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	0f 92       	push	r0
     46e:	11 24       	eor	r1, r1
     470:	0b b6       	in	r0, 0x3b	; 59
     472:	0f 92       	push	r0
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	2f 93       	push	r18
     47a:	3f 93       	push	r19
     47c:	4f 93       	push	r20
     47e:	5f 93       	push	r21
     480:	6f 93       	push	r22
     482:	7f 93       	push	r23
     484:	8f 93       	push	r24
     486:	9f 93       	push	r25
     488:	af 93       	push	r26
     48a:	bf 93       	push	r27
     48c:	ef 93       	push	r30
     48e:	ff 93       	push	r31
    USART0_send_string((unsigned char *)"Depth: ");
     490:	85 e5       	ldi	r24, 0x55	; 85
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    USART0_send_string((unsigned char *)dtostrf(get_depth_feet(),3,7,buffer));
     498:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <get_depth_feet>
     49c:	00 e2       	ldi	r16, 0x20	; 32
     49e:	12 e0       	ldi	r17, 0x02	; 2
     4a0:	27 e0       	ldi	r18, 0x07	; 7
     4a2:	43 e0       	ldi	r20, 0x03	; 3
     4a4:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <dtostrf>
     4a8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    USART0_send_string((unsigned char*)"\r");
     4ac:	80 ee       	ldi	r24, 0xE0	; 224
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    USART0_send_string((unsigned char*)"Object: ");
     4b4:	8d e5       	ldi	r24, 0x5D	; 93
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    if (object_detected){
     4bc:	80 91 18 02 	lds	r24, 0x0218
     4c0:	90 91 19 02 	lds	r25, 0x0219
     4c4:	89 2b       	or	r24, r25
     4c6:	c9 f5       	brne	.+114    	; 0x53a <__vector_26+0xd4>
        USART0_send_string((unsigned char*)"YES");
        object_detected = 0;
    }
    else {
        USART0_send_string((unsigned char*)"NO");
     4c8:	8a e6       	ldi	r24, 0x6A	; 106
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    }
    USART0_send_string((unsigned char*)"\r");
     4d0:	80 ee       	ldi	r24, 0xE0	; 224
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    USART0_send_string((unsigned char*)"Heading: ");
     4d8:	8d e6       	ldi	r24, 0x6D	; 109
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    USART0_send_string((unsigned char*)"Not yet implemented");
     4e0:	87 e7       	ldi	r24, 0x77	; 119
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    USART0_send_string((unsigned char*)"\r");
     4e8:	80 ee       	ldi	r24, 0xE0	; 224
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    USART0_send_string((unsigned char*)"Water Level: ");
     4f0:	8b e8       	ldi	r24, 0x8B	; 139
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    USART0_send_string((unsigned char*)"Not yet implemented");
     4f8:	87 e7       	ldi	r24, 0x77	; 119
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    USART0_send_string((unsigned char*)"\r");
     500:	80 ee       	ldi	r24, 0xE0	; 224
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    USART0_send_string((unsigned char*)"\r");
     508:	80 ee       	ldi	r24, 0xE0	; 224
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
}
     510:	ff 91       	pop	r31
     512:	ef 91       	pop	r30
     514:	bf 91       	pop	r27
     516:	af 91       	pop	r26
     518:	9f 91       	pop	r25
     51a:	8f 91       	pop	r24
     51c:	7f 91       	pop	r23
     51e:	6f 91       	pop	r22
     520:	5f 91       	pop	r21
     522:	4f 91       	pop	r20
     524:	3f 91       	pop	r19
     526:	2f 91       	pop	r18
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	0f 90       	pop	r0
     52e:	0b be       	out	0x3b, r0	; 59
     530:	0f 90       	pop	r0
     532:	0f be       	out	0x3f, r0	; 63
     534:	0f 90       	pop	r0
     536:	1f 90       	pop	r1
     538:	18 95       	reti
    USART0_send_string((unsigned char *)"Depth: ");
    USART0_send_string((unsigned char *)dtostrf(get_depth_feet(),3,7,buffer));
    USART0_send_string((unsigned char*)"\r");
    USART0_send_string((unsigned char*)"Object: ");
    if (object_detected){
        USART0_send_string((unsigned char*)"YES");
     53a:	86 e6       	ldi	r24, 0x66	; 102
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
        object_detected = 0;
     542:	10 92 19 02 	sts	0x0219, r1
     546:	10 92 18 02 	sts	0x0218, r1
     54a:	c2 cf       	rjmp	.-124    	; 0x4d0 <__vector_26+0x6a>

0000054c <dive>:
    }

    return 0;
}

void dive(float depth){
     54c:	4f 92       	push	r4
     54e:	5f 92       	push	r5
     550:	6f 92       	push	r6
     552:	7f 92       	push	r7
     554:	8f 92       	push	r8
     556:	9f 92       	push	r9
     558:	af 92       	push	r10
     55a:	bf 92       	push	r11
     55c:	ef 92       	push	r14
     55e:	ff 92       	push	r15
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	2b 01       	movw	r4, r22
     566:	3c 01       	movw	r6, r24
    float current_depth = 0;
    while (current_depth < depth){
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	a9 01       	movw	r20, r18
     56e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__gesf2>
     572:	18 16       	cp	r1, r24
     574:	5c f5       	brge	.+86     	; 0x5cc <dive+0x80>
        current_depth = get_depth_feet();
     576:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <get_depth_feet>
     57a:	4b 01       	movw	r8, r22
     57c:	5c 01       	movw	r10, r24
        move(50,50,STABLE_Z + 20);
     57e:	60 91 1a 02 	lds	r22, 0x021A
     582:	70 91 1b 02 	lds	r23, 0x021B
     586:	6c 5e       	subi	r22, 0xEC	; 236
     588:	7f 4f       	sbci	r23, 0xFF	; 255
     58a:	07 2e       	mov	r0, r23
     58c:	00 0c       	add	r0, r0
     58e:	88 0b       	sbc	r24, r24
     590:	99 0b       	sbc	r25, r25
     592:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     596:	7b 01       	movw	r14, r22
     598:	8c 01       	movw	r16, r24
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	48 e4       	ldi	r20, 0x48	; 72
     5a0:	52 e4       	ldi	r21, 0x42	; 66
     5a2:	ca 01       	movw	r24, r20
     5a4:	b9 01       	movw	r22, r18
     5a6:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
     5aa:	2f ef       	ldi	r18, 0xFF	; 255
     5ac:	81 ee       	ldi	r24, 0xE1	; 225
     5ae:	94 e0       	ldi	r25, 0x04	; 4
     5b0:	21 50       	subi	r18, 0x01	; 1
     5b2:	80 40       	sbci	r24, 0x00	; 0
     5b4:	90 40       	sbci	r25, 0x00	; 0
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <dive+0x64>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <dive+0x6e>
     5ba:	00 00       	nop
    return 0;
}

void dive(float depth){
    float current_depth = 0;
    while (current_depth < depth){
     5bc:	a5 01       	movw	r20, r10
     5be:	94 01       	movw	r18, r8
     5c0:	c3 01       	movw	r24, r6
     5c2:	b2 01       	movw	r22, r4
     5c4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__gesf2>
     5c8:	18 16       	cp	r1, r24
     5ca:	ac f2       	brlt	.-86     	; 0x576 <dive+0x2a>
        current_depth = get_depth_feet();
        move(50,50,STABLE_Z + 20);
        _delay_ms(100);
    }
    move(50,50,STABLE_Z);
     5cc:	60 91 1a 02 	lds	r22, 0x021A
     5d0:	70 91 1b 02 	lds	r23, 0x021B
     5d4:	07 2e       	mov	r0, r23
     5d6:	00 0c       	add	r0, r0
     5d8:	88 0b       	sbc	r24, r24
     5da:	99 0b       	sbc	r25, r25
     5dc:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     5e0:	7b 01       	movw	r14, r22
     5e2:	8c 01       	movw	r16, r24
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	48 e4       	ldi	r20, 0x48	; 72
     5ea:	52 e4       	ldi	r21, 0x42	; 66
     5ec:	ca 01       	movw	r24, r20
     5ee:	b9 01       	movw	r22, r18
     5f0:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
}
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	bf 90       	pop	r11
     5fe:	af 90       	pop	r10
     600:	9f 90       	pop	r9
     602:	8f 90       	pop	r8
     604:	7f 90       	pop	r7
     606:	6f 90       	pop	r6
     608:	5f 90       	pop	r5
     60a:	4f 90       	pop	r4
     60c:	08 95       	ret

0000060e <enable_bumpers>:

void enable_bumpers(){
    //Set pins as inputs
    DDRE &= ~(1 << 4);
     60e:	14 98       	cbi	0x02, 4	; 2
    DDRE &= ~(1 << 5);
     610:	15 98       	cbi	0x02, 5	; 2
    
    //Enable internal pullups
    PORTE |= (1 << 4);
     612:	1c 9a       	sbi	0x03, 4	; 3
    PORTE |= (1 << 5);
     614:	1d 9a       	sbi	0x03, 5	; 3

    //Set both interrupt 4 and 5 to falling edge
    EICRB |= (1 << ISC41);
     616:	8a b7       	in	r24, 0x3a	; 58
     618:	82 60       	ori	r24, 0x02	; 2
     61a:	8a bf       	out	0x3a, r24	; 58
    EICRB |= (1 << ISC51);
     61c:	8a b7       	in	r24, 0x3a	; 58
     61e:	88 60       	ori	r24, 0x08	; 8
     620:	8a bf       	out	0x3a, r24	; 58

    //enable the interrupts
    EIMSK |= (1 << INT4) | (1 << INT5);
     622:	89 b7       	in	r24, 0x39	; 57
     624:	80 63       	ori	r24, 0x30	; 48
     626:	89 bf       	out	0x39, r24	; 57
     628:	08 95       	ret

0000062a <init_data_timer>:
}
void init_data_timer(){
    //CTC Mode
    TCCR3A |= (1 << COM3A1);
     62a:	eb e8       	ldi	r30, 0x8B	; 139
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	80 68       	ori	r24, 0x80	; 128
     632:	80 83       	st	Z, r24
    TCCR3A &= ~(1 << COM3A0);
     634:	80 81       	ld	r24, Z
     636:	8f 7b       	andi	r24, 0xBF	; 191
     638:	80 83       	st	Z, r24

    //Prescalar 256
    TCCR3B |= (1 << CS32);
     63a:	ea e8       	ldi	r30, 0x8A	; 138
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	84 60       	ori	r24, 0x04	; 4
     642:	80 83       	st	Z, r24

    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     644:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     646:	f8 94       	cli
    /* Set TCNTn to 1 */
    TCNT3 = 1;
     648:	21 e0       	ldi	r18, 0x01	; 1
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	30 93 89 00 	sts	0x0089, r19
     650:	20 93 88 00 	sts	0x0088, r18
    sei();
     654:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     656:	8f bf       	out	0x3f, r24	; 63
    ICR3 = 65535;
     658:	8f ef       	ldi	r24, 0xFF	; 255
     65a:	9f ef       	ldi	r25, 0xFF	; 255
     65c:	90 93 81 00 	sts	0x0081, r25
     660:	80 93 80 00 	sts	0x0080, r24
    OCR3A = 65535;
     664:	90 93 87 00 	sts	0x0087, r25
     668:	80 93 86 00 	sts	0x0086, r24

    //Enable timer3a interrupt
    ETIMSK = (1 << OCIE3A);
     66c:	80 e1       	ldi	r24, 0x10	; 16
     66e:	80 93 7d 00 	sts	0x007D, r24
     672:	08 95       	ret

00000674 <path1>:

}

void path1(){
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r");
     67c:	89 e9       	ldi	r24, 0x99	; 153
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    move(50 + (MOVE_SPEED/2),50 + (MOVE_SPEED/2),STABLE_Z);
     684:	60 91 1a 02 	lds	r22, 0x021A
     688:	70 91 1b 02 	lds	r23, 0x021B
     68c:	07 2e       	mov	r0, r23
     68e:	00 0c       	add	r0, r0
     690:	88 0b       	sbc	r24, r24
     692:	99 0b       	sbc	r25, r25
     694:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     698:	7b 01       	movw	r14, r22
     69a:	8c 01       	movw	r16, r24
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	46 e9       	ldi	r20, 0x96	; 150
     6a2:	52 e4       	ldi	r21, 0x42	; 66
     6a4:	ca 01       	movw	r24, r20
     6a6:	b9 01       	movw	r22, r18
     6a8:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
     6ac:	2f ef       	ldi	r18, 0xFF	; 255
     6ae:	87 ea       	ldi	r24, 0xA7	; 167
     6b0:	91 e6       	ldi	r25, 0x61	; 97
     6b2:	21 50       	subi	r18, 0x01	; 1
     6b4:	80 40       	sbci	r24, 0x00	; 0
     6b6:	90 40       	sbci	r25, 0x00	; 0
     6b8:	e1 f7       	brne	.-8      	; 0x6b2 <path1+0x3e>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <path1+0x48>
     6bc:	00 00       	nop
    _delay_ms(2000);
    //Down 3 seconds (aim for about 4 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Down");
    USART0_send_string((unsigned char*)"Move Down\r");
     6be:	87 ea       	ldi	r24, 0xA7	; 167
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    move (50,50,0);
     6c6:	e1 2c       	mov	r14, r1
     6c8:	f1 2c       	mov	r15, r1
     6ca:	87 01       	movw	r16, r14
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	48 e4       	ldi	r20, 0x48	; 72
     6d2:	52 e4       	ldi	r21, 0x42	; 66
     6d4:	ca 01       	movw	r24, r20
     6d6:	b9 01       	movw	r22, r18
     6d8:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
     6dc:	2f ef       	ldi	r18, 0xFF	; 255
     6de:	8b e7       	ldi	r24, 0x7B	; 123
     6e0:	92 e9       	ldi	r25, 0x92	; 146
     6e2:	21 50       	subi	r18, 0x01	; 1
     6e4:	80 40       	sbci	r24, 0x00	; 0
     6e6:	90 40       	sbci	r25, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <path1+0x6e>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <path1+0x78>
     6ec:	00 00       	nop
    _delay_ms(3000);
    //spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    USART0_send_string((unsigned char*)"Turn Left\r");
     6ee:	82 eb       	ldi	r24, 0xB2	; 178
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     6f6:	60 91 1a 02 	lds	r22, 0x021A
     6fa:	70 91 1b 02 	lds	r23, 0x021B
     6fe:	07 2e       	mov	r0, r23
     700:	00 0c       	add	r0, r0
     702:	88 0b       	sbc	r24, r24
     704:	99 0b       	sbc	r25, r25
     706:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     70a:	7b 01       	movw	r14, r22
     70c:	8c 01       	movw	r16, r24
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	46 e9       	ldi	r20, 0x96	; 150
     714:	52 e4       	ldi	r21, 0x42	; 66
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	88 ec       	ldi	r24, 0xC8	; 200
     71c:	91 e4       	ldi	r25, 0x41	; 65
     71e:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
     722:	2f ef       	ldi	r18, 0xFF	; 255
     724:	87 ea       	ldi	r24, 0xA7	; 167
     726:	91 e6       	ldi	r25, 0x61	; 97
     728:	21 50       	subi	r18, 0x01	; 1
     72a:	80 40       	sbci	r24, 0x00	; 0
     72c:	90 40       	sbci	r25, 0x00	; 0
     72e:	e1 f7       	brne	.-8      	; 0x728 <path1+0xb4>
     730:	00 c0       	rjmp	.+0      	; 0x732 <path1+0xbe>
     732:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r");
     734:	89 e9       	ldi	r24, 0x99	; 153
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     73c:	60 91 1a 02 	lds	r22, 0x021A
     740:	70 91 1b 02 	lds	r23, 0x021B
     744:	07 2e       	mov	r0, r23
     746:	00 0c       	add	r0, r0
     748:	88 0b       	sbc	r24, r24
     74a:	99 0b       	sbc	r25, r25
     74c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     750:	7b 01       	movw	r14, r22
     752:	8c 01       	movw	r16, r24
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	46 e9       	ldi	r20, 0x96	; 150
     75a:	52 e4       	ldi	r21, 0x42	; 66
     75c:	ca 01       	movw	r24, r20
     75e:	b9 01       	movw	r22, r18
     760:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
     764:	2f ef       	ldi	r18, 0xFF	; 255
     766:	87 ea       	ldi	r24, 0xA7	; 167
     768:	91 e6       	ldi	r25, 0x61	; 97
     76a:	21 50       	subi	r18, 0x01	; 1
     76c:	80 40       	sbci	r24, 0x00	; 0
     76e:	90 40       	sbci	r25, 0x00	; 0
     770:	e1 f7       	brne	.-8      	; 0x76a <path1+0xf6>
     772:	00 c0       	rjmp	.+0      	; 0x774 <path1+0x100>
     774:	00 00       	nop
    _delay_ms(2000);
    //Spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    USART0_send_string((unsigned char*)"Turn Left\r");
     776:	82 eb       	ldi	r24, 0xB2	; 178
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     77e:	60 91 1a 02 	lds	r22, 0x021A
     782:	70 91 1b 02 	lds	r23, 0x021B
     786:	07 2e       	mov	r0, r23
     788:	00 0c       	add	r0, r0
     78a:	88 0b       	sbc	r24, r24
     78c:	99 0b       	sbc	r25, r25
     78e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     792:	7b 01       	movw	r14, r22
     794:	8c 01       	movw	r16, r24
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	46 e9       	ldi	r20, 0x96	; 150
     79c:	52 e4       	ldi	r21, 0x42	; 66
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	88 ec       	ldi	r24, 0xC8	; 200
     7a4:	91 e4       	ldi	r25, 0x41	; 65
     7a6:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
     7aa:	2f ef       	ldi	r18, 0xFF	; 255
     7ac:	87 ea       	ldi	r24, 0xA7	; 167
     7ae:	91 e6       	ldi	r25, 0x61	; 97
     7b0:	21 50       	subi	r18, 0x01	; 1
     7b2:	80 40       	sbci	r24, 0x00	; 0
     7b4:	90 40       	sbci	r25, 0x00	; 0
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <path1+0x13c>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <path1+0x146>
     7ba:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r");
     7bc:	89 e9       	ldi	r24, 0x99	; 153
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     7c4:	60 91 1a 02 	lds	r22, 0x021A
     7c8:	70 91 1b 02 	lds	r23, 0x021B
     7cc:	07 2e       	mov	r0, r23
     7ce:	00 0c       	add	r0, r0
     7d0:	88 0b       	sbc	r24, r24
     7d2:	99 0b       	sbc	r25, r25
     7d4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     7d8:	7b 01       	movw	r14, r22
     7da:	8c 01       	movw	r16, r24
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	46 e9       	ldi	r20, 0x96	; 150
     7e2:	52 e4       	ldi	r21, 0x42	; 66
     7e4:	ca 01       	movw	r24, r20
     7e6:	b9 01       	movw	r22, r18
     7e8:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
     7ec:	2f ef       	ldi	r18, 0xFF	; 255
     7ee:	87 ea       	ldi	r24, 0xA7	; 167
     7f0:	91 e6       	ldi	r25, 0x61	; 97
     7f2:	21 50       	subi	r18, 0x01	; 1
     7f4:	80 40       	sbci	r24, 0x00	; 0
     7f6:	90 40       	sbci	r25, 0x00	; 0
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <path1+0x17e>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <path1+0x188>
     7fc:	00 00       	nop
    _delay_ms(2000);
    //Up 3 seconds (resurface)
    // clear_display();
    // string2lcd((unsigned char *)"Up");
    USART0_send_string((unsigned char*)"Move Up\r");
     7fe:	8d eb       	ldi	r24, 0xBD	; 189
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    move(50,50,100);
     806:	e1 2c       	mov	r14, r1
     808:	f1 2c       	mov	r15, r1
     80a:	08 ec       	ldi	r16, 0xC8	; 200
     80c:	12 e4       	ldi	r17, 0x42	; 66
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	48 e4       	ldi	r20, 0x48	; 72
     814:	52 e4       	ldi	r21, 0x42	; 66
     816:	ca 01       	movw	r24, r20
     818:	b9 01       	movw	r22, r18
     81a:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
    //Spin left 90 degrees
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r");
     81e:	89 e9       	ldi	r24, 0x99	; 153
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     826:	60 91 1a 02 	lds	r22, 0x021A
     82a:	70 91 1b 02 	lds	r23, 0x021B
     82e:	07 2e       	mov	r0, r23
     830:	00 0c       	add	r0, r0
     832:	88 0b       	sbc	r24, r24
     834:	99 0b       	sbc	r25, r25
     836:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     83a:	7b 01       	movw	r14, r22
     83c:	8c 01       	movw	r16, r24
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	46 e9       	ldi	r20, 0x96	; 150
     844:	52 e4       	ldi	r21, 0x42	; 66
     846:	ca 01       	movw	r24, r20
     848:	b9 01       	movw	r22, r18
     84a:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
    //Spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    USART0_send_string((unsigned char*)"Turn Left\r");
     84e:	82 eb       	ldi	r24, 0xB2	; 178
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     856:	60 91 1a 02 	lds	r22, 0x021A
     85a:	70 91 1b 02 	lds	r23, 0x021B
     85e:	07 2e       	mov	r0, r23
     860:	00 0c       	add	r0, r0
     862:	88 0b       	sbc	r24, r24
     864:	99 0b       	sbc	r25, r25
     866:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     86a:	7b 01       	movw	r14, r22
     86c:	8c 01       	movw	r16, r24
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	46 e9       	ldi	r20, 0x96	; 150
     874:	52 e4       	ldi	r21, 0x42	; 66
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	88 ec       	ldi	r24, 0xC8	; 200
     87c:	91 e4       	ldi	r25, 0x41	; 65
     87e:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
     882:	2f ef       	ldi	r18, 0xFF	; 255
     884:	87 ea       	ldi	r24, 0xA7	; 167
     886:	91 e6       	ldi	r25, 0x61	; 97
     888:	21 50       	subi	r18, 0x01	; 1
     88a:	80 40       	sbci	r24, 0x00	; 0
     88c:	90 40       	sbci	r25, 0x00	; 0
     88e:	e1 f7       	brne	.-8      	; 0x888 <path1+0x214>
     890:	00 c0       	rjmp	.+0      	; 0x892 <path1+0x21e>
     892:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Complete (back in some position as start)
}
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	ff 90       	pop	r15
     89a:	ef 90       	pop	r14
     89c:	08 95       	ret

0000089e <path2>:
     89e:	08 95       	ret

000008a0 <path3>:
void path2(){
    //Implement if necessary
}
void path3(){
     8a0:	08 95       	ret

000008a2 <turn>:
    //Implement if necessary
}

void turn(int degrees){
     8a2:	cf 92       	push	r12
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	ec 01       	movw	r28, r24
    int *x = 0;
    int *y = 0;
    int *z = 0;
    float headingDegrees = getHeading(x,y,z);
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <getHeading>
     8c4:	6b 01       	movw	r12, r22
     8c6:	7c 01       	movw	r14, r24
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
     8c8:	be 01       	movw	r22, r28
     8ca:	0d 2e       	mov	r0, r29
     8cc:	00 0c       	add	r0, r0
     8ce:	88 0b       	sbc	r24, r24
     8d0:	99 0b       	sbc	r25, r25
     8d2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     8d6:	a7 01       	movw	r20, r14
     8d8:	96 01       	movw	r18, r12
     8da:	0e 94 0d 0b 	call	0x161a	; 0x161a <__addsf3>
     8de:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fixsfsi>
     8e2:	cb 01       	movw	r24, r22
     8e4:	68 e6       	ldi	r22, 0x68	; 104
     8e6:	71 e0       	ldi	r23, 0x01	; 1
     8e8:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__divmodhi4>
     8ec:	8c 01       	movw	r16, r24
    if (degrees < 0){
     8ee:	d7 fd       	sbrc	r29, 7
     8f0:	29 c0       	rjmp	.+82     	; 0x944 <turn+0xa2>
        while ((int)headingDegrees != new_heading){
            move(-TURN_SPEED,TURN_SPEED,50);
            getHeading(x,y,z);
        }
    }
    else if (degrees > 0){
     8f2:	cd 2b       	or	r28, r29
     8f4:	f1 f0       	breq	.+60     	; 0x932 <turn+0x90>
        //Spin right until new heading
        while ((int)headingDegrees != (int)new_heading){
     8f6:	c7 01       	movw	r24, r14
     8f8:	b6 01       	movw	r22, r12
     8fa:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fixsfsi>
     8fe:	06 17       	cp	r16, r22
     900:	17 07       	cpc	r17, r23
     902:	b9 f0       	breq	.+46     	; 0x932 <turn+0x90>
            move(TURN_SPEED,-TURN_SPEED,50);
     904:	e1 2c       	mov	r14, r1
     906:	f1 2c       	mov	r15, r1
     908:	08 e4       	ldi	r16, 0x48	; 72
     90a:	12 e4       	ldi	r17, 0x42	; 66
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e7       	ldi	r20, 0x70	; 112
     912:	51 ec       	ldi	r21, 0xC1	; 193
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	80 e7       	ldi	r24, 0x70	; 112
     91a:	91 e4       	ldi	r25, 0x41	; 65
     91c:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
            getHeading(x,y,z);
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <getHeading>
     930:	e9 cf       	rjmp	.-46     	; 0x904 <turn+0x62>
        }
    }
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	cf 90       	pop	r12
     942:	08 95       	ret
    float headingDegrees = getHeading(x,y,z);
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
    if (degrees < 0){
        //Spin left until new heading
        while ((int)headingDegrees != new_heading){
     944:	c7 01       	movw	r24, r14
     946:	b6 01       	movw	r22, r12
     948:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fixsfsi>
     94c:	06 17       	cp	r16, r22
     94e:	17 07       	cpc	r17, r23
     950:	81 f3       	breq	.-32     	; 0x932 <turn+0x90>
            move(-TURN_SPEED,TURN_SPEED,50);
     952:	e1 2c       	mov	r14, r1
     954:	f1 2c       	mov	r15, r1
     956:	08 e4       	ldi	r16, 0x48	; 72
     958:	12 e4       	ldi	r17, 0x42	; 66
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 e7       	ldi	r20, 0x70	; 112
     960:	51 e4       	ldi	r21, 0x41	; 65
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	80 e7       	ldi	r24, 0x70	; 112
     968:	91 ec       	ldi	r25, 0xC1	; 193
     96a:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
            getHeading(x,y,z);
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <getHeading>
     97e:	e9 cf       	rjmp	.-46     	; 0x952 <turn+0xb0>

00000980 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     980:	88 e4       	ldi	r24, 0x48	; 72
     982:	80 93 70 00 	sts	0x0070, r24
     986:	08 95       	ret

00000988 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     988:	10 92 74 00 	sts	0x0074, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     98c:	94 ea       	ldi	r25, 0xA4	; 164
     98e:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     992:	90 91 74 00 	lds	r25, 0x0074
     996:	97 ff       	sbrs	r25, 7
     998:	fc cf       	rjmp	.-8      	; 0x992 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     99a:	90 91 71 00 	lds	r25, 0x0071
     99e:	98 7f       	andi	r25, 0xF8	; 248
     9a0:	98 30       	cpi	r25, 0x08	; 8
     9a2:	11 f0       	breq	.+4      	; 0x9a8 <i2c_start+0x20>
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
     9a8:	80 93 73 00 	sts	0x0073, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     9ac:	84 e8       	ldi	r24, 0x84	; 132
     9ae:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     9b2:	80 91 74 00 	lds	r24, 0x0074
     9b6:	87 ff       	sbrs	r24, 7
     9b8:	fc cf       	rjmp	.-8      	; 0x9b2 <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     9ba:	80 91 71 00 	lds	r24, 0x0071
     9be:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     9c0:	88 31       	cpi	r24, 0x18	; 24
     9c2:	11 f0       	breq	.+4      	; 0x9c8 <i2c_start+0x40>
     9c4:	80 34       	cpi	r24, 0x40	; 64
     9c6:	71 f7       	brne	.-36     	; 0x9a4 <i2c_start+0x1c>
	
	return 0;
     9c8:	80 e0       	ldi	r24, 0x00	; 0
}
     9ca:	08 95       	ret

000009cc <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     9cc:	80 93 73 00 	sts	0x0073, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     9d0:	84 e8       	ldi	r24, 0x84	; 132
     9d2:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     9d6:	80 91 74 00 	lds	r24, 0x0074
     9da:	87 ff       	sbrs	r24, 7
     9dc:	fc cf       	rjmp	.-8      	; 0x9d6 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     9de:	90 91 71 00 	lds	r25, 0x0071
     9e2:	98 7f       	andi	r25, 0xF8	; 248
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	98 32       	cpi	r25, 0x28	; 40
     9e8:	09 f0       	breq	.+2      	; 0x9ec <i2c_write+0x20>
	
	return 0;
}
     9ea:	08 95       	ret
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     9ec:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     9ee:	08 95       	ret

000009f0 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     9f0:	84 ec       	ldi	r24, 0xC4	; 196
     9f2:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     9f6:	80 91 74 00 	lds	r24, 0x0074
     9fa:	87 ff       	sbrs	r24, 7
     9fc:	fc cf       	rjmp	.-8      	; 0x9f6 <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
     9fe:	80 91 73 00 	lds	r24, 0x0073
}
     a02:	08 95       	ret

00000a04 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     a04:	84 e8       	ldi	r24, 0x84	; 132
     a06:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a0a:	80 91 74 00 	lds	r24, 0x0074
     a0e:	87 ff       	sbrs	r24, 7
     a10:	fc cf       	rjmp	.-8      	; 0xa0a <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
     a12:	80 91 73 00 	lds	r24, 0x0073
}
     a16:	08 95       	ret

00000a18 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	8b 01       	movw	r16, r22
     a22:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     a24:	0e 94 c4 04 	call	0x988	; 0x988 <i2c_start>
     a28:	81 11       	cpse	r24, r1
     a2a:	1f c0       	rjmp	.+62     	; 0xa6a <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
     a2c:	20 97       	sbiw	r28, 0x00	; 0
     a2e:	a9 f0       	breq	.+42     	; 0xa5a <i2c_transmit+0x42>
     a30:	f8 01       	movw	r30, r16
     a32:	c0 0f       	add	r28, r16
     a34:	d1 1f       	adc	r29, r17
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     a36:	24 e8       	ldi	r18, 0x84	; 132
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     a38:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     a3a:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     a3e:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a42:	90 91 74 00 	lds	r25, 0x0074
     a46:	97 ff       	sbrs	r25, 7
     a48:	fc cf       	rjmp	.-8      	; 0xa42 <i2c_transmit+0x2a>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     a4a:	90 91 71 00 	lds	r25, 0x0071
     a4e:	98 7f       	andi	r25, 0xF8	; 248
     a50:	98 32       	cpi	r25, 0x28	; 40
     a52:	59 f4       	brne	.+22     	; 0xa6a <i2c_transmit+0x52>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
     a54:	ec 17       	cp	r30, r28
     a56:	fd 07       	cpc	r31, r29
     a58:	79 f7       	brne	.-34     	; 0xa38 <i2c_transmit+0x20>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     a5a:	94 e9       	ldi	r25, 0x94	; 148
     a5c:	90 93 74 00 	sts	0x0074, r25
	}
	
	i2c_stop();
	
	return 0;
}
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	08 95       	ret
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	08 95       	ret

00000a76 <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	8b 01       	movw	r16, r22
     a80:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_READ)) return 1;
     a82:	81 60       	ori	r24, 0x01	; 1
     a84:	0e 94 c4 04 	call	0x988	; 0x988 <i2c_start>
     a88:	81 11       	cpse	r24, r1
     a8a:	25 c0       	rjmp	.+74     	; 0xad6 <i2c_receive+0x60>
	
	for (uint16_t i = 0; i < (length-1); i++)
     a8c:	de 01       	movw	r26, r28
     a8e:	11 97       	sbiw	r26, 0x01	; 1
     a90:	41 f1       	breq	.+80     	; 0xae2 <i2c_receive+0x6c>
     a92:	f8 01       	movw	r30, r16
     a94:	a0 0f       	add	r26, r16
     a96:	b1 1f       	adc	r27, r17

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     a98:	24 ec       	ldi	r18, 0xC4	; 196
     a9a:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a9e:	90 91 74 00 	lds	r25, 0x0074
     aa2:	97 ff       	sbrs	r25, 7
     aa4:	fc cf       	rjmp	.-8      	; 0xa9e <i2c_receive+0x28>
	// return received data from TWDR
	return TWDR;
     aa6:	90 91 73 00 	lds	r25, 0x0073
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     aaa:	91 93       	st	Z+, r25

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
     aac:	ae 17       	cp	r26, r30
     aae:	bf 07       	cpc	r27, r31
     ab0:	a1 f7       	brne	.-24     	; 0xa9a <i2c_receive+0x24>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     ab2:	94 e8       	ldi	r25, 0x84	; 132
     ab4:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     ab8:	90 91 74 00 	lds	r25, 0x0074
     abc:	97 ff       	sbrs	r25, 7
     abe:	fc cf       	rjmp	.-8      	; 0xab8 <i2c_receive+0x42>
	// return received data from TWDR
	return TWDR;
     ac0:	90 91 73 00 	lds	r25, 0x0073
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     ac4:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     ac6:	94 e9       	ldi	r25, 0x94	; 148
     ac8:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	08 95       	ret
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
     ad6:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	08 95       	ret
     ae2:	d8 01       	movw	r26, r16
     ae4:	e6 cf       	rjmp	.-52     	; 0xab2 <i2c_receive+0x3c>

00000ae6 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	16 2f       	mov	r17, r22
     af2:	f4 2e       	mov	r15, r20
     af4:	05 2f       	mov	r16, r21
     af6:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr | 0x00)) return 1;
     af8:	0e 94 c4 04 	call	0x988	; 0x988 <i2c_start>
     afc:	81 11       	cpse	r24, r1
     afe:	2c c0       	rjmp	.+88     	; 0xb58 <i2c_writeReg+0x72>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     b00:	10 93 73 00 	sts	0x0073, r17
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     b04:	94 e8       	ldi	r25, 0x84	; 132
     b06:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     b0a:	90 91 74 00 	lds	r25, 0x0074
     b0e:	97 ff       	sbrs	r25, 7
     b10:	fc cf       	rjmp	.-8      	; 0xb0a <i2c_writeReg+0x24>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     b12:	90 91 71 00 	lds	r25, 0x0071
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     b16:	20 97       	sbiw	r28, 0x00	; 0
     b18:	b1 f0       	breq	.+44     	; 0xb46 <i2c_writeReg+0x60>
     b1a:	ef 2d       	mov	r30, r15
     b1c:	f0 2f       	mov	r31, r16
     b1e:	ce 0f       	add	r28, r30
     b20:	df 1f       	adc	r29, r31
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     b22:	44 e8       	ldi	r20, 0x84	; 132

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     b24:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     b26:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     b2a:	40 93 74 00 	sts	0x0074, r20
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     b2e:	90 91 74 00 	lds	r25, 0x0074
     b32:	97 ff       	sbrs	r25, 7
     b34:	fc cf       	rjmp	.-8      	; 0xb2e <i2c_writeReg+0x48>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     b36:	90 91 71 00 	lds	r25, 0x0071
     b3a:	98 7f       	andi	r25, 0xF8	; 248
     b3c:	98 32       	cpi	r25, 0x28	; 40
     b3e:	61 f4       	brne	.+24     	; 0xb58 <i2c_writeReg+0x72>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     b40:	ec 17       	cp	r30, r28
     b42:	fd 07       	cpc	r31, r29
     b44:	79 f7       	brne	.-34     	; 0xb24 <i2c_writeReg+0x3e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     b46:	94 e9       	ldi	r25, 0x94	; 148
     b48:	90 93 74 00 	sts	0x0074, r25
	}

	i2c_stop();

	return 0;
}
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	08 95       	ret
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
     b58:	81 e0       	ldi	r24, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	08 95       	ret

00000b66 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	18 2f       	mov	r17, r24
     b74:	06 2f       	mov	r16, r22
     b76:	7a 01       	movw	r14, r20
     b78:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
     b7a:	0e 94 c4 04 	call	0x988	; 0x988 <i2c_start>
     b7e:	81 11       	cpse	r24, r1
     b80:	38 c0       	rjmp	.+112    	; 0xbf2 <i2c_readReg+0x8c>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     b82:	00 93 73 00 	sts	0x0073, r16
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     b86:	84 e8       	ldi	r24, 0x84	; 132
     b88:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     b8c:	80 91 74 00 	lds	r24, 0x0074
     b90:	87 ff       	sbrs	r24, 7
     b92:	fc cf       	rjmp	.-8      	; 0xb8c <i2c_readReg+0x26>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     b94:	80 91 71 00 	lds	r24, 0x0071
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
     b98:	81 2f       	mov	r24, r17
     b9a:	81 60       	ori	r24, 0x01	; 1
     b9c:	0e 94 c4 04 	call	0x988	; 0x988 <i2c_start>
     ba0:	81 11       	cpse	r24, r1
     ba2:	27 c0       	rjmp	.+78     	; 0xbf2 <i2c_readReg+0x8c>

	for (uint16_t i = 0; i < (length-1); i++)
     ba4:	de 01       	movw	r26, r28
     ba6:	11 97       	sbiw	r26, 0x01	; 1
     ba8:	61 f1       	breq	.+88     	; 0xc02 <i2c_readReg+0x9c>
     baa:	f7 01       	movw	r30, r14
     bac:	ae 0d       	add	r26, r14
     bae:	bf 1d       	adc	r27, r15

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     bb0:	24 ec       	ldi	r18, 0xC4	; 196
     bb2:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     bb6:	90 91 74 00 	lds	r25, 0x0074
     bba:	97 ff       	sbrs	r25, 7
     bbc:	fc cf       	rjmp	.-8      	; 0xbb6 <i2c_readReg+0x50>
	// return received data from TWDR
	return TWDR;
     bbe:	90 91 73 00 	lds	r25, 0x0073

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     bc2:	91 93       	st	Z+, r25

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
     bc4:	ea 17       	cp	r30, r26
     bc6:	fb 07       	cpc	r31, r27
     bc8:	a1 f7       	brne	.-24     	; 0xbb2 <i2c_readReg+0x4c>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     bca:	94 e8       	ldi	r25, 0x84	; 132
     bcc:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     bd0:	90 91 74 00 	lds	r25, 0x0074
     bd4:	97 ff       	sbrs	r25, 7
     bd6:	fc cf       	rjmp	.-8      	; 0xbd0 <i2c_readReg+0x6a>
	// return received data from TWDR
	return TWDR;
     bd8:	90 91 73 00 	lds	r25, 0x0073

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     bdc:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     bde:	94 e9       	ldi	r25, 0x94	; 148
     be0:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	08 95       	ret
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	08 95       	ret
     c02:	d7 01       	movw	r26, r14
     c04:	e2 cf       	rjmp	.-60     	; 0xbca <i2c_readReg+0x64>

00000c06 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     c06:	84 e9       	ldi	r24, 0x94	; 148
     c08:	80 93 74 00 	sts	0x0074, r24
     c0c:	08 95       	ret

00000c0e <enable_adc>:
#include "./adc.h"


void enable_adc(){
	DDRF = 0x00;
     c0e:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0x00;
     c12:	10 92 62 00 	sts	0x0062, r1
	//internally wire REFSn bits in the ADMUX register to connect VREF 
		//to internal 2.56v reference --> 0.0025 v/step
	//ADMUX = (1 << REFS0) | (1 << REFS1); //2.56v
	ADMUX = (1 << REFS0); //AVCC
     c16:	80 e4       	ldi	r24, 0x40	; 64
     c18:	87 b9       	out	0x07, r24	; 7
	//Single ended input, gain is not allowed
	
	//Default Right Adjusted

	//Set ADEN in ADSCRA to enable ADC
	ADCSRA = (1 << ADEN);
     c1a:	80 e8       	ldi	r24, 0x80	; 128
     c1c:	86 b9       	out	0x06, r24	; 6
	//Set the ADC Clock frequency prescaler to 128 --> 125kHz
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     c1e:	86 b1       	in	r24, 0x06	; 6
     c20:	87 60       	ori	r24, 0x07	; 7
     c22:	86 b9       	out	0x06, r24	; 6
	//Set free running mode
	//ADCSRA |= (1 << ADFR);
	//Enable the ADC Interrupt Flag
	//ADCSRA |= (1 << ADIE);
	//Start first conversion by setting ADSC in ADCSRA
	ADCSRA |= (1 << ADSC);
     c24:	36 9a       	sbi	0x06, 6	; 6
     c26:	08 95       	ret

00000c28 <read_adc>:

}
int read_adc(int pin){
     c28:	fc 01       	movw	r30, r24
	int data;
	if (pin > 7){
     c2a:	08 97       	sbiw	r24, 0x08	; 8
     c2c:	fc f4       	brge	.+62     	; 0xc6c <read_adc+0x44>
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	50 e0       	ldi	r21, 0x00	; 0
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
		ADMUX &= ~(1 << i);
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	97 b1       	in	r25, 0x07	; 7
     c38:	9b 01       	movw	r18, r22
     c3a:	04 2e       	mov	r0, r20
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <read_adc+0x18>
     c3e:	22 0f       	add	r18, r18
     c40:	0a 94       	dec	r0
     c42:	ea f7       	brpl	.-6      	; 0xc3e <read_adc+0x16>
     c44:	20 95       	com	r18
     c46:	29 23       	and	r18, r25
     c48:	27 b9       	out	0x07, r18	; 7
	if (pin > 7){
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
     c4a:	4f 5f       	subi	r20, 0xFF	; 255
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255
     c4e:	45 30       	cpi	r20, 0x05	; 5
     c50:	51 05       	cpc	r21, r1
     c52:	89 f7       	brne	.-30     	; 0xc36 <read_adc+0xe>
		ADMUX &= ~(1 << i);
	}
	//set the new mux bit
	ADMUX |= pin;
     c54:	97 b1       	in	r25, 0x07	; 7
     c56:	89 2f       	mov	r24, r25
     c58:	8e 2b       	or	r24, r30
     c5a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
     c5c:	36 9a       	sbi	0x06, 6	; 6
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
     c5e:	34 9b       	sbis	0x06, 4	; 6
     c60:	fe cf       	rjmp	.-4      	; 0xc5e <read_adc+0x36>
	data = ADCL;
     c62:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);
     c64:	25 b1       	in	r18, 0x05	; 5
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	92 2b       	or	r25, r18
     c6a:	08 95       	ret

}
int read_adc(int pin){
	int data;
	if (pin > 7){
		return -1;
     c6c:	8f ef       	ldi	r24, 0xFF	; 255
     c6e:	9f ef       	ldi	r25, 0xFF	; 255
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
	data = ADCL;
	data |= (ADCH << 8);
	return data;
}
     c70:	08 95       	ret

00000c72 <get_voltage>:
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
     c72:	88 30       	cpi	r24, 0x08	; 8
     c74:	91 05       	cpc	r25, r1
     c76:	20 f0       	brcs	.+8      	; 0xc80 <get_voltage+0xe>
		return 0;
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	cb 01       	movw	r24, r22
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
}
     c7e:	08 95       	ret
}
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
		return 0;
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
     c80:	0e 94 14 06 	call	0xc28	; 0xc28 <read_adc>
     c84:	bc 01       	movw	r22, r24
     c86:	99 0f       	add	r25, r25
     c88:	88 0b       	sbc	r24, r24
     c8a:	99 0b       	sbc	r25, r25
     c8c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 ea       	ldi	r20, 0xA0	; 160
     c96:	5b e3       	ldi	r21, 0x3B	; 59
     c98:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__mulsf3>
     c9c:	08 95       	ret

00000c9e <strobe_lcd>:
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     c9e:	e2 e6       	ldi	r30, 0x62	; 98
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	88 60       	ori	r24, 0x08	; 8
     ca6:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     ca8:	80 81       	ld	r24, Z
     caa:	87 7f       	andi	r24, 0xF7	; 247
     cac:	80 83       	st	Z, r24
     cae:	08 95       	ret

00000cb0 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     cb0:	77 9b       	sbis	0x0e, 7	; 14
     cb2:	fe cf       	rjmp	.-4      	; 0xcb0 <clear_display>
    SPDR = 0x00;    //command, not data
     cb4:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     cb6:	77 9b       	sbis	0x0e, 7	; 14
     cb8:	fe cf       	rjmp	.-4      	; 0xcb6 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     cbe:	77 9b       	sbis	0x0e, 7	; 14
     cc0:	fe cf       	rjmp	.-4      	; 0xcbe <clear_display+0xe>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     cc2:	80 91 62 00 	lds	r24, 0x0062
     cc6:	88 60       	ori	r24, 0x08	; 8
     cc8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     ccc:	80 91 62 00 	lds	r24, 0x0062
     cd0:	87 7f       	andi	r24, 0xF7	; 247
     cd2:	80 93 62 00 	sts	0x0062, r24
     cd6:	8f e9       	ldi	r24, 0x9F	; 159
     cd8:	98 e2       	ldi	r25, 0x28	; 40
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <clear_display+0x2a>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <clear_display+0x30>
     ce0:	00 00       	nop
     ce2:	08 95       	ret

00000ce4 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     ce4:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ce6:	77 9b       	sbis	0x0e, 7	; 14
     ce8:	fe cf       	rjmp	.-4      	; 0xce6 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     cea:	80 ec       	ldi	r24, 0xC0	; 192
     cec:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     cee:	77 9b       	sbis	0x0e, 7	; 14
     cf0:	fe cf       	rjmp	.-4      	; 0xcee <home_line2+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     cf2:	80 91 62 00 	lds	r24, 0x0062
     cf6:	88 60       	ori	r24, 0x08	; 8
     cf8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     cfc:	80 91 62 00 	lds	r24, 0x0062
     d00:	87 7f       	andi	r24, 0xF7	; 247
     d02:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d06:	85 ec       	ldi	r24, 0xC5	; 197
     d08:	8a 95       	dec	r24
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <home_line2+0x24>
     d0c:	00 00       	nop
     d0e:	08 95       	ret

00000d10 <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     d14:	77 9b       	sbis	0x0e, 7	; 14
     d16:	fe cf       	rjmp	.-4      	; 0xd14 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     d18:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     d1a:	77 9b       	sbis	0x0e, 7	; 14
     d1c:	fe cf       	rjmp	.-4      	; 0xd1a <char2lcd+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     d1e:	80 91 62 00 	lds	r24, 0x0062
     d22:	88 60       	ori	r24, 0x08	; 8
     d24:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     d28:	80 91 62 00 	lds	r24, 0x0062
     d2c:	87 7f       	andi	r24, 0xF7	; 247
     d2e:	80 93 62 00 	sts	0x0062, r24
     d32:	85 ec       	ldi	r24, 0xC5	; 197
     d34:	8a 95       	dec	r24
     d36:	f1 f7       	brne	.-4      	; 0xd34 <char2lcd+0x24>
     d38:	00 00       	nop
     d3a:	08 95       	ret

00000d3c <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	fc 01       	movw	r30, r24
     d42:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     d48:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     d4a:	77 9b       	sbis	0x0e, 7	; 14
     d4c:	fe cf       	rjmp	.-4      	; 0xd4a <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     d4e:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     d50:	77 9b       	sbis	0x0e, 7	; 14
     d52:	fe cf       	rjmp	.-4      	; 0xd50 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     d54:	8d 91       	ld	r24, X+
     d56:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     d58:	77 9b       	sbis	0x0e, 7	; 14
     d5a:	fe cf       	rjmp	.-4      	; 0xd58 <string2lcd+0x1c>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     d5c:	90 91 62 00 	lds	r25, 0x0062
     d60:	98 60       	ori	r25, 0x08	; 8
     d62:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     d66:	90 91 62 00 	lds	r25, 0x0062
     d6a:	97 7f       	andi	r25, 0xF7	; 247
     d6c:	90 93 62 00 	sts	0x0062, r25
     d70:	85 ec       	ldi	r24, 0xC5	; 197
     d72:	8a 95       	dec	r24
     d74:	f1 f7       	brne	.-4      	; 0xd72 <string2lcd+0x36>
     d76:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     d78:	4f 5f       	subi	r20, 0xFF	; 255
     d7a:	5f 4f       	sbci	r21, 0xFF	; 255
     d7c:	ef 01       	movw	r28, r30
     d7e:	09 90       	ld	r0, Y+
     d80:	00 20       	and	r0, r0
     d82:	e9 f7       	brne	.-6      	; 0xd7e <string2lcd+0x42>
     d84:	9e 01       	movw	r18, r28
     d86:	2e 1b       	sub	r18, r30
     d88:	3f 0b       	sbc	r19, r31
     d8a:	22 50       	subi	r18, 0x02	; 2
     d8c:	31 09       	sbc	r19, r1
     d8e:	24 17       	cp	r18, r20
     d90:	35 07       	cpc	r19, r21
     d92:	d8 f6       	brcc	.-74     	; 0xd4a <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     d9a:	e1 e6       	ldi	r30, 0x61	; 97
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	88 60       	ori	r24, 0x08	; 8
     da2:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     da4:	88 b3       	in	r24, 0x18	; 24
     da6:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     da8:	87 b3       	in	r24, 0x17	; 23
     daa:	87 60       	ori	r24, 0x07	; 7
     dac:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     dae:	80 e5       	ldi	r24, 0x50	; 80
     db0:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	8e b9       	out	0x0e, r24	; 14
     db6:	08 95       	ret

00000db8 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     db8:	8f e5       	ldi	r24, 0x5F	; 95
     dba:	9a ee       	ldi	r25, 0xEA	; 234
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <lcd_init+0x4>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <lcd_init+0xa>
     dc2:	00 00       	nop
     dc4:	23 e0       	ldi	r18, 0x03	; 3
     dc6:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     dc8:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     dca:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     dcc:	77 9b       	sbis	0x0e, 7	; 14
     dce:	fe cf       	rjmp	.-4      	; 0xdcc <lcd_init+0x14>
        SPDR = 0x30;
     dd0:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     dd2:	77 9b       	sbis	0x0e, 7	; 14
     dd4:	fe cf       	rjmp	.-4      	; 0xdd2 <lcd_init+0x1a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     dd6:	80 91 62 00 	lds	r24, 0x0062
     dda:	88 60       	ori	r24, 0x08	; 8
     ddc:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     de0:	80 91 62 00 	lds	r24, 0x0062
     de4:	87 7f       	andi	r24, 0xF7	; 247
     de6:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dea:	85 ec       	ldi	r24, 0xC5	; 197
     dec:	8a 95       	dec	r24
     dee:	f1 f7       	brne	.-4      	; 0xdec <lcd_init+0x34>
     df0:	00 00       	nop
     df2:	21 50       	subi	r18, 0x01	; 1
     df4:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     df6:	49 f7       	brne	.-46     	; 0xdca <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     df8:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     dfa:	77 9b       	sbis	0x0e, 7	; 14
     dfc:	fe cf       	rjmp	.-4      	; 0xdfa <lcd_init+0x42>
    SPDR = 0x38;
     dfe:	88 e3       	ldi	r24, 0x38	; 56
     e00:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e02:	77 9b       	sbis	0x0e, 7	; 14
     e04:	fe cf       	rjmp	.-4      	; 0xe02 <lcd_init+0x4a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     e06:	80 91 62 00 	lds	r24, 0x0062
     e0a:	88 60       	ori	r24, 0x08	; 8
     e0c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     e10:	80 91 62 00 	lds	r24, 0x0062
     e14:	87 7f       	andi	r24, 0xF7	; 247
     e16:	80 93 62 00 	sts	0x0062, r24
     e1a:	95 ec       	ldi	r25, 0xC5	; 197
     e1c:	9a 95       	dec	r25
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <lcd_init+0x64>
     e20:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     e22:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e24:	77 9b       	sbis	0x0e, 7	; 14
     e26:	fe cf       	rjmp	.-4      	; 0xe24 <lcd_init+0x6c>
    SPDR = 0x08;
     e28:	88 e0       	ldi	r24, 0x08	; 8
     e2a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e2c:	77 9b       	sbis	0x0e, 7	; 14
     e2e:	fe cf       	rjmp	.-4      	; 0xe2c <lcd_init+0x74>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     e30:	80 91 62 00 	lds	r24, 0x0062
     e34:	88 60       	ori	r24, 0x08	; 8
     e36:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     e3a:	80 91 62 00 	lds	r24, 0x0062
     e3e:	87 7f       	andi	r24, 0xF7	; 247
     e40:	80 93 62 00 	sts	0x0062, r24
     e44:	85 ec       	ldi	r24, 0xC5	; 197
     e46:	8a 95       	dec	r24
     e48:	f1 f7       	brne	.-4      	; 0xe46 <lcd_init+0x8e>
     e4a:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     e4c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e4e:	77 9b       	sbis	0x0e, 7	; 14
     e50:	fe cf       	rjmp	.-4      	; 0xe4e <lcd_init+0x96>
    SPDR = 0x01;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e56:	77 9b       	sbis	0x0e, 7	; 14
     e58:	fe cf       	rjmp	.-4      	; 0xe56 <lcd_init+0x9e>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     e5a:	80 91 62 00 	lds	r24, 0x0062
     e5e:	88 60       	ori	r24, 0x08	; 8
     e60:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     e64:	80 91 62 00 	lds	r24, 0x0062
     e68:	87 7f       	andi	r24, 0xF7	; 247
     e6a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	98 e1       	ldi	r25, 0x18	; 24
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <lcd_init+0xba>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <lcd_init+0xc0>
     e78:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
     e7a:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e7c:	77 9b       	sbis	0x0e, 7	; 14
     e7e:	fe cf       	rjmp	.-4      	; 0xe7c <lcd_init+0xc4>
    SPDR = 0x06;
     e80:	86 e0       	ldi	r24, 0x06	; 6
     e82:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e84:	77 9b       	sbis	0x0e, 7	; 14
     e86:	fe cf       	rjmp	.-4      	; 0xe84 <lcd_init+0xcc>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     e88:	80 91 62 00 	lds	r24, 0x0062
     e8c:	88 60       	ori	r24, 0x08	; 8
     e8e:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     e92:	80 91 62 00 	lds	r24, 0x0062
     e96:	87 7f       	andi	r24, 0xF7	; 247
     e98:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e9c:	95 ec       	ldi	r25, 0xC5	; 197
     e9e:	9a 95       	dec	r25
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <lcd_init+0xe6>
     ea2:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     ea4:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ea6:	77 9b       	sbis	0x0e, 7	; 14
     ea8:	fe cf       	rjmp	.-4      	; 0xea6 <lcd_init+0xee>
    SPDR = 0x0E;
     eaa:	8e e0       	ldi	r24, 0x0E	; 14
     eac:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     eae:	77 9b       	sbis	0x0e, 7	; 14
     eb0:	fe cf       	rjmp	.-4      	; 0xeae <lcd_init+0xf6>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     eb2:	80 91 62 00 	lds	r24, 0x0062
     eb6:	88 60       	ori	r24, 0x08	; 8
     eb8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     ebc:	80 91 62 00 	lds	r24, 0x0062
     ec0:	87 7f       	andi	r24, 0xF7	; 247
     ec2:	80 93 62 00 	sts	0x0062, r24
     ec6:	85 ec       	ldi	r24, 0xC5	; 197
     ec8:	8a 95       	dec	r24
     eca:	f1 f7       	brne	.-4      	; 0xec8 <lcd_init+0x110>
     ecc:	00 00       	nop
     ece:	08 95       	ret

00000ed0 <USART1_Init>:
#include "uart.h"


void USART1_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     ed0:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
     ed4:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     ed8:	88 e1       	ldi	r24, 0x18	; 24
     eda:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (3<<UCSZ10);
     ede:	86 e0       	ldi	r24, 0x06	; 6
     ee0:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ee4:	2f ef       	ldi	r18, 0xFF	; 255
     ee6:	81 ee       	ldi	r24, 0xE1	; 225
     ee8:	94 e0       	ldi	r25, 0x04	; 4
     eea:	21 50       	subi	r18, 0x01	; 1
     eec:	80 40       	sbci	r24, 0x00	; 0
     eee:	90 40       	sbci	r25, 0x00	; 0
     ef0:	e1 f7       	brne	.-8      	; 0xeea <USART1_Init+0x1a>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <USART1_Init+0x24>
     ef4:	00 00       	nop
     ef6:	08 95       	ret

00000ef8 <USART1_Transmit>:
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     ef8:	90 91 9b 00 	lds	r25, 0x009B
     efc:	95 ff       	sbrs	r25, 5
     efe:	fc cf       	rjmp	.-8      	; 0xef8 <USART1_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     f00:	80 93 9c 00 	sts	0x009C, r24
     f04:	08 95       	ret

00000f06 <USART1_send_string>:
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     f06:	fc 01       	movw	r30, r24
     f08:	20 81       	ld	r18, Z
     f0a:	22 23       	and	r18, r18
     f0c:	51 f0       	breq	.+20     	; 0xf22 <USART1_send_string+0x1c>
     f0e:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     f10:	90 91 9b 00 	lds	r25, 0x009B
     f14:	95 ff       	sbrs	r25, 5
     f16:	fc cf       	rjmp	.-8      	; 0xf10 <USART1_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     f18:	20 93 9c 00 	sts	0x009C, r18
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     f1c:	21 91       	ld	r18, Z+
     f1e:	21 11       	cpse	r18, r1
     f20:	f7 cf       	rjmp	.-18     	; 0xf10 <USART1_send_string+0xa>
     f22:	08 95       	ret

00000f24 <USART1_Receive>:
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     f24:	80 91 9b 00 	lds	r24, 0x009B
     f28:	87 ff       	sbrs	r24, 7
     f2a:	fc cf       	rjmp	.-8      	; 0xf24 <USART1_Receive>
    return UDR1;
     f2c:	80 91 9c 00 	lds	r24, 0x009C
}
     f30:	08 95       	ret

00000f32 <USART1_Receive_String>:

void USART1_Receive_String(unsigned char *str){
     f32:	dc 01       	movw	r26, r24
     f34:	fc 01       	movw	r30, r24
     f36:	9c 01       	movw	r18, r24
     f38:	2b 5f       	subi	r18, 0xFB	; 251
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     f3c:	90 91 9b 00 	lds	r25, 0x009B
     f40:	97 ff       	sbrs	r25, 7
     f42:	fc cf       	rjmp	.-8      	; 0xf3c <USART1_Receive_String+0xa>
    return UDR1;
     f44:	90 91 9c 00 	lds	r25, 0x009C

void USART1_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     f48:	9e 37       	cpi	r25, 0x7E	; 126
     f4a:	29 f0       	breq	.+10     	; 0xf56 <USART1_Receive_String+0x24>
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
     f4c:	e2 17       	cp	r30, r18
     f4e:	f3 07       	cpc	r31, r19
     f50:	19 f0       	breq	.+6      	; 0xf58 <USART1_Receive_String+0x26>
            str[2] = 75;
            str[3] = END_STRING;
            str[4] = '\0';
            break;
        }
        str[i] = c;
     f52:	91 93       	st	Z+, r25
     f54:	f3 cf       	rjmp	.-26     	; 0xf3c <USART1_Receive_String+0xa>
     f56:	08 95       	ret
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
     f58:	82 e3       	ldi	r24, 0x32	; 50
     f5a:	8c 93       	st	X, r24
            str[1] = 25;
     f5c:	89 e1       	ldi	r24, 0x19	; 25
     f5e:	11 96       	adiw	r26, 0x01	; 1
     f60:	8c 93       	st	X, r24
     f62:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 75;
     f64:	8b e4       	ldi	r24, 0x4B	; 75
     f66:	12 96       	adiw	r26, 0x02	; 2
     f68:	8c 93       	st	X, r24
     f6a:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
     f6c:	8e e7       	ldi	r24, 0x7E	; 126
     f6e:	13 96       	adiw	r26, 0x03	; 3
     f70:	8c 93       	st	X, r24
     f72:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
     f74:	14 96       	adiw	r26, 0x04	; 4
     f76:	1c 92       	st	X, r1
            break;
     f78:	08 95       	ret

00000f7a <USART1_flush>:
        str[i] = c;
        ++i;
    }
}

void USART1_flush(){
     f7a:	e9 e0       	ldi	r30, 0x09	; 9
     f7c:	f2 e0       	ldi	r31, 0x02	; 2
     f7e:	96 e4       	ldi	r25, 0x46	; 70
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     f80:	80 91 9b 00 	lds	r24, 0x009B
     f84:	85 ff       	sbrs	r24, 5
     f86:	fc cf       	rjmp	.-8      	; 0xf80 <USART1_flush+0x6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     f88:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     f8c:	91 91       	ld	r25, Z+
     f8e:	91 11       	cpse	r25, r1
     f90:	f7 cf       	rjmp	.-18     	; 0xf80 <USART1_flush+0x6>
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     f92:	80 91 9b 00 	lds	r24, 0x009B
     f96:	87 ff       	sbrs	r24, 7
     f98:	0c c0       	rjmp	.+24     	; 0xfb2 <USART1_flush+0x38>
        dummy = UDR1;
     f9a:	90 91 9c 00 	lds	r25, 0x009C
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     f9e:	80 91 9b 00 	lds	r24, 0x009B
     fa2:	85 ff       	sbrs	r24, 5
     fa4:	fc cf       	rjmp	.-8      	; 0xf9e <USART1_flush+0x24>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     fa6:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     faa:	80 91 9b 00 	lds	r24, 0x009B
     fae:	87 fd       	sbrc	r24, 7
     fb0:	f4 cf       	rjmp	.-24     	; 0xf9a <USART1_flush+0x20>
     fb2:	08 95       	ret

00000fb4 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     fb4:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
     fb8:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     fba:	88 e1       	ldi	r24, 0x18	; 24
     fbc:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */ 
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
     fbe:	8e e0       	ldi	r24, 0x0E	; 14
     fc0:	80 93 95 00 	sts	0x0095, r24
     fc4:	2f ef       	ldi	r18, 0xFF	; 255
     fc6:	81 ee       	ldi	r24, 0xE1	; 225
     fc8:	94 e0       	ldi	r25, 0x04	; 4
     fca:	21 50       	subi	r18, 0x01	; 1
     fcc:	80 40       	sbci	r24, 0x00	; 0
     fce:	90 40       	sbci	r25, 0x00	; 0
     fd0:	e1 f7       	brne	.-8      	; 0xfca <USART0_Init+0x16>
     fd2:	00 c0       	rjmp	.+0      	; 0xfd4 <USART0_Init+0x20>
     fd4:	00 00       	nop
     fd6:	08 95       	ret

00000fd8 <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     fd8:	5d 9b       	sbis	0x0b, 5	; 11
     fda:	fe cf       	rjmp	.-4      	; 0xfd8 <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     fdc:	8c b9       	out	0x0c, r24	; 12
     fde:	08 95       	ret

00000fe0 <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
     fe0:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
     fe2:	90 81       	ld	r25, Z
     fe4:	99 23       	and	r25, r25
     fe6:	39 f0       	breq	.+14     	; 0xff6 <USART0_send_string+0x16>
     fe8:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     fea:	5d 9b       	sbis	0x0b, 5	; 11
     fec:	fe cf       	rjmp	.-4      	; 0xfea <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     fee:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     ff0:	91 91       	ld	r25, Z+
     ff2:	91 11       	cpse	r25, r1
     ff4:	fa cf       	rjmp	.-12     	; 0xfea <USART0_send_string+0xa>
     ff6:	08 95       	ret

00000ff8 <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
     ff8:	80 e8       	ldi	r24, 0x80	; 128
     ffa:	9d e8       	ldi	r25, 0x8D	; 141
     ffc:	ab e5       	ldi	r26, 0x5B	; 91
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	04 c0       	rjmp	.+8      	; 0x100a <USART0_Receive+0x12>
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	a1 09       	sbc	r26, r1
    1006:	b1 09       	sbc	r27, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
    1008:	21 f0       	breq	.+8      	; 0x1012 <USART0_Receive+0x1a>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
    100a:	5f 9b       	sbis	0x0b, 7	; 11
    100c:	fa cf       	rjmp	.-12     	; 0x1002 <USART0_Receive+0xa>
            /* Get and return received data from buffer */ 
            return UDR0;
    100e:	8c b1       	in	r24, 0x0c	; 12
    1010:	08 95       	ret
        }
    } while (--timeout);
    return 255;
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    /********
    * This is the original
    ************/
    //while (!(UCSR0A & (1<<RXC0)));
    //return UDR0;
}
    1014:	08 95       	ret

00001016 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
    1016:	dc 01       	movw	r26, r24
    1018:	fc 01       	movw	r30, r24
    101a:	9c 01       	movw	r18, r24
    101c:	2b 5f       	subi	r18, 0xFB	; 251
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
    1020:	40 e8       	ldi	r20, 0x80	; 128
    1022:	5d e8       	ldi	r21, 0x8D	; 141
    1024:	6b e5       	ldi	r22, 0x5B	; 91
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <USART0_Receive_String+0x1e>
    102a:	41 50       	subi	r20, 0x01	; 1
    102c:	51 09       	sbc	r21, r1
    102e:	61 09       	sbc	r22, r1
    1030:	71 09       	sbc	r23, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
    1032:	61 f0       	breq	.+24     	; 0x104c <USART0_Receive_String+0x36>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
    1034:	5f 9b       	sbis	0x0b, 7	; 11
    1036:	f9 cf       	rjmp	.-14     	; 0x102a <USART0_Receive_String+0x14>
            /* Get and return received data from buffer */ 
            return UDR0;
    1038:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
    103a:	9e 37       	cpi	r25, 0x7E	; 126
    103c:	b1 f0       	breq	.+44     	; 0x106a <USART0_Receive_String+0x54>
        if (c == 255 || i > MAX_STRING_SIZE - 1){
    103e:	9f 3f       	cpi	r25, 0xFF	; 255
    1040:	29 f0       	breq	.+10     	; 0x104c <USART0_Receive_String+0x36>
    1042:	e2 17       	cp	r30, r18
    1044:	f3 07       	cpc	r31, r19
    1046:	11 f0       	breq	.+4      	; 0x104c <USART0_Receive_String+0x36>
            str[2] = 50;
            str[3] = END_STRING;
            str[4] = '\0';
            return;
        }
        str[i] = c;
    1048:	91 93       	st	Z+, r25
    104a:	ea cf       	rjmp	.-44     	; 0x1020 <USART0_Receive_String+0xa>
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
    104c:	82 e3       	ldi	r24, 0x32	; 50
    104e:	8c 93       	st	X, r24
            str[1] = 50;
    1050:	11 96       	adiw	r26, 0x01	; 1
    1052:	8c 93       	st	X, r24
    1054:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
    1056:	12 96       	adiw	r26, 0x02	; 2
    1058:	8c 93       	st	X, r24
    105a:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
    105c:	8e e7       	ldi	r24, 0x7E	; 126
    105e:	13 96       	adiw	r26, 0x03	; 3
    1060:	8c 93       	st	X, r24
    1062:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
    1064:	14 96       	adiw	r26, 0x04	; 4
    1066:	1c 92       	st	X, r1
            return;
    1068:	08 95       	ret
    106a:	08 95       	ret

0000106c <USART0_flush>:
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
    106c:	5f 9b       	sbis	0x0b, 7	; 11
    106e:	03 c0       	rjmp	.+6      	; 0x1076 <USART0_flush+0xa>
        dummy = UDR0;
    1070:	8c b1       	in	r24, 0x0c	; 12
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
    1072:	5f 99       	sbic	0x0b, 7	; 11
    1074:	fd cf       	rjmp	.-6      	; 0x1070 <USART0_flush+0x4>
    1076:	08 95       	ret

00001078 <init_esc>:
void init_motors(){
    init_esc();
    set_16bitPWM1();
}

void init_esc(){
    1078:	83 e0       	ldi	r24, 0x03	; 3
    107a:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
    107c:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    107e:	ef e6       	ldi	r30, 0x6F	; 111
    1080:	f7 e1       	ldi	r31, 0x17	; 23
    1082:	31 97       	sbiw	r30, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <init_esc+0xa>
    1086:	00 c0       	rjmp	.+0      	; 0x1088 <init_esc+0x10>
    1088:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
    108a:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    108c:	ff ef       	ldi	r31, 0xFF	; 255
    108e:	23 ed       	ldi	r18, 0xD3	; 211
    1090:	30 e3       	ldi	r19, 0x30	; 48
    1092:	f1 50       	subi	r31, 0x01	; 1
    1094:	20 40       	sbci	r18, 0x00	; 0
    1096:	30 40       	sbci	r19, 0x00	; 0
    1098:	e1 f7       	brne	.-8      	; 0x1092 <init_esc+0x1a>
    109a:	00 c0       	rjmp	.+0      	; 0x109c <init_esc+0x24>
    109c:	00 00       	nop
    109e:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
    10a0:	69 f7       	brne	.-38     	; 0x107c <init_esc+0x4>
        PORTB |= (1 << 4);
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
        _delay_ms(1000);
    }
}
    10a2:	08 95       	ret

000010a4 <set_16bitPWM1>:

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
    10a4:	8f b5       	in	r24, 0x2f	; 47
    10a6:	80 68       	ori	r24, 0x80	; 128
    10a8:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
    10aa:	8f b5       	in	r24, 0x2f	; 47
    10ac:	80 62       	ori	r24, 0x20	; 32
    10ae:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
    10b0:	8f b5       	in	r24, 0x2f	; 47
    10b2:	88 60       	ori	r24, 0x08	; 8
    10b4:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
    10b6:	8f b5       	in	r24, 0x2f	; 47
    10b8:	82 60       	ori	r24, 0x02	; 2
    10ba:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
    10bc:	8e b5       	in	r24, 0x2e	; 46
    10be:	88 61       	ori	r24, 0x18	; 24
    10c0:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
    10c2:	8e b5       	in	r24, 0x2e	; 46
    10c4:	82 60       	ori	r24, 0x02	; 2
    10c6:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
    10c8:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
    10ca:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
    10cc:	21 e0       	ldi	r18, 0x01	; 1
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	3d bd       	out	0x2d, r19	; 45
    10d2:	2c bd       	out	0x2c, r18	; 44
    sei();
    10d4:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
    10d6:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	9f ef       	ldi	r25, 0xFF	; 255
    10dc:	97 bd       	out	0x27, r25	; 39
    10de:	86 bd       	out	0x26, r24	; 38
    10e0:	2f ef       	ldi	r18, 0xFF	; 255
    10e2:	81 ee       	ldi	r24, 0xE1	; 225
    10e4:	94 e0       	ldi	r25, 0x04	; 4
    10e6:	21 50       	subi	r18, 0x01	; 1
    10e8:	80 40       	sbci	r24, 0x00	; 0
    10ea:	90 40       	sbci	r25, 0x00	; 0
    10ec:	e1 f7       	brne	.-8      	; 0x10e6 <set_16bitPWM1+0x42>
    10ee:	00 c0       	rjmp	.+0      	; 0x10f0 <set_16bitPWM1+0x4c>
    10f0:	00 00       	nop
    10f2:	08 95       	ret

000010f4 <init_motors>:
#include "motors.h"

void init_motors(){
    10f4:	83 e0       	ldi	r24, 0x03	; 3
    10f6:	90 e0       	ldi	r25, 0x00	; 0
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
    10f8:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10fa:	ef e6       	ldi	r30, 0x6F	; 111
    10fc:	f7 e1       	ldi	r31, 0x17	; 23
    10fe:	31 97       	sbiw	r30, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <init_motors+0xa>
    1102:	00 c0       	rjmp	.+0      	; 0x1104 <__stack+0x5>
    1104:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
    1106:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1108:	ff ef       	ldi	r31, 0xFF	; 255
    110a:	23 ed       	ldi	r18, 0xD3	; 211
    110c:	30 e3       	ldi	r19, 0x30	; 48
    110e:	f1 50       	subi	r31, 0x01	; 1
    1110:	20 40       	sbci	r18, 0x00	; 0
    1112:	30 40       	sbci	r19, 0x00	; 0
    1114:	e1 f7       	brne	.-8      	; 0x110e <__stack+0xf>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <__stack+0x19>
    1118:	00 00       	nop
    111a:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
    111c:	69 f7       	brne	.-38     	; 0x10f8 <init_motors+0x4>
#include "motors.h"

void init_motors(){
    init_esc();
    set_16bitPWM1();
    111e:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <set_16bitPWM1>

00001122 <TIM16_WriteTCNT1>:
    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
    1122:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
    1124:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
    1126:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
    1128:	3d bd       	out	0x2d, r19	; 45
    112a:	2c bd       	out	0x2c, r18	; 44
    sei();
    112c:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
    112e:	9f bf       	out	0x3f, r25	; 63
    1130:	08 95       	ret

00001132 <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
    1132:	4f 92       	push	r4
    1134:	5f 92       	push	r5
    1136:	6f 92       	push	r6
    1138:	7f 92       	push	r7
    113a:	8f 92       	push	r8
    113c:	9f 92       	push	r9
    113e:	af 92       	push	r10
    1140:	bf 92       	push	r11
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	2b 01       	movw	r4, r22
    1154:	3c 01       	movw	r6, r24
    1156:	49 01       	movw	r8, r18
    1158:	5a 01       	movw	r10, r20
    115a:	67 01       	movw	r12, r14
    115c:	78 01       	movw	r14, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 ef       	ldi	r20, 0xF0	; 240
    1164:	51 e4       	ldi	r21, 0x41	; 65
    1166:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__cmpsf2>
    116a:	87 fd       	sbrc	r24, 7
    116c:	64 c0       	rjmp	.+200    	; 0x1236 <move+0x104>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	4c e8       	ldi	r20, 0x8C	; 140
    1174:	52 e4       	ldi	r21, 0x42	; 66
    1176:	c3 01       	movw	r24, r6
    1178:	b2 01       	movw	r22, r4
    117a:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__gesf2>
    117e:	18 16       	cp	r1, r24
    1180:	0c f0       	brlt	.+2      	; 0x1184 <move+0x52>
    1182:	67 c0       	rjmp	.+206    	; 0x1252 <move+0x120>
    1184:	08 ef       	ldi	r16, 0xF8	; 248
    1186:	1c e0       	ldi	r17, 0x0C	; 12
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 ef       	ldi	r20, 0xF0	; 240
    118e:	51 e4       	ldi	r21, 0x41	; 65
    1190:	c5 01       	movw	r24, r10
    1192:	b4 01       	movw	r22, r8
    1194:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__cmpsf2>
    1198:	87 fd       	sbrc	r24, 7
    119a:	58 c0       	rjmp	.+176    	; 0x124c <move+0x11a>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	4c e8       	ldi	r20, 0x8C	; 140
    11a2:	52 e4       	ldi	r21, 0x42	; 66
    11a4:	c5 01       	movw	r24, r10
    11a6:	b4 01       	movw	r22, r8
    11a8:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__gesf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	0c f0       	brlt	.+2      	; 0x11b2 <move+0x80>
    11b0:	6d c0       	rjmp	.+218    	; 0x128c <move+0x15a>
    11b2:	c8 ef       	ldi	r28, 0xF8	; 248
    11b4:	dc e0       	ldi	r29, 0x0C	; 12
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + SATURATE_DIFFERENCE)){
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 ef       	ldi	r20, 0xF0	; 240
    11bc:	51 e4       	ldi	r21, 0x41	; 65
    11be:	c7 01       	movw	r24, r14
    11c0:	b6 01       	movw	r22, r12
    11c2:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__cmpsf2>
    11c6:	87 fd       	sbrc	r24, 7
    11c8:	39 c0       	rjmp	.+114    	; 0x123c <move+0x10a>
        z = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (z > (MAX_INPUT - SATURATE_DIFFERENCE)){
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	4c e8       	ldi	r20, 0x8C	; 140
    11d0:	52 e4       	ldi	r21, 0x42	; 66
    11d2:	c7 01       	movw	r24, r14
    11d4:	b6 01       	movw	r22, r12
    11d6:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__gesf2>
    11da:	18 16       	cp	r1, r24
    11dc:	0c f0       	brlt	.+2      	; 0x11e0 <move+0xae>
    11de:	4b c0       	rjmp	.+150    	; 0x1276 <move+0x144>
    11e0:	83 e3       	ldi	r24, 0x33	; 51
    11e2:	c8 2e       	mov	r12, r24
    11e4:	dc 2c       	mov	r13, r12
    11e6:	ec 2c       	mov	r14, r12
    11e8:	8f e3       	ldi	r24, 0x3F	; 63
    11ea:	f8 2e       	mov	r15, r24

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different speed controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
    11ec:	66 b5       	in	r22, 0x26	; 38
    11ee:	77 b5       	in	r23, 0x27	; 39
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 98 0c 	call	0x1930	; 0x1930 <__floatunsisf>
    11f8:	a7 01       	movw	r20, r14
    11fa:	96 01       	movw	r18, r12
    11fc:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__mulsf3>
    1200:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__fixunssfsi>
    OCR1A = left_speed;
    1204:	1b bd       	out	0x2b, r17	; 43
    1206:	0a bd       	out	0x2a, r16	; 42
    OCR1B = right_speed;
    1208:	d9 bd       	out	0x29, r29	; 41
    120a:	c8 bd       	out	0x28, r28	; 40
    OCR1C = z_speed;
    120c:	70 93 79 00 	sts	0x0079, r23
    1210:	60 93 78 00 	sts	0x0078, r22

}
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	bf 90       	pop	r11
    1226:	af 90       	pop	r10
    1228:	9f 90       	pop	r9
    122a:	8f 90       	pop	r8
    122c:	7f 90       	pop	r7
    122e:	6f 90       	pop	r6
    1230:	5f 90       	pop	r5
    1232:	4f 90       	pop	r4
    1234:	08 95       	ret
    1236:	08 e7       	ldi	r16, 0x78	; 120
    1238:	1a e0       	ldi	r17, 0x0A	; 10
    123a:	a6 cf       	rjmp	.-180    	; 0x1188 <move+0x56>
    123c:	9a e9       	ldi	r25, 0x9A	; 154
    123e:	c9 2e       	mov	r12, r25
    1240:	99 e9       	ldi	r25, 0x99	; 153
    1242:	d9 2e       	mov	r13, r25
    1244:	ed 2c       	mov	r14, r13
    1246:	9e e3       	ldi	r25, 0x3E	; 62
    1248:	f9 2e       	mov	r15, r25
    124a:	d0 cf       	rjmp	.-96     	; 0x11ec <move+0xba>
    124c:	c8 e7       	ldi	r28, 0x78	; 120
    124e:	da e0       	ldi	r29, 0x0A	; 10
    1250:	b2 cf       	rjmp	.-156    	; 0x11b6 <move+0x84>
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e8       	ldi	r20, 0x80	; 128
    1258:	51 e4       	ldi	r21, 0x41	; 65
    125a:	c3 01       	movw	r24, r6
    125c:	b2 01       	movw	r22, r4
    125e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__mulsf3>
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e8       	ldi	r19, 0x80	; 128
    1266:	49 e0       	ldi	r20, 0x09	; 9
    1268:	55 e4       	ldi	r21, 0x45	; 69
    126a:	0e 94 0d 0b 	call	0x161a	; 0x161a <__addsf3>
    126e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__fixunssfsi>
    1272:	8b 01       	movw	r16, r22
    1274:	89 cf       	rjmp	.-238    	; 0x1188 <move+0x56>
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	48 ec       	ldi	r20, 0xC8	; 200
    127c:	52 e4       	ldi	r21, 0x42	; 66
    127e:	c7 01       	movw	r24, r14
    1280:	b6 01       	movw	r22, r12
    1282:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divsf3>
    1286:	6b 01       	movw	r12, r22
    1288:	7c 01       	movw	r14, r24
    128a:	b0 cf       	rjmp	.-160    	; 0x11ec <move+0xba>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	51 e4       	ldi	r21, 0x41	; 65
    1294:	c5 01       	movw	r24, r10
    1296:	b4 01       	movw	r22, r8
    1298:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__mulsf3>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e8       	ldi	r19, 0x80	; 128
    12a0:	49 e0       	ldi	r20, 0x09	; 9
    12a2:	55 e4       	ldi	r21, 0x45	; 69
    12a4:	0e 94 0d 0b 	call	0x161a	; 0x161a <__addsf3>
    12a8:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__fixunssfsi>
    12ac:	eb 01       	movw	r28, r22
    12ae:	83 cf       	rjmp	.-250    	; 0x11b6 <move+0x84>

000012b0 <init_HMC5883L>:
#include "magnometer.h"

void init_HMC5883L(void){

    i2c_start(HMC5883L_WRITE);
    12b0:	8c e3       	ldi	r24, 0x3C	; 60
    12b2:	0e 94 c4 04 	call	0x988	; 0x988 <i2c_start>
    i2c_write(0x00); // set pointer to CRA
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <i2c_write>
    i2c_write(0x70); // write 0x70 to CRA
    12bc:	80 e7       	ldi	r24, 0x70	; 112
    12be:	0e 94 e6 04 	call	0x9cc	; 0x9cc <i2c_write>
    i2c_stop();
    12c2:	0e 94 03 06 	call	0xc06	; 0xc06 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
    12c6:	8c e3       	ldi	r24, 0x3C	; 60
    12c8:	0e 94 c4 04 	call	0x988	; 0x988 <i2c_start>
    i2c_write(0x01); // set pointer to CRB
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	0e 94 e6 04 	call	0x9cc	; 0x9cc <i2c_write>
    i2c_write(0xA0);
    12d2:	80 ea       	ldi	r24, 0xA0	; 160
    12d4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <i2c_write>
    i2c_stop();
    12d8:	0e 94 03 06 	call	0xc06	; 0xc06 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
    12dc:	8c e3       	ldi	r24, 0x3C	; 60
    12de:	0e 94 c4 04 	call	0x988	; 0x988 <i2c_start>
    i2c_write(0x02); // set pointer to measurement mode
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <i2c_write>
    i2c_write(0x00); // continous measurement
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	0e 94 e6 04 	call	0x9cc	; 0x9cc <i2c_write>
    i2c_stop();
    12ee:	0c 94 03 06 	jmp	0xc06	; 0xc06 <i2c_stop>

000012f2 <getHeading>:
}
float getHeading(int16_t *x, int16_t *y, int16_t *z){
    12f2:	cf 92       	push	r12
    12f4:	df 92       	push	r13
    12f6:	ef 92       	push	r14
    12f8:	ff 92       	push	r15
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	8c 01       	movw	r16, r24
    1304:	eb 01       	movw	r28, r22
    1306:	7a 01       	movw	r14, r20

    float headingDegrees;
    
    i2c_start(HMC5883L_WRITE);
    1308:	8c e3       	ldi	r24, 0x3C	; 60
    130a:	0e 94 c4 04 	call	0x988	; 0x988 <i2c_start>
    i2c_write(0x03); // set pointer to X axis MSB
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	0e 94 e6 04 	call	0x9cc	; 0x9cc <i2c_write>
    i2c_stop();
    1314:	0e 94 03 06 	call	0xc06	; 0xc06 <i2c_stop>

    i2c_start(HMC5883L_READ);
    1318:	8d e3       	ldi	r24, 0x3D	; 61
    131a:	0e 94 c4 04 	call	0x988	; 0x988 <i2c_start>

    *x = ((uint8_t)i2c_read_ack())<<8;
    131e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <i2c_read_ack>
    1322:	f8 01       	movw	r30, r16
    1324:	10 82       	st	Z, r1
    1326:	81 83       	std	Z+1, r24	; 0x01
    *x |= i2c_read_ack();
    1328:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <i2c_read_ack>
    132c:	f8 01       	movw	r30, r16
    132e:	20 81       	ld	r18, Z
    1330:	31 81       	ldd	r19, Z+1	; 0x01
    1332:	28 2b       	or	r18, r24
    1334:	31 83       	std	Z+1, r19	; 0x01
    1336:	20 83       	st	Z, r18

    *z = ((uint8_t)i2c_read_ack())<<8;
    1338:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <i2c_read_ack>
    133c:	f7 01       	movw	r30, r14
    133e:	10 82       	st	Z, r1
    1340:	81 83       	std	Z+1, r24	; 0x01
    *z |= i2c_read_ack();
    1342:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <i2c_read_ack>
    1346:	f7 01       	movw	r30, r14
    1348:	20 81       	ld	r18, Z
    134a:	31 81       	ldd	r19, Z+1	; 0x01
    134c:	28 2b       	or	r18, r24
    134e:	31 83       	std	Z+1, r19	; 0x01
    1350:	20 83       	st	Z, r18

    *y = ((uint8_t)i2c_read_ack())<<8;
    1352:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <i2c_read_ack>
    1356:	18 82       	st	Y, r1
    1358:	89 83       	std	Y+1, r24	; 0x01
    *y |= i2c_read_nack();
    135a:	0e 94 02 05 	call	0xa04	; 0xa04 <i2c_read_nack>
    135e:	28 81       	ld	r18, Y
    1360:	39 81       	ldd	r19, Y+1	; 0x01
    1362:	28 2b       	or	r18, r24
    1364:	39 83       	std	Y+1, r19	; 0x01
    1366:	28 83       	st	Y, r18

    i2c_stop();
    1368:	0e 94 03 06 	call	0xc06	; 0xc06 <i2c_stop>

    headingDegrees = atan2((double)*y,(double)*x) * 180 / 3.141592654 + 180;
    136c:	f8 01       	movw	r30, r16
    136e:	60 81       	ld	r22, Z
    1370:	71 81       	ldd	r23, Z+1	; 0x01
    1372:	07 2e       	mov	r0, r23
    1374:	00 0c       	add	r0, r0
    1376:	88 0b       	sbc	r24, r24
    1378:	99 0b       	sbc	r25, r25
    137a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
    137e:	6b 01       	movw	r12, r22
    1380:	7c 01       	movw	r14, r24
    1382:	68 81       	ld	r22, Y
    1384:	79 81       	ldd	r23, Y+1	; 0x01
    1386:	07 2e       	mov	r0, r23
    1388:	00 0c       	add	r0, r0
    138a:	88 0b       	sbc	r24, r24
    138c:	99 0b       	sbc	r25, r25
    138e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
    1392:	a7 01       	movw	r20, r14
    1394:	96 01       	movw	r18, r12
    1396:	0e 94 8c 0b 	call	0x1718	; 0x1718 <atan2>
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	44 e3       	ldi	r20, 0x34	; 52
    13a0:	53 e4       	ldi	r21, 0x43	; 67
    13a2:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__mulsf3>
    13a6:	2b ed       	ldi	r18, 0xDB	; 219
    13a8:	3f e0       	ldi	r19, 0x0F	; 15
    13aa:	49 e4       	ldi	r20, 0x49	; 73
    13ac:	50 e4       	ldi	r21, 0x40	; 64
    13ae:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divsf3>
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	44 e3       	ldi	r20, 0x34	; 52
    13b8:	53 e4       	ldi	r21, 0x43	; 67
    13ba:	0e 94 0d 0b 	call	0x161a	; 0x161a <__addsf3>

    return headingDegrees;
}
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	ff 90       	pop	r15
    13c8:	ef 90       	pop	r14
    13ca:	df 90       	pop	r13
    13cc:	cf 90       	pop	r12
    13ce:	08 95       	ret

000013d0 <get_distance>:
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	cb 01       	movw	r24, r22
    13d6:	08 95       	ret

000013d8 <print_distance>:
    return 0;
}

double print_distance(unsigned int pin){
    return 0;
}
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	cb 01       	movw	r24, r22
    13de:	08 95       	ret

000013e0 <enable_laser_sensor>:
void enable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
    13e0:	43 98       	cbi	0x08, 3	; 8

    //enable analog comparator multiplexer, set SFIOR:ACME
    SFIOR |= (1 << ACME);
    13e2:	80 b5       	in	r24, 0x20	; 32
    13e4:	88 60       	ori	r24, 0x08	; 8
    13e6:	80 bd       	out	0x20, r24	; 32

    //set AIN1 to laser sensor pin
    ADMUX &= 0b11111000; //clear the admux input pin bits
    13e8:	87 b1       	in	r24, 0x07	; 7
    13ea:	88 7f       	andi	r24, 0xF8	; 248
    13ec:	87 b9       	out	0x07, r24	; 7
    ADMUX |= LASER_SENSOR;  //set the new bits
    13ee:	38 9a       	sbi	0x07, 0	; 7
    
    //enable analog comparator, clear ACSR:ACD
    ACSR &= ~(1 << ACD);
    13f0:	47 98       	cbi	0x08, 7	; 8
    
    //set comparator interrupt on rising output edge, set ACSR:ACIS1, set ACSR:ACIS0
    ACSR |= (1 << ACIS1) | (1 << ACIS0);
    13f2:	88 b1       	in	r24, 0x08	; 8
    13f4:	83 60       	ori	r24, 0x03	; 3
    13f6:	88 b9       	out	0x08, r24	; 8
    
    //enable analog comparator interrupt, set ACSR:ACIE
    ACSR |= (1 << ACIE);
    13f8:	43 9a       	sbi	0x08, 3	; 8
    13fa:	08 95       	ret

000013fc <disable_laser_sensor>:
    
    //Be sure to handle the interrupt until ACSR:ACO goes low
}
void disable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
    13fc:	43 98       	cbi	0x08, 3	; 8

    //disable analog comparator, set ACSR:ACD
    ACSR |= (1 << ACD);
    13fe:	47 9a       	sbi	0x08, 7	; 8

    //disable analog comparator multiplexor, clear SFIOR:ACME
    SFIOR &= ~(1 << ACME);
    1400:	80 b5       	in	r24, 0x20	; 32
    1402:	87 7f       	andi	r24, 0xF7	; 247
    1404:	80 bd       	out	0x20, r24	; 32
    1406:	08 95       	ret

00001408 <laser_off>:
}

void laser_off(){
    PORTB |= (1 << LASER);
    1408:	c0 9a       	sbi	0x18, 0	; 24
    140a:	08 95       	ret

0000140c <laser_on>:
}
void laser_on(){
    PORTB &= ~(1 << LASER);
    140c:	c0 98       	cbi	0x18, 0	; 24
    140e:	08 95       	ret

00001410 <calibrate_pressure_sensor>:
#define	PRESSURESENSOR_C

#include "pressuresensor.h"

void calibrate_pressure_sensor(){
	PSENSOR_MIN = get_voltage(PSENSOR_PIN);;
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 39 06 	call	0xc72	; 0xc72 <get_voltage>
    1418:	60 93 1c 02 	sts	0x021C, r22
    141c:	70 93 1d 02 	sts	0x021D, r23
    1420:	80 93 1e 02 	sts	0x021E, r24
    1424:	90 93 1f 02 	sts	0x021F, r25
    1428:	08 95       	ret

0000142a <get_depth_mpa>:
}

double get_depth_mpa(){
    142a:	8f 92       	push	r8
    142c:	9f 92       	push	r9
    142e:	af 92       	push	r10
    1430:	bf 92       	push	r11
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
	return 1.2 * (get_voltage(PSENSOR_PIN) - PSENSOR_MIN)/(4.5-PSENSOR_MIN);
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	0e 94 39 06 	call	0xc72	; 0xc72 <get_voltage>
    1442:	20 91 1c 02 	lds	r18, 0x021C
    1446:	30 91 1d 02 	lds	r19, 0x021D
    144a:	40 91 1e 02 	lds	r20, 0x021E
    144e:	50 91 1f 02 	lds	r21, 0x021F
    1452:	80 90 1c 02 	lds	r8, 0x021C
    1456:	90 90 1d 02 	lds	r9, 0x021D
    145a:	a0 90 1e 02 	lds	r10, 0x021E
    145e:	b0 90 1f 02 	lds	r11, 0x021F
    1462:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__subsf3>
    1466:	2a e9       	ldi	r18, 0x9A	; 154
    1468:	39 e9       	ldi	r19, 0x99	; 153
    146a:	49 e9       	ldi	r20, 0x99	; 153
    146c:	5f e3       	ldi	r21, 0x3F	; 63
    146e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__mulsf3>
    1472:	6b 01       	movw	r12, r22
    1474:	7c 01       	movw	r14, r24
    1476:	a5 01       	movw	r20, r10
    1478:	94 01       	movw	r18, r8
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	80 e9       	ldi	r24, 0x90	; 144
    1480:	90 e4       	ldi	r25, 0x40	; 64
    1482:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__subsf3>
    1486:	9b 01       	movw	r18, r22
    1488:	ac 01       	movw	r20, r24
    148a:	c7 01       	movw	r24, r14
    148c:	b6 01       	movw	r22, r12
    148e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divsf3>
}
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	bf 90       	pop	r11
    149c:	af 90       	pop	r10
    149e:	9f 90       	pop	r9
    14a0:	8f 90       	pop	r8
    14a2:	08 95       	ret

000014a4 <get_depth_feet>:
    14a4:	0e 94 15 0a 	call	0x142a	; 0x142a <get_depth_mpa>
    14a8:	29 ef       	ldi	r18, 0xF9	; 249
    14aa:	37 e4       	ldi	r19, 0x47	; 71
    14ac:	47 ea       	ldi	r20, 0xA7	; 167
    14ae:	53 e4       	ldi	r21, 0x43	; 67
    14b0:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__mulsf3>
    14b4:	08 95       	ret

000014b6 <main>:
    USART0_send_string((unsigned char*)"Water Level: ");
    USART0_send_string((unsigned char*)"Not yet implemented");
    USART0_send_string((unsigned char*)"\r");
    USART0_send_string((unsigned char*)"\r");
}
int main(){
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <main+0x6>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <main+0x8>
    14be:	1f 92       	push	r1
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0xFF;
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	87 bb       	out	0x17, r24	; 23
    PORTB = 0;
    14c8:	18 ba       	out	0x18, r1	; 24
    USART0_Init(MYUBRR);
    14ca:	87 e6       	ldi	r24, 0x67	; 103
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 da 07 	call	0xfb4	; 0xfb4 <USART0_Init>
    USART0_send_string((unsigned char *)"USART0 (RS232) Initialized\r");
    14d2:	86 ec       	ldi	r24, 0xC6	; 198
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    STABLE_Z = 60;
    14da:	8c e3       	ldi	r24, 0x3C	; 60
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	90 93 1b 02 	sts	0x021B, r25
    14e2:	80 93 1a 02 	sts	0x021A, r24
    enable_adc();
    14e6:	0e 94 07 06 	call	0xc0e	; 0xc0e <enable_adc>
    calibrate_pressure_sensor();
    14ea:	0e 94 08 0a 	call	0x1410	; 0x1410 <calibrate_pressure_sensor>
    //init_HMC5883L();
    init_motors();
    14ee:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <init_motors>
    init_data_timer();
    14f2:	0e 94 15 03 	call	0x62a	; 0x62a <init_data_timer>
    enable_bumpers();
    14f6:	0e 94 07 03 	call	0x60e	; 0x60e <enable_bumpers>
    sei();
    14fa:	78 94       	sei
    

    unsigned char data[MAX_STRING_SIZE];
    int i;
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        data[i] = '\0';
    14fc:	19 82       	std	Y+1, r1	; 0x01
    14fe:	1a 82       	std	Y+2, r1	; 0x02
    1500:	1b 82       	std	Y+3, r1	; 0x03
    1502:	1d 82       	std	Y+5, r1	; 0x05
    }
    data[MAX_STRING_SIZE - 2] = '~';
    1504:	8e e7       	ldi	r24, 0x7E	; 126
    1506:	8c 83       	std	Y+4, r24	; 0x04

    move(50,50,50);
    1508:	e1 2c       	mov	r14, r1
    150a:	f1 2c       	mov	r15, r1
    150c:	08 e4       	ldi	r16, 0x48	; 72
    150e:	12 e4       	ldi	r17, 0x42	; 66
    1510:	a8 01       	movw	r20, r16
    1512:	97 01       	movw	r18, r14
    1514:	c8 01       	movw	r24, r16
    1516:	b7 01       	movw	r22, r14
    1518:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
    while (1){
        USART0_Receive_String(data);
    151c:	ce 01       	movw	r24, r28
    151e:	01 96       	adiw	r24, 0x01	; 1
    1520:	0e 94 0b 08 	call	0x1016	; 0x1016 <USART0_Receive_String>
        // USART0_send_string(data);

        if (strcmp((char *)data,"eee~") == 0){
    1524:	62 ee       	ldi	r22, 0xE2	; 226
    1526:	71 e0       	ldi	r23, 0x01	; 1
    1528:	ce 01       	movw	r24, r28
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <strcmp>
    1530:	89 2b       	or	r24, r25
    1532:	41 f1       	breq	.+80     	; 0x1584 <main+0xce>
            USART0_send_string(data);
            path1();
        }
        else if (data[0] == 103 && data[1] == 103 && data[3] == 126){ //0x67 0x67 0xdd 0x7e or 103 103 ddd 126
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	87 36       	cpi	r24, 0x67	; 103
    1538:	09 f4       	brne	.+2      	; 0x153c <main+0x86>
    153a:	57 c0       	rjmp	.+174    	; 0x15ea <main+0x134>
            USART0_send_string(data);
            USART0_send_string((unsigned char *)"Stable Z Set\r");
            STABLE_Z = data[2]; 
        }
        else if (strcmp((char *)data,"fff~") == 0){ //0x66 0x66 0x66 0x7e or 102 102 102 126
    153c:	65 ef       	ldi	r22, 0xF5	; 245
    153e:	71 e0       	ldi	r23, 0x01	; 1
    1540:	ce 01       	movw	r24, r28
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <strcmp>
    1548:	89 2b       	or	r24, r25
    154a:	09 f4       	brne	.+2      	; 0x154e <main+0x98>
    154c:	4b c0       	rjmp	.+150    	; 0x15e4 <main+0x12e>
            calibrate_pressure_sensor();
            USART0_send_string(data);
            USART0_send_string((unsigned char*)"\r");
        }
        else if (strcmp((char *)data,"222~") == 0){
    154e:	6a ef       	ldi	r22, 0xFA	; 250
    1550:	71 e0       	ldi	r23, 0x01	; 1
    1552:	ce 01       	movw	r24, r28
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <strcmp>
    155a:	89 2b       	or	r24, r25
    155c:	d1 f4       	brne	.+52     	; 0x1592 <main+0xdc>
            move(50,50,50);
    155e:	e1 2c       	mov	r14, r1
    1560:	f1 2c       	mov	r15, r1
    1562:	08 e4       	ldi	r16, 0x48	; 72
    1564:	12 e4       	ldi	r17, 0x42	; 66
    1566:	a8 01       	movw	r20, r16
    1568:	97 01       	movw	r18, r14
    156a:	c8 01       	movw	r24, r16
    156c:	b7 01       	movw	r22, r14
    156e:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
            USART0_send_string(data);
    1572:	ce 01       	movw	r24, r28
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
            USART0_send_string((unsigned char*)"\r");
    157a:	80 ee       	ldi	r24, 0xE0	; 224
    157c:	91 e0       	ldi	r25, 0x01	; 1
    157e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
    1582:	cc cf       	rjmp	.-104    	; 0x151c <main+0x66>
    while (1){
        USART0_Receive_String(data);
        // USART0_send_string(data);

        if (strcmp((char *)data,"eee~") == 0){
            USART0_send_string(data);
    1584:	ce 01       	movw	r24, r28
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
            path1();
    158c:	0e 94 3a 03 	call	0x674	; 0x674 <path1>
    1590:	c5 cf       	rjmp	.-118    	; 0x151c <main+0x66>
            move(50,50,50);
            USART0_send_string(data);
            USART0_send_string((unsigned char*)"\r");
        }
        else{
            USART0_send_string((unsigned char *)"Moving: ");
    1592:	8f ef       	ldi	r24, 0xFF	; 255
    1594:	91 e0       	ldi	r25, 0x01	; 1
    1596:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
            USART0_send_string(data);
    159a:	ce 01       	movw	r24, r28
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
            USART0_send_string((unsigned char*)"\r");
    15a2:	80 ee       	ldi	r24, 0xE0	; 224
    15a4:	91 e0       	ldi	r25, 0x01	; 1
    15a6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
            move((float)data[0],(float)data[1],(float)data[2]);
    15aa:	6b 81       	ldd	r22, Y+3	; 0x03
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 98 0c 	call	0x1930	; 0x1930 <__floatunsisf>
    15b6:	6b 01       	movw	r12, r22
    15b8:	7c 01       	movw	r14, r24
    15ba:	6a 81       	ldd	r22, Y+2	; 0x02
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 98 0c 	call	0x1930	; 0x1930 <__floatunsisf>
    15c6:	4b 01       	movw	r8, r22
    15c8:	5c 01       	movw	r10, r24
    15ca:	69 81       	ldd	r22, Y+1	; 0x01
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 98 0c 	call	0x1930	; 0x1930 <__floatunsisf>
    15d6:	87 01       	movw	r16, r14
    15d8:	76 01       	movw	r14, r12
    15da:	a5 01       	movw	r20, r10
    15dc:	94 01       	movw	r18, r8
    15de:	0e 94 99 08 	call	0x1132	; 0x1132 <move>
    15e2:	9c cf       	rjmp	.-200    	; 0x151c <main+0x66>
            USART0_send_string(data);
            USART0_send_string((unsigned char *)"Stable Z Set\r");
            STABLE_Z = data[2]; 
        }
        else if (strcmp((char *)data,"fff~") == 0){ //0x66 0x66 0x66 0x7e or 102 102 102 126
            calibrate_pressure_sensor();
    15e4:	0e 94 08 0a 	call	0x1410	; 0x1410 <calibrate_pressure_sensor>
    15e8:	c4 cf       	rjmp	.-120    	; 0x1572 <main+0xbc>

        if (strcmp((char *)data,"eee~") == 0){
            USART0_send_string(data);
            path1();
        }
        else if (data[0] == 103 && data[1] == 103 && data[3] == 126){ //0x67 0x67 0xdd 0x7e or 103 103 ddd 126
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	87 36       	cpi	r24, 0x67	; 103
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <main+0x13c>
    15f0:	a5 cf       	rjmp	.-182    	; 0x153c <main+0x86>
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	8e 37       	cpi	r24, 0x7E	; 126
    15f6:	09 f0       	breq	.+2      	; 0x15fa <main+0x144>
    15f8:	a1 cf       	rjmp	.-190    	; 0x153c <main+0x86>
            USART0_send_string(data);
    15fa:	ce 01       	movw	r24, r28
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
            USART0_send_string((unsigned char *)"Stable Z Set\r");
    1602:	87 ee       	ldi	r24, 0xE7	; 231
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART0_send_string>
            STABLE_Z = data[2]; 
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	90 93 1b 02 	sts	0x021B, r25
    1612:	80 93 1a 02 	sts	0x021A, r24
    1616:	82 cf       	rjmp	.-252    	; 0x151c <main+0x66>

00001618 <__subsf3>:
    1618:	50 58       	subi	r21, 0x80	; 128

0000161a <__addsf3>:
    161a:	bb 27       	eor	r27, r27
    161c:	aa 27       	eor	r26, r26
    161e:	0e 94 24 0b 	call	0x1648	; 0x1648 <__addsf3x>
    1622:	0c 94 37 0d 	jmp	0x1a6e	; 0x1a6e <__fp_round>
    1626:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__fp_pscA>
    162a:	38 f0       	brcs	.+14     	; 0x163a <__addsf3+0x20>
    162c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fp_pscB>
    1630:	20 f0       	brcs	.+8      	; 0x163a <__addsf3+0x20>
    1632:	39 f4       	brne	.+14     	; 0x1642 <__addsf3+0x28>
    1634:	9f 3f       	cpi	r25, 0xFF	; 255
    1636:	19 f4       	brne	.+6      	; 0x163e <__addsf3+0x24>
    1638:	26 f4       	brtc	.+8      	; 0x1642 <__addsf3+0x28>
    163a:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__fp_nan>
    163e:	0e f4       	brtc	.+2      	; 0x1642 <__addsf3+0x28>
    1640:	e0 95       	com	r30
    1642:	e7 fb       	bst	r30, 7
    1644:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__fp_inf>

00001648 <__addsf3x>:
    1648:	e9 2f       	mov	r30, r25
    164a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fp_split3>
    164e:	58 f3       	brcs	.-42     	; 0x1626 <__addsf3+0xc>
    1650:	ba 17       	cp	r27, r26
    1652:	62 07       	cpc	r22, r18
    1654:	73 07       	cpc	r23, r19
    1656:	84 07       	cpc	r24, r20
    1658:	95 07       	cpc	r25, r21
    165a:	20 f0       	brcs	.+8      	; 0x1664 <__addsf3x+0x1c>
    165c:	79 f4       	brne	.+30     	; 0x167c <__addsf3x+0x34>
    165e:	a6 f5       	brtc	.+104    	; 0x16c8 <__addsf3x+0x80>
    1660:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__fp_zero>
    1664:	0e f4       	brtc	.+2      	; 0x1668 <__addsf3x+0x20>
    1666:	e0 95       	com	r30
    1668:	0b 2e       	mov	r0, r27
    166a:	ba 2f       	mov	r27, r26
    166c:	a0 2d       	mov	r26, r0
    166e:	0b 01       	movw	r0, r22
    1670:	b9 01       	movw	r22, r18
    1672:	90 01       	movw	r18, r0
    1674:	0c 01       	movw	r0, r24
    1676:	ca 01       	movw	r24, r20
    1678:	a0 01       	movw	r20, r0
    167a:	11 24       	eor	r1, r1
    167c:	ff 27       	eor	r31, r31
    167e:	59 1b       	sub	r21, r25
    1680:	99 f0       	breq	.+38     	; 0x16a8 <__addsf3x+0x60>
    1682:	59 3f       	cpi	r21, 0xF9	; 249
    1684:	50 f4       	brcc	.+20     	; 0x169a <__addsf3x+0x52>
    1686:	50 3e       	cpi	r21, 0xE0	; 224
    1688:	68 f1       	brcs	.+90     	; 0x16e4 <__addsf3x+0x9c>
    168a:	1a 16       	cp	r1, r26
    168c:	f0 40       	sbci	r31, 0x00	; 0
    168e:	a2 2f       	mov	r26, r18
    1690:	23 2f       	mov	r18, r19
    1692:	34 2f       	mov	r19, r20
    1694:	44 27       	eor	r20, r20
    1696:	58 5f       	subi	r21, 0xF8	; 248
    1698:	f3 cf       	rjmp	.-26     	; 0x1680 <__addsf3x+0x38>
    169a:	46 95       	lsr	r20
    169c:	37 95       	ror	r19
    169e:	27 95       	ror	r18
    16a0:	a7 95       	ror	r26
    16a2:	f0 40       	sbci	r31, 0x00	; 0
    16a4:	53 95       	inc	r21
    16a6:	c9 f7       	brne	.-14     	; 0x169a <__addsf3x+0x52>
    16a8:	7e f4       	brtc	.+30     	; 0x16c8 <__addsf3x+0x80>
    16aa:	1f 16       	cp	r1, r31
    16ac:	ba 0b       	sbc	r27, r26
    16ae:	62 0b       	sbc	r22, r18
    16b0:	73 0b       	sbc	r23, r19
    16b2:	84 0b       	sbc	r24, r20
    16b4:	ba f0       	brmi	.+46     	; 0x16e4 <__addsf3x+0x9c>
    16b6:	91 50       	subi	r25, 0x01	; 1
    16b8:	a1 f0       	breq	.+40     	; 0x16e2 <__addsf3x+0x9a>
    16ba:	ff 0f       	add	r31, r31
    16bc:	bb 1f       	adc	r27, r27
    16be:	66 1f       	adc	r22, r22
    16c0:	77 1f       	adc	r23, r23
    16c2:	88 1f       	adc	r24, r24
    16c4:	c2 f7       	brpl	.-16     	; 0x16b6 <__addsf3x+0x6e>
    16c6:	0e c0       	rjmp	.+28     	; 0x16e4 <__addsf3x+0x9c>
    16c8:	ba 0f       	add	r27, r26
    16ca:	62 1f       	adc	r22, r18
    16cc:	73 1f       	adc	r23, r19
    16ce:	84 1f       	adc	r24, r20
    16d0:	48 f4       	brcc	.+18     	; 0x16e4 <__addsf3x+0x9c>
    16d2:	87 95       	ror	r24
    16d4:	77 95       	ror	r23
    16d6:	67 95       	ror	r22
    16d8:	b7 95       	ror	r27
    16da:	f7 95       	ror	r31
    16dc:	9e 3f       	cpi	r25, 0xFE	; 254
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <__addsf3x+0x9a>
    16e0:	b0 cf       	rjmp	.-160    	; 0x1642 <__addsf3+0x28>
    16e2:	93 95       	inc	r25
    16e4:	88 0f       	add	r24, r24
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <__addsf3x+0xa2>
    16e8:	99 27       	eor	r25, r25
    16ea:	ee 0f       	add	r30, r30
    16ec:	97 95       	ror	r25
    16ee:	87 95       	ror	r24
    16f0:	08 95       	ret
    16f2:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__fp_pscA>
    16f6:	60 f0       	brcs	.+24     	; 0x1710 <__addsf3x+0xc8>
    16f8:	80 e8       	ldi	r24, 0x80	; 128
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <__addsf3x+0xb8>
    16fe:	9e ef       	ldi	r25, 0xFE	; 254
    1700:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fp_pscB>
    1704:	28 f0       	brcs	.+10     	; 0x1710 <__addsf3x+0xc8>
    1706:	40 e8       	ldi	r20, 0x80	; 128
    1708:	51 e0       	ldi	r21, 0x01	; 1
    170a:	71 f4       	brne	.+28     	; 0x1728 <atan2+0x10>
    170c:	5e ef       	ldi	r21, 0xFE	; 254
    170e:	0c c0       	rjmp	.+24     	; 0x1728 <atan2+0x10>
    1710:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__fp_nan>
    1714:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__fp_zero>

00001718 <atan2>:
    1718:	e9 2f       	mov	r30, r25
    171a:	e0 78       	andi	r30, 0x80	; 128
    171c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fp_split3>
    1720:	40 f3       	brcs	.-48     	; 0x16f2 <__addsf3x+0xaa>
    1722:	09 2e       	mov	r0, r25
    1724:	05 2a       	or	r0, r21
    1726:	b1 f3       	breq	.-20     	; 0x1714 <__addsf3x+0xcc>
    1728:	26 17       	cp	r18, r22
    172a:	37 07       	cpc	r19, r23
    172c:	48 07       	cpc	r20, r24
    172e:	59 07       	cpc	r21, r25
    1730:	38 f0       	brcs	.+14     	; 0x1740 <atan2+0x28>
    1732:	0e 2e       	mov	r0, r30
    1734:	07 f8       	bld	r0, 7
    1736:	e0 25       	eor	r30, r0
    1738:	69 f0       	breq	.+26     	; 0x1754 <atan2+0x3c>
    173a:	e0 25       	eor	r30, r0
    173c:	e0 64       	ori	r30, 0x40	; 64
    173e:	0a c0       	rjmp	.+20     	; 0x1754 <atan2+0x3c>
    1740:	ef 63       	ori	r30, 0x3F	; 63
    1742:	07 f8       	bld	r0, 7
    1744:	00 94       	com	r0
    1746:	07 fa       	bst	r0, 7
    1748:	db 01       	movw	r26, r22
    174a:	b9 01       	movw	r22, r18
    174c:	9d 01       	movw	r18, r26
    174e:	dc 01       	movw	r26, r24
    1750:	ca 01       	movw	r24, r20
    1752:	ad 01       	movw	r20, r26
    1754:	ef 93       	push	r30
    1756:	0e 94 07 0c 	call	0x180e	; 0x180e <__divsf3_pse>
    175a:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__fp_round>
    175e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <atan>
    1762:	5f 91       	pop	r21
    1764:	55 23       	and	r21, r21
    1766:	39 f0       	breq	.+14     	; 0x1776 <atan2+0x5e>
    1768:	2b ed       	ldi	r18, 0xDB	; 219
    176a:	3f e0       	ldi	r19, 0x0F	; 15
    176c:	49 e4       	ldi	r20, 0x49	; 73
    176e:	50 fd       	sbrc	r21, 0
    1770:	49 ec       	ldi	r20, 0xC9	; 201
    1772:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__addsf3>
    1776:	08 95       	ret

00001778 <atan>:
    1778:	df 93       	push	r29
    177a:	dd 27       	eor	r29, r29
    177c:	b9 2f       	mov	r27, r25
    177e:	bf 77       	andi	r27, 0x7F	; 127
    1780:	40 e8       	ldi	r20, 0x80	; 128
    1782:	5f e3       	ldi	r21, 0x3F	; 63
    1784:	16 16       	cp	r1, r22
    1786:	17 06       	cpc	r1, r23
    1788:	48 07       	cpc	r20, r24
    178a:	5b 07       	cpc	r21, r27
    178c:	18 f4       	brcc	.+6      	; 0x1794 <atan+0x1c>
    178e:	d9 2f       	mov	r29, r25
    1790:	0e 94 76 0d 	call	0x1aec	; 0x1aec <inverse>
    1794:	9f 93       	push	r25
    1796:	8f 93       	push	r24
    1798:	7f 93       	push	r23
    179a:	6f 93       	push	r22
    179c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <square>
    17a0:	ec e8       	ldi	r30, 0x8C	; 140
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__fp_powser>
    17a8:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__fp_round>
    17ac:	2f 91       	pop	r18
    17ae:	3f 91       	pop	r19
    17b0:	4f 91       	pop	r20
    17b2:	5f 91       	pop	r21
    17b4:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3x>
    17b8:	dd 23       	and	r29, r29
    17ba:	51 f0       	breq	.+20     	; 0x17d0 <atan+0x58>
    17bc:	90 58       	subi	r25, 0x80	; 128
    17be:	a2 ea       	ldi	r26, 0xA2	; 162
    17c0:	2a ed       	ldi	r18, 0xDA	; 218
    17c2:	3f e0       	ldi	r19, 0x0F	; 15
    17c4:	49 ec       	ldi	r20, 0xC9	; 201
    17c6:	5f e3       	ldi	r21, 0x3F	; 63
    17c8:	d0 78       	andi	r29, 0x80	; 128
    17ca:	5d 27       	eor	r21, r29
    17cc:	0e 94 24 0b 	call	0x1648	; 0x1648 <__addsf3x>
    17d0:	df 91       	pop	r29
    17d2:	0c 94 37 0d 	jmp	0x1a6e	; 0x1a6e <__fp_round>

000017d6 <__cmpsf2>:
    17d6:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fp_cmp>
    17da:	08 f4       	brcc	.+2      	; 0x17de <__cmpsf2+0x8>
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	08 95       	ret

000017e0 <__divsf3>:
    17e0:	0e 94 04 0c 	call	0x1808	; 0x1808 <__divsf3x>
    17e4:	0c 94 37 0d 	jmp	0x1a6e	; 0x1a6e <__fp_round>
    17e8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fp_pscB>
    17ec:	58 f0       	brcs	.+22     	; 0x1804 <__divsf3+0x24>
    17ee:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__fp_pscA>
    17f2:	40 f0       	brcs	.+16     	; 0x1804 <__divsf3+0x24>
    17f4:	29 f4       	brne	.+10     	; 0x1800 <__divsf3+0x20>
    17f6:	5f 3f       	cpi	r21, 0xFF	; 255
    17f8:	29 f0       	breq	.+10     	; 0x1804 <__divsf3+0x24>
    17fa:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__fp_inf>
    17fe:	51 11       	cpse	r21, r1
    1800:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_szero>
    1804:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__fp_nan>

00001808 <__divsf3x>:
    1808:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fp_split3>
    180c:	68 f3       	brcs	.-38     	; 0x17e8 <__divsf3+0x8>

0000180e <__divsf3_pse>:
    180e:	99 23       	and	r25, r25
    1810:	b1 f3       	breq	.-20     	; 0x17fe <__divsf3+0x1e>
    1812:	55 23       	and	r21, r21
    1814:	91 f3       	breq	.-28     	; 0x17fa <__divsf3+0x1a>
    1816:	95 1b       	sub	r25, r21
    1818:	55 0b       	sbc	r21, r21
    181a:	bb 27       	eor	r27, r27
    181c:	aa 27       	eor	r26, r26
    181e:	62 17       	cp	r22, r18
    1820:	73 07       	cpc	r23, r19
    1822:	84 07       	cpc	r24, r20
    1824:	38 f0       	brcs	.+14     	; 0x1834 <__divsf3_pse+0x26>
    1826:	9f 5f       	subi	r25, 0xFF	; 255
    1828:	5f 4f       	sbci	r21, 0xFF	; 255
    182a:	22 0f       	add	r18, r18
    182c:	33 1f       	adc	r19, r19
    182e:	44 1f       	adc	r20, r20
    1830:	aa 1f       	adc	r26, r26
    1832:	a9 f3       	breq	.-22     	; 0x181e <__divsf3_pse+0x10>
    1834:	35 d0       	rcall	.+106    	; 0x18a0 <__divsf3_pse+0x92>
    1836:	0e 2e       	mov	r0, r30
    1838:	3a f0       	brmi	.+14     	; 0x1848 <__divsf3_pse+0x3a>
    183a:	e0 e8       	ldi	r30, 0x80	; 128
    183c:	32 d0       	rcall	.+100    	; 0x18a2 <__divsf3_pse+0x94>
    183e:	91 50       	subi	r25, 0x01	; 1
    1840:	50 40       	sbci	r21, 0x00	; 0
    1842:	e6 95       	lsr	r30
    1844:	00 1c       	adc	r0, r0
    1846:	ca f7       	brpl	.-14     	; 0x183a <__divsf3_pse+0x2c>
    1848:	2b d0       	rcall	.+86     	; 0x18a0 <__divsf3_pse+0x92>
    184a:	fe 2f       	mov	r31, r30
    184c:	29 d0       	rcall	.+82     	; 0x18a0 <__divsf3_pse+0x92>
    184e:	66 0f       	add	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	88 1f       	adc	r24, r24
    1854:	bb 1f       	adc	r27, r27
    1856:	26 17       	cp	r18, r22
    1858:	37 07       	cpc	r19, r23
    185a:	48 07       	cpc	r20, r24
    185c:	ab 07       	cpc	r26, r27
    185e:	b0 e8       	ldi	r27, 0x80	; 128
    1860:	09 f0       	breq	.+2      	; 0x1864 <__divsf3_pse+0x56>
    1862:	bb 0b       	sbc	r27, r27
    1864:	80 2d       	mov	r24, r0
    1866:	bf 01       	movw	r22, r30
    1868:	ff 27       	eor	r31, r31
    186a:	93 58       	subi	r25, 0x83	; 131
    186c:	5f 4f       	sbci	r21, 0xFF	; 255
    186e:	3a f0       	brmi	.+14     	; 0x187e <__divsf3_pse+0x70>
    1870:	9e 3f       	cpi	r25, 0xFE	; 254
    1872:	51 05       	cpc	r21, r1
    1874:	78 f0       	brcs	.+30     	; 0x1894 <__divsf3_pse+0x86>
    1876:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__fp_inf>
    187a:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_szero>
    187e:	5f 3f       	cpi	r21, 0xFF	; 255
    1880:	e4 f3       	brlt	.-8      	; 0x187a <__divsf3_pse+0x6c>
    1882:	98 3e       	cpi	r25, 0xE8	; 232
    1884:	d4 f3       	brlt	.-12     	; 0x187a <__divsf3_pse+0x6c>
    1886:	86 95       	lsr	r24
    1888:	77 95       	ror	r23
    188a:	67 95       	ror	r22
    188c:	b7 95       	ror	r27
    188e:	f7 95       	ror	r31
    1890:	9f 5f       	subi	r25, 0xFF	; 255
    1892:	c9 f7       	brne	.-14     	; 0x1886 <__divsf3_pse+0x78>
    1894:	88 0f       	add	r24, r24
    1896:	91 1d       	adc	r25, r1
    1898:	96 95       	lsr	r25
    189a:	87 95       	ror	r24
    189c:	97 f9       	bld	r25, 7
    189e:	08 95       	ret
    18a0:	e1 e0       	ldi	r30, 0x01	; 1
    18a2:	66 0f       	add	r22, r22
    18a4:	77 1f       	adc	r23, r23
    18a6:	88 1f       	adc	r24, r24
    18a8:	bb 1f       	adc	r27, r27
    18aa:	62 17       	cp	r22, r18
    18ac:	73 07       	cpc	r23, r19
    18ae:	84 07       	cpc	r24, r20
    18b0:	ba 07       	cpc	r27, r26
    18b2:	20 f0       	brcs	.+8      	; 0x18bc <__divsf3_pse+0xae>
    18b4:	62 1b       	sub	r22, r18
    18b6:	73 0b       	sbc	r23, r19
    18b8:	84 0b       	sbc	r24, r20
    18ba:	ba 0b       	sbc	r27, r26
    18bc:	ee 1f       	adc	r30, r30
    18be:	88 f7       	brcc	.-30     	; 0x18a2 <__divsf3_pse+0x94>
    18c0:	e0 95       	com	r30
    18c2:	08 95       	ret

000018c4 <__fixsfsi>:
    18c4:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__fixunssfsi>
    18c8:	68 94       	set
    18ca:	b1 11       	cpse	r27, r1
    18cc:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_szero>
    18d0:	08 95       	ret

000018d2 <__fixunssfsi>:
    18d2:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fp_splitA>
    18d6:	88 f0       	brcs	.+34     	; 0x18fa <__fixunssfsi+0x28>
    18d8:	9f 57       	subi	r25, 0x7F	; 127
    18da:	98 f0       	brcs	.+38     	; 0x1902 <__fixunssfsi+0x30>
    18dc:	b9 2f       	mov	r27, r25
    18de:	99 27       	eor	r25, r25
    18e0:	b7 51       	subi	r27, 0x17	; 23
    18e2:	b0 f0       	brcs	.+44     	; 0x1910 <__fixunssfsi+0x3e>
    18e4:	e1 f0       	breq	.+56     	; 0x191e <__fixunssfsi+0x4c>
    18e6:	66 0f       	add	r22, r22
    18e8:	77 1f       	adc	r23, r23
    18ea:	88 1f       	adc	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	1a f0       	brmi	.+6      	; 0x18f6 <__fixunssfsi+0x24>
    18f0:	ba 95       	dec	r27
    18f2:	c9 f7       	brne	.-14     	; 0x18e6 <__fixunssfsi+0x14>
    18f4:	14 c0       	rjmp	.+40     	; 0x191e <__fixunssfsi+0x4c>
    18f6:	b1 30       	cpi	r27, 0x01	; 1
    18f8:	91 f0       	breq	.+36     	; 0x191e <__fixunssfsi+0x4c>
    18fa:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__fp_zero>
    18fe:	b1 e0       	ldi	r27, 0x01	; 1
    1900:	08 95       	ret
    1902:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__fp_zero>
    1906:	67 2f       	mov	r22, r23
    1908:	78 2f       	mov	r23, r24
    190a:	88 27       	eor	r24, r24
    190c:	b8 5f       	subi	r27, 0xF8	; 248
    190e:	39 f0       	breq	.+14     	; 0x191e <__fixunssfsi+0x4c>
    1910:	b9 3f       	cpi	r27, 0xF9	; 249
    1912:	cc f3       	brlt	.-14     	; 0x1906 <__fixunssfsi+0x34>
    1914:	86 95       	lsr	r24
    1916:	77 95       	ror	r23
    1918:	67 95       	ror	r22
    191a:	b3 95       	inc	r27
    191c:	d9 f7       	brne	.-10     	; 0x1914 <__fixunssfsi+0x42>
    191e:	3e f4       	brtc	.+14     	; 0x192e <__fixunssfsi+0x5c>
    1920:	90 95       	com	r25
    1922:	80 95       	com	r24
    1924:	70 95       	com	r23
    1926:	61 95       	neg	r22
    1928:	7f 4f       	sbci	r23, 0xFF	; 255
    192a:	8f 4f       	sbci	r24, 0xFF	; 255
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	08 95       	ret

00001930 <__floatunsisf>:
    1930:	e8 94       	clt
    1932:	09 c0       	rjmp	.+18     	; 0x1946 <__floatsisf+0x12>

00001934 <__floatsisf>:
    1934:	97 fb       	bst	r25, 7
    1936:	3e f4       	brtc	.+14     	; 0x1946 <__floatsisf+0x12>
    1938:	90 95       	com	r25
    193a:	80 95       	com	r24
    193c:	70 95       	com	r23
    193e:	61 95       	neg	r22
    1940:	7f 4f       	sbci	r23, 0xFF	; 255
    1942:	8f 4f       	sbci	r24, 0xFF	; 255
    1944:	9f 4f       	sbci	r25, 0xFF	; 255
    1946:	99 23       	and	r25, r25
    1948:	a9 f0       	breq	.+42     	; 0x1974 <__floatsisf+0x40>
    194a:	f9 2f       	mov	r31, r25
    194c:	96 e9       	ldi	r25, 0x96	; 150
    194e:	bb 27       	eor	r27, r27
    1950:	93 95       	inc	r25
    1952:	f6 95       	lsr	r31
    1954:	87 95       	ror	r24
    1956:	77 95       	ror	r23
    1958:	67 95       	ror	r22
    195a:	b7 95       	ror	r27
    195c:	f1 11       	cpse	r31, r1
    195e:	f8 cf       	rjmp	.-16     	; 0x1950 <__floatsisf+0x1c>
    1960:	fa f4       	brpl	.+62     	; 0x19a0 <__floatsisf+0x6c>
    1962:	bb 0f       	add	r27, r27
    1964:	11 f4       	brne	.+4      	; 0x196a <__floatsisf+0x36>
    1966:	60 ff       	sbrs	r22, 0
    1968:	1b c0       	rjmp	.+54     	; 0x19a0 <__floatsisf+0x6c>
    196a:	6f 5f       	subi	r22, 0xFF	; 255
    196c:	7f 4f       	sbci	r23, 0xFF	; 255
    196e:	8f 4f       	sbci	r24, 0xFF	; 255
    1970:	9f 4f       	sbci	r25, 0xFF	; 255
    1972:	16 c0       	rjmp	.+44     	; 0x19a0 <__floatsisf+0x6c>
    1974:	88 23       	and	r24, r24
    1976:	11 f0       	breq	.+4      	; 0x197c <__floatsisf+0x48>
    1978:	96 e9       	ldi	r25, 0x96	; 150
    197a:	11 c0       	rjmp	.+34     	; 0x199e <__floatsisf+0x6a>
    197c:	77 23       	and	r23, r23
    197e:	21 f0       	breq	.+8      	; 0x1988 <__floatsisf+0x54>
    1980:	9e e8       	ldi	r25, 0x8E	; 142
    1982:	87 2f       	mov	r24, r23
    1984:	76 2f       	mov	r23, r22
    1986:	05 c0       	rjmp	.+10     	; 0x1992 <__floatsisf+0x5e>
    1988:	66 23       	and	r22, r22
    198a:	71 f0       	breq	.+28     	; 0x19a8 <__floatsisf+0x74>
    198c:	96 e8       	ldi	r25, 0x86	; 134
    198e:	86 2f       	mov	r24, r22
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	2a f0       	brmi	.+10     	; 0x19a0 <__floatsisf+0x6c>
    1996:	9a 95       	dec	r25
    1998:	66 0f       	add	r22, r22
    199a:	77 1f       	adc	r23, r23
    199c:	88 1f       	adc	r24, r24
    199e:	da f7       	brpl	.-10     	; 0x1996 <__floatsisf+0x62>
    19a0:	88 0f       	add	r24, r24
    19a2:	96 95       	lsr	r25
    19a4:	87 95       	ror	r24
    19a6:	97 f9       	bld	r25, 7
    19a8:	08 95       	ret

000019aa <__fp_cmp>:
    19aa:	99 0f       	add	r25, r25
    19ac:	00 08       	sbc	r0, r0
    19ae:	55 0f       	add	r21, r21
    19b0:	aa 0b       	sbc	r26, r26
    19b2:	e0 e8       	ldi	r30, 0x80	; 128
    19b4:	fe ef       	ldi	r31, 0xFE	; 254
    19b6:	16 16       	cp	r1, r22
    19b8:	17 06       	cpc	r1, r23
    19ba:	e8 07       	cpc	r30, r24
    19bc:	f9 07       	cpc	r31, r25
    19be:	c0 f0       	brcs	.+48     	; 0x19f0 <__fp_cmp+0x46>
    19c0:	12 16       	cp	r1, r18
    19c2:	13 06       	cpc	r1, r19
    19c4:	e4 07       	cpc	r30, r20
    19c6:	f5 07       	cpc	r31, r21
    19c8:	98 f0       	brcs	.+38     	; 0x19f0 <__fp_cmp+0x46>
    19ca:	62 1b       	sub	r22, r18
    19cc:	73 0b       	sbc	r23, r19
    19ce:	84 0b       	sbc	r24, r20
    19d0:	95 0b       	sbc	r25, r21
    19d2:	39 f4       	brne	.+14     	; 0x19e2 <__fp_cmp+0x38>
    19d4:	0a 26       	eor	r0, r26
    19d6:	61 f0       	breq	.+24     	; 0x19f0 <__fp_cmp+0x46>
    19d8:	23 2b       	or	r18, r19
    19da:	24 2b       	or	r18, r20
    19dc:	25 2b       	or	r18, r21
    19de:	21 f4       	brne	.+8      	; 0x19e8 <__fp_cmp+0x3e>
    19e0:	08 95       	ret
    19e2:	0a 26       	eor	r0, r26
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <__fp_cmp+0x3e>
    19e6:	a1 40       	sbci	r26, 0x01	; 1
    19e8:	a6 95       	lsr	r26
    19ea:	8f ef       	ldi	r24, 0xFF	; 255
    19ec:	81 1d       	adc	r24, r1
    19ee:	81 1d       	adc	r24, r1
    19f0:	08 95       	ret

000019f2 <__fp_inf>:
    19f2:	97 f9       	bld	r25, 7
    19f4:	9f 67       	ori	r25, 0x7F	; 127
    19f6:	80 e8       	ldi	r24, 0x80	; 128
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	08 95       	ret

000019fe <__fp_nan>:
    19fe:	9f ef       	ldi	r25, 0xFF	; 255
    1a00:	80 ec       	ldi	r24, 0xC0	; 192
    1a02:	08 95       	ret

00001a04 <__fp_powser>:
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	1f 93       	push	r17
    1a0a:	0f 93       	push	r16
    1a0c:	ff 92       	push	r15
    1a0e:	ef 92       	push	r14
    1a10:	df 92       	push	r13
    1a12:	7b 01       	movw	r14, r22
    1a14:	8c 01       	movw	r16, r24
    1a16:	68 94       	set
    1a18:	06 c0       	rjmp	.+12     	; 0x1a26 <__fp_powser+0x22>
    1a1a:	da 2e       	mov	r13, r26
    1a1c:	ef 01       	movw	r28, r30
    1a1e:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3x>
    1a22:	fe 01       	movw	r30, r28
    1a24:	e8 94       	clt
    1a26:	a5 91       	lpm	r26, Z+
    1a28:	25 91       	lpm	r18, Z+
    1a2a:	35 91       	lpm	r19, Z+
    1a2c:	45 91       	lpm	r20, Z+
    1a2e:	55 91       	lpm	r21, Z+
    1a30:	a6 f3       	brts	.-24     	; 0x1a1a <__fp_powser+0x16>
    1a32:	ef 01       	movw	r28, r30
    1a34:	0e 94 24 0b 	call	0x1648	; 0x1648 <__addsf3x>
    1a38:	fe 01       	movw	r30, r28
    1a3a:	97 01       	movw	r18, r14
    1a3c:	a8 01       	movw	r20, r16
    1a3e:	da 94       	dec	r13
    1a40:	69 f7       	brne	.-38     	; 0x1a1c <__fp_powser+0x18>
    1a42:	df 90       	pop	r13
    1a44:	ef 90       	pop	r14
    1a46:	ff 90       	pop	r15
    1a48:	0f 91       	pop	r16
    1a4a:	1f 91       	pop	r17
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <__fp_pscA>:
    1a52:	00 24       	eor	r0, r0
    1a54:	0a 94       	dec	r0
    1a56:	16 16       	cp	r1, r22
    1a58:	17 06       	cpc	r1, r23
    1a5a:	18 06       	cpc	r1, r24
    1a5c:	09 06       	cpc	r0, r25
    1a5e:	08 95       	ret

00001a60 <__fp_pscB>:
    1a60:	00 24       	eor	r0, r0
    1a62:	0a 94       	dec	r0
    1a64:	12 16       	cp	r1, r18
    1a66:	13 06       	cpc	r1, r19
    1a68:	14 06       	cpc	r1, r20
    1a6a:	05 06       	cpc	r0, r21
    1a6c:	08 95       	ret

00001a6e <__fp_round>:
    1a6e:	09 2e       	mov	r0, r25
    1a70:	03 94       	inc	r0
    1a72:	00 0c       	add	r0, r0
    1a74:	11 f4       	brne	.+4      	; 0x1a7a <__fp_round+0xc>
    1a76:	88 23       	and	r24, r24
    1a78:	52 f0       	brmi	.+20     	; 0x1a8e <__fp_round+0x20>
    1a7a:	bb 0f       	add	r27, r27
    1a7c:	40 f4       	brcc	.+16     	; 0x1a8e <__fp_round+0x20>
    1a7e:	bf 2b       	or	r27, r31
    1a80:	11 f4       	brne	.+4      	; 0x1a86 <__fp_round+0x18>
    1a82:	60 ff       	sbrs	r22, 0
    1a84:	04 c0       	rjmp	.+8      	; 0x1a8e <__fp_round+0x20>
    1a86:	6f 5f       	subi	r22, 0xFF	; 255
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	08 95       	ret

00001a90 <__fp_split3>:
    1a90:	57 fd       	sbrc	r21, 7
    1a92:	90 58       	subi	r25, 0x80	; 128
    1a94:	44 0f       	add	r20, r20
    1a96:	55 1f       	adc	r21, r21
    1a98:	59 f0       	breq	.+22     	; 0x1ab0 <__fp_splitA+0x10>
    1a9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a9c:	71 f0       	breq	.+28     	; 0x1aba <__fp_splitA+0x1a>
    1a9e:	47 95       	ror	r20

00001aa0 <__fp_splitA>:
    1aa0:	88 0f       	add	r24, r24
    1aa2:	97 fb       	bst	r25, 7
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	61 f0       	breq	.+24     	; 0x1ac0 <__fp_splitA+0x20>
    1aa8:	9f 3f       	cpi	r25, 0xFF	; 255
    1aaa:	79 f0       	breq	.+30     	; 0x1aca <__fp_splitA+0x2a>
    1aac:	87 95       	ror	r24
    1aae:	08 95       	ret
    1ab0:	12 16       	cp	r1, r18
    1ab2:	13 06       	cpc	r1, r19
    1ab4:	14 06       	cpc	r1, r20
    1ab6:	55 1f       	adc	r21, r21
    1ab8:	f2 cf       	rjmp	.-28     	; 0x1a9e <__fp_split3+0xe>
    1aba:	46 95       	lsr	r20
    1abc:	f1 df       	rcall	.-30     	; 0x1aa0 <__fp_splitA>
    1abe:	08 c0       	rjmp	.+16     	; 0x1ad0 <__fp_splitA+0x30>
    1ac0:	16 16       	cp	r1, r22
    1ac2:	17 06       	cpc	r1, r23
    1ac4:	18 06       	cpc	r1, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	f1 cf       	rjmp	.-30     	; 0x1aac <__fp_splitA+0xc>
    1aca:	86 95       	lsr	r24
    1acc:	71 05       	cpc	r23, r1
    1ace:	61 05       	cpc	r22, r1
    1ad0:	08 94       	sec
    1ad2:	08 95       	ret

00001ad4 <__fp_zero>:
    1ad4:	e8 94       	clt

00001ad6 <__fp_szero>:
    1ad6:	bb 27       	eor	r27, r27
    1ad8:	66 27       	eor	r22, r22
    1ada:	77 27       	eor	r23, r23
    1adc:	cb 01       	movw	r24, r22
    1ade:	97 f9       	bld	r25, 7
    1ae0:	08 95       	ret

00001ae2 <__gesf2>:
    1ae2:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fp_cmp>
    1ae6:	08 f4       	brcc	.+2      	; 0x1aea <__gesf2+0x8>
    1ae8:	8f ef       	ldi	r24, 0xFF	; 255
    1aea:	08 95       	ret

00001aec <inverse>:
    1aec:	9b 01       	movw	r18, r22
    1aee:	ac 01       	movw	r20, r24
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	80 e8       	ldi	r24, 0x80	; 128
    1af6:	9f e3       	ldi	r25, 0x3F	; 63
    1af8:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__divsf3>

00001afc <__mulsf3>:
    1afc:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3x>
    1b00:	0c 94 37 0d 	jmp	0x1a6e	; 0x1a6e <__fp_round>
    1b04:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__fp_pscA>
    1b08:	38 f0       	brcs	.+14     	; 0x1b18 <__mulsf3+0x1c>
    1b0a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fp_pscB>
    1b0e:	20 f0       	brcs	.+8      	; 0x1b18 <__mulsf3+0x1c>
    1b10:	95 23       	and	r25, r21
    1b12:	11 f0       	breq	.+4      	; 0x1b18 <__mulsf3+0x1c>
    1b14:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__fp_inf>
    1b18:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__fp_nan>
    1b1c:	11 24       	eor	r1, r1
    1b1e:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_szero>

00001b22 <__mulsf3x>:
    1b22:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fp_split3>
    1b26:	70 f3       	brcs	.-36     	; 0x1b04 <__mulsf3+0x8>

00001b28 <__mulsf3_pse>:
    1b28:	95 9f       	mul	r25, r21
    1b2a:	c1 f3       	breq	.-16     	; 0x1b1c <__mulsf3+0x20>
    1b2c:	95 0f       	add	r25, r21
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	55 1f       	adc	r21, r21
    1b32:	62 9f       	mul	r22, r18
    1b34:	f0 01       	movw	r30, r0
    1b36:	72 9f       	mul	r23, r18
    1b38:	bb 27       	eor	r27, r27
    1b3a:	f0 0d       	add	r31, r0
    1b3c:	b1 1d       	adc	r27, r1
    1b3e:	63 9f       	mul	r22, r19
    1b40:	aa 27       	eor	r26, r26
    1b42:	f0 0d       	add	r31, r0
    1b44:	b1 1d       	adc	r27, r1
    1b46:	aa 1f       	adc	r26, r26
    1b48:	64 9f       	mul	r22, r20
    1b4a:	66 27       	eor	r22, r22
    1b4c:	b0 0d       	add	r27, r0
    1b4e:	a1 1d       	adc	r26, r1
    1b50:	66 1f       	adc	r22, r22
    1b52:	82 9f       	mul	r24, r18
    1b54:	22 27       	eor	r18, r18
    1b56:	b0 0d       	add	r27, r0
    1b58:	a1 1d       	adc	r26, r1
    1b5a:	62 1f       	adc	r22, r18
    1b5c:	73 9f       	mul	r23, r19
    1b5e:	b0 0d       	add	r27, r0
    1b60:	a1 1d       	adc	r26, r1
    1b62:	62 1f       	adc	r22, r18
    1b64:	83 9f       	mul	r24, r19
    1b66:	a0 0d       	add	r26, r0
    1b68:	61 1d       	adc	r22, r1
    1b6a:	22 1f       	adc	r18, r18
    1b6c:	74 9f       	mul	r23, r20
    1b6e:	33 27       	eor	r19, r19
    1b70:	a0 0d       	add	r26, r0
    1b72:	61 1d       	adc	r22, r1
    1b74:	23 1f       	adc	r18, r19
    1b76:	84 9f       	mul	r24, r20
    1b78:	60 0d       	add	r22, r0
    1b7a:	21 1d       	adc	r18, r1
    1b7c:	82 2f       	mov	r24, r18
    1b7e:	76 2f       	mov	r23, r22
    1b80:	6a 2f       	mov	r22, r26
    1b82:	11 24       	eor	r1, r1
    1b84:	9f 57       	subi	r25, 0x7F	; 127
    1b86:	50 40       	sbci	r21, 0x00	; 0
    1b88:	9a f0       	brmi	.+38     	; 0x1bb0 <__mulsf3_pse+0x88>
    1b8a:	f1 f0       	breq	.+60     	; 0x1bc8 <__mulsf3_pse+0xa0>
    1b8c:	88 23       	and	r24, r24
    1b8e:	4a f0       	brmi	.+18     	; 0x1ba2 <__mulsf3_pse+0x7a>
    1b90:	ee 0f       	add	r30, r30
    1b92:	ff 1f       	adc	r31, r31
    1b94:	bb 1f       	adc	r27, r27
    1b96:	66 1f       	adc	r22, r22
    1b98:	77 1f       	adc	r23, r23
    1b9a:	88 1f       	adc	r24, r24
    1b9c:	91 50       	subi	r25, 0x01	; 1
    1b9e:	50 40       	sbci	r21, 0x00	; 0
    1ba0:	a9 f7       	brne	.-22     	; 0x1b8c <__mulsf3_pse+0x64>
    1ba2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ba4:	51 05       	cpc	r21, r1
    1ba6:	80 f0       	brcs	.+32     	; 0x1bc8 <__mulsf3_pse+0xa0>
    1ba8:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__fp_inf>
    1bac:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_szero>
    1bb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb2:	e4 f3       	brlt	.-8      	; 0x1bac <__mulsf3_pse+0x84>
    1bb4:	98 3e       	cpi	r25, 0xE8	; 232
    1bb6:	d4 f3       	brlt	.-12     	; 0x1bac <__mulsf3_pse+0x84>
    1bb8:	86 95       	lsr	r24
    1bba:	77 95       	ror	r23
    1bbc:	67 95       	ror	r22
    1bbe:	b7 95       	ror	r27
    1bc0:	f7 95       	ror	r31
    1bc2:	e7 95       	ror	r30
    1bc4:	9f 5f       	subi	r25, 0xFF	; 255
    1bc6:	c1 f7       	brne	.-16     	; 0x1bb8 <__mulsf3_pse+0x90>
    1bc8:	fe 2b       	or	r31, r30
    1bca:	88 0f       	add	r24, r24
    1bcc:	91 1d       	adc	r25, r1
    1bce:	96 95       	lsr	r25
    1bd0:	87 95       	ror	r24
    1bd2:	97 f9       	bld	r25, 7
    1bd4:	08 95       	ret

00001bd6 <square>:
    1bd6:	9b 01       	movw	r18, r22
    1bd8:	ac 01       	movw	r20, r24
    1bda:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__mulsf3>

00001bde <__divmodhi4>:
    1bde:	97 fb       	bst	r25, 7
    1be0:	07 2e       	mov	r0, r23
    1be2:	16 f4       	brtc	.+4      	; 0x1be8 <__divmodhi4+0xa>
    1be4:	00 94       	com	r0
    1be6:	07 d0       	rcall	.+14     	; 0x1bf6 <__divmodhi4_neg1>
    1be8:	77 fd       	sbrc	r23, 7
    1bea:	09 d0       	rcall	.+18     	; 0x1bfe <__divmodhi4_neg2>
    1bec:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__udivmodhi4>
    1bf0:	07 fc       	sbrc	r0, 7
    1bf2:	05 d0       	rcall	.+10     	; 0x1bfe <__divmodhi4_neg2>
    1bf4:	3e f4       	brtc	.+14     	; 0x1c04 <__divmodhi4_exit>

00001bf6 <__divmodhi4_neg1>:
    1bf6:	90 95       	com	r25
    1bf8:	81 95       	neg	r24
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	08 95       	ret

00001bfe <__divmodhi4_neg2>:
    1bfe:	70 95       	com	r23
    1c00:	61 95       	neg	r22
    1c02:	7f 4f       	sbci	r23, 0xFF	; 255

00001c04 <__divmodhi4_exit>:
    1c04:	08 95       	ret

00001c06 <__udivmodhi4>:
    1c06:	aa 1b       	sub	r26, r26
    1c08:	bb 1b       	sub	r27, r27
    1c0a:	51 e1       	ldi	r21, 0x11	; 17
    1c0c:	07 c0       	rjmp	.+14     	; 0x1c1c <__udivmodhi4_ep>

00001c0e <__udivmodhi4_loop>:
    1c0e:	aa 1f       	adc	r26, r26
    1c10:	bb 1f       	adc	r27, r27
    1c12:	a6 17       	cp	r26, r22
    1c14:	b7 07       	cpc	r27, r23
    1c16:	10 f0       	brcs	.+4      	; 0x1c1c <__udivmodhi4_ep>
    1c18:	a6 1b       	sub	r26, r22
    1c1a:	b7 0b       	sbc	r27, r23

00001c1c <__udivmodhi4_ep>:
    1c1c:	88 1f       	adc	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	5a 95       	dec	r21
    1c22:	a9 f7       	brne	.-22     	; 0x1c0e <__udivmodhi4_loop>
    1c24:	80 95       	com	r24
    1c26:	90 95       	com	r25
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	08 95       	ret

00001c2e <dtostrf>:
    1c2e:	ef 92       	push	r14
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	e8 01       	movw	r28, r16
    1c3a:	47 fd       	sbrc	r20, 7
    1c3c:	16 c0       	rjmp	.+44     	; 0x1c6a <dtostrf+0x3c>
    1c3e:	34 e0       	ldi	r19, 0x04	; 4
    1c40:	04 2e       	mov	r0, r20
    1c42:	00 0c       	add	r0, r0
    1c44:	55 0b       	sbc	r21, r21
    1c46:	57 ff       	sbrs	r21, 7
    1c48:	03 c0       	rjmp	.+6      	; 0x1c50 <dtostrf+0x22>
    1c4a:	51 95       	neg	r21
    1c4c:	41 95       	neg	r20
    1c4e:	51 09       	sbc	r21, r1
    1c50:	e3 2e       	mov	r14, r19
    1c52:	02 2f       	mov	r16, r18
    1c54:	24 2f       	mov	r18, r20
    1c56:	ae 01       	movw	r20, r28
    1c58:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <dtoa_prf>
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	ef 90       	pop	r14
    1c68:	08 95       	ret
    1c6a:	34 e1       	ldi	r19, 0x14	; 20
    1c6c:	e9 cf       	rjmp	.-46     	; 0x1c40 <dtostrf+0x12>

00001c6e <strcmp>:
    1c6e:	fb 01       	movw	r30, r22
    1c70:	dc 01       	movw	r26, r24
    1c72:	8d 91       	ld	r24, X+
    1c74:	01 90       	ld	r0, Z+
    1c76:	80 19       	sub	r24, r0
    1c78:	01 10       	cpse	r0, r1
    1c7a:	d9 f3       	breq	.-10     	; 0x1c72 <strcmp+0x4>
    1c7c:	99 0b       	sbc	r25, r25
    1c7e:	08 95       	ret

00001c80 <dtoa_prf>:
    1c80:	8f 92       	push	r8
    1c82:	9f 92       	push	r9
    1c84:	af 92       	push	r10
    1c86:	bf 92       	push	r11
    1c88:	cf 92       	push	r12
    1c8a:	df 92       	push	r13
    1c8c:	ef 92       	push	r14
    1c8e:	ff 92       	push	r15
    1c90:	0f 93       	push	r16
    1c92:	1f 93       	push	r17
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	29 97       	sbiw	r28, 0x09	; 9
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	6a 01       	movw	r12, r20
    1caa:	f2 2e       	mov	r15, r18
    1cac:	b0 2e       	mov	r11, r16
    1cae:	2b e3       	ldi	r18, 0x3B	; 59
    1cb0:	20 17       	cp	r18, r16
    1cb2:	08 f4       	brcc	.+2      	; 0x1cb6 <dtoa_prf+0x36>
    1cb4:	5f c0       	rjmp	.+190    	; 0x1d74 <dtoa_prf+0xf4>
    1cb6:	11 e0       	ldi	r17, 0x01	; 1
    1cb8:	10 0f       	add	r17, r16
    1cba:	01 2f       	mov	r16, r17
    1cbc:	27 e0       	ldi	r18, 0x07	; 7
    1cbe:	ae 01       	movw	r20, r28
    1cc0:	4f 5f       	subi	r20, 0xFF	; 255
    1cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__ftoa_engine>
    1cc8:	bc 01       	movw	r22, r24
    1cca:	39 81       	ldd	r19, Y+1	; 0x01
    1ccc:	83 2f       	mov	r24, r19
    1cce:	89 70       	andi	r24, 0x09	; 9
    1cd0:	81 30       	cpi	r24, 0x01	; 1
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <dtoa_prf+0x56>
    1cd4:	51 c0       	rjmp	.+162    	; 0x1d78 <dtoa_prf+0xf8>
    1cd6:	e1 fc       	sbrc	r14, 1
    1cd8:	51 c0       	rjmp	.+162    	; 0x1d7c <dtoa_prf+0xfc>
    1cda:	9e 2d       	mov	r25, r14
    1cdc:	91 70       	andi	r25, 0x01	; 1
    1cde:	e0 fc       	sbrc	r14, 0
    1ce0:	90 e2       	ldi	r25, 0x20	; 32
    1ce2:	ae 2d       	mov	r26, r14
    1ce4:	a0 71       	andi	r26, 0x10	; 16
    1ce6:	83 2f       	mov	r24, r19
    1ce8:	88 70       	andi	r24, 0x08	; 8
    1cea:	33 ff       	sbrs	r19, 3
    1cec:	5a c0       	rjmp	.+180    	; 0x1da2 <dtoa_prf+0x122>
    1cee:	91 11       	cpse	r25, r1
    1cf0:	47 c0       	rjmp	.+142    	; 0x1d80 <dtoa_prf+0x100>
    1cf2:	83 e0       	ldi	r24, 0x03	; 3
    1cf4:	8f 15       	cp	r24, r15
    1cf6:	08 f0       	brcs	.+2      	; 0x1cfa <dtoa_prf+0x7a>
    1cf8:	45 c0       	rjmp	.+138    	; 0x1d84 <dtoa_prf+0x104>
    1cfa:	f8 1a       	sub	r15, r24
    1cfc:	a1 11       	cpse	r26, r1
    1cfe:	08 c0       	rjmp	.+16     	; 0x1d10 <dtoa_prf+0x90>
    1d00:	f6 01       	movw	r30, r12
    1d02:	8f 2d       	mov	r24, r15
    1d04:	20 e2       	ldi	r18, 0x20	; 32
    1d06:	81 11       	cpse	r24, r1
    1d08:	3f c0       	rjmp	.+126    	; 0x1d88 <dtoa_prf+0x108>
    1d0a:	cf 0c       	add	r12, r15
    1d0c:	d1 1c       	adc	r13, r1
    1d0e:	f1 2c       	mov	r15, r1
    1d10:	99 23       	and	r25, r25
    1d12:	29 f0       	breq	.+10     	; 0x1d1e <dtoa_prf+0x9e>
    1d14:	d6 01       	movw	r26, r12
    1d16:	9c 93       	st	X, r25
    1d18:	f6 01       	movw	r30, r12
    1d1a:	31 96       	adiw	r30, 0x01	; 1
    1d1c:	6f 01       	movw	r12, r30
    1d1e:	c6 01       	movw	r24, r12
    1d20:	03 96       	adiw	r24, 0x03	; 3
    1d22:	e2 fe       	sbrs	r14, 2
    1d24:	34 c0       	rjmp	.+104    	; 0x1d8e <dtoa_prf+0x10e>
    1d26:	2e e4       	ldi	r18, 0x4E	; 78
    1d28:	d6 01       	movw	r26, r12
    1d2a:	2c 93       	st	X, r18
    1d2c:	31 e4       	ldi	r19, 0x41	; 65
    1d2e:	11 96       	adiw	r26, 0x01	; 1
    1d30:	3c 93       	st	X, r19
    1d32:	11 97       	sbiw	r26, 0x01	; 1
    1d34:	12 96       	adiw	r26, 0x02	; 2
    1d36:	2c 93       	st	X, r18
    1d38:	fc 01       	movw	r30, r24
    1d3a:	2f 2d       	mov	r18, r15
    1d3c:	30 e2       	ldi	r19, 0x20	; 32
    1d3e:	21 11       	cpse	r18, r1
    1d40:	2d c0       	rjmp	.+90     	; 0x1d9c <dtoa_prf+0x11c>
    1d42:	8f 0d       	add	r24, r15
    1d44:	91 1d       	adc	r25, r1
    1d46:	dc 01       	movw	r26, r24
    1d48:	1c 92       	st	X, r1
    1d4a:	8e ef       	ldi	r24, 0xFE	; 254
    1d4c:	9f ef       	ldi	r25, 0xFF	; 255
    1d4e:	29 96       	adiw	r28, 0x09	; 9
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	ff 90       	pop	r15
    1d64:	ef 90       	pop	r14
    1d66:	df 90       	pop	r13
    1d68:	cf 90       	pop	r12
    1d6a:	bf 90       	pop	r11
    1d6c:	af 90       	pop	r10
    1d6e:	9f 90       	pop	r9
    1d70:	8f 90       	pop	r8
    1d72:	08 95       	ret
    1d74:	1c e3       	ldi	r17, 0x3C	; 60
    1d76:	a1 cf       	rjmp	.-190    	; 0x1cba <dtoa_prf+0x3a>
    1d78:	9d e2       	ldi	r25, 0x2D	; 45
    1d7a:	b3 cf       	rjmp	.-154    	; 0x1ce2 <dtoa_prf+0x62>
    1d7c:	9b e2       	ldi	r25, 0x2B	; 43
    1d7e:	b1 cf       	rjmp	.-158    	; 0x1ce2 <dtoa_prf+0x62>
    1d80:	84 e0       	ldi	r24, 0x04	; 4
    1d82:	b8 cf       	rjmp	.-144    	; 0x1cf4 <dtoa_prf+0x74>
    1d84:	f1 2c       	mov	r15, r1
    1d86:	ba cf       	rjmp	.-140    	; 0x1cfc <dtoa_prf+0x7c>
    1d88:	21 93       	st	Z+, r18
    1d8a:	81 50       	subi	r24, 0x01	; 1
    1d8c:	bc cf       	rjmp	.-136    	; 0x1d06 <dtoa_prf+0x86>
    1d8e:	2e e6       	ldi	r18, 0x6E	; 110
    1d90:	f6 01       	movw	r30, r12
    1d92:	20 83       	st	Z, r18
    1d94:	31 e6       	ldi	r19, 0x61	; 97
    1d96:	31 83       	std	Z+1, r19	; 0x01
    1d98:	22 83       	std	Z+2, r18	; 0x02
    1d9a:	ce cf       	rjmp	.-100    	; 0x1d38 <dtoa_prf+0xb8>
    1d9c:	31 93       	st	Z+, r19
    1d9e:	21 50       	subi	r18, 0x01	; 1
    1da0:	ce cf       	rjmp	.-100    	; 0x1d3e <dtoa_prf+0xbe>
    1da2:	23 2f       	mov	r18, r19
    1da4:	24 70       	andi	r18, 0x04	; 4
    1da6:	32 ff       	sbrs	r19, 2
    1da8:	41 c0       	rjmp	.+130    	; 0x1e2c <dtoa_prf+0x1ac>
    1daa:	91 11       	cpse	r25, r1
    1dac:	2f c0       	rjmp	.+94     	; 0x1e0c <dtoa_prf+0x18c>
    1dae:	23 e0       	ldi	r18, 0x03	; 3
    1db0:	2f 15       	cp	r18, r15
    1db2:	10 f4       	brcc	.+4      	; 0x1db8 <dtoa_prf+0x138>
    1db4:	8f 2d       	mov	r24, r15
    1db6:	82 1b       	sub	r24, r18
    1db8:	a1 11       	cpse	r26, r1
    1dba:	08 c0       	rjmp	.+16     	; 0x1dcc <dtoa_prf+0x14c>
    1dbc:	f6 01       	movw	r30, r12
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e2       	ldi	r19, 0x20	; 32
    1dc2:	21 11       	cpse	r18, r1
    1dc4:	25 c0       	rjmp	.+74     	; 0x1e10 <dtoa_prf+0x190>
    1dc6:	c8 0e       	add	r12, r24
    1dc8:	d1 1c       	adc	r13, r1
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	99 23       	and	r25, r25
    1dce:	31 f0       	breq	.+12     	; 0x1ddc <dtoa_prf+0x15c>
    1dd0:	f6 01       	movw	r30, r12
    1dd2:	90 83       	st	Z, r25
    1dd4:	96 01       	movw	r18, r12
    1dd6:	2f 5f       	subi	r18, 0xFF	; 255
    1dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dda:	69 01       	movw	r12, r18
    1ddc:	96 01       	movw	r18, r12
    1dde:	2d 5f       	subi	r18, 0xFD	; 253
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	e2 fe       	sbrs	r14, 2
    1de4:	18 c0       	rjmp	.+48     	; 0x1e16 <dtoa_prf+0x196>
    1de6:	99 e4       	ldi	r25, 0x49	; 73
    1de8:	d6 01       	movw	r26, r12
    1dea:	9c 93       	st	X, r25
    1dec:	9e e4       	ldi	r25, 0x4E	; 78
    1dee:	11 96       	adiw	r26, 0x01	; 1
    1df0:	9c 93       	st	X, r25
    1df2:	11 97       	sbiw	r26, 0x01	; 1
    1df4:	96 e4       	ldi	r25, 0x46	; 70
    1df6:	12 96       	adiw	r26, 0x02	; 2
    1df8:	9c 93       	st	X, r25
    1dfa:	f9 01       	movw	r30, r18
    1dfc:	98 2f       	mov	r25, r24
    1dfe:	40 e2       	ldi	r20, 0x20	; 32
    1e00:	91 11       	cpse	r25, r1
    1e02:	11 c0       	rjmp	.+34     	; 0x1e26 <dtoa_prf+0x1a6>
    1e04:	28 0f       	add	r18, r24
    1e06:	31 1d       	adc	r19, r1
    1e08:	d9 01       	movw	r26, r18
    1e0a:	9e cf       	rjmp	.-196    	; 0x1d48 <dtoa_prf+0xc8>
    1e0c:	24 e0       	ldi	r18, 0x04	; 4
    1e0e:	d0 cf       	rjmp	.-96     	; 0x1db0 <dtoa_prf+0x130>
    1e10:	31 93       	st	Z+, r19
    1e12:	21 50       	subi	r18, 0x01	; 1
    1e14:	d6 cf       	rjmp	.-84     	; 0x1dc2 <dtoa_prf+0x142>
    1e16:	99 e6       	ldi	r25, 0x69	; 105
    1e18:	f6 01       	movw	r30, r12
    1e1a:	90 83       	st	Z, r25
    1e1c:	9e e6       	ldi	r25, 0x6E	; 110
    1e1e:	91 83       	std	Z+1, r25	; 0x01
    1e20:	96 e6       	ldi	r25, 0x66	; 102
    1e22:	92 83       	std	Z+2, r25	; 0x02
    1e24:	ea cf       	rjmp	.-44     	; 0x1dfa <dtoa_prf+0x17a>
    1e26:	41 93       	st	Z+, r20
    1e28:	91 50       	subi	r25, 0x01	; 1
    1e2a:	ea cf       	rjmp	.-44     	; 0x1e00 <dtoa_prf+0x180>
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	91 11       	cpse	r25, r1
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <dtoa_prf+0x1b8>
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	16 16       	cp	r1, r22
    1e3a:	17 06       	cpc	r1, r23
    1e3c:	0c f0       	brlt	.+2      	; 0x1e40 <dtoa_prf+0x1c0>
    1e3e:	75 c0       	rjmp	.+234    	; 0x1f2a <dtoa_prf+0x2aa>
    1e40:	fb 01       	movw	r30, r22
    1e42:	31 96       	adiw	r30, 0x01	; 1
    1e44:	e4 0f       	add	r30, r20
    1e46:	f5 1f       	adc	r31, r21
    1e48:	bb 20       	and	r11, r11
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <dtoa_prf+0x1ce>
    1e4c:	71 c0       	rjmp	.+226    	; 0x1f30 <dtoa_prf+0x2b0>
    1e4e:	4b 2d       	mov	r20, r11
    1e50:	50 e0       	ldi	r21, 0x00	; 0
    1e52:	4f 5f       	subi	r20, 0xFF	; 255
    1e54:	5f 4f       	sbci	r21, 0xFF	; 255
    1e56:	4e 0f       	add	r20, r30
    1e58:	5f 1f       	adc	r21, r31
    1e5a:	ef 2d       	mov	r30, r15
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	4e 17       	cp	r20, r30
    1e60:	5f 07       	cpc	r21, r31
    1e62:	14 f4       	brge	.+4      	; 0x1e68 <dtoa_prf+0x1e8>
    1e64:	2f 2d       	mov	r18, r15
    1e66:	24 1b       	sub	r18, r20
    1e68:	8e 2d       	mov	r24, r14
    1e6a:	88 71       	andi	r24, 0x18	; 24
    1e6c:	41 f4       	brne	.+16     	; 0x1e7e <dtoa_prf+0x1fe>
    1e6e:	f6 01       	movw	r30, r12
    1e70:	82 2f       	mov	r24, r18
    1e72:	40 e2       	ldi	r20, 0x20	; 32
    1e74:	81 11       	cpse	r24, r1
    1e76:	5f c0       	rjmp	.+190    	; 0x1f36 <dtoa_prf+0x2b6>
    1e78:	c2 0e       	add	r12, r18
    1e7a:	d1 1c       	adc	r13, r1
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	99 23       	and	r25, r25
    1e80:	29 f0       	breq	.+10     	; 0x1e8c <dtoa_prf+0x20c>
    1e82:	f6 01       	movw	r30, r12
    1e84:	90 83       	st	Z, r25
    1e86:	c6 01       	movw	r24, r12
    1e88:	01 96       	adiw	r24, 0x01	; 1
    1e8a:	6c 01       	movw	r12, r24
    1e8c:	a1 11       	cpse	r26, r1
    1e8e:	08 c0       	rjmp	.+16     	; 0x1ea0 <dtoa_prf+0x220>
    1e90:	f6 01       	movw	r30, r12
    1e92:	82 2f       	mov	r24, r18
    1e94:	90 e3       	ldi	r25, 0x30	; 48
    1e96:	81 11       	cpse	r24, r1
    1e98:	51 c0       	rjmp	.+162    	; 0x1f3c <dtoa_prf+0x2bc>
    1e9a:	c2 0e       	add	r12, r18
    1e9c:	d1 1c       	adc	r13, r1
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	01 2f       	mov	r16, r17
    1ea2:	06 0f       	add	r16, r22
    1ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea6:	a3 2f       	mov	r26, r19
    1ea8:	a0 71       	andi	r26, 0x10	; 16
    1eaa:	aa 2e       	mov	r10, r26
    1eac:	34 ff       	sbrs	r19, 4
    1eae:	03 c0       	rjmp	.+6      	; 0x1eb6 <dtoa_prf+0x236>
    1eb0:	91 33       	cpi	r25, 0x31	; 49
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <dtoa_prf+0x236>
    1eb4:	01 50       	subi	r16, 0x01	; 1
    1eb6:	10 16       	cp	r1, r16
    1eb8:	0c f0       	brlt	.+2      	; 0x1ebc <dtoa_prf+0x23c>
    1eba:	43 c0       	rjmp	.+134    	; 0x1f42 <dtoa_prf+0x2c2>
    1ebc:	09 30       	cpi	r16, 0x09	; 9
    1ebe:	08 f0       	brcs	.+2      	; 0x1ec2 <dtoa_prf+0x242>
    1ec0:	08 e0       	ldi	r16, 0x08	; 8
    1ec2:	ab 01       	movw	r20, r22
    1ec4:	77 ff       	sbrs	r23, 7
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <dtoa_prf+0x24c>
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	50 e0       	ldi	r21, 0x00	; 0
    1ecc:	fb 01       	movw	r30, r22
    1ece:	31 96       	adiw	r30, 0x01	; 1
    1ed0:	e4 1b       	sub	r30, r20
    1ed2:	f5 0b       	sbc	r31, r21
    1ed4:	a1 e0       	ldi	r26, 0x01	; 1
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	ac 0f       	add	r26, r28
    1eda:	bd 1f       	adc	r27, r29
    1edc:	ea 0f       	add	r30, r26
    1ede:	fb 1f       	adc	r31, r27
    1ee0:	3e e2       	ldi	r19, 0x2E	; 46
    1ee2:	4b 01       	movw	r8, r22
    1ee4:	80 1a       	sub	r8, r16
    1ee6:	91 08       	sbc	r9, r1
    1ee8:	0b 2d       	mov	r16, r11
    1eea:	10 e0       	ldi	r17, 0x00	; 0
    1eec:	11 95       	neg	r17
    1eee:	01 95       	neg	r16
    1ef0:	11 09       	sbc	r17, r1
    1ef2:	4f 3f       	cpi	r20, 0xFF	; 255
    1ef4:	bf ef       	ldi	r27, 0xFF	; 255
    1ef6:	5b 07       	cpc	r21, r27
    1ef8:	21 f4       	brne	.+8      	; 0x1f02 <dtoa_prf+0x282>
    1efa:	d6 01       	movw	r26, r12
    1efc:	3c 93       	st	X, r19
    1efe:	11 96       	adiw	r26, 0x01	; 1
    1f00:	6d 01       	movw	r12, r26
    1f02:	64 17       	cp	r22, r20
    1f04:	75 07       	cpc	r23, r21
    1f06:	fc f0       	brlt	.+62     	; 0x1f46 <dtoa_prf+0x2c6>
    1f08:	84 16       	cp	r8, r20
    1f0a:	95 06       	cpc	r9, r21
    1f0c:	e4 f4       	brge	.+56     	; 0x1f46 <dtoa_prf+0x2c6>
    1f0e:	80 81       	ld	r24, Z
    1f10:	41 50       	subi	r20, 0x01	; 1
    1f12:	51 09       	sbc	r21, r1
    1f14:	31 96       	adiw	r30, 0x01	; 1
    1f16:	d6 01       	movw	r26, r12
    1f18:	11 96       	adiw	r26, 0x01	; 1
    1f1a:	7d 01       	movw	r14, r26
    1f1c:	40 17       	cp	r20, r16
    1f1e:	51 07       	cpc	r21, r17
    1f20:	a4 f0       	brlt	.+40     	; 0x1f4a <dtoa_prf+0x2ca>
    1f22:	d6 01       	movw	r26, r12
    1f24:	8c 93       	st	X, r24
    1f26:	67 01       	movw	r12, r14
    1f28:	e4 cf       	rjmp	.-56     	; 0x1ef2 <dtoa_prf+0x272>
    1f2a:	e1 e0       	ldi	r30, 0x01	; 1
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	8a cf       	rjmp	.-236    	; 0x1e44 <dtoa_prf+0x1c4>
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	90 cf       	rjmp	.-224    	; 0x1e56 <dtoa_prf+0x1d6>
    1f36:	41 93       	st	Z+, r20
    1f38:	81 50       	subi	r24, 0x01	; 1
    1f3a:	9c cf       	rjmp	.-200    	; 0x1e74 <dtoa_prf+0x1f4>
    1f3c:	91 93       	st	Z+, r25
    1f3e:	81 50       	subi	r24, 0x01	; 1
    1f40:	aa cf       	rjmp	.-172    	; 0x1e96 <dtoa_prf+0x216>
    1f42:	01 e0       	ldi	r16, 0x01	; 1
    1f44:	be cf       	rjmp	.-132    	; 0x1ec2 <dtoa_prf+0x242>
    1f46:	80 e3       	ldi	r24, 0x30	; 48
    1f48:	e3 cf       	rjmp	.-58     	; 0x1f10 <dtoa_prf+0x290>
    1f4a:	64 17       	cp	r22, r20
    1f4c:	75 07       	cpc	r23, r21
    1f4e:	31 f4       	brne	.+12     	; 0x1f5c <dtoa_prf+0x2dc>
    1f50:	96 33       	cpi	r25, 0x36	; 54
    1f52:	90 f4       	brcc	.+36     	; 0x1f78 <dtoa_prf+0x2f8>
    1f54:	95 33       	cpi	r25, 0x35	; 53
    1f56:	11 f4       	brne	.+4      	; 0x1f5c <dtoa_prf+0x2dc>
    1f58:	aa 20       	and	r10, r10
    1f5a:	71 f0       	breq	.+28     	; 0x1f78 <dtoa_prf+0x2f8>
    1f5c:	f6 01       	movw	r30, r12
    1f5e:	80 83       	st	Z, r24
    1f60:	f7 01       	movw	r30, r14
    1f62:	82 2f       	mov	r24, r18
    1f64:	90 e2       	ldi	r25, 0x20	; 32
    1f66:	81 11       	cpse	r24, r1
    1f68:	09 c0       	rjmp	.+18     	; 0x1f7c <dtoa_prf+0x2fc>
    1f6a:	f7 01       	movw	r30, r14
    1f6c:	e2 0f       	add	r30, r18
    1f6e:	f1 1d       	adc	r31, r1
    1f70:	10 82       	st	Z, r1
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	eb ce       	rjmp	.-554    	; 0x1d4e <dtoa_prf+0xce>
    1f78:	81 e3       	ldi	r24, 0x31	; 49
    1f7a:	f0 cf       	rjmp	.-32     	; 0x1f5c <dtoa_prf+0x2dc>
    1f7c:	91 93       	st	Z+, r25
    1f7e:	81 50       	subi	r24, 0x01	; 1
    1f80:	f2 cf       	rjmp	.-28     	; 0x1f66 <dtoa_prf+0x2e6>

00001f82 <__ftoa_engine>:
    1f82:	28 30       	cpi	r18, 0x08	; 8
    1f84:	08 f0       	brcs	.+2      	; 0x1f88 <__ftoa_engine+0x6>
    1f86:	27 e0       	ldi	r18, 0x07	; 7
    1f88:	33 27       	eor	r19, r19
    1f8a:	da 01       	movw	r26, r20
    1f8c:	99 0f       	add	r25, r25
    1f8e:	31 1d       	adc	r19, r1
    1f90:	87 fd       	sbrc	r24, 7
    1f92:	91 60       	ori	r25, 0x01	; 1
    1f94:	00 96       	adiw	r24, 0x00	; 0
    1f96:	61 05       	cpc	r22, r1
    1f98:	71 05       	cpc	r23, r1
    1f9a:	39 f4       	brne	.+14     	; 0x1faa <__ftoa_engine+0x28>
    1f9c:	32 60       	ori	r19, 0x02	; 2
    1f9e:	2e 5f       	subi	r18, 0xFE	; 254
    1fa0:	3d 93       	st	X+, r19
    1fa2:	30 e3       	ldi	r19, 0x30	; 48
    1fa4:	2a 95       	dec	r18
    1fa6:	e1 f7       	brne	.-8      	; 0x1fa0 <__ftoa_engine+0x1e>
    1fa8:	08 95       	ret
    1faa:	9f 3f       	cpi	r25, 0xFF	; 255
    1fac:	30 f0       	brcs	.+12     	; 0x1fba <__ftoa_engine+0x38>
    1fae:	80 38       	cpi	r24, 0x80	; 128
    1fb0:	71 05       	cpc	r23, r1
    1fb2:	61 05       	cpc	r22, r1
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <__ftoa_engine+0x36>
    1fb6:	3c 5f       	subi	r19, 0xFC	; 252
    1fb8:	3c 5f       	subi	r19, 0xFC	; 252
    1fba:	3d 93       	st	X+, r19
    1fbc:	91 30       	cpi	r25, 0x01	; 1
    1fbe:	08 f0       	brcs	.+2      	; 0x1fc2 <__ftoa_engine+0x40>
    1fc0:	80 68       	ori	r24, 0x80	; 128
    1fc2:	91 1d       	adc	r25, r1
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	1f 93       	push	r17
    1fca:	0f 93       	push	r16
    1fcc:	ff 92       	push	r15
    1fce:	ef 92       	push	r14
    1fd0:	19 2f       	mov	r17, r25
    1fd2:	98 7f       	andi	r25, 0xF8	; 248
    1fd4:	96 95       	lsr	r25
    1fd6:	e9 2f       	mov	r30, r25
    1fd8:	96 95       	lsr	r25
    1fda:	96 95       	lsr	r25
    1fdc:	e9 0f       	add	r30, r25
    1fde:	ff 27       	eor	r31, r31
    1fe0:	ec 5e       	subi	r30, 0xEC	; 236
    1fe2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe4:	99 27       	eor	r25, r25
    1fe6:	33 27       	eor	r19, r19
    1fe8:	ee 24       	eor	r14, r14
    1fea:	ff 24       	eor	r15, r15
    1fec:	a7 01       	movw	r20, r14
    1fee:	e7 01       	movw	r28, r14
    1ff0:	05 90       	lpm	r0, Z+
    1ff2:	08 94       	sec
    1ff4:	07 94       	ror	r0
    1ff6:	28 f4       	brcc	.+10     	; 0x2002 <__ftoa_engine+0x80>
    1ff8:	36 0f       	add	r19, r22
    1ffa:	e7 1e       	adc	r14, r23
    1ffc:	f8 1e       	adc	r15, r24
    1ffe:	49 1f       	adc	r20, r25
    2000:	51 1d       	adc	r21, r1
    2002:	66 0f       	add	r22, r22
    2004:	77 1f       	adc	r23, r23
    2006:	88 1f       	adc	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	06 94       	lsr	r0
    200c:	a1 f7       	brne	.-24     	; 0x1ff6 <__ftoa_engine+0x74>
    200e:	05 90       	lpm	r0, Z+
    2010:	07 94       	ror	r0
    2012:	28 f4       	brcc	.+10     	; 0x201e <__ftoa_engine+0x9c>
    2014:	e7 0e       	add	r14, r23
    2016:	f8 1e       	adc	r15, r24
    2018:	49 1f       	adc	r20, r25
    201a:	56 1f       	adc	r21, r22
    201c:	c1 1d       	adc	r28, r1
    201e:	77 0f       	add	r23, r23
    2020:	88 1f       	adc	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	66 1f       	adc	r22, r22
    2026:	06 94       	lsr	r0
    2028:	a1 f7       	brne	.-24     	; 0x2012 <__ftoa_engine+0x90>
    202a:	05 90       	lpm	r0, Z+
    202c:	07 94       	ror	r0
    202e:	28 f4       	brcc	.+10     	; 0x203a <__ftoa_engine+0xb8>
    2030:	f8 0e       	add	r15, r24
    2032:	49 1f       	adc	r20, r25
    2034:	56 1f       	adc	r21, r22
    2036:	c7 1f       	adc	r28, r23
    2038:	d1 1d       	adc	r29, r1
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	66 1f       	adc	r22, r22
    2040:	77 1f       	adc	r23, r23
    2042:	06 94       	lsr	r0
    2044:	a1 f7       	brne	.-24     	; 0x202e <__ftoa_engine+0xac>
    2046:	05 90       	lpm	r0, Z+
    2048:	07 94       	ror	r0
    204a:	20 f4       	brcc	.+8      	; 0x2054 <__ftoa_engine+0xd2>
    204c:	49 0f       	add	r20, r25
    204e:	56 1f       	adc	r21, r22
    2050:	c7 1f       	adc	r28, r23
    2052:	d8 1f       	adc	r29, r24
    2054:	99 0f       	add	r25, r25
    2056:	66 1f       	adc	r22, r22
    2058:	77 1f       	adc	r23, r23
    205a:	88 1f       	adc	r24, r24
    205c:	06 94       	lsr	r0
    205e:	a9 f7       	brne	.-22     	; 0x204a <__ftoa_engine+0xc8>
    2060:	84 91       	lpm	r24, Z
    2062:	10 95       	com	r17
    2064:	17 70       	andi	r17, 0x07	; 7
    2066:	41 f0       	breq	.+16     	; 0x2078 <__ftoa_engine+0xf6>
    2068:	d6 95       	lsr	r29
    206a:	c7 95       	ror	r28
    206c:	57 95       	ror	r21
    206e:	47 95       	ror	r20
    2070:	f7 94       	ror	r15
    2072:	e7 94       	ror	r14
    2074:	1a 95       	dec	r17
    2076:	c1 f7       	brne	.-16     	; 0x2068 <__ftoa_engine+0xe6>
    2078:	ea eb       	ldi	r30, 0xBA	; 186
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	68 94       	set
    207e:	15 90       	lpm	r1, Z+
    2080:	15 91       	lpm	r17, Z+
    2082:	35 91       	lpm	r19, Z+
    2084:	65 91       	lpm	r22, Z+
    2086:	95 91       	lpm	r25, Z+
    2088:	05 90       	lpm	r0, Z+
    208a:	7f e2       	ldi	r23, 0x2F	; 47
    208c:	73 95       	inc	r23
    208e:	e1 18       	sub	r14, r1
    2090:	f1 0a       	sbc	r15, r17
    2092:	43 0b       	sbc	r20, r19
    2094:	56 0b       	sbc	r21, r22
    2096:	c9 0b       	sbc	r28, r25
    2098:	d0 09       	sbc	r29, r0
    209a:	c0 f7       	brcc	.-16     	; 0x208c <__ftoa_engine+0x10a>
    209c:	e1 0c       	add	r14, r1
    209e:	f1 1e       	adc	r15, r17
    20a0:	43 1f       	adc	r20, r19
    20a2:	56 1f       	adc	r21, r22
    20a4:	c9 1f       	adc	r28, r25
    20a6:	d0 1d       	adc	r29, r0
    20a8:	7e f4       	brtc	.+30     	; 0x20c8 <__ftoa_engine+0x146>
    20aa:	70 33       	cpi	r23, 0x30	; 48
    20ac:	11 f4       	brne	.+4      	; 0x20b2 <__ftoa_engine+0x130>
    20ae:	8a 95       	dec	r24
    20b0:	e6 cf       	rjmp	.-52     	; 0x207e <__ftoa_engine+0xfc>
    20b2:	e8 94       	clt
    20b4:	01 50       	subi	r16, 0x01	; 1
    20b6:	30 f0       	brcs	.+12     	; 0x20c4 <__ftoa_engine+0x142>
    20b8:	08 0f       	add	r16, r24
    20ba:	0a f4       	brpl	.+2      	; 0x20be <__ftoa_engine+0x13c>
    20bc:	00 27       	eor	r16, r16
    20be:	02 17       	cp	r16, r18
    20c0:	08 f4       	brcc	.+2      	; 0x20c4 <__ftoa_engine+0x142>
    20c2:	20 2f       	mov	r18, r16
    20c4:	23 95       	inc	r18
    20c6:	02 2f       	mov	r16, r18
    20c8:	7a 33       	cpi	r23, 0x3A	; 58
    20ca:	28 f0       	brcs	.+10     	; 0x20d6 <__ftoa_engine+0x154>
    20cc:	79 e3       	ldi	r23, 0x39	; 57
    20ce:	7d 93       	st	X+, r23
    20d0:	2a 95       	dec	r18
    20d2:	e9 f7       	brne	.-6      	; 0x20ce <__ftoa_engine+0x14c>
    20d4:	10 c0       	rjmp	.+32     	; 0x20f6 <__ftoa_engine+0x174>
    20d6:	7d 93       	st	X+, r23
    20d8:	2a 95       	dec	r18
    20da:	89 f6       	brne	.-94     	; 0x207e <__ftoa_engine+0xfc>
    20dc:	06 94       	lsr	r0
    20de:	97 95       	ror	r25
    20e0:	67 95       	ror	r22
    20e2:	37 95       	ror	r19
    20e4:	17 95       	ror	r17
    20e6:	17 94       	ror	r1
    20e8:	e1 18       	sub	r14, r1
    20ea:	f1 0a       	sbc	r15, r17
    20ec:	43 0b       	sbc	r20, r19
    20ee:	56 0b       	sbc	r21, r22
    20f0:	c9 0b       	sbc	r28, r25
    20f2:	d0 09       	sbc	r29, r0
    20f4:	98 f0       	brcs	.+38     	; 0x211c <__ftoa_engine+0x19a>
    20f6:	23 95       	inc	r18
    20f8:	7e 91       	ld	r23, -X
    20fa:	73 95       	inc	r23
    20fc:	7a 33       	cpi	r23, 0x3A	; 58
    20fe:	08 f0       	brcs	.+2      	; 0x2102 <__ftoa_engine+0x180>
    2100:	70 e3       	ldi	r23, 0x30	; 48
    2102:	7c 93       	st	X, r23
    2104:	20 13       	cpse	r18, r16
    2106:	b8 f7       	brcc	.-18     	; 0x20f6 <__ftoa_engine+0x174>
    2108:	7e 91       	ld	r23, -X
    210a:	70 61       	ori	r23, 0x10	; 16
    210c:	7d 93       	st	X+, r23
    210e:	30 f0       	brcs	.+12     	; 0x211c <__ftoa_engine+0x19a>
    2110:	83 95       	inc	r24
    2112:	71 e3       	ldi	r23, 0x31	; 49
    2114:	7d 93       	st	X+, r23
    2116:	70 e3       	ldi	r23, 0x30	; 48
    2118:	2a 95       	dec	r18
    211a:	e1 f7       	brne	.-8      	; 0x2114 <__ftoa_engine+0x192>
    211c:	11 24       	eor	r1, r1
    211e:	ef 90       	pop	r14
    2120:	ff 90       	pop	r15
    2122:	0f 91       	pop	r16
    2124:	1f 91       	pop	r17
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	99 27       	eor	r25, r25
    212c:	87 fd       	sbrc	r24, 7
    212e:	90 95       	com	r25
    2130:	08 95       	ret

00002132 <_exit>:
    2132:	f8 94       	cli

00002134 <__stop_program>:
    2134:	ff cf       	rjmp	.-2      	; 0x2134 <__stop_program>
