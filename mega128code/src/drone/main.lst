
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000240  00800100  00002306  0000239a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800340  00800340  000025da  2**0
                  ALLOC
  3 .stab         00004e0c  00000000  00000000  000025dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b66  00000000  00000000  000073e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008f4e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008f60  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00008f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  0000971c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00009e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00009e51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__ctors_end>
       4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       8:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      10:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_5>
      18:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_6>
      1c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      20:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      24:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      28:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      2c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      30:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      34:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      3c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      40:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      44:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      48:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      4c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      50:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      54:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      58:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      5c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      60:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      64:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      68:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_26>
      6c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      70:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      74:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      78:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      7c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      80:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      84:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      88:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__trampolines_end>:
      ba:	00 40       	sbci	r16, 0x00	; 0
      bc:	7a 10       	cpse	r7, r10
      be:	f3 5a       	subi	r31, 0xA3	; 163
      c0:	00 a0       	ldd	r0, Z+32	; 0x20
      c2:	72 4e       	sbci	r23, 0xE2	; 226
      c4:	18 09       	sbc	r17, r8
      c6:	00 10       	cpse	r0, r0
      c8:	a5 d4       	rcall	.+2378   	; 0xa14 <path2+0x126>
      ca:	e8 00       	.word	0x00e8	; ????
      cc:	00 e8       	ldi	r16, 0x80	; 128
      ce:	76 48       	sbci	r23, 0x86	; 134
      d0:	17 00       	.word	0x0017	; ????
      d2:	00 e4       	ldi	r16, 0x40	; 64
      d4:	0b 54       	subi	r16, 0x4B	; 75
      d6:	02 00       	.word	0x0002	; ????
      d8:	00 ca       	rjmp	.-3072   	; 0xfffff4da <__eeprom_end+0xff7ef4da>
      da:	9a 3b       	cpi	r25, 0xBA	; 186
      dc:	00 00       	nop
      de:	00 e1       	ldi	r16, 0x10	; 16
      e0:	f5 05       	cpc	r31, r5
      e2:	00 00       	nop
      e4:	80 96       	adiw	r24, 0x20	; 32
      e6:	98 00       	.word	0x0098	; ????
      e8:	00 00       	nop
      ea:	40 42       	sbci	r20, 0x20	; 32
      ec:	0f 00       	.word	0x000f	; ????
      ee:	00 00       	nop
      f0:	a0 86       	std	Z+8, r10	; 0x08
      f2:	01 00       	.word	0x0001	; ????
      f4:	00 00       	nop
      f6:	10 27       	eor	r17, r16
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	e8 03       	fmulsu	r22, r16
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	64 00       	.word	0x0064	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	0a 00       	.word	0x000a	; ????
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	00 00       	nop
     114:	2c 76       	andi	r18, 0x6C	; 108
     116:	d8 88       	ldd	r13, Y+16	; 0x10
     118:	dc 67       	ori	r29, 0x7C	; 124
     11a:	4f 08       	sbc	r4, r15
     11c:	23 df       	rcall	.-442    	; 0xffffff64 <__eeprom_end+0xff7eff64>
     11e:	c1 df       	rcall	.-126    	; 0xa2 <__SREG__+0x63>
     120:	ae 59       	subi	r26, 0x9E	; 158
     122:	e1 b1       	in	r30, 0x01	; 1
     124:	b7 96       	adiw	r30, 0x27	; 39
     126:	e5 e3       	ldi	r30, 0x35	; 53
     128:	e4 53       	subi	r30, 0x34	; 52
     12a:	c6 3a       	cpi	r28, 0xA6	; 166
     12c:	e6 51       	subi	r30, 0x16	; 22
     12e:	99 76       	andi	r25, 0x69	; 105
     130:	96 e8       	ldi	r25, 0x86	; 134
     132:	e6 c2       	rjmp	.+1484   	; 0x700 <path1+0x3c>
     134:	84 26       	eor	r8, r20
     136:	eb 89       	ldd	r30, Y+19	; 0x13
     138:	8c 9b       	sbis	0x11, 4	; 17
     13a:	62 ed       	ldi	r22, 0xD2	; 210
     13c:	40 7c       	andi	r20, 0xC0	; 192
     13e:	6f fc       	.word	0xfc6f	; ????
     140:	ef bc       	out	0x2f, r14	; 47
     142:	9c 9f       	mul	r25, r28
     144:	40 f2       	brcs	.-112    	; 0xd6 <__trampolines_end+0x1c>
     146:	ba a5       	ldd	r27, Y+42	; 0x2a
     148:	6f a5       	ldd	r22, Y+47	; 0x2f
     14a:	f4 90       	lpm	r15, Z
     14c:	05 5a       	subi	r16, 0xA5	; 165
     14e:	2a f7       	brpl	.-54     	; 0x11a <__trampolines_end+0x60>
     150:	5c 93       	st	X, r21
     152:	6b 6c       	ori	r22, 0xCB	; 203
     154:	f9 67       	ori	r31, 0x79	; 121
     156:	6d c1       	rjmp	.+730    	; 0x432 <__vector_6+0xdc>
     158:	1b fc       	.word	0xfc1b	; ????
     15a:	e0 e4       	ldi	r30, 0x40	; 64
     15c:	0d 47       	sbci	r16, 0x7D	; 125
     15e:	fe f5       	brtc	.+126    	; 0x1de <__do_clear_bss+0x4>
     160:	20 e6       	ldi	r18, 0x60	; 96
     162:	b5 00       	.word	0x00b5	; ????
     164:	d0 ed       	ldi	r29, 0xD0	; 208
     166:	90 2e       	mov	r9, r16
     168:	03 00       	.word	0x0003	; ????
     16a:	94 35       	cpi	r25, 0x54	; 84
     16c:	77 05       	cpc	r23, r7
     16e:	00 80       	ld	r0, Z
     170:	84 1e       	adc	r8, r20
     172:	08 00       	.word	0x0008	; ????
     174:	00 20       	and	r0, r0
     176:	4e 0a       	sbc	r4, r30
     178:	00 00       	nop
     17a:	00 c8       	rjmp	.-4096   	; 0xfffff17c <__eeprom_end+0xff7ef17c>
     17c:	0c 33       	cpi	r16, 0x3C	; 60
     17e:	33 33       	cpi	r19, 0x33	; 51
     180:	33 0f       	add	r19, r19
     182:	98 6e       	ori	r25, 0xE8	; 232
     184:	12 83       	std	Z+2, r17	; 0x02
     186:	11 41       	sbci	r17, 0x11	; 17
     188:	ef 8d       	ldd	r30, Y+31	; 0x1f
     18a:	21 14       	cp	r2, r1
     18c:	89 3b       	cpi	r24, 0xB9	; 185
     18e:	e6 55       	subi	r30, 0x56	; 86
     190:	16 cf       	rjmp	.-468    	; 0xffffffbe <__eeprom_end+0xff7effbe>
     192:	fe e6       	ldi	r31, 0x6E	; 110
     194:	db 18       	sub	r13, r11
     196:	d1 84       	ldd	r13, Z+9	; 0x09
     198:	4b 38       	cpi	r20, 0x8B	; 139
     19a:	1b f7       	brvc	.-58     	; 0x162 <__trampolines_end+0xa8>
     19c:	7c 1d       	adc	r23, r12
     19e:	90 1d       	adc	r25, r0
     1a0:	a4 bb       	out	0x14, r26	; 20
     1a2:	e4 24       	eor	r14, r4
     1a4:	20 32       	cpi	r18, 0x20	; 32
     1a6:	84 72       	andi	r24, 0x24	; 36
     1a8:	5e 22       	and	r5, r30
     1aa:	81 00       	.word	0x0081	; ????
     1ac:	c9 f1       	breq	.+114    	; 0x220 <__vector_5+0x2a>
     1ae:	24 ec       	ldi	r18, 0xC4	; 196
     1b0:	a1 e5       	ldi	r26, 0x51	; 81
     1b2:	3d 27       	eor	r19, r29

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d0 e1       	ldi	r29, 0x10	; 16
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	13 e0       	ldi	r17, 0x03	; 3
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	e6 e0       	ldi	r30, 0x06	; 6
     1c8:	f3 e2       	ldi	r31, 0x23	; 35
     1ca:	00 e0       	ldi	r16, 0x00	; 0
     1cc:	0b bf       	out	0x3b, r16	; 59
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__do_copy_data+0x14>
     1d0:	07 90       	elpm	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	a0 34       	cpi	r26, 0x40	; 64
     1d6:	b1 07       	cpc	r27, r17
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <__do_copy_data+0x10>

000001da <__do_clear_bss>:
     1da:	23 e0       	ldi	r18, 0x03	; 3
     1dc:	a0 e4       	ldi	r26, 0x40	; 64
     1de:	b3 e0       	ldi	r27, 0x03	; 3
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <.do_clear_bss_start>

000001e2 <.do_clear_bss_loop>:
     1e2:	1d 92       	st	X+, r1

000001e4 <.do_clear_bss_start>:
     1e4:	a0 35       	cpi	r26, 0x50	; 80
     1e6:	b2 07       	cpc	r27, r18
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <.do_clear_bss_loop>
     1ea:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <main>
     1ee:	0c 94 81 11 	jmp	0x2302	; 0x2302 <_exit>

000001f2 <__bad_interrupt>:
     1f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f6 <__vector_5>:
    }

    return 0;
}

ISR(INT4_vect){  //Left bumper on PE4
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	11 24       	eor	r1, r1
     200:	0b b6       	in	r0, 0x3b	; 59
     202:	0f 92       	push	r0
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	2f 93       	push	r18
     20e:	3f 93       	push	r19
     210:	4f 93       	push	r20
     212:	5f 93       	push	r21
     214:	6f 93       	push	r22
     216:	7f 93       	push	r23
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	af 93       	push	r26
     21e:	bf 93       	push	r27
     220:	ef 93       	push	r30
     222:	ff 93       	push	r31
    object_detected = 1;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	90 93 41 03 	sts	0x0341, r25
     22c:	80 93 40 03 	sts	0x0340, r24
    USART0_send_string((unsigned char *)"Left Bumper Hit\r\n");
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>

    //reverse
    USART0_send_string((unsigned char *)"Reversing\r\n");
     238:	84 e1       	ldi	r24, 0x14	; 20
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(0,0,STABLE_Z);
     240:	60 91 00 01 	lds	r22, 0x0100
     244:	70 91 01 01 	lds	r23, 0x0101
     248:	07 2e       	mov	r0, r23
     24a:	00 0c       	add	r0, r0
     24c:	88 0b       	sbc	r24, r24
     24e:	99 0b       	sbc	r25, r25
     250:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     254:	7b 01       	movw	r14, r22
     256:	8c 01       	movw	r16, r24
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	a9 01       	movw	r20, r18
     25e:	ca 01       	movw	r24, r20
     260:	b9 01       	movw	r22, r18
     262:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     266:	2f ef       	ldi	r18, 0xFF	; 255
     268:	83 ed       	ldi	r24, 0xD3	; 211
     26a:	90 e3       	ldi	r25, 0x30	; 48
     26c:	21 50       	subi	r18, 0x01	; 1
     26e:	80 40       	sbci	r24, 0x00	; 0
     270:	90 40       	sbci	r25, 0x00	; 0
     272:	e1 f7       	brne	.-8      	; 0x26c <__vector_5+0x76>
     274:	00 c0       	rjmp	.+0      	; 0x276 <__vector_5+0x80>
     276:	00 00       	nop
    _delay_ms(1000);
    

    move (50,50,STABLE_Z);
     278:	60 91 00 01 	lds	r22, 0x0100
     27c:	70 91 01 01 	lds	r23, 0x0101
     280:	07 2e       	mov	r0, r23
     282:	00 0c       	add	r0, r0
     284:	88 0b       	sbc	r24, r24
     286:	99 0b       	sbc	r25, r25
     288:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     28c:	7b 01       	movw	r14, r22
     28e:	8c 01       	movw	r16, r24
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	48 e4       	ldi	r20, 0x48	; 72
     296:	52 e4       	ldi	r21, 0x42	; 66
     298:	ca 01       	movw	r24, r20
     29a:	b9 01       	movw	r22, r18
     29c:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     2a0:	2f ef       	ldi	r18, 0xFF	; 255
     2a2:	89 e6       	ldi	r24, 0x69	; 105
     2a4:	98 e1       	ldi	r25, 0x18	; 24
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	80 40       	sbci	r24, 0x00	; 0
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <__vector_5+0xb0>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <__vector_5+0xba>
     2b0:	00 00       	nop
    _delay_ms(500);

    //turn left
    USART0_send_string((unsigned char *)"Turning Right\r\n");
     2b2:	80 e2       	ldi	r24, 0x20	; 32
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(50 - TURN_SPEED,50 + TURN_SPEED,STABLE_Z);
     2ba:	60 91 00 01 	lds	r22, 0x0100
     2be:	70 91 01 01 	lds	r23, 0x0101
     2c2:	07 2e       	mov	r0, r23
     2c4:	00 0c       	add	r0, r0
     2c6:	88 0b       	sbc	r24, r24
     2c8:	99 0b       	sbc	r25, r25
     2ca:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     2ce:	7b 01       	movw	r14, r22
     2d0:	8c 01       	movw	r16, r24
     2d2:	20 e0       	ldi	r18, 0x00	; 0
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	42 e8       	ldi	r20, 0x82	; 130
     2d8:	52 e4       	ldi	r21, 0x42	; 66
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	8c e0       	ldi	r24, 0x0C	; 12
     2e0:	92 e4       	ldi	r25, 0x42	; 66
     2e2:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     2e6:	2f ef       	ldi	r18, 0xFF	; 255
     2e8:	83 ed       	ldi	r24, 0xD3	; 211
     2ea:	90 e3       	ldi	r25, 0x30	; 48
     2ec:	21 50       	subi	r18, 0x01	; 1
     2ee:	80 40       	sbci	r24, 0x00	; 0
     2f0:	90 40       	sbci	r25, 0x00	; 0
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <__vector_5+0xf6>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <__vector_5+0x100>
     2f6:	00 00       	nop
    _delay_ms(1000);
    move(50,50,STABLE_Z);
     2f8:	60 91 00 01 	lds	r22, 0x0100
     2fc:	70 91 01 01 	lds	r23, 0x0101
     300:	07 2e       	mov	r0, r23
     302:	00 0c       	add	r0, r0
     304:	88 0b       	sbc	r24, r24
     306:	99 0b       	sbc	r25, r25
     308:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	48 e4       	ldi	r20, 0x48	; 72
     316:	52 e4       	ldi	r21, 0x42	; 66
     318:	ca 01       	movw	r24, r20
     31a:	b9 01       	movw	r22, r18
     31c:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
    USART0_send_string((unsigned char*)"Resuming\r\n");
     320:	80 e3       	ldi	r24, 0x30	; 48
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
}
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	7f 91       	pop	r23
     336:	6f 91       	pop	r22
     338:	5f 91       	pop	r21
     33a:	4f 91       	pop	r20
     33c:	3f 91       	pop	r19
     33e:	2f 91       	pop	r18
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	ff 90       	pop	r15
     346:	ef 90       	pop	r14
     348:	0f 90       	pop	r0
     34a:	0b be       	out	0x3b, r0	; 59
     34c:	0f 90       	pop	r0
     34e:	0f be       	out	0x3f, r0	; 63
     350:	0f 90       	pop	r0
     352:	1f 90       	pop	r1
     354:	18 95       	reti

00000356 <__vector_6>:

ISR(INT5_vect){  //Right bumper on PE5
     356:	1f 92       	push	r1
     358:	0f 92       	push	r0
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	0f 92       	push	r0
     35e:	11 24       	eor	r1, r1
     360:	0b b6       	in	r0, 0x3b	; 59
     362:	0f 92       	push	r0
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	2f 93       	push	r18
     36e:	3f 93       	push	r19
     370:	4f 93       	push	r20
     372:	5f 93       	push	r21
     374:	6f 93       	push	r22
     376:	7f 93       	push	r23
     378:	8f 93       	push	r24
     37a:	9f 93       	push	r25
     37c:	af 93       	push	r26
     37e:	bf 93       	push	r27
     380:	ef 93       	push	r30
     382:	ff 93       	push	r31
    object_detected = 1;
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	90 93 41 03 	sts	0x0341, r25
     38c:	80 93 40 03 	sts	0x0340, r24
    USART0_send_string((unsigned char *)"Right Bumper Hit\r\n");
     390:	8b e3       	ldi	r24, 0x3B	; 59
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>

    //reverse
    USART0_send_string((unsigned char *)"Reversing\r\n");
     398:	84 e1       	ldi	r24, 0x14	; 20
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(0,0,STABLE_Z);
     3a0:	60 91 00 01 	lds	r22, 0x0100
     3a4:	70 91 01 01 	lds	r23, 0x0101
     3a8:	07 2e       	mov	r0, r23
     3aa:	00 0c       	add	r0, r0
     3ac:	88 0b       	sbc	r24, r24
     3ae:	99 0b       	sbc	r25, r25
     3b0:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     3b4:	7b 01       	movw	r14, r22
     3b6:	8c 01       	movw	r16, r24
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	a9 01       	movw	r20, r18
     3be:	ca 01       	movw	r24, r20
     3c0:	b9 01       	movw	r22, r18
     3c2:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     3c6:	2f ef       	ldi	r18, 0xFF	; 255
     3c8:	83 ed       	ldi	r24, 0xD3	; 211
     3ca:	90 e3       	ldi	r25, 0x30	; 48
     3cc:	21 50       	subi	r18, 0x01	; 1
     3ce:	80 40       	sbci	r24, 0x00	; 0
     3d0:	90 40       	sbci	r25, 0x00	; 0
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <__vector_6+0x76>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <__vector_6+0x80>
     3d6:	00 00       	nop
    _delay_ms(1000);
    

    move (50,50,STABLE_Z);
     3d8:	60 91 00 01 	lds	r22, 0x0100
     3dc:	70 91 01 01 	lds	r23, 0x0101
     3e0:	07 2e       	mov	r0, r23
     3e2:	00 0c       	add	r0, r0
     3e4:	88 0b       	sbc	r24, r24
     3e6:	99 0b       	sbc	r25, r25
     3e8:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     3ec:	7b 01       	movw	r14, r22
     3ee:	8c 01       	movw	r16, r24
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	48 e4       	ldi	r20, 0x48	; 72
     3f6:	52 e4       	ldi	r21, 0x42	; 66
     3f8:	ca 01       	movw	r24, r20
     3fa:	b9 01       	movw	r22, r18
     3fc:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     400:	2f ef       	ldi	r18, 0xFF	; 255
     402:	89 e6       	ldi	r24, 0x69	; 105
     404:	98 e1       	ldi	r25, 0x18	; 24
     406:	21 50       	subi	r18, 0x01	; 1
     408:	80 40       	sbci	r24, 0x00	; 0
     40a:	90 40       	sbci	r25, 0x00	; 0
     40c:	e1 f7       	brne	.-8      	; 0x406 <__vector_6+0xb0>
     40e:	00 c0       	rjmp	.+0      	; 0x410 <__vector_6+0xba>
     410:	00 00       	nop
    _delay_ms(500);

    //turn left
    USART0_send_string((unsigned char *)"Turning Left\r\n");
     412:	8e e4       	ldi	r24, 0x4E	; 78
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(50 + TURN_SPEED,50 - TURN_SPEED,STABLE_Z);
     41a:	60 91 00 01 	lds	r22, 0x0100
     41e:	70 91 01 01 	lds	r23, 0x0101
     422:	07 2e       	mov	r0, r23
     424:	00 0c       	add	r0, r0
     426:	88 0b       	sbc	r24, r24
     428:	99 0b       	sbc	r25, r25
     42a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     42e:	7b 01       	movw	r14, r22
     430:	8c 01       	movw	r16, r24
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4c e0       	ldi	r20, 0x0C	; 12
     438:	52 e4       	ldi	r21, 0x42	; 66
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	82 e8       	ldi	r24, 0x82	; 130
     440:	92 e4       	ldi	r25, 0x42	; 66
     442:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     446:	2f ef       	ldi	r18, 0xFF	; 255
     448:	83 ed       	ldi	r24, 0xD3	; 211
     44a:	90 e3       	ldi	r25, 0x30	; 48
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	80 40       	sbci	r24, 0x00	; 0
     450:	90 40       	sbci	r25, 0x00	; 0
     452:	e1 f7       	brne	.-8      	; 0x44c <__vector_6+0xf6>
     454:	00 c0       	rjmp	.+0      	; 0x456 <__vector_6+0x100>
     456:	00 00       	nop
    _delay_ms(1000);
    move(50,50,STABLE_Z);
     458:	60 91 00 01 	lds	r22, 0x0100
     45c:	70 91 01 01 	lds	r23, 0x0101
     460:	07 2e       	mov	r0, r23
     462:	00 0c       	add	r0, r0
     464:	88 0b       	sbc	r24, r24
     466:	99 0b       	sbc	r25, r25
     468:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     46c:	7b 01       	movw	r14, r22
     46e:	8c 01       	movw	r16, r24
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	48 e4       	ldi	r20, 0x48	; 72
     476:	52 e4       	ldi	r21, 0x42	; 66
     478:	ca 01       	movw	r24, r20
     47a:	b9 01       	movw	r22, r18
     47c:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
    USART0_send_string((unsigned char*)"Resuming\r\n");
     480:	80 e3       	ldi	r24, 0x30	; 48
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
}
     488:	ff 91       	pop	r31
     48a:	ef 91       	pop	r30
     48c:	bf 91       	pop	r27
     48e:	af 91       	pop	r26
     490:	9f 91       	pop	r25
     492:	8f 91       	pop	r24
     494:	7f 91       	pop	r23
     496:	6f 91       	pop	r22
     498:	5f 91       	pop	r21
     49a:	4f 91       	pop	r20
     49c:	3f 91       	pop	r19
     49e:	2f 91       	pop	r18
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	ff 90       	pop	r15
     4a6:	ef 90       	pop	r14
     4a8:	0f 90       	pop	r0
     4aa:	0b be       	out	0x3b, r0	; 59
     4ac:	0f 90       	pop	r0
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <__vector_26>:
        Depth: ddd.dddddd
        Object: (NO | YES)
        Heading: ddd.dddddd
        Water Level: (OK | WARNING | ERROR) : dd.dd
*******************/
ISR(TIMER3_COMPA_vect){ 
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	0b b6       	in	r0, 0x3b	; 59
     4c2:	0f 92       	push	r0
     4c4:	0f 93       	push	r16
     4c6:	1f 93       	push	r17
     4c8:	2f 93       	push	r18
     4ca:	3f 93       	push	r19
     4cc:	4f 93       	push	r20
     4ce:	5f 93       	push	r21
     4d0:	6f 93       	push	r22
     4d2:	7f 93       	push	r23
     4d4:	8f 93       	push	r24
     4d6:	9f 93       	push	r25
     4d8:	af 93       	push	r26
     4da:	bf 93       	push	r27
     4dc:	ef 93       	push	r30
     4de:	ff 93       	push	r31
    USART0_send_string((unsigned char *)"Depth: ");
     4e0:	8d e5       	ldi	r24, 0x5D	; 93
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    USART0_send_string((unsigned char *)dtostrf(get_depth_feet(),3,7,buffer));
     4e8:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <get_depth_feet>
     4ec:	06 e4       	ldi	r16, 0x46	; 70
     4ee:	13 e0       	ldi	r17, 0x03	; 3
     4f0:	27 e0       	ldi	r18, 0x07	; 7
     4f2:	43 e0       	ldi	r20, 0x03	; 3
     4f4:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <dtostrf>
     4f8:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    USART0_send_string((unsigned char*)"\r\n");
     4fc:	84 e2       	ldi	r24, 0x24	; 36
     4fe:	93 e0       	ldi	r25, 0x03	; 3
     500:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    USART0_send_string((unsigned char*)"Object: ");
     504:	85 e6       	ldi	r24, 0x65	; 101
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    if (object_detected){
     50c:	80 91 40 03 	lds	r24, 0x0340
     510:	90 91 41 03 	lds	r25, 0x0341
     514:	89 2b       	or	r24, r25
     516:	c9 f5       	brne	.+114    	; 0x58a <__vector_26+0xd4>
        USART0_send_string((unsigned char*)"YES");
        object_detected = 0;
    }
    else {
        USART0_send_string((unsigned char*)"NO");
     518:	82 e7       	ldi	r24, 0x72	; 114
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    }
    USART0_send_string((unsigned char*)"\r\n");
     520:	84 e2       	ldi	r24, 0x24	; 36
     522:	93 e0       	ldi	r25, 0x03	; 3
     524:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    USART0_send_string((unsigned char*)"Heading: ");
     528:	85 e7       	ldi	r24, 0x75	; 117
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    USART0_send_string((unsigned char*)"Not yet implemented");
     530:	8f e7       	ldi	r24, 0x7F	; 127
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    USART0_send_string((unsigned char*)"\r\n");
     538:	84 e2       	ldi	r24, 0x24	; 36
     53a:	93 e0       	ldi	r25, 0x03	; 3
     53c:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    USART0_send_string((unsigned char*)"Water Level: ");
     540:	83 e9       	ldi	r24, 0x93	; 147
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    USART0_send_string((unsigned char*)"Not yet implemented");
     548:	8f e7       	ldi	r24, 0x7F	; 127
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    USART0_send_string((unsigned char*)"\r\n");
     550:	84 e2       	ldi	r24, 0x24	; 36
     552:	93 e0       	ldi	r25, 0x03	; 3
     554:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    USART0_send_string((unsigned char*)"\r\n");
     558:	84 e2       	ldi	r24, 0x24	; 36
     55a:	93 e0       	ldi	r25, 0x03	; 3
     55c:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
}
     560:	ff 91       	pop	r31
     562:	ef 91       	pop	r30
     564:	bf 91       	pop	r27
     566:	af 91       	pop	r26
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	7f 91       	pop	r23
     56e:	6f 91       	pop	r22
     570:	5f 91       	pop	r21
     572:	4f 91       	pop	r20
     574:	3f 91       	pop	r19
     576:	2f 91       	pop	r18
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	0f 90       	pop	r0
     57e:	0b be       	out	0x3b, r0	; 59
     580:	0f 90       	pop	r0
     582:	0f be       	out	0x3f, r0	; 63
     584:	0f 90       	pop	r0
     586:	1f 90       	pop	r1
     588:	18 95       	reti
    USART0_send_string((unsigned char *)"Depth: ");
    USART0_send_string((unsigned char *)dtostrf(get_depth_feet(),3,7,buffer));
    USART0_send_string((unsigned char*)"\r\n");
    USART0_send_string((unsigned char*)"Object: ");
    if (object_detected){
        USART0_send_string((unsigned char*)"YES");
     58a:	8e e6       	ldi	r24, 0x6E	; 110
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
        object_detected = 0;
     592:	10 92 41 03 	sts	0x0341, r1
     596:	10 92 40 03 	sts	0x0340, r1
     59a:	c2 cf       	rjmp	.-124    	; 0x520 <__vector_26+0x6a>

0000059c <dive>:
    USART0_send_string((unsigned char*)"Not yet implemented");
    USART0_send_string((unsigned char*)"\r\n");
    USART0_send_string((unsigned char*)"\r\n");
}

void dive(float depth){
     59c:	4f 92       	push	r4
     59e:	5f 92       	push	r5
     5a0:	6f 92       	push	r6
     5a2:	7f 92       	push	r7
     5a4:	8f 92       	push	r8
     5a6:	9f 92       	push	r9
     5a8:	af 92       	push	r10
     5aa:	bf 92       	push	r11
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	2b 01       	movw	r4, r22
     5b6:	3c 01       	movw	r6, r24
    float current_depth = 0;
    while (current_depth < depth){
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	a9 01       	movw	r20, r18
     5be:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__gesf2>
     5c2:	18 16       	cp	r1, r24
     5c4:	5c f5       	brge	.+86     	; 0x61c <dive+0x80>
        current_depth = get_depth_feet();
     5c6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <get_depth_feet>
     5ca:	4b 01       	movw	r8, r22
     5cc:	5c 01       	movw	r10, r24
        move(50,50,STABLE_Z + 20);
     5ce:	60 91 00 01 	lds	r22, 0x0100
     5d2:	70 91 01 01 	lds	r23, 0x0101
     5d6:	6c 5e       	subi	r22, 0xEC	; 236
     5d8:	7f 4f       	sbci	r23, 0xFF	; 255
     5da:	07 2e       	mov	r0, r23
     5dc:	00 0c       	add	r0, r0
     5de:	88 0b       	sbc	r24, r24
     5e0:	99 0b       	sbc	r25, r25
     5e2:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     5e6:	7b 01       	movw	r14, r22
     5e8:	8c 01       	movw	r16, r24
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	48 e4       	ldi	r20, 0x48	; 72
     5f0:	52 e4       	ldi	r21, 0x42	; 66
     5f2:	ca 01       	movw	r24, r20
     5f4:	b9 01       	movw	r22, r18
     5f6:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     5fa:	2f ef       	ldi	r18, 0xFF	; 255
     5fc:	81 ee       	ldi	r24, 0xE1	; 225
     5fe:	94 e0       	ldi	r25, 0x04	; 4
     600:	21 50       	subi	r18, 0x01	; 1
     602:	80 40       	sbci	r24, 0x00	; 0
     604:	90 40       	sbci	r25, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <dive+0x64>
     608:	00 c0       	rjmp	.+0      	; 0x60a <dive+0x6e>
     60a:	00 00       	nop
    USART0_send_string((unsigned char*)"\r\n");
}

void dive(float depth){
    float current_depth = 0;
    while (current_depth < depth){
     60c:	a5 01       	movw	r20, r10
     60e:	94 01       	movw	r18, r8
     610:	c3 01       	movw	r24, r6
     612:	b2 01       	movw	r22, r4
     614:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__gesf2>
     618:	18 16       	cp	r1, r24
     61a:	ac f2       	brlt	.-86     	; 0x5c6 <dive+0x2a>
        current_depth = get_depth_feet();
        move(50,50,STABLE_Z + 20);
        _delay_ms(100);
    }
    move(50,50,STABLE_Z);
     61c:	60 91 00 01 	lds	r22, 0x0100
     620:	70 91 01 01 	lds	r23, 0x0101
     624:	07 2e       	mov	r0, r23
     626:	00 0c       	add	r0, r0
     628:	88 0b       	sbc	r24, r24
     62a:	99 0b       	sbc	r25, r25
     62c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     630:	7b 01       	movw	r14, r22
     632:	8c 01       	movw	r16, r24
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	48 e4       	ldi	r20, 0x48	; 72
     63a:	52 e4       	ldi	r21, 0x42	; 66
     63c:	ca 01       	movw	r24, r20
     63e:	b9 01       	movw	r22, r18
     640:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
}
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	bf 90       	pop	r11
     64e:	af 90       	pop	r10
     650:	9f 90       	pop	r9
     652:	8f 90       	pop	r8
     654:	7f 90       	pop	r7
     656:	6f 90       	pop	r6
     658:	5f 90       	pop	r5
     65a:	4f 90       	pop	r4
     65c:	08 95       	ret

0000065e <enable_bumpers>:

void enable_bumpers(){
    //Set pins as inputs
    DDRE &= ~(1 << 4);
     65e:	14 98       	cbi	0x02, 4	; 2
    DDRE &= ~(1 << 5);
     660:	15 98       	cbi	0x02, 5	; 2
    
    //Enable internal pullups
    PORTE |= (1 << 4);
     662:	1c 9a       	sbi	0x03, 4	; 3
    PORTE |= (1 << 5);
     664:	1d 9a       	sbi	0x03, 5	; 3

    //Set both interrupt 4 and 5 to falling edge
    EICRB |= (1 << ISC41);
     666:	8a b7       	in	r24, 0x3a	; 58
     668:	82 60       	ori	r24, 0x02	; 2
     66a:	8a bf       	out	0x3a, r24	; 58
    EICRB |= (1 << ISC51);
     66c:	8a b7       	in	r24, 0x3a	; 58
     66e:	88 60       	ori	r24, 0x08	; 8
     670:	8a bf       	out	0x3a, r24	; 58

    //enable the interrupts
    EIMSK |= (1 << INT4) | (1 << INT5);
     672:	89 b7       	in	r24, 0x39	; 57
     674:	80 63       	ori	r24, 0x30	; 48
     676:	89 bf       	out	0x39, r24	; 57
     678:	08 95       	ret

0000067a <init_data_timer>:
}
void init_data_timer(){
    //CTC Mode
    TCCR3A |= (1 << COM3A1);
     67a:	eb e8       	ldi	r30, 0x8B	; 139
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	80 68       	ori	r24, 0x80	; 128
     682:	80 83       	st	Z, r24
    TCCR3A &= ~(1 << COM3A0);
     684:	80 81       	ld	r24, Z
     686:	8f 7b       	andi	r24, 0xBF	; 191
     688:	80 83       	st	Z, r24

    //Prescalar 256
    TCCR3B |= (1 << CS32);
     68a:	ea e8       	ldi	r30, 0x8A	; 138
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	80 81       	ld	r24, Z
     690:	84 60       	ori	r24, 0x04	; 4
     692:	80 83       	st	Z, r24

    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     694:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     696:	f8 94       	cli
    /* Set TCNTn to 1 */
    TCNT3 = 1;
     698:	21 e0       	ldi	r18, 0x01	; 1
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	30 93 89 00 	sts	0x0089, r19
     6a0:	20 93 88 00 	sts	0x0088, r18
    sei();
     6a4:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     6a6:	8f bf       	out	0x3f, r24	; 63
    ICR3 = 65535;
     6a8:	8f ef       	ldi	r24, 0xFF	; 255
     6aa:	9f ef       	ldi	r25, 0xFF	; 255
     6ac:	90 93 81 00 	sts	0x0081, r25
     6b0:	80 93 80 00 	sts	0x0080, r24
    OCR3A = 65535;
     6b4:	90 93 87 00 	sts	0x0087, r25
     6b8:	80 93 86 00 	sts	0x0086, r24

    //Enable timer3a interrupt
    ETIMSK = (1 << OCIE3A);
     6bc:	80 e1       	ldi	r24, 0x10	; 16
     6be:	80 93 7d 00 	sts	0x007D, r24
     6c2:	08 95       	ret

000006c4 <path1>:

}

void path1(){
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r\n");
     6cc:	81 ea       	ldi	r24, 0xA1	; 161
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(50 + (MOVE_SPEED/2),50 + (MOVE_SPEED/2),STABLE_Z);
     6d4:	60 91 00 01 	lds	r22, 0x0100
     6d8:	70 91 01 01 	lds	r23, 0x0101
     6dc:	07 2e       	mov	r0, r23
     6de:	00 0c       	add	r0, r0
     6e0:	88 0b       	sbc	r24, r24
     6e2:	99 0b       	sbc	r25, r25
     6e4:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     6e8:	7b 01       	movw	r14, r22
     6ea:	8c 01       	movw	r16, r24
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	46 e9       	ldi	r20, 0x96	; 150
     6f2:	52 e4       	ldi	r21, 0x42	; 66
     6f4:	ca 01       	movw	r24, r20
     6f6:	b9 01       	movw	r22, r18
     6f8:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     6fc:	2f ef       	ldi	r18, 0xFF	; 255
     6fe:	87 ea       	ldi	r24, 0xA7	; 167
     700:	91 e6       	ldi	r25, 0x61	; 97
     702:	21 50       	subi	r18, 0x01	; 1
     704:	80 40       	sbci	r24, 0x00	; 0
     706:	90 40       	sbci	r25, 0x00	; 0
     708:	e1 f7       	brne	.-8      	; 0x702 <path1+0x3e>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <path1+0x48>
     70c:	00 00       	nop
    _delay_ms(2000);
    //Down 3 seconds (aim for about 4 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Down");
    USART0_send_string((unsigned char*)"Move Down\r\n");
     70e:	80 eb       	ldi	r24, 0xB0	; 176
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move (50,50,0);
     716:	e1 2c       	mov	r14, r1
     718:	f1 2c       	mov	r15, r1
     71a:	87 01       	movw	r16, r14
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	48 e4       	ldi	r20, 0x48	; 72
     722:	52 e4       	ldi	r21, 0x42	; 66
     724:	ca 01       	movw	r24, r20
     726:	b9 01       	movw	r22, r18
     728:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     72c:	2f ef       	ldi	r18, 0xFF	; 255
     72e:	8b e7       	ldi	r24, 0x7B	; 123
     730:	92 e9       	ldi	r25, 0x92	; 146
     732:	21 50       	subi	r18, 0x01	; 1
     734:	80 40       	sbci	r24, 0x00	; 0
     736:	90 40       	sbci	r25, 0x00	; 0
     738:	e1 f7       	brne	.-8      	; 0x732 <path1+0x6e>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <path1+0x78>
     73c:	00 00       	nop
    _delay_ms(3000);
    //spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    USART0_send_string((unsigned char*)"Turn Left\r\n");
     73e:	8c eb       	ldi	r24, 0xBC	; 188
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     746:	60 91 00 01 	lds	r22, 0x0100
     74a:	70 91 01 01 	lds	r23, 0x0101
     74e:	07 2e       	mov	r0, r23
     750:	00 0c       	add	r0, r0
     752:	88 0b       	sbc	r24, r24
     754:	99 0b       	sbc	r25, r25
     756:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     75a:	7b 01       	movw	r14, r22
     75c:	8c 01       	movw	r16, r24
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	46 e9       	ldi	r20, 0x96	; 150
     764:	52 e4       	ldi	r21, 0x42	; 66
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	88 ec       	ldi	r24, 0xC8	; 200
     76c:	91 e4       	ldi	r25, 0x41	; 65
     76e:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     772:	2f ef       	ldi	r18, 0xFF	; 255
     774:	87 ea       	ldi	r24, 0xA7	; 167
     776:	91 e6       	ldi	r25, 0x61	; 97
     778:	21 50       	subi	r18, 0x01	; 1
     77a:	80 40       	sbci	r24, 0x00	; 0
     77c:	90 40       	sbci	r25, 0x00	; 0
     77e:	e1 f7       	brne	.-8      	; 0x778 <path1+0xb4>
     780:	00 c0       	rjmp	.+0      	; 0x782 <path1+0xbe>
     782:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r\n");
     784:	81 ea       	ldi	r24, 0xA1	; 161
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     78c:	60 91 00 01 	lds	r22, 0x0100
     790:	70 91 01 01 	lds	r23, 0x0101
     794:	07 2e       	mov	r0, r23
     796:	00 0c       	add	r0, r0
     798:	88 0b       	sbc	r24, r24
     79a:	99 0b       	sbc	r25, r25
     79c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     7a0:	7b 01       	movw	r14, r22
     7a2:	8c 01       	movw	r16, r24
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	46 e9       	ldi	r20, 0x96	; 150
     7aa:	52 e4       	ldi	r21, 0x42	; 66
     7ac:	ca 01       	movw	r24, r20
     7ae:	b9 01       	movw	r22, r18
     7b0:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     7b4:	2f ef       	ldi	r18, 0xFF	; 255
     7b6:	87 ea       	ldi	r24, 0xA7	; 167
     7b8:	91 e6       	ldi	r25, 0x61	; 97
     7ba:	21 50       	subi	r18, 0x01	; 1
     7bc:	80 40       	sbci	r24, 0x00	; 0
     7be:	90 40       	sbci	r25, 0x00	; 0
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <path1+0xf6>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <path1+0x100>
     7c4:	00 00       	nop
    _delay_ms(2000);
    //Spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    USART0_send_string((unsigned char*)"Turn Left\r\n");
     7c6:	8c eb       	ldi	r24, 0xBC	; 188
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     7ce:	60 91 00 01 	lds	r22, 0x0100
     7d2:	70 91 01 01 	lds	r23, 0x0101
     7d6:	07 2e       	mov	r0, r23
     7d8:	00 0c       	add	r0, r0
     7da:	88 0b       	sbc	r24, r24
     7dc:	99 0b       	sbc	r25, r25
     7de:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     7e2:	7b 01       	movw	r14, r22
     7e4:	8c 01       	movw	r16, r24
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	46 e9       	ldi	r20, 0x96	; 150
     7ec:	52 e4       	ldi	r21, 0x42	; 66
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	88 ec       	ldi	r24, 0xC8	; 200
     7f4:	91 e4       	ldi	r25, 0x41	; 65
     7f6:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     7fa:	2f ef       	ldi	r18, 0xFF	; 255
     7fc:	87 ea       	ldi	r24, 0xA7	; 167
     7fe:	91 e6       	ldi	r25, 0x61	; 97
     800:	21 50       	subi	r18, 0x01	; 1
     802:	80 40       	sbci	r24, 0x00	; 0
     804:	90 40       	sbci	r25, 0x00	; 0
     806:	e1 f7       	brne	.-8      	; 0x800 <path1+0x13c>
     808:	00 c0       	rjmp	.+0      	; 0x80a <path1+0x146>
     80a:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r\n");
     80c:	81 ea       	ldi	r24, 0xA1	; 161
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     814:	60 91 00 01 	lds	r22, 0x0100
     818:	70 91 01 01 	lds	r23, 0x0101
     81c:	07 2e       	mov	r0, r23
     81e:	00 0c       	add	r0, r0
     820:	88 0b       	sbc	r24, r24
     822:	99 0b       	sbc	r25, r25
     824:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     828:	7b 01       	movw	r14, r22
     82a:	8c 01       	movw	r16, r24
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	46 e9       	ldi	r20, 0x96	; 150
     832:	52 e4       	ldi	r21, 0x42	; 66
     834:	ca 01       	movw	r24, r20
     836:	b9 01       	movw	r22, r18
     838:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	87 ea       	ldi	r24, 0xA7	; 167
     840:	91 e6       	ldi	r25, 0x61	; 97
     842:	21 50       	subi	r18, 0x01	; 1
     844:	80 40       	sbci	r24, 0x00	; 0
     846:	90 40       	sbci	r25, 0x00	; 0
     848:	e1 f7       	brne	.-8      	; 0x842 <path1+0x17e>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <path1+0x188>
     84c:	00 00       	nop
    _delay_ms(2000);
    //Up 3 seconds (resurface)
    // clear_display();
    // string2lcd((unsigned char *)"Up");
    USART0_send_string((unsigned char*)"Move Up\r\n");
     84e:	88 ec       	ldi	r24, 0xC8	; 200
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(50,50,100);
     856:	e1 2c       	mov	r14, r1
     858:	f1 2c       	mov	r15, r1
     85a:	08 ec       	ldi	r16, 0xC8	; 200
     85c:	12 e4       	ldi	r17, 0x42	; 66
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	48 e4       	ldi	r20, 0x48	; 72
     864:	52 e4       	ldi	r21, 0x42	; 66
     866:	ca 01       	movw	r24, r20
     868:	b9 01       	movw	r22, r18
     86a:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
    //Spin left 90 degrees
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r\n");
     86e:	81 ea       	ldi	r24, 0xA1	; 161
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     876:	60 91 00 01 	lds	r22, 0x0100
     87a:	70 91 01 01 	lds	r23, 0x0101
     87e:	07 2e       	mov	r0, r23
     880:	00 0c       	add	r0, r0
     882:	88 0b       	sbc	r24, r24
     884:	99 0b       	sbc	r25, r25
     886:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     88a:	7b 01       	movw	r14, r22
     88c:	8c 01       	movw	r16, r24
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	46 e9       	ldi	r20, 0x96	; 150
     894:	52 e4       	ldi	r21, 0x42	; 66
     896:	ca 01       	movw	r24, r20
     898:	b9 01       	movw	r22, r18
     89a:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
    //Spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    USART0_send_string((unsigned char*)"Turn Left\r\n");
     89e:	8c eb       	ldi	r24, 0xBC	; 188
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     8a6:	60 91 00 01 	lds	r22, 0x0100
     8aa:	70 91 01 01 	lds	r23, 0x0101
     8ae:	07 2e       	mov	r0, r23
     8b0:	00 0c       	add	r0, r0
     8b2:	88 0b       	sbc	r24, r24
     8b4:	99 0b       	sbc	r25, r25
     8b6:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     8ba:	7b 01       	movw	r14, r22
     8bc:	8c 01       	movw	r16, r24
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	46 e9       	ldi	r20, 0x96	; 150
     8c4:	52 e4       	ldi	r21, 0x42	; 66
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	88 ec       	ldi	r24, 0xC8	; 200
     8cc:	91 e4       	ldi	r25, 0x41	; 65
     8ce:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     8d2:	2f ef       	ldi	r18, 0xFF	; 255
     8d4:	87 ea       	ldi	r24, 0xA7	; 167
     8d6:	91 e6       	ldi	r25, 0x61	; 97
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	80 40       	sbci	r24, 0x00	; 0
     8dc:	90 40       	sbci	r25, 0x00	; 0
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <path1+0x214>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <path1+0x21e>
     8e2:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Complete (back in some position as start)
}
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	ff 90       	pop	r15
     8ea:	ef 90       	pop	r14
     8ec:	08 95       	ret

000008ee <path2>:
void path2(){
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
    USART0_send_string((unsigned char *)"Diving (10 seconds)\r\n");
     8f6:	82 ed       	ldi	r24, 0xD2	; 210
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(1,1,STABLE_Z);
     8fe:	60 91 00 01 	lds	r22, 0x0100
     902:	70 91 01 01 	lds	r23, 0x0101
     906:	07 2e       	mov	r0, r23
     908:	00 0c       	add	r0, r0
     90a:	88 0b       	sbc	r24, r24
     90c:	99 0b       	sbc	r25, r25
     90e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     912:	7b 01       	movw	r14, r22
     914:	8c 01       	movw	r16, r24
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e8       	ldi	r20, 0x80	; 128
     91c:	5f e3       	ldi	r21, 0x3F	; 63
     91e:	ca 01       	movw	r24, r20
     920:	b9 01       	movw	r22, r18
     922:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     926:	2a ea       	ldi	r18, 0xAA	; 170
     928:	36 ee       	ldi	r19, 0xE6	; 230
     92a:	86 e9       	ldi	r24, 0x96	; 150
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	21 50       	subi	r18, 0x01	; 1
     930:	30 40       	sbci	r19, 0x00	; 0
     932:	80 40       	sbci	r24, 0x00	; 0
     934:	90 40       	sbci	r25, 0x00	; 0
     936:	d9 f7       	brne	.-10     	; 0x92e <path2+0x40>
     938:	00 00       	nop
    _delay_ms(10000);

    USART0_send_string((unsigned char *)"Turn right (1 second) r\n");
     93a:	88 ee       	ldi	r24, 0xE8	; 232
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(100,1,STABLE_Z);
     942:	60 91 00 01 	lds	r22, 0x0100
     946:	70 91 01 01 	lds	r23, 0x0101
     94a:	07 2e       	mov	r0, r23
     94c:	00 0c       	add	r0, r0
     94e:	88 0b       	sbc	r24, r24
     950:	99 0b       	sbc	r25, r25
     952:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     956:	7b 01       	movw	r14, r22
     958:	8c 01       	movw	r16, r24
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 e8       	ldi	r20, 0x80	; 128
     960:	5f e3       	ldi	r21, 0x3F	; 63
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	88 ec       	ldi	r24, 0xC8	; 200
     968:	92 e4       	ldi	r25, 0x42	; 66
     96a:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     96e:	2f ef       	ldi	r18, 0xFF	; 255
     970:	33 ed       	ldi	r19, 0xD3	; 211
     972:	80 e3       	ldi	r24, 0x30	; 48
     974:	21 50       	subi	r18, 0x01	; 1
     976:	30 40       	sbci	r19, 0x00	; 0
     978:	80 40       	sbci	r24, 0x00	; 0
     97a:	e1 f7       	brne	.-8      	; 0x974 <path2+0x86>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <path2+0x90>
     97e:	00 00       	nop
    _delay_ms(1000);

    USART0_send_string((unsigned char *)"Continue Diving (5 seconds)\r\n");
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(1,1,STABLE_Z);
     988:	60 91 00 01 	lds	r22, 0x0100
     98c:	70 91 01 01 	lds	r23, 0x0101
     990:	07 2e       	mov	r0, r23
     992:	00 0c       	add	r0, r0
     994:	88 0b       	sbc	r24, r24
     996:	99 0b       	sbc	r25, r25
     998:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     99c:	7b 01       	movw	r14, r22
     99e:	8c 01       	movw	r16, r24
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e8       	ldi	r20, 0x80	; 128
     9a6:	5f e3       	ldi	r21, 0x3F	; 63
     9a8:	ca 01       	movw	r24, r20
     9aa:	b9 01       	movw	r22, r18
     9ac:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     9b0:	9f ef       	ldi	r25, 0xFF	; 255
     9b2:	23 e2       	ldi	r18, 0x23	; 35
     9b4:	34 ef       	ldi	r19, 0xF4	; 244
     9b6:	91 50       	subi	r25, 0x01	; 1
     9b8:	20 40       	sbci	r18, 0x00	; 0
     9ba:	30 40       	sbci	r19, 0x00	; 0
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <path2+0xc8>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <path2+0xd2>
     9c0:	00 00       	nop
    _delay_ms(5000);

    USART0_send_string((unsigned char *)"Resurfacing...\r\n");
     9c2:	8f e1       	ldi	r24, 0x1F	; 31
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(100,100,STABLE_Z);
     9ca:	60 91 00 01 	lds	r22, 0x0100
     9ce:	70 91 01 01 	lds	r23, 0x0101
     9d2:	07 2e       	mov	r0, r23
     9d4:	00 0c       	add	r0, r0
     9d6:	88 0b       	sbc	r24, r24
     9d8:	99 0b       	sbc	r25, r25
     9da:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     9de:	7b 01       	movw	r14, r22
     9e0:	8c 01       	movw	r16, r24
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	48 ec       	ldi	r20, 0xC8	; 200
     9e8:	52 e4       	ldi	r21, 0x42	; 66
     9ea:	ca 01       	movw	r24, r20
     9ec:	b9 01       	movw	r22, r18
     9ee:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	93 e2       	ldi	r25, 0x23	; 35
     9f6:	24 ef       	ldi	r18, 0xF4	; 244
     9f8:	81 50       	subi	r24, 0x01	; 1
     9fa:	90 40       	sbci	r25, 0x00	; 0
     9fc:	20 40       	sbci	r18, 0x00	; 0
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <path2+0x10a>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <path2+0x114>
     a02:	00 00       	nop
    _delay_ms(5000);

    USART0_send_string((unsigned char *)"Path Complete\r\n");
     a04:	80 e3       	ldi	r24, 0x30	; 48
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    move(50,50,50);
     a0c:	e1 2c       	mov	r14, r1
     a0e:	f1 2c       	mov	r15, r1
     a10:	08 e4       	ldi	r16, 0x48	; 72
     a12:	12 e4       	ldi	r17, 0x42	; 66
     a14:	a8 01       	movw	r20, r16
     a16:	97 01       	movw	r18, r14
     a18:	c8 01       	movw	r24, r16
     a1a:	b7 01       	movw	r22, r14
     a1c:	0e 94 49 09 	call	0x1292	; 0x1292 <move>

}
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	08 95       	ret

00000a2a <path3>:
void path3(){
     a2a:	08 95       	ret

00000a2c <turn>:
    //Implement if necessary
}

void turn(int degrees){
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	ec 01       	movw	r28, r24
    int *x = 0;
    int *y = 0;
    int *z = 0;
    float headingDegrees = getHeading(x,y,z);
     a3e:	40 e0       	ldi	r20, 0x00	; 0
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <getHeading>
     a4e:	6b 01       	movw	r12, r22
     a50:	7c 01       	movw	r14, r24
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
     a52:	be 01       	movw	r22, r28
     a54:	0d 2e       	mov	r0, r29
     a56:	00 0c       	add	r0, r0
     a58:	88 0b       	sbc	r24, r24
     a5a:	99 0b       	sbc	r25, r25
     a5c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     a60:	a7 01       	movw	r20, r14
     a62:	96 01       	movw	r18, r12
     a64:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__addsf3>
     a68:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fixsfsi>
     a6c:	cb 01       	movw	r24, r22
     a6e:	68 e6       	ldi	r22, 0x68	; 104
     a70:	71 e0       	ldi	r23, 0x01	; 1
     a72:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__divmodhi4>
     a76:	8c 01       	movw	r16, r24
    if (degrees < 0){
     a78:	d7 fd       	sbrc	r29, 7
     a7a:	29 c0       	rjmp	.+82     	; 0xace <turn+0xa2>
        while ((int)headingDegrees != new_heading){
            move(-TURN_SPEED,TURN_SPEED,50);
            getHeading(x,y,z);
        }
    }
    else if (degrees > 0){
     a7c:	cd 2b       	or	r28, r29
     a7e:	f1 f0       	breq	.+60     	; 0xabc <turn+0x90>
        //Spin right until new heading
        while ((int)headingDegrees != (int)new_heading){
     a80:	c7 01       	movw	r24, r14
     a82:	b6 01       	movw	r22, r12
     a84:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fixsfsi>
     a88:	06 17       	cp	r16, r22
     a8a:	17 07       	cpc	r17, r23
     a8c:	b9 f0       	breq	.+46     	; 0xabc <turn+0x90>
            move(TURN_SPEED,-TURN_SPEED,50);
     a8e:	e1 2c       	mov	r14, r1
     a90:	f1 2c       	mov	r15, r1
     a92:	08 e4       	ldi	r16, 0x48	; 72
     a94:	12 e4       	ldi	r17, 0x42	; 66
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e7       	ldi	r20, 0x70	; 112
     a9c:	51 ec       	ldi	r21, 0xC1	; 193
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	80 e7       	ldi	r24, 0x70	; 112
     aa4:	91 e4       	ldi	r25, 0x41	; 65
     aa6:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
            getHeading(x,y,z);
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 1a 0a 	call	0x1434	; 0x1434 <getHeading>
     aba:	e9 cf       	rjmp	.-46     	; 0xa8e <turn+0x62>
        }
    }
}
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	08 95       	ret
    float headingDegrees = getHeading(x,y,z);
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
    if (degrees < 0){
        //Spin left until new heading
        while ((int)headingDegrees != new_heading){
     ace:	c7 01       	movw	r24, r14
     ad0:	b6 01       	movw	r22, r12
     ad2:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fixsfsi>
     ad6:	06 17       	cp	r16, r22
     ad8:	17 07       	cpc	r17, r23
     ada:	81 f3       	breq	.-32     	; 0xabc <turn+0x90>
            move(-TURN_SPEED,TURN_SPEED,50);
     adc:	e1 2c       	mov	r14, r1
     ade:	f1 2c       	mov	r15, r1
     ae0:	08 e4       	ldi	r16, 0x48	; 72
     ae2:	12 e4       	ldi	r17, 0x42	; 66
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e7       	ldi	r20, 0x70	; 112
     aea:	51 e4       	ldi	r21, 0x41	; 65
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	80 e7       	ldi	r24, 0x70	; 112
     af2:	91 ec       	ldi	r25, 0xC1	; 193
     af4:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
            getHeading(x,y,z);
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 1a 0a 	call	0x1434	; 0x1434 <getHeading>
     b08:	e9 cf       	rjmp	.-46     	; 0xadc <turn+0xb0>

00000b0a <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     b0a:	88 e4       	ldi	r24, 0x48	; 72
     b0c:	80 93 70 00 	sts	0x0070, r24
     b10:	08 95       	ret

00000b12 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     b12:	10 92 74 00 	sts	0x0074, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     b16:	94 ea       	ldi	r25, 0xA4	; 164
     b18:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     b1c:	90 91 74 00 	lds	r25, 0x0074
     b20:	97 ff       	sbrs	r25, 7
     b22:	fc cf       	rjmp	.-8      	; 0xb1c <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     b24:	90 91 71 00 	lds	r25, 0x0071
     b28:	98 7f       	andi	r25, 0xF8	; 248
     b2a:	98 30       	cpi	r25, 0x08	; 8
     b2c:	11 f0       	breq	.+4      	; 0xb32 <i2c_start+0x20>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
     b32:	80 93 73 00 	sts	0x0073, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     b36:	84 e8       	ldi	r24, 0x84	; 132
     b38:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     b3c:	80 91 74 00 	lds	r24, 0x0074
     b40:	87 ff       	sbrs	r24, 7
     b42:	fc cf       	rjmp	.-8      	; 0xb3c <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     b44:	80 91 71 00 	lds	r24, 0x0071
     b48:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     b4a:	88 31       	cpi	r24, 0x18	; 24
     b4c:	11 f0       	breq	.+4      	; 0xb52 <i2c_start+0x40>
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	71 f7       	brne	.-36     	; 0xb2e <i2c_start+0x1c>
	
	return 0;
     b52:	80 e0       	ldi	r24, 0x00	; 0
}
     b54:	08 95       	ret

00000b56 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     b56:	80 93 73 00 	sts	0x0073, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     b5a:	84 e8       	ldi	r24, 0x84	; 132
     b5c:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     b60:	80 91 74 00 	lds	r24, 0x0074
     b64:	87 ff       	sbrs	r24, 7
     b66:	fc cf       	rjmp	.-8      	; 0xb60 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     b68:	90 91 71 00 	lds	r25, 0x0071
     b6c:	98 7f       	andi	r25, 0xF8	; 248
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	98 32       	cpi	r25, 0x28	; 40
     b72:	09 f0       	breq	.+2      	; 0xb76 <i2c_write+0x20>
	
	return 0;
}
     b74:	08 95       	ret
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     b76:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     b78:	08 95       	ret

00000b7a <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     b7a:	84 ec       	ldi	r24, 0xC4	; 196
     b7c:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     b80:	80 91 74 00 	lds	r24, 0x0074
     b84:	87 ff       	sbrs	r24, 7
     b86:	fc cf       	rjmp	.-8      	; 0xb80 <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
     b88:	80 91 73 00 	lds	r24, 0x0073
}
     b8c:	08 95       	ret

00000b8e <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     b8e:	84 e8       	ldi	r24, 0x84	; 132
     b90:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     b94:	80 91 74 00 	lds	r24, 0x0074
     b98:	87 ff       	sbrs	r24, 7
     b9a:	fc cf       	rjmp	.-8      	; 0xb94 <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
     b9c:	80 91 73 00 	lds	r24, 0x0073
}
     ba0:	08 95       	ret

00000ba2 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	8b 01       	movw	r16, r22
     bac:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     bae:	0e 94 89 05 	call	0xb12	; 0xb12 <i2c_start>
     bb2:	81 11       	cpse	r24, r1
     bb4:	1f c0       	rjmp	.+62     	; 0xbf4 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
     bb6:	20 97       	sbiw	r28, 0x00	; 0
     bb8:	a9 f0       	breq	.+42     	; 0xbe4 <i2c_transmit+0x42>
     bba:	f8 01       	movw	r30, r16
     bbc:	c0 0f       	add	r28, r16
     bbe:	d1 1f       	adc	r29, r17
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     bc0:	24 e8       	ldi	r18, 0x84	; 132
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     bc2:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     bc4:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     bc8:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     bcc:	90 91 74 00 	lds	r25, 0x0074
     bd0:	97 ff       	sbrs	r25, 7
     bd2:	fc cf       	rjmp	.-8      	; 0xbcc <i2c_transmit+0x2a>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     bd4:	90 91 71 00 	lds	r25, 0x0071
     bd8:	98 7f       	andi	r25, 0xF8	; 248
     bda:	98 32       	cpi	r25, 0x28	; 40
     bdc:	59 f4       	brne	.+22     	; 0xbf4 <i2c_transmit+0x52>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
     bde:	ec 17       	cp	r30, r28
     be0:	fd 07       	cpc	r31, r29
     be2:	79 f7       	brne	.-34     	; 0xbc2 <i2c_transmit+0x20>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     be4:	94 e9       	ldi	r25, 0x94	; 148
     be6:	90 93 74 00 	sts	0x0074, r25
	}
	
	i2c_stop();
	
	return 0;
}
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	08 95       	ret
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	8b 01       	movw	r16, r22
     c0a:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_READ)) return 1;
     c0c:	81 60       	ori	r24, 0x01	; 1
     c0e:	0e 94 89 05 	call	0xb12	; 0xb12 <i2c_start>
     c12:	81 11       	cpse	r24, r1
     c14:	25 c0       	rjmp	.+74     	; 0xc60 <i2c_receive+0x60>
	
	for (uint16_t i = 0; i < (length-1); i++)
     c16:	de 01       	movw	r26, r28
     c18:	11 97       	sbiw	r26, 0x01	; 1
     c1a:	41 f1       	breq	.+80     	; 0xc6c <i2c_receive+0x6c>
     c1c:	f8 01       	movw	r30, r16
     c1e:	a0 0f       	add	r26, r16
     c20:	b1 1f       	adc	r27, r17

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     c22:	24 ec       	ldi	r18, 0xC4	; 196
     c24:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     c28:	90 91 74 00 	lds	r25, 0x0074
     c2c:	97 ff       	sbrs	r25, 7
     c2e:	fc cf       	rjmp	.-8      	; 0xc28 <i2c_receive+0x28>
	// return received data from TWDR
	return TWDR;
     c30:	90 91 73 00 	lds	r25, 0x0073
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     c34:	91 93       	st	Z+, r25

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
     c36:	ae 17       	cp	r26, r30
     c38:	bf 07       	cpc	r27, r31
     c3a:	a1 f7       	brne	.-24     	; 0xc24 <i2c_receive+0x24>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     c3c:	94 e8       	ldi	r25, 0x84	; 132
     c3e:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     c42:	90 91 74 00 	lds	r25, 0x0074
     c46:	97 ff       	sbrs	r25, 7
     c48:	fc cf       	rjmp	.-8      	; 0xc42 <i2c_receive+0x42>
	// return received data from TWDR
	return TWDR;
     c4a:	90 91 73 00 	lds	r25, 0x0073
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     c4e:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     c50:	94 e9       	ldi	r25, 0x94	; 148
     c52:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	08 95       	ret
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
     c60:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	08 95       	ret
     c6c:	d8 01       	movw	r26, r16
     c6e:	e6 cf       	rjmp	.-52     	; 0xc3c <i2c_receive+0x3c>

00000c70 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	16 2f       	mov	r17, r22
     c7c:	f4 2e       	mov	r15, r20
     c7e:	05 2f       	mov	r16, r21
     c80:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr | 0x00)) return 1;
     c82:	0e 94 89 05 	call	0xb12	; 0xb12 <i2c_start>
     c86:	81 11       	cpse	r24, r1
     c88:	2c c0       	rjmp	.+88     	; 0xce2 <i2c_writeReg+0x72>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     c8a:	10 93 73 00 	sts	0x0073, r17
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     c8e:	94 e8       	ldi	r25, 0x84	; 132
     c90:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     c94:	90 91 74 00 	lds	r25, 0x0074
     c98:	97 ff       	sbrs	r25, 7
     c9a:	fc cf       	rjmp	.-8      	; 0xc94 <i2c_writeReg+0x24>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     c9c:	90 91 71 00 	lds	r25, 0x0071
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     ca0:	20 97       	sbiw	r28, 0x00	; 0
     ca2:	b1 f0       	breq	.+44     	; 0xcd0 <i2c_writeReg+0x60>
     ca4:	ef 2d       	mov	r30, r15
     ca6:	f0 2f       	mov	r31, r16
     ca8:	ce 0f       	add	r28, r30
     caa:	df 1f       	adc	r29, r31
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     cac:	44 e8       	ldi	r20, 0x84	; 132

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     cae:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     cb0:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     cb4:	40 93 74 00 	sts	0x0074, r20
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     cb8:	90 91 74 00 	lds	r25, 0x0074
     cbc:	97 ff       	sbrs	r25, 7
     cbe:	fc cf       	rjmp	.-8      	; 0xcb8 <i2c_writeReg+0x48>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     cc0:	90 91 71 00 	lds	r25, 0x0071
     cc4:	98 7f       	andi	r25, 0xF8	; 248
     cc6:	98 32       	cpi	r25, 0x28	; 40
     cc8:	61 f4       	brne	.+24     	; 0xce2 <i2c_writeReg+0x72>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     cca:	ec 17       	cp	r30, r28
     ccc:	fd 07       	cpc	r31, r29
     cce:	79 f7       	brne	.-34     	; 0xcae <i2c_writeReg+0x3e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     cd0:	94 e9       	ldi	r25, 0x94	; 148
     cd2:	90 93 74 00 	sts	0x0074, r25
	}

	i2c_stop();

	return 0;
}
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	08 95       	ret
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	08 95       	ret

00000cf0 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	18 2f       	mov	r17, r24
     cfe:	06 2f       	mov	r16, r22
     d00:	7a 01       	movw	r14, r20
     d02:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
     d04:	0e 94 89 05 	call	0xb12	; 0xb12 <i2c_start>
     d08:	81 11       	cpse	r24, r1
     d0a:	38 c0       	rjmp	.+112    	; 0xd7c <i2c_readReg+0x8c>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     d0c:	00 93 73 00 	sts	0x0073, r16
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     d10:	84 e8       	ldi	r24, 0x84	; 132
     d12:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     d16:	80 91 74 00 	lds	r24, 0x0074
     d1a:	87 ff       	sbrs	r24, 7
     d1c:	fc cf       	rjmp	.-8      	; 0xd16 <i2c_readReg+0x26>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     d1e:	80 91 71 00 	lds	r24, 0x0071
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
     d22:	81 2f       	mov	r24, r17
     d24:	81 60       	ori	r24, 0x01	; 1
     d26:	0e 94 89 05 	call	0xb12	; 0xb12 <i2c_start>
     d2a:	81 11       	cpse	r24, r1
     d2c:	27 c0       	rjmp	.+78     	; 0xd7c <i2c_readReg+0x8c>

	for (uint16_t i = 0; i < (length-1); i++)
     d2e:	de 01       	movw	r26, r28
     d30:	11 97       	sbiw	r26, 0x01	; 1
     d32:	61 f1       	breq	.+88     	; 0xd8c <i2c_readReg+0x9c>
     d34:	f7 01       	movw	r30, r14
     d36:	ae 0d       	add	r26, r14
     d38:	bf 1d       	adc	r27, r15

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     d3a:	24 ec       	ldi	r18, 0xC4	; 196
     d3c:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     d40:	90 91 74 00 	lds	r25, 0x0074
     d44:	97 ff       	sbrs	r25, 7
     d46:	fc cf       	rjmp	.-8      	; 0xd40 <i2c_readReg+0x50>
	// return received data from TWDR
	return TWDR;
     d48:	90 91 73 00 	lds	r25, 0x0073

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     d4c:	91 93       	st	Z+, r25

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
     d4e:	ea 17       	cp	r30, r26
     d50:	fb 07       	cpc	r31, r27
     d52:	a1 f7       	brne	.-24     	; 0xd3c <i2c_readReg+0x4c>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     d54:	94 e8       	ldi	r25, 0x84	; 132
     d56:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     d5a:	90 91 74 00 	lds	r25, 0x0074
     d5e:	97 ff       	sbrs	r25, 7
     d60:	fc cf       	rjmp	.-8      	; 0xd5a <i2c_readReg+0x6a>
	// return received data from TWDR
	return TWDR;
     d62:	90 91 73 00 	lds	r25, 0x0073

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     d66:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     d68:	94 e9       	ldi	r25, 0x94	; 148
     d6a:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	08 95       	ret
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	08 95       	ret
     d8c:	d7 01       	movw	r26, r14
     d8e:	e2 cf       	rjmp	.-60     	; 0xd54 <i2c_readReg+0x64>

00000d90 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     d90:	84 e9       	ldi	r24, 0x94	; 148
     d92:	80 93 74 00 	sts	0x0074, r24
     d96:	08 95       	ret

00000d98 <enable_adc>:
#include "./adc.h"


void enable_adc(){
	DDRF = 0x00;
     d98:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0x00;
     d9c:	10 92 62 00 	sts	0x0062, r1
	//internally wire REFSn bits in the ADMUX register to connect VREF 
		//to internal 2.56v reference --> 0.0025 v/step
	//ADMUX = (1 << REFS0) | (1 << REFS1); //2.56v
	ADMUX = (1 << REFS0); //AVCC
     da0:	80 e4       	ldi	r24, 0x40	; 64
     da2:	87 b9       	out	0x07, r24	; 7
	//Single ended input, gain is not allowed
	
	//Default Right Adjusted

	//Set ADEN in ADSCRA to enable ADC
	ADCSRA = (1 << ADEN);
     da4:	80 e8       	ldi	r24, 0x80	; 128
     da6:	86 b9       	out	0x06, r24	; 6
	//Set the ADC Clock frequency prescaler to 128 --> 125kHz
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     da8:	86 b1       	in	r24, 0x06	; 6
     daa:	87 60       	ori	r24, 0x07	; 7
     dac:	86 b9       	out	0x06, r24	; 6
	//Set free running mode
	//ADCSRA |= (1 << ADFR);
	//Enable the ADC Interrupt Flag
	//ADCSRA |= (1 << ADIE);
	//Start first conversion by setting ADSC in ADCSRA
	ADCSRA |= (1 << ADSC);
     dae:	36 9a       	sbi	0x06, 6	; 6
     db0:	08 95       	ret

00000db2 <read_adc>:

}
int read_adc(int pin){
     db2:	fc 01       	movw	r30, r24
	int data;
	if (pin > 7){
     db4:	08 97       	sbiw	r24, 0x08	; 8
     db6:	fc f4       	brge	.+62     	; 0xdf6 <read_adc+0x44>
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	50 e0       	ldi	r21, 0x00	; 0
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
		ADMUX &= ~(1 << i);
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	97 b1       	in	r25, 0x07	; 7
     dc2:	9b 01       	movw	r18, r22
     dc4:	04 2e       	mov	r0, r20
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <read_adc+0x18>
     dc8:	22 0f       	add	r18, r18
     dca:	0a 94       	dec	r0
     dcc:	ea f7       	brpl	.-6      	; 0xdc8 <read_adc+0x16>
     dce:	20 95       	com	r18
     dd0:	29 23       	and	r18, r25
     dd2:	27 b9       	out	0x07, r18	; 7
	if (pin > 7){
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
     dd4:	4f 5f       	subi	r20, 0xFF	; 255
     dd6:	5f 4f       	sbci	r21, 0xFF	; 255
     dd8:	45 30       	cpi	r20, 0x05	; 5
     dda:	51 05       	cpc	r21, r1
     ddc:	89 f7       	brne	.-30     	; 0xdc0 <read_adc+0xe>
		ADMUX &= ~(1 << i);
	}
	//set the new mux bit
	ADMUX |= pin;
     dde:	97 b1       	in	r25, 0x07	; 7
     de0:	89 2f       	mov	r24, r25
     de2:	8e 2b       	or	r24, r30
     de4:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
     de6:	36 9a       	sbi	0x06, 6	; 6
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
     de8:	34 9b       	sbis	0x06, 4	; 6
     dea:	fe cf       	rjmp	.-4      	; 0xde8 <read_adc+0x36>
	data = ADCL;
     dec:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);
     dee:	25 b1       	in	r18, 0x05	; 5
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	92 2b       	or	r25, r18
     df4:	08 95       	ret

}
int read_adc(int pin){
	int data;
	if (pin > 7){
		return -1;
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	9f ef       	ldi	r25, 0xFF	; 255
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
	data = ADCL;
	data |= (ADCH << 8);
	return data;
}
     dfa:	08 95       	ret

00000dfc <get_voltage>:
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
     dfc:	88 30       	cpi	r24, 0x08	; 8
     dfe:	91 05       	cpc	r25, r1
     e00:	20 f0       	brcs	.+8      	; 0xe0a <get_voltage+0xe>
		return 0;
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	cb 01       	movw	r24, r22
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
}
     e08:	08 95       	ret
}
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
		return 0;
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
     e0a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <read_adc>
     e0e:	bc 01       	movw	r22, r24
     e10:	99 0f       	add	r25, r25
     e12:	88 0b       	sbc	r24, r24
     e14:	99 0b       	sbc	r25, r25
     e16:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 ea       	ldi	r20, 0xA0	; 160
     e20:	5b e3       	ldi	r21, 0x3B	; 59
     e22:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__mulsf3>
     e26:	08 95       	ret

00000e28 <strobe_lcd>:
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     e28:	e2 e6       	ldi	r30, 0x62	; 98
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	88 60       	ori	r24, 0x08	; 8
     e30:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     e32:	80 81       	ld	r24, Z
     e34:	87 7f       	andi	r24, 0xF7	; 247
     e36:	80 83       	st	Z, r24
     e38:	08 95       	ret

00000e3a <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e3a:	77 9b       	sbis	0x0e, 7	; 14
     e3c:	fe cf       	rjmp	.-4      	; 0xe3a <clear_display>
    SPDR = 0x00;    //command, not data
     e3e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e40:	77 9b       	sbis	0x0e, 7	; 14
     e42:	fe cf       	rjmp	.-4      	; 0xe40 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e48:	77 9b       	sbis	0x0e, 7	; 14
     e4a:	fe cf       	rjmp	.-4      	; 0xe48 <clear_display+0xe>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     e4c:	80 91 62 00 	lds	r24, 0x0062
     e50:	88 60       	ori	r24, 0x08	; 8
     e52:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     e56:	80 91 62 00 	lds	r24, 0x0062
     e5a:	87 7f       	andi	r24, 0xF7	; 247
     e5c:	80 93 62 00 	sts	0x0062, r24
     e60:	8f e9       	ldi	r24, 0x9F	; 159
     e62:	98 e2       	ldi	r25, 0x28	; 40
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <clear_display+0x2a>
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <clear_display+0x30>
     e6a:	00 00       	nop
     e6c:	08 95       	ret

00000e6e <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     e6e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e70:	77 9b       	sbis	0x0e, 7	; 14
     e72:	fe cf       	rjmp	.-4      	; 0xe70 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     e74:	80 ec       	ldi	r24, 0xC0	; 192
     e76:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e78:	77 9b       	sbis	0x0e, 7	; 14
     e7a:	fe cf       	rjmp	.-4      	; 0xe78 <home_line2+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     e7c:	80 91 62 00 	lds	r24, 0x0062
     e80:	88 60       	ori	r24, 0x08	; 8
     e82:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     e86:	80 91 62 00 	lds	r24, 0x0062
     e8a:	87 7f       	andi	r24, 0xF7	; 247
     e8c:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e90:	85 ec       	ldi	r24, 0xC5	; 197
     e92:	8a 95       	dec	r24
     e94:	f1 f7       	brne	.-4      	; 0xe92 <home_line2+0x24>
     e96:	00 00       	nop
     e98:	08 95       	ret

00000e9a <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     e9e:	77 9b       	sbis	0x0e, 7	; 14
     ea0:	fe cf       	rjmp	.-4      	; 0xe9e <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     ea2:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ea4:	77 9b       	sbis	0x0e, 7	; 14
     ea6:	fe cf       	rjmp	.-4      	; 0xea4 <char2lcd+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     ea8:	80 91 62 00 	lds	r24, 0x0062
     eac:	88 60       	ori	r24, 0x08	; 8
     eae:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     eb2:	80 91 62 00 	lds	r24, 0x0062
     eb6:	87 7f       	andi	r24, 0xF7	; 247
     eb8:	80 93 62 00 	sts	0x0062, r24
     ebc:	85 ec       	ldi	r24, 0xC5	; 197
     ebe:	8a 95       	dec	r24
     ec0:	f1 f7       	brne	.-4      	; 0xebe <char2lcd+0x24>
     ec2:	00 00       	nop
     ec4:	08 95       	ret

00000ec6 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	fc 01       	movw	r30, r24
     ecc:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     ed2:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ed4:	77 9b       	sbis	0x0e, 7	; 14
     ed6:	fe cf       	rjmp	.-4      	; 0xed4 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     ed8:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     eda:	77 9b       	sbis	0x0e, 7	; 14
     edc:	fe cf       	rjmp	.-4      	; 0xeda <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     ede:	8d 91       	ld	r24, X+
     ee0:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ee2:	77 9b       	sbis	0x0e, 7	; 14
     ee4:	fe cf       	rjmp	.-4      	; 0xee2 <string2lcd+0x1c>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     ee6:	90 91 62 00 	lds	r25, 0x0062
     eea:	98 60       	ori	r25, 0x08	; 8
     eec:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     ef0:	90 91 62 00 	lds	r25, 0x0062
     ef4:	97 7f       	andi	r25, 0xF7	; 247
     ef6:	90 93 62 00 	sts	0x0062, r25
     efa:	85 ec       	ldi	r24, 0xC5	; 197
     efc:	8a 95       	dec	r24
     efe:	f1 f7       	brne	.-4      	; 0xefc <string2lcd+0x36>
     f00:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     f02:	4f 5f       	subi	r20, 0xFF	; 255
     f04:	5f 4f       	sbci	r21, 0xFF	; 255
     f06:	ef 01       	movw	r28, r30
     f08:	09 90       	ld	r0, Y+
     f0a:	00 20       	and	r0, r0
     f0c:	e9 f7       	brne	.-6      	; 0xf08 <string2lcd+0x42>
     f0e:	9e 01       	movw	r18, r28
     f10:	2e 1b       	sub	r18, r30
     f12:	3f 0b       	sbc	r19, r31
     f14:	22 50       	subi	r18, 0x02	; 2
     f16:	31 09       	sbc	r19, r1
     f18:	24 17       	cp	r18, r20
     f1a:	35 07       	cpc	r19, r21
     f1c:	d8 f6       	brcc	.-74     	; 0xed4 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     f24:	e1 e6       	ldi	r30, 0x61	; 97
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	88 60       	ori	r24, 0x08	; 8
     f2c:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     f2e:	88 b3       	in	r24, 0x18	; 24
     f30:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     f32:	87 b3       	in	r24, 0x17	; 23
     f34:	87 60       	ori	r24, 0x07	; 7
     f36:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     f38:	80 e5       	ldi	r24, 0x50	; 80
     f3a:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	8e b9       	out	0x0e, r24	; 14
     f40:	08 95       	ret

00000f42 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f42:	8f e5       	ldi	r24, 0x5F	; 95
     f44:	9a ee       	ldi	r25, 0xEA	; 234
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <lcd_init+0x4>
     f4a:	00 c0       	rjmp	.+0      	; 0xf4c <lcd_init+0xa>
     f4c:	00 00       	nop
     f4e:	23 e0       	ldi	r18, 0x03	; 3
     f50:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     f52:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     f54:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     f56:	77 9b       	sbis	0x0e, 7	; 14
     f58:	fe cf       	rjmp	.-4      	; 0xf56 <lcd_init+0x14>
        SPDR = 0x30;
     f5a:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     f5c:	77 9b       	sbis	0x0e, 7	; 14
     f5e:	fe cf       	rjmp	.-4      	; 0xf5c <lcd_init+0x1a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     f60:	80 91 62 00 	lds	r24, 0x0062
     f64:	88 60       	ori	r24, 0x08	; 8
     f66:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     f6a:	80 91 62 00 	lds	r24, 0x0062
     f6e:	87 7f       	andi	r24, 0xF7	; 247
     f70:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f74:	85 ec       	ldi	r24, 0xC5	; 197
     f76:	8a 95       	dec	r24
     f78:	f1 f7       	brne	.-4      	; 0xf76 <lcd_init+0x34>
     f7a:	00 00       	nop
     f7c:	21 50       	subi	r18, 0x01	; 1
     f7e:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     f80:	49 f7       	brne	.-46     	; 0xf54 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     f82:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     f84:	77 9b       	sbis	0x0e, 7	; 14
     f86:	fe cf       	rjmp	.-4      	; 0xf84 <lcd_init+0x42>
    SPDR = 0x38;
     f88:	88 e3       	ldi	r24, 0x38	; 56
     f8a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     f8c:	77 9b       	sbis	0x0e, 7	; 14
     f8e:	fe cf       	rjmp	.-4      	; 0xf8c <lcd_init+0x4a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     f90:	80 91 62 00 	lds	r24, 0x0062
     f94:	88 60       	ori	r24, 0x08	; 8
     f96:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     f9a:	80 91 62 00 	lds	r24, 0x0062
     f9e:	87 7f       	andi	r24, 0xF7	; 247
     fa0:	80 93 62 00 	sts	0x0062, r24
     fa4:	95 ec       	ldi	r25, 0xC5	; 197
     fa6:	9a 95       	dec	r25
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <lcd_init+0x64>
     faa:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     fac:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     fae:	77 9b       	sbis	0x0e, 7	; 14
     fb0:	fe cf       	rjmp	.-4      	; 0xfae <lcd_init+0x6c>
    SPDR = 0x08;
     fb2:	88 e0       	ldi	r24, 0x08	; 8
     fb4:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     fb6:	77 9b       	sbis	0x0e, 7	; 14
     fb8:	fe cf       	rjmp	.-4      	; 0xfb6 <lcd_init+0x74>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     fba:	80 91 62 00 	lds	r24, 0x0062
     fbe:	88 60       	ori	r24, 0x08	; 8
     fc0:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     fc4:	80 91 62 00 	lds	r24, 0x0062
     fc8:	87 7f       	andi	r24, 0xF7	; 247
     fca:	80 93 62 00 	sts	0x0062, r24
     fce:	85 ec       	ldi	r24, 0xC5	; 197
     fd0:	8a 95       	dec	r24
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <lcd_init+0x8e>
     fd4:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     fd6:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     fd8:	77 9b       	sbis	0x0e, 7	; 14
     fda:	fe cf       	rjmp	.-4      	; 0xfd8 <lcd_init+0x96>
    SPDR = 0x01;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     fe0:	77 9b       	sbis	0x0e, 7	; 14
     fe2:	fe cf       	rjmp	.-4      	; 0xfe0 <lcd_init+0x9e>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     fe4:	80 91 62 00 	lds	r24, 0x0062
     fe8:	88 60       	ori	r24, 0x08	; 8
     fea:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     fee:	80 91 62 00 	lds	r24, 0x0062
     ff2:	87 7f       	andi	r24, 0xF7	; 247
     ff4:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	98 e1       	ldi	r25, 0x18	; 24
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <lcd_init+0xba>
    1000:	00 c0       	rjmp	.+0      	; 0x1002 <lcd_init+0xc0>
    1002:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
    1004:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    1006:	77 9b       	sbis	0x0e, 7	; 14
    1008:	fe cf       	rjmp	.-4      	; 0x1006 <lcd_init+0xc4>
    SPDR = 0x06;
    100a:	86 e0       	ldi	r24, 0x06	; 6
    100c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    100e:	77 9b       	sbis	0x0e, 7	; 14
    1010:	fe cf       	rjmp	.-4      	; 0x100e <lcd_init+0xcc>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
    1012:	80 91 62 00 	lds	r24, 0x0062
    1016:	88 60       	ori	r24, 0x08	; 8
    1018:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
    101c:	80 91 62 00 	lds	r24, 0x0062
    1020:	87 7f       	andi	r24, 0xF7	; 247
    1022:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1026:	95 ec       	ldi	r25, 0xC5	; 197
    1028:	9a 95       	dec	r25
    102a:	f1 f7       	brne	.-4      	; 0x1028 <lcd_init+0xe6>
    102c:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
    102e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    1030:	77 9b       	sbis	0x0e, 7	; 14
    1032:	fe cf       	rjmp	.-4      	; 0x1030 <lcd_init+0xee>
    SPDR = 0x0E;
    1034:	8e e0       	ldi	r24, 0x0E	; 14
    1036:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    1038:	77 9b       	sbis	0x0e, 7	; 14
    103a:	fe cf       	rjmp	.-4      	; 0x1038 <lcd_init+0xf6>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
    103c:	80 91 62 00 	lds	r24, 0x0062
    1040:	88 60       	ori	r24, 0x08	; 8
    1042:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
    1046:	80 91 62 00 	lds	r24, 0x0062
    104a:	87 7f       	andi	r24, 0xF7	; 247
    104c:	80 93 62 00 	sts	0x0062, r24
    1050:	85 ec       	ldi	r24, 0xC5	; 197
    1052:	8a 95       	dec	r24
    1054:	f1 f7       	brne	.-4      	; 0x1052 <lcd_init+0x110>
    1056:	00 00       	nop
    1058:	08 95       	ret

0000105a <USART1_Init>:
#include "uart.h"


void USART1_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
    105a:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
    105e:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    1062:	88 e1       	ldi	r24, 0x18	; 24
    1064:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (3<<UCSZ10);
    1068:	86 e0       	ldi	r24, 0x06	; 6
    106a:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    106e:	2f ef       	ldi	r18, 0xFF	; 255
    1070:	81 ee       	ldi	r24, 0xE1	; 225
    1072:	94 e0       	ldi	r25, 0x04	; 4
    1074:	21 50       	subi	r18, 0x01	; 1
    1076:	80 40       	sbci	r24, 0x00	; 0
    1078:	90 40       	sbci	r25, 0x00	; 0
    107a:	e1 f7       	brne	.-8      	; 0x1074 <USART1_Init+0x1a>
    107c:	00 c0       	rjmp	.+0      	; 0x107e <USART1_Init+0x24>
    107e:	00 00       	nop
    1080:	08 95       	ret

00001082 <USART1_Transmit>:
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
    1082:	90 91 9b 00 	lds	r25, 0x009B
    1086:	95 ff       	sbrs	r25, 5
    1088:	fc cf       	rjmp	.-8      	; 0x1082 <USART1_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
    108a:	80 93 9c 00 	sts	0x009C, r24
    108e:	08 95       	ret

00001090 <USART1_send_string>:
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
    1090:	fc 01       	movw	r30, r24
    1092:	20 81       	ld	r18, Z
    1094:	22 23       	and	r18, r18
    1096:	51 f0       	breq	.+20     	; 0x10ac <USART1_send_string+0x1c>
    1098:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
    109a:	90 91 9b 00 	lds	r25, 0x009B
    109e:	95 ff       	sbrs	r25, 5
    10a0:	fc cf       	rjmp	.-8      	; 0x109a <USART1_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
    10a2:	20 93 9c 00 	sts	0x009C, r18
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
    10a6:	21 91       	ld	r18, Z+
    10a8:	21 11       	cpse	r18, r1
    10aa:	f7 cf       	rjmp	.-18     	; 0x109a <USART1_send_string+0xa>
    10ac:	08 95       	ret

000010ae <USART1_Receive>:
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
    10ae:	80 91 9b 00 	lds	r24, 0x009B
    10b2:	87 ff       	sbrs	r24, 7
    10b4:	fc cf       	rjmp	.-8      	; 0x10ae <USART1_Receive>
    return UDR1;
    10b6:	80 91 9c 00 	lds	r24, 0x009C
}
    10ba:	08 95       	ret

000010bc <USART1_Receive_String>:

void USART1_Receive_String(unsigned char *str){
    10bc:	dc 01       	movw	r26, r24
    10be:	fc 01       	movw	r30, r24
    10c0:	9c 01       	movw	r18, r24
    10c2:	2b 5f       	subi	r18, 0xFB	; 251
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
    10c6:	90 91 9b 00 	lds	r25, 0x009B
    10ca:	97 ff       	sbrs	r25, 7
    10cc:	fc cf       	rjmp	.-8      	; 0x10c6 <USART1_Receive_String+0xa>
    return UDR1;
    10ce:	90 91 9c 00 	lds	r25, 0x009C

void USART1_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
    10d2:	9e 37       	cpi	r25, 0x7E	; 126
    10d4:	29 f0       	breq	.+10     	; 0x10e0 <USART1_Receive_String+0x24>
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
    10d6:	e2 17       	cp	r30, r18
    10d8:	f3 07       	cpc	r31, r19
    10da:	19 f0       	breq	.+6      	; 0x10e2 <USART1_Receive_String+0x26>
            str[2] = 75;
            str[3] = END_STRING;
            str[4] = '\0';
            break;
        }
        str[i] = c;
    10dc:	91 93       	st	Z+, r25
    10de:	f3 cf       	rjmp	.-26     	; 0x10c6 <USART1_Receive_String+0xa>
    10e0:	08 95       	ret
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
    10e2:	82 e3       	ldi	r24, 0x32	; 50
    10e4:	8c 93       	st	X, r24
            str[1] = 25;
    10e6:	89 e1       	ldi	r24, 0x19	; 25
    10e8:	11 96       	adiw	r26, 0x01	; 1
    10ea:	8c 93       	st	X, r24
    10ec:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 75;
    10ee:	8b e4       	ldi	r24, 0x4B	; 75
    10f0:	12 96       	adiw	r26, 0x02	; 2
    10f2:	8c 93       	st	X, r24
    10f4:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
    10f6:	8e e7       	ldi	r24, 0x7E	; 126
    10f8:	13 96       	adiw	r26, 0x03	; 3
    10fa:	8c 93       	st	X, r24
    10fc:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
    10fe:	14 96       	adiw	r26, 0x04	; 4
    1100:	1c 92       	st	X, r1
            break;
    1102:	08 95       	ret

00001104 <USART1_flush>:
        str[i] = c;
        ++i;
    }
}

void USART1_flush(){
    1104:	e1 e3       	ldi	r30, 0x31	; 49
    1106:	f3 e0       	ldi	r31, 0x03	; 3
    1108:	96 e4       	ldi	r25, 0x46	; 70
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
    110a:	80 91 9b 00 	lds	r24, 0x009B
    110e:	85 ff       	sbrs	r24, 5
    1110:	fc cf       	rjmp	.-8      	; 0x110a <USART1_flush+0x6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
    1112:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
    1116:	91 91       	ld	r25, Z+
    1118:	91 11       	cpse	r25, r1
    111a:	f7 cf       	rjmp	.-18     	; 0x110a <USART1_flush+0x6>
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
    111c:	80 91 9b 00 	lds	r24, 0x009B
    1120:	87 ff       	sbrs	r24, 7
    1122:	0c c0       	rjmp	.+24     	; 0x113c <USART1_flush+0x38>
        dummy = UDR1;
    1124:	90 91 9c 00 	lds	r25, 0x009C
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
    1128:	80 91 9b 00 	lds	r24, 0x009B
    112c:	85 ff       	sbrs	r24, 5
    112e:	fc cf       	rjmp	.-8      	; 0x1128 <USART1_flush+0x24>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
    1130:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
    1134:	80 91 9b 00 	lds	r24, 0x009B
    1138:	87 fd       	sbrc	r24, 7
    113a:	f4 cf       	rjmp	.-24     	; 0x1124 <USART1_flush+0x20>
    113c:	08 95       	ret

0000113e <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
    113e:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
    1142:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1144:	88 e1       	ldi	r24, 0x18	; 24
    1146:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */ 
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    1148:	8e e0       	ldi	r24, 0x0E	; 14
    114a:	80 93 95 00 	sts	0x0095, r24
    114e:	2f ef       	ldi	r18, 0xFF	; 255
    1150:	81 ee       	ldi	r24, 0xE1	; 225
    1152:	94 e0       	ldi	r25, 0x04	; 4
    1154:	21 50       	subi	r18, 0x01	; 1
    1156:	80 40       	sbci	r24, 0x00	; 0
    1158:	90 40       	sbci	r25, 0x00	; 0
    115a:	e1 f7       	brne	.-8      	; 0x1154 <USART0_Init+0x16>
    115c:	00 c0       	rjmp	.+0      	; 0x115e <USART0_Init+0x20>
    115e:	00 00       	nop
    1160:	08 95       	ret

00001162 <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
    1162:	5d 9b       	sbis	0x0b, 5	; 11
    1164:	fe cf       	rjmp	.-4      	; 0x1162 <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
    1166:	8c b9       	out	0x0c, r24	; 12
    1168:	08 95       	ret

0000116a <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
    116a:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
    116c:	90 81       	ld	r25, Z
    116e:	99 23       	and	r25, r25
    1170:	39 f0       	breq	.+14     	; 0x1180 <USART0_send_string+0x16>
    1172:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
    1174:	5d 9b       	sbis	0x0b, 5	; 11
    1176:	fe cf       	rjmp	.-4      	; 0x1174 <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
    1178:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
    117a:	91 91       	ld	r25, Z+
    117c:	91 11       	cpse	r25, r1
    117e:	fa cf       	rjmp	.-12     	; 0x1174 <USART0_send_string+0xa>
    1180:	08 95       	ret

00001182 <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
    1182:	80 e8       	ldi	r24, 0x80	; 128
    1184:	9d e8       	ldi	r25, 0x8D	; 141
    1186:	ab e5       	ldi	r26, 0x5B	; 91
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <USART0_Receive+0x12>
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	a1 09       	sbc	r26, r1
    1190:	b1 09       	sbc	r27, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
    1192:	21 f0       	breq	.+8      	; 0x119c <USART0_Receive+0x1a>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
    1194:	5f 9b       	sbis	0x0b, 7	; 11
    1196:	fa cf       	rjmp	.-12     	; 0x118c <USART0_Receive+0xa>
            /* Get and return received data from buffer */ 
            return UDR0;
    1198:	8c b1       	in	r24, 0x0c	; 12
    119a:	08 95       	ret
        }
    } while (--timeout);
    return 255;
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    /********
    * This is the original
    ************/
    //while (!(UCSR0A & (1<<RXC0)));
    //return UDR0;
}
    119e:	08 95       	ret

000011a0 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
    11a0:	dc 01       	movw	r26, r24
    11a2:	fc 01       	movw	r30, r24
    11a4:	9c 01       	movw	r18, r24
    11a6:	2b 5f       	subi	r18, 0xFB	; 251
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	40 e8       	ldi	r20, 0x80	; 128
    11ac:	5d e8       	ldi	r21, 0x8D	; 141
    11ae:	6b e5       	ldi	r22, 0x5B	; 91
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	05 c0       	rjmp	.+10     	; 0x11be <USART0_Receive_String+0x1e>
    11b4:	41 50       	subi	r20, 0x01	; 1
    11b6:	51 09       	sbc	r21, r1
    11b8:	61 09       	sbc	r22, r1
    11ba:	71 09       	sbc	r23, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <USART0_Receive_String+0x36>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
    11be:	5f 9b       	sbis	0x0b, 7	; 11
    11c0:	f9 cf       	rjmp	.-14     	; 0x11b4 <USART0_Receive_String+0x14>
            /* Get and return received data from buffer */ 
            return UDR0;
    11c2:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
    11c4:	9e 37       	cpi	r25, 0x7E	; 126
    11c6:	b1 f0       	breq	.+44     	; 0x11f4 <USART0_Receive_String+0x54>
        if (c == 255 || i > MAX_STRING_SIZE - 1){
    11c8:	9f 3f       	cpi	r25, 0xFF	; 255
    11ca:	29 f0       	breq	.+10     	; 0x11d6 <USART0_Receive_String+0x36>
    11cc:	e2 17       	cp	r30, r18
    11ce:	f3 07       	cpc	r31, r19
    11d0:	11 f0       	breq	.+4      	; 0x11d6 <USART0_Receive_String+0x36>
            str[2] = 50;
            str[3] = END_STRING;
            str[4] = '\0';
            return;
        }
        str[i] = c;
    11d2:	91 93       	st	Z+, r25
    11d4:	ea cf       	rjmp	.-44     	; 0x11aa <USART0_Receive_String+0xa>
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
    11d6:	82 e3       	ldi	r24, 0x32	; 50
    11d8:	8c 93       	st	X, r24
            str[1] = 50;
    11da:	11 96       	adiw	r26, 0x01	; 1
    11dc:	8c 93       	st	X, r24
    11de:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
    11e0:	12 96       	adiw	r26, 0x02	; 2
    11e2:	8c 93       	st	X, r24
    11e4:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
    11e6:	8e e7       	ldi	r24, 0x7E	; 126
    11e8:	13 96       	adiw	r26, 0x03	; 3
    11ea:	8c 93       	st	X, r24
    11ec:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
    11ee:	14 96       	adiw	r26, 0x04	; 4
    11f0:	1c 92       	st	X, r1
            return;
    11f2:	08 95       	ret
    11f4:	08 95       	ret

000011f6 <USART0_flush>:
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
    11f6:	5f 9b       	sbis	0x0b, 7	; 11
    11f8:	03 c0       	rjmp	.+6      	; 0x1200 <USART0_flush+0xa>
        dummy = UDR0;
    11fa:	8c b1       	in	r24, 0x0c	; 12
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
    11fc:	5f 99       	sbic	0x0b, 7	; 11
    11fe:	fd cf       	rjmp	.-6      	; 0x11fa <USART0_flush+0x4>
    1200:	08 95       	ret

00001202 <init_esc>:

void init_motors(){
    set_16bitPWM1();
}

void init_esc(){
    1202:	83 e0       	ldi	r24, 0x03	; 3
    1204:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
    1206:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1208:	ef e6       	ldi	r30, 0x6F	; 111
    120a:	f7 e1       	ldi	r31, 0x17	; 23
    120c:	31 97       	sbiw	r30, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <init_esc+0xa>
    1210:	00 c0       	rjmp	.+0      	; 0x1212 <init_esc+0x10>
    1212:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
    1214:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1216:	ff ef       	ldi	r31, 0xFF	; 255
    1218:	23 ed       	ldi	r18, 0xD3	; 211
    121a:	30 e3       	ldi	r19, 0x30	; 48
    121c:	f1 50       	subi	r31, 0x01	; 1
    121e:	20 40       	sbci	r18, 0x00	; 0
    1220:	30 40       	sbci	r19, 0x00	; 0
    1222:	e1 f7       	brne	.-8      	; 0x121c <init_esc+0x1a>
    1224:	00 c0       	rjmp	.+0      	; 0x1226 <init_esc+0x24>
    1226:	00 00       	nop
    1228:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
    122a:	69 f7       	brne	.-38     	; 0x1206 <init_esc+0x4>
        PORTB |= (1 << 4);
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
        _delay_ms(1000);
    }
}
    122c:	08 95       	ret

0000122e <set_16bitPWM1>:

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
    122e:	8f b5       	in	r24, 0x2f	; 47
    1230:	80 68       	ori	r24, 0x80	; 128
    1232:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
    1234:	8f b5       	in	r24, 0x2f	; 47
    1236:	80 62       	ori	r24, 0x20	; 32
    1238:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
    123a:	8f b5       	in	r24, 0x2f	; 47
    123c:	88 60       	ori	r24, 0x08	; 8
    123e:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
    1240:	8f b5       	in	r24, 0x2f	; 47
    1242:	82 60       	ori	r24, 0x02	; 2
    1244:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
    1246:	8e b5       	in	r24, 0x2e	; 46
    1248:	88 61       	ori	r24, 0x18	; 24
    124a:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
    124c:	8e b5       	in	r24, 0x2e	; 46
    124e:	82 60       	ori	r24, 0x02	; 2
    1250:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
    1252:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
    1254:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
    1256:	21 e0       	ldi	r18, 0x01	; 1
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	3d bd       	out	0x2d, r19	; 45
    125c:	2c bd       	out	0x2c, r18	; 44
    sei();
    125e:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
    1260:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	9f ef       	ldi	r25, 0xFF	; 255
    1266:	97 bd       	out	0x27, r25	; 39
    1268:	86 bd       	out	0x26, r24	; 38
    126a:	2f ef       	ldi	r18, 0xFF	; 255
    126c:	81 ee       	ldi	r24, 0xE1	; 225
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	21 50       	subi	r18, 0x01	; 1
    1272:	80 40       	sbci	r24, 0x00	; 0
    1274:	90 40       	sbci	r25, 0x00	; 0
    1276:	e1 f7       	brne	.-8      	; 0x1270 <set_16bitPWM1+0x42>
    1278:	00 c0       	rjmp	.+0      	; 0x127a <set_16bitPWM1+0x4c>
    127a:	00 00       	nop
    127c:	08 95       	ret

0000127e <init_motors>:
#include "motors.h"

void init_motors(){
    set_16bitPWM1();
    127e:	0c 94 17 09 	jmp	0x122e	; 0x122e <set_16bitPWM1>

00001282 <TIM16_WriteTCNT1>:
    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
    1282:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
    1284:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
    1286:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
    1288:	3d bd       	out	0x2d, r19	; 45
    128a:	2c bd       	out	0x2c, r18	; 44
    sei();
    128c:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
    128e:	9f bf       	out	0x3f, r25	; 63
    1290:	08 95       	ret

00001292 <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
    1292:	4f 92       	push	r4
    1294:	5f 92       	push	r5
    1296:	6f 92       	push	r6
    1298:	7f 92       	push	r7
    129a:	8f 92       	push	r8
    129c:	9f 92       	push	r9
    129e:	af 92       	push	r10
    12a0:	bf 92       	push	r11
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	2b 01       	movw	r4, r22
    12b4:	3c 01       	movw	r6, r24
    12b6:	49 01       	movw	r8, r18
    12b8:	5a 01       	movw	r10, r20
    12ba:	67 01       	movw	r12, r14
    12bc:	78 01       	movw	r14, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__cmpsf2>
    12ca:	87 fd       	sbrc	r24, 7
    12cc:	54 c0       	rjmp	.+168    	; 0x1376 <move+0xe4>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	46 ec       	ldi	r20, 0xC6	; 198
    12d4:	52 e4       	ldi	r21, 0x42	; 66
    12d6:	c3 01       	movw	r24, r6
    12d8:	b2 01       	movw	r22, r4
    12da:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__gesf2>
    12de:	18 16       	cp	r1, r24
    12e0:	0c f0       	brlt	.+2      	; 0x12e4 <move+0x52>
    12e2:	52 c0       	rjmp	.+164    	; 0x1388 <move+0xf6>
    12e4:	c8 ec       	ldi	r28, 0xC8	; 200
    12e6:	de e0       	ldi	r29, 0x0E	; 14
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e8       	ldi	r20, 0x80	; 128
    12ee:	5f e3       	ldi	r21, 0x3F	; 63
    12f0:	c5 01       	movw	r24, r10
    12f2:	b4 01       	movw	r22, r8
    12f4:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__cmpsf2>
    12f8:	87 fd       	sbrc	r24, 7
    12fa:	43 c0       	rjmp	.+134    	; 0x1382 <move+0xf0>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	46 ec       	ldi	r20, 0xC6	; 198
    1302:	52 e4       	ldi	r21, 0x42	; 66
    1304:	c5 01       	movw	r24, r10
    1306:	b4 01       	movw	r22, r8
    1308:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__gesf2>
    130c:	18 16       	cp	r1, r24
    130e:	0c f0       	brlt	.+2      	; 0x1312 <move+0x80>
    1310:	4d c0       	rjmp	.+154    	; 0x13ac <move+0x11a>
    1312:	08 ec       	ldi	r16, 0xC8	; 200
    1314:	1e e0       	ldi	r17, 0x0E	; 14
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + SATURATE_DIFFERENCE)){
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e8       	ldi	r20, 0x80	; 128
    131c:	5f e3       	ldi	r21, 0x3F	; 63
    131e:	c7 01       	movw	r24, r14
    1320:	b6 01       	movw	r22, r12
    1322:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__cmpsf2>
    1326:	87 fd       	sbrc	r24, 7
    1328:	29 c0       	rjmp	.+82     	; 0x137c <move+0xea>
        z = MIN_INPUT + 1;
    }
    if (z > (MAX_INPUT - SATURATE_DIFFERENCE)){
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	46 ec       	ldi	r20, 0xC6	; 198
    1330:	52 e4       	ldi	r21, 0x42	; 66
    1332:	c7 01       	movw	r24, r14
    1334:	b6 01       	movw	r22, r12
    1336:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__gesf2>
    133a:	18 16       	cp	r1, r24
    133c:	0c f0       	brlt	.+2      	; 0x1340 <move+0xae>
    133e:	48 c0       	rjmp	.+144    	; 0x13d0 <move+0x13e>
    1340:	68 ed       	ldi	r22, 0xD8	; 216
    1342:	7e e0       	ldi	r23, 0x0E	; 14
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different speed controller
    z_speed = (unsigned int)((z - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    OCR1A = left_speed;
    1344:	db bd       	out	0x2b, r29	; 43
    1346:	ca bd       	out	0x2a, r28	; 42
    OCR1B = right_speed;
    1348:	19 bd       	out	0x29, r17	; 41
    134a:	08 bd       	out	0x28, r16	; 40
    OCR1C = z_speed;
    134c:	70 93 79 00 	sts	0x0079, r23
    1350:	60 93 78 00 	sts	0x0078, r22

}
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	bf 90       	pop	r11
    1366:	af 90       	pop	r10
    1368:	9f 90       	pop	r9
    136a:	8f 90       	pop	r8
    136c:	7f 90       	pop	r7
    136e:	6f 90       	pop	r6
    1370:	5f 90       	pop	r5
    1372:	4f 90       	pop	r4
    1374:	08 95       	ret
    1376:	c8 ea       	ldi	r28, 0xA8	; 168
    1378:	d8 e0       	ldi	r29, 0x08	; 8
    137a:	b6 cf       	rjmp	.-148    	; 0x12e8 <move+0x56>
    137c:	68 ea       	ldi	r22, 0xA8	; 168
    137e:	78 e0       	ldi	r23, 0x08	; 8
    1380:	e1 cf       	rjmp	.-62     	; 0x1344 <move+0xb2>
    1382:	08 ea       	ldi	r16, 0xA8	; 168
    1384:	18 e0       	ldi	r17, 0x08	; 8
    1386:	c7 cf       	rjmp	.-114    	; 0x1316 <move+0x84>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e8       	ldi	r20, 0x80	; 128
    138e:	51 e4       	ldi	r21, 0x41	; 65
    1390:	c3 01       	movw	r24, r6
    1392:	b2 01       	movw	r22, r4
    1394:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__mulsf3>
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e8       	ldi	r19, 0x80	; 128
    139c:	49 e0       	ldi	r20, 0x09	; 9
    139e:	55 e4       	ldi	r21, 0x45	; 69
    13a0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__addsf3>
    13a4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fixunssfsi>
    13a8:	eb 01       	movw	r28, r22
    13aa:	9e cf       	rjmp	.-196    	; 0x12e8 <move+0x56>
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e8       	ldi	r20, 0x80	; 128
    13b2:	51 e4       	ldi	r21, 0x41	; 65
    13b4:	c5 01       	movw	r24, r10
    13b6:	b4 01       	movw	r22, r8
    13b8:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__mulsf3>
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e8       	ldi	r19, 0x80	; 128
    13c0:	49 e0       	ldi	r20, 0x09	; 9
    13c2:	55 e4       	ldi	r21, 0x45	; 69
    13c4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__addsf3>
    13c8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fixunssfsi>
    13cc:	8b 01       	movw	r16, r22
    13ce:	a3 cf       	rjmp	.-186    	; 0x1316 <move+0x84>
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	51 e4       	ldi	r21, 0x41	; 65
    13d8:	c7 01       	movw	r24, r14
    13da:	b6 01       	movw	r22, r12
    13dc:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__mulsf3>
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e8       	ldi	r19, 0x80	; 128
    13e4:	49 e0       	ldi	r20, 0x09	; 9
    13e6:	55 e4       	ldi	r21, 0x45	; 69
    13e8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__addsf3>
    13ec:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fixunssfsi>
    13f0:	a9 cf       	rjmp	.-174    	; 0x1344 <move+0xb2>

000013f2 <init_HMC5883L>:
#include "magnometer.h"

void init_HMC5883L(void){

    i2c_start(HMC5883L_WRITE);
    13f2:	8c e3       	ldi	r24, 0x3C	; 60
    13f4:	0e 94 89 05 	call	0xb12	; 0xb12 <i2c_start>
    i2c_write(0x00); // set pointer to CRA
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	0e 94 ab 05 	call	0xb56	; 0xb56 <i2c_write>
    i2c_write(0x70); // write 0x70 to CRA
    13fe:	80 e7       	ldi	r24, 0x70	; 112
    1400:	0e 94 ab 05 	call	0xb56	; 0xb56 <i2c_write>
    i2c_stop();
    1404:	0e 94 c8 06 	call	0xd90	; 0xd90 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
    1408:	8c e3       	ldi	r24, 0x3C	; 60
    140a:	0e 94 89 05 	call	0xb12	; 0xb12 <i2c_start>
    i2c_write(0x01); // set pointer to CRB
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	0e 94 ab 05 	call	0xb56	; 0xb56 <i2c_write>
    i2c_write(0xA0);
    1414:	80 ea       	ldi	r24, 0xA0	; 160
    1416:	0e 94 ab 05 	call	0xb56	; 0xb56 <i2c_write>
    i2c_stop();
    141a:	0e 94 c8 06 	call	0xd90	; 0xd90 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
    141e:	8c e3       	ldi	r24, 0x3C	; 60
    1420:	0e 94 89 05 	call	0xb12	; 0xb12 <i2c_start>
    i2c_write(0x02); // set pointer to measurement mode
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	0e 94 ab 05 	call	0xb56	; 0xb56 <i2c_write>
    i2c_write(0x00); // continous measurement
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0e 94 ab 05 	call	0xb56	; 0xb56 <i2c_write>
    i2c_stop();
    1430:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <i2c_stop>

00001434 <getHeading>:
}
float getHeading(int16_t *x, int16_t *y, int16_t *z){
    1434:	cf 92       	push	r12
    1436:	df 92       	push	r13
    1438:	ef 92       	push	r14
    143a:	ff 92       	push	r15
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	8c 01       	movw	r16, r24
    1446:	eb 01       	movw	r28, r22
    1448:	7a 01       	movw	r14, r20

    float headingDegrees;
    
    i2c_start(HMC5883L_WRITE);
    144a:	8c e3       	ldi	r24, 0x3C	; 60
    144c:	0e 94 89 05 	call	0xb12	; 0xb12 <i2c_start>
    i2c_write(0x03); // set pointer to X axis MSB
    1450:	83 e0       	ldi	r24, 0x03	; 3
    1452:	0e 94 ab 05 	call	0xb56	; 0xb56 <i2c_write>
    i2c_stop();
    1456:	0e 94 c8 06 	call	0xd90	; 0xd90 <i2c_stop>

    i2c_start(HMC5883L_READ);
    145a:	8d e3       	ldi	r24, 0x3D	; 61
    145c:	0e 94 89 05 	call	0xb12	; 0xb12 <i2c_start>

    *x = ((uint8_t)i2c_read_ack())<<8;
    1460:	0e 94 bd 05 	call	0xb7a	; 0xb7a <i2c_read_ack>
    1464:	f8 01       	movw	r30, r16
    1466:	10 82       	st	Z, r1
    1468:	81 83       	std	Z+1, r24	; 0x01
    *x |= i2c_read_ack();
    146a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <i2c_read_ack>
    146e:	f8 01       	movw	r30, r16
    1470:	20 81       	ld	r18, Z
    1472:	31 81       	ldd	r19, Z+1	; 0x01
    1474:	28 2b       	or	r18, r24
    1476:	31 83       	std	Z+1, r19	; 0x01
    1478:	20 83       	st	Z, r18

    *z = ((uint8_t)i2c_read_ack())<<8;
    147a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <i2c_read_ack>
    147e:	f7 01       	movw	r30, r14
    1480:	10 82       	st	Z, r1
    1482:	81 83       	std	Z+1, r24	; 0x01
    *z |= i2c_read_ack();
    1484:	0e 94 bd 05 	call	0xb7a	; 0xb7a <i2c_read_ack>
    1488:	f7 01       	movw	r30, r14
    148a:	20 81       	ld	r18, Z
    148c:	31 81       	ldd	r19, Z+1	; 0x01
    148e:	28 2b       	or	r18, r24
    1490:	31 83       	std	Z+1, r19	; 0x01
    1492:	20 83       	st	Z, r18

    *y = ((uint8_t)i2c_read_ack())<<8;
    1494:	0e 94 bd 05 	call	0xb7a	; 0xb7a <i2c_read_ack>
    1498:	18 82       	st	Y, r1
    149a:	89 83       	std	Y+1, r24	; 0x01
    *y |= i2c_read_nack();
    149c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <i2c_read_nack>
    14a0:	28 81       	ld	r18, Y
    14a2:	39 81       	ldd	r19, Y+1	; 0x01
    14a4:	28 2b       	or	r18, r24
    14a6:	39 83       	std	Y+1, r19	; 0x01
    14a8:	28 83       	st	Y, r18

    i2c_stop();
    14aa:	0e 94 c8 06 	call	0xd90	; 0xd90 <i2c_stop>

    headingDegrees = atan2((double)*y,(double)*x) * 180 / 3.141592654 + 180;
    14ae:	f8 01       	movw	r30, r16
    14b0:	60 81       	ld	r22, Z
    14b2:	71 81       	ldd	r23, Z+1	; 0x01
    14b4:	07 2e       	mov	r0, r23
    14b6:	00 0c       	add	r0, r0
    14b8:	88 0b       	sbc	r24, r24
    14ba:	99 0b       	sbc	r25, r25
    14bc:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
    14c0:	6b 01       	movw	r12, r22
    14c2:	7c 01       	movw	r14, r24
    14c4:	68 81       	ld	r22, Y
    14c6:	79 81       	ldd	r23, Y+1	; 0x01
    14c8:	07 2e       	mov	r0, r23
    14ca:	00 0c       	add	r0, r0
    14cc:	88 0b       	sbc	r24, r24
    14ce:	99 0b       	sbc	r25, r25
    14d0:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__floatsisf>
    14d4:	a7 01       	movw	r20, r14
    14d6:	96 01       	movw	r18, r12
    14d8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <atan2>
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	44 e3       	ldi	r20, 0x34	; 52
    14e2:	53 e4       	ldi	r21, 0x43	; 67
    14e4:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__mulsf3>
    14e8:	2b ed       	ldi	r18, 0xDB	; 219
    14ea:	3f e0       	ldi	r19, 0x0F	; 15
    14ec:	49 e4       	ldi	r20, 0x49	; 73
    14ee:	50 e4       	ldi	r21, 0x40	; 64
    14f0:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	44 e3       	ldi	r20, 0x34	; 52
    14fa:	53 e4       	ldi	r21, 0x43	; 67
    14fc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__addsf3>

    return headingDegrees;
}
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	df 90       	pop	r13
    150e:	cf 90       	pop	r12
    1510:	08 95       	ret

00001512 <get_distance>:
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	cb 01       	movw	r24, r22
    1518:	08 95       	ret

0000151a <print_distance>:
    return 0;
}

double print_distance(unsigned int pin){
    return 0;
}
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	cb 01       	movw	r24, r22
    1520:	08 95       	ret

00001522 <enable_laser_sensor>:
void enable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
    1522:	43 98       	cbi	0x08, 3	; 8

    //enable analog comparator multiplexer, set SFIOR:ACME
    SFIOR |= (1 << ACME);
    1524:	80 b5       	in	r24, 0x20	; 32
    1526:	88 60       	ori	r24, 0x08	; 8
    1528:	80 bd       	out	0x20, r24	; 32

    //set AIN1 to laser sensor pin
    ADMUX &= 0b11111000; //clear the admux input pin bits
    152a:	87 b1       	in	r24, 0x07	; 7
    152c:	88 7f       	andi	r24, 0xF8	; 248
    152e:	87 b9       	out	0x07, r24	; 7
    ADMUX |= LASER_SENSOR;  //set the new bits
    1530:	38 9a       	sbi	0x07, 0	; 7
    
    //enable analog comparator, clear ACSR:ACD
    ACSR &= ~(1 << ACD);
    1532:	47 98       	cbi	0x08, 7	; 8
    
    //set comparator interrupt on rising output edge, set ACSR:ACIS1, set ACSR:ACIS0
    ACSR |= (1 << ACIS1) | (1 << ACIS0);
    1534:	88 b1       	in	r24, 0x08	; 8
    1536:	83 60       	ori	r24, 0x03	; 3
    1538:	88 b9       	out	0x08, r24	; 8
    
    //enable analog comparator interrupt, set ACSR:ACIE
    ACSR |= (1 << ACIE);
    153a:	43 9a       	sbi	0x08, 3	; 8
    153c:	08 95       	ret

0000153e <disable_laser_sensor>:
    
    //Be sure to handle the interrupt until ACSR:ACO goes low
}
void disable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
    153e:	43 98       	cbi	0x08, 3	; 8

    //disable analog comparator, set ACSR:ACD
    ACSR |= (1 << ACD);
    1540:	47 9a       	sbi	0x08, 7	; 8

    //disable analog comparator multiplexor, clear SFIOR:ACME
    SFIOR &= ~(1 << ACME);
    1542:	80 b5       	in	r24, 0x20	; 32
    1544:	87 7f       	andi	r24, 0xF7	; 247
    1546:	80 bd       	out	0x20, r24	; 32
    1548:	08 95       	ret

0000154a <laser_off>:
}

void laser_off(){
    PORTB |= (1 << LASER);
    154a:	c0 9a       	sbi	0x18, 0	; 24
    154c:	08 95       	ret

0000154e <laser_on>:
}
void laser_on(){
    PORTB &= ~(1 << LASER);
    154e:	c0 98       	cbi	0x18, 0	; 24
    1550:	08 95       	ret

00001552 <calibrate_pressure_sensor>:
#define	PRESSURESENSOR_C

#include "pressuresensor.h"

void calibrate_pressure_sensor(){
	PSENSOR_MIN = get_voltage(PSENSOR_PIN);;
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 fe 06 	call	0xdfc	; 0xdfc <get_voltage>
    155a:	60 93 42 03 	sts	0x0342, r22
    155e:	70 93 43 03 	sts	0x0343, r23
    1562:	80 93 44 03 	sts	0x0344, r24
    1566:	90 93 45 03 	sts	0x0345, r25
    156a:	08 95       	ret

0000156c <get_depth_mpa>:
}

double get_depth_mpa(){
    156c:	8f 92       	push	r8
    156e:	9f 92       	push	r9
    1570:	af 92       	push	r10
    1572:	bf 92       	push	r11
    1574:	cf 92       	push	r12
    1576:	df 92       	push	r13
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
	return 1.2 * (get_voltage(PSENSOR_PIN) - PSENSOR_MIN)/(4.5-PSENSOR_MIN);
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 fe 06 	call	0xdfc	; 0xdfc <get_voltage>
    1584:	20 91 42 03 	lds	r18, 0x0342
    1588:	30 91 43 03 	lds	r19, 0x0343
    158c:	40 91 44 03 	lds	r20, 0x0344
    1590:	50 91 45 03 	lds	r21, 0x0345
    1594:	80 90 42 03 	lds	r8, 0x0342
    1598:	90 90 43 03 	lds	r9, 0x0343
    159c:	a0 90 44 03 	lds	r10, 0x0344
    15a0:	b0 90 45 03 	lds	r11, 0x0345
    15a4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__subsf3>
    15a8:	2a e9       	ldi	r18, 0x9A	; 154
    15aa:	39 e9       	ldi	r19, 0x99	; 153
    15ac:	49 e9       	ldi	r20, 0x99	; 153
    15ae:	5f e3       	ldi	r21, 0x3F	; 63
    15b0:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__mulsf3>
    15b4:	6b 01       	movw	r12, r22
    15b6:	7c 01       	movw	r14, r24
    15b8:	a5 01       	movw	r20, r10
    15ba:	94 01       	movw	r18, r8
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	80 e9       	ldi	r24, 0x90	; 144
    15c2:	90 e4       	ldi	r25, 0x40	; 64
    15c4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__subsf3>
    15c8:	9b 01       	movw	r18, r22
    15ca:	ac 01       	movw	r20, r24
    15cc:	c7 01       	movw	r24, r14
    15ce:	b6 01       	movw	r22, r12
    15d0:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
}
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	df 90       	pop	r13
    15da:	cf 90       	pop	r12
    15dc:	bf 90       	pop	r11
    15de:	af 90       	pop	r10
    15e0:	9f 90       	pop	r9
    15e2:	8f 90       	pop	r8
    15e4:	08 95       	ret

000015e6 <get_depth_feet>:
    15e6:	0e 94 b6 0a 	call	0x156c	; 0x156c <get_depth_mpa>
    15ea:	29 ef       	ldi	r18, 0xF9	; 249
    15ec:	37 e4       	ldi	r19, 0x47	; 71
    15ee:	47 ea       	ldi	r20, 0xA7	; 167
    15f0:	53 e4       	ldi	r21, 0x43	; 67
    15f2:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__mulsf3>
    15f6:	08 95       	ret

000015f8 <main>:

char buffer[10];
volatile int object_detected = 0;


int main(){
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <main+0x6>
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <main+0x8>
    1600:	1f 92       	push	r1
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0xFF;
    1606:	8f ef       	ldi	r24, 0xFF	; 255
    1608:	87 bb       	out	0x17, r24	; 23
    PORTB = 0;
    160a:	18 ba       	out	0x18, r1	; 24
    USART0_Init(MYUBRR);
    160c:	87 e6       	ldi	r24, 0x67	; 103
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 9f 08 	call	0x113e	; 0x113e <USART0_Init>
    USART0_send_string((unsigned char *)"USART0 (RS232) Initialized\r\n");
    1614:	80 e4       	ldi	r24, 0x40	; 64
    1616:	92 e0       	ldi	r25, 0x02	; 2
    1618:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    STABLE_Z = 50;
    161c:	82 e3       	ldi	r24, 0x32	; 50
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	90 93 01 01 	sts	0x0101, r25
    1624:	80 93 00 01 	sts	0x0100, r24
    enable_adc();
    1628:	0e 94 cc 06 	call	0xd98	; 0xd98 <enable_adc>
    calibrate_pressure_sensor();
    162c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <calibrate_pressure_sensor>
    //init_HMC5883L();
    init_motors();
    1630:	0e 94 3f 09 	call	0x127e	; 0x127e <init_motors>
    init_data_timer();
    1634:	0e 94 3d 03 	call	0x67a	; 0x67a <init_data_timer>
    enable_bumpers();
    1638:	0e 94 2f 03 	call	0x65e	; 0x65e <enable_bumpers>
    sei();
    163c:	78 94       	sei
    

    unsigned char data[MAX_STRING_SIZE];
    int i;
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        data[i] = '\0';
    163e:	19 82       	std	Y+1, r1	; 0x01
    1640:	1a 82       	std	Y+2, r1	; 0x02
    1642:	1b 82       	std	Y+3, r1	; 0x03
    1644:	1d 82       	std	Y+5, r1	; 0x05
    }
    data[MAX_STRING_SIZE - 2] = '~';
    1646:	8e e7       	ldi	r24, 0x7E	; 126
    1648:	8c 83       	std	Y+4, r24	; 0x04

    move(50,50,50);
    164a:	e1 2c       	mov	r14, r1
    164c:	f1 2c       	mov	r15, r1
    164e:	08 e4       	ldi	r16, 0x48	; 72
    1650:	12 e4       	ldi	r17, 0x42	; 66
    1652:	a8 01       	movw	r20, r16
    1654:	97 01       	movw	r18, r14
    1656:	c8 01       	movw	r24, r16
    1658:	b7 01       	movw	r22, r14
    165a:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
    while (1){
        USART0_Receive_String(data);
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <USART0_Receive_String>
        USART0_send_string((unsigned char *)"Data received: ");
    1666:	8d e5       	ldi	r24, 0x5D	; 93
    1668:	92 e0       	ldi	r25, 0x02	; 2
    166a:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
        USART0_send_string(data);
    166e:	ce 01       	movw	r24, r28
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
        USART0_send_string((unsigned char *)"\r\n");
    1676:	84 e2       	ldi	r24, 0x24	; 36
    1678:	93 e0       	ldi	r25, 0x03	; 3
    167a:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>

        if (strcmp((char *)data,"eee~") == 0){
    167e:	6d e6       	ldi	r22, 0x6D	; 109
    1680:	72 e0       	ldi	r23, 0x02	; 2
    1682:	ce 01       	movw	r24, r28
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <strcmp>
    168a:	89 2b       	or	r24, r25
    168c:	69 f1       	breq	.+90     	; 0x16e8 <main+0xf0>
            UCSR0B &= ~(1<<RXEN0);
            path2();
            //enable RX0
            UCSR0B |= (1<<RXEN0);
        }
        else if (data[0] == 103 && data[1] == 103 && data[3] == 126){ //0x67 0x67 0xdd 0x7e or 103 103 ddd 126
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	87 36       	cpi	r24, 0x67	; 103
    1692:	09 f4       	brne	.+2      	; 0x1696 <main+0x9e>
    1694:	62 c0       	rjmp	.+196    	; 0x175a <main+0x162>
            USART0_send_string((unsigned char *)"Stable Z Set\r\n");
            STABLE_Z = data[2]; 
        }
        else if (strcmp((char *)data,"hhh~") == 0){ //0x68 0x68 0x68 0x7e or 104 104 104 126
    1696:	65 e9       	ldi	r22, 0x95	; 149
    1698:	72 e0       	ldi	r23, 0x02	; 2
    169a:	ce 01       	movw	r24, r28
    169c:	01 96       	adiw	r24, 0x01	; 1
    169e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <strcmp>
    16a2:	89 2b       	or	r24, r25
    16a4:	51 f1       	breq	.+84     	; 0x16fa <main+0x102>
            USART0_send_string((unsigned char *)"Depth reached. Waiting for 10 seconds.\r\n");
            _delay_ms(10000);
            move(50,50,50);
            USART0_send_string((unsigned char *)"Returning to surface\r\n");
        }
        else if (strcmp((char *)data,"fff~") == 0){ //0x66 0x66 0x66 0x7e or 102 102 102 126
    16a6:	6e ee       	ldi	r22, 0xEE	; 238
    16a8:	72 e0       	ldi	r23, 0x02	; 2
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <strcmp>
    16b2:	89 2b       	or	r24, r25
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <main+0xc0>
    16b6:	8d c0       	rjmp	.+282    	; 0x17d2 <main+0x1da>
            USART0_send_string((unsigned char *)"Calibrating\r\n");
            calibrate_pressure_sensor();
            USART0_send_string((unsigned char *)"Calibrate complete\r\n");
        }
        else if (strcmp((char *)data,"222~") == 0){
    16b8:	66 e1       	ldi	r22, 0x16	; 22
    16ba:	73 e0       	ldi	r23, 0x03	; 3
    16bc:	ce 01       	movw	r24, r28
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <strcmp>
    16c4:	89 2b       	or	r24, r25
    16c6:	09 f0       	breq	.+2      	; 0x16ca <main+0xd2>
    16c8:	5b c0       	rjmp	.+182    	; 0x1780 <main+0x188>
            USART0_send_string((unsigned char *)"Stopping \r\n");
    16ca:	8b e1       	ldi	r24, 0x1B	; 27
    16cc:	93 e0       	ldi	r25, 0x03	; 3
    16ce:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
            move(50,50,50);
    16d2:	e1 2c       	mov	r14, r1
    16d4:	f1 2c       	mov	r15, r1
    16d6:	08 e4       	ldi	r16, 0x48	; 72
    16d8:	12 e4       	ldi	r17, 0x42	; 66
    16da:	a8 01       	movw	r20, r16
    16dc:	97 01       	movw	r18, r14
    16de:	c8 01       	movw	r24, r16
    16e0:	b7 01       	movw	r22, r14
    16e2:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
    16e6:	bb cf       	rjmp	.-138    	; 0x165e <main+0x66>
        USART0_send_string((unsigned char *)"Data received: ");
        USART0_send_string(data);
        USART0_send_string((unsigned char *)"\r\n");

        if (strcmp((char *)data,"eee~") == 0){
            USART0_send_string((unsigned char *)"Initiating path 1\r\n");
    16e8:	82 e7       	ldi	r24, 0x72	; 114
    16ea:	92 e0       	ldi	r25, 0x02	; 2
    16ec:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
            //disable RX0
            UCSR0B &= ~(1<<RXEN0);
    16f0:	54 98       	cbi	0x0a, 4	; 10
            path2();
    16f2:	0e 94 77 04 	call	0x8ee	; 0x8ee <path2>
            //enable RX0
            UCSR0B |= (1<<RXEN0);
    16f6:	54 9a       	sbi	0x0a, 4	; 10
    16f8:	b2 cf       	rjmp	.-156    	; 0x165e <main+0x66>
        else if (data[0] == 103 && data[1] == 103 && data[3] == 126){ //0x67 0x67 0xdd 0x7e or 103 103 ddd 126
            USART0_send_string((unsigned char *)"Stable Z Set\r\n");
            STABLE_Z = data[2]; 
        }
        else if (strcmp((char *)data,"hhh~") == 0){ //0x68 0x68 0x68 0x7e or 104 104 104 126
            USART0_send_string((unsigned char *)"Diving to 10 feet\r\n");
    16fa:	8a e9       	ldi	r24, 0x9A	; 154
    16fc:	92 e0       	ldi	r25, 0x02	; 2
    16fe:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
            dive(10);
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	80 e2       	ldi	r24, 0x20	; 32
    1708:	91 e4       	ldi	r25, 0x41	; 65
    170a:	0e 94 ce 02 	call	0x59c	; 0x59c <dive>
    170e:	2f ef       	ldi	r18, 0xFF	; 255
    1710:	33 ed       	ldi	r19, 0xD3	; 211
    1712:	80 e3       	ldi	r24, 0x30	; 48
    1714:	21 50       	subi	r18, 0x01	; 1
    1716:	30 40       	sbci	r19, 0x00	; 0
    1718:	80 40       	sbci	r24, 0x00	; 0
    171a:	e1 f7       	brne	.-8      	; 0x1714 <main+0x11c>
    171c:	00 c0       	rjmp	.+0      	; 0x171e <main+0x126>
    171e:	00 00       	nop
            _delay_ms(1000);
            USART0_send_string((unsigned char *)"Depth reached. Waiting for 10 seconds.\r\n");
    1720:	8e ea       	ldi	r24, 0xAE	; 174
    1722:	92 e0       	ldi	r25, 0x02	; 2
    1724:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    1728:	9a ea       	ldi	r25, 0xAA	; 170
    172a:	26 ee       	ldi	r18, 0xE6	; 230
    172c:	36 e9       	ldi	r19, 0x96	; 150
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	91 50       	subi	r25, 0x01	; 1
    1732:	20 40       	sbci	r18, 0x00	; 0
    1734:	30 40       	sbci	r19, 0x00	; 0
    1736:	80 40       	sbci	r24, 0x00	; 0
    1738:	d9 f7       	brne	.-10     	; 0x1730 <main+0x138>
    173a:	00 00       	nop
            _delay_ms(10000);
            move(50,50,50);
    173c:	e1 2c       	mov	r14, r1
    173e:	f1 2c       	mov	r15, r1
    1740:	08 e4       	ldi	r16, 0x48	; 72
    1742:	12 e4       	ldi	r17, 0x42	; 66
    1744:	a8 01       	movw	r20, r16
    1746:	97 01       	movw	r18, r14
    1748:	c8 01       	movw	r24, r16
    174a:	b7 01       	movw	r22, r14
    174c:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
            USART0_send_string((unsigned char *)"Returning to surface\r\n");
    1750:	87 ed       	ldi	r24, 0xD7	; 215
    1752:	92 e0       	ldi	r25, 0x02	; 2
    1754:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    1758:	82 cf       	rjmp	.-252    	; 0x165e <main+0x66>
            UCSR0B &= ~(1<<RXEN0);
            path2();
            //enable RX0
            UCSR0B |= (1<<RXEN0);
        }
        else if (data[0] == 103 && data[1] == 103 && data[3] == 126){ //0x67 0x67 0xdd 0x7e or 103 103 ddd 126
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	87 36       	cpi	r24, 0x67	; 103
    175e:	09 f0       	breq	.+2      	; 0x1762 <main+0x16a>
    1760:	9a cf       	rjmp	.-204    	; 0x1696 <main+0x9e>
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	8e 37       	cpi	r24, 0x7E	; 126
    1766:	09 f0       	breq	.+2      	; 0x176a <main+0x172>
    1768:	96 cf       	rjmp	.-212    	; 0x1696 <main+0x9e>
            USART0_send_string((unsigned char *)"Stable Z Set\r\n");
    176a:	86 e8       	ldi	r24, 0x86	; 134
    176c:	92 e0       	ldi	r25, 0x02	; 2
    176e:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
            STABLE_Z = data[2]; 
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	90 93 01 01 	sts	0x0101, r25
    177a:	80 93 00 01 	sts	0x0100, r24
    177e:	6f cf       	rjmp	.-290    	; 0x165e <main+0x66>
        else if (strcmp((char *)data,"222~") == 0){
            USART0_send_string((unsigned char *)"Stopping \r\n");
            move(50,50,50);
        }
        else{
            USART0_send_string((unsigned char *)"Moving: ");
    1780:	87 e2       	ldi	r24, 0x27	; 39
    1782:	93 e0       	ldi	r25, 0x03	; 3
    1784:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
            USART0_send_string(data);
    1788:	ce 01       	movw	r24, r28
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
            USART0_send_string((unsigned char*)"\r\n");
    1790:	84 e2       	ldi	r24, 0x24	; 36
    1792:	93 e0       	ldi	r25, 0x03	; 3
    1794:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
            move((float)data[0],(float)data[1],(float)data[2]);
    1798:	6b 81       	ldd	r22, Y+3	; 0x03
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__floatunsisf>
    17a4:	6b 01       	movw	r12, r22
    17a6:	7c 01       	movw	r14, r24
    17a8:	6a 81       	ldd	r22, Y+2	; 0x02
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__floatunsisf>
    17b4:	4b 01       	movw	r8, r22
    17b6:	5c 01       	movw	r10, r24
    17b8:	69 81       	ldd	r22, Y+1	; 0x01
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__floatunsisf>
    17c4:	87 01       	movw	r16, r14
    17c6:	76 01       	movw	r14, r12
    17c8:	a5 01       	movw	r20, r10
    17ca:	94 01       	movw	r18, r8
    17cc:	0e 94 49 09 	call	0x1292	; 0x1292 <move>
    17d0:	46 cf       	rjmp	.-372    	; 0x165e <main+0x66>
            _delay_ms(10000);
            move(50,50,50);
            USART0_send_string((unsigned char *)"Returning to surface\r\n");
        }
        else if (strcmp((char *)data,"fff~") == 0){ //0x66 0x66 0x66 0x7e or 102 102 102 126
            USART0_send_string((unsigned char *)"Calibrating\r\n");
    17d2:	83 ef       	ldi	r24, 0xF3	; 243
    17d4:	92 e0       	ldi	r25, 0x02	; 2
    17d6:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
            calibrate_pressure_sensor();
    17da:	0e 94 a9 0a 	call	0x1552	; 0x1552 <calibrate_pressure_sensor>
            USART0_send_string((unsigned char *)"Calibrate complete\r\n");
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	93 e0       	ldi	r25, 0x03	; 3
    17e2:	0e 94 b5 08 	call	0x116a	; 0x116a <USART0_send_string>
    17e6:	3b cf       	rjmp	.-394    	; 0x165e <main+0x66>

000017e8 <__subsf3>:
    17e8:	50 58       	subi	r21, 0x80	; 128

000017ea <__addsf3>:
    17ea:	bb 27       	eor	r27, r27
    17ec:	aa 27       	eor	r26, r26
    17ee:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__addsf3x>
    17f2:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__fp_round>
    17f6:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__fp_pscA>
    17fa:	38 f0       	brcs	.+14     	; 0x180a <__addsf3+0x20>
    17fc:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_pscB>
    1800:	20 f0       	brcs	.+8      	; 0x180a <__addsf3+0x20>
    1802:	39 f4       	brne	.+14     	; 0x1812 <__addsf3+0x28>
    1804:	9f 3f       	cpi	r25, 0xFF	; 255
    1806:	19 f4       	brne	.+6      	; 0x180e <__addsf3+0x24>
    1808:	26 f4       	brtc	.+8      	; 0x1812 <__addsf3+0x28>
    180a:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_nan>
    180e:	0e f4       	brtc	.+2      	; 0x1812 <__addsf3+0x28>
    1810:	e0 95       	com	r30
    1812:	e7 fb       	bst	r30, 7
    1814:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__fp_inf>

00001818 <__addsf3x>:
    1818:	e9 2f       	mov	r30, r25
    181a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__fp_split3>
    181e:	58 f3       	brcs	.-42     	; 0x17f6 <__addsf3+0xc>
    1820:	ba 17       	cp	r27, r26
    1822:	62 07       	cpc	r22, r18
    1824:	73 07       	cpc	r23, r19
    1826:	84 07       	cpc	r24, r20
    1828:	95 07       	cpc	r25, r21
    182a:	20 f0       	brcs	.+8      	; 0x1834 <__addsf3x+0x1c>
    182c:	79 f4       	brne	.+30     	; 0x184c <__addsf3x+0x34>
    182e:	a6 f5       	brtc	.+104    	; 0x1898 <__addsf3x+0x80>
    1830:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_zero>
    1834:	0e f4       	brtc	.+2      	; 0x1838 <__addsf3x+0x20>
    1836:	e0 95       	com	r30
    1838:	0b 2e       	mov	r0, r27
    183a:	ba 2f       	mov	r27, r26
    183c:	a0 2d       	mov	r26, r0
    183e:	0b 01       	movw	r0, r22
    1840:	b9 01       	movw	r22, r18
    1842:	90 01       	movw	r18, r0
    1844:	0c 01       	movw	r0, r24
    1846:	ca 01       	movw	r24, r20
    1848:	a0 01       	movw	r20, r0
    184a:	11 24       	eor	r1, r1
    184c:	ff 27       	eor	r31, r31
    184e:	59 1b       	sub	r21, r25
    1850:	99 f0       	breq	.+38     	; 0x1878 <__addsf3x+0x60>
    1852:	59 3f       	cpi	r21, 0xF9	; 249
    1854:	50 f4       	brcc	.+20     	; 0x186a <__addsf3x+0x52>
    1856:	50 3e       	cpi	r21, 0xE0	; 224
    1858:	68 f1       	brcs	.+90     	; 0x18b4 <__addsf3x+0x9c>
    185a:	1a 16       	cp	r1, r26
    185c:	f0 40       	sbci	r31, 0x00	; 0
    185e:	a2 2f       	mov	r26, r18
    1860:	23 2f       	mov	r18, r19
    1862:	34 2f       	mov	r19, r20
    1864:	44 27       	eor	r20, r20
    1866:	58 5f       	subi	r21, 0xF8	; 248
    1868:	f3 cf       	rjmp	.-26     	; 0x1850 <__addsf3x+0x38>
    186a:	46 95       	lsr	r20
    186c:	37 95       	ror	r19
    186e:	27 95       	ror	r18
    1870:	a7 95       	ror	r26
    1872:	f0 40       	sbci	r31, 0x00	; 0
    1874:	53 95       	inc	r21
    1876:	c9 f7       	brne	.-14     	; 0x186a <__addsf3x+0x52>
    1878:	7e f4       	brtc	.+30     	; 0x1898 <__addsf3x+0x80>
    187a:	1f 16       	cp	r1, r31
    187c:	ba 0b       	sbc	r27, r26
    187e:	62 0b       	sbc	r22, r18
    1880:	73 0b       	sbc	r23, r19
    1882:	84 0b       	sbc	r24, r20
    1884:	ba f0       	brmi	.+46     	; 0x18b4 <__addsf3x+0x9c>
    1886:	91 50       	subi	r25, 0x01	; 1
    1888:	a1 f0       	breq	.+40     	; 0x18b2 <__addsf3x+0x9a>
    188a:	ff 0f       	add	r31, r31
    188c:	bb 1f       	adc	r27, r27
    188e:	66 1f       	adc	r22, r22
    1890:	77 1f       	adc	r23, r23
    1892:	88 1f       	adc	r24, r24
    1894:	c2 f7       	brpl	.-16     	; 0x1886 <__addsf3x+0x6e>
    1896:	0e c0       	rjmp	.+28     	; 0x18b4 <__addsf3x+0x9c>
    1898:	ba 0f       	add	r27, r26
    189a:	62 1f       	adc	r22, r18
    189c:	73 1f       	adc	r23, r19
    189e:	84 1f       	adc	r24, r20
    18a0:	48 f4       	brcc	.+18     	; 0x18b4 <__addsf3x+0x9c>
    18a2:	87 95       	ror	r24
    18a4:	77 95       	ror	r23
    18a6:	67 95       	ror	r22
    18a8:	b7 95       	ror	r27
    18aa:	f7 95       	ror	r31
    18ac:	9e 3f       	cpi	r25, 0xFE	; 254
    18ae:	08 f0       	brcs	.+2      	; 0x18b2 <__addsf3x+0x9a>
    18b0:	b0 cf       	rjmp	.-160    	; 0x1812 <__addsf3+0x28>
    18b2:	93 95       	inc	r25
    18b4:	88 0f       	add	r24, r24
    18b6:	08 f0       	brcs	.+2      	; 0x18ba <__addsf3x+0xa2>
    18b8:	99 27       	eor	r25, r25
    18ba:	ee 0f       	add	r30, r30
    18bc:	97 95       	ror	r25
    18be:	87 95       	ror	r24
    18c0:	08 95       	ret
    18c2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__fp_pscA>
    18c6:	60 f0       	brcs	.+24     	; 0x18e0 <__addsf3x+0xc8>
    18c8:	80 e8       	ldi	r24, 0x80	; 128
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <__addsf3x+0xb8>
    18ce:	9e ef       	ldi	r25, 0xFE	; 254
    18d0:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_pscB>
    18d4:	28 f0       	brcs	.+10     	; 0x18e0 <__addsf3x+0xc8>
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	51 e0       	ldi	r21, 0x01	; 1
    18da:	71 f4       	brne	.+28     	; 0x18f8 <atan2+0x10>
    18dc:	5e ef       	ldi	r21, 0xFE	; 254
    18de:	0c c0       	rjmp	.+24     	; 0x18f8 <atan2+0x10>
    18e0:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_nan>
    18e4:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_zero>

000018e8 <atan2>:
    18e8:	e9 2f       	mov	r30, r25
    18ea:	e0 78       	andi	r30, 0x80	; 128
    18ec:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__fp_split3>
    18f0:	40 f3       	brcs	.-48     	; 0x18c2 <__addsf3x+0xaa>
    18f2:	09 2e       	mov	r0, r25
    18f4:	05 2a       	or	r0, r21
    18f6:	b1 f3       	breq	.-20     	; 0x18e4 <__addsf3x+0xcc>
    18f8:	26 17       	cp	r18, r22
    18fa:	37 07       	cpc	r19, r23
    18fc:	48 07       	cpc	r20, r24
    18fe:	59 07       	cpc	r21, r25
    1900:	38 f0       	brcs	.+14     	; 0x1910 <atan2+0x28>
    1902:	0e 2e       	mov	r0, r30
    1904:	07 f8       	bld	r0, 7
    1906:	e0 25       	eor	r30, r0
    1908:	69 f0       	breq	.+26     	; 0x1924 <atan2+0x3c>
    190a:	e0 25       	eor	r30, r0
    190c:	e0 64       	ori	r30, 0x40	; 64
    190e:	0a c0       	rjmp	.+20     	; 0x1924 <atan2+0x3c>
    1910:	ef 63       	ori	r30, 0x3F	; 63
    1912:	07 f8       	bld	r0, 7
    1914:	00 94       	com	r0
    1916:	07 fa       	bst	r0, 7
    1918:	db 01       	movw	r26, r22
    191a:	b9 01       	movw	r22, r18
    191c:	9d 01       	movw	r18, r26
    191e:	dc 01       	movw	r26, r24
    1920:	ca 01       	movw	r24, r20
    1922:	ad 01       	movw	r20, r26
    1924:	ef 93       	push	r30
    1926:	0e 94 ef 0c 	call	0x19de	; 0x19de <__divsf3_pse>
    192a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fp_round>
    192e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <atan>
    1932:	5f 91       	pop	r21
    1934:	55 23       	and	r21, r21
    1936:	39 f0       	breq	.+14     	; 0x1946 <atan2+0x5e>
    1938:	2b ed       	ldi	r18, 0xDB	; 219
    193a:	3f e0       	ldi	r19, 0x0F	; 15
    193c:	49 e4       	ldi	r20, 0x49	; 73
    193e:	50 fd       	sbrc	r21, 0
    1940:	49 ec       	ldi	r20, 0xC9	; 201
    1942:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__addsf3>
    1946:	08 95       	ret

00001948 <atan>:
    1948:	df 93       	push	r29
    194a:	dd 27       	eor	r29, r29
    194c:	b9 2f       	mov	r27, r25
    194e:	bf 77       	andi	r27, 0x7F	; 127
    1950:	40 e8       	ldi	r20, 0x80	; 128
    1952:	5f e3       	ldi	r21, 0x3F	; 63
    1954:	16 16       	cp	r1, r22
    1956:	17 06       	cpc	r1, r23
    1958:	48 07       	cpc	r20, r24
    195a:	5b 07       	cpc	r21, r27
    195c:	18 f4       	brcc	.+6      	; 0x1964 <atan+0x1c>
    195e:	d9 2f       	mov	r29, r25
    1960:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <inverse>
    1964:	9f 93       	push	r25
    1966:	8f 93       	push	r24
    1968:	7f 93       	push	r23
    196a:	6f 93       	push	r22
    196c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <square>
    1970:	ec e8       	ldi	r30, 0x8C	; 140
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__fp_powser>
    1978:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fp_round>
    197c:	2f 91       	pop	r18
    197e:	3f 91       	pop	r19
    1980:	4f 91       	pop	r20
    1982:	5f 91       	pop	r21
    1984:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__mulsf3x>
    1988:	dd 23       	and	r29, r29
    198a:	51 f0       	breq	.+20     	; 0x19a0 <atan+0x58>
    198c:	90 58       	subi	r25, 0x80	; 128
    198e:	a2 ea       	ldi	r26, 0xA2	; 162
    1990:	2a ed       	ldi	r18, 0xDA	; 218
    1992:	3f e0       	ldi	r19, 0x0F	; 15
    1994:	49 ec       	ldi	r20, 0xC9	; 201
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	d0 78       	andi	r29, 0x80	; 128
    199a:	5d 27       	eor	r21, r29
    199c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__addsf3x>
    19a0:	df 91       	pop	r29
    19a2:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__fp_round>

000019a6 <__cmpsf2>:
    19a6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__fp_cmp>
    19aa:	08 f4       	brcc	.+2      	; 0x19ae <__cmpsf2+0x8>
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	08 95       	ret

000019b0 <__divsf3>:
    19b0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__divsf3x>
    19b4:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__fp_round>
    19b8:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_pscB>
    19bc:	58 f0       	brcs	.+22     	; 0x19d4 <__divsf3+0x24>
    19be:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__fp_pscA>
    19c2:	40 f0       	brcs	.+16     	; 0x19d4 <__divsf3+0x24>
    19c4:	29 f4       	brne	.+10     	; 0x19d0 <__divsf3+0x20>
    19c6:	5f 3f       	cpi	r21, 0xFF	; 255
    19c8:	29 f0       	breq	.+10     	; 0x19d4 <__divsf3+0x24>
    19ca:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__fp_inf>
    19ce:	51 11       	cpse	r21, r1
    19d0:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__fp_szero>
    19d4:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_nan>

000019d8 <__divsf3x>:
    19d8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__fp_split3>
    19dc:	68 f3       	brcs	.-38     	; 0x19b8 <__divsf3+0x8>

000019de <__divsf3_pse>:
    19de:	99 23       	and	r25, r25
    19e0:	b1 f3       	breq	.-20     	; 0x19ce <__divsf3+0x1e>
    19e2:	55 23       	and	r21, r21
    19e4:	91 f3       	breq	.-28     	; 0x19ca <__divsf3+0x1a>
    19e6:	95 1b       	sub	r25, r21
    19e8:	55 0b       	sbc	r21, r21
    19ea:	bb 27       	eor	r27, r27
    19ec:	aa 27       	eor	r26, r26
    19ee:	62 17       	cp	r22, r18
    19f0:	73 07       	cpc	r23, r19
    19f2:	84 07       	cpc	r24, r20
    19f4:	38 f0       	brcs	.+14     	; 0x1a04 <__divsf3_pse+0x26>
    19f6:	9f 5f       	subi	r25, 0xFF	; 255
    19f8:	5f 4f       	sbci	r21, 0xFF	; 255
    19fa:	22 0f       	add	r18, r18
    19fc:	33 1f       	adc	r19, r19
    19fe:	44 1f       	adc	r20, r20
    1a00:	aa 1f       	adc	r26, r26
    1a02:	a9 f3       	breq	.-22     	; 0x19ee <__divsf3_pse+0x10>
    1a04:	35 d0       	rcall	.+106    	; 0x1a70 <__divsf3_pse+0x92>
    1a06:	0e 2e       	mov	r0, r30
    1a08:	3a f0       	brmi	.+14     	; 0x1a18 <__divsf3_pse+0x3a>
    1a0a:	e0 e8       	ldi	r30, 0x80	; 128
    1a0c:	32 d0       	rcall	.+100    	; 0x1a72 <__divsf3_pse+0x94>
    1a0e:	91 50       	subi	r25, 0x01	; 1
    1a10:	50 40       	sbci	r21, 0x00	; 0
    1a12:	e6 95       	lsr	r30
    1a14:	00 1c       	adc	r0, r0
    1a16:	ca f7       	brpl	.-14     	; 0x1a0a <__divsf3_pse+0x2c>
    1a18:	2b d0       	rcall	.+86     	; 0x1a70 <__divsf3_pse+0x92>
    1a1a:	fe 2f       	mov	r31, r30
    1a1c:	29 d0       	rcall	.+82     	; 0x1a70 <__divsf3_pse+0x92>
    1a1e:	66 0f       	add	r22, r22
    1a20:	77 1f       	adc	r23, r23
    1a22:	88 1f       	adc	r24, r24
    1a24:	bb 1f       	adc	r27, r27
    1a26:	26 17       	cp	r18, r22
    1a28:	37 07       	cpc	r19, r23
    1a2a:	48 07       	cpc	r20, r24
    1a2c:	ab 07       	cpc	r26, r27
    1a2e:	b0 e8       	ldi	r27, 0x80	; 128
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <__divsf3_pse+0x56>
    1a32:	bb 0b       	sbc	r27, r27
    1a34:	80 2d       	mov	r24, r0
    1a36:	bf 01       	movw	r22, r30
    1a38:	ff 27       	eor	r31, r31
    1a3a:	93 58       	subi	r25, 0x83	; 131
    1a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3e:	3a f0       	brmi	.+14     	; 0x1a4e <__divsf3_pse+0x70>
    1a40:	9e 3f       	cpi	r25, 0xFE	; 254
    1a42:	51 05       	cpc	r21, r1
    1a44:	78 f0       	brcs	.+30     	; 0x1a64 <__divsf3_pse+0x86>
    1a46:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__fp_inf>
    1a4a:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__fp_szero>
    1a4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a50:	e4 f3       	brlt	.-8      	; 0x1a4a <__divsf3_pse+0x6c>
    1a52:	98 3e       	cpi	r25, 0xE8	; 232
    1a54:	d4 f3       	brlt	.-12     	; 0x1a4a <__divsf3_pse+0x6c>
    1a56:	86 95       	lsr	r24
    1a58:	77 95       	ror	r23
    1a5a:	67 95       	ror	r22
    1a5c:	b7 95       	ror	r27
    1a5e:	f7 95       	ror	r31
    1a60:	9f 5f       	subi	r25, 0xFF	; 255
    1a62:	c9 f7       	brne	.-14     	; 0x1a56 <__divsf3_pse+0x78>
    1a64:	88 0f       	add	r24, r24
    1a66:	91 1d       	adc	r25, r1
    1a68:	96 95       	lsr	r25
    1a6a:	87 95       	ror	r24
    1a6c:	97 f9       	bld	r25, 7
    1a6e:	08 95       	ret
    1a70:	e1 e0       	ldi	r30, 0x01	; 1
    1a72:	66 0f       	add	r22, r22
    1a74:	77 1f       	adc	r23, r23
    1a76:	88 1f       	adc	r24, r24
    1a78:	bb 1f       	adc	r27, r27
    1a7a:	62 17       	cp	r22, r18
    1a7c:	73 07       	cpc	r23, r19
    1a7e:	84 07       	cpc	r24, r20
    1a80:	ba 07       	cpc	r27, r26
    1a82:	20 f0       	brcs	.+8      	; 0x1a8c <__divsf3_pse+0xae>
    1a84:	62 1b       	sub	r22, r18
    1a86:	73 0b       	sbc	r23, r19
    1a88:	84 0b       	sbc	r24, r20
    1a8a:	ba 0b       	sbc	r27, r26
    1a8c:	ee 1f       	adc	r30, r30
    1a8e:	88 f7       	brcc	.-30     	; 0x1a72 <__divsf3_pse+0x94>
    1a90:	e0 95       	com	r30
    1a92:	08 95       	ret

00001a94 <__fixsfsi>:
    1a94:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fixunssfsi>
    1a98:	68 94       	set
    1a9a:	b1 11       	cpse	r27, r1
    1a9c:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__fp_szero>
    1aa0:	08 95       	ret

00001aa2 <__fixunssfsi>:
    1aa2:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__fp_splitA>
    1aa6:	88 f0       	brcs	.+34     	; 0x1aca <__fixunssfsi+0x28>
    1aa8:	9f 57       	subi	r25, 0x7F	; 127
    1aaa:	98 f0       	brcs	.+38     	; 0x1ad2 <__fixunssfsi+0x30>
    1aac:	b9 2f       	mov	r27, r25
    1aae:	99 27       	eor	r25, r25
    1ab0:	b7 51       	subi	r27, 0x17	; 23
    1ab2:	b0 f0       	brcs	.+44     	; 0x1ae0 <__fixunssfsi+0x3e>
    1ab4:	e1 f0       	breq	.+56     	; 0x1aee <__fixunssfsi+0x4c>
    1ab6:	66 0f       	add	r22, r22
    1ab8:	77 1f       	adc	r23, r23
    1aba:	88 1f       	adc	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	1a f0       	brmi	.+6      	; 0x1ac6 <__fixunssfsi+0x24>
    1ac0:	ba 95       	dec	r27
    1ac2:	c9 f7       	brne	.-14     	; 0x1ab6 <__fixunssfsi+0x14>
    1ac4:	14 c0       	rjmp	.+40     	; 0x1aee <__fixunssfsi+0x4c>
    1ac6:	b1 30       	cpi	r27, 0x01	; 1
    1ac8:	91 f0       	breq	.+36     	; 0x1aee <__fixunssfsi+0x4c>
    1aca:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__fp_zero>
    1ace:	b1 e0       	ldi	r27, 0x01	; 1
    1ad0:	08 95       	ret
    1ad2:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_zero>
    1ad6:	67 2f       	mov	r22, r23
    1ad8:	78 2f       	mov	r23, r24
    1ada:	88 27       	eor	r24, r24
    1adc:	b8 5f       	subi	r27, 0xF8	; 248
    1ade:	39 f0       	breq	.+14     	; 0x1aee <__fixunssfsi+0x4c>
    1ae0:	b9 3f       	cpi	r27, 0xF9	; 249
    1ae2:	cc f3       	brlt	.-14     	; 0x1ad6 <__fixunssfsi+0x34>
    1ae4:	86 95       	lsr	r24
    1ae6:	77 95       	ror	r23
    1ae8:	67 95       	ror	r22
    1aea:	b3 95       	inc	r27
    1aec:	d9 f7       	brne	.-10     	; 0x1ae4 <__fixunssfsi+0x42>
    1aee:	3e f4       	brtc	.+14     	; 0x1afe <__fixunssfsi+0x5c>
    1af0:	90 95       	com	r25
    1af2:	80 95       	com	r24
    1af4:	70 95       	com	r23
    1af6:	61 95       	neg	r22
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	8f 4f       	sbci	r24, 0xFF	; 255
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	08 95       	ret

00001b00 <__floatunsisf>:
    1b00:	e8 94       	clt
    1b02:	09 c0       	rjmp	.+18     	; 0x1b16 <__floatsisf+0x12>

00001b04 <__floatsisf>:
    1b04:	97 fb       	bst	r25, 7
    1b06:	3e f4       	brtc	.+14     	; 0x1b16 <__floatsisf+0x12>
    1b08:	90 95       	com	r25
    1b0a:	80 95       	com	r24
    1b0c:	70 95       	com	r23
    1b0e:	61 95       	neg	r22
    1b10:	7f 4f       	sbci	r23, 0xFF	; 255
    1b12:	8f 4f       	sbci	r24, 0xFF	; 255
    1b14:	9f 4f       	sbci	r25, 0xFF	; 255
    1b16:	99 23       	and	r25, r25
    1b18:	a9 f0       	breq	.+42     	; 0x1b44 <__floatsisf+0x40>
    1b1a:	f9 2f       	mov	r31, r25
    1b1c:	96 e9       	ldi	r25, 0x96	; 150
    1b1e:	bb 27       	eor	r27, r27
    1b20:	93 95       	inc	r25
    1b22:	f6 95       	lsr	r31
    1b24:	87 95       	ror	r24
    1b26:	77 95       	ror	r23
    1b28:	67 95       	ror	r22
    1b2a:	b7 95       	ror	r27
    1b2c:	f1 11       	cpse	r31, r1
    1b2e:	f8 cf       	rjmp	.-16     	; 0x1b20 <__floatsisf+0x1c>
    1b30:	fa f4       	brpl	.+62     	; 0x1b70 <__floatsisf+0x6c>
    1b32:	bb 0f       	add	r27, r27
    1b34:	11 f4       	brne	.+4      	; 0x1b3a <__floatsisf+0x36>
    1b36:	60 ff       	sbrs	r22, 0
    1b38:	1b c0       	rjmp	.+54     	; 0x1b70 <__floatsisf+0x6c>
    1b3a:	6f 5f       	subi	r22, 0xFF	; 255
    1b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b40:	9f 4f       	sbci	r25, 0xFF	; 255
    1b42:	16 c0       	rjmp	.+44     	; 0x1b70 <__floatsisf+0x6c>
    1b44:	88 23       	and	r24, r24
    1b46:	11 f0       	breq	.+4      	; 0x1b4c <__floatsisf+0x48>
    1b48:	96 e9       	ldi	r25, 0x96	; 150
    1b4a:	11 c0       	rjmp	.+34     	; 0x1b6e <__floatsisf+0x6a>
    1b4c:	77 23       	and	r23, r23
    1b4e:	21 f0       	breq	.+8      	; 0x1b58 <__floatsisf+0x54>
    1b50:	9e e8       	ldi	r25, 0x8E	; 142
    1b52:	87 2f       	mov	r24, r23
    1b54:	76 2f       	mov	r23, r22
    1b56:	05 c0       	rjmp	.+10     	; 0x1b62 <__floatsisf+0x5e>
    1b58:	66 23       	and	r22, r22
    1b5a:	71 f0       	breq	.+28     	; 0x1b78 <__floatsisf+0x74>
    1b5c:	96 e8       	ldi	r25, 0x86	; 134
    1b5e:	86 2f       	mov	r24, r22
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	2a f0       	brmi	.+10     	; 0x1b70 <__floatsisf+0x6c>
    1b66:	9a 95       	dec	r25
    1b68:	66 0f       	add	r22, r22
    1b6a:	77 1f       	adc	r23, r23
    1b6c:	88 1f       	adc	r24, r24
    1b6e:	da f7       	brpl	.-10     	; 0x1b66 <__floatsisf+0x62>
    1b70:	88 0f       	add	r24, r24
    1b72:	96 95       	lsr	r25
    1b74:	87 95       	ror	r24
    1b76:	97 f9       	bld	r25, 7
    1b78:	08 95       	ret

00001b7a <__fp_cmp>:
    1b7a:	99 0f       	add	r25, r25
    1b7c:	00 08       	sbc	r0, r0
    1b7e:	55 0f       	add	r21, r21
    1b80:	aa 0b       	sbc	r26, r26
    1b82:	e0 e8       	ldi	r30, 0x80	; 128
    1b84:	fe ef       	ldi	r31, 0xFE	; 254
    1b86:	16 16       	cp	r1, r22
    1b88:	17 06       	cpc	r1, r23
    1b8a:	e8 07       	cpc	r30, r24
    1b8c:	f9 07       	cpc	r31, r25
    1b8e:	c0 f0       	brcs	.+48     	; 0x1bc0 <__fp_cmp+0x46>
    1b90:	12 16       	cp	r1, r18
    1b92:	13 06       	cpc	r1, r19
    1b94:	e4 07       	cpc	r30, r20
    1b96:	f5 07       	cpc	r31, r21
    1b98:	98 f0       	brcs	.+38     	; 0x1bc0 <__fp_cmp+0x46>
    1b9a:	62 1b       	sub	r22, r18
    1b9c:	73 0b       	sbc	r23, r19
    1b9e:	84 0b       	sbc	r24, r20
    1ba0:	95 0b       	sbc	r25, r21
    1ba2:	39 f4       	brne	.+14     	; 0x1bb2 <__fp_cmp+0x38>
    1ba4:	0a 26       	eor	r0, r26
    1ba6:	61 f0       	breq	.+24     	; 0x1bc0 <__fp_cmp+0x46>
    1ba8:	23 2b       	or	r18, r19
    1baa:	24 2b       	or	r18, r20
    1bac:	25 2b       	or	r18, r21
    1bae:	21 f4       	brne	.+8      	; 0x1bb8 <__fp_cmp+0x3e>
    1bb0:	08 95       	ret
    1bb2:	0a 26       	eor	r0, r26
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <__fp_cmp+0x3e>
    1bb6:	a1 40       	sbci	r26, 0x01	; 1
    1bb8:	a6 95       	lsr	r26
    1bba:	8f ef       	ldi	r24, 0xFF	; 255
    1bbc:	81 1d       	adc	r24, r1
    1bbe:	81 1d       	adc	r24, r1
    1bc0:	08 95       	ret

00001bc2 <__fp_inf>:
    1bc2:	97 f9       	bld	r25, 7
    1bc4:	9f 67       	ori	r25, 0x7F	; 127
    1bc6:	80 e8       	ldi	r24, 0x80	; 128
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	08 95       	ret

00001bce <__fp_nan>:
    1bce:	9f ef       	ldi	r25, 0xFF	; 255
    1bd0:	80 ec       	ldi	r24, 0xC0	; 192
    1bd2:	08 95       	ret

00001bd4 <__fp_powser>:
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	1f 93       	push	r17
    1bda:	0f 93       	push	r16
    1bdc:	ff 92       	push	r15
    1bde:	ef 92       	push	r14
    1be0:	df 92       	push	r13
    1be2:	7b 01       	movw	r14, r22
    1be4:	8c 01       	movw	r16, r24
    1be6:	68 94       	set
    1be8:	06 c0       	rjmp	.+12     	; 0x1bf6 <__fp_powser+0x22>
    1bea:	da 2e       	mov	r13, r26
    1bec:	ef 01       	movw	r28, r30
    1bee:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__mulsf3x>
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e8 94       	clt
    1bf6:	a5 91       	lpm	r26, Z+
    1bf8:	25 91       	lpm	r18, Z+
    1bfa:	35 91       	lpm	r19, Z+
    1bfc:	45 91       	lpm	r20, Z+
    1bfe:	55 91       	lpm	r21, Z+
    1c00:	a6 f3       	brts	.-24     	; 0x1bea <__fp_powser+0x16>
    1c02:	ef 01       	movw	r28, r30
    1c04:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__addsf3x>
    1c08:	fe 01       	movw	r30, r28
    1c0a:	97 01       	movw	r18, r14
    1c0c:	a8 01       	movw	r20, r16
    1c0e:	da 94       	dec	r13
    1c10:	69 f7       	brne	.-38     	; 0x1bec <__fp_powser+0x18>
    1c12:	df 90       	pop	r13
    1c14:	ef 90       	pop	r14
    1c16:	ff 90       	pop	r15
    1c18:	0f 91       	pop	r16
    1c1a:	1f 91       	pop	r17
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <__fp_pscA>:
    1c22:	00 24       	eor	r0, r0
    1c24:	0a 94       	dec	r0
    1c26:	16 16       	cp	r1, r22
    1c28:	17 06       	cpc	r1, r23
    1c2a:	18 06       	cpc	r1, r24
    1c2c:	09 06       	cpc	r0, r25
    1c2e:	08 95       	ret

00001c30 <__fp_pscB>:
    1c30:	00 24       	eor	r0, r0
    1c32:	0a 94       	dec	r0
    1c34:	12 16       	cp	r1, r18
    1c36:	13 06       	cpc	r1, r19
    1c38:	14 06       	cpc	r1, r20
    1c3a:	05 06       	cpc	r0, r21
    1c3c:	08 95       	ret

00001c3e <__fp_round>:
    1c3e:	09 2e       	mov	r0, r25
    1c40:	03 94       	inc	r0
    1c42:	00 0c       	add	r0, r0
    1c44:	11 f4       	brne	.+4      	; 0x1c4a <__fp_round+0xc>
    1c46:	88 23       	and	r24, r24
    1c48:	52 f0       	brmi	.+20     	; 0x1c5e <__fp_round+0x20>
    1c4a:	bb 0f       	add	r27, r27
    1c4c:	40 f4       	brcc	.+16     	; 0x1c5e <__fp_round+0x20>
    1c4e:	bf 2b       	or	r27, r31
    1c50:	11 f4       	brne	.+4      	; 0x1c56 <__fp_round+0x18>
    1c52:	60 ff       	sbrs	r22, 0
    1c54:	04 c0       	rjmp	.+8      	; 0x1c5e <__fp_round+0x20>
    1c56:	6f 5f       	subi	r22, 0xFF	; 255
    1c58:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5e:	08 95       	ret

00001c60 <__fp_split3>:
    1c60:	57 fd       	sbrc	r21, 7
    1c62:	90 58       	subi	r25, 0x80	; 128
    1c64:	44 0f       	add	r20, r20
    1c66:	55 1f       	adc	r21, r21
    1c68:	59 f0       	breq	.+22     	; 0x1c80 <__fp_splitA+0x10>
    1c6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c6c:	71 f0       	breq	.+28     	; 0x1c8a <__fp_splitA+0x1a>
    1c6e:	47 95       	ror	r20

00001c70 <__fp_splitA>:
    1c70:	88 0f       	add	r24, r24
    1c72:	97 fb       	bst	r25, 7
    1c74:	99 1f       	adc	r25, r25
    1c76:	61 f0       	breq	.+24     	; 0x1c90 <__fp_splitA+0x20>
    1c78:	9f 3f       	cpi	r25, 0xFF	; 255
    1c7a:	79 f0       	breq	.+30     	; 0x1c9a <__fp_splitA+0x2a>
    1c7c:	87 95       	ror	r24
    1c7e:	08 95       	ret
    1c80:	12 16       	cp	r1, r18
    1c82:	13 06       	cpc	r1, r19
    1c84:	14 06       	cpc	r1, r20
    1c86:	55 1f       	adc	r21, r21
    1c88:	f2 cf       	rjmp	.-28     	; 0x1c6e <__fp_split3+0xe>
    1c8a:	46 95       	lsr	r20
    1c8c:	f1 df       	rcall	.-30     	; 0x1c70 <__fp_splitA>
    1c8e:	08 c0       	rjmp	.+16     	; 0x1ca0 <__fp_splitA+0x30>
    1c90:	16 16       	cp	r1, r22
    1c92:	17 06       	cpc	r1, r23
    1c94:	18 06       	cpc	r1, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	f1 cf       	rjmp	.-30     	; 0x1c7c <__fp_splitA+0xc>
    1c9a:	86 95       	lsr	r24
    1c9c:	71 05       	cpc	r23, r1
    1c9e:	61 05       	cpc	r22, r1
    1ca0:	08 94       	sec
    1ca2:	08 95       	ret

00001ca4 <__fp_zero>:
    1ca4:	e8 94       	clt

00001ca6 <__fp_szero>:
    1ca6:	bb 27       	eor	r27, r27
    1ca8:	66 27       	eor	r22, r22
    1caa:	77 27       	eor	r23, r23
    1cac:	cb 01       	movw	r24, r22
    1cae:	97 f9       	bld	r25, 7
    1cb0:	08 95       	ret

00001cb2 <__gesf2>:
    1cb2:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__fp_cmp>
    1cb6:	08 f4       	brcc	.+2      	; 0x1cba <__gesf2+0x8>
    1cb8:	8f ef       	ldi	r24, 0xFF	; 255
    1cba:	08 95       	ret

00001cbc <inverse>:
    1cbc:	9b 01       	movw	r18, r22
    1cbe:	ac 01       	movw	r20, r24
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	80 e8       	ldi	r24, 0x80	; 128
    1cc6:	9f e3       	ldi	r25, 0x3F	; 63
    1cc8:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__divsf3>

00001ccc <__mulsf3>:
    1ccc:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__mulsf3x>
    1cd0:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__fp_round>
    1cd4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__fp_pscA>
    1cd8:	38 f0       	brcs	.+14     	; 0x1ce8 <__mulsf3+0x1c>
    1cda:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_pscB>
    1cde:	20 f0       	brcs	.+8      	; 0x1ce8 <__mulsf3+0x1c>
    1ce0:	95 23       	and	r25, r21
    1ce2:	11 f0       	breq	.+4      	; 0x1ce8 <__mulsf3+0x1c>
    1ce4:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__fp_inf>
    1ce8:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_nan>
    1cec:	11 24       	eor	r1, r1
    1cee:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__fp_szero>

00001cf2 <__mulsf3x>:
    1cf2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__fp_split3>
    1cf6:	70 f3       	brcs	.-36     	; 0x1cd4 <__mulsf3+0x8>

00001cf8 <__mulsf3_pse>:
    1cf8:	95 9f       	mul	r25, r21
    1cfa:	c1 f3       	breq	.-16     	; 0x1cec <__mulsf3+0x20>
    1cfc:	95 0f       	add	r25, r21
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	55 1f       	adc	r21, r21
    1d02:	62 9f       	mul	r22, r18
    1d04:	f0 01       	movw	r30, r0
    1d06:	72 9f       	mul	r23, r18
    1d08:	bb 27       	eor	r27, r27
    1d0a:	f0 0d       	add	r31, r0
    1d0c:	b1 1d       	adc	r27, r1
    1d0e:	63 9f       	mul	r22, r19
    1d10:	aa 27       	eor	r26, r26
    1d12:	f0 0d       	add	r31, r0
    1d14:	b1 1d       	adc	r27, r1
    1d16:	aa 1f       	adc	r26, r26
    1d18:	64 9f       	mul	r22, r20
    1d1a:	66 27       	eor	r22, r22
    1d1c:	b0 0d       	add	r27, r0
    1d1e:	a1 1d       	adc	r26, r1
    1d20:	66 1f       	adc	r22, r22
    1d22:	82 9f       	mul	r24, r18
    1d24:	22 27       	eor	r18, r18
    1d26:	b0 0d       	add	r27, r0
    1d28:	a1 1d       	adc	r26, r1
    1d2a:	62 1f       	adc	r22, r18
    1d2c:	73 9f       	mul	r23, r19
    1d2e:	b0 0d       	add	r27, r0
    1d30:	a1 1d       	adc	r26, r1
    1d32:	62 1f       	adc	r22, r18
    1d34:	83 9f       	mul	r24, r19
    1d36:	a0 0d       	add	r26, r0
    1d38:	61 1d       	adc	r22, r1
    1d3a:	22 1f       	adc	r18, r18
    1d3c:	74 9f       	mul	r23, r20
    1d3e:	33 27       	eor	r19, r19
    1d40:	a0 0d       	add	r26, r0
    1d42:	61 1d       	adc	r22, r1
    1d44:	23 1f       	adc	r18, r19
    1d46:	84 9f       	mul	r24, r20
    1d48:	60 0d       	add	r22, r0
    1d4a:	21 1d       	adc	r18, r1
    1d4c:	82 2f       	mov	r24, r18
    1d4e:	76 2f       	mov	r23, r22
    1d50:	6a 2f       	mov	r22, r26
    1d52:	11 24       	eor	r1, r1
    1d54:	9f 57       	subi	r25, 0x7F	; 127
    1d56:	50 40       	sbci	r21, 0x00	; 0
    1d58:	9a f0       	brmi	.+38     	; 0x1d80 <__mulsf3_pse+0x88>
    1d5a:	f1 f0       	breq	.+60     	; 0x1d98 <__mulsf3_pse+0xa0>
    1d5c:	88 23       	and	r24, r24
    1d5e:	4a f0       	brmi	.+18     	; 0x1d72 <__mulsf3_pse+0x7a>
    1d60:	ee 0f       	add	r30, r30
    1d62:	ff 1f       	adc	r31, r31
    1d64:	bb 1f       	adc	r27, r27
    1d66:	66 1f       	adc	r22, r22
    1d68:	77 1f       	adc	r23, r23
    1d6a:	88 1f       	adc	r24, r24
    1d6c:	91 50       	subi	r25, 0x01	; 1
    1d6e:	50 40       	sbci	r21, 0x00	; 0
    1d70:	a9 f7       	brne	.-22     	; 0x1d5c <__mulsf3_pse+0x64>
    1d72:	9e 3f       	cpi	r25, 0xFE	; 254
    1d74:	51 05       	cpc	r21, r1
    1d76:	80 f0       	brcs	.+32     	; 0x1d98 <__mulsf3_pse+0xa0>
    1d78:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__fp_inf>
    1d7c:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__fp_szero>
    1d80:	5f 3f       	cpi	r21, 0xFF	; 255
    1d82:	e4 f3       	brlt	.-8      	; 0x1d7c <__mulsf3_pse+0x84>
    1d84:	98 3e       	cpi	r25, 0xE8	; 232
    1d86:	d4 f3       	brlt	.-12     	; 0x1d7c <__mulsf3_pse+0x84>
    1d88:	86 95       	lsr	r24
    1d8a:	77 95       	ror	r23
    1d8c:	67 95       	ror	r22
    1d8e:	b7 95       	ror	r27
    1d90:	f7 95       	ror	r31
    1d92:	e7 95       	ror	r30
    1d94:	9f 5f       	subi	r25, 0xFF	; 255
    1d96:	c1 f7       	brne	.-16     	; 0x1d88 <__mulsf3_pse+0x90>
    1d98:	fe 2b       	or	r31, r30
    1d9a:	88 0f       	add	r24, r24
    1d9c:	91 1d       	adc	r25, r1
    1d9e:	96 95       	lsr	r25
    1da0:	87 95       	ror	r24
    1da2:	97 f9       	bld	r25, 7
    1da4:	08 95       	ret

00001da6 <square>:
    1da6:	9b 01       	movw	r18, r22
    1da8:	ac 01       	movw	r20, r24
    1daa:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <__mulsf3>

00001dae <__divmodhi4>:
    1dae:	97 fb       	bst	r25, 7
    1db0:	07 2e       	mov	r0, r23
    1db2:	16 f4       	brtc	.+4      	; 0x1db8 <__divmodhi4+0xa>
    1db4:	00 94       	com	r0
    1db6:	07 d0       	rcall	.+14     	; 0x1dc6 <__divmodhi4_neg1>
    1db8:	77 fd       	sbrc	r23, 7
    1dba:	09 d0       	rcall	.+18     	; 0x1dce <__divmodhi4_neg2>
    1dbc:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__udivmodhi4>
    1dc0:	07 fc       	sbrc	r0, 7
    1dc2:	05 d0       	rcall	.+10     	; 0x1dce <__divmodhi4_neg2>
    1dc4:	3e f4       	brtc	.+14     	; 0x1dd4 <__divmodhi4_exit>

00001dc6 <__divmodhi4_neg1>:
    1dc6:	90 95       	com	r25
    1dc8:	81 95       	neg	r24
    1dca:	9f 4f       	sbci	r25, 0xFF	; 255
    1dcc:	08 95       	ret

00001dce <__divmodhi4_neg2>:
    1dce:	70 95       	com	r23
    1dd0:	61 95       	neg	r22
    1dd2:	7f 4f       	sbci	r23, 0xFF	; 255

00001dd4 <__divmodhi4_exit>:
    1dd4:	08 95       	ret

00001dd6 <__udivmodhi4>:
    1dd6:	aa 1b       	sub	r26, r26
    1dd8:	bb 1b       	sub	r27, r27
    1dda:	51 e1       	ldi	r21, 0x11	; 17
    1ddc:	07 c0       	rjmp	.+14     	; 0x1dec <__udivmodhi4_ep>

00001dde <__udivmodhi4_loop>:
    1dde:	aa 1f       	adc	r26, r26
    1de0:	bb 1f       	adc	r27, r27
    1de2:	a6 17       	cp	r26, r22
    1de4:	b7 07       	cpc	r27, r23
    1de6:	10 f0       	brcs	.+4      	; 0x1dec <__udivmodhi4_ep>
    1de8:	a6 1b       	sub	r26, r22
    1dea:	b7 0b       	sbc	r27, r23

00001dec <__udivmodhi4_ep>:
    1dec:	88 1f       	adc	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	5a 95       	dec	r21
    1df2:	a9 f7       	brne	.-22     	; 0x1dde <__udivmodhi4_loop>
    1df4:	80 95       	com	r24
    1df6:	90 95       	com	r25
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	08 95       	ret

00001dfe <dtostrf>:
    1dfe:	ef 92       	push	r14
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	e8 01       	movw	r28, r16
    1e0a:	47 fd       	sbrc	r20, 7
    1e0c:	16 c0       	rjmp	.+44     	; 0x1e3a <dtostrf+0x3c>
    1e0e:	34 e0       	ldi	r19, 0x04	; 4
    1e10:	04 2e       	mov	r0, r20
    1e12:	00 0c       	add	r0, r0
    1e14:	55 0b       	sbc	r21, r21
    1e16:	57 ff       	sbrs	r21, 7
    1e18:	03 c0       	rjmp	.+6      	; 0x1e20 <dtostrf+0x22>
    1e1a:	51 95       	neg	r21
    1e1c:	41 95       	neg	r20
    1e1e:	51 09       	sbc	r21, r1
    1e20:	e3 2e       	mov	r14, r19
    1e22:	02 2f       	mov	r16, r18
    1e24:	24 2f       	mov	r18, r20
    1e26:	ae 01       	movw	r20, r28
    1e28:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <dtoa_prf>
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	1f 91       	pop	r17
    1e34:	0f 91       	pop	r16
    1e36:	ef 90       	pop	r14
    1e38:	08 95       	ret
    1e3a:	34 e1       	ldi	r19, 0x14	; 20
    1e3c:	e9 cf       	rjmp	.-46     	; 0x1e10 <dtostrf+0x12>

00001e3e <strcmp>:
    1e3e:	fb 01       	movw	r30, r22
    1e40:	dc 01       	movw	r26, r24
    1e42:	8d 91       	ld	r24, X+
    1e44:	01 90       	ld	r0, Z+
    1e46:	80 19       	sub	r24, r0
    1e48:	01 10       	cpse	r0, r1
    1e4a:	d9 f3       	breq	.-10     	; 0x1e42 <strcmp+0x4>
    1e4c:	99 0b       	sbc	r25, r25
    1e4e:	08 95       	ret

00001e50 <dtoa_prf>:
    1e50:	8f 92       	push	r8
    1e52:	9f 92       	push	r9
    1e54:	af 92       	push	r10
    1e56:	bf 92       	push	r11
    1e58:	cf 92       	push	r12
    1e5a:	df 92       	push	r13
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	29 97       	sbiw	r28, 0x09	; 9
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	6a 01       	movw	r12, r20
    1e7a:	f2 2e       	mov	r15, r18
    1e7c:	b0 2e       	mov	r11, r16
    1e7e:	2b e3       	ldi	r18, 0x3B	; 59
    1e80:	20 17       	cp	r18, r16
    1e82:	08 f4       	brcc	.+2      	; 0x1e86 <dtoa_prf+0x36>
    1e84:	5f c0       	rjmp	.+190    	; 0x1f44 <dtoa_prf+0xf4>
    1e86:	11 e0       	ldi	r17, 0x01	; 1
    1e88:	10 0f       	add	r17, r16
    1e8a:	01 2f       	mov	r16, r17
    1e8c:	27 e0       	ldi	r18, 0x07	; 7
    1e8e:	ae 01       	movw	r20, r28
    1e90:	4f 5f       	subi	r20, 0xFF	; 255
    1e92:	5f 4f       	sbci	r21, 0xFF	; 255
    1e94:	0e 94 a9 10 	call	0x2152	; 0x2152 <__ftoa_engine>
    1e98:	bc 01       	movw	r22, r24
    1e9a:	39 81       	ldd	r19, Y+1	; 0x01
    1e9c:	83 2f       	mov	r24, r19
    1e9e:	89 70       	andi	r24, 0x09	; 9
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <dtoa_prf+0x56>
    1ea4:	51 c0       	rjmp	.+162    	; 0x1f48 <dtoa_prf+0xf8>
    1ea6:	e1 fc       	sbrc	r14, 1
    1ea8:	51 c0       	rjmp	.+162    	; 0x1f4c <dtoa_prf+0xfc>
    1eaa:	9e 2d       	mov	r25, r14
    1eac:	91 70       	andi	r25, 0x01	; 1
    1eae:	e0 fc       	sbrc	r14, 0
    1eb0:	90 e2       	ldi	r25, 0x20	; 32
    1eb2:	ae 2d       	mov	r26, r14
    1eb4:	a0 71       	andi	r26, 0x10	; 16
    1eb6:	83 2f       	mov	r24, r19
    1eb8:	88 70       	andi	r24, 0x08	; 8
    1eba:	33 ff       	sbrs	r19, 3
    1ebc:	5a c0       	rjmp	.+180    	; 0x1f72 <dtoa_prf+0x122>
    1ebe:	91 11       	cpse	r25, r1
    1ec0:	47 c0       	rjmp	.+142    	; 0x1f50 <dtoa_prf+0x100>
    1ec2:	83 e0       	ldi	r24, 0x03	; 3
    1ec4:	8f 15       	cp	r24, r15
    1ec6:	08 f0       	brcs	.+2      	; 0x1eca <dtoa_prf+0x7a>
    1ec8:	45 c0       	rjmp	.+138    	; 0x1f54 <dtoa_prf+0x104>
    1eca:	f8 1a       	sub	r15, r24
    1ecc:	a1 11       	cpse	r26, r1
    1ece:	08 c0       	rjmp	.+16     	; 0x1ee0 <dtoa_prf+0x90>
    1ed0:	f6 01       	movw	r30, r12
    1ed2:	8f 2d       	mov	r24, r15
    1ed4:	20 e2       	ldi	r18, 0x20	; 32
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	3f c0       	rjmp	.+126    	; 0x1f58 <dtoa_prf+0x108>
    1eda:	cf 0c       	add	r12, r15
    1edc:	d1 1c       	adc	r13, r1
    1ede:	f1 2c       	mov	r15, r1
    1ee0:	99 23       	and	r25, r25
    1ee2:	29 f0       	breq	.+10     	; 0x1eee <dtoa_prf+0x9e>
    1ee4:	d6 01       	movw	r26, r12
    1ee6:	9c 93       	st	X, r25
    1ee8:	f6 01       	movw	r30, r12
    1eea:	31 96       	adiw	r30, 0x01	; 1
    1eec:	6f 01       	movw	r12, r30
    1eee:	c6 01       	movw	r24, r12
    1ef0:	03 96       	adiw	r24, 0x03	; 3
    1ef2:	e2 fe       	sbrs	r14, 2
    1ef4:	34 c0       	rjmp	.+104    	; 0x1f5e <dtoa_prf+0x10e>
    1ef6:	2e e4       	ldi	r18, 0x4E	; 78
    1ef8:	d6 01       	movw	r26, r12
    1efa:	2c 93       	st	X, r18
    1efc:	31 e4       	ldi	r19, 0x41	; 65
    1efe:	11 96       	adiw	r26, 0x01	; 1
    1f00:	3c 93       	st	X, r19
    1f02:	11 97       	sbiw	r26, 0x01	; 1
    1f04:	12 96       	adiw	r26, 0x02	; 2
    1f06:	2c 93       	st	X, r18
    1f08:	fc 01       	movw	r30, r24
    1f0a:	2f 2d       	mov	r18, r15
    1f0c:	30 e2       	ldi	r19, 0x20	; 32
    1f0e:	21 11       	cpse	r18, r1
    1f10:	2d c0       	rjmp	.+90     	; 0x1f6c <dtoa_prf+0x11c>
    1f12:	8f 0d       	add	r24, r15
    1f14:	91 1d       	adc	r25, r1
    1f16:	dc 01       	movw	r26, r24
    1f18:	1c 92       	st	X, r1
    1f1a:	8e ef       	ldi	r24, 0xFE	; 254
    1f1c:	9f ef       	ldi	r25, 0xFF	; 255
    1f1e:	29 96       	adiw	r28, 0x09	; 9
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	df 90       	pop	r13
    1f38:	cf 90       	pop	r12
    1f3a:	bf 90       	pop	r11
    1f3c:	af 90       	pop	r10
    1f3e:	9f 90       	pop	r9
    1f40:	8f 90       	pop	r8
    1f42:	08 95       	ret
    1f44:	1c e3       	ldi	r17, 0x3C	; 60
    1f46:	a1 cf       	rjmp	.-190    	; 0x1e8a <dtoa_prf+0x3a>
    1f48:	9d e2       	ldi	r25, 0x2D	; 45
    1f4a:	b3 cf       	rjmp	.-154    	; 0x1eb2 <dtoa_prf+0x62>
    1f4c:	9b e2       	ldi	r25, 0x2B	; 43
    1f4e:	b1 cf       	rjmp	.-158    	; 0x1eb2 <dtoa_prf+0x62>
    1f50:	84 e0       	ldi	r24, 0x04	; 4
    1f52:	b8 cf       	rjmp	.-144    	; 0x1ec4 <dtoa_prf+0x74>
    1f54:	f1 2c       	mov	r15, r1
    1f56:	ba cf       	rjmp	.-140    	; 0x1ecc <dtoa_prf+0x7c>
    1f58:	21 93       	st	Z+, r18
    1f5a:	81 50       	subi	r24, 0x01	; 1
    1f5c:	bc cf       	rjmp	.-136    	; 0x1ed6 <dtoa_prf+0x86>
    1f5e:	2e e6       	ldi	r18, 0x6E	; 110
    1f60:	f6 01       	movw	r30, r12
    1f62:	20 83       	st	Z, r18
    1f64:	31 e6       	ldi	r19, 0x61	; 97
    1f66:	31 83       	std	Z+1, r19	; 0x01
    1f68:	22 83       	std	Z+2, r18	; 0x02
    1f6a:	ce cf       	rjmp	.-100    	; 0x1f08 <dtoa_prf+0xb8>
    1f6c:	31 93       	st	Z+, r19
    1f6e:	21 50       	subi	r18, 0x01	; 1
    1f70:	ce cf       	rjmp	.-100    	; 0x1f0e <dtoa_prf+0xbe>
    1f72:	23 2f       	mov	r18, r19
    1f74:	24 70       	andi	r18, 0x04	; 4
    1f76:	32 ff       	sbrs	r19, 2
    1f78:	41 c0       	rjmp	.+130    	; 0x1ffc <dtoa_prf+0x1ac>
    1f7a:	91 11       	cpse	r25, r1
    1f7c:	2f c0       	rjmp	.+94     	; 0x1fdc <dtoa_prf+0x18c>
    1f7e:	23 e0       	ldi	r18, 0x03	; 3
    1f80:	2f 15       	cp	r18, r15
    1f82:	10 f4       	brcc	.+4      	; 0x1f88 <dtoa_prf+0x138>
    1f84:	8f 2d       	mov	r24, r15
    1f86:	82 1b       	sub	r24, r18
    1f88:	a1 11       	cpse	r26, r1
    1f8a:	08 c0       	rjmp	.+16     	; 0x1f9c <dtoa_prf+0x14c>
    1f8c:	f6 01       	movw	r30, r12
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e2       	ldi	r19, 0x20	; 32
    1f92:	21 11       	cpse	r18, r1
    1f94:	25 c0       	rjmp	.+74     	; 0x1fe0 <dtoa_prf+0x190>
    1f96:	c8 0e       	add	r12, r24
    1f98:	d1 1c       	adc	r13, r1
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	99 23       	and	r25, r25
    1f9e:	31 f0       	breq	.+12     	; 0x1fac <dtoa_prf+0x15c>
    1fa0:	f6 01       	movw	r30, r12
    1fa2:	90 83       	st	Z, r25
    1fa4:	96 01       	movw	r18, r12
    1fa6:	2f 5f       	subi	r18, 0xFF	; 255
    1fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1faa:	69 01       	movw	r12, r18
    1fac:	96 01       	movw	r18, r12
    1fae:	2d 5f       	subi	r18, 0xFD	; 253
    1fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb2:	e2 fe       	sbrs	r14, 2
    1fb4:	18 c0       	rjmp	.+48     	; 0x1fe6 <dtoa_prf+0x196>
    1fb6:	99 e4       	ldi	r25, 0x49	; 73
    1fb8:	d6 01       	movw	r26, r12
    1fba:	9c 93       	st	X, r25
    1fbc:	9e e4       	ldi	r25, 0x4E	; 78
    1fbe:	11 96       	adiw	r26, 0x01	; 1
    1fc0:	9c 93       	st	X, r25
    1fc2:	11 97       	sbiw	r26, 0x01	; 1
    1fc4:	96 e4       	ldi	r25, 0x46	; 70
    1fc6:	12 96       	adiw	r26, 0x02	; 2
    1fc8:	9c 93       	st	X, r25
    1fca:	f9 01       	movw	r30, r18
    1fcc:	98 2f       	mov	r25, r24
    1fce:	40 e2       	ldi	r20, 0x20	; 32
    1fd0:	91 11       	cpse	r25, r1
    1fd2:	11 c0       	rjmp	.+34     	; 0x1ff6 <dtoa_prf+0x1a6>
    1fd4:	28 0f       	add	r18, r24
    1fd6:	31 1d       	adc	r19, r1
    1fd8:	d9 01       	movw	r26, r18
    1fda:	9e cf       	rjmp	.-196    	; 0x1f18 <dtoa_prf+0xc8>
    1fdc:	24 e0       	ldi	r18, 0x04	; 4
    1fde:	d0 cf       	rjmp	.-96     	; 0x1f80 <dtoa_prf+0x130>
    1fe0:	31 93       	st	Z+, r19
    1fe2:	21 50       	subi	r18, 0x01	; 1
    1fe4:	d6 cf       	rjmp	.-84     	; 0x1f92 <dtoa_prf+0x142>
    1fe6:	99 e6       	ldi	r25, 0x69	; 105
    1fe8:	f6 01       	movw	r30, r12
    1fea:	90 83       	st	Z, r25
    1fec:	9e e6       	ldi	r25, 0x6E	; 110
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	96 e6       	ldi	r25, 0x66	; 102
    1ff2:	92 83       	std	Z+2, r25	; 0x02
    1ff4:	ea cf       	rjmp	.-44     	; 0x1fca <dtoa_prf+0x17a>
    1ff6:	41 93       	st	Z+, r20
    1ff8:	91 50       	subi	r25, 0x01	; 1
    1ffa:	ea cf       	rjmp	.-44     	; 0x1fd0 <dtoa_prf+0x180>
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	91 11       	cpse	r25, r1
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <dtoa_prf+0x1b8>
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	50 e0       	ldi	r21, 0x00	; 0
    2008:	16 16       	cp	r1, r22
    200a:	17 06       	cpc	r1, r23
    200c:	0c f0       	brlt	.+2      	; 0x2010 <dtoa_prf+0x1c0>
    200e:	75 c0       	rjmp	.+234    	; 0x20fa <dtoa_prf+0x2aa>
    2010:	fb 01       	movw	r30, r22
    2012:	31 96       	adiw	r30, 0x01	; 1
    2014:	e4 0f       	add	r30, r20
    2016:	f5 1f       	adc	r31, r21
    2018:	bb 20       	and	r11, r11
    201a:	09 f4       	brne	.+2      	; 0x201e <dtoa_prf+0x1ce>
    201c:	71 c0       	rjmp	.+226    	; 0x2100 <dtoa_prf+0x2b0>
    201e:	4b 2d       	mov	r20, r11
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	4f 5f       	subi	r20, 0xFF	; 255
    2024:	5f 4f       	sbci	r21, 0xFF	; 255
    2026:	4e 0f       	add	r20, r30
    2028:	5f 1f       	adc	r21, r31
    202a:	ef 2d       	mov	r30, r15
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	4e 17       	cp	r20, r30
    2030:	5f 07       	cpc	r21, r31
    2032:	14 f4       	brge	.+4      	; 0x2038 <dtoa_prf+0x1e8>
    2034:	2f 2d       	mov	r18, r15
    2036:	24 1b       	sub	r18, r20
    2038:	8e 2d       	mov	r24, r14
    203a:	88 71       	andi	r24, 0x18	; 24
    203c:	41 f4       	brne	.+16     	; 0x204e <dtoa_prf+0x1fe>
    203e:	f6 01       	movw	r30, r12
    2040:	82 2f       	mov	r24, r18
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	81 11       	cpse	r24, r1
    2046:	5f c0       	rjmp	.+190    	; 0x2106 <dtoa_prf+0x2b6>
    2048:	c2 0e       	add	r12, r18
    204a:	d1 1c       	adc	r13, r1
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	99 23       	and	r25, r25
    2050:	29 f0       	breq	.+10     	; 0x205c <dtoa_prf+0x20c>
    2052:	f6 01       	movw	r30, r12
    2054:	90 83       	st	Z, r25
    2056:	c6 01       	movw	r24, r12
    2058:	01 96       	adiw	r24, 0x01	; 1
    205a:	6c 01       	movw	r12, r24
    205c:	a1 11       	cpse	r26, r1
    205e:	08 c0       	rjmp	.+16     	; 0x2070 <dtoa_prf+0x220>
    2060:	f6 01       	movw	r30, r12
    2062:	82 2f       	mov	r24, r18
    2064:	90 e3       	ldi	r25, 0x30	; 48
    2066:	81 11       	cpse	r24, r1
    2068:	51 c0       	rjmp	.+162    	; 0x210c <dtoa_prf+0x2bc>
    206a:	c2 0e       	add	r12, r18
    206c:	d1 1c       	adc	r13, r1
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	01 2f       	mov	r16, r17
    2072:	06 0f       	add	r16, r22
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	a3 2f       	mov	r26, r19
    2078:	a0 71       	andi	r26, 0x10	; 16
    207a:	aa 2e       	mov	r10, r26
    207c:	34 ff       	sbrs	r19, 4
    207e:	03 c0       	rjmp	.+6      	; 0x2086 <dtoa_prf+0x236>
    2080:	91 33       	cpi	r25, 0x31	; 49
    2082:	09 f4       	brne	.+2      	; 0x2086 <dtoa_prf+0x236>
    2084:	01 50       	subi	r16, 0x01	; 1
    2086:	10 16       	cp	r1, r16
    2088:	0c f0       	brlt	.+2      	; 0x208c <dtoa_prf+0x23c>
    208a:	43 c0       	rjmp	.+134    	; 0x2112 <dtoa_prf+0x2c2>
    208c:	09 30       	cpi	r16, 0x09	; 9
    208e:	08 f0       	brcs	.+2      	; 0x2092 <dtoa_prf+0x242>
    2090:	08 e0       	ldi	r16, 0x08	; 8
    2092:	ab 01       	movw	r20, r22
    2094:	77 ff       	sbrs	r23, 7
    2096:	02 c0       	rjmp	.+4      	; 0x209c <dtoa_prf+0x24c>
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	fb 01       	movw	r30, r22
    209e:	31 96       	adiw	r30, 0x01	; 1
    20a0:	e4 1b       	sub	r30, r20
    20a2:	f5 0b       	sbc	r31, r21
    20a4:	a1 e0       	ldi	r26, 0x01	; 1
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	ac 0f       	add	r26, r28
    20aa:	bd 1f       	adc	r27, r29
    20ac:	ea 0f       	add	r30, r26
    20ae:	fb 1f       	adc	r31, r27
    20b0:	3e e2       	ldi	r19, 0x2E	; 46
    20b2:	4b 01       	movw	r8, r22
    20b4:	80 1a       	sub	r8, r16
    20b6:	91 08       	sbc	r9, r1
    20b8:	0b 2d       	mov	r16, r11
    20ba:	10 e0       	ldi	r17, 0x00	; 0
    20bc:	11 95       	neg	r17
    20be:	01 95       	neg	r16
    20c0:	11 09       	sbc	r17, r1
    20c2:	4f 3f       	cpi	r20, 0xFF	; 255
    20c4:	bf ef       	ldi	r27, 0xFF	; 255
    20c6:	5b 07       	cpc	r21, r27
    20c8:	21 f4       	brne	.+8      	; 0x20d2 <dtoa_prf+0x282>
    20ca:	d6 01       	movw	r26, r12
    20cc:	3c 93       	st	X, r19
    20ce:	11 96       	adiw	r26, 0x01	; 1
    20d0:	6d 01       	movw	r12, r26
    20d2:	64 17       	cp	r22, r20
    20d4:	75 07       	cpc	r23, r21
    20d6:	fc f0       	brlt	.+62     	; 0x2116 <dtoa_prf+0x2c6>
    20d8:	84 16       	cp	r8, r20
    20da:	95 06       	cpc	r9, r21
    20dc:	e4 f4       	brge	.+56     	; 0x2116 <dtoa_prf+0x2c6>
    20de:	80 81       	ld	r24, Z
    20e0:	41 50       	subi	r20, 0x01	; 1
    20e2:	51 09       	sbc	r21, r1
    20e4:	31 96       	adiw	r30, 0x01	; 1
    20e6:	d6 01       	movw	r26, r12
    20e8:	11 96       	adiw	r26, 0x01	; 1
    20ea:	7d 01       	movw	r14, r26
    20ec:	40 17       	cp	r20, r16
    20ee:	51 07       	cpc	r21, r17
    20f0:	a4 f0       	brlt	.+40     	; 0x211a <dtoa_prf+0x2ca>
    20f2:	d6 01       	movw	r26, r12
    20f4:	8c 93       	st	X, r24
    20f6:	67 01       	movw	r12, r14
    20f8:	e4 cf       	rjmp	.-56     	; 0x20c2 <dtoa_prf+0x272>
    20fa:	e1 e0       	ldi	r30, 0x01	; 1
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	8a cf       	rjmp	.-236    	; 0x2014 <dtoa_prf+0x1c4>
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	50 e0       	ldi	r21, 0x00	; 0
    2104:	90 cf       	rjmp	.-224    	; 0x2026 <dtoa_prf+0x1d6>
    2106:	41 93       	st	Z+, r20
    2108:	81 50       	subi	r24, 0x01	; 1
    210a:	9c cf       	rjmp	.-200    	; 0x2044 <dtoa_prf+0x1f4>
    210c:	91 93       	st	Z+, r25
    210e:	81 50       	subi	r24, 0x01	; 1
    2110:	aa cf       	rjmp	.-172    	; 0x2066 <dtoa_prf+0x216>
    2112:	01 e0       	ldi	r16, 0x01	; 1
    2114:	be cf       	rjmp	.-132    	; 0x2092 <dtoa_prf+0x242>
    2116:	80 e3       	ldi	r24, 0x30	; 48
    2118:	e3 cf       	rjmp	.-58     	; 0x20e0 <dtoa_prf+0x290>
    211a:	64 17       	cp	r22, r20
    211c:	75 07       	cpc	r23, r21
    211e:	31 f4       	brne	.+12     	; 0x212c <dtoa_prf+0x2dc>
    2120:	96 33       	cpi	r25, 0x36	; 54
    2122:	90 f4       	brcc	.+36     	; 0x2148 <dtoa_prf+0x2f8>
    2124:	95 33       	cpi	r25, 0x35	; 53
    2126:	11 f4       	brne	.+4      	; 0x212c <dtoa_prf+0x2dc>
    2128:	aa 20       	and	r10, r10
    212a:	71 f0       	breq	.+28     	; 0x2148 <dtoa_prf+0x2f8>
    212c:	f6 01       	movw	r30, r12
    212e:	80 83       	st	Z, r24
    2130:	f7 01       	movw	r30, r14
    2132:	82 2f       	mov	r24, r18
    2134:	90 e2       	ldi	r25, 0x20	; 32
    2136:	81 11       	cpse	r24, r1
    2138:	09 c0       	rjmp	.+18     	; 0x214c <dtoa_prf+0x2fc>
    213a:	f7 01       	movw	r30, r14
    213c:	e2 0f       	add	r30, r18
    213e:	f1 1d       	adc	r31, r1
    2140:	10 82       	st	Z, r1
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	eb ce       	rjmp	.-554    	; 0x1f1e <dtoa_prf+0xce>
    2148:	81 e3       	ldi	r24, 0x31	; 49
    214a:	f0 cf       	rjmp	.-32     	; 0x212c <dtoa_prf+0x2dc>
    214c:	91 93       	st	Z+, r25
    214e:	81 50       	subi	r24, 0x01	; 1
    2150:	f2 cf       	rjmp	.-28     	; 0x2136 <dtoa_prf+0x2e6>

00002152 <__ftoa_engine>:
    2152:	28 30       	cpi	r18, 0x08	; 8
    2154:	08 f0       	brcs	.+2      	; 0x2158 <__ftoa_engine+0x6>
    2156:	27 e0       	ldi	r18, 0x07	; 7
    2158:	33 27       	eor	r19, r19
    215a:	da 01       	movw	r26, r20
    215c:	99 0f       	add	r25, r25
    215e:	31 1d       	adc	r19, r1
    2160:	87 fd       	sbrc	r24, 7
    2162:	91 60       	ori	r25, 0x01	; 1
    2164:	00 96       	adiw	r24, 0x00	; 0
    2166:	61 05       	cpc	r22, r1
    2168:	71 05       	cpc	r23, r1
    216a:	39 f4       	brne	.+14     	; 0x217a <__ftoa_engine+0x28>
    216c:	32 60       	ori	r19, 0x02	; 2
    216e:	2e 5f       	subi	r18, 0xFE	; 254
    2170:	3d 93       	st	X+, r19
    2172:	30 e3       	ldi	r19, 0x30	; 48
    2174:	2a 95       	dec	r18
    2176:	e1 f7       	brne	.-8      	; 0x2170 <__ftoa_engine+0x1e>
    2178:	08 95       	ret
    217a:	9f 3f       	cpi	r25, 0xFF	; 255
    217c:	30 f0       	brcs	.+12     	; 0x218a <__ftoa_engine+0x38>
    217e:	80 38       	cpi	r24, 0x80	; 128
    2180:	71 05       	cpc	r23, r1
    2182:	61 05       	cpc	r22, r1
    2184:	09 f0       	breq	.+2      	; 0x2188 <__ftoa_engine+0x36>
    2186:	3c 5f       	subi	r19, 0xFC	; 252
    2188:	3c 5f       	subi	r19, 0xFC	; 252
    218a:	3d 93       	st	X+, r19
    218c:	91 30       	cpi	r25, 0x01	; 1
    218e:	08 f0       	brcs	.+2      	; 0x2192 <__ftoa_engine+0x40>
    2190:	80 68       	ori	r24, 0x80	; 128
    2192:	91 1d       	adc	r25, r1
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	1f 93       	push	r17
    219a:	0f 93       	push	r16
    219c:	ff 92       	push	r15
    219e:	ef 92       	push	r14
    21a0:	19 2f       	mov	r17, r25
    21a2:	98 7f       	andi	r25, 0xF8	; 248
    21a4:	96 95       	lsr	r25
    21a6:	e9 2f       	mov	r30, r25
    21a8:	96 95       	lsr	r25
    21aa:	96 95       	lsr	r25
    21ac:	e9 0f       	add	r30, r25
    21ae:	ff 27       	eor	r31, r31
    21b0:	ec 5e       	subi	r30, 0xEC	; 236
    21b2:	fe 4f       	sbci	r31, 0xFE	; 254
    21b4:	99 27       	eor	r25, r25
    21b6:	33 27       	eor	r19, r19
    21b8:	ee 24       	eor	r14, r14
    21ba:	ff 24       	eor	r15, r15
    21bc:	a7 01       	movw	r20, r14
    21be:	e7 01       	movw	r28, r14
    21c0:	05 90       	lpm	r0, Z+
    21c2:	08 94       	sec
    21c4:	07 94       	ror	r0
    21c6:	28 f4       	brcc	.+10     	; 0x21d2 <__ftoa_engine+0x80>
    21c8:	36 0f       	add	r19, r22
    21ca:	e7 1e       	adc	r14, r23
    21cc:	f8 1e       	adc	r15, r24
    21ce:	49 1f       	adc	r20, r25
    21d0:	51 1d       	adc	r21, r1
    21d2:	66 0f       	add	r22, r22
    21d4:	77 1f       	adc	r23, r23
    21d6:	88 1f       	adc	r24, r24
    21d8:	99 1f       	adc	r25, r25
    21da:	06 94       	lsr	r0
    21dc:	a1 f7       	brne	.-24     	; 0x21c6 <__ftoa_engine+0x74>
    21de:	05 90       	lpm	r0, Z+
    21e0:	07 94       	ror	r0
    21e2:	28 f4       	brcc	.+10     	; 0x21ee <__ftoa_engine+0x9c>
    21e4:	e7 0e       	add	r14, r23
    21e6:	f8 1e       	adc	r15, r24
    21e8:	49 1f       	adc	r20, r25
    21ea:	56 1f       	adc	r21, r22
    21ec:	c1 1d       	adc	r28, r1
    21ee:	77 0f       	add	r23, r23
    21f0:	88 1f       	adc	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	66 1f       	adc	r22, r22
    21f6:	06 94       	lsr	r0
    21f8:	a1 f7       	brne	.-24     	; 0x21e2 <__ftoa_engine+0x90>
    21fa:	05 90       	lpm	r0, Z+
    21fc:	07 94       	ror	r0
    21fe:	28 f4       	brcc	.+10     	; 0x220a <__ftoa_engine+0xb8>
    2200:	f8 0e       	add	r15, r24
    2202:	49 1f       	adc	r20, r25
    2204:	56 1f       	adc	r21, r22
    2206:	c7 1f       	adc	r28, r23
    2208:	d1 1d       	adc	r29, r1
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	66 1f       	adc	r22, r22
    2210:	77 1f       	adc	r23, r23
    2212:	06 94       	lsr	r0
    2214:	a1 f7       	brne	.-24     	; 0x21fe <__ftoa_engine+0xac>
    2216:	05 90       	lpm	r0, Z+
    2218:	07 94       	ror	r0
    221a:	20 f4       	brcc	.+8      	; 0x2224 <__ftoa_engine+0xd2>
    221c:	49 0f       	add	r20, r25
    221e:	56 1f       	adc	r21, r22
    2220:	c7 1f       	adc	r28, r23
    2222:	d8 1f       	adc	r29, r24
    2224:	99 0f       	add	r25, r25
    2226:	66 1f       	adc	r22, r22
    2228:	77 1f       	adc	r23, r23
    222a:	88 1f       	adc	r24, r24
    222c:	06 94       	lsr	r0
    222e:	a9 f7       	brne	.-22     	; 0x221a <__ftoa_engine+0xc8>
    2230:	84 91       	lpm	r24, Z
    2232:	10 95       	com	r17
    2234:	17 70       	andi	r17, 0x07	; 7
    2236:	41 f0       	breq	.+16     	; 0x2248 <__ftoa_engine+0xf6>
    2238:	d6 95       	lsr	r29
    223a:	c7 95       	ror	r28
    223c:	57 95       	ror	r21
    223e:	47 95       	ror	r20
    2240:	f7 94       	ror	r15
    2242:	e7 94       	ror	r14
    2244:	1a 95       	dec	r17
    2246:	c1 f7       	brne	.-16     	; 0x2238 <__ftoa_engine+0xe6>
    2248:	ea eb       	ldi	r30, 0xBA	; 186
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	68 94       	set
    224e:	15 90       	lpm	r1, Z+
    2250:	15 91       	lpm	r17, Z+
    2252:	35 91       	lpm	r19, Z+
    2254:	65 91       	lpm	r22, Z+
    2256:	95 91       	lpm	r25, Z+
    2258:	05 90       	lpm	r0, Z+
    225a:	7f e2       	ldi	r23, 0x2F	; 47
    225c:	73 95       	inc	r23
    225e:	e1 18       	sub	r14, r1
    2260:	f1 0a       	sbc	r15, r17
    2262:	43 0b       	sbc	r20, r19
    2264:	56 0b       	sbc	r21, r22
    2266:	c9 0b       	sbc	r28, r25
    2268:	d0 09       	sbc	r29, r0
    226a:	c0 f7       	brcc	.-16     	; 0x225c <__ftoa_engine+0x10a>
    226c:	e1 0c       	add	r14, r1
    226e:	f1 1e       	adc	r15, r17
    2270:	43 1f       	adc	r20, r19
    2272:	56 1f       	adc	r21, r22
    2274:	c9 1f       	adc	r28, r25
    2276:	d0 1d       	adc	r29, r0
    2278:	7e f4       	brtc	.+30     	; 0x2298 <__ftoa_engine+0x146>
    227a:	70 33       	cpi	r23, 0x30	; 48
    227c:	11 f4       	brne	.+4      	; 0x2282 <__ftoa_engine+0x130>
    227e:	8a 95       	dec	r24
    2280:	e6 cf       	rjmp	.-52     	; 0x224e <__ftoa_engine+0xfc>
    2282:	e8 94       	clt
    2284:	01 50       	subi	r16, 0x01	; 1
    2286:	30 f0       	brcs	.+12     	; 0x2294 <__ftoa_engine+0x142>
    2288:	08 0f       	add	r16, r24
    228a:	0a f4       	brpl	.+2      	; 0x228e <__ftoa_engine+0x13c>
    228c:	00 27       	eor	r16, r16
    228e:	02 17       	cp	r16, r18
    2290:	08 f4       	brcc	.+2      	; 0x2294 <__ftoa_engine+0x142>
    2292:	20 2f       	mov	r18, r16
    2294:	23 95       	inc	r18
    2296:	02 2f       	mov	r16, r18
    2298:	7a 33       	cpi	r23, 0x3A	; 58
    229a:	28 f0       	brcs	.+10     	; 0x22a6 <__ftoa_engine+0x154>
    229c:	79 e3       	ldi	r23, 0x39	; 57
    229e:	7d 93       	st	X+, r23
    22a0:	2a 95       	dec	r18
    22a2:	e9 f7       	brne	.-6      	; 0x229e <__ftoa_engine+0x14c>
    22a4:	10 c0       	rjmp	.+32     	; 0x22c6 <__ftoa_engine+0x174>
    22a6:	7d 93       	st	X+, r23
    22a8:	2a 95       	dec	r18
    22aa:	89 f6       	brne	.-94     	; 0x224e <__ftoa_engine+0xfc>
    22ac:	06 94       	lsr	r0
    22ae:	97 95       	ror	r25
    22b0:	67 95       	ror	r22
    22b2:	37 95       	ror	r19
    22b4:	17 95       	ror	r17
    22b6:	17 94       	ror	r1
    22b8:	e1 18       	sub	r14, r1
    22ba:	f1 0a       	sbc	r15, r17
    22bc:	43 0b       	sbc	r20, r19
    22be:	56 0b       	sbc	r21, r22
    22c0:	c9 0b       	sbc	r28, r25
    22c2:	d0 09       	sbc	r29, r0
    22c4:	98 f0       	brcs	.+38     	; 0x22ec <__ftoa_engine+0x19a>
    22c6:	23 95       	inc	r18
    22c8:	7e 91       	ld	r23, -X
    22ca:	73 95       	inc	r23
    22cc:	7a 33       	cpi	r23, 0x3A	; 58
    22ce:	08 f0       	brcs	.+2      	; 0x22d2 <__ftoa_engine+0x180>
    22d0:	70 e3       	ldi	r23, 0x30	; 48
    22d2:	7c 93       	st	X, r23
    22d4:	20 13       	cpse	r18, r16
    22d6:	b8 f7       	brcc	.-18     	; 0x22c6 <__ftoa_engine+0x174>
    22d8:	7e 91       	ld	r23, -X
    22da:	70 61       	ori	r23, 0x10	; 16
    22dc:	7d 93       	st	X+, r23
    22de:	30 f0       	brcs	.+12     	; 0x22ec <__ftoa_engine+0x19a>
    22e0:	83 95       	inc	r24
    22e2:	71 e3       	ldi	r23, 0x31	; 49
    22e4:	7d 93       	st	X+, r23
    22e6:	70 e3       	ldi	r23, 0x30	; 48
    22e8:	2a 95       	dec	r18
    22ea:	e1 f7       	brne	.-8      	; 0x22e4 <__ftoa_engine+0x192>
    22ec:	11 24       	eor	r1, r1
    22ee:	ef 90       	pop	r14
    22f0:	ff 90       	pop	r15
    22f2:	0f 91       	pop	r16
    22f4:	1f 91       	pop	r17
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	99 27       	eor	r25, r25
    22fc:	87 fd       	sbrc	r24, 7
    22fe:	90 95       	com	r25
    2300:	08 95       	ret

00002302 <_exit>:
    2302:	f8 94       	cli

00002304 <__stop_program>:
    2304:	ff cf       	rjmp	.-2      	; 0x2304 <__stop_program>
