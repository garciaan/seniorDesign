
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000c82  00000d16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800112  00800112  00000d28  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b1  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002f55  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f68  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000020  00000000  00000000  00002fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000ba9  00000000  00000000  00002fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008ab  00000000  00000000  00003b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000124  00000000  00000000  00004418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000164  00000000  00000000  0000453c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000432  00000000  00000000  000046a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000006d1  00000000  00000000  00004ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  000051a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  58:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  5c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  60:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  68:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  6c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  70:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  74:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  7c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  80:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  84:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  88:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  8c:	08 4a       	sbci	r16, 0xA8	; 168
  8e:	d7 3b       	cpi	r29, 0xB7	; 183
  90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
  92:	01 6e       	ori	r16, 0xE1	; 225
  94:	84 bc       	out	0x24, r8	; 36
  96:	bf fd       	.word	0xfdbf	; ????
  98:	c1 2f       	mov	r28, r17
  9a:	3d 6c       	ori	r19, 0xCD	; 205
  9c:	74 31       	cpi	r23, 0x14	; 20
  9e:	9a bd       	out	0x2a, r25	; 42
  a0:	56 83       	std	Z+6, r21	; 0x06
  a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
  a4:	3d 00       	.word	0x003d	; ????
  a6:	c7 7f       	andi	r28, 0xF7	; 247
  a8:	11 be       	out	0x31, r1	; 49
  aa:	d9 e4       	ldi	r29, 0x49	; 73
  ac:	bb 4c       	sbci	r27, 0xCB	; 203
  ae:	3e 91       	ld	r19, -X
  b0:	6b aa       	std	Y+51, r6	; 0x33
  b2:	aa be       	out	0x3a, r10	; 58
  b4:	00 00       	nop
  b6:	00 80       	ld	r0, Z
  b8:	3f 00       	.word	0x003f	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d0 e1       	ldi	r29, 0x10	; 16
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	e2 e8       	ldi	r30, 0x82	; 130
  ce:	fc e0       	ldi	r31, 0x0C	; 12
  d0:	00 e0       	ldi	r16, 0x00	; 0
  d2:	0b bf       	out	0x3b, r16	; 59
  d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x14>
  d6:	07 90       	elpm	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	a2 31       	cpi	r26, 0x12	; 18
  dc:	b1 07       	cpc	r27, r17
  de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0x10>

000000e0 <__do_clear_bss>:
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	a2 e1       	ldi	r26, 0x12	; 18
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
  e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
  ea:	ac 32       	cpi	r26, 0x2C	; 44
  ec:	b2 07       	cpc	r27, r18
  ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
  f0:	0e 94 49 03 	call	0x692	; 0x692 <main>
  f4:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <_exit>

000000f8 <__bad_interrupt>:
  f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <init_HMC5883L>:

	return 0;
}
void init_HMC5883L(void){
    
    i2c_start(HMC5883L_WRITE);
  fc:	8e e1       	ldi	r24, 0x1E	; 30
  fe:	0e 94 39 02 	call	0x472	; 0x472 <i2c_start>
    i2c_write(0x00); // set pointer to CRA
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <i2c_write>
    i2c_write(0x70); // write 0x70 to CRA
 108:	80 e7       	ldi	r24, 0x70	; 112
 10a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <i2c_write>
    i2c_stop();
 10e:	0e 94 45 03 	call	0x68a	; 0x68a <i2c_stop>

    i2c_start(HMC5883L_WRITE);
 112:	8e e1       	ldi	r24, 0x1E	; 30
 114:	0e 94 39 02 	call	0x472	; 0x472 <i2c_start>
    i2c_write(0x01); // set pointer to CRB
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <i2c_write>
    i2c_write(0xA0);
 11e:	80 ea       	ldi	r24, 0xA0	; 160
 120:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <i2c_write>
    i2c_stop();
 124:	0e 94 45 03 	call	0x68a	; 0x68a <i2c_stop>
    
    i2c_start(HMC5883L_WRITE);
 128:	8e e1       	ldi	r24, 0x1E	; 30
 12a:	0e 94 39 02 	call	0x472	; 0x472 <i2c_start>
    i2c_write(0x02); // set pointer to measurement mode
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <i2c_write>
    i2c_write(0x00); // continous measurement
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <i2c_write>
    i2c_stop();
 13a:	0c 94 45 03 	jmp	0x68a	; 0x68a <i2c_stop>

0000013e <getHeading>:
}
float getHeading(void){
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15

    i2c_start(HMC5883L_WRITE);
 146:	8e e1       	ldi	r24, 0x1E	; 30
 148:	0e 94 39 02 	call	0x472	; 0x472 <i2c_start>
    i2c_write(0x03); // set pointer to X axis MSB
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <i2c_write>
    i2c_stop();
 152:	0e 94 45 03 	call	0x68a	; 0x68a <i2c_stop>

    i2c_start(HMC5883L_READ);
 156:	8e e1       	ldi	r24, 0x1E	; 30
 158:	0e 94 39 02 	call	0x472	; 0x472 <i2c_start>

    raw_x = ((uint8_t)i2c_read_ack())<<8;
 15c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_read_ack>
 160:	10 92 1a 01 	sts	0x011A, r1
 164:	80 93 1b 01 	sts	0x011B, r24
    raw_x |= i2c_read_ack();
 168:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_read_ack>
 16c:	20 91 1a 01 	lds	r18, 0x011A
 170:	30 91 1b 01 	lds	r19, 0x011B
 174:	28 2b       	or	r18, r24
 176:	30 93 1b 01 	sts	0x011B, r19
 17a:	20 93 1a 01 	sts	0x011A, r18

    raw_z = ((uint8_t)i2c_read_ack())<<8;
 17e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_read_ack>
 182:	10 92 16 01 	sts	0x0116, r1
 186:	80 93 17 01 	sts	0x0117, r24
    raw_z |= i2c_read_ack();
 18a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_read_ack>
 18e:	20 91 16 01 	lds	r18, 0x0116
 192:	30 91 17 01 	lds	r19, 0x0117
 196:	28 2b       	or	r18, r24
 198:	30 93 17 01 	sts	0x0117, r19
 19c:	20 93 16 01 	sts	0x0116, r18

    raw_y = ((uint8_t)i2c_read_ack())<<8;
 1a0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_read_ack>
 1a4:	10 92 18 01 	sts	0x0118, r1
 1a8:	80 93 19 01 	sts	0x0119, r24
    raw_y |= i2c_read_nack();
 1ac:	0e 94 76 02 	call	0x4ec	; 0x4ec <i2c_read_nack>
 1b0:	20 91 18 01 	lds	r18, 0x0118
 1b4:	30 91 19 01 	lds	r19, 0x0119
 1b8:	28 2b       	or	r18, r24
 1ba:	30 93 19 01 	sts	0x0119, r19
 1be:	20 93 18 01 	sts	0x0118, r18

    i2c_stop();
 1c2:	0e 94 45 03 	call	0x68a	; 0x68a <i2c_stop>

    headingDegrees = atan2((double)raw_y,(double)raw_x) * 180 / 3.141592654 + 180;
 1c6:	60 91 1a 01 	lds	r22, 0x011A
 1ca:	70 91 1b 01 	lds	r23, 0x011B
 1ce:	07 2e       	mov	r0, r23
 1d0:	00 0c       	add	r0, r0
 1d2:	88 0b       	sbc	r24, r24
 1d4:	99 0b       	sbc	r25, r25
 1d6:	0e 94 de 04 	call	0x9bc	; 0x9bc <__floatsisf>
 1da:	6b 01       	movw	r12, r22
 1dc:	7c 01       	movw	r14, r24
 1de:	60 91 18 01 	lds	r22, 0x0118
 1e2:	70 91 19 01 	lds	r23, 0x0119
 1e6:	07 2e       	mov	r0, r23
 1e8:	00 0c       	add	r0, r0
 1ea:	88 0b       	sbc	r24, r24
 1ec:	99 0b       	sbc	r25, r25
 1ee:	0e 94 de 04 	call	0x9bc	; 0x9bc <__floatsisf>
 1f2:	a7 01       	movw	r20, r14
 1f4:	96 01       	movw	r18, r12
 1f6:	0e 94 0b 04 	call	0x816	; 0x816 <atan2>
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	44 e3       	ldi	r20, 0x34	; 52
 200:	53 e4       	ldi	r21, 0x43	; 67
 202:	0e 94 99 05 	call	0xb32	; 0xb32 <__mulsf3>
 206:	2b ed       	ldi	r18, 0xDB	; 219
 208:	3f e0       	ldi	r19, 0x0F	; 15
 20a:	49 e4       	ldi	r20, 0x49	; 73
 20c:	50 e4       	ldi	r21, 0x40	; 64
 20e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3>
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	44 e3       	ldi	r20, 0x34	; 52
 218:	53 e4       	ldi	r21, 0x43	; 67
 21a:	0e 94 8c 03 	call	0x718	; 0x718 <__addsf3>
 21e:	60 93 12 01 	sts	0x0112, r22
 222:	70 93 13 01 	sts	0x0113, r23
 226:	80 93 14 01 	sts	0x0114, r24
 22a:	90 93 15 01 	sts	0x0115, r25

    return headingDegrees;
}
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	df 90       	pop	r13
 234:	cf 90       	pop	r12
 236:	08 95       	ret

00000238 <strobe_lcd>:


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 238:	e2 e6       	ldi	r30, 0x62	; 98
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	88 60       	ori	r24, 0x08	; 8
 240:	80 83       	st	Z, r24
    PORTF &= ~0x08;
 242:	80 81       	ld	r24, Z
 244:	87 7f       	andi	r24, 0xF7	; 247
 246:	80 83       	st	Z, r24
 248:	08 95       	ret

0000024a <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 24a:	77 9b       	sbis	0x0e, 7	; 14
 24c:	fe cf       	rjmp	.-4      	; 0x24a <clear_display>
    SPDR = 0x00;    //command, not data
 24e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 250:	77 9b       	sbis	0x0e, 7	; 14
 252:	fe cf       	rjmp	.-4      	; 0x250 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 258:	77 9b       	sbis	0x0e, 7	; 14
 25a:	fe cf       	rjmp	.-4      	; 0x258 <clear_display+0xe>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 25c:	80 91 62 00 	lds	r24, 0x0062
 260:	88 60       	ori	r24, 0x08	; 8
 262:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 266:	80 91 62 00 	lds	r24, 0x0062
 26a:	87 7f       	andi	r24, 0xF7	; 247
 26c:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	8f e9       	ldi	r24, 0x9F	; 159
 272:	98 e2       	ldi	r25, 0x28	; 40
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <clear_display+0x2a>
 278:	00 c0       	rjmp	.+0      	; 0x27a <clear_display+0x30>
 27a:	00 00       	nop
 27c:	08 95       	ret

0000027e <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 27e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 280:	77 9b       	sbis	0x0e, 7	; 14
 282:	fe cf       	rjmp	.-4      	; 0x280 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
 284:	80 ec       	ldi	r24, 0xC0	; 192
 286:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 288:	77 9b       	sbis	0x0e, 7	; 14
 28a:	fe cf       	rjmp	.-4      	; 0x288 <home_line2+0xa>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 28c:	80 91 62 00 	lds	r24, 0x0062
 290:	88 60       	ori	r24, 0x08	; 8
 292:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 296:	80 91 62 00 	lds	r24, 0x0062
 29a:	87 7f       	andi	r24, 0xF7	; 247
 29c:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	85 ec       	ldi	r24, 0xC5	; 197
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <home_line2+0x24>
 2a6:	00 00       	nop
 2a8:	08 95       	ret

000002aa <char2lcd>:

//sends a char to the LCD
void char2lcd(char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2ae:	77 9b       	sbis	0x0e, 7	; 14
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
 2b2:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2b4:	77 9b       	sbis	0x0e, 7	; 14
 2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <char2lcd+0xa>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 2b8:	80 91 62 00 	lds	r24, 0x0062
 2bc:	88 60       	ori	r24, 0x08	; 8
 2be:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 2c2:	80 91 62 00 	lds	r24, 0x0062
 2c6:	87 7f       	andi	r24, 0xF7	; 247
 2c8:	80 93 62 00 	sts	0x0062, r24
 2cc:	85 ec       	ldi	r24, 0xC5	; 197
 2ce:	8a 95       	dec	r24
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <char2lcd+0x24>
 2d2:	00 00       	nop
 2d4:	08 95       	ret

000002d6 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	fc 01       	movw	r30, r24
 2dc:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
 2e2:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2e4:	77 9b       	sbis	0x0e, 7	; 14
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
 2e8:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2ea:	77 9b       	sbis	0x0e, 7	; 14
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <string2lcd+0x14>
        SPDR = lcd_str[count]; 
 2ee:	8d 91       	ld	r24, X+
 2f0:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2f2:	77 9b       	sbis	0x0e, 7	; 14
 2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <string2lcd+0x1c>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 2f6:	90 91 62 00 	lds	r25, 0x0062
 2fa:	98 60       	ori	r25, 0x08	; 8
 2fc:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
 300:	90 91 62 00 	lds	r25, 0x0062
 304:	97 7f       	andi	r25, 0xF7	; 247
 306:	90 93 62 00 	sts	0x0062, r25
 30a:	85 ec       	ldi	r24, 0xC5	; 197
 30c:	8a 95       	dec	r24
 30e:	f1 f7       	brne	.-4      	; 0x30c <string2lcd+0x36>
 310:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
 312:	4f 5f       	subi	r20, 0xFF	; 255
 314:	5f 4f       	sbci	r21, 0xFF	; 255
 316:	ef 01       	movw	r28, r30
 318:	09 90       	ld	r0, Y+
 31a:	00 20       	and	r0, r0
 31c:	e9 f7       	brne	.-6      	; 0x318 <string2lcd+0x42>
 31e:	9e 01       	movw	r18, r28
 320:	2e 1b       	sub	r18, r30
 322:	3f 0b       	sbc	r19, r31
 324:	22 50       	subi	r18, 0x02	; 2
 326:	31 09       	sbc	r19, r1
 328:	24 17       	cp	r18, r20
 32a:	35 07       	cpc	r19, r21
 32c:	d8 f6       	brcc	.-74     	; 0x2e4 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 334:	e1 e6       	ldi	r30, 0x61	; 97
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	88 60       	ori	r24, 0x08	; 8
 33c:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
 33e:	88 b3       	in	r24, 0x18	; 24
 340:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 342:	87 b3       	in	r24, 0x17	; 23
 344:	87 60       	ori	r24, 0x07	; 7
 346:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 348:	80 e5       	ldi	r24, 0x50	; 80
 34a:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	8e b9       	out	0x0e, r24	; 14
 350:	08 95       	ret

00000352 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 352:	8f e5       	ldi	r24, 0x5F	; 95
 354:	9a ee       	ldi	r25, 0xEA	; 234
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <lcd_init+0x4>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <lcd_init+0xa>
 35c:	00 00       	nop
 35e:	23 e0       	ldi	r18, 0x03	; 3
 360:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
 362:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
 364:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 366:	77 9b       	sbis	0x0e, 7	; 14
 368:	fe cf       	rjmp	.-4      	; 0x366 <lcd_init+0x14>
        SPDR = 0x30;
 36a:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 36c:	77 9b       	sbis	0x0e, 7	; 14
 36e:	fe cf       	rjmp	.-4      	; 0x36c <lcd_init+0x1a>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 370:	80 91 62 00 	lds	r24, 0x0062
 374:	88 60       	ori	r24, 0x08	; 8
 376:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 37a:	80 91 62 00 	lds	r24, 0x0062
 37e:	87 7f       	andi	r24, 0xF7	; 247
 380:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 384:	85 ec       	ldi	r24, 0xC5	; 197
 386:	8a 95       	dec	r24
 388:	f1 f7       	brne	.-4      	; 0x386 <lcd_init+0x34>
 38a:	00 00       	nop
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
 390:	49 f7       	brne	.-46     	; 0x364 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
 392:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 394:	77 9b       	sbis	0x0e, 7	; 14
 396:	fe cf       	rjmp	.-4      	; 0x394 <lcd_init+0x42>
    SPDR = 0x38;
 398:	88 e3       	ldi	r24, 0x38	; 56
 39a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 39c:	77 9b       	sbis	0x0e, 7	; 14
 39e:	fe cf       	rjmp	.-4      	; 0x39c <lcd_init+0x4a>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 3a0:	80 91 62 00 	lds	r24, 0x0062
 3a4:	88 60       	ori	r24, 0x08	; 8
 3a6:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 3aa:	80 91 62 00 	lds	r24, 0x0062
 3ae:	87 7f       	andi	r24, 0xF7	; 247
 3b0:	80 93 62 00 	sts	0x0062, r24
 3b4:	95 ec       	ldi	r25, 0xC5	; 197
 3b6:	9a 95       	dec	r25
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <lcd_init+0x64>
 3ba:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 3bc:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3be:	77 9b       	sbis	0x0e, 7	; 14
 3c0:	fe cf       	rjmp	.-4      	; 0x3be <lcd_init+0x6c>
    SPDR = 0x08;
 3c2:	88 e0       	ldi	r24, 0x08	; 8
 3c4:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3c6:	77 9b       	sbis	0x0e, 7	; 14
 3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <lcd_init+0x74>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 3ca:	80 91 62 00 	lds	r24, 0x0062
 3ce:	88 60       	ori	r24, 0x08	; 8
 3d0:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 3d4:	80 91 62 00 	lds	r24, 0x0062
 3d8:	87 7f       	andi	r24, 0xF7	; 247
 3da:	80 93 62 00 	sts	0x0062, r24
 3de:	85 ec       	ldi	r24, 0xC5	; 197
 3e0:	8a 95       	dec	r24
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <lcd_init+0x8e>
 3e4:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 3e6:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3e8:	77 9b       	sbis	0x0e, 7	; 14
 3ea:	fe cf       	rjmp	.-4      	; 0x3e8 <lcd_init+0x96>
    SPDR = 0x01;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3f0:	77 9b       	sbis	0x0e, 7	; 14
 3f2:	fe cf       	rjmp	.-4      	; 0x3f0 <lcd_init+0x9e>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 3f4:	80 91 62 00 	lds	r24, 0x0062
 3f8:	88 60       	ori	r24, 0x08	; 8
 3fa:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 3fe:	80 91 62 00 	lds	r24, 0x0062
 402:	87 7f       	andi	r24, 0xF7	; 247
 404:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 408:	8f ef       	ldi	r24, 0xFF	; 255
 40a:	98 e1       	ldi	r25, 0x18	; 24
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_init+0xba>
 410:	00 c0       	rjmp	.+0      	; 0x412 <lcd_init+0xc0>
 412:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
 414:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 416:	77 9b       	sbis	0x0e, 7	; 14
 418:	fe cf       	rjmp	.-4      	; 0x416 <lcd_init+0xc4>
    SPDR = 0x06;
 41a:	86 e0       	ldi	r24, 0x06	; 6
 41c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 41e:	77 9b       	sbis	0x0e, 7	; 14
 420:	fe cf       	rjmp	.-4      	; 0x41e <lcd_init+0xcc>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 422:	80 91 62 00 	lds	r24, 0x0062
 426:	88 60       	ori	r24, 0x08	; 8
 428:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 42c:	80 91 62 00 	lds	r24, 0x0062
 430:	87 7f       	andi	r24, 0xF7	; 247
 432:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 436:	95 ec       	ldi	r25, 0xC5	; 197
 438:	9a 95       	dec	r25
 43a:	f1 f7       	brne	.-4      	; 0x438 <lcd_init+0xe6>
 43c:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 43e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 440:	77 9b       	sbis	0x0e, 7	; 14
 442:	fe cf       	rjmp	.-4      	; 0x440 <lcd_init+0xee>
    SPDR = 0x0E;
 444:	8e e0       	ldi	r24, 0x0E	; 14
 446:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 448:	77 9b       	sbis	0x0e, 7	; 14
 44a:	fe cf       	rjmp	.-4      	; 0x448 <lcd_init+0xf6>
}


//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 44c:	80 91 62 00 	lds	r24, 0x0062
 450:	88 60       	ori	r24, 0x08	; 8
 452:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 456:	80 91 62 00 	lds	r24, 0x0062
 45a:	87 7f       	andi	r24, 0xF7	; 247
 45c:	80 93 62 00 	sts	0x0062, r24
 460:	85 ec       	ldi	r24, 0xC5	; 197
 462:	8a 95       	dec	r24
 464:	f1 f7       	brne	.-4      	; 0x462 <lcd_init+0x110>
 466:	00 00       	nop
 468:	08 95       	ret

0000046a <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 46a:	88 e4       	ldi	r24, 0x48	; 72
 46c:	80 93 b8 00 	sts	0x00B8, r24
 470:	08 95       	ret

00000472 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
 472:	10 92 bc 00 	sts	0x00BC, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 476:	94 ea       	ldi	r25, 0xA4	; 164
 478:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 47c:	90 91 bc 00 	lds	r25, 0x00BC
 480:	97 ff       	sbrs	r25, 7
 482:	fc cf       	rjmp	.-8      	; 0x47c <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 484:	90 91 b9 00 	lds	r25, 0x00B9
 488:	98 7f       	andi	r25, 0xF8	; 248
 48a:	98 30       	cpi	r25, 0x08	; 8
 48c:	11 f0       	breq	.+4      	; 0x492 <i2c_start+0x20>
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
 492:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 496:	84 e8       	ldi	r24, 0x84	; 132
 498:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 49c:	80 91 bc 00 	lds	r24, 0x00BC
 4a0:	87 ff       	sbrs	r24, 7
 4a2:	fc cf       	rjmp	.-8      	; 0x49c <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
 4a4:	80 91 b9 00 	lds	r24, 0x00B9
 4a8:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 4aa:	88 31       	cpi	r24, 0x18	; 24
 4ac:	11 f0       	breq	.+4      	; 0x4b2 <i2c_start+0x40>
 4ae:	80 34       	cpi	r24, 0x40	; 64
 4b0:	71 f7       	brne	.-36     	; 0x48e <i2c_start+0x1c>
	
	return 0;
 4b2:	80 e0       	ldi	r24, 0x00	; 0
}
 4b4:	08 95       	ret

000004b6 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
 4b6:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 4ba:	84 e8       	ldi	r24, 0x84	; 132
 4bc:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 4c0:	80 91 bc 00 	lds	r24, 0x00BC
 4c4:	87 ff       	sbrs	r24, 7
 4c6:	fc cf       	rjmp	.-8      	; 0x4c0 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 4c8:	90 91 b9 00 	lds	r25, 0x00B9
 4cc:	98 7f       	andi	r25, 0xF8	; 248
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	98 32       	cpi	r25, 0x28	; 40
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <i2c_write+0x20>
 4d4:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 4d6:	08 95       	ret

000004d8 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 4d8:	84 ec       	ldi	r24, 0xC4	; 196
 4da:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 4de:	80 91 bc 00 	lds	r24, 0x00BC
 4e2:	87 ff       	sbrs	r24, 7
 4e4:	fc cf       	rjmp	.-8      	; 0x4de <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
 4e6:	80 91 bb 00 	lds	r24, 0x00BB
}
 4ea:	08 95       	ret

000004ec <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 4ec:	84 e8       	ldi	r24, 0x84	; 132
 4ee:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 4f2:	80 91 bc 00 	lds	r24, 0x00BC
 4f6:	87 ff       	sbrs	r24, 7
 4f8:	fc cf       	rjmp	.-8      	; 0x4f2 <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
 4fa:	80 91 bb 00 	lds	r24, 0x00BB
}
 4fe:	08 95       	ret

00000500 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
 500:	df 92       	push	r13
 502:	ef 92       	push	r14
 504:	ff 92       	push	r15
 506:	0f 93       	push	r16
 508:	1f 93       	push	r17
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	d6 2e       	mov	r13, r22
 510:	07 2f       	mov	r16, r23
 512:	7a 01       	movw	r14, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
 514:	0e 94 39 02 	call	0x472	; 0x472 <i2c_start>
 518:	18 2f       	mov	r17, r24
 51a:	81 11       	cpse	r24, r1
 51c:	10 c0       	rjmp	.+32     	; 0x53e <i2c_transmit+0x3e>
 51e:	cd 2d       	mov	r28, r13
 520:	d0 2f       	mov	r29, r16
 522:	ec 0e       	add	r14, r28
 524:	fd 1e       	adc	r15, r29
	
	for (uint16_t i = 0; i < length; i++)
 526:	ce 15       	cp	r28, r14
 528:	df 05       	cpc	r29, r15
 52a:	21 f4       	brne	.+8      	; 0x534 <i2c_transmit+0x34>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 52c:	84 e9       	ldi	r24, 0x94	; 148
 52e:	80 93 bc 00 	sts	0x00BC, r24
		if (i2c_write(data[i])) return 1;
	}
	
	i2c_stop();
	
	return 0;
 532:	06 c0       	rjmp	.+12     	; 0x540 <i2c_transmit+0x40>
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 534:	89 91       	ld	r24, Y+
 536:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <i2c_write>
 53a:	88 23       	and	r24, r24
 53c:	a1 f3       	breq	.-24     	; 0x526 <i2c_transmit+0x26>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
 53e:	11 e0       	ldi	r17, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
 540:	81 2f       	mov	r24, r17
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	08 95       	ret

00000552 <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
 552:	cf 92       	push	r12
 554:	df 92       	push	r13
 556:	ff 92       	push	r15
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	eb 01       	movw	r28, r22
 562:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_READ)) return 1;
 564:	81 60       	ori	r24, 0x01	; 1
 566:	0e 94 39 02 	call	0x472	; 0x472 <i2c_start>
 56a:	f8 2e       	mov	r15, r24
 56c:	81 11       	cpse	r24, r1
 56e:	20 c0       	rjmp	.+64     	; 0x5b0 <i2c_receive+0x5e>
 570:	6e 01       	movw	r12, r28
	
	for (uint16_t i = 0; i < (length-1); i++)
 572:	01 50       	subi	r16, 0x01	; 1
 574:	11 09       	sbc	r17, r1
 576:	c6 01       	movw	r24, r12
 578:	8c 1b       	sub	r24, r28
 57a:	9d 0b       	sbc	r25, r29
 57c:	80 17       	cp	r24, r16
 57e:	91 07       	cpc	r25, r17
 580:	88 f0       	brcs	.+34     	; 0x5a4 <i2c_receive+0x52>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 582:	c0 0f       	add	r28, r16
 584:	d1 1f       	adc	r29, r17
 586:	0e 94 76 02 	call	0x4ec	; 0x4ec <i2c_read_nack>
 58a:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 58c:	84 e9       	ldi	r24, 0x94	; 148
 58e:	80 93 bc 00 	sts	0x00BC, r24
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
 592:	8f 2d       	mov	r24, r15
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	ff 90       	pop	r15
 59e:	df 90       	pop	r13
 5a0:	cf 90       	pop	r12
 5a2:	08 95       	ret
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 5a4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_read_ack>
 5a8:	f6 01       	movw	r30, r12
 5aa:	81 93       	st	Z+, r24
 5ac:	6f 01       	movw	r12, r30
 5ae:	e3 cf       	rjmp	.-58     	; 0x576 <i2c_receive+0x24>
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
 5b0:	ff 24       	eor	r15, r15
 5b2:	f3 94       	inc	r15
 5b4:	ee cf       	rjmp	.-36     	; 0x592 <i2c_receive+0x40>

000005b6 <i2c_writeReg>:
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 5b6:	df 92       	push	r13
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	c6 2f       	mov	r28, r22
 5c6:	d4 2e       	mov	r13, r20
 5c8:	05 2f       	mov	r16, r21
 5ca:	79 01       	movw	r14, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 5cc:	0e 94 39 02 	call	0x472	; 0x472 <i2c_start>
 5d0:	18 2f       	mov	r17, r24
 5d2:	88 23       	and	r24, r24
 5d4:	51 f0       	breq	.+20     	; 0x5ea <i2c_writeReg+0x34>
 5d6:	11 e0       	ldi	r17, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
 5d8:	81 2f       	mov	r24, r17
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	ff 90       	pop	r15
 5e4:	ef 90       	pop	r14
 5e6:	df 90       	pop	r13
 5e8:	08 95       	ret

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);
 5ea:	8c 2f       	mov	r24, r28
 5ec:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <i2c_write>
 5f0:	cd 2d       	mov	r28, r13
 5f2:	d0 2f       	mov	r29, r16
 5f4:	ec 0e       	add	r14, r28
 5f6:	fd 1e       	adc	r15, r29

	for (uint16_t i = 0; i < length; i++)
 5f8:	ce 15       	cp	r28, r14
 5fa:	df 05       	cpc	r29, r15
 5fc:	21 f4       	brne	.+8      	; 0x606 <i2c_writeReg+0x50>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 5fe:	84 e9       	ldi	r24, 0x94	; 148
 600:	80 93 bc 00 	sts	0x00BC, r24
		if (i2c_write(data[i])) return 1;
	}

	i2c_stop();

	return 0;
 604:	e9 cf       	rjmp	.-46     	; 0x5d8 <i2c_writeReg+0x22>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 606:	89 91       	ld	r24, Y+
 608:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <i2c_write>
 60c:	88 23       	and	r24, r24
 60e:	a1 f3       	breq	.-24     	; 0x5f8 <i2c_writeReg+0x42>
 610:	e2 cf       	rjmp	.-60     	; 0x5d6 <i2c_writeReg+0x20>

00000612 <i2c_readReg>:

	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 612:	cf 92       	push	r12
 614:	df 92       	push	r13
 616:	ff 92       	push	r15
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	f8 2e       	mov	r15, r24
 622:	d6 2e       	mov	r13, r22
 624:	ea 01       	movw	r28, r20
 626:	89 01       	movw	r16, r18
	if (i2c_start(devaddr)) return 1;
 628:	0e 94 39 02 	call	0x472	; 0x472 <i2c_start>
 62c:	88 23       	and	r24, r24
 62e:	59 f0       	breq	.+22     	; 0x646 <i2c_readReg+0x34>
 630:	ff 24       	eor	r15, r15
 632:	f3 94       	inc	r15
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 634:	8f 2d       	mov	r24, r15
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	1f 91       	pop	r17
 63c:	0f 91       	pop	r16
 63e:	ff 90       	pop	r15
 640:	df 90       	pop	r13
 642:	cf 90       	pop	r12
 644:	08 95       	ret

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);
 646:	8d 2d       	mov	r24, r13
 648:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 64c:	8f 2d       	mov	r24, r15
 64e:	81 60       	ori	r24, 0x01	; 1
 650:	0e 94 39 02 	call	0x472	; 0x472 <i2c_start>
 654:	f8 2e       	mov	r15, r24
 656:	81 11       	cpse	r24, r1
 658:	eb cf       	rjmp	.-42     	; 0x630 <i2c_readReg+0x1e>
 65a:	6e 01       	movw	r12, r28

	for (uint16_t i = 0; i < (length-1); i++)
 65c:	01 50       	subi	r16, 0x01	; 1
 65e:	11 09       	sbc	r17, r1
 660:	c6 01       	movw	r24, r12
 662:	8c 1b       	sub	r24, r28
 664:	9d 0b       	sbc	r25, r29
 666:	80 17       	cp	r24, r16
 668:	91 07       	cpc	r25, r17
 66a:	48 f0       	brcs	.+18     	; 0x67e <i2c_readReg+0x6c>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 66c:	c0 0f       	add	r28, r16
 66e:	d1 1f       	adc	r29, r17
 670:	0e 94 76 02 	call	0x4ec	; 0x4ec <i2c_read_nack>
 674:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 676:	84 e9       	ldi	r24, 0x94	; 148
 678:	80 93 bc 00 	sts	0x00BC, r24
	}
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
 67c:	db cf       	rjmp	.-74     	; 0x634 <i2c_readReg+0x22>

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 67e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_read_ack>
 682:	f6 01       	movw	r30, r12
 684:	81 93       	st	Z+, r24
 686:	6f 01       	movw	r12, r30
 688:	eb cf       	rjmp	.-42     	; 0x660 <i2c_readReg+0x4e>

0000068a <i2c_stop>:
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 68a:	84 e9       	ldi	r24, 0x94	; 148
 68c:	80 93 bc 00 	sts	0x00BC, r24
 690:	08 95       	ret

00000692 <main>:
void init_HMC5883L(void);
float getHeading(void);


int main(void){
	DDRB = 0xFF;
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
 696:	18 ba       	out	0x18, r1	; 24
    DDRD = 0x00;
 698:	11 ba       	out	0x11, r1	; 17
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 69a:	80 91 61 00 	lds	r24, 0x0061
 69e:	88 60       	ori	r24, 0x08	; 8
 6a0:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initalization for SPI
 6a4:	88 b3       	in	r24, 0x18	; 24
 6a6:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 6a8:	87 b3       	in	r24, 0x17	; 23
 6aa:	87 60       	ori	r24, 0x07	; 7
 6ac:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 6ae:	80 e5       	ldi	r24, 0x50	; 80
 6b0:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	8e b9       	out	0x0e, r24	; 14
	DDRB = 0xFF;
    PORTB = 0x00;
    DDRD = 0x00;

    spi_init();
    lcd_init();
 6b6:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_init>

	i2c_init();
 6ba:	0e 94 35 02 	call	0x46a	; 0x46a <i2c_init>
    init_HMC5883L();
 6be:	0e 94 7e 00 	call	0xfc	; 0xfc <init_HMC5883L>


    clear_display();
 6c2:	0e 94 25 01 	call	0x24a	; 0x24a <clear_display>
    string2lcd("Starting Program");
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <string2lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ce:	2f ef       	ldi	r18, 0xFF	; 255
 6d0:	89 e6       	ldi	r24, 0x69	; 105
 6d2:	98 e1       	ldi	r25, 0x18	; 24
 6d4:	21 50       	subi	r18, 0x01	; 1
 6d6:	80 40       	sbci	r24, 0x00	; 0
 6d8:	90 40       	sbci	r25, 0x00	; 0
 6da:	e1 f7       	brne	.-8      	; 0x6d4 <main+0x42>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <main+0x4c>
 6de:	00 00       	nop


    _delay_ms(500);
    while(1){
        clear_display();
 6e0:	0e 94 25 01 	call	0x24a	; 0x24a <clear_display>
        getHeading();
 6e4:	0e 94 9f 00 	call	0x13e	; 0x13e <getHeading>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 6e8:	4a e0       	ldi	r20, 0x0A	; 10
 6ea:	6c e1       	ldi	r22, 0x1C	; 28
 6ec:	71 e0       	ldi	r23, 0x01	; 1
 6ee:	80 91 18 01 	lds	r24, 0x0118
 6f2:	90 91 19 01 	lds	r25, 0x0119
 6f6:	0e 94 0a 06 	call	0xc14	; 0xc14 <__itoa_ncheck>
        itoa(raw_y,buffer,10);
        string2lcd(buffer);
 6fa:	8c e1       	ldi	r24, 0x1C	; 28
 6fc:	91 e0       	ldi	r25, 0x01	; 1
 6fe:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <string2lcd>
 702:	2f ef       	ldi	r18, 0xFF	; 255
 704:	89 e6       	ldi	r24, 0x69	; 105
 706:	98 e1       	ldi	r25, 0x18	; 24
 708:	21 50       	subi	r18, 0x01	; 1
 70a:	80 40       	sbci	r24, 0x00	; 0
 70c:	90 40       	sbci	r25, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <main+0x76>
 710:	00 c0       	rjmp	.+0      	; 0x712 <main+0x80>
 712:	00 00       	nop
 714:	e5 cf       	rjmp	.-54     	; 0x6e0 <main+0x4e>

00000716 <__subsf3>:
 716:	50 58       	subi	r21, 0x80	; 128

00000718 <__addsf3>:
 718:	bb 27       	eor	r27, r27
 71a:	aa 27       	eor	r26, r26
 71c:	0e 94 a3 03 	call	0x746	; 0x746 <__addsf3x>
 720:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_round>
 724:	0e 94 49 05 	call	0xa92	; 0xa92 <__fp_pscA>
 728:	38 f0       	brcs	.+14     	; 0x738 <__addsf3+0x20>
 72a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fp_pscB>
 72e:	20 f0       	brcs	.+8      	; 0x738 <__addsf3+0x20>
 730:	39 f4       	brne	.+14     	; 0x740 <__addsf3+0x28>
 732:	9f 3f       	cpi	r25, 0xFF	; 255
 734:	19 f4       	brne	.+6      	; 0x73c <__addsf3+0x24>
 736:	26 f4       	brtc	.+8      	; 0x740 <__addsf3+0x28>
 738:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_nan>
 73c:	0e f4       	brtc	.+2      	; 0x740 <__addsf3+0x28>
 73e:	e0 95       	com	r30
 740:	e7 fb       	bst	r30, 7
 742:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_inf>

00000746 <__addsf3x>:
 746:	e9 2f       	mov	r30, r25
 748:	0e 94 68 05 	call	0xad0	; 0xad0 <__fp_split3>
 74c:	58 f3       	brcs	.-42     	; 0x724 <__addsf3+0xc>
 74e:	ba 17       	cp	r27, r26
 750:	62 07       	cpc	r22, r18
 752:	73 07       	cpc	r23, r19
 754:	84 07       	cpc	r24, r20
 756:	95 07       	cpc	r25, r21
 758:	20 f0       	brcs	.+8      	; 0x762 <__addsf3x+0x1c>
 75a:	79 f4       	brne	.+30     	; 0x77a <__addsf3x+0x34>
 75c:	a6 f5       	brtc	.+104    	; 0x7c6 <__addsf3x+0x80>
 75e:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_zero>
 762:	0e f4       	brtc	.+2      	; 0x766 <__addsf3x+0x20>
 764:	e0 95       	com	r30
 766:	0b 2e       	mov	r0, r27
 768:	ba 2f       	mov	r27, r26
 76a:	a0 2d       	mov	r26, r0
 76c:	0b 01       	movw	r0, r22
 76e:	b9 01       	movw	r22, r18
 770:	90 01       	movw	r18, r0
 772:	0c 01       	movw	r0, r24
 774:	ca 01       	movw	r24, r20
 776:	a0 01       	movw	r20, r0
 778:	11 24       	eor	r1, r1
 77a:	ff 27       	eor	r31, r31
 77c:	59 1b       	sub	r21, r25
 77e:	99 f0       	breq	.+38     	; 0x7a6 <__addsf3x+0x60>
 780:	59 3f       	cpi	r21, 0xF9	; 249
 782:	50 f4       	brcc	.+20     	; 0x798 <__addsf3x+0x52>
 784:	50 3e       	cpi	r21, 0xE0	; 224
 786:	68 f1       	brcs	.+90     	; 0x7e2 <__addsf3x+0x9c>
 788:	1a 16       	cp	r1, r26
 78a:	f0 40       	sbci	r31, 0x00	; 0
 78c:	a2 2f       	mov	r26, r18
 78e:	23 2f       	mov	r18, r19
 790:	34 2f       	mov	r19, r20
 792:	44 27       	eor	r20, r20
 794:	58 5f       	subi	r21, 0xF8	; 248
 796:	f3 cf       	rjmp	.-26     	; 0x77e <__addsf3x+0x38>
 798:	46 95       	lsr	r20
 79a:	37 95       	ror	r19
 79c:	27 95       	ror	r18
 79e:	a7 95       	ror	r26
 7a0:	f0 40       	sbci	r31, 0x00	; 0
 7a2:	53 95       	inc	r21
 7a4:	c9 f7       	brne	.-14     	; 0x798 <__addsf3x+0x52>
 7a6:	7e f4       	brtc	.+30     	; 0x7c6 <__addsf3x+0x80>
 7a8:	1f 16       	cp	r1, r31
 7aa:	ba 0b       	sbc	r27, r26
 7ac:	62 0b       	sbc	r22, r18
 7ae:	73 0b       	sbc	r23, r19
 7b0:	84 0b       	sbc	r24, r20
 7b2:	ba f0       	brmi	.+46     	; 0x7e2 <__addsf3x+0x9c>
 7b4:	91 50       	subi	r25, 0x01	; 1
 7b6:	a1 f0       	breq	.+40     	; 0x7e0 <__addsf3x+0x9a>
 7b8:	ff 0f       	add	r31, r31
 7ba:	bb 1f       	adc	r27, r27
 7bc:	66 1f       	adc	r22, r22
 7be:	77 1f       	adc	r23, r23
 7c0:	88 1f       	adc	r24, r24
 7c2:	c2 f7       	brpl	.-16     	; 0x7b4 <__addsf3x+0x6e>
 7c4:	0e c0       	rjmp	.+28     	; 0x7e2 <__addsf3x+0x9c>
 7c6:	ba 0f       	add	r27, r26
 7c8:	62 1f       	adc	r22, r18
 7ca:	73 1f       	adc	r23, r19
 7cc:	84 1f       	adc	r24, r20
 7ce:	48 f4       	brcc	.+18     	; 0x7e2 <__addsf3x+0x9c>
 7d0:	87 95       	ror	r24
 7d2:	77 95       	ror	r23
 7d4:	67 95       	ror	r22
 7d6:	b7 95       	ror	r27
 7d8:	f7 95       	ror	r31
 7da:	9e 3f       	cpi	r25, 0xFE	; 254
 7dc:	08 f0       	brcs	.+2      	; 0x7e0 <__addsf3x+0x9a>
 7de:	b0 cf       	rjmp	.-160    	; 0x740 <__addsf3+0x28>
 7e0:	93 95       	inc	r25
 7e2:	88 0f       	add	r24, r24
 7e4:	08 f0       	brcs	.+2      	; 0x7e8 <__addsf3x+0xa2>
 7e6:	99 27       	eor	r25, r25
 7e8:	ee 0f       	add	r30, r30
 7ea:	97 95       	ror	r25
 7ec:	87 95       	ror	r24
 7ee:	08 95       	ret
 7f0:	0e 94 49 05 	call	0xa92	; 0xa92 <__fp_pscA>
 7f4:	60 f0       	brcs	.+24     	; 0x80e <__addsf3x+0xc8>
 7f6:	80 e8       	ldi	r24, 0x80	; 128
 7f8:	91 e0       	ldi	r25, 0x01	; 1
 7fa:	09 f4       	brne	.+2      	; 0x7fe <__addsf3x+0xb8>
 7fc:	9e ef       	ldi	r25, 0xFE	; 254
 7fe:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fp_pscB>
 802:	28 f0       	brcs	.+10     	; 0x80e <__addsf3x+0xc8>
 804:	40 e8       	ldi	r20, 0x80	; 128
 806:	51 e0       	ldi	r21, 0x01	; 1
 808:	71 f4       	brne	.+28     	; 0x826 <atan2+0x10>
 80a:	5e ef       	ldi	r21, 0xFE	; 254
 80c:	0c c0       	rjmp	.+24     	; 0x826 <atan2+0x10>
 80e:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_nan>
 812:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_zero>

00000816 <atan2>:
 816:	e9 2f       	mov	r30, r25
 818:	e0 78       	andi	r30, 0x80	; 128
 81a:	0e 94 68 05 	call	0xad0	; 0xad0 <__fp_split3>
 81e:	40 f3       	brcs	.-48     	; 0x7f0 <__addsf3x+0xaa>
 820:	09 2e       	mov	r0, r25
 822:	05 2a       	or	r0, r21
 824:	b1 f3       	breq	.-20     	; 0x812 <__addsf3x+0xcc>
 826:	26 17       	cp	r18, r22
 828:	37 07       	cpc	r19, r23
 82a:	48 07       	cpc	r20, r24
 82c:	59 07       	cpc	r21, r25
 82e:	38 f0       	brcs	.+14     	; 0x83e <atan2+0x28>
 830:	0e 2e       	mov	r0, r30
 832:	07 f8       	bld	r0, 7
 834:	e0 25       	eor	r30, r0
 836:	69 f0       	breq	.+26     	; 0x852 <atan2+0x3c>
 838:	e0 25       	eor	r30, r0
 83a:	e0 64       	ori	r30, 0x40	; 64
 83c:	0a c0       	rjmp	.+20     	; 0x852 <atan2+0x3c>
 83e:	ef 63       	ori	r30, 0x3F	; 63
 840:	07 f8       	bld	r0, 7
 842:	00 94       	com	r0
 844:	07 fa       	bst	r0, 7
 846:	db 01       	movw	r26, r22
 848:	b9 01       	movw	r22, r18
 84a:	9d 01       	movw	r18, r26
 84c:	dc 01       	movw	r26, r24
 84e:	ca 01       	movw	r24, r20
 850:	ad 01       	movw	r20, r26
 852:	ef 93       	push	r30
 854:	0e 94 81 04 	call	0x902	; 0x902 <__divsf3_pse>
 858:	0e 94 57 05 	call	0xaae	; 0xaae <__fp_round>
 85c:	0e 94 3b 04 	call	0x876	; 0x876 <atan>
 860:	5f 91       	pop	r21
 862:	55 23       	and	r21, r21
 864:	39 f0       	breq	.+14     	; 0x874 <atan2+0x5e>
 866:	2b ed       	ldi	r18, 0xDB	; 219
 868:	3f e0       	ldi	r19, 0x0F	; 15
 86a:	49 e4       	ldi	r20, 0x49	; 73
 86c:	50 fd       	sbrc	r21, 0
 86e:	49 ec       	ldi	r20, 0xC9	; 201
 870:	0c 94 8c 03 	jmp	0x718	; 0x718 <__addsf3>
 874:	08 95       	ret

00000876 <atan>:
 876:	df 93       	push	r29
 878:	dd 27       	eor	r29, r29
 87a:	b9 2f       	mov	r27, r25
 87c:	bf 77       	andi	r27, 0x7F	; 127
 87e:	40 e8       	ldi	r20, 0x80	; 128
 880:	5f e3       	ldi	r21, 0x3F	; 63
 882:	16 16       	cp	r1, r22
 884:	17 06       	cpc	r1, r23
 886:	48 07       	cpc	r20, r24
 888:	5b 07       	cpc	r21, r27
 88a:	18 f4       	brcc	.+6      	; 0x892 <atan+0x1c>
 88c:	d9 2f       	mov	r29, r25
 88e:	0e 94 91 05 	call	0xb22	; 0xb22 <inverse>
 892:	9f 93       	push	r25
 894:	8f 93       	push	r24
 896:	7f 93       	push	r23
 898:	6f 93       	push	r22
 89a:	0e 94 06 06 	call	0xc0c	; 0xc0c <square>
 89e:	ec e8       	ldi	r30, 0x8C	; 140
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	0e 94 22 05 	call	0xa44	; 0xa44 <__fp_powser>
 8a6:	0e 94 57 05 	call	0xaae	; 0xaae <__fp_round>
 8aa:	2f 91       	pop	r18
 8ac:	3f 91       	pop	r19
 8ae:	4f 91       	pop	r20
 8b0:	5f 91       	pop	r21
 8b2:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3x>
 8b6:	dd 23       	and	r29, r29
 8b8:	51 f0       	breq	.+20     	; 0x8ce <atan+0x58>
 8ba:	90 58       	subi	r25, 0x80	; 128
 8bc:	a2 ea       	ldi	r26, 0xA2	; 162
 8be:	2a ed       	ldi	r18, 0xDA	; 218
 8c0:	3f e0       	ldi	r19, 0x0F	; 15
 8c2:	49 ec       	ldi	r20, 0xC9	; 201
 8c4:	5f e3       	ldi	r21, 0x3F	; 63
 8c6:	d0 78       	andi	r29, 0x80	; 128
 8c8:	5d 27       	eor	r21, r29
 8ca:	0e 94 a3 03 	call	0x746	; 0x746 <__addsf3x>
 8ce:	df 91       	pop	r29
 8d0:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_round>

000008d4 <__divsf3>:
 8d4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divsf3x>
 8d8:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_round>
 8dc:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fp_pscB>
 8e0:	58 f0       	brcs	.+22     	; 0x8f8 <__divsf3+0x24>
 8e2:	0e 94 49 05 	call	0xa92	; 0xa92 <__fp_pscA>
 8e6:	40 f0       	brcs	.+16     	; 0x8f8 <__divsf3+0x24>
 8e8:	29 f4       	brne	.+10     	; 0x8f4 <__divsf3+0x20>
 8ea:	5f 3f       	cpi	r21, 0xFF	; 255
 8ec:	29 f0       	breq	.+10     	; 0x8f8 <__divsf3+0x24>
 8ee:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_inf>
 8f2:	51 11       	cpse	r21, r1
 8f4:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_szero>
 8f8:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_nan>

000008fc <__divsf3x>:
 8fc:	0e 94 68 05 	call	0xad0	; 0xad0 <__fp_split3>
 900:	68 f3       	brcs	.-38     	; 0x8dc <__divsf3+0x8>

00000902 <__divsf3_pse>:
 902:	99 23       	and	r25, r25
 904:	b1 f3       	breq	.-20     	; 0x8f2 <__divsf3+0x1e>
 906:	55 23       	and	r21, r21
 908:	91 f3       	breq	.-28     	; 0x8ee <__divsf3+0x1a>
 90a:	95 1b       	sub	r25, r21
 90c:	55 0b       	sbc	r21, r21
 90e:	bb 27       	eor	r27, r27
 910:	aa 27       	eor	r26, r26
 912:	62 17       	cp	r22, r18
 914:	73 07       	cpc	r23, r19
 916:	84 07       	cpc	r24, r20
 918:	38 f0       	brcs	.+14     	; 0x928 <__divsf3_pse+0x26>
 91a:	9f 5f       	subi	r25, 0xFF	; 255
 91c:	5f 4f       	sbci	r21, 0xFF	; 255
 91e:	22 0f       	add	r18, r18
 920:	33 1f       	adc	r19, r19
 922:	44 1f       	adc	r20, r20
 924:	aa 1f       	adc	r26, r26
 926:	a9 f3       	breq	.-22     	; 0x912 <__divsf3_pse+0x10>
 928:	35 d0       	rcall	.+106    	; 0x994 <__divsf3_pse+0x92>
 92a:	0e 2e       	mov	r0, r30
 92c:	3a f0       	brmi	.+14     	; 0x93c <__divsf3_pse+0x3a>
 92e:	e0 e8       	ldi	r30, 0x80	; 128
 930:	32 d0       	rcall	.+100    	; 0x996 <__divsf3_pse+0x94>
 932:	91 50       	subi	r25, 0x01	; 1
 934:	50 40       	sbci	r21, 0x00	; 0
 936:	e6 95       	lsr	r30
 938:	00 1c       	adc	r0, r0
 93a:	ca f7       	brpl	.-14     	; 0x92e <__divsf3_pse+0x2c>
 93c:	2b d0       	rcall	.+86     	; 0x994 <__divsf3_pse+0x92>
 93e:	fe 2f       	mov	r31, r30
 940:	29 d0       	rcall	.+82     	; 0x994 <__divsf3_pse+0x92>
 942:	66 0f       	add	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	bb 1f       	adc	r27, r27
 94a:	26 17       	cp	r18, r22
 94c:	37 07       	cpc	r19, r23
 94e:	48 07       	cpc	r20, r24
 950:	ab 07       	cpc	r26, r27
 952:	b0 e8       	ldi	r27, 0x80	; 128
 954:	09 f0       	breq	.+2      	; 0x958 <__divsf3_pse+0x56>
 956:	bb 0b       	sbc	r27, r27
 958:	80 2d       	mov	r24, r0
 95a:	bf 01       	movw	r22, r30
 95c:	ff 27       	eor	r31, r31
 95e:	93 58       	subi	r25, 0x83	; 131
 960:	5f 4f       	sbci	r21, 0xFF	; 255
 962:	3a f0       	brmi	.+14     	; 0x972 <__divsf3_pse+0x70>
 964:	9e 3f       	cpi	r25, 0xFE	; 254
 966:	51 05       	cpc	r21, r1
 968:	78 f0       	brcs	.+30     	; 0x988 <__divsf3_pse+0x86>
 96a:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_inf>
 96e:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_szero>
 972:	5f 3f       	cpi	r21, 0xFF	; 255
 974:	e4 f3       	brlt	.-8      	; 0x96e <__divsf3_pse+0x6c>
 976:	98 3e       	cpi	r25, 0xE8	; 232
 978:	d4 f3       	brlt	.-12     	; 0x96e <__divsf3_pse+0x6c>
 97a:	86 95       	lsr	r24
 97c:	77 95       	ror	r23
 97e:	67 95       	ror	r22
 980:	b7 95       	ror	r27
 982:	f7 95       	ror	r31
 984:	9f 5f       	subi	r25, 0xFF	; 255
 986:	c9 f7       	brne	.-14     	; 0x97a <__divsf3_pse+0x78>
 988:	88 0f       	add	r24, r24
 98a:	91 1d       	adc	r25, r1
 98c:	96 95       	lsr	r25
 98e:	87 95       	ror	r24
 990:	97 f9       	bld	r25, 7
 992:	08 95       	ret
 994:	e1 e0       	ldi	r30, 0x01	; 1
 996:	66 0f       	add	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	bb 1f       	adc	r27, r27
 99e:	62 17       	cp	r22, r18
 9a0:	73 07       	cpc	r23, r19
 9a2:	84 07       	cpc	r24, r20
 9a4:	ba 07       	cpc	r27, r26
 9a6:	20 f0       	brcs	.+8      	; 0x9b0 <__divsf3_pse+0xae>
 9a8:	62 1b       	sub	r22, r18
 9aa:	73 0b       	sbc	r23, r19
 9ac:	84 0b       	sbc	r24, r20
 9ae:	ba 0b       	sbc	r27, r26
 9b0:	ee 1f       	adc	r30, r30
 9b2:	88 f7       	brcc	.-30     	; 0x996 <__divsf3_pse+0x94>
 9b4:	e0 95       	com	r30
 9b6:	08 95       	ret

000009b8 <__floatunsisf>:
 9b8:	e8 94       	clt
 9ba:	09 c0       	rjmp	.+18     	; 0x9ce <__floatsisf+0x12>

000009bc <__floatsisf>:
 9bc:	97 fb       	bst	r25, 7
 9be:	3e f4       	brtc	.+14     	; 0x9ce <__floatsisf+0x12>
 9c0:	90 95       	com	r25
 9c2:	80 95       	com	r24
 9c4:	70 95       	com	r23
 9c6:	61 95       	neg	r22
 9c8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ca:	8f 4f       	sbci	r24, 0xFF	; 255
 9cc:	9f 4f       	sbci	r25, 0xFF	; 255
 9ce:	99 23       	and	r25, r25
 9d0:	a9 f0       	breq	.+42     	; 0x9fc <__floatsisf+0x40>
 9d2:	f9 2f       	mov	r31, r25
 9d4:	96 e9       	ldi	r25, 0x96	; 150
 9d6:	bb 27       	eor	r27, r27
 9d8:	93 95       	inc	r25
 9da:	f6 95       	lsr	r31
 9dc:	87 95       	ror	r24
 9de:	77 95       	ror	r23
 9e0:	67 95       	ror	r22
 9e2:	b7 95       	ror	r27
 9e4:	f1 11       	cpse	r31, r1
 9e6:	f8 cf       	rjmp	.-16     	; 0x9d8 <__floatsisf+0x1c>
 9e8:	fa f4       	brpl	.+62     	; 0xa28 <__floatsisf+0x6c>
 9ea:	bb 0f       	add	r27, r27
 9ec:	11 f4       	brne	.+4      	; 0x9f2 <__floatsisf+0x36>
 9ee:	60 ff       	sbrs	r22, 0
 9f0:	1b c0       	rjmp	.+54     	; 0xa28 <__floatsisf+0x6c>
 9f2:	6f 5f       	subi	r22, 0xFF	; 255
 9f4:	7f 4f       	sbci	r23, 0xFF	; 255
 9f6:	8f 4f       	sbci	r24, 0xFF	; 255
 9f8:	9f 4f       	sbci	r25, 0xFF	; 255
 9fa:	16 c0       	rjmp	.+44     	; 0xa28 <__floatsisf+0x6c>
 9fc:	88 23       	and	r24, r24
 9fe:	11 f0       	breq	.+4      	; 0xa04 <__floatsisf+0x48>
 a00:	96 e9       	ldi	r25, 0x96	; 150
 a02:	11 c0       	rjmp	.+34     	; 0xa26 <__floatsisf+0x6a>
 a04:	77 23       	and	r23, r23
 a06:	21 f0       	breq	.+8      	; 0xa10 <__floatsisf+0x54>
 a08:	9e e8       	ldi	r25, 0x8E	; 142
 a0a:	87 2f       	mov	r24, r23
 a0c:	76 2f       	mov	r23, r22
 a0e:	05 c0       	rjmp	.+10     	; 0xa1a <__floatsisf+0x5e>
 a10:	66 23       	and	r22, r22
 a12:	71 f0       	breq	.+28     	; 0xa30 <__floatsisf+0x74>
 a14:	96 e8       	ldi	r25, 0x86	; 134
 a16:	86 2f       	mov	r24, r22
 a18:	70 e0       	ldi	r23, 0x00	; 0
 a1a:	60 e0       	ldi	r22, 0x00	; 0
 a1c:	2a f0       	brmi	.+10     	; 0xa28 <__floatsisf+0x6c>
 a1e:	9a 95       	dec	r25
 a20:	66 0f       	add	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	da f7       	brpl	.-10     	; 0xa1e <__floatsisf+0x62>
 a28:	88 0f       	add	r24, r24
 a2a:	96 95       	lsr	r25
 a2c:	87 95       	ror	r24
 a2e:	97 f9       	bld	r25, 7
 a30:	08 95       	ret

00000a32 <__fp_inf>:
 a32:	97 f9       	bld	r25, 7
 a34:	9f 67       	ori	r25, 0x7F	; 127
 a36:	80 e8       	ldi	r24, 0x80	; 128
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	60 e0       	ldi	r22, 0x00	; 0
 a3c:	08 95       	ret

00000a3e <__fp_nan>:
 a3e:	9f ef       	ldi	r25, 0xFF	; 255
 a40:	80 ec       	ldi	r24, 0xC0	; 192
 a42:	08 95       	ret

00000a44 <__fp_powser>:
 a44:	df 93       	push	r29
 a46:	cf 93       	push	r28
 a48:	1f 93       	push	r17
 a4a:	0f 93       	push	r16
 a4c:	ff 92       	push	r15
 a4e:	ef 92       	push	r14
 a50:	df 92       	push	r13
 a52:	7b 01       	movw	r14, r22
 a54:	8c 01       	movw	r16, r24
 a56:	68 94       	set
 a58:	06 c0       	rjmp	.+12     	; 0xa66 <__fp_powser+0x22>
 a5a:	da 2e       	mov	r13, r26
 a5c:	ef 01       	movw	r28, r30
 a5e:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3x>
 a62:	fe 01       	movw	r30, r28
 a64:	e8 94       	clt
 a66:	a5 91       	lpm	r26, Z+
 a68:	25 91       	lpm	r18, Z+
 a6a:	35 91       	lpm	r19, Z+
 a6c:	45 91       	lpm	r20, Z+
 a6e:	55 91       	lpm	r21, Z+
 a70:	a6 f3       	brts	.-24     	; 0xa5a <__fp_powser+0x16>
 a72:	ef 01       	movw	r28, r30
 a74:	0e 94 a3 03 	call	0x746	; 0x746 <__addsf3x>
 a78:	fe 01       	movw	r30, r28
 a7a:	97 01       	movw	r18, r14
 a7c:	a8 01       	movw	r20, r16
 a7e:	da 94       	dec	r13
 a80:	69 f7       	brne	.-38     	; 0xa5c <__fp_powser+0x18>
 a82:	df 90       	pop	r13
 a84:	ef 90       	pop	r14
 a86:	ff 90       	pop	r15
 a88:	0f 91       	pop	r16
 a8a:	1f 91       	pop	r17
 a8c:	cf 91       	pop	r28
 a8e:	df 91       	pop	r29
 a90:	08 95       	ret

00000a92 <__fp_pscA>:
 a92:	00 24       	eor	r0, r0
 a94:	0a 94       	dec	r0
 a96:	16 16       	cp	r1, r22
 a98:	17 06       	cpc	r1, r23
 a9a:	18 06       	cpc	r1, r24
 a9c:	09 06       	cpc	r0, r25
 a9e:	08 95       	ret

00000aa0 <__fp_pscB>:
 aa0:	00 24       	eor	r0, r0
 aa2:	0a 94       	dec	r0
 aa4:	12 16       	cp	r1, r18
 aa6:	13 06       	cpc	r1, r19
 aa8:	14 06       	cpc	r1, r20
 aaa:	05 06       	cpc	r0, r21
 aac:	08 95       	ret

00000aae <__fp_round>:
 aae:	09 2e       	mov	r0, r25
 ab0:	03 94       	inc	r0
 ab2:	00 0c       	add	r0, r0
 ab4:	11 f4       	brne	.+4      	; 0xaba <__fp_round+0xc>
 ab6:	88 23       	and	r24, r24
 ab8:	52 f0       	brmi	.+20     	; 0xace <__fp_round+0x20>
 aba:	bb 0f       	add	r27, r27
 abc:	40 f4       	brcc	.+16     	; 0xace <__fp_round+0x20>
 abe:	bf 2b       	or	r27, r31
 ac0:	11 f4       	brne	.+4      	; 0xac6 <__fp_round+0x18>
 ac2:	60 ff       	sbrs	r22, 0
 ac4:	04 c0       	rjmp	.+8      	; 0xace <__fp_round+0x20>
 ac6:	6f 5f       	subi	r22, 0xFF	; 255
 ac8:	7f 4f       	sbci	r23, 0xFF	; 255
 aca:	8f 4f       	sbci	r24, 0xFF	; 255
 acc:	9f 4f       	sbci	r25, 0xFF	; 255
 ace:	08 95       	ret

00000ad0 <__fp_split3>:
 ad0:	57 fd       	sbrc	r21, 7
 ad2:	90 58       	subi	r25, 0x80	; 128
 ad4:	44 0f       	add	r20, r20
 ad6:	55 1f       	adc	r21, r21
 ad8:	59 f0       	breq	.+22     	; 0xaf0 <__fp_splitA+0x10>
 ada:	5f 3f       	cpi	r21, 0xFF	; 255
 adc:	71 f0       	breq	.+28     	; 0xafa <__fp_splitA+0x1a>
 ade:	47 95       	ror	r20

00000ae0 <__fp_splitA>:
 ae0:	88 0f       	add	r24, r24
 ae2:	97 fb       	bst	r25, 7
 ae4:	99 1f       	adc	r25, r25
 ae6:	61 f0       	breq	.+24     	; 0xb00 <__fp_splitA+0x20>
 ae8:	9f 3f       	cpi	r25, 0xFF	; 255
 aea:	79 f0       	breq	.+30     	; 0xb0a <__fp_splitA+0x2a>
 aec:	87 95       	ror	r24
 aee:	08 95       	ret
 af0:	12 16       	cp	r1, r18
 af2:	13 06       	cpc	r1, r19
 af4:	14 06       	cpc	r1, r20
 af6:	55 1f       	adc	r21, r21
 af8:	f2 cf       	rjmp	.-28     	; 0xade <__fp_split3+0xe>
 afa:	46 95       	lsr	r20
 afc:	f1 df       	rcall	.-30     	; 0xae0 <__fp_splitA>
 afe:	08 c0       	rjmp	.+16     	; 0xb10 <__fp_splitA+0x30>
 b00:	16 16       	cp	r1, r22
 b02:	17 06       	cpc	r1, r23
 b04:	18 06       	cpc	r1, r24
 b06:	99 1f       	adc	r25, r25
 b08:	f1 cf       	rjmp	.-30     	; 0xaec <__fp_splitA+0xc>
 b0a:	86 95       	lsr	r24
 b0c:	71 05       	cpc	r23, r1
 b0e:	61 05       	cpc	r22, r1
 b10:	08 94       	sec
 b12:	08 95       	ret

00000b14 <__fp_zero>:
 b14:	e8 94       	clt

00000b16 <__fp_szero>:
 b16:	bb 27       	eor	r27, r27
 b18:	66 27       	eor	r22, r22
 b1a:	77 27       	eor	r23, r23
 b1c:	cb 01       	movw	r24, r22
 b1e:	97 f9       	bld	r25, 7
 b20:	08 95       	ret

00000b22 <inverse>:
 b22:	9b 01       	movw	r18, r22
 b24:	ac 01       	movw	r20, r24
 b26:	60 e0       	ldi	r22, 0x00	; 0
 b28:	70 e0       	ldi	r23, 0x00	; 0
 b2a:	80 e8       	ldi	r24, 0x80	; 128
 b2c:	9f e3       	ldi	r25, 0x3F	; 63
 b2e:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__divsf3>

00000b32 <__mulsf3>:
 b32:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3x>
 b36:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_round>
 b3a:	0e 94 49 05 	call	0xa92	; 0xa92 <__fp_pscA>
 b3e:	38 f0       	brcs	.+14     	; 0xb4e <__mulsf3+0x1c>
 b40:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fp_pscB>
 b44:	20 f0       	brcs	.+8      	; 0xb4e <__mulsf3+0x1c>
 b46:	95 23       	and	r25, r21
 b48:	11 f0       	breq	.+4      	; 0xb4e <__mulsf3+0x1c>
 b4a:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_inf>
 b4e:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_nan>
 b52:	11 24       	eor	r1, r1
 b54:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_szero>

00000b58 <__mulsf3x>:
 b58:	0e 94 68 05 	call	0xad0	; 0xad0 <__fp_split3>
 b5c:	70 f3       	brcs	.-36     	; 0xb3a <__mulsf3+0x8>

00000b5e <__mulsf3_pse>:
 b5e:	95 9f       	mul	r25, r21
 b60:	c1 f3       	breq	.-16     	; 0xb52 <__mulsf3+0x20>
 b62:	95 0f       	add	r25, r21
 b64:	50 e0       	ldi	r21, 0x00	; 0
 b66:	55 1f       	adc	r21, r21
 b68:	62 9f       	mul	r22, r18
 b6a:	f0 01       	movw	r30, r0
 b6c:	72 9f       	mul	r23, r18
 b6e:	bb 27       	eor	r27, r27
 b70:	f0 0d       	add	r31, r0
 b72:	b1 1d       	adc	r27, r1
 b74:	63 9f       	mul	r22, r19
 b76:	aa 27       	eor	r26, r26
 b78:	f0 0d       	add	r31, r0
 b7a:	b1 1d       	adc	r27, r1
 b7c:	aa 1f       	adc	r26, r26
 b7e:	64 9f       	mul	r22, r20
 b80:	66 27       	eor	r22, r22
 b82:	b0 0d       	add	r27, r0
 b84:	a1 1d       	adc	r26, r1
 b86:	66 1f       	adc	r22, r22
 b88:	82 9f       	mul	r24, r18
 b8a:	22 27       	eor	r18, r18
 b8c:	b0 0d       	add	r27, r0
 b8e:	a1 1d       	adc	r26, r1
 b90:	62 1f       	adc	r22, r18
 b92:	73 9f       	mul	r23, r19
 b94:	b0 0d       	add	r27, r0
 b96:	a1 1d       	adc	r26, r1
 b98:	62 1f       	adc	r22, r18
 b9a:	83 9f       	mul	r24, r19
 b9c:	a0 0d       	add	r26, r0
 b9e:	61 1d       	adc	r22, r1
 ba0:	22 1f       	adc	r18, r18
 ba2:	74 9f       	mul	r23, r20
 ba4:	33 27       	eor	r19, r19
 ba6:	a0 0d       	add	r26, r0
 ba8:	61 1d       	adc	r22, r1
 baa:	23 1f       	adc	r18, r19
 bac:	84 9f       	mul	r24, r20
 bae:	60 0d       	add	r22, r0
 bb0:	21 1d       	adc	r18, r1
 bb2:	82 2f       	mov	r24, r18
 bb4:	76 2f       	mov	r23, r22
 bb6:	6a 2f       	mov	r22, r26
 bb8:	11 24       	eor	r1, r1
 bba:	9f 57       	subi	r25, 0x7F	; 127
 bbc:	50 40       	sbci	r21, 0x00	; 0
 bbe:	9a f0       	brmi	.+38     	; 0xbe6 <__mulsf3_pse+0x88>
 bc0:	f1 f0       	breq	.+60     	; 0xbfe <__mulsf3_pse+0xa0>
 bc2:	88 23       	and	r24, r24
 bc4:	4a f0       	brmi	.+18     	; 0xbd8 <__mulsf3_pse+0x7a>
 bc6:	ee 0f       	add	r30, r30
 bc8:	ff 1f       	adc	r31, r31
 bca:	bb 1f       	adc	r27, r27
 bcc:	66 1f       	adc	r22, r22
 bce:	77 1f       	adc	r23, r23
 bd0:	88 1f       	adc	r24, r24
 bd2:	91 50       	subi	r25, 0x01	; 1
 bd4:	50 40       	sbci	r21, 0x00	; 0
 bd6:	a9 f7       	brne	.-22     	; 0xbc2 <__mulsf3_pse+0x64>
 bd8:	9e 3f       	cpi	r25, 0xFE	; 254
 bda:	51 05       	cpc	r21, r1
 bdc:	80 f0       	brcs	.+32     	; 0xbfe <__mulsf3_pse+0xa0>
 bde:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_inf>
 be2:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_szero>
 be6:	5f 3f       	cpi	r21, 0xFF	; 255
 be8:	e4 f3       	brlt	.-8      	; 0xbe2 <__mulsf3_pse+0x84>
 bea:	98 3e       	cpi	r25, 0xE8	; 232
 bec:	d4 f3       	brlt	.-12     	; 0xbe2 <__mulsf3_pse+0x84>
 bee:	86 95       	lsr	r24
 bf0:	77 95       	ror	r23
 bf2:	67 95       	ror	r22
 bf4:	b7 95       	ror	r27
 bf6:	f7 95       	ror	r31
 bf8:	e7 95       	ror	r30
 bfa:	9f 5f       	subi	r25, 0xFF	; 255
 bfc:	c1 f7       	brne	.-16     	; 0xbee <__mulsf3_pse+0x90>
 bfe:	fe 2b       	or	r31, r30
 c00:	88 0f       	add	r24, r24
 c02:	91 1d       	adc	r25, r1
 c04:	96 95       	lsr	r25
 c06:	87 95       	ror	r24
 c08:	97 f9       	bld	r25, 7
 c0a:	08 95       	ret

00000c0c <square>:
 c0c:	9b 01       	movw	r18, r22
 c0e:	ac 01       	movw	r20, r24
 c10:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__mulsf3>

00000c14 <__itoa_ncheck>:
 c14:	bb 27       	eor	r27, r27
 c16:	4a 30       	cpi	r20, 0x0A	; 10
 c18:	31 f4       	brne	.+12     	; 0xc26 <__itoa_ncheck+0x12>
 c1a:	99 23       	and	r25, r25
 c1c:	22 f4       	brpl	.+8      	; 0xc26 <__itoa_ncheck+0x12>
 c1e:	bd e2       	ldi	r27, 0x2D	; 45
 c20:	90 95       	com	r25
 c22:	81 95       	neg	r24
 c24:	9f 4f       	sbci	r25, 0xFF	; 255
 c26:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__utoa_common>

00000c2a <__utoa_ncheck>:
 c2a:	bb 27       	eor	r27, r27

00000c2c <__utoa_common>:
 c2c:	fb 01       	movw	r30, r22
 c2e:	55 27       	eor	r21, r21
 c30:	aa 27       	eor	r26, r26
 c32:	88 0f       	add	r24, r24
 c34:	99 1f       	adc	r25, r25
 c36:	aa 1f       	adc	r26, r26
 c38:	a4 17       	cp	r26, r20
 c3a:	10 f0       	brcs	.+4      	; 0xc40 <__utoa_common+0x14>
 c3c:	a4 1b       	sub	r26, r20
 c3e:	83 95       	inc	r24
 c40:	50 51       	subi	r21, 0x10	; 16
 c42:	b9 f7       	brne	.-18     	; 0xc32 <__utoa_common+0x6>
 c44:	a0 5d       	subi	r26, 0xD0	; 208
 c46:	aa 33       	cpi	r26, 0x3A	; 58
 c48:	08 f0       	brcs	.+2      	; 0xc4c <__utoa_common+0x20>
 c4a:	a9 5d       	subi	r26, 0xD9	; 217
 c4c:	a1 93       	st	Z+, r26
 c4e:	00 97       	sbiw	r24, 0x00	; 0
 c50:	79 f7       	brne	.-34     	; 0xc30 <__utoa_common+0x4>
 c52:	b1 11       	cpse	r27, r1
 c54:	b1 93       	st	Z+, r27
 c56:	11 92       	st	Z+, r1
 c58:	cb 01       	movw	r24, r22
 c5a:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <strrev>

00000c5e <strrev>:
 c5e:	dc 01       	movw	r26, r24
 c60:	fc 01       	movw	r30, r24
 c62:	67 2f       	mov	r22, r23
 c64:	71 91       	ld	r23, Z+
 c66:	77 23       	and	r23, r23
 c68:	e1 f7       	brne	.-8      	; 0xc62 <strrev+0x4>
 c6a:	32 97       	sbiw	r30, 0x02	; 2
 c6c:	04 c0       	rjmp	.+8      	; 0xc76 <strrev+0x18>
 c6e:	7c 91       	ld	r23, X
 c70:	6d 93       	st	X+, r22
 c72:	70 83       	st	Z, r23
 c74:	62 91       	ld	r22, -Z
 c76:	ae 17       	cp	r26, r30
 c78:	bf 07       	cpc	r27, r31
 c7a:	c8 f3       	brcs	.-14     	; 0xc6e <strrev+0x10>
 c7c:	08 95       	ret

00000c7e <_exit>:
 c7e:	f8 94       	cli

00000c80 <__stop_program>:
 c80:	ff cf       	rjmp	.-2      	; 0xc80 <__stop_program>
