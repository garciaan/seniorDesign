
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000466  000004da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000466  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001884  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001112  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002e72  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002e84  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000780  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00003640  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00003d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00003d75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <main>
  9c:	0c 94 31 02 	jmp	0x462	; 0x462 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <USART1_Init>:
#include "uart.h"


void USART1_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
  a4:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
  a8:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	81 ee       	ldi	r24, 0xE1	; 225
  bc:	94 e0       	ldi	r25, 0x04	; 4
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <USART1_Init+0x1a>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <USART1_Init+0x24>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <USART1_Transmit>:
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
  cc:	90 91 9b 00 	lds	r25, 0x009B
  d0:	95 ff       	sbrs	r25, 5
  d2:	fc cf       	rjmp	.-8      	; 0xcc <USART1_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
  d4:	80 93 9c 00 	sts	0x009C, r24
  d8:	08 95       	ret

000000da <USART1_send_string>:
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
  da:	fc 01       	movw	r30, r24
  dc:	20 81       	ld	r18, Z
  de:	22 23       	and	r18, r18
  e0:	51 f0       	breq	.+20     	; 0xf6 <USART1_send_string+0x1c>
  e2:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
  e4:	90 91 9b 00 	lds	r25, 0x009B
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <USART1_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
  ec:	20 93 9c 00 	sts	0x009C, r18
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
  f0:	21 91       	ld	r18, Z+
  f2:	21 11       	cpse	r18, r1
  f4:	f7 cf       	rjmp	.-18     	; 0xe4 <USART1_send_string+0xa>
  f6:	08 95       	ret

000000f8 <USART1_Receive>:

unsigned char USART1_Receive(void){
    uint16_t timeout = 50000;
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR1A & (1<<RXC1))){
  f8:	80 91 9b 00 	lds	r24, 0x009B
  fc:	87 ff       	sbrs	r24, 7
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <USART1_Receive>
            /* Get and return received data from buffer */ 
            return UDR1;
 100:	80 91 9c 00 	lds	r24, 0x009C
        }
    //} while (--timeout);
    }while(1);
    return -1;
}
 104:	08 95       	ret

00000106 <USART1_Receive_String>:

void USART1_Receive_String(unsigned char *str){
 106:	dc 01       	movw	r26, r24
 108:	fc 01       	movw	r30, r24
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == -1){
            str[0] = 50;
 10a:	82 e3       	ldi	r24, 0x32	; 50

unsigned char USART1_Receive(void){
    uint16_t timeout = 50000;
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR1A & (1<<RXC1))){
 10c:	90 91 9b 00 	lds	r25, 0x009B
 110:	97 ff       	sbrs	r25, 7
 112:	fc cf       	rjmp	.-8      	; 0x10c <USART1_Receive_String+0x6>
            /* Get and return received data from buffer */ 
            return UDR1;
 114:	90 91 9c 00 	lds	r25, 0x009C

void USART1_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 118:	9e 37       	cpi	r25, 0x7E	; 126
 11a:	69 f0       	breq	.+26     	; 0x136 <USART1_Receive_String+0x30>
        if (c == -1){
 11c:	9f 3f       	cpi	r25, 0xFF	; 255
 11e:	11 f0       	breq	.+4      	; 0x124 <USART1_Receive_String+0x1e>
            str[0] = 50;
            str[1] = 50;
            str[2] = 50;
        }
        str[i] = c;
 120:	91 93       	st	Z+, r25
 122:	f4 cf       	rjmp	.-24     	; 0x10c <USART1_Receive_String+0x6>
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == -1){
            str[0] = 50;
 124:	8c 93       	st	X, r24
            str[1] = 50;
 126:	11 96       	adiw	r26, 0x01	; 1
 128:	8c 93       	st	X, r24
 12a:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
 12c:	12 96       	adiw	r26, 0x02	; 2
 12e:	8c 93       	st	X, r24
 130:	12 97       	sbiw	r26, 0x02	; 2
        }
        str[i] = c;
 132:	91 93       	st	Z+, r25
 134:	eb cf       	rjmp	.-42     	; 0x10c <USART1_Receive_String+0x6>
            str[MAX_STRING_SIZE - 1] = '\0';

            return;
        }*/
    }
}
 136:	08 95       	ret

00000138 <USART0_Init>:


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
 138:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
 13c:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 13e:	88 e1       	ldi	r24, 0x18	; 24
 140:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 1stop bit */ 
    UCSR0C = (3<<UCSZ00);
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	80 93 95 00 	sts	0x0095, r24
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	81 ee       	ldi	r24, 0xE1	; 225
 14c:	94 e0       	ldi	r25, 0x04	; 4
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <USART0_Init+0x16>
 156:	00 c0       	rjmp	.+0      	; 0x158 <USART0_Init+0x20>
 158:	00 00       	nop
 15a:	08 95       	ret

0000015c <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
 15c:	5d 9b       	sbis	0x0b, 5	; 11
 15e:	fe cf       	rjmp	.-4      	; 0x15c <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
 160:	8c b9       	out	0x0c, r24	; 12
 162:	08 95       	ret

00000164 <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
 164:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
 166:	90 81       	ld	r25, Z
 168:	99 23       	and	r25, r25
 16a:	39 f0       	breq	.+14     	; 0x17a <USART0_send_string+0x16>
 16c:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
 16e:	5d 9b       	sbis	0x0b, 5	; 11
 170:	fe cf       	rjmp	.-4      	; 0x16e <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
 172:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 174:	91 91       	ld	r25, Z+
 176:	91 11       	cpse	r25, r1
 178:	fa cf       	rjmp	.-12     	; 0x16e <USART0_send_string+0xa>
 17a:	08 95       	ret

0000017c <USART0_Receive>:

unsigned char USART0_Receive(void){
    uint16_t timeout = 50000;
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
 17c:	5f 9b       	sbis	0x0b, 7	; 11
 17e:	fe cf       	rjmp	.-4      	; 0x17c <USART0_Receive>
            /* Get and return received data from buffer */ 
            return UDR0;
 180:	8c b1       	in	r24, 0x0c	; 12
        }
    //} while (--timeout);
    }while(1);
    return 255;
}
 182:	08 95       	ret

00000184 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
 184:	dc 01       	movw	r26, r24
 186:	fc 01       	movw	r30, r24
    int i = 0;
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0

unsigned char USART0_Receive(void){
    uint16_t timeout = 50000;
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
 18c:	5f 9b       	sbis	0x0b, 7	; 11
 18e:	fe cf       	rjmp	.-4      	; 0x18c <USART0_Receive_String+0x8>
            /* Get and return received data from buffer */ 
            return UDR0;
 190:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 192:	9e 37       	cpi	r25, 0x7E	; 126
 194:	31 f0       	breq	.+12     	; 0x1a2 <USART0_Receive_String+0x1e>
        if (c == 255){
 196:	9f 3f       	cpi	r25, 0xFF	; 255
 198:	41 f0       	breq	.+16     	; 0x1aa <USART0_Receive_String+0x26>
            str[1] = 50;
            str[2] = 50;
            str[3] = '\0';
            return;
        }
        str[i] = c;
 19a:	91 93       	st	Z+, r25
        //char2lcd(c);
        //string2lcd(str);
        ++i;
 19c:	2f 5f       	subi	r18, 0xFF	; 255
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
 1a0:	f5 cf       	rjmp	.-22     	; 0x18c <USART0_Receive_String+0x8>
            str[MAX_STRING_SIZE - 1] = '\0';

            return;
        }*/
    }
    str[i] = '\0';
 1a2:	a2 0f       	add	r26, r18
 1a4:	b3 1f       	adc	r27, r19
 1a6:	1c 92       	st	X, r1
 1a8:	08 95       	ret
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255){
            str[0] = 50;
 1aa:	82 e3       	ldi	r24, 0x32	; 50
 1ac:	8c 93       	st	X, r24
            str[1] = 50;
 1ae:	11 96       	adiw	r26, 0x01	; 1
 1b0:	8c 93       	st	X, r24
 1b2:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
 1b4:	12 96       	adiw	r26, 0x02	; 2
 1b6:	8c 93       	st	X, r24
 1b8:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = '\0';
 1ba:	13 96       	adiw	r26, 0x03	; 3
 1bc:	1c 92       	st	X, r1
            return;
 1be:	08 95       	ret

000001c0 <strobe_lcd>:
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 1c0:	e2 e6       	ldi	r30, 0x62	; 98
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	80 83       	st	Z, r24
    PORTF &= ~0x08;
 1ca:	80 81       	ld	r24, Z
 1cc:	87 7f       	andi	r24, 0xF7	; 247
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 1d2:	77 9b       	sbis	0x0e, 7	; 14
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <clear_display>
    SPDR = 0x00;    //command, not data
 1d6:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 1d8:	77 9b       	sbis	0x0e, 7	; 14
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 1e0:	77 9b       	sbis	0x0e, 7	; 14
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <clear_display+0xe>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 1e4:	80 91 62 00 	lds	r24, 0x0062
 1e8:	88 60       	ori	r24, 0x08	; 8
 1ea:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 1ee:	80 91 62 00 	lds	r24, 0x0062
 1f2:	87 7f       	andi	r24, 0xF7	; 247
 1f4:	80 93 62 00 	sts	0x0062, r24
 1f8:	8f e9       	ldi	r24, 0x9F	; 159
 1fa:	98 e2       	ldi	r25, 0x28	; 40
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <clear_display+0x2a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <clear_display+0x30>
 202:	00 00       	nop
 204:	08 95       	ret

00000206 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 206:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 208:	77 9b       	sbis	0x0e, 7	; 14
 20a:	fe cf       	rjmp	.-4      	; 0x208 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
 20c:	80 ec       	ldi	r24, 0xC0	; 192
 20e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 210:	77 9b       	sbis	0x0e, 7	; 14
 212:	fe cf       	rjmp	.-4      	; 0x210 <home_line2+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 214:	80 91 62 00 	lds	r24, 0x0062
 218:	88 60       	ori	r24, 0x08	; 8
 21a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 21e:	80 91 62 00 	lds	r24, 0x0062
 222:	87 7f       	andi	r24, 0xF7	; 247
 224:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	85 ec       	ldi	r24, 0xC5	; 197
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <home_line2+0x24>
 22e:	00 00       	nop
 230:	08 95       	ret

00000232 <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 236:	77 9b       	sbis	0x0e, 7	; 14
 238:	fe cf       	rjmp	.-4      	; 0x236 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
 23a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 23c:	77 9b       	sbis	0x0e, 7	; 14
 23e:	fe cf       	rjmp	.-4      	; 0x23c <char2lcd+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 240:	80 91 62 00 	lds	r24, 0x0062
 244:	88 60       	ori	r24, 0x08	; 8
 246:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 24a:	80 91 62 00 	lds	r24, 0x0062
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	80 93 62 00 	sts	0x0062, r24
 254:	85 ec       	ldi	r24, 0xC5	; 197
 256:	8a 95       	dec	r24
 258:	f1 f7       	brne	.-4      	; 0x256 <char2lcd+0x24>
 25a:	00 00       	nop
 25c:	08 95       	ret

0000025e <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	fc 01       	movw	r30, r24
 264:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
 26a:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 26c:	77 9b       	sbis	0x0e, 7	; 14
 26e:	fe cf       	rjmp	.-4      	; 0x26c <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
 270:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 272:	77 9b       	sbis	0x0e, 7	; 14
 274:	fe cf       	rjmp	.-4      	; 0x272 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
 276:	8d 91       	ld	r24, X+
 278:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 27a:	77 9b       	sbis	0x0e, 7	; 14
 27c:	fe cf       	rjmp	.-4      	; 0x27a <string2lcd+0x1c>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 27e:	90 91 62 00 	lds	r25, 0x0062
 282:	98 60       	ori	r25, 0x08	; 8
 284:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
 288:	90 91 62 00 	lds	r25, 0x0062
 28c:	97 7f       	andi	r25, 0xF7	; 247
 28e:	90 93 62 00 	sts	0x0062, r25
 292:	85 ec       	ldi	r24, 0xC5	; 197
 294:	8a 95       	dec	r24
 296:	f1 f7       	brne	.-4      	; 0x294 <string2lcd+0x36>
 298:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
 29a:	4f 5f       	subi	r20, 0xFF	; 255
 29c:	5f 4f       	sbci	r21, 0xFF	; 255
 29e:	ef 01       	movw	r28, r30
 2a0:	09 90       	ld	r0, Y+
 2a2:	00 20       	and	r0, r0
 2a4:	e9 f7       	brne	.-6      	; 0x2a0 <string2lcd+0x42>
 2a6:	9e 01       	movw	r18, r28
 2a8:	2e 1b       	sub	r18, r30
 2aa:	3f 0b       	sbc	r19, r31
 2ac:	22 50       	subi	r18, 0x02	; 2
 2ae:	31 09       	sbc	r19, r1
 2b0:	24 17       	cp	r18, r20
 2b2:	35 07       	cpc	r19, r21
 2b4:	d8 f6       	brcc	.-74     	; 0x26c <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 2bc:	e1 e6       	ldi	r30, 0x61	; 97
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	88 60       	ori	r24, 0x08	; 8
 2c4:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
 2c6:	88 b3       	in	r24, 0x18	; 24
 2c8:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 2ca:	87 b3       	in	r24, 0x17	; 23
 2cc:	87 60       	ori	r24, 0x07	; 7
 2ce:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 2d0:	80 e5       	ldi	r24, 0x50	; 80
 2d2:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	8e b9       	out	0x0e, r24	; 14
 2d8:	08 95       	ret

000002da <lcd_init>:
 2da:	8f e5       	ldi	r24, 0x5F	; 95
 2dc:	9a ee       	ldi	r25, 0xEA	; 234
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <lcd_init+0x4>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <lcd_init+0xa>
 2e4:	00 00       	nop
 2e6:	23 e0       	ldi	r18, 0x03	; 3
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	90 e3       	ldi	r25, 0x30	; 48
 2ec:	1f b8       	out	0x0f, r1	; 15
 2ee:	77 9b       	sbis	0x0e, 7	; 14
 2f0:	fe cf       	rjmp	.-4      	; 0x2ee <lcd_init+0x14>
 2f2:	9f b9       	out	0x0f, r25	; 15
 2f4:	77 9b       	sbis	0x0e, 7	; 14
 2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <lcd_init+0x1a>
 2f8:	80 91 62 00 	lds	r24, 0x0062
 2fc:	88 60       	ori	r24, 0x08	; 8
 2fe:	80 93 62 00 	sts	0x0062, r24
 302:	80 91 62 00 	lds	r24, 0x0062
 306:	87 7f       	andi	r24, 0xF7	; 247
 308:	80 93 62 00 	sts	0x0062, r24
 30c:	85 ec       	ldi	r24, 0xC5	; 197
 30e:	8a 95       	dec	r24
 310:	f1 f7       	brne	.-4      	; 0x30e <lcd_init+0x34>
 312:	00 00       	nop
 314:	21 50       	subi	r18, 0x01	; 1
 316:	31 09       	sbc	r19, r1
 318:	49 f7       	brne	.-46     	; 0x2ec <lcd_init+0x12>
 31a:	1f b8       	out	0x0f, r1	; 15
 31c:	77 9b       	sbis	0x0e, 7	; 14
 31e:	fe cf       	rjmp	.-4      	; 0x31c <lcd_init+0x42>
 320:	88 e3       	ldi	r24, 0x38	; 56
 322:	8f b9       	out	0x0f, r24	; 15
 324:	77 9b       	sbis	0x0e, 7	; 14
 326:	fe cf       	rjmp	.-4      	; 0x324 <lcd_init+0x4a>
 328:	80 91 62 00 	lds	r24, 0x0062
 32c:	88 60       	ori	r24, 0x08	; 8
 32e:	80 93 62 00 	sts	0x0062, r24
 332:	80 91 62 00 	lds	r24, 0x0062
 336:	87 7f       	andi	r24, 0xF7	; 247
 338:	80 93 62 00 	sts	0x0062, r24
 33c:	95 ec       	ldi	r25, 0xC5	; 197
 33e:	9a 95       	dec	r25
 340:	f1 f7       	brne	.-4      	; 0x33e <lcd_init+0x64>
 342:	00 00       	nop
 344:	1f b8       	out	0x0f, r1	; 15
 346:	77 9b       	sbis	0x0e, 7	; 14
 348:	fe cf       	rjmp	.-4      	; 0x346 <lcd_init+0x6c>
 34a:	88 e0       	ldi	r24, 0x08	; 8
 34c:	8f b9       	out	0x0f, r24	; 15
 34e:	77 9b       	sbis	0x0e, 7	; 14
 350:	fe cf       	rjmp	.-4      	; 0x34e <lcd_init+0x74>
 352:	80 91 62 00 	lds	r24, 0x0062
 356:	88 60       	ori	r24, 0x08	; 8
 358:	80 93 62 00 	sts	0x0062, r24
 35c:	80 91 62 00 	lds	r24, 0x0062
 360:	87 7f       	andi	r24, 0xF7	; 247
 362:	80 93 62 00 	sts	0x0062, r24
 366:	85 ec       	ldi	r24, 0xC5	; 197
 368:	8a 95       	dec	r24
 36a:	f1 f7       	brne	.-4      	; 0x368 <lcd_init+0x8e>
 36c:	00 00       	nop
 36e:	1f b8       	out	0x0f, r1	; 15
 370:	77 9b       	sbis	0x0e, 7	; 14
 372:	fe cf       	rjmp	.-4      	; 0x370 <lcd_init+0x96>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	8f b9       	out	0x0f, r24	; 15
 378:	77 9b       	sbis	0x0e, 7	; 14
 37a:	fe cf       	rjmp	.-4      	; 0x378 <lcd_init+0x9e>
 37c:	80 91 62 00 	lds	r24, 0x0062
 380:	88 60       	ori	r24, 0x08	; 8
 382:	80 93 62 00 	sts	0x0062, r24
 386:	80 91 62 00 	lds	r24, 0x0062
 38a:	87 7f       	andi	r24, 0xF7	; 247
 38c:	80 93 62 00 	sts	0x0062, r24
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	98 e1       	ldi	r25, 0x18	; 24
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <lcd_init+0xba>
 398:	00 c0       	rjmp	.+0      	; 0x39a <lcd_init+0xc0>
 39a:	00 00       	nop
 39c:	1f b8       	out	0x0f, r1	; 15
 39e:	77 9b       	sbis	0x0e, 7	; 14
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <lcd_init+0xc4>
 3a2:	86 e0       	ldi	r24, 0x06	; 6
 3a4:	8f b9       	out	0x0f, r24	; 15
 3a6:	77 9b       	sbis	0x0e, 7	; 14
 3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <lcd_init+0xcc>
 3aa:	80 91 62 00 	lds	r24, 0x0062
 3ae:	88 60       	ori	r24, 0x08	; 8
 3b0:	80 93 62 00 	sts	0x0062, r24
 3b4:	80 91 62 00 	lds	r24, 0x0062
 3b8:	87 7f       	andi	r24, 0xF7	; 247
 3ba:	80 93 62 00 	sts	0x0062, r24
 3be:	95 ec       	ldi	r25, 0xC5	; 197
 3c0:	9a 95       	dec	r25
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_init+0xe6>
 3c4:	00 00       	nop
 3c6:	1f b8       	out	0x0f, r1	; 15
 3c8:	77 9b       	sbis	0x0e, 7	; 14
 3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <lcd_init+0xee>
 3cc:	8e e0       	ldi	r24, 0x0E	; 14
 3ce:	8f b9       	out	0x0f, r24	; 15
 3d0:	77 9b       	sbis	0x0e, 7	; 14
 3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <lcd_init+0xf6>
 3d4:	80 91 62 00 	lds	r24, 0x0062
 3d8:	88 60       	ori	r24, 0x08	; 8
 3da:	80 93 62 00 	sts	0x0062, r24
 3de:	80 91 62 00 	lds	r24, 0x0062
 3e2:	87 7f       	andi	r24, 0xF7	; 247
 3e4:	80 93 62 00 	sts	0x0062, r24
 3e8:	85 ec       	ldi	r24, 0xC5	; 197
 3ea:	8a 95       	dec	r24
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <lcd_init+0x110>
 3ee:	00 00       	nop
 3f0:	08 95       	ret

000003f2 <main>:





int main(){
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	00 d0       	rcall	.+0      	; 0x3f8 <main+0x6>
 3f8:	00 d0       	rcall	.+0      	; 0x3fa <main+0x8>
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
    
    USART0_Init(MYUBRR);
 3fe:	87 e6       	ldi	r24, 0x67	; 103
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 9c 00 	call	0x138	; 0x138 <USART0_Init>
    USART1_Init(MYUBRR);
 406:	87 e6       	ldi	r24, 0x67	; 103
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 52 00 	call	0xa4	; 0xa4 <USART1_Init>
	spi_init();
 40e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <spi_init>
	lcd_init();
 412:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_init>
    unsigned char data[MAX_STRING_SIZE];

    while (1){
        USART1_Receive_String(data);
 416:	ce 01       	movw	r24, r28
 418:	01 96       	adiw	r24, 0x01	; 1
 41a:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Receive_String>
		clear_display();
 41e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <clear_display>
		string2lcd(data);
 422:	ce 01       	movw	r24, r28
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	0e 94 2f 01 	call	0x25e	; 0x25e <string2lcd>
        USART0_send_string(data);
 42a:	ce 01       	movw	r24, r28
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	0e 94 b2 00 	call	0x164	; 0x164 <USART0_send_string>
		USART0_Receive_String(data);
 432:	ce 01       	movw	r24, r28
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	0e 94 c2 00 	call	0x184	; 0x184 <USART0_Receive_String>
		USART1_send_string(data);
 43a:	ce 01       	movw	r24, r28
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	0e 94 6d 00 	call	0xda	; 0xda <USART1_send_string>
		home_line2();
 442:	0e 94 03 01 	call	0x206	; 0x206 <home_line2>
		string2lcd(data);
 446:	ce 01       	movw	r24, r28
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	0e 94 2f 01 	call	0x25e	; 0x25e <string2lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44e:	2f ef       	ldi	r18, 0xFF	; 255
 450:	81 ee       	ldi	r24, 0xE1	; 225
 452:	94 e0       	ldi	r25, 0x04	; 4
 454:	21 50       	subi	r18, 0x01	; 1
 456:	80 40       	sbci	r24, 0x00	; 0
 458:	90 40       	sbci	r25, 0x00	; 0
 45a:	e1 f7       	brne	.-8      	; 0x454 <main+0x62>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0x6c>
 45e:	00 00       	nop
 460:	da cf       	rjmp	.-76     	; 0x416 <main+0x24>

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
