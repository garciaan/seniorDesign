
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000240  00800100  0000246a  000024fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000246a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800340  00800340  0000273e  2**0
                  ALLOC
  3 .stab         000054c0  00000000  00000000  00002740  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c7f  00000000  00000000  00007c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000987f  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00009890  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  000098cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  0000a04c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  0000a764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000a781  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__ctors_end>
       4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       8:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      10:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_5>
      18:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_6>
      1c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      20:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      24:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      28:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      2c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      30:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      34:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      3c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      40:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      44:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      48:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      4c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      50:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      54:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      58:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      5c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      60:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      64:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      68:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_26>
      6c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      70:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      74:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      78:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      7c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      80:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      84:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      88:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__trampolines_end>:
      ba:	00 40       	sbci	r16, 0x00	; 0
      bc:	7a 10       	cpse	r7, r10
      be:	f3 5a       	subi	r31, 0xA3	; 163
      c0:	00 a0       	ldd	r0, Z+32	; 0x20
      c2:	72 4e       	sbci	r23, 0xE2	; 226
      c4:	18 09       	sbc	r17, r8
      c6:	00 10       	cpse	r0, r0
      c8:	a5 d4       	rcall	.+2378   	; 0xa14 <path2+0x106>
      ca:	e8 00       	.word	0x00e8	; ????
      cc:	00 e8       	ldi	r16, 0x80	; 128
      ce:	76 48       	sbci	r23, 0x86	; 134
      d0:	17 00       	.word	0x0017	; ????
      d2:	00 e4       	ldi	r16, 0x40	; 64
      d4:	0b 54       	subi	r16, 0x4B	; 75
      d6:	02 00       	.word	0x0002	; ????
      d8:	00 ca       	rjmp	.-3072   	; 0xfffff4da <__eeprom_end+0xff7ef4da>
      da:	9a 3b       	cpi	r25, 0xBA	; 186
      dc:	00 00       	nop
      de:	00 e1       	ldi	r16, 0x10	; 16
      e0:	f5 05       	cpc	r31, r5
      e2:	00 00       	nop
      e4:	80 96       	adiw	r24, 0x20	; 32
      e6:	98 00       	.word	0x0098	; ????
      e8:	00 00       	nop
      ea:	40 42       	sbci	r20, 0x20	; 32
      ec:	0f 00       	.word	0x000f	; ????
      ee:	00 00       	nop
      f0:	a0 86       	std	Z+8, r10	; 0x08
      f2:	01 00       	.word	0x0001	; ????
      f4:	00 00       	nop
      f6:	10 27       	eor	r17, r16
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	e8 03       	fmulsu	r22, r16
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	64 00       	.word	0x0064	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	0a 00       	.word	0x000a	; ????
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	00 00       	nop
     114:	2c 76       	andi	r18, 0x6C	; 108
     116:	d8 88       	ldd	r13, Y+16	; 0x10
     118:	dc 67       	ori	r29, 0x7C	; 124
     11a:	4f 08       	sbc	r4, r15
     11c:	23 df       	rcall	.-442    	; 0xffffff64 <__eeprom_end+0xff7eff64>
     11e:	c1 df       	rcall	.-126    	; 0xa2 <__SREG__+0x63>
     120:	ae 59       	subi	r26, 0x9E	; 158
     122:	e1 b1       	in	r30, 0x01	; 1
     124:	b7 96       	adiw	r30, 0x27	; 39
     126:	e5 e3       	ldi	r30, 0x35	; 53
     128:	e4 53       	subi	r30, 0x34	; 52
     12a:	c6 3a       	cpi	r28, 0xA6	; 166
     12c:	e6 51       	subi	r30, 0x16	; 22
     12e:	99 76       	andi	r25, 0x69	; 105
     130:	96 e8       	ldi	r25, 0x86	; 134
     132:	e6 c2       	rjmp	.+1484   	; 0x700 <path1+0x1c>
     134:	84 26       	eor	r8, r20
     136:	eb 89       	ldd	r30, Y+19	; 0x13
     138:	8c 9b       	sbis	0x11, 4	; 17
     13a:	62 ed       	ldi	r22, 0xD2	; 210
     13c:	40 7c       	andi	r20, 0xC0	; 192
     13e:	6f fc       	.word	0xfc6f	; ????
     140:	ef bc       	out	0x2f, r14	; 47
     142:	9c 9f       	mul	r25, r28
     144:	40 f2       	brcs	.-112    	; 0xd6 <__trampolines_end+0x1c>
     146:	ba a5       	ldd	r27, Y+42	; 0x2a
     148:	6f a5       	ldd	r22, Y+47	; 0x2f
     14a:	f4 90       	lpm	r15, Z
     14c:	05 5a       	subi	r16, 0xA5	; 165
     14e:	2a f7       	brpl	.-54     	; 0x11a <__trampolines_end+0x60>
     150:	5c 93       	st	X, r21
     152:	6b 6c       	ori	r22, 0xCB	; 203
     154:	f9 67       	ori	r31, 0x79	; 121
     156:	6d c1       	rjmp	.+730    	; 0x432 <__vector_6+0xcc>
     158:	1b fc       	.word	0xfc1b	; ????
     15a:	e0 e4       	ldi	r30, 0x40	; 64
     15c:	0d 47       	sbci	r16, 0x7D	; 125
     15e:	fe f5       	brtc	.+126    	; 0x1de <__do_clear_bss+0x4>
     160:	20 e6       	ldi	r18, 0x60	; 96
     162:	b5 00       	.word	0x00b5	; ????
     164:	d0 ed       	ldi	r29, 0xD0	; 208
     166:	90 2e       	mov	r9, r16
     168:	03 00       	.word	0x0003	; ????
     16a:	94 35       	cpi	r25, 0x54	; 84
     16c:	77 05       	cpc	r23, r7
     16e:	00 80       	ld	r0, Z
     170:	84 1e       	adc	r8, r20
     172:	08 00       	.word	0x0008	; ????
     174:	00 20       	and	r0, r0
     176:	4e 0a       	sbc	r4, r30
     178:	00 00       	nop
     17a:	00 c8       	rjmp	.-4096   	; 0xfffff17c <__eeprom_end+0xff7ef17c>
     17c:	0c 33       	cpi	r16, 0x3C	; 60
     17e:	33 33       	cpi	r19, 0x33	; 51
     180:	33 0f       	add	r19, r19
     182:	98 6e       	ori	r25, 0xE8	; 232
     184:	12 83       	std	Z+2, r17	; 0x02
     186:	11 41       	sbci	r17, 0x11	; 17
     188:	ef 8d       	ldd	r30, Y+31	; 0x1f
     18a:	21 14       	cp	r2, r1
     18c:	89 3b       	cpi	r24, 0xB9	; 185
     18e:	e6 55       	subi	r30, 0x56	; 86
     190:	16 cf       	rjmp	.-468    	; 0xffffffbe <__eeprom_end+0xff7effbe>
     192:	fe e6       	ldi	r31, 0x6E	; 110
     194:	db 18       	sub	r13, r11
     196:	d1 84       	ldd	r13, Z+9	; 0x09
     198:	4b 38       	cpi	r20, 0x8B	; 139
     19a:	1b f7       	brvc	.-58     	; 0x162 <__trampolines_end+0xa8>
     19c:	7c 1d       	adc	r23, r12
     19e:	90 1d       	adc	r25, r0
     1a0:	a4 bb       	out	0x14, r26	; 20
     1a2:	e4 24       	eor	r14, r4
     1a4:	20 32       	cpi	r18, 0x20	; 32
     1a6:	84 72       	andi	r24, 0x24	; 36
     1a8:	5e 22       	and	r5, r30
     1aa:	81 00       	.word	0x0081	; ????
     1ac:	c9 f1       	breq	.+114    	; 0x220 <__vector_5+0x2a>
     1ae:	24 ec       	ldi	r18, 0xC4	; 196
     1b0:	a1 e5       	ldi	r26, 0x51	; 81
     1b2:	3d 27       	eor	r19, r29

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d0 e1       	ldi	r29, 0x10	; 16
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	13 e0       	ldi	r17, 0x03	; 3
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	ea e6       	ldi	r30, 0x6A	; 106
     1c8:	f4 e2       	ldi	r31, 0x24	; 36
     1ca:	00 e0       	ldi	r16, 0x00	; 0
     1cc:	0b bf       	out	0x3b, r16	; 59
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__do_copy_data+0x14>
     1d0:	07 90       	elpm	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	a0 34       	cpi	r26, 0x40	; 64
     1d6:	b1 07       	cpc	r27, r17
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <__do_copy_data+0x10>

000001da <__do_clear_bss>:
     1da:	23 e0       	ldi	r18, 0x03	; 3
     1dc:	a0 e4       	ldi	r26, 0x40	; 64
     1de:	b3 e0       	ldi	r27, 0x03	; 3
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <.do_clear_bss_start>

000001e2 <.do_clear_bss_loop>:
     1e2:	1d 92       	st	X+, r1

000001e4 <.do_clear_bss_start>:
     1e4:	a0 35       	cpi	r26, 0x50	; 80
     1e6:	b2 07       	cpc	r27, r18
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <.do_clear_bss_loop>
     1ea:	0e 94 ac 0b 	call	0x1758	; 0x1758 <main>
     1ee:	0c 94 33 12 	jmp	0x2466	; 0x2466 <_exit>

000001f2 <__bad_interrupt>:
     1f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f6 <__vector_5>:
    }

    return 0;
}

ISR(INT4_vect){  //Left bumper on PE4
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	11 24       	eor	r1, r1
     200:	0b b6       	in	r0, 0x3b	; 59
     202:	0f 92       	push	r0
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	2f 93       	push	r18
     20e:	3f 93       	push	r19
     210:	4f 93       	push	r20
     212:	5f 93       	push	r21
     214:	6f 93       	push	r22
     216:	7f 93       	push	r23
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	af 93       	push	r26
     21e:	bf 93       	push	r27
     220:	ef 93       	push	r30
     222:	ff 93       	push	r31
    set_rgb(RED);
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 4e 0b 	call	0x169c	; 0x169c <set_rgb>
    object_detected = 1;
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	90 93 41 03 	sts	0x0341, r25
     23c:	80 93 40 03 	sts	0x0340, r24
    USART0_send_string((unsigned char *)"Left Bumper Hit\r\n");
     240:	82 e0       	ldi	r24, 0x02	; 2
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>

    //reverse
    USART0_send_string((unsigned char *)"Reversing\r\n");
     248:	84 e1       	ldi	r24, 0x14	; 20
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(0,0,STABLE_Z);
     250:	60 91 00 01 	lds	r22, 0x0100
     254:	70 91 01 01 	lds	r23, 0x0101
     258:	07 2e       	mov	r0, r23
     25a:	00 0c       	add	r0, r0
     25c:	88 0b       	sbc	r24, r24
     25e:	99 0b       	sbc	r25, r25
     260:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     264:	7b 01       	movw	r14, r22
     266:	8c 01       	movw	r16, r24
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	a9 01       	movw	r20, r18
     26e:	ca 01       	movw	r24, r20
     270:	b9 01       	movw	r22, r18
     272:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     276:	2f ef       	ldi	r18, 0xFF	; 255
     278:	83 ed       	ldi	r24, 0xD3	; 211
     27a:	90 e3       	ldi	r25, 0x30	; 48
     27c:	21 50       	subi	r18, 0x01	; 1
     27e:	80 40       	sbci	r24, 0x00	; 0
     280:	90 40       	sbci	r25, 0x00	; 0
     282:	e1 f7       	brne	.-8      	; 0x27c <__vector_5+0x86>
     284:	00 c0       	rjmp	.+0      	; 0x286 <__vector_5+0x90>
     286:	00 00       	nop
    _delay_ms(1000);
    

    move (50,50,STABLE_Z);
     288:	60 91 00 01 	lds	r22, 0x0100
     28c:	70 91 01 01 	lds	r23, 0x0101
     290:	07 2e       	mov	r0, r23
     292:	00 0c       	add	r0, r0
     294:	88 0b       	sbc	r24, r24
     296:	99 0b       	sbc	r25, r25
     298:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     29c:	7b 01       	movw	r14, r22
     29e:	8c 01       	movw	r16, r24
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	48 e4       	ldi	r20, 0x48	; 72
     2a6:	52 e4       	ldi	r21, 0x42	; 66
     2a8:	ca 01       	movw	r24, r20
     2aa:	b9 01       	movw	r22, r18
     2ac:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     2b0:	2f ef       	ldi	r18, 0xFF	; 255
     2b2:	89 e6       	ldi	r24, 0x69	; 105
     2b4:	98 e1       	ldi	r25, 0x18	; 24
     2b6:	21 50       	subi	r18, 0x01	; 1
     2b8:	80 40       	sbci	r24, 0x00	; 0
     2ba:	90 40       	sbci	r25, 0x00	; 0
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <__vector_5+0xc0>
     2be:	00 c0       	rjmp	.+0      	; 0x2c0 <__vector_5+0xca>
     2c0:	00 00       	nop
    _delay_ms(500);

    //turn left
    USART0_send_string((unsigned char *)"Turning Right\r\n");
     2c2:	80 e2       	ldi	r24, 0x20	; 32
     2c4:	91 e0       	ldi	r25, 0x01	; 1
     2c6:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(50 - TURN_SPEED,50 + TURN_SPEED,STABLE_Z);
     2ca:	60 91 00 01 	lds	r22, 0x0100
     2ce:	70 91 01 01 	lds	r23, 0x0101
     2d2:	07 2e       	mov	r0, r23
     2d4:	00 0c       	add	r0, r0
     2d6:	88 0b       	sbc	r24, r24
     2d8:	99 0b       	sbc	r25, r25
     2da:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     2de:	7b 01       	movw	r14, r22
     2e0:	8c 01       	movw	r16, r24
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	42 e8       	ldi	r20, 0x82	; 130
     2e8:	52 e4       	ldi	r21, 0x42	; 66
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	8c e0       	ldi	r24, 0x0C	; 12
     2f0:	92 e4       	ldi	r25, 0x42	; 66
     2f2:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     2f6:	2f ef       	ldi	r18, 0xFF	; 255
     2f8:	83 ed       	ldi	r24, 0xD3	; 211
     2fa:	90 e3       	ldi	r25, 0x30	; 48
     2fc:	21 50       	subi	r18, 0x01	; 1
     2fe:	80 40       	sbci	r24, 0x00	; 0
     300:	90 40       	sbci	r25, 0x00	; 0
     302:	e1 f7       	brne	.-8      	; 0x2fc <__vector_5+0x106>
     304:	00 c0       	rjmp	.+0      	; 0x306 <__vector_5+0x110>
     306:	00 00       	nop
    _delay_ms(1000);
    move(50,50,STABLE_Z);
     308:	60 91 00 01 	lds	r22, 0x0100
     30c:	70 91 01 01 	lds	r23, 0x0101
     310:	07 2e       	mov	r0, r23
     312:	00 0c       	add	r0, r0
     314:	88 0b       	sbc	r24, r24
     316:	99 0b       	sbc	r25, r25
     318:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     31c:	7b 01       	movw	r14, r22
     31e:	8c 01       	movw	r16, r24
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	48 e4       	ldi	r20, 0x48	; 72
     326:	52 e4       	ldi	r21, 0x42	; 66
     328:	ca 01       	movw	r24, r20
     32a:	b9 01       	movw	r22, r18
     32c:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
    USART0_send_string((unsigned char*)"Resuming\r\n");
     330:	80 e3       	ldi	r24, 0x30	; 48
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
}
     338:	ff 91       	pop	r31
     33a:	ef 91       	pop	r30
     33c:	bf 91       	pop	r27
     33e:	af 91       	pop	r26
     340:	9f 91       	pop	r25
     342:	8f 91       	pop	r24
     344:	7f 91       	pop	r23
     346:	6f 91       	pop	r22
     348:	5f 91       	pop	r21
     34a:	4f 91       	pop	r20
     34c:	3f 91       	pop	r19
     34e:	2f 91       	pop	r18
     350:	1f 91       	pop	r17
     352:	0f 91       	pop	r16
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	0f 90       	pop	r0
     35a:	0b be       	out	0x3b, r0	; 59
     35c:	0f 90       	pop	r0
     35e:	0f be       	out	0x3f, r0	; 63
     360:	0f 90       	pop	r0
     362:	1f 90       	pop	r1
     364:	18 95       	reti

00000366 <__vector_6>:

ISR(INT5_vect){  //Right bumper on PE5
     366:	1f 92       	push	r1
     368:	0f 92       	push	r0
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	0f 92       	push	r0
     36e:	11 24       	eor	r1, r1
     370:	0b b6       	in	r0, 0x3b	; 59
     372:	0f 92       	push	r0
     374:	ef 92       	push	r14
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	2f 93       	push	r18
     37e:	3f 93       	push	r19
     380:	4f 93       	push	r20
     382:	5f 93       	push	r21
     384:	6f 93       	push	r22
     386:	7f 93       	push	r23
     388:	8f 93       	push	r24
     38a:	9f 93       	push	r25
     38c:	af 93       	push	r26
     38e:	bf 93       	push	r27
     390:	ef 93       	push	r30
     392:	ff 93       	push	r31
    set_rgb(RED);
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	8f ef       	ldi	r24, 0xFF	; 255
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 4e 0b 	call	0x169c	; 0x169c <set_rgb>
    object_detected = 1;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	90 93 41 03 	sts	0x0341, r25
     3ac:	80 93 40 03 	sts	0x0340, r24
    USART0_send_string((unsigned char *)"Right Bumper Hit\r\n");
     3b0:	8b e3       	ldi	r24, 0x3B	; 59
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>

    //reverse
    USART0_send_string((unsigned char *)"Reversing\r\n");
     3b8:	84 e1       	ldi	r24, 0x14	; 20
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(0,0,STABLE_Z);
     3c0:	60 91 00 01 	lds	r22, 0x0100
     3c4:	70 91 01 01 	lds	r23, 0x0101
     3c8:	07 2e       	mov	r0, r23
     3ca:	00 0c       	add	r0, r0
     3cc:	88 0b       	sbc	r24, r24
     3ce:	99 0b       	sbc	r25, r25
     3d0:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     3d4:	7b 01       	movw	r14, r22
     3d6:	8c 01       	movw	r16, r24
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	a9 01       	movw	r20, r18
     3de:	ca 01       	movw	r24, r20
     3e0:	b9 01       	movw	r22, r18
     3e2:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     3e6:	2f ef       	ldi	r18, 0xFF	; 255
     3e8:	83 ed       	ldi	r24, 0xD3	; 211
     3ea:	90 e3       	ldi	r25, 0x30	; 48
     3ec:	21 50       	subi	r18, 0x01	; 1
     3ee:	80 40       	sbci	r24, 0x00	; 0
     3f0:	90 40       	sbci	r25, 0x00	; 0
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <__vector_6+0x86>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <__vector_6+0x90>
     3f6:	00 00       	nop
    _delay_ms(1000);
    

    move (50,50,STABLE_Z);
     3f8:	60 91 00 01 	lds	r22, 0x0100
     3fc:	70 91 01 01 	lds	r23, 0x0101
     400:	07 2e       	mov	r0, r23
     402:	00 0c       	add	r0, r0
     404:	88 0b       	sbc	r24, r24
     406:	99 0b       	sbc	r25, r25
     408:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     40c:	7b 01       	movw	r14, r22
     40e:	8c 01       	movw	r16, r24
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	48 e4       	ldi	r20, 0x48	; 72
     416:	52 e4       	ldi	r21, 0x42	; 66
     418:	ca 01       	movw	r24, r20
     41a:	b9 01       	movw	r22, r18
     41c:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     420:	2f ef       	ldi	r18, 0xFF	; 255
     422:	89 e6       	ldi	r24, 0x69	; 105
     424:	98 e1       	ldi	r25, 0x18	; 24
     426:	21 50       	subi	r18, 0x01	; 1
     428:	80 40       	sbci	r24, 0x00	; 0
     42a:	90 40       	sbci	r25, 0x00	; 0
     42c:	e1 f7       	brne	.-8      	; 0x426 <__vector_6+0xc0>
     42e:	00 c0       	rjmp	.+0      	; 0x430 <__vector_6+0xca>
     430:	00 00       	nop
    _delay_ms(500);

    //turn left
    USART0_send_string((unsigned char *)"Turning Left\r\n");
     432:	8e e4       	ldi	r24, 0x4E	; 78
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(50 + TURN_SPEED,50 - TURN_SPEED,STABLE_Z);
     43a:	60 91 00 01 	lds	r22, 0x0100
     43e:	70 91 01 01 	lds	r23, 0x0101
     442:	07 2e       	mov	r0, r23
     444:	00 0c       	add	r0, r0
     446:	88 0b       	sbc	r24, r24
     448:	99 0b       	sbc	r25, r25
     44a:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	4c e0       	ldi	r20, 0x0C	; 12
     458:	52 e4       	ldi	r21, 0x42	; 66
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	82 e8       	ldi	r24, 0x82	; 130
     460:	92 e4       	ldi	r25, 0x42	; 66
     462:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     466:	2f ef       	ldi	r18, 0xFF	; 255
     468:	83 ed       	ldi	r24, 0xD3	; 211
     46a:	90 e3       	ldi	r25, 0x30	; 48
     46c:	21 50       	subi	r18, 0x01	; 1
     46e:	80 40       	sbci	r24, 0x00	; 0
     470:	90 40       	sbci	r25, 0x00	; 0
     472:	e1 f7       	brne	.-8      	; 0x46c <__vector_6+0x106>
     474:	00 c0       	rjmp	.+0      	; 0x476 <__vector_6+0x110>
     476:	00 00       	nop
    _delay_ms(1000);
    move(50,50,STABLE_Z);
     478:	60 91 00 01 	lds	r22, 0x0100
     47c:	70 91 01 01 	lds	r23, 0x0101
     480:	07 2e       	mov	r0, r23
     482:	00 0c       	add	r0, r0
     484:	88 0b       	sbc	r24, r24
     486:	99 0b       	sbc	r25, r25
     488:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     48c:	7b 01       	movw	r14, r22
     48e:	8c 01       	movw	r16, r24
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	48 e4       	ldi	r20, 0x48	; 72
     496:	52 e4       	ldi	r21, 0x42	; 66
     498:	ca 01       	movw	r24, r20
     49a:	b9 01       	movw	r22, r18
     49c:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
    USART0_send_string((unsigned char*)"Resuming\r\n");
     4a0:	80 e3       	ldi	r24, 0x30	; 48
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	bf 91       	pop	r27
     4ae:	af 91       	pop	r26
     4b0:	9f 91       	pop	r25
     4b2:	8f 91       	pop	r24
     4b4:	7f 91       	pop	r23
     4b6:	6f 91       	pop	r22
     4b8:	5f 91       	pop	r21
     4ba:	4f 91       	pop	r20
     4bc:	3f 91       	pop	r19
     4be:	2f 91       	pop	r18
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	0f 90       	pop	r0
     4ca:	0b be       	out	0x3b, r0	; 59
     4cc:	0f 90       	pop	r0
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	0f 90       	pop	r0
     4d2:	1f 90       	pop	r1
     4d4:	18 95       	reti

000004d6 <__vector_26>:
        Depth: ddd.dddddd
        Object: (NO | YES)
        Heading: ddd.dddddd
        Water Level: (OK | WARNING | ERROR) : dd.dd
*******************/
ISR(TIMER3_COMPA_vect){ 
     4d6:	1f 92       	push	r1
     4d8:	0f 92       	push	r0
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	0f 92       	push	r0
     4de:	11 24       	eor	r1, r1
     4e0:	0b b6       	in	r0, 0x3b	; 59
     4e2:	0f 92       	push	r0
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	2f 93       	push	r18
     4ea:	3f 93       	push	r19
     4ec:	4f 93       	push	r20
     4ee:	5f 93       	push	r21
     4f0:	6f 93       	push	r22
     4f2:	7f 93       	push	r23
     4f4:	8f 93       	push	r24
     4f6:	9f 93       	push	r25
     4f8:	af 93       	push	r26
     4fa:	bf 93       	push	r27
     4fc:	ef 93       	push	r30
     4fe:	ff 93       	push	r31
    USART0_send_string((unsigned char *)"Depth: ");
     500:	8d e5       	ldi	r24, 0x5D	; 93
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    USART0_send_string((unsigned char *)dtostrf(get_depth_feet(),3,7,buffer));
     508:	0e 94 45 0b 	call	0x168a	; 0x168a <get_depth_feet>
     50c:	06 e4       	ldi	r16, 0x46	; 70
     50e:	13 e0       	ldi	r17, 0x03	; 3
     510:	27 e0       	ldi	r18, 0x07	; 7
     512:	43 e0       	ldi	r20, 0x03	; 3
     514:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <dtostrf>
     518:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    USART0_send_string((unsigned char*)"\r\n");
     51c:	84 e2       	ldi	r24, 0x24	; 36
     51e:	93 e0       	ldi	r25, 0x03	; 3
     520:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    USART0_send_string((unsigned char*)"Object: ");
     524:	85 e6       	ldi	r24, 0x65	; 101
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    if (object_detected){
     52c:	80 91 40 03 	lds	r24, 0x0340
     530:	90 91 41 03 	lds	r25, 0x0341
     534:	89 2b       	or	r24, r25
     536:	c9 f5       	brne	.+114    	; 0x5aa <__vector_26+0xd4>
        USART0_send_string((unsigned char*)"YES");
        object_detected = 0;
    }
    else {
        USART0_send_string((unsigned char*)"NO");
     538:	82 e7       	ldi	r24, 0x72	; 114
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    }
    USART0_send_string((unsigned char*)"\r\n");
     540:	84 e2       	ldi	r24, 0x24	; 36
     542:	93 e0       	ldi	r25, 0x03	; 3
     544:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    USART0_send_string((unsigned char*)"Heading: ");
     548:	85 e7       	ldi	r24, 0x75	; 117
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    USART0_send_string((unsigned char*)"Not yet implemented");
     550:	8f e7       	ldi	r24, 0x7F	; 127
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    USART0_send_string((unsigned char*)"\r\n");
     558:	84 e2       	ldi	r24, 0x24	; 36
     55a:	93 e0       	ldi	r25, 0x03	; 3
     55c:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    USART0_send_string((unsigned char*)"Water Level: ");
     560:	83 e9       	ldi	r24, 0x93	; 147
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    USART0_send_string((unsigned char*)"Not yet implemented");
     568:	8f e7       	ldi	r24, 0x7F	; 127
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    USART0_send_string((unsigned char*)"\r\n");
     570:	84 e2       	ldi	r24, 0x24	; 36
     572:	93 e0       	ldi	r25, 0x03	; 3
     574:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    USART0_send_string((unsigned char*)"\r\n");
     578:	84 e2       	ldi	r24, 0x24	; 36
     57a:	93 e0       	ldi	r25, 0x03	; 3
     57c:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
}
     580:	ff 91       	pop	r31
     582:	ef 91       	pop	r30
     584:	bf 91       	pop	r27
     586:	af 91       	pop	r26
     588:	9f 91       	pop	r25
     58a:	8f 91       	pop	r24
     58c:	7f 91       	pop	r23
     58e:	6f 91       	pop	r22
     590:	5f 91       	pop	r21
     592:	4f 91       	pop	r20
     594:	3f 91       	pop	r19
     596:	2f 91       	pop	r18
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	0f 90       	pop	r0
     59e:	0b be       	out	0x3b, r0	; 59
     5a0:	0f 90       	pop	r0
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	0f 90       	pop	r0
     5a6:	1f 90       	pop	r1
     5a8:	18 95       	reti
    USART0_send_string((unsigned char *)"Depth: ");
    USART0_send_string((unsigned char *)dtostrf(get_depth_feet(),3,7,buffer));
    USART0_send_string((unsigned char*)"\r\n");
    USART0_send_string((unsigned char*)"Object: ");
    if (object_detected){
        USART0_send_string((unsigned char*)"YES");
     5aa:	8e e6       	ldi	r24, 0x6E	; 110
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
        object_detected = 0;
     5b2:	10 92 41 03 	sts	0x0341, r1
     5b6:	10 92 40 03 	sts	0x0340, r1
     5ba:	c2 cf       	rjmp	.-124    	; 0x540 <__vector_26+0x6a>

000005bc <dive>:
    USART0_send_string((unsigned char*)"Not yet implemented");
    USART0_send_string((unsigned char*)"\r\n");
    USART0_send_string((unsigned char*)"\r\n");
}

void dive(float depth){
     5bc:	4f 92       	push	r4
     5be:	5f 92       	push	r5
     5c0:	6f 92       	push	r6
     5c2:	7f 92       	push	r7
     5c4:	8f 92       	push	r8
     5c6:	9f 92       	push	r9
     5c8:	af 92       	push	r10
     5ca:	bf 92       	push	r11
     5cc:	ef 92       	push	r14
     5ce:	ff 92       	push	r15
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	2b 01       	movw	r4, r22
     5d6:	3c 01       	movw	r6, r24
    float current_depth = 0;
    while (current_depth < depth){
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	a9 01       	movw	r20, r18
     5de:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__gesf2>
     5e2:	18 16       	cp	r1, r24
     5e4:	5c f5       	brge	.+86     	; 0x63c <dive+0x80>
        current_depth = get_depth_feet();
     5e6:	0e 94 45 0b 	call	0x168a	; 0x168a <get_depth_feet>
     5ea:	4b 01       	movw	r8, r22
     5ec:	5c 01       	movw	r10, r24
        move(50,50,STABLE_Z + 20);
     5ee:	60 91 00 01 	lds	r22, 0x0100
     5f2:	70 91 01 01 	lds	r23, 0x0101
     5f6:	6c 5e       	subi	r22, 0xEC	; 236
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	07 2e       	mov	r0, r23
     5fc:	00 0c       	add	r0, r0
     5fe:	88 0b       	sbc	r24, r24
     600:	99 0b       	sbc	r25, r25
     602:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     606:	7b 01       	movw	r14, r22
     608:	8c 01       	movw	r16, r24
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	48 e4       	ldi	r20, 0x48	; 72
     610:	52 e4       	ldi	r21, 0x42	; 66
     612:	ca 01       	movw	r24, r20
     614:	b9 01       	movw	r22, r18
     616:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     61a:	2f ef       	ldi	r18, 0xFF	; 255
     61c:	81 ee       	ldi	r24, 0xE1	; 225
     61e:	94 e0       	ldi	r25, 0x04	; 4
     620:	21 50       	subi	r18, 0x01	; 1
     622:	80 40       	sbci	r24, 0x00	; 0
     624:	90 40       	sbci	r25, 0x00	; 0
     626:	e1 f7       	brne	.-8      	; 0x620 <dive+0x64>
     628:	00 c0       	rjmp	.+0      	; 0x62a <dive+0x6e>
     62a:	00 00       	nop
    USART0_send_string((unsigned char*)"\r\n");
}

void dive(float depth){
    float current_depth = 0;
    while (current_depth < depth){
     62c:	a5 01       	movw	r20, r10
     62e:	94 01       	movw	r18, r8
     630:	c3 01       	movw	r24, r6
     632:	b2 01       	movw	r22, r4
     634:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__gesf2>
     638:	18 16       	cp	r1, r24
     63a:	ac f2       	brlt	.-86     	; 0x5e6 <dive+0x2a>
        current_depth = get_depth_feet();
        move(50,50,STABLE_Z + 20);
        _delay_ms(100);
    }
    move(50,50,STABLE_Z);
     63c:	60 91 00 01 	lds	r22, 0x0100
     640:	70 91 01 01 	lds	r23, 0x0101
     644:	07 2e       	mov	r0, r23
     646:	00 0c       	add	r0, r0
     648:	88 0b       	sbc	r24, r24
     64a:	99 0b       	sbc	r25, r25
     64c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     650:	7b 01       	movw	r14, r22
     652:	8c 01       	movw	r16, r24
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	48 e4       	ldi	r20, 0x48	; 72
     65a:	52 e4       	ldi	r21, 0x42	; 66
     65c:	ca 01       	movw	r24, r20
     65e:	b9 01       	movw	r22, r18
     660:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
}
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	bf 90       	pop	r11
     66e:	af 90       	pop	r10
     670:	9f 90       	pop	r9
     672:	8f 90       	pop	r8
     674:	7f 90       	pop	r7
     676:	6f 90       	pop	r6
     678:	5f 90       	pop	r5
     67a:	4f 90       	pop	r4
     67c:	08 95       	ret

0000067e <enable_bumpers>:
/*********
* Need to do rising edge
**********/
void enable_bumpers(){
    //Set pins as inputs
    DDRE &= ~(1 << 6);
     67e:	16 98       	cbi	0x02, 6	; 2
    DDRE &= ~(1 << 7);
     680:	17 98       	cbi	0x02, 7	; 2
    
    //Enable internal pullups
    PORTE |= (1 << 6);
     682:	1e 9a       	sbi	0x03, 6	; 3
    PORTE |= (1 << 7);
     684:	1f 9a       	sbi	0x03, 7	; 3

    //Set both interrupt 4 and 5 to rising edge
    EICRB |= (1 << ISC61) | (1 << ISC60);
     686:	8a b7       	in	r24, 0x3a	; 58
     688:	80 63       	ori	r24, 0x30	; 48
     68a:	8a bf       	out	0x3a, r24	; 58
    EICRB |= (1 << ISC71) | (1 << ISC70);
     68c:	8a b7       	in	r24, 0x3a	; 58
     68e:	80 6c       	ori	r24, 0xC0	; 192
     690:	8a bf       	out	0x3a, r24	; 58

    //enable the interrupts
    EIMSK |= (1 << INT6) | (1 << INT7);
     692:	89 b7       	in	r24, 0x39	; 57
     694:	80 6c       	ori	r24, 0xC0	; 192
     696:	89 bf       	out	0x39, r24	; 57
     698:	08 95       	ret

0000069a <init_data_timer>:
}
void init_data_timer(){
    //CTC Mode
    TCCR3A |= (1 << COM3A1);
     69a:	eb e8       	ldi	r30, 0x8B	; 139
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	80 68       	ori	r24, 0x80	; 128
     6a2:	80 83       	st	Z, r24
    TCCR3A &= ~(1 << COM3A0);
     6a4:	80 81       	ld	r24, Z
     6a6:	8f 7b       	andi	r24, 0xBF	; 191
     6a8:	80 83       	st	Z, r24

    //Prescalar 256
    TCCR3B |= (1 << CS32);
     6aa:	ea e8       	ldi	r30, 0x8A	; 138
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	84 60       	ori	r24, 0x04	; 4
     6b2:	80 83       	st	Z, r24

    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     6b4:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     6b6:	f8 94       	cli
    /* Set TCNTn to 1 */
    TCNT3 = 1;
     6b8:	21 e0       	ldi	r18, 0x01	; 1
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	30 93 89 00 	sts	0x0089, r19
     6c0:	20 93 88 00 	sts	0x0088, r18
    sei();
     6c4:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     6c6:	8f bf       	out	0x3f, r24	; 63
    ICR3 = 65535;
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	9f ef       	ldi	r25, 0xFF	; 255
     6cc:	90 93 81 00 	sts	0x0081, r25
     6d0:	80 93 80 00 	sts	0x0080, r24
    OCR3A = 65535;
     6d4:	90 93 87 00 	sts	0x0087, r25
     6d8:	80 93 86 00 	sts	0x0086, r24

    //Enable timer3a interrupt
    ETIMSK = (1 << OCIE3A);
     6dc:	80 e1       	ldi	r24, 0x10	; 16
     6de:	80 93 7d 00 	sts	0x007D, r24
     6e2:	08 95       	ret

000006e4 <path1>:

}

void path1(){
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r\n");
     6ec:	81 ea       	ldi	r24, 0xA1	; 161
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(50 + (MOVE_SPEED/2),50 + (MOVE_SPEED/2),STABLE_Z);
     6f4:	60 91 00 01 	lds	r22, 0x0100
     6f8:	70 91 01 01 	lds	r23, 0x0101
     6fc:	07 2e       	mov	r0, r23
     6fe:	00 0c       	add	r0, r0
     700:	88 0b       	sbc	r24, r24
     702:	99 0b       	sbc	r25, r25
     704:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     708:	7b 01       	movw	r14, r22
     70a:	8c 01       	movw	r16, r24
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	46 e9       	ldi	r20, 0x96	; 150
     712:	52 e4       	ldi	r21, 0x42	; 66
     714:	ca 01       	movw	r24, r20
     716:	b9 01       	movw	r22, r18
     718:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	87 ea       	ldi	r24, 0xA7	; 167
     720:	91 e6       	ldi	r25, 0x61	; 97
     722:	21 50       	subi	r18, 0x01	; 1
     724:	80 40       	sbci	r24, 0x00	; 0
     726:	90 40       	sbci	r25, 0x00	; 0
     728:	e1 f7       	brne	.-8      	; 0x722 <path1+0x3e>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <path1+0x48>
     72c:	00 00       	nop
    _delay_ms(2000);
    //Down 3 seconds (aim for about 4 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Down");
    USART0_send_string((unsigned char*)"Move Down\r\n");
     72e:	80 eb       	ldi	r24, 0xB0	; 176
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move (50,50,0);
     736:	e1 2c       	mov	r14, r1
     738:	f1 2c       	mov	r15, r1
     73a:	87 01       	movw	r16, r14
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	48 e4       	ldi	r20, 0x48	; 72
     742:	52 e4       	ldi	r21, 0x42	; 66
     744:	ca 01       	movw	r24, r20
     746:	b9 01       	movw	r22, r18
     748:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     74c:	2f ef       	ldi	r18, 0xFF	; 255
     74e:	8b e7       	ldi	r24, 0x7B	; 123
     750:	92 e9       	ldi	r25, 0x92	; 146
     752:	21 50       	subi	r18, 0x01	; 1
     754:	80 40       	sbci	r24, 0x00	; 0
     756:	90 40       	sbci	r25, 0x00	; 0
     758:	e1 f7       	brne	.-8      	; 0x752 <path1+0x6e>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <path1+0x78>
     75c:	00 00       	nop
    _delay_ms(3000);
    //spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    USART0_send_string((unsigned char*)"Turn Left\r\n");
     75e:	8c eb       	ldi	r24, 0xBC	; 188
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     766:	60 91 00 01 	lds	r22, 0x0100
     76a:	70 91 01 01 	lds	r23, 0x0101
     76e:	07 2e       	mov	r0, r23
     770:	00 0c       	add	r0, r0
     772:	88 0b       	sbc	r24, r24
     774:	99 0b       	sbc	r25, r25
     776:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     77a:	7b 01       	movw	r14, r22
     77c:	8c 01       	movw	r16, r24
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	46 e9       	ldi	r20, 0x96	; 150
     784:	52 e4       	ldi	r21, 0x42	; 66
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	88 ec       	ldi	r24, 0xC8	; 200
     78c:	91 e4       	ldi	r25, 0x41	; 65
     78e:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     792:	2f ef       	ldi	r18, 0xFF	; 255
     794:	87 ea       	ldi	r24, 0xA7	; 167
     796:	91 e6       	ldi	r25, 0x61	; 97
     798:	21 50       	subi	r18, 0x01	; 1
     79a:	80 40       	sbci	r24, 0x00	; 0
     79c:	90 40       	sbci	r25, 0x00	; 0
     79e:	e1 f7       	brne	.-8      	; 0x798 <path1+0xb4>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <path1+0xbe>
     7a2:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r\n");
     7a4:	81 ea       	ldi	r24, 0xA1	; 161
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     7ac:	60 91 00 01 	lds	r22, 0x0100
     7b0:	70 91 01 01 	lds	r23, 0x0101
     7b4:	07 2e       	mov	r0, r23
     7b6:	00 0c       	add	r0, r0
     7b8:	88 0b       	sbc	r24, r24
     7ba:	99 0b       	sbc	r25, r25
     7bc:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     7c0:	7b 01       	movw	r14, r22
     7c2:	8c 01       	movw	r16, r24
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	46 e9       	ldi	r20, 0x96	; 150
     7ca:	52 e4       	ldi	r21, 0x42	; 66
     7cc:	ca 01       	movw	r24, r20
     7ce:	b9 01       	movw	r22, r18
     7d0:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	87 ea       	ldi	r24, 0xA7	; 167
     7d8:	91 e6       	ldi	r25, 0x61	; 97
     7da:	21 50       	subi	r18, 0x01	; 1
     7dc:	80 40       	sbci	r24, 0x00	; 0
     7de:	90 40       	sbci	r25, 0x00	; 0
     7e0:	e1 f7       	brne	.-8      	; 0x7da <path1+0xf6>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <path1+0x100>
     7e4:	00 00       	nop
    _delay_ms(2000);
    //Spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    USART0_send_string((unsigned char*)"Turn Left\r\n");
     7e6:	8c eb       	ldi	r24, 0xBC	; 188
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     7ee:	60 91 00 01 	lds	r22, 0x0100
     7f2:	70 91 01 01 	lds	r23, 0x0101
     7f6:	07 2e       	mov	r0, r23
     7f8:	00 0c       	add	r0, r0
     7fa:	88 0b       	sbc	r24, r24
     7fc:	99 0b       	sbc	r25, r25
     7fe:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     802:	7b 01       	movw	r14, r22
     804:	8c 01       	movw	r16, r24
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	46 e9       	ldi	r20, 0x96	; 150
     80c:	52 e4       	ldi	r21, 0x42	; 66
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	88 ec       	ldi	r24, 0xC8	; 200
     814:	91 e4       	ldi	r25, 0x41	; 65
     816:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     81a:	2f ef       	ldi	r18, 0xFF	; 255
     81c:	87 ea       	ldi	r24, 0xA7	; 167
     81e:	91 e6       	ldi	r25, 0x61	; 97
     820:	21 50       	subi	r18, 0x01	; 1
     822:	80 40       	sbci	r24, 0x00	; 0
     824:	90 40       	sbci	r25, 0x00	; 0
     826:	e1 f7       	brne	.-8      	; 0x820 <path1+0x13c>
     828:	00 c0       	rjmp	.+0      	; 0x82a <path1+0x146>
     82a:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r\n");
     82c:	81 ea       	ldi	r24, 0xA1	; 161
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     834:	60 91 00 01 	lds	r22, 0x0100
     838:	70 91 01 01 	lds	r23, 0x0101
     83c:	07 2e       	mov	r0, r23
     83e:	00 0c       	add	r0, r0
     840:	88 0b       	sbc	r24, r24
     842:	99 0b       	sbc	r25, r25
     844:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     848:	7b 01       	movw	r14, r22
     84a:	8c 01       	movw	r16, r24
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	46 e9       	ldi	r20, 0x96	; 150
     852:	52 e4       	ldi	r21, 0x42	; 66
     854:	ca 01       	movw	r24, r20
     856:	b9 01       	movw	r22, r18
     858:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     85c:	2f ef       	ldi	r18, 0xFF	; 255
     85e:	87 ea       	ldi	r24, 0xA7	; 167
     860:	91 e6       	ldi	r25, 0x61	; 97
     862:	21 50       	subi	r18, 0x01	; 1
     864:	80 40       	sbci	r24, 0x00	; 0
     866:	90 40       	sbci	r25, 0x00	; 0
     868:	e1 f7       	brne	.-8      	; 0x862 <path1+0x17e>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <path1+0x188>
     86c:	00 00       	nop
    _delay_ms(2000);
    //Up 3 seconds (resurface)
    // clear_display();
    // string2lcd((unsigned char *)"Up");
    USART0_send_string((unsigned char*)"Move Up\r\n");
     86e:	88 ec       	ldi	r24, 0xC8	; 200
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(50,50,100);
     876:	e1 2c       	mov	r14, r1
     878:	f1 2c       	mov	r15, r1
     87a:	08 ec       	ldi	r16, 0xC8	; 200
     87c:	12 e4       	ldi	r17, 0x42	; 66
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	48 e4       	ldi	r20, 0x48	; 72
     884:	52 e4       	ldi	r21, 0x42	; 66
     886:	ca 01       	movw	r24, r20
     888:	b9 01       	movw	r22, r18
     88a:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
    //Spin left 90 degrees
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    USART0_send_string((unsigned char*)"Move Forward\r\n");
     88e:	81 ea       	ldi	r24, 0xA1	; 161
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     896:	60 91 00 01 	lds	r22, 0x0100
     89a:	70 91 01 01 	lds	r23, 0x0101
     89e:	07 2e       	mov	r0, r23
     8a0:	00 0c       	add	r0, r0
     8a2:	88 0b       	sbc	r24, r24
     8a4:	99 0b       	sbc	r25, r25
     8a6:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     8aa:	7b 01       	movw	r14, r22
     8ac:	8c 01       	movw	r16, r24
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	46 e9       	ldi	r20, 0x96	; 150
     8b4:	52 e4       	ldi	r21, 0x42	; 66
     8b6:	ca 01       	movw	r24, r20
     8b8:	b9 01       	movw	r22, r18
     8ba:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
    //Spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    USART0_send_string((unsigned char*)"Turn Left\r\n");
     8be:	8c eb       	ldi	r24, 0xBC	; 188
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     8c6:	60 91 00 01 	lds	r22, 0x0100
     8ca:	70 91 01 01 	lds	r23, 0x0101
     8ce:	07 2e       	mov	r0, r23
     8d0:	00 0c       	add	r0, r0
     8d2:	88 0b       	sbc	r24, r24
     8d4:	99 0b       	sbc	r25, r25
     8d6:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     8da:	7b 01       	movw	r14, r22
     8dc:	8c 01       	movw	r16, r24
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	46 e9       	ldi	r20, 0x96	; 150
     8e4:	52 e4       	ldi	r21, 0x42	; 66
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	88 ec       	ldi	r24, 0xC8	; 200
     8ec:	91 e4       	ldi	r25, 0x41	; 65
     8ee:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     8f2:	2f ef       	ldi	r18, 0xFF	; 255
     8f4:	87 ea       	ldi	r24, 0xA7	; 167
     8f6:	91 e6       	ldi	r25, 0x61	; 97
     8f8:	21 50       	subi	r18, 0x01	; 1
     8fa:	80 40       	sbci	r24, 0x00	; 0
     8fc:	90 40       	sbci	r25, 0x00	; 0
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <path1+0x214>
     900:	00 c0       	rjmp	.+0      	; 0x902 <path1+0x21e>
     902:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Complete (back in some position as start)
}
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	08 95       	ret

0000090e <path2>:
void path2(){
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
    USART0_send_string((unsigned char *)"Diving (10 seconds)\r\n");
     916:	82 ed       	ldi	r24, 0xD2	; 210
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(1,1,STABLE_Z);
     91e:	60 91 00 01 	lds	r22, 0x0100
     922:	70 91 01 01 	lds	r23, 0x0101
     926:	07 2e       	mov	r0, r23
     928:	00 0c       	add	r0, r0
     92a:	88 0b       	sbc	r24, r24
     92c:	99 0b       	sbc	r25, r25
     92e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     932:	7b 01       	movw	r14, r22
     934:	8c 01       	movw	r16, r24
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 e8       	ldi	r20, 0x80	; 128
     93c:	5f e3       	ldi	r21, 0x3F	; 63
     93e:	ca 01       	movw	r24, r20
     940:	b9 01       	movw	r22, r18
     942:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     946:	2a ea       	ldi	r18, 0xAA	; 170
     948:	36 ee       	ldi	r19, 0xE6	; 230
     94a:	86 e9       	ldi	r24, 0x96	; 150
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	21 50       	subi	r18, 0x01	; 1
     950:	30 40       	sbci	r19, 0x00	; 0
     952:	80 40       	sbci	r24, 0x00	; 0
     954:	90 40       	sbci	r25, 0x00	; 0
     956:	d9 f7       	brne	.-10     	; 0x94e <path2+0x40>
     958:	00 00       	nop
    _delay_ms(10000);

    USART0_send_string((unsigned char *)"Turn right (1 second) r\n");
     95a:	88 ee       	ldi	r24, 0xE8	; 232
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(100,1,STABLE_Z);
     962:	60 91 00 01 	lds	r22, 0x0100
     966:	70 91 01 01 	lds	r23, 0x0101
     96a:	07 2e       	mov	r0, r23
     96c:	00 0c       	add	r0, r0
     96e:	88 0b       	sbc	r24, r24
     970:	99 0b       	sbc	r25, r25
     972:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     976:	7b 01       	movw	r14, r22
     978:	8c 01       	movw	r16, r24
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e8       	ldi	r20, 0x80	; 128
     980:	5f e3       	ldi	r21, 0x3F	; 63
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	88 ec       	ldi	r24, 0xC8	; 200
     988:	92 e4       	ldi	r25, 0x42	; 66
     98a:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     98e:	2f ef       	ldi	r18, 0xFF	; 255
     990:	33 ed       	ldi	r19, 0xD3	; 211
     992:	80 e3       	ldi	r24, 0x30	; 48
     994:	21 50       	subi	r18, 0x01	; 1
     996:	30 40       	sbci	r19, 0x00	; 0
     998:	80 40       	sbci	r24, 0x00	; 0
     99a:	e1 f7       	brne	.-8      	; 0x994 <path2+0x86>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <path2+0x90>
     99e:	00 00       	nop
    _delay_ms(1000);

    USART0_send_string((unsigned char *)"Continue Diving (5 seconds)\r\n");
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	92 e0       	ldi	r25, 0x02	; 2
     9a4:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(1,1,STABLE_Z);
     9a8:	60 91 00 01 	lds	r22, 0x0100
     9ac:	70 91 01 01 	lds	r23, 0x0101
     9b0:	07 2e       	mov	r0, r23
     9b2:	00 0c       	add	r0, r0
     9b4:	88 0b       	sbc	r24, r24
     9b6:	99 0b       	sbc	r25, r25
     9b8:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     9bc:	7b 01       	movw	r14, r22
     9be:	8c 01       	movw	r16, r24
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e8       	ldi	r20, 0x80	; 128
     9c6:	5f e3       	ldi	r21, 0x3F	; 63
     9c8:	ca 01       	movw	r24, r20
     9ca:	b9 01       	movw	r22, r18
     9cc:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     9d0:	9f ef       	ldi	r25, 0xFF	; 255
     9d2:	23 e2       	ldi	r18, 0x23	; 35
     9d4:	34 ef       	ldi	r19, 0xF4	; 244
     9d6:	91 50       	subi	r25, 0x01	; 1
     9d8:	20 40       	sbci	r18, 0x00	; 0
     9da:	30 40       	sbci	r19, 0x00	; 0
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <path2+0xc8>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <path2+0xd2>
     9e0:	00 00       	nop
    _delay_ms(5000);

    USART0_send_string((unsigned char *)"Resurfacing...\r\n");
     9e2:	8f e1       	ldi	r24, 0x1F	; 31
     9e4:	92 e0       	ldi	r25, 0x02	; 2
     9e6:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(100,100,STABLE_Z);
     9ea:	60 91 00 01 	lds	r22, 0x0100
     9ee:	70 91 01 01 	lds	r23, 0x0101
     9f2:	07 2e       	mov	r0, r23
     9f4:	00 0c       	add	r0, r0
     9f6:	88 0b       	sbc	r24, r24
     9f8:	99 0b       	sbc	r25, r25
     9fa:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     9fe:	7b 01       	movw	r14, r22
     a00:	8c 01       	movw	r16, r24
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	48 ec       	ldi	r20, 0xC8	; 200
     a08:	52 e4       	ldi	r21, 0x42	; 66
     a0a:	ca 01       	movw	r24, r20
     a0c:	b9 01       	movw	r22, r18
     a0e:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	93 e2       	ldi	r25, 0x23	; 35
     a16:	24 ef       	ldi	r18, 0xF4	; 244
     a18:	81 50       	subi	r24, 0x01	; 1
     a1a:	90 40       	sbci	r25, 0x00	; 0
     a1c:	20 40       	sbci	r18, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <path2+0x10a>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <path2+0x114>
     a22:	00 00       	nop
    _delay_ms(5000);

    USART0_send_string((unsigned char *)"Path Complete\r\n");
     a24:	80 e3       	ldi	r24, 0x30	; 48
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    move(50,50,50);
     a2c:	e1 2c       	mov	r14, r1
     a2e:	f1 2c       	mov	r15, r1
     a30:	08 e4       	ldi	r16, 0x48	; 72
     a32:	12 e4       	ldi	r17, 0x42	; 66
     a34:	a8 01       	movw	r20, r16
     a36:	97 01       	movw	r18, r14
     a38:	c8 01       	movw	r24, r16
     a3a:	b7 01       	movw	r22, r14
     a3c:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>

}
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	08 95       	ret

00000a4a <path3>:
void path3(){
     a4a:	08 95       	ret

00000a4c <turn>:
    //Implement if necessary
}

void turn(int degrees){
     a4c:	cf 92       	push	r12
     a4e:	df 92       	push	r13
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ec 01       	movw	r28, r24
    int *x = 0;
    int *y = 0;
    int *z = 0;
    float headingDegrees = getHeading(x,y,z);
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <getHeading>
     a6e:	6b 01       	movw	r12, r22
     a70:	7c 01       	movw	r14, r24
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
     a72:	be 01       	movw	r22, r28
     a74:	0d 2e       	mov	r0, r29
     a76:	00 0c       	add	r0, r0
     a78:	88 0b       	sbc	r24, r24
     a7a:	99 0b       	sbc	r25, r25
     a7c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     a80:	a7 01       	movw	r20, r14
     a82:	96 01       	movw	r18, r12
     a84:	0e 94 a7 0c 	call	0x194e	; 0x194e <__addsf3>
     a88:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__fixsfsi>
     a8c:	cb 01       	movw	r24, r22
     a8e:	68 e6       	ldi	r22, 0x68	; 104
     a90:	71 e0       	ldi	r23, 0x01	; 1
     a92:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__divmodhi4>
     a96:	8c 01       	movw	r16, r24
    if (degrees < 0){
     a98:	d7 fd       	sbrc	r29, 7
     a9a:	29 c0       	rjmp	.+82     	; 0xaee <turn+0xa2>
        while ((int)headingDegrees != new_heading){
            move(-TURN_SPEED,TURN_SPEED,50);
            getHeading(x,y,z);
        }
    }
    else if (degrees > 0){
     a9c:	cd 2b       	or	r28, r29
     a9e:	f1 f0       	breq	.+60     	; 0xadc <turn+0x90>
        //Spin right until new heading
        while ((int)headingDegrees != (int)new_heading){
     aa0:	c7 01       	movw	r24, r14
     aa2:	b6 01       	movw	r22, r12
     aa4:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__fixsfsi>
     aa8:	06 17       	cp	r16, r22
     aaa:	17 07       	cpc	r17, r23
     aac:	b9 f0       	breq	.+46     	; 0xadc <turn+0x90>
            move(TURN_SPEED,-TURN_SPEED,50);
     aae:	e1 2c       	mov	r14, r1
     ab0:	f1 2c       	mov	r15, r1
     ab2:	08 e4       	ldi	r16, 0x48	; 72
     ab4:	12 e4       	ldi	r17, 0x42	; 66
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	40 e7       	ldi	r20, 0x70	; 112
     abc:	51 ec       	ldi	r21, 0xC1	; 193
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	80 e7       	ldi	r24, 0x70	; 112
     ac4:	91 e4       	ldi	r25, 0x41	; 65
     ac6:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
            getHeading(x,y,z);
     aca:	40 e0       	ldi	r20, 0x00	; 0
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <getHeading>
     ada:	e9 cf       	rjmp	.-46     	; 0xaae <turn+0x62>
        }
    }
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	08 95       	ret
    float headingDegrees = getHeading(x,y,z);
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
    if (degrees < 0){
        //Spin left until new heading
        while ((int)headingDegrees != new_heading){
     aee:	c7 01       	movw	r24, r14
     af0:	b6 01       	movw	r22, r12
     af2:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__fixsfsi>
     af6:	06 17       	cp	r16, r22
     af8:	17 07       	cpc	r17, r23
     afa:	81 f3       	breq	.-32     	; 0xadc <turn+0x90>
            move(-TURN_SPEED,TURN_SPEED,50);
     afc:	e1 2c       	mov	r14, r1
     afe:	f1 2c       	mov	r15, r1
     b00:	08 e4       	ldi	r16, 0x48	; 72
     b02:	12 e4       	ldi	r17, 0x42	; 66
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e7       	ldi	r20, 0x70	; 112
     b0a:	51 e4       	ldi	r21, 0x41	; 65
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	80 e7       	ldi	r24, 0x70	; 112
     b12:	91 ec       	ldi	r25, 0xC1	; 193
     b14:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
            getHeading(x,y,z);
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <getHeading>
     b28:	e9 cf       	rjmp	.-46     	; 0xafc <turn+0xb0>

00000b2a <depth_to_leds>:
            getHeading(x,y,z);
        }
    }
}

void depth_to_leds(){
     b2a:	8f 92       	push	r8
     b2c:	9f 92       	push	r9
     b2e:	af 92       	push	r10
     b30:	bf 92       	push	r11
     b32:	cf 92       	push	r12
     b34:	df 92       	push	r13
     b36:	ef 92       	push	r14
     b38:	ff 92       	push	r15
    float depth = get_depth_feet();
     b3a:	0e 94 45 0b 	call	0x168a	; 0x168a <get_depth_feet>
     b3e:	6b 01       	movw	r12, r22
     b40:	7c 01       	movw	r14, r24
    int red = 0;
    int green = 0;
    int blue = 0;

    red = (int)((depth)/((float)MAX_DEPTH) * 255);
    green = (int)((MAX_DEPTH - depth)/((float)MAX_DEPTH) * 255);
     b42:	9b 01       	movw	r18, r22
     b44:	ac 01       	movw	r20, r24
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	80 e4       	ldi	r24, 0x40	; 64
     b4c:	91 e4       	ldi	r25, 0x41	; 65
     b4e:	0e 94 a6 0c 	call	0x194c	; 0x194c <__subsf3>
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 e4       	ldi	r20, 0x40	; 64
     b58:	51 e4       	ldi	r21, 0x41	; 65
     b5a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divsf3>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	4f e7       	ldi	r20, 0x7F	; 127
     b64:	53 e4       	ldi	r21, 0x43	; 67
     b66:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
     b6a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__fixsfsi>
     b6e:	4b 01       	movw	r8, r22
     b70:	5c 01       	movw	r10, r24
    float depth = get_depth_feet();
    int red = 0;
    int green = 0;
    int blue = 0;

    red = (int)((depth)/((float)MAX_DEPTH) * 255);
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	40 e4       	ldi	r20, 0x40	; 64
     b78:	51 e4       	ldi	r21, 0x41	; 65
     b7a:	c7 01       	movw	r24, r14
     b7c:	b6 01       	movw	r22, r12
     b7e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divsf3>
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	4f e7       	ldi	r20, 0x7F	; 127
     b88:	53 e4       	ldi	r21, 0x43	; 67
     b8a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
     b8e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__fixsfsi>
     b92:	dc 01       	movw	r26, r24
     b94:	cb 01       	movw	r24, r22
    green = (int)((MAX_DEPTH - depth)/((float)MAX_DEPTH) * 255);

    set_rgb(red,green,blue);
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	b4 01       	movw	r22, r8
}
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	df 90       	pop	r13
     ba2:	cf 90       	pop	r12
     ba4:	bf 90       	pop	r11
     ba6:	af 90       	pop	r10
     ba8:	9f 90       	pop	r9
     baa:	8f 90       	pop	r8
    int blue = 0;

    red = (int)((depth)/((float)MAX_DEPTH) * 255);
    green = (int)((MAX_DEPTH - depth)/((float)MAX_DEPTH) * 255);

    set_rgb(red,green,blue);
     bac:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <set_rgb>

00000bb0 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     bb0:	88 e4       	ldi	r24, 0x48	; 72
     bb2:	80 93 70 00 	sts	0x0070, r24
     bb6:	08 95       	ret

00000bb8 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     bb8:	10 92 74 00 	sts	0x0074, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     bbc:	94 ea       	ldi	r25, 0xA4	; 164
     bbe:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     bc2:	90 91 74 00 	lds	r25, 0x0074
     bc6:	97 ff       	sbrs	r25, 7
     bc8:	fc cf       	rjmp	.-8      	; 0xbc2 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     bca:	90 91 71 00 	lds	r25, 0x0071
     bce:	98 7f       	andi	r25, 0xF8	; 248
     bd0:	98 30       	cpi	r25, 0x08	; 8
     bd2:	11 f0       	breq	.+4      	; 0xbd8 <i2c_start+0x20>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
     bd8:	80 93 73 00 	sts	0x0073, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     bdc:	84 e8       	ldi	r24, 0x84	; 132
     bde:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     be2:	80 91 74 00 	lds	r24, 0x0074
     be6:	87 ff       	sbrs	r24, 7
     be8:	fc cf       	rjmp	.-8      	; 0xbe2 <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     bea:	80 91 71 00 	lds	r24, 0x0071
     bee:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     bf0:	88 31       	cpi	r24, 0x18	; 24
     bf2:	11 f0       	breq	.+4      	; 0xbf8 <i2c_start+0x40>
     bf4:	80 34       	cpi	r24, 0x40	; 64
     bf6:	71 f7       	brne	.-36     	; 0xbd4 <i2c_start+0x1c>
	
	return 0;
     bf8:	80 e0       	ldi	r24, 0x00	; 0
}
     bfa:	08 95       	ret

00000bfc <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     bfc:	80 93 73 00 	sts	0x0073, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     c00:	84 e8       	ldi	r24, 0x84	; 132
     c02:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     c06:	80 91 74 00 	lds	r24, 0x0074
     c0a:	87 ff       	sbrs	r24, 7
     c0c:	fc cf       	rjmp	.-8      	; 0xc06 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     c0e:	90 91 71 00 	lds	r25, 0x0071
     c12:	98 7f       	andi	r25, 0xF8	; 248
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	98 32       	cpi	r25, 0x28	; 40
     c18:	09 f0       	breq	.+2      	; 0xc1c <i2c_write+0x20>
	
	return 0;
}
     c1a:	08 95       	ret
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     c1c:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     c1e:	08 95       	ret

00000c20 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     c20:	84 ec       	ldi	r24, 0xC4	; 196
     c22:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     c26:	80 91 74 00 	lds	r24, 0x0074
     c2a:	87 ff       	sbrs	r24, 7
     c2c:	fc cf       	rjmp	.-8      	; 0xc26 <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
     c2e:	80 91 73 00 	lds	r24, 0x0073
}
     c32:	08 95       	ret

00000c34 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     c34:	84 e8       	ldi	r24, 0x84	; 132
     c36:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     c3a:	80 91 74 00 	lds	r24, 0x0074
     c3e:	87 ff       	sbrs	r24, 7
     c40:	fc cf       	rjmp	.-8      	; 0xc3a <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
     c42:	80 91 73 00 	lds	r24, 0x0073
}
     c46:	08 95       	ret

00000c48 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	8b 01       	movw	r16, r22
     c52:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     c54:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <i2c_start>
     c58:	81 11       	cpse	r24, r1
     c5a:	1f c0       	rjmp	.+62     	; 0xc9a <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
     c5c:	20 97       	sbiw	r28, 0x00	; 0
     c5e:	a9 f0       	breq	.+42     	; 0xc8a <i2c_transmit+0x42>
     c60:	f8 01       	movw	r30, r16
     c62:	c0 0f       	add	r28, r16
     c64:	d1 1f       	adc	r29, r17
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     c66:	24 e8       	ldi	r18, 0x84	; 132
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     c68:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     c6a:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     c6e:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     c72:	90 91 74 00 	lds	r25, 0x0074
     c76:	97 ff       	sbrs	r25, 7
     c78:	fc cf       	rjmp	.-8      	; 0xc72 <i2c_transmit+0x2a>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     c7a:	90 91 71 00 	lds	r25, 0x0071
     c7e:	98 7f       	andi	r25, 0xF8	; 248
     c80:	98 32       	cpi	r25, 0x28	; 40
     c82:	59 f4       	brne	.+22     	; 0xc9a <i2c_transmit+0x52>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
     c84:	ec 17       	cp	r30, r28
     c86:	fd 07       	cpc	r31, r29
     c88:	79 f7       	brne	.-34     	; 0xc68 <i2c_transmit+0x20>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     c8a:	94 e9       	ldi	r25, 0x94	; 148
     c8c:	90 93 74 00 	sts	0x0074, r25
	}
	
	i2c_stop();
	
	return 0;
}
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	08 95       	ret
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	08 95       	ret

00000ca6 <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	8b 01       	movw	r16, r22
     cb0:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_READ)) return 1;
     cb2:	81 60       	ori	r24, 0x01	; 1
     cb4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <i2c_start>
     cb8:	81 11       	cpse	r24, r1
     cba:	25 c0       	rjmp	.+74     	; 0xd06 <i2c_receive+0x60>
	
	for (uint16_t i = 0; i < (length-1); i++)
     cbc:	de 01       	movw	r26, r28
     cbe:	11 97       	sbiw	r26, 0x01	; 1
     cc0:	41 f1       	breq	.+80     	; 0xd12 <i2c_receive+0x6c>
     cc2:	f8 01       	movw	r30, r16
     cc4:	a0 0f       	add	r26, r16
     cc6:	b1 1f       	adc	r27, r17

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     cc8:	24 ec       	ldi	r18, 0xC4	; 196
     cca:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     cce:	90 91 74 00 	lds	r25, 0x0074
     cd2:	97 ff       	sbrs	r25, 7
     cd4:	fc cf       	rjmp	.-8      	; 0xcce <i2c_receive+0x28>
	// return received data from TWDR
	return TWDR;
     cd6:	90 91 73 00 	lds	r25, 0x0073
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     cda:	91 93       	st	Z+, r25

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
     cdc:	ae 17       	cp	r26, r30
     cde:	bf 07       	cpc	r27, r31
     ce0:	a1 f7       	brne	.-24     	; 0xcca <i2c_receive+0x24>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     ce2:	94 e8       	ldi	r25, 0x84	; 132
     ce4:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     ce8:	90 91 74 00 	lds	r25, 0x0074
     cec:	97 ff       	sbrs	r25, 7
     cee:	fc cf       	rjmp	.-8      	; 0xce8 <i2c_receive+0x42>
	// return received data from TWDR
	return TWDR;
     cf0:	90 91 73 00 	lds	r25, 0x0073
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     cf4:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     cf6:	94 e9       	ldi	r25, 0x94	; 148
     cf8:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	08 95       	ret
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	08 95       	ret
     d12:	d8 01       	movw	r26, r16
     d14:	e6 cf       	rjmp	.-52     	; 0xce2 <i2c_receive+0x3c>

00000d16 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	16 2f       	mov	r17, r22
     d22:	f4 2e       	mov	r15, r20
     d24:	05 2f       	mov	r16, r21
     d26:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr | 0x00)) return 1;
     d28:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <i2c_start>
     d2c:	81 11       	cpse	r24, r1
     d2e:	2c c0       	rjmp	.+88     	; 0xd88 <i2c_writeReg+0x72>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     d30:	10 93 73 00 	sts	0x0073, r17
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     d34:	94 e8       	ldi	r25, 0x84	; 132
     d36:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     d3a:	90 91 74 00 	lds	r25, 0x0074
     d3e:	97 ff       	sbrs	r25, 7
     d40:	fc cf       	rjmp	.-8      	; 0xd3a <i2c_writeReg+0x24>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     d42:	90 91 71 00 	lds	r25, 0x0071
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     d46:	20 97       	sbiw	r28, 0x00	; 0
     d48:	b1 f0       	breq	.+44     	; 0xd76 <i2c_writeReg+0x60>
     d4a:	ef 2d       	mov	r30, r15
     d4c:	f0 2f       	mov	r31, r16
     d4e:	ce 0f       	add	r28, r30
     d50:	df 1f       	adc	r29, r31
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     d52:	44 e8       	ldi	r20, 0x84	; 132

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     d54:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     d56:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     d5a:	40 93 74 00 	sts	0x0074, r20
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     d5e:	90 91 74 00 	lds	r25, 0x0074
     d62:	97 ff       	sbrs	r25, 7
     d64:	fc cf       	rjmp	.-8      	; 0xd5e <i2c_writeReg+0x48>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     d66:	90 91 71 00 	lds	r25, 0x0071
     d6a:	98 7f       	andi	r25, 0xF8	; 248
     d6c:	98 32       	cpi	r25, 0x28	; 40
     d6e:	61 f4       	brne	.+24     	; 0xd88 <i2c_writeReg+0x72>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     d70:	ec 17       	cp	r30, r28
     d72:	fd 07       	cpc	r31, r29
     d74:	79 f7       	brne	.-34     	; 0xd54 <i2c_writeReg+0x3e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     d76:	94 e9       	ldi	r25, 0x94	; 148
     d78:	90 93 74 00 	sts	0x0074, r25
	}

	i2c_stop();

	return 0;
}
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	08 95       	ret
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
     d88:	81 e0       	ldi	r24, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	08 95       	ret

00000d96 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	18 2f       	mov	r17, r24
     da4:	06 2f       	mov	r16, r22
     da6:	7a 01       	movw	r14, r20
     da8:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
     daa:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <i2c_start>
     dae:	81 11       	cpse	r24, r1
     db0:	38 c0       	rjmp	.+112    	; 0xe22 <i2c_readReg+0x8c>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     db2:	00 93 73 00 	sts	0x0073, r16
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     db6:	84 e8       	ldi	r24, 0x84	; 132
     db8:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     dbc:	80 91 74 00 	lds	r24, 0x0074
     dc0:	87 ff       	sbrs	r24, 7
     dc2:	fc cf       	rjmp	.-8      	; 0xdbc <i2c_readReg+0x26>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     dc4:	80 91 71 00 	lds	r24, 0x0071
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
     dc8:	81 2f       	mov	r24, r17
     dca:	81 60       	ori	r24, 0x01	; 1
     dcc:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <i2c_start>
     dd0:	81 11       	cpse	r24, r1
     dd2:	27 c0       	rjmp	.+78     	; 0xe22 <i2c_readReg+0x8c>

	for (uint16_t i = 0; i < (length-1); i++)
     dd4:	de 01       	movw	r26, r28
     dd6:	11 97       	sbiw	r26, 0x01	; 1
     dd8:	61 f1       	breq	.+88     	; 0xe32 <i2c_readReg+0x9c>
     dda:	f7 01       	movw	r30, r14
     ddc:	ae 0d       	add	r26, r14
     dde:	bf 1d       	adc	r27, r15

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     de0:	24 ec       	ldi	r18, 0xC4	; 196
     de2:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     de6:	90 91 74 00 	lds	r25, 0x0074
     dea:	97 ff       	sbrs	r25, 7
     dec:	fc cf       	rjmp	.-8      	; 0xde6 <i2c_readReg+0x50>
	// return received data from TWDR
	return TWDR;
     dee:	90 91 73 00 	lds	r25, 0x0073

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     df2:	91 93       	st	Z+, r25

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
     df4:	ea 17       	cp	r30, r26
     df6:	fb 07       	cpc	r31, r27
     df8:	a1 f7       	brne	.-24     	; 0xde2 <i2c_readReg+0x4c>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     dfa:	94 e8       	ldi	r25, 0x84	; 132
     dfc:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     e00:	90 91 74 00 	lds	r25, 0x0074
     e04:	97 ff       	sbrs	r25, 7
     e06:	fc cf       	rjmp	.-8      	; 0xe00 <i2c_readReg+0x6a>
	// return received data from TWDR
	return TWDR;
     e08:	90 91 73 00 	lds	r25, 0x0073

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     e0c:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     e0e:	94 e9       	ldi	r25, 0x94	; 148
     e10:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	08 95       	ret
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	08 95       	ret
     e32:	d7 01       	movw	r26, r14
     e34:	e2 cf       	rjmp	.-60     	; 0xdfa <i2c_readReg+0x64>

00000e36 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     e36:	84 e9       	ldi	r24, 0x94	; 148
     e38:	80 93 74 00 	sts	0x0074, r24
     e3c:	08 95       	ret

00000e3e <enable_adc>:
#include "./adc.h"


void enable_adc(){
	DDRF = 0x00;
     e3e:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0x00;
     e42:	10 92 62 00 	sts	0x0062, r1
	//internally wire REFSn bits in the ADMUX register to connect VREF 
		//to internal 2.56v reference --> 0.0025 v/step
	//ADMUX = (1 << REFS0) | (1 << REFS1); //2.56v
	ADMUX = (1 << REFS0); //AVCC
     e46:	80 e4       	ldi	r24, 0x40	; 64
     e48:	87 b9       	out	0x07, r24	; 7
	//Single ended input, gain is not allowed
	
	//Default Right Adjusted

	//Set ADEN in ADSCRA to enable ADC
	ADCSRA = (1 << ADEN);
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	86 b9       	out	0x06, r24	; 6
	//Set the ADC Clock frequency prescaler to 128 --> 125kHz
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     e4e:	86 b1       	in	r24, 0x06	; 6
     e50:	87 60       	ori	r24, 0x07	; 7
     e52:	86 b9       	out	0x06, r24	; 6
	//Set free running mode
	//ADCSRA |= (1 << ADFR);
	//Enable the ADC Interrupt Flag
	//ADCSRA |= (1 << ADIE);
	//Start first conversion by setting ADSC in ADCSRA
	ADCSRA |= (1 << ADSC);
     e54:	36 9a       	sbi	0x06, 6	; 6
     e56:	08 95       	ret

00000e58 <read_adc>:

}
int read_adc(int pin){
     e58:	fc 01       	movw	r30, r24
	int data;
	if (pin > 7){
     e5a:	08 97       	sbiw	r24, 0x08	; 8
     e5c:	fc f4       	brge	.+62     	; 0xe9c <read_adc+0x44>
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	50 e0       	ldi	r21, 0x00	; 0
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
		ADMUX &= ~(1 << i);
     e62:	61 e0       	ldi	r22, 0x01	; 1
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	97 b1       	in	r25, 0x07	; 7
     e68:	9b 01       	movw	r18, r22
     e6a:	04 2e       	mov	r0, r20
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <read_adc+0x18>
     e6e:	22 0f       	add	r18, r18
     e70:	0a 94       	dec	r0
     e72:	ea f7       	brpl	.-6      	; 0xe6e <read_adc+0x16>
     e74:	20 95       	com	r18
     e76:	29 23       	and	r18, r25
     e78:	27 b9       	out	0x07, r18	; 7
	if (pin > 7){
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
     e7a:	4f 5f       	subi	r20, 0xFF	; 255
     e7c:	5f 4f       	sbci	r21, 0xFF	; 255
     e7e:	45 30       	cpi	r20, 0x05	; 5
     e80:	51 05       	cpc	r21, r1
     e82:	89 f7       	brne	.-30     	; 0xe66 <read_adc+0xe>
		ADMUX &= ~(1 << i);
	}
	//set the new mux bit
	ADMUX |= pin;
     e84:	97 b1       	in	r25, 0x07	; 7
     e86:	89 2f       	mov	r24, r25
     e88:	8e 2b       	or	r24, r30
     e8a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
     e8c:	36 9a       	sbi	0x06, 6	; 6
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
     e8e:	34 9b       	sbis	0x06, 4	; 6
     e90:	fe cf       	rjmp	.-4      	; 0xe8e <read_adc+0x36>
	data = ADCL;
     e92:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);
     e94:	25 b1       	in	r18, 0x05	; 5
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	92 2b       	or	r25, r18
     e9a:	08 95       	ret

}
int read_adc(int pin){
	int data;
	if (pin > 7){
		return -1;
     e9c:	8f ef       	ldi	r24, 0xFF	; 255
     e9e:	9f ef       	ldi	r25, 0xFF	; 255
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
	data = ADCL;
	data |= (ADCH << 8);
	return data;
}
     ea0:	08 95       	ret

00000ea2 <get_voltage>:
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
     ea2:	88 30       	cpi	r24, 0x08	; 8
     ea4:	91 05       	cpc	r25, r1
     ea6:	20 f0       	brcs	.+8      	; 0xeb0 <get_voltage+0xe>
		return 0;
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	cb 01       	movw	r24, r22
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
}
     eae:	08 95       	ret
}
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
		return 0;
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
     eb0:	0e 94 2c 07 	call	0xe58	; 0xe58 <read_adc>
     eb4:	bc 01       	movw	r22, r24
     eb6:	99 0f       	add	r25, r25
     eb8:	88 0b       	sbc	r24, r24
     eba:	99 0b       	sbc	r25, r25
     ebc:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 ea       	ldi	r20, 0xA0	; 160
     ec6:	5b e3       	ldi	r21, 0x3B	; 59
     ec8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
     ecc:	08 95       	ret

00000ece <strobe_lcd>:
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     ece:	e2 e6       	ldi	r30, 0x62	; 98
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	88 60       	ori	r24, 0x08	; 8
     ed6:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     ed8:	80 81       	ld	r24, Z
     eda:	87 7f       	andi	r24, 0xF7	; 247
     edc:	80 83       	st	Z, r24
     ede:	08 95       	ret

00000ee0 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ee0:	77 9b       	sbis	0x0e, 7	; 14
     ee2:	fe cf       	rjmp	.-4      	; 0xee0 <clear_display>
    SPDR = 0x00;    //command, not data
     ee4:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ee6:	77 9b       	sbis	0x0e, 7	; 14
     ee8:	fe cf       	rjmp	.-4      	; 0xee6 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     eee:	77 9b       	sbis	0x0e, 7	; 14
     ef0:	fe cf       	rjmp	.-4      	; 0xeee <clear_display+0xe>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     ef2:	80 91 62 00 	lds	r24, 0x0062
     ef6:	88 60       	ori	r24, 0x08	; 8
     ef8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     efc:	80 91 62 00 	lds	r24, 0x0062
     f00:	87 7f       	andi	r24, 0xF7	; 247
     f02:	80 93 62 00 	sts	0x0062, r24
     f06:	8f e9       	ldi	r24, 0x9F	; 159
     f08:	98 e2       	ldi	r25, 0x28	; 40
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <clear_display+0x2a>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <clear_display+0x30>
     f10:	00 00       	nop
     f12:	08 95       	ret

00000f14 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     f14:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     f16:	77 9b       	sbis	0x0e, 7	; 14
     f18:	fe cf       	rjmp	.-4      	; 0xf16 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     f1a:	80 ec       	ldi	r24, 0xC0	; 192
     f1c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     f1e:	77 9b       	sbis	0x0e, 7	; 14
     f20:	fe cf       	rjmp	.-4      	; 0xf1e <home_line2+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     f22:	80 91 62 00 	lds	r24, 0x0062
     f26:	88 60       	ori	r24, 0x08	; 8
     f28:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     f2c:	80 91 62 00 	lds	r24, 0x0062
     f30:	87 7f       	andi	r24, 0xF7	; 247
     f32:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f36:	85 ec       	ldi	r24, 0xC5	; 197
     f38:	8a 95       	dec	r24
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <home_line2+0x24>
     f3c:	00 00       	nop
     f3e:	08 95       	ret

00000f40 <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     f44:	77 9b       	sbis	0x0e, 7	; 14
     f46:	fe cf       	rjmp	.-4      	; 0xf44 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     f48:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     f4a:	77 9b       	sbis	0x0e, 7	; 14
     f4c:	fe cf       	rjmp	.-4      	; 0xf4a <char2lcd+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     f4e:	80 91 62 00 	lds	r24, 0x0062
     f52:	88 60       	ori	r24, 0x08	; 8
     f54:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     f58:	80 91 62 00 	lds	r24, 0x0062
     f5c:	87 7f       	andi	r24, 0xF7	; 247
     f5e:	80 93 62 00 	sts	0x0062, r24
     f62:	85 ec       	ldi	r24, 0xC5	; 197
     f64:	8a 95       	dec	r24
     f66:	f1 f7       	brne	.-4      	; 0xf64 <char2lcd+0x24>
     f68:	00 00       	nop
     f6a:	08 95       	ret

00000f6c <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	fc 01       	movw	r30, r24
     f72:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     f78:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     f7a:	77 9b       	sbis	0x0e, 7	; 14
     f7c:	fe cf       	rjmp	.-4      	; 0xf7a <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     f7e:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     f80:	77 9b       	sbis	0x0e, 7	; 14
     f82:	fe cf       	rjmp	.-4      	; 0xf80 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     f84:	8d 91       	ld	r24, X+
     f86:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     f88:	77 9b       	sbis	0x0e, 7	; 14
     f8a:	fe cf       	rjmp	.-4      	; 0xf88 <string2lcd+0x1c>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     f8c:	90 91 62 00 	lds	r25, 0x0062
     f90:	98 60       	ori	r25, 0x08	; 8
     f92:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     f96:	90 91 62 00 	lds	r25, 0x0062
     f9a:	97 7f       	andi	r25, 0xF7	; 247
     f9c:	90 93 62 00 	sts	0x0062, r25
     fa0:	85 ec       	ldi	r24, 0xC5	; 197
     fa2:	8a 95       	dec	r24
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <string2lcd+0x36>
     fa6:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     fa8:	4f 5f       	subi	r20, 0xFF	; 255
     faa:	5f 4f       	sbci	r21, 0xFF	; 255
     fac:	ef 01       	movw	r28, r30
     fae:	09 90       	ld	r0, Y+
     fb0:	00 20       	and	r0, r0
     fb2:	e9 f7       	brne	.-6      	; 0xfae <string2lcd+0x42>
     fb4:	9e 01       	movw	r18, r28
     fb6:	2e 1b       	sub	r18, r30
     fb8:	3f 0b       	sbc	r19, r31
     fba:	22 50       	subi	r18, 0x02	; 2
     fbc:	31 09       	sbc	r19, r1
     fbe:	24 17       	cp	r18, r20
     fc0:	35 07       	cpc	r19, r21
     fc2:	d8 f6       	brcc	.-74     	; 0xf7a <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     fca:	e1 e6       	ldi	r30, 0x61	; 97
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	88 60       	ori	r24, 0x08	; 8
     fd2:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     fd4:	88 b3       	in	r24, 0x18	; 24
     fd6:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     fd8:	87 b3       	in	r24, 0x17	; 23
     fda:	87 60       	ori	r24, 0x07	; 7
     fdc:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     fde:	80 e5       	ldi	r24, 0x50	; 80
     fe0:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	8e b9       	out	0x0e, r24	; 14
     fe6:	08 95       	ret

00000fe8 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fe8:	8f e5       	ldi	r24, 0x5F	; 95
     fea:	9a ee       	ldi	r25, 0xEA	; 234
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <lcd_init+0x4>
     ff0:	00 c0       	rjmp	.+0      	; 0xff2 <lcd_init+0xa>
     ff2:	00 00       	nop
     ff4:	23 e0       	ldi	r18, 0x03	; 3
     ff6:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     ff8:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     ffa:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ffc:	77 9b       	sbis	0x0e, 7	; 14
     ffe:	fe cf       	rjmp	.-4      	; 0xffc <lcd_init+0x14>
        SPDR = 0x30;
    1000:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    1002:	77 9b       	sbis	0x0e, 7	; 14
    1004:	fe cf       	rjmp	.-4      	; 0x1002 <lcd_init+0x1a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
    1006:	80 91 62 00 	lds	r24, 0x0062
    100a:	88 60       	ori	r24, 0x08	; 8
    100c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
    1010:	80 91 62 00 	lds	r24, 0x0062
    1014:	87 7f       	andi	r24, 0xF7	; 247
    1016:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    101a:	85 ec       	ldi	r24, 0xC5	; 197
    101c:	8a 95       	dec	r24
    101e:	f1 f7       	brne	.-4      	; 0x101c <lcd_init+0x34>
    1020:	00 00       	nop
    1022:	21 50       	subi	r18, 0x01	; 1
    1024:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
    1026:	49 f7       	brne	.-46     	; 0xffa <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
    1028:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    102a:	77 9b       	sbis	0x0e, 7	; 14
    102c:	fe cf       	rjmp	.-4      	; 0x102a <lcd_init+0x42>
    SPDR = 0x38;
    102e:	88 e3       	ldi	r24, 0x38	; 56
    1030:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    1032:	77 9b       	sbis	0x0e, 7	; 14
    1034:	fe cf       	rjmp	.-4      	; 0x1032 <lcd_init+0x4a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
    1036:	80 91 62 00 	lds	r24, 0x0062
    103a:	88 60       	ori	r24, 0x08	; 8
    103c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
    1040:	80 91 62 00 	lds	r24, 0x0062
    1044:	87 7f       	andi	r24, 0xF7	; 247
    1046:	80 93 62 00 	sts	0x0062, r24
    104a:	95 ec       	ldi	r25, 0xC5	; 197
    104c:	9a 95       	dec	r25
    104e:	f1 f7       	brne	.-4      	; 0x104c <lcd_init+0x64>
    1050:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
    1052:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    1054:	77 9b       	sbis	0x0e, 7	; 14
    1056:	fe cf       	rjmp	.-4      	; 0x1054 <lcd_init+0x6c>
    SPDR = 0x08;
    1058:	88 e0       	ldi	r24, 0x08	; 8
    105a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    105c:	77 9b       	sbis	0x0e, 7	; 14
    105e:	fe cf       	rjmp	.-4      	; 0x105c <lcd_init+0x74>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
    1060:	80 91 62 00 	lds	r24, 0x0062
    1064:	88 60       	ori	r24, 0x08	; 8
    1066:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
    106a:	80 91 62 00 	lds	r24, 0x0062
    106e:	87 7f       	andi	r24, 0xF7	; 247
    1070:	80 93 62 00 	sts	0x0062, r24
    1074:	85 ec       	ldi	r24, 0xC5	; 197
    1076:	8a 95       	dec	r24
    1078:	f1 f7       	brne	.-4      	; 0x1076 <lcd_init+0x8e>
    107a:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
    107c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    107e:	77 9b       	sbis	0x0e, 7	; 14
    1080:	fe cf       	rjmp	.-4      	; 0x107e <lcd_init+0x96>
    SPDR = 0x01;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    1086:	77 9b       	sbis	0x0e, 7	; 14
    1088:	fe cf       	rjmp	.-4      	; 0x1086 <lcd_init+0x9e>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
    108a:	80 91 62 00 	lds	r24, 0x0062
    108e:	88 60       	ori	r24, 0x08	; 8
    1090:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
    1094:	80 91 62 00 	lds	r24, 0x0062
    1098:	87 7f       	andi	r24, 0xF7	; 247
    109a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	98 e1       	ldi	r25, 0x18	; 24
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <lcd_init+0xba>
    10a6:	00 c0       	rjmp	.+0      	; 0x10a8 <lcd_init+0xc0>
    10a8:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
    10aa:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    10ac:	77 9b       	sbis	0x0e, 7	; 14
    10ae:	fe cf       	rjmp	.-4      	; 0x10ac <lcd_init+0xc4>
    SPDR = 0x06;
    10b0:	86 e0       	ldi	r24, 0x06	; 6
    10b2:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    10b4:	77 9b       	sbis	0x0e, 7	; 14
    10b6:	fe cf       	rjmp	.-4      	; 0x10b4 <lcd_init+0xcc>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
    10b8:	80 91 62 00 	lds	r24, 0x0062
    10bc:	88 60       	ori	r24, 0x08	; 8
    10be:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
    10c2:	80 91 62 00 	lds	r24, 0x0062
    10c6:	87 7f       	andi	r24, 0xF7	; 247
    10c8:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10cc:	95 ec       	ldi	r25, 0xC5	; 197
    10ce:	9a 95       	dec	r25
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <lcd_init+0xe6>
    10d2:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
    10d4:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    10d6:	77 9b       	sbis	0x0e, 7	; 14
    10d8:	fe cf       	rjmp	.-4      	; 0x10d6 <lcd_init+0xee>
    SPDR = 0x0E;
    10da:	8e e0       	ldi	r24, 0x0E	; 14
    10dc:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    10de:	77 9b       	sbis	0x0e, 7	; 14
    10e0:	fe cf       	rjmp	.-4      	; 0x10de <lcd_init+0xf6>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
    10e2:	80 91 62 00 	lds	r24, 0x0062
    10e6:	88 60       	ori	r24, 0x08	; 8
    10e8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
    10ec:	80 91 62 00 	lds	r24, 0x0062
    10f0:	87 7f       	andi	r24, 0xF7	; 247
    10f2:	80 93 62 00 	sts	0x0062, r24
    10f6:	85 ec       	ldi	r24, 0xC5	; 197
    10f8:	8a 95       	dec	r24
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <lcd_init+0x110>
    10fc:	00 00       	nop
    10fe:	08 95       	ret

00001100 <USART1_Init>:
#include "uart.h"


void USART1_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
    1100:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
    1104:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    1108:	88 e1       	ldi	r24, 0x18	; 24
    110a:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (3<<UCSZ10);
    110e:	86 e0       	ldi	r24, 0x06	; 6
    1110:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1114:	2f ef       	ldi	r18, 0xFF	; 255
    1116:	81 ee       	ldi	r24, 0xE1	; 225
    1118:	94 e0       	ldi	r25, 0x04	; 4
    111a:	21 50       	subi	r18, 0x01	; 1
    111c:	80 40       	sbci	r24, 0x00	; 0
    111e:	90 40       	sbci	r25, 0x00	; 0
    1120:	e1 f7       	brne	.-8      	; 0x111a <USART1_Init+0x1a>
    1122:	00 c0       	rjmp	.+0      	; 0x1124 <USART1_Init+0x24>
    1124:	00 00       	nop
    1126:	08 95       	ret

00001128 <USART1_Transmit>:
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
    1128:	90 91 9b 00 	lds	r25, 0x009B
    112c:	95 ff       	sbrs	r25, 5
    112e:	fc cf       	rjmp	.-8      	; 0x1128 <USART1_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
    1130:	80 93 9c 00 	sts	0x009C, r24
    1134:	08 95       	ret

00001136 <USART1_send_string>:
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
    1136:	fc 01       	movw	r30, r24
    1138:	20 81       	ld	r18, Z
    113a:	22 23       	and	r18, r18
    113c:	51 f0       	breq	.+20     	; 0x1152 <USART1_send_string+0x1c>
    113e:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
    1140:	90 91 9b 00 	lds	r25, 0x009B
    1144:	95 ff       	sbrs	r25, 5
    1146:	fc cf       	rjmp	.-8      	; 0x1140 <USART1_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
    1148:	20 93 9c 00 	sts	0x009C, r18
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
    114c:	21 91       	ld	r18, Z+
    114e:	21 11       	cpse	r18, r1
    1150:	f7 cf       	rjmp	.-18     	; 0x1140 <USART1_send_string+0xa>
    1152:	08 95       	ret

00001154 <USART1_Receive>:
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
    1154:	80 91 9b 00 	lds	r24, 0x009B
    1158:	87 ff       	sbrs	r24, 7
    115a:	fc cf       	rjmp	.-8      	; 0x1154 <USART1_Receive>
    return UDR1;
    115c:	80 91 9c 00 	lds	r24, 0x009C
}
    1160:	08 95       	ret

00001162 <USART1_Receive_String>:

void USART1_Receive_String(unsigned char *str){
    1162:	dc 01       	movw	r26, r24
    1164:	fc 01       	movw	r30, r24
    1166:	9c 01       	movw	r18, r24
    1168:	2b 5f       	subi	r18, 0xFB	; 251
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
    116c:	90 91 9b 00 	lds	r25, 0x009B
    1170:	97 ff       	sbrs	r25, 7
    1172:	fc cf       	rjmp	.-8      	; 0x116c <USART1_Receive_String+0xa>
    return UDR1;
    1174:	90 91 9c 00 	lds	r25, 0x009C

void USART1_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
    1178:	9e 37       	cpi	r25, 0x7E	; 126
    117a:	29 f0       	breq	.+10     	; 0x1186 <USART1_Receive_String+0x24>
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
    117c:	e2 17       	cp	r30, r18
    117e:	f3 07       	cpc	r31, r19
    1180:	19 f0       	breq	.+6      	; 0x1188 <USART1_Receive_String+0x26>
            str[2] = 75;
            str[3] = END_STRING;
            str[4] = '\0';
            break;
        }
        str[i] = c;
    1182:	91 93       	st	Z+, r25
    1184:	f3 cf       	rjmp	.-26     	; 0x116c <USART1_Receive_String+0xa>
    1186:	08 95       	ret
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
    1188:	82 e3       	ldi	r24, 0x32	; 50
    118a:	8c 93       	st	X, r24
            str[1] = 25;
    118c:	89 e1       	ldi	r24, 0x19	; 25
    118e:	11 96       	adiw	r26, 0x01	; 1
    1190:	8c 93       	st	X, r24
    1192:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 75;
    1194:	8b e4       	ldi	r24, 0x4B	; 75
    1196:	12 96       	adiw	r26, 0x02	; 2
    1198:	8c 93       	st	X, r24
    119a:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
    119c:	8e e7       	ldi	r24, 0x7E	; 126
    119e:	13 96       	adiw	r26, 0x03	; 3
    11a0:	8c 93       	st	X, r24
    11a2:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
    11a4:	14 96       	adiw	r26, 0x04	; 4
    11a6:	1c 92       	st	X, r1
            break;
    11a8:	08 95       	ret

000011aa <USART1_flush>:
        str[i] = c;
        ++i;
    }
}

void USART1_flush(){
    11aa:	e1 e3       	ldi	r30, 0x31	; 49
    11ac:	f3 e0       	ldi	r31, 0x03	; 3
    11ae:	96 e4       	ldi	r25, 0x46	; 70
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
    11b0:	80 91 9b 00 	lds	r24, 0x009B
    11b4:	85 ff       	sbrs	r24, 5
    11b6:	fc cf       	rjmp	.-8      	; 0x11b0 <USART1_flush+0x6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
    11b8:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
    11bc:	91 91       	ld	r25, Z+
    11be:	91 11       	cpse	r25, r1
    11c0:	f7 cf       	rjmp	.-18     	; 0x11b0 <USART1_flush+0x6>
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
    11c2:	80 91 9b 00 	lds	r24, 0x009B
    11c6:	87 ff       	sbrs	r24, 7
    11c8:	0c c0       	rjmp	.+24     	; 0x11e2 <USART1_flush+0x38>
        dummy = UDR1;
    11ca:	90 91 9c 00 	lds	r25, 0x009C
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
    11ce:	80 91 9b 00 	lds	r24, 0x009B
    11d2:	85 ff       	sbrs	r24, 5
    11d4:	fc cf       	rjmp	.-8      	; 0x11ce <USART1_flush+0x24>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
    11d6:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
    11da:	80 91 9b 00 	lds	r24, 0x009B
    11de:	87 fd       	sbrc	r24, 7
    11e0:	f4 cf       	rjmp	.-24     	; 0x11ca <USART1_flush+0x20>
    11e2:	08 95       	ret

000011e4 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
    11e4:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
    11e8:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    11ea:	88 e1       	ldi	r24, 0x18	; 24
    11ec:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */ 
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    11ee:	8e e0       	ldi	r24, 0x0E	; 14
    11f0:	80 93 95 00 	sts	0x0095, r24
    11f4:	2f ef       	ldi	r18, 0xFF	; 255
    11f6:	81 ee       	ldi	r24, 0xE1	; 225
    11f8:	94 e0       	ldi	r25, 0x04	; 4
    11fa:	21 50       	subi	r18, 0x01	; 1
    11fc:	80 40       	sbci	r24, 0x00	; 0
    11fe:	90 40       	sbci	r25, 0x00	; 0
    1200:	e1 f7       	brne	.-8      	; 0x11fa <USART0_Init+0x16>
    1202:	00 c0       	rjmp	.+0      	; 0x1204 <USART0_Init+0x20>
    1204:	00 00       	nop
    1206:	08 95       	ret

00001208 <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
    1208:	5d 9b       	sbis	0x0b, 5	; 11
    120a:	fe cf       	rjmp	.-4      	; 0x1208 <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
    120c:	8c b9       	out	0x0c, r24	; 12
    120e:	08 95       	ret

00001210 <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
    1210:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
    1212:	90 81       	ld	r25, Z
    1214:	99 23       	and	r25, r25
    1216:	39 f0       	breq	.+14     	; 0x1226 <USART0_send_string+0x16>
    1218:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
    121a:	5d 9b       	sbis	0x0b, 5	; 11
    121c:	fe cf       	rjmp	.-4      	; 0x121a <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
    121e:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
    1220:	91 91       	ld	r25, Z+
    1222:	91 11       	cpse	r25, r1
    1224:	fa cf       	rjmp	.-12     	; 0x121a <USART0_send_string+0xa>
    1226:	08 95       	ret

00001228 <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
    1228:	80 e8       	ldi	r24, 0x80	; 128
    122a:	9d e8       	ldi	r25, 0x8D	; 141
    122c:	ab e5       	ldi	r26, 0x5B	; 91
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	04 c0       	rjmp	.+8      	; 0x123a <USART0_Receive+0x12>
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	a1 09       	sbc	r26, r1
    1236:	b1 09       	sbc	r27, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
    1238:	21 f0       	breq	.+8      	; 0x1242 <USART0_Receive+0x1a>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
    123a:	5f 9b       	sbis	0x0b, 7	; 11
    123c:	fa cf       	rjmp	.-12     	; 0x1232 <USART0_Receive+0xa>
            /* Get and return received data from buffer */ 
            return UDR0;
    123e:	8c b1       	in	r24, 0x0c	; 12
    1240:	08 95       	ret
        }
    } while (--timeout);
    return 255;
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    /********
    * This is the original
    ************/
    //while (!(UCSR0A & (1<<RXC0)));
    //return UDR0;
}
    1244:	08 95       	ret

00001246 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
    1246:	dc 01       	movw	r26, r24
    1248:	fc 01       	movw	r30, r24
    124a:	9c 01       	movw	r18, r24
    124c:	2b 5f       	subi	r18, 0xFB	; 251
    124e:	3f 4f       	sbci	r19, 0xFF	; 255
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5d e8       	ldi	r21, 0x8D	; 141
    1254:	6b e5       	ldi	r22, 0x5B	; 91
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	05 c0       	rjmp	.+10     	; 0x1264 <USART0_Receive_String+0x1e>
    125a:	41 50       	subi	r20, 0x01	; 1
    125c:	51 09       	sbc	r21, r1
    125e:	61 09       	sbc	r22, r1
    1260:	71 09       	sbc	r23, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
    1262:	61 f0       	breq	.+24     	; 0x127c <USART0_Receive_String+0x36>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
    1264:	5f 9b       	sbis	0x0b, 7	; 11
    1266:	f9 cf       	rjmp	.-14     	; 0x125a <USART0_Receive_String+0x14>
            /* Get and return received data from buffer */ 
            return UDR0;
    1268:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
    126a:	9e 37       	cpi	r25, 0x7E	; 126
    126c:	b1 f0       	breq	.+44     	; 0x129a <USART0_Receive_String+0x54>
        if (c == 255 || i > MAX_STRING_SIZE - 1){
    126e:	9f 3f       	cpi	r25, 0xFF	; 255
    1270:	29 f0       	breq	.+10     	; 0x127c <USART0_Receive_String+0x36>
    1272:	e2 17       	cp	r30, r18
    1274:	f3 07       	cpc	r31, r19
    1276:	11 f0       	breq	.+4      	; 0x127c <USART0_Receive_String+0x36>
            str[2] = 50;
            str[3] = END_STRING;
            str[4] = '\0';
            return;
        }
        str[i] = c;
    1278:	91 93       	st	Z+, r25
    127a:	ea cf       	rjmp	.-44     	; 0x1250 <USART0_Receive_String+0xa>
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
    127c:	82 e3       	ldi	r24, 0x32	; 50
    127e:	8c 93       	st	X, r24
            str[1] = 50;
    1280:	11 96       	adiw	r26, 0x01	; 1
    1282:	8c 93       	st	X, r24
    1284:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
    1286:	12 96       	adiw	r26, 0x02	; 2
    1288:	8c 93       	st	X, r24
    128a:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
    128c:	8e e7       	ldi	r24, 0x7E	; 126
    128e:	13 96       	adiw	r26, 0x03	; 3
    1290:	8c 93       	st	X, r24
    1292:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
    1294:	14 96       	adiw	r26, 0x04	; 4
    1296:	1c 92       	st	X, r1
            return;
    1298:	08 95       	ret
    129a:	08 95       	ret

0000129c <USART0_flush>:
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
    129c:	5f 9b       	sbis	0x0b, 7	; 11
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <USART0_flush+0xa>
        dummy = UDR0;
    12a0:	8c b1       	in	r24, 0x0c	; 12
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
    12a2:	5f 99       	sbic	0x0b, 7	; 11
    12a4:	fd cf       	rjmp	.-6      	; 0x12a0 <USART0_flush+0x4>
    12a6:	08 95       	ret

000012a8 <init_esc>:

void init_motors(){
    set_16bitPWM1();
}

void init_esc(){
    12a8:	83 e0       	ldi	r24, 0x03	; 3
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
    12ac:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ae:	ef e6       	ldi	r30, 0x6F	; 111
    12b0:	f7 e1       	ldi	r31, 0x17	; 23
    12b2:	31 97       	sbiw	r30, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <init_esc+0xa>
    12b6:	00 c0       	rjmp	.+0      	; 0x12b8 <init_esc+0x10>
    12b8:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
    12ba:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12bc:	ff ef       	ldi	r31, 0xFF	; 255
    12be:	23 ed       	ldi	r18, 0xD3	; 211
    12c0:	30 e3       	ldi	r19, 0x30	; 48
    12c2:	f1 50       	subi	r31, 0x01	; 1
    12c4:	20 40       	sbci	r18, 0x00	; 0
    12c6:	30 40       	sbci	r19, 0x00	; 0
    12c8:	e1 f7       	brne	.-8      	; 0x12c2 <init_esc+0x1a>
    12ca:	00 c0       	rjmp	.+0      	; 0x12cc <init_esc+0x24>
    12cc:	00 00       	nop
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
    12d0:	69 f7       	brne	.-38     	; 0x12ac <init_esc+0x4>
        PORTB |= (1 << 4);
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
        _delay_ms(1000);
    }
}
    12d2:	08 95       	ret

000012d4 <set_16bitPWM1>:

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
    12d4:	8f b5       	in	r24, 0x2f	; 47
    12d6:	80 68       	ori	r24, 0x80	; 128
    12d8:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
    12da:	8f b5       	in	r24, 0x2f	; 47
    12dc:	80 62       	ori	r24, 0x20	; 32
    12de:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
    12e0:	8f b5       	in	r24, 0x2f	; 47
    12e2:	88 60       	ori	r24, 0x08	; 8
    12e4:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
    12e6:	8f b5       	in	r24, 0x2f	; 47
    12e8:	82 60       	ori	r24, 0x02	; 2
    12ea:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
    12ec:	8e b5       	in	r24, 0x2e	; 46
    12ee:	88 61       	ori	r24, 0x18	; 24
    12f0:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
    12f2:	8e b5       	in	r24, 0x2e	; 46
    12f4:	82 60       	ori	r24, 0x02	; 2
    12f6:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
    12f8:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
    12fa:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
    12fc:	21 e0       	ldi	r18, 0x01	; 1
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	3d bd       	out	0x2d, r19	; 45
    1302:	2c bd       	out	0x2c, r18	; 44
    sei();
    1304:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
    1306:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	9f ef       	ldi	r25, 0xFF	; 255
    130c:	97 bd       	out	0x27, r25	; 39
    130e:	86 bd       	out	0x26, r24	; 38
    1310:	2f ef       	ldi	r18, 0xFF	; 255
    1312:	81 ee       	ldi	r24, 0xE1	; 225
    1314:	94 e0       	ldi	r25, 0x04	; 4
    1316:	21 50       	subi	r18, 0x01	; 1
    1318:	80 40       	sbci	r24, 0x00	; 0
    131a:	90 40       	sbci	r25, 0x00	; 0
    131c:	e1 f7       	brne	.-8      	; 0x1316 <set_16bitPWM1+0x42>
    131e:	00 c0       	rjmp	.+0      	; 0x1320 <set_16bitPWM1+0x4c>
    1320:	00 00       	nop
    1322:	08 95       	ret

00001324 <init_motors>:
#include "motors.h"

void init_motors(){
    set_16bitPWM1();
    1324:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <set_16bitPWM1>

00001328 <TIM16_WriteTCNT1>:
    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
    1328:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
    132a:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
    132c:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
    132e:	3d bd       	out	0x2d, r19	; 45
    1330:	2c bd       	out	0x2c, r18	; 44
    sei();
    1332:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
    1334:	9f bf       	out	0x3f, r25	; 63
    1336:	08 95       	ret

00001338 <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
    1338:	4f 92       	push	r4
    133a:	5f 92       	push	r5
    133c:	6f 92       	push	r6
    133e:	7f 92       	push	r7
    1340:	8f 92       	push	r8
    1342:	9f 92       	push	r9
    1344:	af 92       	push	r10
    1346:	bf 92       	push	r11
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	2b 01       	movw	r4, r22
    135a:	3c 01       	movw	r6, r24
    135c:	49 01       	movw	r8, r18
    135e:	5a 01       	movw	r10, r20
    1360:	67 01       	movw	r12, r14
    1362:	78 01       	movw	r14, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 ea       	ldi	r20, 0xA0	; 160
    136a:	51 e4       	ldi	r21, 0x41	; 65
    136c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__cmpsf2>
    1370:	87 fd       	sbrc	r24, 7
    1372:	53 c0       	rjmp	.+166    	; 0x141a <move+0xe2>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 ea       	ldi	r20, 0xA0	; 160
    137a:	52 e4       	ldi	r21, 0x42	; 66
    137c:	c3 01       	movw	r24, r6
    137e:	b2 01       	movw	r22, r4
    1380:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__gesf2>
    1384:	18 16       	cp	r1, r24
    1386:	0c f0       	brlt	.+2      	; 0x138a <move+0x52>
    1388:	51 c0       	rjmp	.+162    	; 0x142c <move+0xf4>
    138a:	c8 e9       	ldi	r28, 0x98	; 152
    138c:	dd e0       	ldi	r29, 0x0D	; 13
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 ea       	ldi	r20, 0xA0	; 160
    1394:	51 e4       	ldi	r21, 0x41	; 65
    1396:	c5 01       	movw	r24, r10
    1398:	b4 01       	movw	r22, r8
    139a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__cmpsf2>
    139e:	87 fd       	sbrc	r24, 7
    13a0:	42 c0       	rjmp	.+132    	; 0x1426 <move+0xee>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 ea       	ldi	r20, 0xA0	; 160
    13a8:	52 e4       	ldi	r21, 0x42	; 66
    13aa:	c5 01       	movw	r24, r10
    13ac:	b4 01       	movw	r22, r8
    13ae:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__gesf2>
    13b2:	18 16       	cp	r1, r24
    13b4:	0c f0       	brlt	.+2      	; 0x13b8 <move+0x80>
    13b6:	5d c0       	rjmp	.+186    	; 0x1472 <move+0x13a>
    13b8:	08 e9       	ldi	r16, 0x98	; 152
    13ba:	1d e0       	ldi	r17, 0x0D	; 13
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + Z_SATURATE_DIFFERENCE)){
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e2       	ldi	r20, 0x20	; 32
    13c2:	51 e4       	ldi	r21, 0x41	; 65
    13c4:	c7 01       	movw	r24, r14
    13c6:	b6 01       	movw	r22, r12
    13c8:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__cmpsf2>
    13cc:	87 fd       	sbrc	r24, 7
    13ce:	28 c0       	rjmp	.+80     	; 0x1420 <move+0xe8>
        z = MIN_INPUT + 1;
    }
    if (z > (MAX_INPUT - Z_SATURATE_DIFFERENCE)){
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	44 eb       	ldi	r20, 0xB4	; 180
    13d6:	52 e4       	ldi	r21, 0x42	; 66
    13d8:	c7 01       	movw	r24, r14
    13da:	b6 01       	movw	r22, r12
    13dc:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__gesf2>
    13e0:	18 16       	cp	r1, r24
    13e2:	b4 f5       	brge	.+108    	; 0x1450 <move+0x118>
    13e4:	68 ed       	ldi	r22, 0xD8	; 216
    13e6:	7e e0       	ldi	r23, 0x0E	; 14
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different speed controller
    z_speed = (unsigned int)((z - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    OCR1A = left_speed;
    13e8:	db bd       	out	0x2b, r29	; 43
    13ea:	ca bd       	out	0x2a, r28	; 42
    OCR1B = right_speed;
    13ec:	19 bd       	out	0x29, r17	; 41
    13ee:	08 bd       	out	0x28, r16	; 40
    OCR1C = z_speed;
    13f0:	70 93 79 00 	sts	0x0079, r23
    13f4:	60 93 78 00 	sts	0x0078, r22

}
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	bf 90       	pop	r11
    140a:	af 90       	pop	r10
    140c:	9f 90       	pop	r9
    140e:	8f 90       	pop	r8
    1410:	7f 90       	pop	r7
    1412:	6f 90       	pop	r6
    1414:	5f 90       	pop	r5
    1416:	4f 90       	pop	r4
    1418:	08 95       	ret
    141a:	c8 ed       	ldi	r28, 0xD8	; 216
    141c:	d9 e0       	ldi	r29, 0x09	; 9
    141e:	b7 cf       	rjmp	.-146    	; 0x138e <move+0x56>
    1420:	68 ea       	ldi	r22, 0xA8	; 168
    1422:	78 e0       	ldi	r23, 0x08	; 8
    1424:	e1 cf       	rjmp	.-62     	; 0x13e8 <move+0xb0>
    1426:	08 ed       	ldi	r16, 0xD8	; 216
    1428:	19 e0       	ldi	r17, 0x09	; 9
    142a:	c8 cf       	rjmp	.-112    	; 0x13bc <move+0x84>
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e8       	ldi	r20, 0x80	; 128
    1432:	51 e4       	ldi	r21, 0x41	; 65
    1434:	c3 01       	movw	r24, r6
    1436:	b2 01       	movw	r22, r4
    1438:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e8       	ldi	r19, 0x80	; 128
    1440:	49 e0       	ldi	r20, 0x09	; 9
    1442:	55 e4       	ldi	r21, 0x45	; 69
    1444:	0e 94 a7 0c 	call	0x194e	; 0x194e <__addsf3>
    1448:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__fixunssfsi>
    144c:	eb 01       	movw	r28, r22
    144e:	9f cf       	rjmp	.-194    	; 0x138e <move+0x56>
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e8       	ldi	r20, 0x80	; 128
    1456:	51 e4       	ldi	r21, 0x41	; 65
    1458:	c7 01       	movw	r24, r14
    145a:	b6 01       	movw	r22, r12
    145c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e8       	ldi	r19, 0x80	; 128
    1464:	49 e0       	ldi	r20, 0x09	; 9
    1466:	55 e4       	ldi	r21, 0x45	; 69
    1468:	0e 94 a7 0c 	call	0x194e	; 0x194e <__addsf3>
    146c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__fixunssfsi>
    1470:	bb cf       	rjmp	.-138    	; 0x13e8 <move+0xb0>
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	51 e4       	ldi	r21, 0x41	; 65
    147a:	c5 01       	movw	r24, r10
    147c:	b4 01       	movw	r22, r8
    147e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e8       	ldi	r19, 0x80	; 128
    1486:	49 e0       	ldi	r20, 0x09	; 9
    1488:	55 e4       	ldi	r21, 0x45	; 69
    148a:	0e 94 a7 0c 	call	0x194e	; 0x194e <__addsf3>
    148e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__fixunssfsi>
    1492:	8b 01       	movw	r16, r22
    1494:	93 cf       	rjmp	.-218    	; 0x13bc <move+0x84>

00001496 <init_HMC5883L>:
#include "magnometer.h"

void init_HMC5883L(void){

    i2c_start(HMC5883L_WRITE);
    1496:	8c e3       	ldi	r24, 0x3C	; 60
    1498:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <i2c_start>
    i2c_write(0x00); // set pointer to CRA
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <i2c_write>
    i2c_write(0x70); // write 0x70 to CRA
    14a2:	80 e7       	ldi	r24, 0x70	; 112
    14a4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <i2c_write>
    i2c_stop();
    14a8:	0e 94 1b 07 	call	0xe36	; 0xe36 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
    14ac:	8c e3       	ldi	r24, 0x3C	; 60
    14ae:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <i2c_start>
    i2c_write(0x01); // set pointer to CRB
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <i2c_write>
    i2c_write(0xA0);
    14b8:	80 ea       	ldi	r24, 0xA0	; 160
    14ba:	0e 94 fe 05 	call	0xbfc	; 0xbfc <i2c_write>
    i2c_stop();
    14be:	0e 94 1b 07 	call	0xe36	; 0xe36 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
    14c2:	8c e3       	ldi	r24, 0x3C	; 60
    14c4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <i2c_start>
    i2c_write(0x02); // set pointer to measurement mode
    14c8:	82 e0       	ldi	r24, 0x02	; 2
    14ca:	0e 94 fe 05 	call	0xbfc	; 0xbfc <i2c_write>
    i2c_write(0x00); // continous measurement
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <i2c_write>
    i2c_stop();
    14d4:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <i2c_stop>

000014d8 <getHeading>:
}
float getHeading(int16_t *x, int16_t *y, int16_t *z){
    14d8:	cf 92       	push	r12
    14da:	df 92       	push	r13
    14dc:	ef 92       	push	r14
    14de:	ff 92       	push	r15
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	8c 01       	movw	r16, r24
    14ea:	eb 01       	movw	r28, r22
    14ec:	7a 01       	movw	r14, r20

    float headingDegrees;
    
    i2c_start(HMC5883L_WRITE);
    14ee:	8c e3       	ldi	r24, 0x3C	; 60
    14f0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <i2c_start>
    i2c_write(0x03); // set pointer to X axis MSB
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	0e 94 fe 05 	call	0xbfc	; 0xbfc <i2c_write>
    i2c_stop();
    14fa:	0e 94 1b 07 	call	0xe36	; 0xe36 <i2c_stop>

    i2c_start(HMC5883L_READ);
    14fe:	8d e3       	ldi	r24, 0x3D	; 61
    1500:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <i2c_start>

    *x = ((uint8_t)i2c_read_ack())<<8;
    1504:	0e 94 10 06 	call	0xc20	; 0xc20 <i2c_read_ack>
    1508:	f8 01       	movw	r30, r16
    150a:	10 82       	st	Z, r1
    150c:	81 83       	std	Z+1, r24	; 0x01
    *x |= i2c_read_ack();
    150e:	0e 94 10 06 	call	0xc20	; 0xc20 <i2c_read_ack>
    1512:	f8 01       	movw	r30, r16
    1514:	20 81       	ld	r18, Z
    1516:	31 81       	ldd	r19, Z+1	; 0x01
    1518:	28 2b       	or	r18, r24
    151a:	31 83       	std	Z+1, r19	; 0x01
    151c:	20 83       	st	Z, r18

    *z = ((uint8_t)i2c_read_ack())<<8;
    151e:	0e 94 10 06 	call	0xc20	; 0xc20 <i2c_read_ack>
    1522:	f7 01       	movw	r30, r14
    1524:	10 82       	st	Z, r1
    1526:	81 83       	std	Z+1, r24	; 0x01
    *z |= i2c_read_ack();
    1528:	0e 94 10 06 	call	0xc20	; 0xc20 <i2c_read_ack>
    152c:	f7 01       	movw	r30, r14
    152e:	20 81       	ld	r18, Z
    1530:	31 81       	ldd	r19, Z+1	; 0x01
    1532:	28 2b       	or	r18, r24
    1534:	31 83       	std	Z+1, r19	; 0x01
    1536:	20 83       	st	Z, r18

    *y = ((uint8_t)i2c_read_ack())<<8;
    1538:	0e 94 10 06 	call	0xc20	; 0xc20 <i2c_read_ack>
    153c:	18 82       	st	Y, r1
    153e:	89 83       	std	Y+1, r24	; 0x01
    *y |= i2c_read_nack();
    1540:	0e 94 1a 06 	call	0xc34	; 0xc34 <i2c_read_nack>
    1544:	28 81       	ld	r18, Y
    1546:	39 81       	ldd	r19, Y+1	; 0x01
    1548:	28 2b       	or	r18, r24
    154a:	39 83       	std	Y+1, r19	; 0x01
    154c:	28 83       	st	Y, r18

    i2c_stop();
    154e:	0e 94 1b 07 	call	0xe36	; 0xe36 <i2c_stop>

    headingDegrees = atan2((double)*y,(double)*x) * 180 / 3.141592654 + 180;
    1552:	f8 01       	movw	r30, r16
    1554:	60 81       	ld	r22, Z
    1556:	71 81       	ldd	r23, Z+1	; 0x01
    1558:	07 2e       	mov	r0, r23
    155a:	00 0c       	add	r0, r0
    155c:	88 0b       	sbc	r24, r24
    155e:	99 0b       	sbc	r25, r25
    1560:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
    1564:	6b 01       	movw	r12, r22
    1566:	7c 01       	movw	r14, r24
    1568:	68 81       	ld	r22, Y
    156a:	79 81       	ldd	r23, Y+1	; 0x01
    156c:	07 2e       	mov	r0, r23
    156e:	00 0c       	add	r0, r0
    1570:	88 0b       	sbc	r24, r24
    1572:	99 0b       	sbc	r25, r25
    1574:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
    1578:	a7 01       	movw	r20, r14
    157a:	96 01       	movw	r18, r12
    157c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <atan2>
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	44 e3       	ldi	r20, 0x34	; 52
    1586:	53 e4       	ldi	r21, 0x43	; 67
    1588:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
    158c:	2b ed       	ldi	r18, 0xDB	; 219
    158e:	3f e0       	ldi	r19, 0x0F	; 15
    1590:	49 e4       	ldi	r20, 0x49	; 73
    1592:	50 e4       	ldi	r21, 0x40	; 64
    1594:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divsf3>
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	44 e3       	ldi	r20, 0x34	; 52
    159e:	53 e4       	ldi	r21, 0x43	; 67
    15a0:	0e 94 a7 0c 	call	0x194e	; 0x194e <__addsf3>

    return headingDegrees;
}
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	ff 90       	pop	r15
    15ae:	ef 90       	pop	r14
    15b0:	df 90       	pop	r13
    15b2:	cf 90       	pop	r12
    15b4:	08 95       	ret

000015b6 <get_distance>:
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	cb 01       	movw	r24, r22
    15bc:	08 95       	ret

000015be <print_distance>:
    return 0;
}

double print_distance(unsigned int pin){
    return 0;
}
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	cb 01       	movw	r24, r22
    15c4:	08 95       	ret

000015c6 <enable_laser_sensor>:
void enable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
    15c6:	43 98       	cbi	0x08, 3	; 8

    //enable analog comparator multiplexer, set SFIOR:ACME
    SFIOR |= (1 << ACME);
    15c8:	80 b5       	in	r24, 0x20	; 32
    15ca:	88 60       	ori	r24, 0x08	; 8
    15cc:	80 bd       	out	0x20, r24	; 32

    //set AIN1 to laser sensor pin
    ADMUX &= 0b11111000; //clear the admux input pin bits
    15ce:	87 b1       	in	r24, 0x07	; 7
    15d0:	88 7f       	andi	r24, 0xF8	; 248
    15d2:	87 b9       	out	0x07, r24	; 7
    ADMUX |= LASER_SENSOR;  //set the new bits
    15d4:	38 9a       	sbi	0x07, 0	; 7
    
    //enable analog comparator, clear ACSR:ACD
    ACSR &= ~(1 << ACD);
    15d6:	47 98       	cbi	0x08, 7	; 8
    
    //set comparator interrupt on rising output edge, set ACSR:ACIS1, set ACSR:ACIS0
    ACSR |= (1 << ACIS1) | (1 << ACIS0);
    15d8:	88 b1       	in	r24, 0x08	; 8
    15da:	83 60       	ori	r24, 0x03	; 3
    15dc:	88 b9       	out	0x08, r24	; 8
    
    //enable analog comparator interrupt, set ACSR:ACIE
    ACSR |= (1 << ACIE);
    15de:	43 9a       	sbi	0x08, 3	; 8
    15e0:	08 95       	ret

000015e2 <disable_laser_sensor>:
    
    //Be sure to handle the interrupt until ACSR:ACO goes low
}
void disable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
    15e2:	43 98       	cbi	0x08, 3	; 8

    //disable analog comparator, set ACSR:ACD
    ACSR |= (1 << ACD);
    15e4:	47 9a       	sbi	0x08, 7	; 8

    //disable analog comparator multiplexor, clear SFIOR:ACME
    SFIOR &= ~(1 << ACME);
    15e6:	80 b5       	in	r24, 0x20	; 32
    15e8:	87 7f       	andi	r24, 0xF7	; 247
    15ea:	80 bd       	out	0x20, r24	; 32
    15ec:	08 95       	ret

000015ee <laser_off>:
}

void laser_off(){
    PORTB |= (1 << LASER);
    15ee:	c0 9a       	sbi	0x18, 0	; 24
    15f0:	08 95       	ret

000015f2 <laser_on>:
}
void laser_on(){
    PORTB &= ~(1 << LASER);
    15f2:	c0 98       	cbi	0x18, 0	; 24
    15f4:	08 95       	ret

000015f6 <calibrate_pressure_sensor>:
#define	PRESSURESENSOR_C

#include "pressuresensor.h"

void calibrate_pressure_sensor(){
	PSENSOR_MIN = get_voltage(PSENSOR_PIN);;
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 51 07 	call	0xea2	; 0xea2 <get_voltage>
    15fe:	60 93 42 03 	sts	0x0342, r22
    1602:	70 93 43 03 	sts	0x0343, r23
    1606:	80 93 44 03 	sts	0x0344, r24
    160a:	90 93 45 03 	sts	0x0345, r25
    160e:	08 95       	ret

00001610 <get_depth_mpa>:
}

double get_depth_mpa(){
    1610:	8f 92       	push	r8
    1612:	9f 92       	push	r9
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
	return 1.2 * (get_voltage(PSENSOR_PIN) - PSENSOR_MIN)/(4.5-PSENSOR_MIN);
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 51 07 	call	0xea2	; 0xea2 <get_voltage>
    1628:	20 91 42 03 	lds	r18, 0x0342
    162c:	30 91 43 03 	lds	r19, 0x0343
    1630:	40 91 44 03 	lds	r20, 0x0344
    1634:	50 91 45 03 	lds	r21, 0x0345
    1638:	80 90 42 03 	lds	r8, 0x0342
    163c:	90 90 43 03 	lds	r9, 0x0343
    1640:	a0 90 44 03 	lds	r10, 0x0344
    1644:	b0 90 45 03 	lds	r11, 0x0345
    1648:	0e 94 a6 0c 	call	0x194c	; 0x194c <__subsf3>
    164c:	2a e9       	ldi	r18, 0x9A	; 154
    164e:	39 e9       	ldi	r19, 0x99	; 153
    1650:	49 e9       	ldi	r20, 0x99	; 153
    1652:	5f e3       	ldi	r21, 0x3F	; 63
    1654:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
    1658:	6b 01       	movw	r12, r22
    165a:	7c 01       	movw	r14, r24
    165c:	a5 01       	movw	r20, r10
    165e:	94 01       	movw	r18, r8
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	80 e9       	ldi	r24, 0x90	; 144
    1666:	90 e4       	ldi	r25, 0x40	; 64
    1668:	0e 94 a6 0c 	call	0x194c	; 0x194c <__subsf3>
    166c:	9b 01       	movw	r18, r22
    166e:	ac 01       	movw	r20, r24
    1670:	c7 01       	movw	r24, r14
    1672:	b6 01       	movw	r22, r12
    1674:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divsf3>
}
    1678:	ff 90       	pop	r15
    167a:	ef 90       	pop	r14
    167c:	df 90       	pop	r13
    167e:	cf 90       	pop	r12
    1680:	bf 90       	pop	r11
    1682:	af 90       	pop	r10
    1684:	9f 90       	pop	r9
    1686:	8f 90       	pop	r8
    1688:	08 95       	ret

0000168a <get_depth_feet>:
double get_depth_feet(){
	return 334.56229215 * get_depth_mpa();
    168a:	0e 94 08 0b 	call	0x1610	; 0x1610 <get_depth_mpa>
    168e:	29 ef       	ldi	r18, 0xF9	; 249
    1690:	37 e4       	ldi	r19, 0x47	; 71
    1692:	47 ea       	ldi	r20, 0xA7	; 167
    1694:	53 e4       	ldi	r21, 0x43	; 67
    1696:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
}
    169a:	08 95       	ret

0000169c <set_rgb>:
        blue = 0;
    if (blue > 255)
        blue = 255;
    temp = (255 - red)/(float)255;
    //OCR3A = temp*ICR3;
    OCR3A = 32000;
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	9d e7       	ldi	r25, 0x7D	; 125
    16a0:	90 93 87 00 	sts	0x0087, r25
    16a4:	80 93 86 00 	sts	0x0086, r24
    temp = (255 - green)/(float)255;
    //OCR3B = temp*ICR3;
    OCR3B = 32000;
    16a8:	90 93 85 00 	sts	0x0085, r25
    16ac:	80 93 84 00 	sts	0x0084, r24
    temp = (255 - blue)/(float)255;
    //OCR3C = temp*ICR3;
    OCR3C = 32000;
    16b0:	90 93 83 00 	sts	0x0083, r25
    16b4:	80 93 82 00 	sts	0x0082, r24
    16b8:	08 95       	ret

000016ba <set_16bitPWM3>:

}

void set_16bitPWM3(){
    //16-bit fast pwm non-inverting on PB5
    TCCR3A |= (1 << COM3A1); //non-inverting
    16ba:	eb e8       	ldi	r30, 0x8B	; 139
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	80 68       	ori	r24, 0x80	; 128
    16c2:	80 83       	st	Z, r24

    //16-bit fast pwm non-inverting on PB6
    TCCR3A |= (1 << COM3B1); //non-inverting
    16c4:	80 81       	ld	r24, Z
    16c6:	80 62       	ori	r24, 0x20	; 32
    16c8:	80 83       	st	Z, r24

    //16-bit fast pwm non-inverting on PB7
    TCCR3A |= (1 << COM3C1); //non-inverting
    16ca:	80 81       	ld	r24, Z
    16cc:	88 60       	ori	r24, 0x08	; 8
    16ce:	80 83       	st	Z, r24

    //Fast PWM w/ TOP ICR1
    TCCR3A |= (1 << WGM31); 
    16d0:	80 81       	ld	r24, Z
    16d2:	82 60       	ori	r24, 0x02	; 2
    16d4:	80 83       	st	Z, r24
    TCCR3B |= (1 << WGM33) | (1 << WGM32);
    16d6:	ea e8       	ldi	r30, 0x8A	; 138
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	88 61       	ori	r24, 0x18	; 24
    16de:	80 83       	st	Z, r24
    
    switch (LED_PRESCALER){
        case 1:
            TCCR3B |= (1 << CS30); //244.140625 Hz
    16e0:	80 81       	ld	r24, Z
    16e2:	81 60       	ori	r24, 0x01	; 1
    16e4:	80 83       	st	Z, r24
}

void TIM16_WriteTCNT3( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
    16e6:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
    16e8:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT3 = i;
    16ea:	21 e0       	ldi	r18, 0x01	; 1
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	30 93 89 00 	sts	0x0089, r19
    16f2:	20 93 88 00 	sts	0x0088, r18
    sei();
    16f6:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
    16f8:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT3(1);
    ICR3 = (unsigned int) 65535;
    16fa:	8f ef       	ldi	r24, 0xFF	; 255
    16fc:	9f ef       	ldi	r25, 0xFF	; 255
    16fe:	90 93 81 00 	sts	0x0081, r25
    1702:	80 93 80 00 	sts	0x0080, r24
    1706:	2f ef       	ldi	r18, 0xFF	; 255
    1708:	81 ee       	ldi	r24, 0xE1	; 225
    170a:	94 e0       	ldi	r25, 0x04	; 4
    170c:	21 50       	subi	r18, 0x01	; 1
    170e:	80 40       	sbci	r24, 0x00	; 0
    1710:	90 40       	sbci	r25, 0x00	; 0
    1712:	e1 f7       	brne	.-8      	; 0x170c <set_16bitPWM3+0x52>
    1714:	00 c0       	rjmp	.+0      	; 0x1716 <set_16bitPWM3+0x5c>
    1716:	00 00       	nop
    1718:	08 95       	ret

0000171a <init_leds>:
#include "leds.h"

void init_leds(){
    DDRE |= 0xFF;
    171a:	82 b1       	in	r24, 0x02	; 2
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	82 b9       	out	0x02, r24	; 2
    PORTE = 0;
    1720:	13 b8       	out	0x03, r1	; 3
    set_16bitPWM3();
    1722:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <set_16bitPWM3>
        blue = 0;
    if (blue > 255)
        blue = 255;
    temp = (255 - red)/(float)255;
    //OCR3A = temp*ICR3;
    OCR3A = 32000;
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	9d e7       	ldi	r25, 0x7D	; 125
    172a:	90 93 87 00 	sts	0x0087, r25
    172e:	80 93 86 00 	sts	0x0086, r24
    temp = (255 - green)/(float)255;
    //OCR3B = temp*ICR3;
    OCR3B = 32000;
    1732:	90 93 85 00 	sts	0x0085, r25
    1736:	80 93 84 00 	sts	0x0084, r24
    temp = (255 - blue)/(float)255;
    //OCR3C = temp*ICR3;
    OCR3C = 32000;
    173a:	90 93 83 00 	sts	0x0083, r25
    173e:	80 93 82 00 	sts	0x0082, r24
    1742:	08 95       	ret

00001744 <TIM16_WriteTCNT3>:
    1744:	9c 01       	movw	r18, r24
    1746:	9f b7       	in	r25, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	30 93 89 00 	sts	0x0089, r19
    174e:	20 93 88 00 	sts	0x0088, r18
    1752:	78 94       	sei
    1754:	9f bf       	out	0x3f, r25	; 63
    1756:	08 95       	ret

00001758 <main>:

char buffer[10];
volatile int object_detected = 0;


int main(){
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	00 d0       	rcall	.+0      	; 0x175e <main+0x6>
    175e:	00 d0       	rcall	.+0      	; 0x1760 <main+0x8>
    1760:	1f 92       	push	r1
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0xFF;
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	87 bb       	out	0x17, r24	; 23
    PORTB = 0;
    176a:	18 ba       	out	0x18, r1	; 24
    USART0_Init(MYUBRR);
    176c:	87 e6       	ldi	r24, 0x67	; 103
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <USART0_Init>
    USART0_send_string((unsigned char *)"USART0 (RS232) Initialized\r\n");
    1774:	80 e4       	ldi	r24, 0x40	; 64
    1776:	92 e0       	ldi	r25, 0x02	; 2
    1778:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    STABLE_Z = 50;
    177c:	82 e3       	ldi	r24, 0x32	; 50
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	90 93 01 01 	sts	0x0101, r25
    1784:	80 93 00 01 	sts	0x0100, r24
    enable_adc();
    1788:	0e 94 1f 07 	call	0xe3e	; 0xe3e <enable_adc>
    calibrate_pressure_sensor();
    178c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <calibrate_pressure_sensor>
    //init_HMC5883L(); //magnometer
    init_motors();
    1790:	0e 94 92 09 	call	0x1324	; 0x1324 <init_motors>
    init_data_timer();
    1794:	0e 94 4d 03 	call	0x69a	; 0x69a <init_data_timer>
    enable_bumpers();
    1798:	0e 94 3f 03 	call	0x67e	; 0x67e <enable_bumpers>
    init_leds();
    179c:	0e 94 8d 0b 	call	0x171a	; 0x171a <init_leds>
    //set_rgb(RED);
    sei();
    17a0:	78 94       	sei
    

    unsigned char data[MAX_STRING_SIZE];
    int i;
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        data[i] = '\0';
    17a2:	19 82       	std	Y+1, r1	; 0x01
    17a4:	1a 82       	std	Y+2, r1	; 0x02
    17a6:	1b 82       	std	Y+3, r1	; 0x03
    17a8:	1d 82       	std	Y+5, r1	; 0x05
    }
    data[MAX_STRING_SIZE - 2] = '~';
    17aa:	8e e7       	ldi	r24, 0x7E	; 126
    17ac:	8c 83       	std	Y+4, r24	; 0x04

    move(50,50,50);
    17ae:	e1 2c       	mov	r14, r1
    17b0:	f1 2c       	mov	r15, r1
    17b2:	08 e4       	ldi	r16, 0x48	; 72
    17b4:	12 e4       	ldi	r17, 0x42	; 66
    17b6:	a8 01       	movw	r20, r16
    17b8:	97 01       	movw	r18, r14
    17ba:	c8 01       	movw	r24, r16
    17bc:	b7 01       	movw	r22, r14
    17be:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
    while (1){
        USART0_Receive_String(data);
    17c2:	ce 01       	movw	r24, r28
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	0e 94 23 09 	call	0x1246	; 0x1246 <USART0_Receive_String>
        USART0_send_string((unsigned char *)"Data received: ");
    17ca:	8d e5       	ldi	r24, 0x5D	; 93
    17cc:	92 e0       	ldi	r25, 0x02	; 2
    17ce:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
        USART0_send_string(data);
    17d2:	ce 01       	movw	r24, r28
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
        USART0_send_string((unsigned char *)"\r\n");
    17da:	84 e2       	ldi	r24, 0x24	; 36
    17dc:	93 e0       	ldi	r25, 0x03	; 3
    17de:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
        //depth_to_leds();
        if (strcmp((char *)data,"eee~") == 0){
    17e2:	6d e6       	ldi	r22, 0x6D	; 109
    17e4:	72 e0       	ldi	r23, 0x02	; 2
    17e6:	ce 01       	movw	r24, r28
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <strcmp>
    17ee:	89 2b       	or	r24, r25
    17f0:	69 f1       	breq	.+90     	; 0x184c <main+0xf4>
            UCSR0B &= ~(1<<RXEN0);
            path2();
            //enable RX0
            UCSR0B |= (1<<RXEN0);
        }
        else if (data[0] == 103 && data[1] == 103 && data[3] == 126){ //0x67 0x67 0xdd 0x7e or 103 103 ddd 126
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	87 36       	cpi	r24, 0x67	; 103
    17f6:	09 f4       	brne	.+2      	; 0x17fa <main+0xa2>
    17f8:	62 c0       	rjmp	.+196    	; 0x18be <main+0x166>
            USART0_send_string((unsigned char *)"Stable Z Set\r\n");
            STABLE_Z = data[2]; 
        }
        else if (strcmp((char *)data,"hhh~") == 0){ //0x68 0x68 0x68 0x7e or 104 104 104 126
    17fa:	65 e9       	ldi	r22, 0x95	; 149
    17fc:	72 e0       	ldi	r23, 0x02	; 2
    17fe:	ce 01       	movw	r24, r28
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <strcmp>
    1806:	89 2b       	or	r24, r25
    1808:	51 f1       	breq	.+84     	; 0x185e <main+0x106>
            USART0_send_string((unsigned char *)"Depth reached. Waiting for 10 seconds.\r\n");
            _delay_ms(10000);
            move(50,50,50);
            USART0_send_string((unsigned char *)"Returning to surface\r\n");
        }
        else if (strcmp((char *)data,"fff~") == 0){ //0x66 0x66 0x66 0x7e or 102 102 102 126
    180a:	6e ee       	ldi	r22, 0xEE	; 238
    180c:	72 e0       	ldi	r23, 0x02	; 2
    180e:	ce 01       	movw	r24, r28
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <strcmp>
    1816:	89 2b       	or	r24, r25
    1818:	09 f4       	brne	.+2      	; 0x181c <main+0xc4>
    181a:	8d c0       	rjmp	.+282    	; 0x1936 <main+0x1de>
            USART0_send_string((unsigned char *)"Calibrating\r\n");
            calibrate_pressure_sensor();
            USART0_send_string((unsigned char *)"Calibrate complete\r\n");
        }
        else if (strcmp((char *)data,"222~") == 0){
    181c:	66 e1       	ldi	r22, 0x16	; 22
    181e:	73 e0       	ldi	r23, 0x03	; 3
    1820:	ce 01       	movw	r24, r28
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <strcmp>
    1828:	89 2b       	or	r24, r25
    182a:	09 f0       	breq	.+2      	; 0x182e <main+0xd6>
    182c:	5b c0       	rjmp	.+182    	; 0x18e4 <main+0x18c>
            USART0_send_string((unsigned char *)"Stopping \r\n");
    182e:	8b e1       	ldi	r24, 0x1B	; 27
    1830:	93 e0       	ldi	r25, 0x03	; 3
    1832:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
            move(50,50,50);
    1836:	e1 2c       	mov	r14, r1
    1838:	f1 2c       	mov	r15, r1
    183a:	08 e4       	ldi	r16, 0x48	; 72
    183c:	12 e4       	ldi	r17, 0x42	; 66
    183e:	a8 01       	movw	r20, r16
    1840:	97 01       	movw	r18, r14
    1842:	c8 01       	movw	r24, r16
    1844:	b7 01       	movw	r22, r14
    1846:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
    184a:	bb cf       	rjmp	.-138    	; 0x17c2 <main+0x6a>
        USART0_send_string((unsigned char *)"Data received: ");
        USART0_send_string(data);
        USART0_send_string((unsigned char *)"\r\n");
        //depth_to_leds();
        if (strcmp((char *)data,"eee~") == 0){
            USART0_send_string((unsigned char *)"Initiating path 1\r\n");
    184c:	82 e7       	ldi	r24, 0x72	; 114
    184e:	92 e0       	ldi	r25, 0x02	; 2
    1850:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
            //disable RX0
            UCSR0B &= ~(1<<RXEN0);
    1854:	54 98       	cbi	0x0a, 4	; 10
            path2();
    1856:	0e 94 87 04 	call	0x90e	; 0x90e <path2>
            //enable RX0
            UCSR0B |= (1<<RXEN0);
    185a:	54 9a       	sbi	0x0a, 4	; 10
    185c:	b2 cf       	rjmp	.-156    	; 0x17c2 <main+0x6a>
        else if (data[0] == 103 && data[1] == 103 && data[3] == 126){ //0x67 0x67 0xdd 0x7e or 103 103 ddd 126
            USART0_send_string((unsigned char *)"Stable Z Set\r\n");
            STABLE_Z = data[2]; 
        }
        else if (strcmp((char *)data,"hhh~") == 0){ //0x68 0x68 0x68 0x7e or 104 104 104 126
            USART0_send_string((unsigned char *)"Diving to 10 feet\r\n");
    185e:	8a e9       	ldi	r24, 0x9A	; 154
    1860:	92 e0       	ldi	r25, 0x02	; 2
    1862:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
            dive(10);
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	80 e2       	ldi	r24, 0x20	; 32
    186c:	91 e4       	ldi	r25, 0x41	; 65
    186e:	0e 94 de 02 	call	0x5bc	; 0x5bc <dive>
    1872:	2f ef       	ldi	r18, 0xFF	; 255
    1874:	33 ed       	ldi	r19, 0xD3	; 211
    1876:	80 e3       	ldi	r24, 0x30	; 48
    1878:	21 50       	subi	r18, 0x01	; 1
    187a:	30 40       	sbci	r19, 0x00	; 0
    187c:	80 40       	sbci	r24, 0x00	; 0
    187e:	e1 f7       	brne	.-8      	; 0x1878 <main+0x120>
    1880:	00 c0       	rjmp	.+0      	; 0x1882 <main+0x12a>
    1882:	00 00       	nop
            _delay_ms(1000);
            USART0_send_string((unsigned char *)"Depth reached. Waiting for 10 seconds.\r\n");
    1884:	8e ea       	ldi	r24, 0xAE	; 174
    1886:	92 e0       	ldi	r25, 0x02	; 2
    1888:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    188c:	9a ea       	ldi	r25, 0xAA	; 170
    188e:	26 ee       	ldi	r18, 0xE6	; 230
    1890:	36 e9       	ldi	r19, 0x96	; 150
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	91 50       	subi	r25, 0x01	; 1
    1896:	20 40       	sbci	r18, 0x00	; 0
    1898:	30 40       	sbci	r19, 0x00	; 0
    189a:	80 40       	sbci	r24, 0x00	; 0
    189c:	d9 f7       	brne	.-10     	; 0x1894 <main+0x13c>
    189e:	00 00       	nop
            _delay_ms(10000);
            move(50,50,50);
    18a0:	e1 2c       	mov	r14, r1
    18a2:	f1 2c       	mov	r15, r1
    18a4:	08 e4       	ldi	r16, 0x48	; 72
    18a6:	12 e4       	ldi	r17, 0x42	; 66
    18a8:	a8 01       	movw	r20, r16
    18aa:	97 01       	movw	r18, r14
    18ac:	c8 01       	movw	r24, r16
    18ae:	b7 01       	movw	r22, r14
    18b0:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
            USART0_send_string((unsigned char *)"Returning to surface\r\n");
    18b4:	87 ed       	ldi	r24, 0xD7	; 215
    18b6:	92 e0       	ldi	r25, 0x02	; 2
    18b8:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    18bc:	82 cf       	rjmp	.-252    	; 0x17c2 <main+0x6a>
            UCSR0B &= ~(1<<RXEN0);
            path2();
            //enable RX0
            UCSR0B |= (1<<RXEN0);
        }
        else if (data[0] == 103 && data[1] == 103 && data[3] == 126){ //0x67 0x67 0xdd 0x7e or 103 103 ddd 126
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	87 36       	cpi	r24, 0x67	; 103
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <main+0x16e>
    18c4:	9a cf       	rjmp	.-204    	; 0x17fa <main+0xa2>
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	8e 37       	cpi	r24, 0x7E	; 126
    18ca:	09 f0       	breq	.+2      	; 0x18ce <main+0x176>
    18cc:	96 cf       	rjmp	.-212    	; 0x17fa <main+0xa2>
            USART0_send_string((unsigned char *)"Stable Z Set\r\n");
    18ce:	86 e8       	ldi	r24, 0x86	; 134
    18d0:	92 e0       	ldi	r25, 0x02	; 2
    18d2:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
            STABLE_Z = data[2]; 
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	90 93 01 01 	sts	0x0101, r25
    18de:	80 93 00 01 	sts	0x0100, r24
    18e2:	6f cf       	rjmp	.-290    	; 0x17c2 <main+0x6a>
        else if (strcmp((char *)data,"222~") == 0){
            USART0_send_string((unsigned char *)"Stopping \r\n");
            move(50,50,50);
        }
        else{
            USART0_send_string((unsigned char *)"Moving: ");
    18e4:	87 e2       	ldi	r24, 0x27	; 39
    18e6:	93 e0       	ldi	r25, 0x03	; 3
    18e8:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
            USART0_send_string(data);
    18ec:	ce 01       	movw	r24, r28
    18ee:	01 96       	adiw	r24, 0x01	; 1
    18f0:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
            USART0_send_string((unsigned char*)"\r\n");
    18f4:	84 e2       	ldi	r24, 0x24	; 36
    18f6:	93 e0       	ldi	r25, 0x03	; 3
    18f8:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
            move((float)data[0],(float)data[1],(float)data[2]);
    18fc:	6b 81       	ldd	r22, Y+3	; 0x03
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__floatunsisf>
    1908:	6b 01       	movw	r12, r22
    190a:	7c 01       	movw	r14, r24
    190c:	6a 81       	ldd	r22, Y+2	; 0x02
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__floatunsisf>
    1918:	4b 01       	movw	r8, r22
    191a:	5c 01       	movw	r10, r24
    191c:	69 81       	ldd	r22, Y+1	; 0x01
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__floatunsisf>
    1928:	87 01       	movw	r16, r14
    192a:	76 01       	movw	r14, r12
    192c:	a5 01       	movw	r20, r10
    192e:	94 01       	movw	r18, r8
    1930:	0e 94 9c 09 	call	0x1338	; 0x1338 <move>
    1934:	46 cf       	rjmp	.-372    	; 0x17c2 <main+0x6a>
            _delay_ms(10000);
            move(50,50,50);
            USART0_send_string((unsigned char *)"Returning to surface\r\n");
        }
        else if (strcmp((char *)data,"fff~") == 0){ //0x66 0x66 0x66 0x7e or 102 102 102 126
            USART0_send_string((unsigned char *)"Calibrating\r\n");
    1936:	83 ef       	ldi	r24, 0xF3	; 243
    1938:	92 e0       	ldi	r25, 0x02	; 2
    193a:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
            calibrate_pressure_sensor();
    193e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <calibrate_pressure_sensor>
            USART0_send_string((unsigned char *)"Calibrate complete\r\n");
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	0e 94 08 09 	call	0x1210	; 0x1210 <USART0_send_string>
    194a:	3b cf       	rjmp	.-394    	; 0x17c2 <main+0x6a>

0000194c <__subsf3>:
    194c:	50 58       	subi	r21, 0x80	; 128

0000194e <__addsf3>:
    194e:	bb 27       	eor	r27, r27
    1950:	aa 27       	eor	r26, r26
    1952:	0e 94 be 0c 	call	0x197c	; 0x197c <__addsf3x>
    1956:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__fp_round>
    195a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__fp_pscA>
    195e:	38 f0       	brcs	.+14     	; 0x196e <__addsf3+0x20>
    1960:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_pscB>
    1964:	20 f0       	brcs	.+8      	; 0x196e <__addsf3+0x20>
    1966:	39 f4       	brne	.+14     	; 0x1976 <__addsf3+0x28>
    1968:	9f 3f       	cpi	r25, 0xFF	; 255
    196a:	19 f4       	brne	.+6      	; 0x1972 <__addsf3+0x24>
    196c:	26 f4       	brtc	.+8      	; 0x1976 <__addsf3+0x28>
    196e:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__fp_nan>
    1972:	0e f4       	brtc	.+2      	; 0x1976 <__addsf3+0x28>
    1974:	e0 95       	com	r30
    1976:	e7 fb       	bst	r30, 7
    1978:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__fp_inf>

0000197c <__addsf3x>:
    197c:	e9 2f       	mov	r30, r25
    197e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__fp_split3>
    1982:	58 f3       	brcs	.-42     	; 0x195a <__addsf3+0xc>
    1984:	ba 17       	cp	r27, r26
    1986:	62 07       	cpc	r22, r18
    1988:	73 07       	cpc	r23, r19
    198a:	84 07       	cpc	r24, r20
    198c:	95 07       	cpc	r25, r21
    198e:	20 f0       	brcs	.+8      	; 0x1998 <__addsf3x+0x1c>
    1990:	79 f4       	brne	.+30     	; 0x19b0 <__addsf3x+0x34>
    1992:	a6 f5       	brtc	.+104    	; 0x19fc <__addsf3x+0x80>
    1994:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__fp_zero>
    1998:	0e f4       	brtc	.+2      	; 0x199c <__addsf3x+0x20>
    199a:	e0 95       	com	r30
    199c:	0b 2e       	mov	r0, r27
    199e:	ba 2f       	mov	r27, r26
    19a0:	a0 2d       	mov	r26, r0
    19a2:	0b 01       	movw	r0, r22
    19a4:	b9 01       	movw	r22, r18
    19a6:	90 01       	movw	r18, r0
    19a8:	0c 01       	movw	r0, r24
    19aa:	ca 01       	movw	r24, r20
    19ac:	a0 01       	movw	r20, r0
    19ae:	11 24       	eor	r1, r1
    19b0:	ff 27       	eor	r31, r31
    19b2:	59 1b       	sub	r21, r25
    19b4:	99 f0       	breq	.+38     	; 0x19dc <__addsf3x+0x60>
    19b6:	59 3f       	cpi	r21, 0xF9	; 249
    19b8:	50 f4       	brcc	.+20     	; 0x19ce <__addsf3x+0x52>
    19ba:	50 3e       	cpi	r21, 0xE0	; 224
    19bc:	68 f1       	brcs	.+90     	; 0x1a18 <__addsf3x+0x9c>
    19be:	1a 16       	cp	r1, r26
    19c0:	f0 40       	sbci	r31, 0x00	; 0
    19c2:	a2 2f       	mov	r26, r18
    19c4:	23 2f       	mov	r18, r19
    19c6:	34 2f       	mov	r19, r20
    19c8:	44 27       	eor	r20, r20
    19ca:	58 5f       	subi	r21, 0xF8	; 248
    19cc:	f3 cf       	rjmp	.-26     	; 0x19b4 <__addsf3x+0x38>
    19ce:	46 95       	lsr	r20
    19d0:	37 95       	ror	r19
    19d2:	27 95       	ror	r18
    19d4:	a7 95       	ror	r26
    19d6:	f0 40       	sbci	r31, 0x00	; 0
    19d8:	53 95       	inc	r21
    19da:	c9 f7       	brne	.-14     	; 0x19ce <__addsf3x+0x52>
    19dc:	7e f4       	brtc	.+30     	; 0x19fc <__addsf3x+0x80>
    19de:	1f 16       	cp	r1, r31
    19e0:	ba 0b       	sbc	r27, r26
    19e2:	62 0b       	sbc	r22, r18
    19e4:	73 0b       	sbc	r23, r19
    19e6:	84 0b       	sbc	r24, r20
    19e8:	ba f0       	brmi	.+46     	; 0x1a18 <__addsf3x+0x9c>
    19ea:	91 50       	subi	r25, 0x01	; 1
    19ec:	a1 f0       	breq	.+40     	; 0x1a16 <__addsf3x+0x9a>
    19ee:	ff 0f       	add	r31, r31
    19f0:	bb 1f       	adc	r27, r27
    19f2:	66 1f       	adc	r22, r22
    19f4:	77 1f       	adc	r23, r23
    19f6:	88 1f       	adc	r24, r24
    19f8:	c2 f7       	brpl	.-16     	; 0x19ea <__addsf3x+0x6e>
    19fa:	0e c0       	rjmp	.+28     	; 0x1a18 <__addsf3x+0x9c>
    19fc:	ba 0f       	add	r27, r26
    19fe:	62 1f       	adc	r22, r18
    1a00:	73 1f       	adc	r23, r19
    1a02:	84 1f       	adc	r24, r20
    1a04:	48 f4       	brcc	.+18     	; 0x1a18 <__addsf3x+0x9c>
    1a06:	87 95       	ror	r24
    1a08:	77 95       	ror	r23
    1a0a:	67 95       	ror	r22
    1a0c:	b7 95       	ror	r27
    1a0e:	f7 95       	ror	r31
    1a10:	9e 3f       	cpi	r25, 0xFE	; 254
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <__addsf3x+0x9a>
    1a14:	b0 cf       	rjmp	.-160    	; 0x1976 <__addsf3+0x28>
    1a16:	93 95       	inc	r25
    1a18:	88 0f       	add	r24, r24
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <__addsf3x+0xa2>
    1a1c:	99 27       	eor	r25, r25
    1a1e:	ee 0f       	add	r30, r30
    1a20:	97 95       	ror	r25
    1a22:	87 95       	ror	r24
    1a24:	08 95       	ret
    1a26:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__fp_pscA>
    1a2a:	60 f0       	brcs	.+24     	; 0x1a44 <__addsf3x+0xc8>
    1a2c:	80 e8       	ldi	r24, 0x80	; 128
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <__addsf3x+0xb8>
    1a32:	9e ef       	ldi	r25, 0xFE	; 254
    1a34:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_pscB>
    1a38:	28 f0       	brcs	.+10     	; 0x1a44 <__addsf3x+0xc8>
    1a3a:	40 e8       	ldi	r20, 0x80	; 128
    1a3c:	51 e0       	ldi	r21, 0x01	; 1
    1a3e:	71 f4       	brne	.+28     	; 0x1a5c <atan2+0x10>
    1a40:	5e ef       	ldi	r21, 0xFE	; 254
    1a42:	0c c0       	rjmp	.+24     	; 0x1a5c <atan2+0x10>
    1a44:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__fp_nan>
    1a48:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__fp_zero>

00001a4c <atan2>:
    1a4c:	e9 2f       	mov	r30, r25
    1a4e:	e0 78       	andi	r30, 0x80	; 128
    1a50:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__fp_split3>
    1a54:	40 f3       	brcs	.-48     	; 0x1a26 <__addsf3x+0xaa>
    1a56:	09 2e       	mov	r0, r25
    1a58:	05 2a       	or	r0, r21
    1a5a:	b1 f3       	breq	.-20     	; 0x1a48 <__addsf3x+0xcc>
    1a5c:	26 17       	cp	r18, r22
    1a5e:	37 07       	cpc	r19, r23
    1a60:	48 07       	cpc	r20, r24
    1a62:	59 07       	cpc	r21, r25
    1a64:	38 f0       	brcs	.+14     	; 0x1a74 <atan2+0x28>
    1a66:	0e 2e       	mov	r0, r30
    1a68:	07 f8       	bld	r0, 7
    1a6a:	e0 25       	eor	r30, r0
    1a6c:	69 f0       	breq	.+26     	; 0x1a88 <atan2+0x3c>
    1a6e:	e0 25       	eor	r30, r0
    1a70:	e0 64       	ori	r30, 0x40	; 64
    1a72:	0a c0       	rjmp	.+20     	; 0x1a88 <atan2+0x3c>
    1a74:	ef 63       	ori	r30, 0x3F	; 63
    1a76:	07 f8       	bld	r0, 7
    1a78:	00 94       	com	r0
    1a7a:	07 fa       	bst	r0, 7
    1a7c:	db 01       	movw	r26, r22
    1a7e:	b9 01       	movw	r22, r18
    1a80:	9d 01       	movw	r18, r26
    1a82:	dc 01       	movw	r26, r24
    1a84:	ca 01       	movw	r24, r20
    1a86:	ad 01       	movw	r20, r26
    1a88:	ef 93       	push	r30
    1a8a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__divsf3_pse>
    1a8e:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__fp_round>
    1a92:	0e 94 56 0d 	call	0x1aac	; 0x1aac <atan>
    1a96:	5f 91       	pop	r21
    1a98:	55 23       	and	r21, r21
    1a9a:	39 f0       	breq	.+14     	; 0x1aaa <atan2+0x5e>
    1a9c:	2b ed       	ldi	r18, 0xDB	; 219
    1a9e:	3f e0       	ldi	r19, 0x0F	; 15
    1aa0:	49 e4       	ldi	r20, 0x49	; 73
    1aa2:	50 fd       	sbrc	r21, 0
    1aa4:	49 ec       	ldi	r20, 0xC9	; 201
    1aa6:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__addsf3>
    1aaa:	08 95       	ret

00001aac <atan>:
    1aac:	df 93       	push	r29
    1aae:	dd 27       	eor	r29, r29
    1ab0:	b9 2f       	mov	r27, r25
    1ab2:	bf 77       	andi	r27, 0x7F	; 127
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	16 16       	cp	r1, r22
    1aba:	17 06       	cpc	r1, r23
    1abc:	48 07       	cpc	r20, r24
    1abe:	5b 07       	cpc	r21, r27
    1ac0:	18 f4       	brcc	.+6      	; 0x1ac8 <atan+0x1c>
    1ac2:	d9 2f       	mov	r29, r25
    1ac4:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <inverse>
    1ac8:	9f 93       	push	r25
    1aca:	8f 93       	push	r24
    1acc:	7f 93       	push	r23
    1ace:	6f 93       	push	r22
    1ad0:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <square>
    1ad4:	ec e8       	ldi	r30, 0x8C	; 140
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_powser>
    1adc:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__fp_round>
    1ae0:	2f 91       	pop	r18
    1ae2:	3f 91       	pop	r19
    1ae4:	4f 91       	pop	r20
    1ae6:	5f 91       	pop	r21
    1ae8:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <__mulsf3x>
    1aec:	dd 23       	and	r29, r29
    1aee:	51 f0       	breq	.+20     	; 0x1b04 <atan+0x58>
    1af0:	90 58       	subi	r25, 0x80	; 128
    1af2:	a2 ea       	ldi	r26, 0xA2	; 162
    1af4:	2a ed       	ldi	r18, 0xDA	; 218
    1af6:	3f e0       	ldi	r19, 0x0F	; 15
    1af8:	49 ec       	ldi	r20, 0xC9	; 201
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	d0 78       	andi	r29, 0x80	; 128
    1afe:	5d 27       	eor	r21, r29
    1b00:	0e 94 be 0c 	call	0x197c	; 0x197c <__addsf3x>
    1b04:	df 91       	pop	r29
    1b06:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__fp_round>

00001b0a <__cmpsf2>:
    1b0a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__fp_cmp>
    1b0e:	08 f4       	brcc	.+2      	; 0x1b12 <__cmpsf2+0x8>
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	08 95       	ret

00001b14 <__divsf3>:
    1b14:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__divsf3x>
    1b18:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__fp_round>
    1b1c:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_pscB>
    1b20:	58 f0       	brcs	.+22     	; 0x1b38 <__divsf3+0x24>
    1b22:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__fp_pscA>
    1b26:	40 f0       	brcs	.+16     	; 0x1b38 <__divsf3+0x24>
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <__divsf3+0x20>
    1b2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b2c:	29 f0       	breq	.+10     	; 0x1b38 <__divsf3+0x24>
    1b2e:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__fp_inf>
    1b32:	51 11       	cpse	r21, r1
    1b34:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__fp_szero>
    1b38:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__fp_nan>

00001b3c <__divsf3x>:
    1b3c:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__fp_split3>
    1b40:	68 f3       	brcs	.-38     	; 0x1b1c <__divsf3+0x8>

00001b42 <__divsf3_pse>:
    1b42:	99 23       	and	r25, r25
    1b44:	b1 f3       	breq	.-20     	; 0x1b32 <__divsf3+0x1e>
    1b46:	55 23       	and	r21, r21
    1b48:	91 f3       	breq	.-28     	; 0x1b2e <__divsf3+0x1a>
    1b4a:	95 1b       	sub	r25, r21
    1b4c:	55 0b       	sbc	r21, r21
    1b4e:	bb 27       	eor	r27, r27
    1b50:	aa 27       	eor	r26, r26
    1b52:	62 17       	cp	r22, r18
    1b54:	73 07       	cpc	r23, r19
    1b56:	84 07       	cpc	r24, r20
    1b58:	38 f0       	brcs	.+14     	; 0x1b68 <__divsf3_pse+0x26>
    1b5a:	9f 5f       	subi	r25, 0xFF	; 255
    1b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5e:	22 0f       	add	r18, r18
    1b60:	33 1f       	adc	r19, r19
    1b62:	44 1f       	adc	r20, r20
    1b64:	aa 1f       	adc	r26, r26
    1b66:	a9 f3       	breq	.-22     	; 0x1b52 <__divsf3_pse+0x10>
    1b68:	35 d0       	rcall	.+106    	; 0x1bd4 <__divsf3_pse+0x92>
    1b6a:	0e 2e       	mov	r0, r30
    1b6c:	3a f0       	brmi	.+14     	; 0x1b7c <__divsf3_pse+0x3a>
    1b6e:	e0 e8       	ldi	r30, 0x80	; 128
    1b70:	32 d0       	rcall	.+100    	; 0x1bd6 <__divsf3_pse+0x94>
    1b72:	91 50       	subi	r25, 0x01	; 1
    1b74:	50 40       	sbci	r21, 0x00	; 0
    1b76:	e6 95       	lsr	r30
    1b78:	00 1c       	adc	r0, r0
    1b7a:	ca f7       	brpl	.-14     	; 0x1b6e <__divsf3_pse+0x2c>
    1b7c:	2b d0       	rcall	.+86     	; 0x1bd4 <__divsf3_pse+0x92>
    1b7e:	fe 2f       	mov	r31, r30
    1b80:	29 d0       	rcall	.+82     	; 0x1bd4 <__divsf3_pse+0x92>
    1b82:	66 0f       	add	r22, r22
    1b84:	77 1f       	adc	r23, r23
    1b86:	88 1f       	adc	r24, r24
    1b88:	bb 1f       	adc	r27, r27
    1b8a:	26 17       	cp	r18, r22
    1b8c:	37 07       	cpc	r19, r23
    1b8e:	48 07       	cpc	r20, r24
    1b90:	ab 07       	cpc	r26, r27
    1b92:	b0 e8       	ldi	r27, 0x80	; 128
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <__divsf3_pse+0x56>
    1b96:	bb 0b       	sbc	r27, r27
    1b98:	80 2d       	mov	r24, r0
    1b9a:	bf 01       	movw	r22, r30
    1b9c:	ff 27       	eor	r31, r31
    1b9e:	93 58       	subi	r25, 0x83	; 131
    1ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba2:	3a f0       	brmi	.+14     	; 0x1bb2 <__divsf3_pse+0x70>
    1ba4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ba6:	51 05       	cpc	r21, r1
    1ba8:	78 f0       	brcs	.+30     	; 0x1bc8 <__divsf3_pse+0x86>
    1baa:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__fp_inf>
    1bae:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__fp_szero>
    1bb2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb4:	e4 f3       	brlt	.-8      	; 0x1bae <__divsf3_pse+0x6c>
    1bb6:	98 3e       	cpi	r25, 0xE8	; 232
    1bb8:	d4 f3       	brlt	.-12     	; 0x1bae <__divsf3_pse+0x6c>
    1bba:	86 95       	lsr	r24
    1bbc:	77 95       	ror	r23
    1bbe:	67 95       	ror	r22
    1bc0:	b7 95       	ror	r27
    1bc2:	f7 95       	ror	r31
    1bc4:	9f 5f       	subi	r25, 0xFF	; 255
    1bc6:	c9 f7       	brne	.-14     	; 0x1bba <__divsf3_pse+0x78>
    1bc8:	88 0f       	add	r24, r24
    1bca:	91 1d       	adc	r25, r1
    1bcc:	96 95       	lsr	r25
    1bce:	87 95       	ror	r24
    1bd0:	97 f9       	bld	r25, 7
    1bd2:	08 95       	ret
    1bd4:	e1 e0       	ldi	r30, 0x01	; 1
    1bd6:	66 0f       	add	r22, r22
    1bd8:	77 1f       	adc	r23, r23
    1bda:	88 1f       	adc	r24, r24
    1bdc:	bb 1f       	adc	r27, r27
    1bde:	62 17       	cp	r22, r18
    1be0:	73 07       	cpc	r23, r19
    1be2:	84 07       	cpc	r24, r20
    1be4:	ba 07       	cpc	r27, r26
    1be6:	20 f0       	brcs	.+8      	; 0x1bf0 <__divsf3_pse+0xae>
    1be8:	62 1b       	sub	r22, r18
    1bea:	73 0b       	sbc	r23, r19
    1bec:	84 0b       	sbc	r24, r20
    1bee:	ba 0b       	sbc	r27, r26
    1bf0:	ee 1f       	adc	r30, r30
    1bf2:	88 f7       	brcc	.-30     	; 0x1bd6 <__divsf3_pse+0x94>
    1bf4:	e0 95       	com	r30
    1bf6:	08 95       	ret

00001bf8 <__fixsfsi>:
    1bf8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__fixunssfsi>
    1bfc:	68 94       	set
    1bfe:	b1 11       	cpse	r27, r1
    1c00:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__fp_szero>
    1c04:	08 95       	ret

00001c06 <__fixunssfsi>:
    1c06:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__fp_splitA>
    1c0a:	88 f0       	brcs	.+34     	; 0x1c2e <__fixunssfsi+0x28>
    1c0c:	9f 57       	subi	r25, 0x7F	; 127
    1c0e:	98 f0       	brcs	.+38     	; 0x1c36 <__fixunssfsi+0x30>
    1c10:	b9 2f       	mov	r27, r25
    1c12:	99 27       	eor	r25, r25
    1c14:	b7 51       	subi	r27, 0x17	; 23
    1c16:	b0 f0       	brcs	.+44     	; 0x1c44 <__fixunssfsi+0x3e>
    1c18:	e1 f0       	breq	.+56     	; 0x1c52 <__fixunssfsi+0x4c>
    1c1a:	66 0f       	add	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	1a f0       	brmi	.+6      	; 0x1c2a <__fixunssfsi+0x24>
    1c24:	ba 95       	dec	r27
    1c26:	c9 f7       	brne	.-14     	; 0x1c1a <__fixunssfsi+0x14>
    1c28:	14 c0       	rjmp	.+40     	; 0x1c52 <__fixunssfsi+0x4c>
    1c2a:	b1 30       	cpi	r27, 0x01	; 1
    1c2c:	91 f0       	breq	.+36     	; 0x1c52 <__fixunssfsi+0x4c>
    1c2e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__fp_zero>
    1c32:	b1 e0       	ldi	r27, 0x01	; 1
    1c34:	08 95       	ret
    1c36:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__fp_zero>
    1c3a:	67 2f       	mov	r22, r23
    1c3c:	78 2f       	mov	r23, r24
    1c3e:	88 27       	eor	r24, r24
    1c40:	b8 5f       	subi	r27, 0xF8	; 248
    1c42:	39 f0       	breq	.+14     	; 0x1c52 <__fixunssfsi+0x4c>
    1c44:	b9 3f       	cpi	r27, 0xF9	; 249
    1c46:	cc f3       	brlt	.-14     	; 0x1c3a <__fixunssfsi+0x34>
    1c48:	86 95       	lsr	r24
    1c4a:	77 95       	ror	r23
    1c4c:	67 95       	ror	r22
    1c4e:	b3 95       	inc	r27
    1c50:	d9 f7       	brne	.-10     	; 0x1c48 <__fixunssfsi+0x42>
    1c52:	3e f4       	brtc	.+14     	; 0x1c62 <__fixunssfsi+0x5c>
    1c54:	90 95       	com	r25
    1c56:	80 95       	com	r24
    1c58:	70 95       	com	r23
    1c5a:	61 95       	neg	r22
    1c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c60:	9f 4f       	sbci	r25, 0xFF	; 255
    1c62:	08 95       	ret

00001c64 <__floatunsisf>:
    1c64:	e8 94       	clt
    1c66:	09 c0       	rjmp	.+18     	; 0x1c7a <__floatsisf+0x12>

00001c68 <__floatsisf>:
    1c68:	97 fb       	bst	r25, 7
    1c6a:	3e f4       	brtc	.+14     	; 0x1c7a <__floatsisf+0x12>
    1c6c:	90 95       	com	r25
    1c6e:	80 95       	com	r24
    1c70:	70 95       	com	r23
    1c72:	61 95       	neg	r22
    1c74:	7f 4f       	sbci	r23, 0xFF	; 255
    1c76:	8f 4f       	sbci	r24, 0xFF	; 255
    1c78:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7a:	99 23       	and	r25, r25
    1c7c:	a9 f0       	breq	.+42     	; 0x1ca8 <__floatsisf+0x40>
    1c7e:	f9 2f       	mov	r31, r25
    1c80:	96 e9       	ldi	r25, 0x96	; 150
    1c82:	bb 27       	eor	r27, r27
    1c84:	93 95       	inc	r25
    1c86:	f6 95       	lsr	r31
    1c88:	87 95       	ror	r24
    1c8a:	77 95       	ror	r23
    1c8c:	67 95       	ror	r22
    1c8e:	b7 95       	ror	r27
    1c90:	f1 11       	cpse	r31, r1
    1c92:	f8 cf       	rjmp	.-16     	; 0x1c84 <__floatsisf+0x1c>
    1c94:	fa f4       	brpl	.+62     	; 0x1cd4 <__floatsisf+0x6c>
    1c96:	bb 0f       	add	r27, r27
    1c98:	11 f4       	brne	.+4      	; 0x1c9e <__floatsisf+0x36>
    1c9a:	60 ff       	sbrs	r22, 0
    1c9c:	1b c0       	rjmp	.+54     	; 0x1cd4 <__floatsisf+0x6c>
    1c9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	16 c0       	rjmp	.+44     	; 0x1cd4 <__floatsisf+0x6c>
    1ca8:	88 23       	and	r24, r24
    1caa:	11 f0       	breq	.+4      	; 0x1cb0 <__floatsisf+0x48>
    1cac:	96 e9       	ldi	r25, 0x96	; 150
    1cae:	11 c0       	rjmp	.+34     	; 0x1cd2 <__floatsisf+0x6a>
    1cb0:	77 23       	and	r23, r23
    1cb2:	21 f0       	breq	.+8      	; 0x1cbc <__floatsisf+0x54>
    1cb4:	9e e8       	ldi	r25, 0x8E	; 142
    1cb6:	87 2f       	mov	r24, r23
    1cb8:	76 2f       	mov	r23, r22
    1cba:	05 c0       	rjmp	.+10     	; 0x1cc6 <__floatsisf+0x5e>
    1cbc:	66 23       	and	r22, r22
    1cbe:	71 f0       	breq	.+28     	; 0x1cdc <__floatsisf+0x74>
    1cc0:	96 e8       	ldi	r25, 0x86	; 134
    1cc2:	86 2f       	mov	r24, r22
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	2a f0       	brmi	.+10     	; 0x1cd4 <__floatsisf+0x6c>
    1cca:	9a 95       	dec	r25
    1ccc:	66 0f       	add	r22, r22
    1cce:	77 1f       	adc	r23, r23
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	da f7       	brpl	.-10     	; 0x1cca <__floatsisf+0x62>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	96 95       	lsr	r25
    1cd8:	87 95       	ror	r24
    1cda:	97 f9       	bld	r25, 7
    1cdc:	08 95       	ret

00001cde <__fp_cmp>:
    1cde:	99 0f       	add	r25, r25
    1ce0:	00 08       	sbc	r0, r0
    1ce2:	55 0f       	add	r21, r21
    1ce4:	aa 0b       	sbc	r26, r26
    1ce6:	e0 e8       	ldi	r30, 0x80	; 128
    1ce8:	fe ef       	ldi	r31, 0xFE	; 254
    1cea:	16 16       	cp	r1, r22
    1cec:	17 06       	cpc	r1, r23
    1cee:	e8 07       	cpc	r30, r24
    1cf0:	f9 07       	cpc	r31, r25
    1cf2:	c0 f0       	brcs	.+48     	; 0x1d24 <__fp_cmp+0x46>
    1cf4:	12 16       	cp	r1, r18
    1cf6:	13 06       	cpc	r1, r19
    1cf8:	e4 07       	cpc	r30, r20
    1cfa:	f5 07       	cpc	r31, r21
    1cfc:	98 f0       	brcs	.+38     	; 0x1d24 <__fp_cmp+0x46>
    1cfe:	62 1b       	sub	r22, r18
    1d00:	73 0b       	sbc	r23, r19
    1d02:	84 0b       	sbc	r24, r20
    1d04:	95 0b       	sbc	r25, r21
    1d06:	39 f4       	brne	.+14     	; 0x1d16 <__fp_cmp+0x38>
    1d08:	0a 26       	eor	r0, r26
    1d0a:	61 f0       	breq	.+24     	; 0x1d24 <__fp_cmp+0x46>
    1d0c:	23 2b       	or	r18, r19
    1d0e:	24 2b       	or	r18, r20
    1d10:	25 2b       	or	r18, r21
    1d12:	21 f4       	brne	.+8      	; 0x1d1c <__fp_cmp+0x3e>
    1d14:	08 95       	ret
    1d16:	0a 26       	eor	r0, r26
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <__fp_cmp+0x3e>
    1d1a:	a1 40       	sbci	r26, 0x01	; 1
    1d1c:	a6 95       	lsr	r26
    1d1e:	8f ef       	ldi	r24, 0xFF	; 255
    1d20:	81 1d       	adc	r24, r1
    1d22:	81 1d       	adc	r24, r1
    1d24:	08 95       	ret

00001d26 <__fp_inf>:
    1d26:	97 f9       	bld	r25, 7
    1d28:	9f 67       	ori	r25, 0x7F	; 127
    1d2a:	80 e8       	ldi	r24, 0x80	; 128
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	60 e0       	ldi	r22, 0x00	; 0
    1d30:	08 95       	ret

00001d32 <__fp_nan>:
    1d32:	9f ef       	ldi	r25, 0xFF	; 255
    1d34:	80 ec       	ldi	r24, 0xC0	; 192
    1d36:	08 95       	ret

00001d38 <__fp_powser>:
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	1f 93       	push	r17
    1d3e:	0f 93       	push	r16
    1d40:	ff 92       	push	r15
    1d42:	ef 92       	push	r14
    1d44:	df 92       	push	r13
    1d46:	7b 01       	movw	r14, r22
    1d48:	8c 01       	movw	r16, r24
    1d4a:	68 94       	set
    1d4c:	06 c0       	rjmp	.+12     	; 0x1d5a <__fp_powser+0x22>
    1d4e:	da 2e       	mov	r13, r26
    1d50:	ef 01       	movw	r28, r30
    1d52:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <__mulsf3x>
    1d56:	fe 01       	movw	r30, r28
    1d58:	e8 94       	clt
    1d5a:	a5 91       	lpm	r26, Z+
    1d5c:	25 91       	lpm	r18, Z+
    1d5e:	35 91       	lpm	r19, Z+
    1d60:	45 91       	lpm	r20, Z+
    1d62:	55 91       	lpm	r21, Z+
    1d64:	a6 f3       	brts	.-24     	; 0x1d4e <__fp_powser+0x16>
    1d66:	ef 01       	movw	r28, r30
    1d68:	0e 94 be 0c 	call	0x197c	; 0x197c <__addsf3x>
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	97 01       	movw	r18, r14
    1d70:	a8 01       	movw	r20, r16
    1d72:	da 94       	dec	r13
    1d74:	69 f7       	brne	.-38     	; 0x1d50 <__fp_powser+0x18>
    1d76:	df 90       	pop	r13
    1d78:	ef 90       	pop	r14
    1d7a:	ff 90       	pop	r15
    1d7c:	0f 91       	pop	r16
    1d7e:	1f 91       	pop	r17
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <__fp_pscA>:
    1d86:	00 24       	eor	r0, r0
    1d88:	0a 94       	dec	r0
    1d8a:	16 16       	cp	r1, r22
    1d8c:	17 06       	cpc	r1, r23
    1d8e:	18 06       	cpc	r1, r24
    1d90:	09 06       	cpc	r0, r25
    1d92:	08 95       	ret

00001d94 <__fp_pscB>:
    1d94:	00 24       	eor	r0, r0
    1d96:	0a 94       	dec	r0
    1d98:	12 16       	cp	r1, r18
    1d9a:	13 06       	cpc	r1, r19
    1d9c:	14 06       	cpc	r1, r20
    1d9e:	05 06       	cpc	r0, r21
    1da0:	08 95       	ret

00001da2 <__fp_round>:
    1da2:	09 2e       	mov	r0, r25
    1da4:	03 94       	inc	r0
    1da6:	00 0c       	add	r0, r0
    1da8:	11 f4       	brne	.+4      	; 0x1dae <__fp_round+0xc>
    1daa:	88 23       	and	r24, r24
    1dac:	52 f0       	brmi	.+20     	; 0x1dc2 <__fp_round+0x20>
    1dae:	bb 0f       	add	r27, r27
    1db0:	40 f4       	brcc	.+16     	; 0x1dc2 <__fp_round+0x20>
    1db2:	bf 2b       	or	r27, r31
    1db4:	11 f4       	brne	.+4      	; 0x1dba <__fp_round+0x18>
    1db6:	60 ff       	sbrs	r22, 0
    1db8:	04 c0       	rjmp	.+8      	; 0x1dc2 <__fp_round+0x20>
    1dba:	6f 5f       	subi	r22, 0xFF	; 255
    1dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc2:	08 95       	ret

00001dc4 <__fp_split3>:
    1dc4:	57 fd       	sbrc	r21, 7
    1dc6:	90 58       	subi	r25, 0x80	; 128
    1dc8:	44 0f       	add	r20, r20
    1dca:	55 1f       	adc	r21, r21
    1dcc:	59 f0       	breq	.+22     	; 0x1de4 <__fp_splitA+0x10>
    1dce:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd0:	71 f0       	breq	.+28     	; 0x1dee <__fp_splitA+0x1a>
    1dd2:	47 95       	ror	r20

00001dd4 <__fp_splitA>:
    1dd4:	88 0f       	add	r24, r24
    1dd6:	97 fb       	bst	r25, 7
    1dd8:	99 1f       	adc	r25, r25
    1dda:	61 f0       	breq	.+24     	; 0x1df4 <__fp_splitA+0x20>
    1ddc:	9f 3f       	cpi	r25, 0xFF	; 255
    1dde:	79 f0       	breq	.+30     	; 0x1dfe <__fp_splitA+0x2a>
    1de0:	87 95       	ror	r24
    1de2:	08 95       	ret
    1de4:	12 16       	cp	r1, r18
    1de6:	13 06       	cpc	r1, r19
    1de8:	14 06       	cpc	r1, r20
    1dea:	55 1f       	adc	r21, r21
    1dec:	f2 cf       	rjmp	.-28     	; 0x1dd2 <__fp_split3+0xe>
    1dee:	46 95       	lsr	r20
    1df0:	f1 df       	rcall	.-30     	; 0x1dd4 <__fp_splitA>
    1df2:	08 c0       	rjmp	.+16     	; 0x1e04 <__fp_splitA+0x30>
    1df4:	16 16       	cp	r1, r22
    1df6:	17 06       	cpc	r1, r23
    1df8:	18 06       	cpc	r1, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	f1 cf       	rjmp	.-30     	; 0x1de0 <__fp_splitA+0xc>
    1dfe:	86 95       	lsr	r24
    1e00:	71 05       	cpc	r23, r1
    1e02:	61 05       	cpc	r22, r1
    1e04:	08 94       	sec
    1e06:	08 95       	ret

00001e08 <__fp_zero>:
    1e08:	e8 94       	clt

00001e0a <__fp_szero>:
    1e0a:	bb 27       	eor	r27, r27
    1e0c:	66 27       	eor	r22, r22
    1e0e:	77 27       	eor	r23, r23
    1e10:	cb 01       	movw	r24, r22
    1e12:	97 f9       	bld	r25, 7
    1e14:	08 95       	ret

00001e16 <__gesf2>:
    1e16:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__fp_cmp>
    1e1a:	08 f4       	brcc	.+2      	; 0x1e1e <__gesf2+0x8>
    1e1c:	8f ef       	ldi	r24, 0xFF	; 255
    1e1e:	08 95       	ret

00001e20 <inverse>:
    1e20:	9b 01       	movw	r18, r22
    1e22:	ac 01       	movw	r20, r24
    1e24:	60 e0       	ldi	r22, 0x00	; 0
    1e26:	70 e0       	ldi	r23, 0x00	; 0
    1e28:	80 e8       	ldi	r24, 0x80	; 128
    1e2a:	9f e3       	ldi	r25, 0x3F	; 63
    1e2c:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__divsf3>

00001e30 <__mulsf3>:
    1e30:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <__mulsf3x>
    1e34:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__fp_round>
    1e38:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__fp_pscA>
    1e3c:	38 f0       	brcs	.+14     	; 0x1e4c <__mulsf3+0x1c>
    1e3e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_pscB>
    1e42:	20 f0       	brcs	.+8      	; 0x1e4c <__mulsf3+0x1c>
    1e44:	95 23       	and	r25, r21
    1e46:	11 f0       	breq	.+4      	; 0x1e4c <__mulsf3+0x1c>
    1e48:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__fp_inf>
    1e4c:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__fp_nan>
    1e50:	11 24       	eor	r1, r1
    1e52:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__fp_szero>

00001e56 <__mulsf3x>:
    1e56:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__fp_split3>
    1e5a:	70 f3       	brcs	.-36     	; 0x1e38 <__mulsf3+0x8>

00001e5c <__mulsf3_pse>:
    1e5c:	95 9f       	mul	r25, r21
    1e5e:	c1 f3       	breq	.-16     	; 0x1e50 <__mulsf3+0x20>
    1e60:	95 0f       	add	r25, r21
    1e62:	50 e0       	ldi	r21, 0x00	; 0
    1e64:	55 1f       	adc	r21, r21
    1e66:	62 9f       	mul	r22, r18
    1e68:	f0 01       	movw	r30, r0
    1e6a:	72 9f       	mul	r23, r18
    1e6c:	bb 27       	eor	r27, r27
    1e6e:	f0 0d       	add	r31, r0
    1e70:	b1 1d       	adc	r27, r1
    1e72:	63 9f       	mul	r22, r19
    1e74:	aa 27       	eor	r26, r26
    1e76:	f0 0d       	add	r31, r0
    1e78:	b1 1d       	adc	r27, r1
    1e7a:	aa 1f       	adc	r26, r26
    1e7c:	64 9f       	mul	r22, r20
    1e7e:	66 27       	eor	r22, r22
    1e80:	b0 0d       	add	r27, r0
    1e82:	a1 1d       	adc	r26, r1
    1e84:	66 1f       	adc	r22, r22
    1e86:	82 9f       	mul	r24, r18
    1e88:	22 27       	eor	r18, r18
    1e8a:	b0 0d       	add	r27, r0
    1e8c:	a1 1d       	adc	r26, r1
    1e8e:	62 1f       	adc	r22, r18
    1e90:	73 9f       	mul	r23, r19
    1e92:	b0 0d       	add	r27, r0
    1e94:	a1 1d       	adc	r26, r1
    1e96:	62 1f       	adc	r22, r18
    1e98:	83 9f       	mul	r24, r19
    1e9a:	a0 0d       	add	r26, r0
    1e9c:	61 1d       	adc	r22, r1
    1e9e:	22 1f       	adc	r18, r18
    1ea0:	74 9f       	mul	r23, r20
    1ea2:	33 27       	eor	r19, r19
    1ea4:	a0 0d       	add	r26, r0
    1ea6:	61 1d       	adc	r22, r1
    1ea8:	23 1f       	adc	r18, r19
    1eaa:	84 9f       	mul	r24, r20
    1eac:	60 0d       	add	r22, r0
    1eae:	21 1d       	adc	r18, r1
    1eb0:	82 2f       	mov	r24, r18
    1eb2:	76 2f       	mov	r23, r22
    1eb4:	6a 2f       	mov	r22, r26
    1eb6:	11 24       	eor	r1, r1
    1eb8:	9f 57       	subi	r25, 0x7F	; 127
    1eba:	50 40       	sbci	r21, 0x00	; 0
    1ebc:	9a f0       	brmi	.+38     	; 0x1ee4 <__mulsf3_pse+0x88>
    1ebe:	f1 f0       	breq	.+60     	; 0x1efc <__mulsf3_pse+0xa0>
    1ec0:	88 23       	and	r24, r24
    1ec2:	4a f0       	brmi	.+18     	; 0x1ed6 <__mulsf3_pse+0x7a>
    1ec4:	ee 0f       	add	r30, r30
    1ec6:	ff 1f       	adc	r31, r31
    1ec8:	bb 1f       	adc	r27, r27
    1eca:	66 1f       	adc	r22, r22
    1ecc:	77 1f       	adc	r23, r23
    1ece:	88 1f       	adc	r24, r24
    1ed0:	91 50       	subi	r25, 0x01	; 1
    1ed2:	50 40       	sbci	r21, 0x00	; 0
    1ed4:	a9 f7       	brne	.-22     	; 0x1ec0 <__mulsf3_pse+0x64>
    1ed6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ed8:	51 05       	cpc	r21, r1
    1eda:	80 f0       	brcs	.+32     	; 0x1efc <__mulsf3_pse+0xa0>
    1edc:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__fp_inf>
    1ee0:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__fp_szero>
    1ee4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ee6:	e4 f3       	brlt	.-8      	; 0x1ee0 <__mulsf3_pse+0x84>
    1ee8:	98 3e       	cpi	r25, 0xE8	; 232
    1eea:	d4 f3       	brlt	.-12     	; 0x1ee0 <__mulsf3_pse+0x84>
    1eec:	86 95       	lsr	r24
    1eee:	77 95       	ror	r23
    1ef0:	67 95       	ror	r22
    1ef2:	b7 95       	ror	r27
    1ef4:	f7 95       	ror	r31
    1ef6:	e7 95       	ror	r30
    1ef8:	9f 5f       	subi	r25, 0xFF	; 255
    1efa:	c1 f7       	brne	.-16     	; 0x1eec <__mulsf3_pse+0x90>
    1efc:	fe 2b       	or	r31, r30
    1efe:	88 0f       	add	r24, r24
    1f00:	91 1d       	adc	r25, r1
    1f02:	96 95       	lsr	r25
    1f04:	87 95       	ror	r24
    1f06:	97 f9       	bld	r25, 7
    1f08:	08 95       	ret

00001f0a <square>:
    1f0a:	9b 01       	movw	r18, r22
    1f0c:	ac 01       	movw	r20, r24
    1f0e:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__mulsf3>

00001f12 <__divmodhi4>:
    1f12:	97 fb       	bst	r25, 7
    1f14:	07 2e       	mov	r0, r23
    1f16:	16 f4       	brtc	.+4      	; 0x1f1c <__divmodhi4+0xa>
    1f18:	00 94       	com	r0
    1f1a:	07 d0       	rcall	.+14     	; 0x1f2a <__divmodhi4_neg1>
    1f1c:	77 fd       	sbrc	r23, 7
    1f1e:	09 d0       	rcall	.+18     	; 0x1f32 <__divmodhi4_neg2>
    1f20:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__udivmodhi4>
    1f24:	07 fc       	sbrc	r0, 7
    1f26:	05 d0       	rcall	.+10     	; 0x1f32 <__divmodhi4_neg2>
    1f28:	3e f4       	brtc	.+14     	; 0x1f38 <__divmodhi4_exit>

00001f2a <__divmodhi4_neg1>:
    1f2a:	90 95       	com	r25
    1f2c:	81 95       	neg	r24
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	08 95       	ret

00001f32 <__divmodhi4_neg2>:
    1f32:	70 95       	com	r23
    1f34:	61 95       	neg	r22
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255

00001f38 <__divmodhi4_exit>:
    1f38:	08 95       	ret

00001f3a <__udivmodhi4>:
    1f3a:	aa 1b       	sub	r26, r26
    1f3c:	bb 1b       	sub	r27, r27
    1f3e:	51 e1       	ldi	r21, 0x11	; 17
    1f40:	07 c0       	rjmp	.+14     	; 0x1f50 <__udivmodhi4_ep>

00001f42 <__udivmodhi4_loop>:
    1f42:	aa 1f       	adc	r26, r26
    1f44:	bb 1f       	adc	r27, r27
    1f46:	a6 17       	cp	r26, r22
    1f48:	b7 07       	cpc	r27, r23
    1f4a:	10 f0       	brcs	.+4      	; 0x1f50 <__udivmodhi4_ep>
    1f4c:	a6 1b       	sub	r26, r22
    1f4e:	b7 0b       	sbc	r27, r23

00001f50 <__udivmodhi4_ep>:
    1f50:	88 1f       	adc	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	5a 95       	dec	r21
    1f56:	a9 f7       	brne	.-22     	; 0x1f42 <__udivmodhi4_loop>
    1f58:	80 95       	com	r24
    1f5a:	90 95       	com	r25
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	08 95       	ret

00001f62 <dtostrf>:
    1f62:	ef 92       	push	r14
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	e8 01       	movw	r28, r16
    1f6e:	47 fd       	sbrc	r20, 7
    1f70:	16 c0       	rjmp	.+44     	; 0x1f9e <dtostrf+0x3c>
    1f72:	34 e0       	ldi	r19, 0x04	; 4
    1f74:	04 2e       	mov	r0, r20
    1f76:	00 0c       	add	r0, r0
    1f78:	55 0b       	sbc	r21, r21
    1f7a:	57 ff       	sbrs	r21, 7
    1f7c:	03 c0       	rjmp	.+6      	; 0x1f84 <dtostrf+0x22>
    1f7e:	51 95       	neg	r21
    1f80:	41 95       	neg	r20
    1f82:	51 09       	sbc	r21, r1
    1f84:	e3 2e       	mov	r14, r19
    1f86:	02 2f       	mov	r16, r18
    1f88:	24 2f       	mov	r18, r20
    1f8a:	ae 01       	movw	r20, r28
    1f8c:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <dtoa_prf>
    1f90:	ce 01       	movw	r24, r28
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ef 90       	pop	r14
    1f9c:	08 95       	ret
    1f9e:	34 e1       	ldi	r19, 0x14	; 20
    1fa0:	e9 cf       	rjmp	.-46     	; 0x1f74 <dtostrf+0x12>

00001fa2 <strcmp>:
    1fa2:	fb 01       	movw	r30, r22
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	8d 91       	ld	r24, X+
    1fa8:	01 90       	ld	r0, Z+
    1faa:	80 19       	sub	r24, r0
    1fac:	01 10       	cpse	r0, r1
    1fae:	d9 f3       	breq	.-10     	; 0x1fa6 <strcmp+0x4>
    1fb0:	99 0b       	sbc	r25, r25
    1fb2:	08 95       	ret

00001fb4 <dtoa_prf>:
    1fb4:	8f 92       	push	r8
    1fb6:	9f 92       	push	r9
    1fb8:	af 92       	push	r10
    1fba:	bf 92       	push	r11
    1fbc:	cf 92       	push	r12
    1fbe:	df 92       	push	r13
    1fc0:	ef 92       	push	r14
    1fc2:	ff 92       	push	r15
    1fc4:	0f 93       	push	r16
    1fc6:	1f 93       	push	r17
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	29 97       	sbiw	r28, 0x09	; 9
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	6a 01       	movw	r12, r20
    1fde:	f2 2e       	mov	r15, r18
    1fe0:	b0 2e       	mov	r11, r16
    1fe2:	2b e3       	ldi	r18, 0x3B	; 59
    1fe4:	20 17       	cp	r18, r16
    1fe6:	08 f4       	brcc	.+2      	; 0x1fea <dtoa_prf+0x36>
    1fe8:	5f c0       	rjmp	.+190    	; 0x20a8 <dtoa_prf+0xf4>
    1fea:	11 e0       	ldi	r17, 0x01	; 1
    1fec:	10 0f       	add	r17, r16
    1fee:	01 2f       	mov	r16, r17
    1ff0:	27 e0       	ldi	r18, 0x07	; 7
    1ff2:	ae 01       	movw	r20, r28
    1ff4:	4f 5f       	subi	r20, 0xFF	; 255
    1ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff8:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__ftoa_engine>
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	39 81       	ldd	r19, Y+1	; 0x01
    2000:	83 2f       	mov	r24, r19
    2002:	89 70       	andi	r24, 0x09	; 9
    2004:	81 30       	cpi	r24, 0x01	; 1
    2006:	09 f4       	brne	.+2      	; 0x200a <dtoa_prf+0x56>
    2008:	51 c0       	rjmp	.+162    	; 0x20ac <dtoa_prf+0xf8>
    200a:	e1 fc       	sbrc	r14, 1
    200c:	51 c0       	rjmp	.+162    	; 0x20b0 <dtoa_prf+0xfc>
    200e:	9e 2d       	mov	r25, r14
    2010:	91 70       	andi	r25, 0x01	; 1
    2012:	e0 fc       	sbrc	r14, 0
    2014:	90 e2       	ldi	r25, 0x20	; 32
    2016:	ae 2d       	mov	r26, r14
    2018:	a0 71       	andi	r26, 0x10	; 16
    201a:	83 2f       	mov	r24, r19
    201c:	88 70       	andi	r24, 0x08	; 8
    201e:	33 ff       	sbrs	r19, 3
    2020:	5a c0       	rjmp	.+180    	; 0x20d6 <dtoa_prf+0x122>
    2022:	91 11       	cpse	r25, r1
    2024:	47 c0       	rjmp	.+142    	; 0x20b4 <dtoa_prf+0x100>
    2026:	83 e0       	ldi	r24, 0x03	; 3
    2028:	8f 15       	cp	r24, r15
    202a:	08 f0       	brcs	.+2      	; 0x202e <dtoa_prf+0x7a>
    202c:	45 c0       	rjmp	.+138    	; 0x20b8 <dtoa_prf+0x104>
    202e:	f8 1a       	sub	r15, r24
    2030:	a1 11       	cpse	r26, r1
    2032:	08 c0       	rjmp	.+16     	; 0x2044 <dtoa_prf+0x90>
    2034:	f6 01       	movw	r30, r12
    2036:	8f 2d       	mov	r24, r15
    2038:	20 e2       	ldi	r18, 0x20	; 32
    203a:	81 11       	cpse	r24, r1
    203c:	3f c0       	rjmp	.+126    	; 0x20bc <dtoa_prf+0x108>
    203e:	cf 0c       	add	r12, r15
    2040:	d1 1c       	adc	r13, r1
    2042:	f1 2c       	mov	r15, r1
    2044:	99 23       	and	r25, r25
    2046:	29 f0       	breq	.+10     	; 0x2052 <dtoa_prf+0x9e>
    2048:	d6 01       	movw	r26, r12
    204a:	9c 93       	st	X, r25
    204c:	f6 01       	movw	r30, r12
    204e:	31 96       	adiw	r30, 0x01	; 1
    2050:	6f 01       	movw	r12, r30
    2052:	c6 01       	movw	r24, r12
    2054:	03 96       	adiw	r24, 0x03	; 3
    2056:	e2 fe       	sbrs	r14, 2
    2058:	34 c0       	rjmp	.+104    	; 0x20c2 <dtoa_prf+0x10e>
    205a:	2e e4       	ldi	r18, 0x4E	; 78
    205c:	d6 01       	movw	r26, r12
    205e:	2c 93       	st	X, r18
    2060:	31 e4       	ldi	r19, 0x41	; 65
    2062:	11 96       	adiw	r26, 0x01	; 1
    2064:	3c 93       	st	X, r19
    2066:	11 97       	sbiw	r26, 0x01	; 1
    2068:	12 96       	adiw	r26, 0x02	; 2
    206a:	2c 93       	st	X, r18
    206c:	fc 01       	movw	r30, r24
    206e:	2f 2d       	mov	r18, r15
    2070:	30 e2       	ldi	r19, 0x20	; 32
    2072:	21 11       	cpse	r18, r1
    2074:	2d c0       	rjmp	.+90     	; 0x20d0 <dtoa_prf+0x11c>
    2076:	8f 0d       	add	r24, r15
    2078:	91 1d       	adc	r25, r1
    207a:	dc 01       	movw	r26, r24
    207c:	1c 92       	st	X, r1
    207e:	8e ef       	ldi	r24, 0xFE	; 254
    2080:	9f ef       	ldi	r25, 0xFF	; 255
    2082:	29 96       	adiw	r28, 0x09	; 9
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
    209a:	df 90       	pop	r13
    209c:	cf 90       	pop	r12
    209e:	bf 90       	pop	r11
    20a0:	af 90       	pop	r10
    20a2:	9f 90       	pop	r9
    20a4:	8f 90       	pop	r8
    20a6:	08 95       	ret
    20a8:	1c e3       	ldi	r17, 0x3C	; 60
    20aa:	a1 cf       	rjmp	.-190    	; 0x1fee <dtoa_prf+0x3a>
    20ac:	9d e2       	ldi	r25, 0x2D	; 45
    20ae:	b3 cf       	rjmp	.-154    	; 0x2016 <dtoa_prf+0x62>
    20b0:	9b e2       	ldi	r25, 0x2B	; 43
    20b2:	b1 cf       	rjmp	.-158    	; 0x2016 <dtoa_prf+0x62>
    20b4:	84 e0       	ldi	r24, 0x04	; 4
    20b6:	b8 cf       	rjmp	.-144    	; 0x2028 <dtoa_prf+0x74>
    20b8:	f1 2c       	mov	r15, r1
    20ba:	ba cf       	rjmp	.-140    	; 0x2030 <dtoa_prf+0x7c>
    20bc:	21 93       	st	Z+, r18
    20be:	81 50       	subi	r24, 0x01	; 1
    20c0:	bc cf       	rjmp	.-136    	; 0x203a <dtoa_prf+0x86>
    20c2:	2e e6       	ldi	r18, 0x6E	; 110
    20c4:	f6 01       	movw	r30, r12
    20c6:	20 83       	st	Z, r18
    20c8:	31 e6       	ldi	r19, 0x61	; 97
    20ca:	31 83       	std	Z+1, r19	; 0x01
    20cc:	22 83       	std	Z+2, r18	; 0x02
    20ce:	ce cf       	rjmp	.-100    	; 0x206c <dtoa_prf+0xb8>
    20d0:	31 93       	st	Z+, r19
    20d2:	21 50       	subi	r18, 0x01	; 1
    20d4:	ce cf       	rjmp	.-100    	; 0x2072 <dtoa_prf+0xbe>
    20d6:	23 2f       	mov	r18, r19
    20d8:	24 70       	andi	r18, 0x04	; 4
    20da:	32 ff       	sbrs	r19, 2
    20dc:	41 c0       	rjmp	.+130    	; 0x2160 <dtoa_prf+0x1ac>
    20de:	91 11       	cpse	r25, r1
    20e0:	2f c0       	rjmp	.+94     	; 0x2140 <dtoa_prf+0x18c>
    20e2:	23 e0       	ldi	r18, 0x03	; 3
    20e4:	2f 15       	cp	r18, r15
    20e6:	10 f4       	brcc	.+4      	; 0x20ec <dtoa_prf+0x138>
    20e8:	8f 2d       	mov	r24, r15
    20ea:	82 1b       	sub	r24, r18
    20ec:	a1 11       	cpse	r26, r1
    20ee:	08 c0       	rjmp	.+16     	; 0x2100 <dtoa_prf+0x14c>
    20f0:	f6 01       	movw	r30, r12
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e2       	ldi	r19, 0x20	; 32
    20f6:	21 11       	cpse	r18, r1
    20f8:	25 c0       	rjmp	.+74     	; 0x2144 <dtoa_prf+0x190>
    20fa:	c8 0e       	add	r12, r24
    20fc:	d1 1c       	adc	r13, r1
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	99 23       	and	r25, r25
    2102:	31 f0       	breq	.+12     	; 0x2110 <dtoa_prf+0x15c>
    2104:	f6 01       	movw	r30, r12
    2106:	90 83       	st	Z, r25
    2108:	96 01       	movw	r18, r12
    210a:	2f 5f       	subi	r18, 0xFF	; 255
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
    210e:	69 01       	movw	r12, r18
    2110:	96 01       	movw	r18, r12
    2112:	2d 5f       	subi	r18, 0xFD	; 253
    2114:	3f 4f       	sbci	r19, 0xFF	; 255
    2116:	e2 fe       	sbrs	r14, 2
    2118:	18 c0       	rjmp	.+48     	; 0x214a <dtoa_prf+0x196>
    211a:	99 e4       	ldi	r25, 0x49	; 73
    211c:	d6 01       	movw	r26, r12
    211e:	9c 93       	st	X, r25
    2120:	9e e4       	ldi	r25, 0x4E	; 78
    2122:	11 96       	adiw	r26, 0x01	; 1
    2124:	9c 93       	st	X, r25
    2126:	11 97       	sbiw	r26, 0x01	; 1
    2128:	96 e4       	ldi	r25, 0x46	; 70
    212a:	12 96       	adiw	r26, 0x02	; 2
    212c:	9c 93       	st	X, r25
    212e:	f9 01       	movw	r30, r18
    2130:	98 2f       	mov	r25, r24
    2132:	40 e2       	ldi	r20, 0x20	; 32
    2134:	91 11       	cpse	r25, r1
    2136:	11 c0       	rjmp	.+34     	; 0x215a <dtoa_prf+0x1a6>
    2138:	28 0f       	add	r18, r24
    213a:	31 1d       	adc	r19, r1
    213c:	d9 01       	movw	r26, r18
    213e:	9e cf       	rjmp	.-196    	; 0x207c <dtoa_prf+0xc8>
    2140:	24 e0       	ldi	r18, 0x04	; 4
    2142:	d0 cf       	rjmp	.-96     	; 0x20e4 <dtoa_prf+0x130>
    2144:	31 93       	st	Z+, r19
    2146:	21 50       	subi	r18, 0x01	; 1
    2148:	d6 cf       	rjmp	.-84     	; 0x20f6 <dtoa_prf+0x142>
    214a:	99 e6       	ldi	r25, 0x69	; 105
    214c:	f6 01       	movw	r30, r12
    214e:	90 83       	st	Z, r25
    2150:	9e e6       	ldi	r25, 0x6E	; 110
    2152:	91 83       	std	Z+1, r25	; 0x01
    2154:	96 e6       	ldi	r25, 0x66	; 102
    2156:	92 83       	std	Z+2, r25	; 0x02
    2158:	ea cf       	rjmp	.-44     	; 0x212e <dtoa_prf+0x17a>
    215a:	41 93       	st	Z+, r20
    215c:	91 50       	subi	r25, 0x01	; 1
    215e:	ea cf       	rjmp	.-44     	; 0x2134 <dtoa_prf+0x180>
    2160:	41 e0       	ldi	r20, 0x01	; 1
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	91 11       	cpse	r25, r1
    2166:	02 c0       	rjmp	.+4      	; 0x216c <dtoa_prf+0x1b8>
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	50 e0       	ldi	r21, 0x00	; 0
    216c:	16 16       	cp	r1, r22
    216e:	17 06       	cpc	r1, r23
    2170:	0c f0       	brlt	.+2      	; 0x2174 <dtoa_prf+0x1c0>
    2172:	75 c0       	rjmp	.+234    	; 0x225e <dtoa_prf+0x2aa>
    2174:	fb 01       	movw	r30, r22
    2176:	31 96       	adiw	r30, 0x01	; 1
    2178:	e4 0f       	add	r30, r20
    217a:	f5 1f       	adc	r31, r21
    217c:	bb 20       	and	r11, r11
    217e:	09 f4       	brne	.+2      	; 0x2182 <dtoa_prf+0x1ce>
    2180:	71 c0       	rjmp	.+226    	; 0x2264 <dtoa_prf+0x2b0>
    2182:	4b 2d       	mov	r20, r11
    2184:	50 e0       	ldi	r21, 0x00	; 0
    2186:	4f 5f       	subi	r20, 0xFF	; 255
    2188:	5f 4f       	sbci	r21, 0xFF	; 255
    218a:	4e 0f       	add	r20, r30
    218c:	5f 1f       	adc	r21, r31
    218e:	ef 2d       	mov	r30, r15
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	4e 17       	cp	r20, r30
    2194:	5f 07       	cpc	r21, r31
    2196:	14 f4       	brge	.+4      	; 0x219c <dtoa_prf+0x1e8>
    2198:	2f 2d       	mov	r18, r15
    219a:	24 1b       	sub	r18, r20
    219c:	8e 2d       	mov	r24, r14
    219e:	88 71       	andi	r24, 0x18	; 24
    21a0:	41 f4       	brne	.+16     	; 0x21b2 <dtoa_prf+0x1fe>
    21a2:	f6 01       	movw	r30, r12
    21a4:	82 2f       	mov	r24, r18
    21a6:	40 e2       	ldi	r20, 0x20	; 32
    21a8:	81 11       	cpse	r24, r1
    21aa:	5f c0       	rjmp	.+190    	; 0x226a <dtoa_prf+0x2b6>
    21ac:	c2 0e       	add	r12, r18
    21ae:	d1 1c       	adc	r13, r1
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	99 23       	and	r25, r25
    21b4:	29 f0       	breq	.+10     	; 0x21c0 <dtoa_prf+0x20c>
    21b6:	f6 01       	movw	r30, r12
    21b8:	90 83       	st	Z, r25
    21ba:	c6 01       	movw	r24, r12
    21bc:	01 96       	adiw	r24, 0x01	; 1
    21be:	6c 01       	movw	r12, r24
    21c0:	a1 11       	cpse	r26, r1
    21c2:	08 c0       	rjmp	.+16     	; 0x21d4 <dtoa_prf+0x220>
    21c4:	f6 01       	movw	r30, r12
    21c6:	82 2f       	mov	r24, r18
    21c8:	90 e3       	ldi	r25, 0x30	; 48
    21ca:	81 11       	cpse	r24, r1
    21cc:	51 c0       	rjmp	.+162    	; 0x2270 <dtoa_prf+0x2bc>
    21ce:	c2 0e       	add	r12, r18
    21d0:	d1 1c       	adc	r13, r1
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	01 2f       	mov	r16, r17
    21d6:	06 0f       	add	r16, r22
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	a3 2f       	mov	r26, r19
    21dc:	a0 71       	andi	r26, 0x10	; 16
    21de:	aa 2e       	mov	r10, r26
    21e0:	34 ff       	sbrs	r19, 4
    21e2:	03 c0       	rjmp	.+6      	; 0x21ea <dtoa_prf+0x236>
    21e4:	91 33       	cpi	r25, 0x31	; 49
    21e6:	09 f4       	brne	.+2      	; 0x21ea <dtoa_prf+0x236>
    21e8:	01 50       	subi	r16, 0x01	; 1
    21ea:	10 16       	cp	r1, r16
    21ec:	0c f0       	brlt	.+2      	; 0x21f0 <dtoa_prf+0x23c>
    21ee:	43 c0       	rjmp	.+134    	; 0x2276 <dtoa_prf+0x2c2>
    21f0:	09 30       	cpi	r16, 0x09	; 9
    21f2:	08 f0       	brcs	.+2      	; 0x21f6 <dtoa_prf+0x242>
    21f4:	08 e0       	ldi	r16, 0x08	; 8
    21f6:	ab 01       	movw	r20, r22
    21f8:	77 ff       	sbrs	r23, 7
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <dtoa_prf+0x24c>
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	fb 01       	movw	r30, r22
    2202:	31 96       	adiw	r30, 0x01	; 1
    2204:	e4 1b       	sub	r30, r20
    2206:	f5 0b       	sbc	r31, r21
    2208:	a1 e0       	ldi	r26, 0x01	; 1
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	ac 0f       	add	r26, r28
    220e:	bd 1f       	adc	r27, r29
    2210:	ea 0f       	add	r30, r26
    2212:	fb 1f       	adc	r31, r27
    2214:	3e e2       	ldi	r19, 0x2E	; 46
    2216:	4b 01       	movw	r8, r22
    2218:	80 1a       	sub	r8, r16
    221a:	91 08       	sbc	r9, r1
    221c:	0b 2d       	mov	r16, r11
    221e:	10 e0       	ldi	r17, 0x00	; 0
    2220:	11 95       	neg	r17
    2222:	01 95       	neg	r16
    2224:	11 09       	sbc	r17, r1
    2226:	4f 3f       	cpi	r20, 0xFF	; 255
    2228:	bf ef       	ldi	r27, 0xFF	; 255
    222a:	5b 07       	cpc	r21, r27
    222c:	21 f4       	brne	.+8      	; 0x2236 <dtoa_prf+0x282>
    222e:	d6 01       	movw	r26, r12
    2230:	3c 93       	st	X, r19
    2232:	11 96       	adiw	r26, 0x01	; 1
    2234:	6d 01       	movw	r12, r26
    2236:	64 17       	cp	r22, r20
    2238:	75 07       	cpc	r23, r21
    223a:	fc f0       	brlt	.+62     	; 0x227a <dtoa_prf+0x2c6>
    223c:	84 16       	cp	r8, r20
    223e:	95 06       	cpc	r9, r21
    2240:	e4 f4       	brge	.+56     	; 0x227a <dtoa_prf+0x2c6>
    2242:	80 81       	ld	r24, Z
    2244:	41 50       	subi	r20, 0x01	; 1
    2246:	51 09       	sbc	r21, r1
    2248:	31 96       	adiw	r30, 0x01	; 1
    224a:	d6 01       	movw	r26, r12
    224c:	11 96       	adiw	r26, 0x01	; 1
    224e:	7d 01       	movw	r14, r26
    2250:	40 17       	cp	r20, r16
    2252:	51 07       	cpc	r21, r17
    2254:	a4 f0       	brlt	.+40     	; 0x227e <dtoa_prf+0x2ca>
    2256:	d6 01       	movw	r26, r12
    2258:	8c 93       	st	X, r24
    225a:	67 01       	movw	r12, r14
    225c:	e4 cf       	rjmp	.-56     	; 0x2226 <dtoa_prf+0x272>
    225e:	e1 e0       	ldi	r30, 0x01	; 1
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	8a cf       	rjmp	.-236    	; 0x2178 <dtoa_prf+0x1c4>
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	50 e0       	ldi	r21, 0x00	; 0
    2268:	90 cf       	rjmp	.-224    	; 0x218a <dtoa_prf+0x1d6>
    226a:	41 93       	st	Z+, r20
    226c:	81 50       	subi	r24, 0x01	; 1
    226e:	9c cf       	rjmp	.-200    	; 0x21a8 <dtoa_prf+0x1f4>
    2270:	91 93       	st	Z+, r25
    2272:	81 50       	subi	r24, 0x01	; 1
    2274:	aa cf       	rjmp	.-172    	; 0x21ca <dtoa_prf+0x216>
    2276:	01 e0       	ldi	r16, 0x01	; 1
    2278:	be cf       	rjmp	.-132    	; 0x21f6 <dtoa_prf+0x242>
    227a:	80 e3       	ldi	r24, 0x30	; 48
    227c:	e3 cf       	rjmp	.-58     	; 0x2244 <dtoa_prf+0x290>
    227e:	64 17       	cp	r22, r20
    2280:	75 07       	cpc	r23, r21
    2282:	31 f4       	brne	.+12     	; 0x2290 <dtoa_prf+0x2dc>
    2284:	96 33       	cpi	r25, 0x36	; 54
    2286:	90 f4       	brcc	.+36     	; 0x22ac <dtoa_prf+0x2f8>
    2288:	95 33       	cpi	r25, 0x35	; 53
    228a:	11 f4       	brne	.+4      	; 0x2290 <dtoa_prf+0x2dc>
    228c:	aa 20       	and	r10, r10
    228e:	71 f0       	breq	.+28     	; 0x22ac <dtoa_prf+0x2f8>
    2290:	f6 01       	movw	r30, r12
    2292:	80 83       	st	Z, r24
    2294:	f7 01       	movw	r30, r14
    2296:	82 2f       	mov	r24, r18
    2298:	90 e2       	ldi	r25, 0x20	; 32
    229a:	81 11       	cpse	r24, r1
    229c:	09 c0       	rjmp	.+18     	; 0x22b0 <dtoa_prf+0x2fc>
    229e:	f7 01       	movw	r30, r14
    22a0:	e2 0f       	add	r30, r18
    22a2:	f1 1d       	adc	r31, r1
    22a4:	10 82       	st	Z, r1
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	eb ce       	rjmp	.-554    	; 0x2082 <dtoa_prf+0xce>
    22ac:	81 e3       	ldi	r24, 0x31	; 49
    22ae:	f0 cf       	rjmp	.-32     	; 0x2290 <dtoa_prf+0x2dc>
    22b0:	91 93       	st	Z+, r25
    22b2:	81 50       	subi	r24, 0x01	; 1
    22b4:	f2 cf       	rjmp	.-28     	; 0x229a <dtoa_prf+0x2e6>

000022b6 <__ftoa_engine>:
    22b6:	28 30       	cpi	r18, 0x08	; 8
    22b8:	08 f0       	brcs	.+2      	; 0x22bc <__ftoa_engine+0x6>
    22ba:	27 e0       	ldi	r18, 0x07	; 7
    22bc:	33 27       	eor	r19, r19
    22be:	da 01       	movw	r26, r20
    22c0:	99 0f       	add	r25, r25
    22c2:	31 1d       	adc	r19, r1
    22c4:	87 fd       	sbrc	r24, 7
    22c6:	91 60       	ori	r25, 0x01	; 1
    22c8:	00 96       	adiw	r24, 0x00	; 0
    22ca:	61 05       	cpc	r22, r1
    22cc:	71 05       	cpc	r23, r1
    22ce:	39 f4       	brne	.+14     	; 0x22de <__ftoa_engine+0x28>
    22d0:	32 60       	ori	r19, 0x02	; 2
    22d2:	2e 5f       	subi	r18, 0xFE	; 254
    22d4:	3d 93       	st	X+, r19
    22d6:	30 e3       	ldi	r19, 0x30	; 48
    22d8:	2a 95       	dec	r18
    22da:	e1 f7       	brne	.-8      	; 0x22d4 <__ftoa_engine+0x1e>
    22dc:	08 95       	ret
    22de:	9f 3f       	cpi	r25, 0xFF	; 255
    22e0:	30 f0       	brcs	.+12     	; 0x22ee <__ftoa_engine+0x38>
    22e2:	80 38       	cpi	r24, 0x80	; 128
    22e4:	71 05       	cpc	r23, r1
    22e6:	61 05       	cpc	r22, r1
    22e8:	09 f0       	breq	.+2      	; 0x22ec <__ftoa_engine+0x36>
    22ea:	3c 5f       	subi	r19, 0xFC	; 252
    22ec:	3c 5f       	subi	r19, 0xFC	; 252
    22ee:	3d 93       	st	X+, r19
    22f0:	91 30       	cpi	r25, 0x01	; 1
    22f2:	08 f0       	brcs	.+2      	; 0x22f6 <__ftoa_engine+0x40>
    22f4:	80 68       	ori	r24, 0x80	; 128
    22f6:	91 1d       	adc	r25, r1
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	1f 93       	push	r17
    22fe:	0f 93       	push	r16
    2300:	ff 92       	push	r15
    2302:	ef 92       	push	r14
    2304:	19 2f       	mov	r17, r25
    2306:	98 7f       	andi	r25, 0xF8	; 248
    2308:	96 95       	lsr	r25
    230a:	e9 2f       	mov	r30, r25
    230c:	96 95       	lsr	r25
    230e:	96 95       	lsr	r25
    2310:	e9 0f       	add	r30, r25
    2312:	ff 27       	eor	r31, r31
    2314:	ec 5e       	subi	r30, 0xEC	; 236
    2316:	fe 4f       	sbci	r31, 0xFE	; 254
    2318:	99 27       	eor	r25, r25
    231a:	33 27       	eor	r19, r19
    231c:	ee 24       	eor	r14, r14
    231e:	ff 24       	eor	r15, r15
    2320:	a7 01       	movw	r20, r14
    2322:	e7 01       	movw	r28, r14
    2324:	05 90       	lpm	r0, Z+
    2326:	08 94       	sec
    2328:	07 94       	ror	r0
    232a:	28 f4       	brcc	.+10     	; 0x2336 <__ftoa_engine+0x80>
    232c:	36 0f       	add	r19, r22
    232e:	e7 1e       	adc	r14, r23
    2330:	f8 1e       	adc	r15, r24
    2332:	49 1f       	adc	r20, r25
    2334:	51 1d       	adc	r21, r1
    2336:	66 0f       	add	r22, r22
    2338:	77 1f       	adc	r23, r23
    233a:	88 1f       	adc	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	06 94       	lsr	r0
    2340:	a1 f7       	brne	.-24     	; 0x232a <__ftoa_engine+0x74>
    2342:	05 90       	lpm	r0, Z+
    2344:	07 94       	ror	r0
    2346:	28 f4       	brcc	.+10     	; 0x2352 <__ftoa_engine+0x9c>
    2348:	e7 0e       	add	r14, r23
    234a:	f8 1e       	adc	r15, r24
    234c:	49 1f       	adc	r20, r25
    234e:	56 1f       	adc	r21, r22
    2350:	c1 1d       	adc	r28, r1
    2352:	77 0f       	add	r23, r23
    2354:	88 1f       	adc	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	66 1f       	adc	r22, r22
    235a:	06 94       	lsr	r0
    235c:	a1 f7       	brne	.-24     	; 0x2346 <__ftoa_engine+0x90>
    235e:	05 90       	lpm	r0, Z+
    2360:	07 94       	ror	r0
    2362:	28 f4       	brcc	.+10     	; 0x236e <__ftoa_engine+0xb8>
    2364:	f8 0e       	add	r15, r24
    2366:	49 1f       	adc	r20, r25
    2368:	56 1f       	adc	r21, r22
    236a:	c7 1f       	adc	r28, r23
    236c:	d1 1d       	adc	r29, r1
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	66 1f       	adc	r22, r22
    2374:	77 1f       	adc	r23, r23
    2376:	06 94       	lsr	r0
    2378:	a1 f7       	brne	.-24     	; 0x2362 <__ftoa_engine+0xac>
    237a:	05 90       	lpm	r0, Z+
    237c:	07 94       	ror	r0
    237e:	20 f4       	brcc	.+8      	; 0x2388 <__ftoa_engine+0xd2>
    2380:	49 0f       	add	r20, r25
    2382:	56 1f       	adc	r21, r22
    2384:	c7 1f       	adc	r28, r23
    2386:	d8 1f       	adc	r29, r24
    2388:	99 0f       	add	r25, r25
    238a:	66 1f       	adc	r22, r22
    238c:	77 1f       	adc	r23, r23
    238e:	88 1f       	adc	r24, r24
    2390:	06 94       	lsr	r0
    2392:	a9 f7       	brne	.-22     	; 0x237e <__ftoa_engine+0xc8>
    2394:	84 91       	lpm	r24, Z
    2396:	10 95       	com	r17
    2398:	17 70       	andi	r17, 0x07	; 7
    239a:	41 f0       	breq	.+16     	; 0x23ac <__ftoa_engine+0xf6>
    239c:	d6 95       	lsr	r29
    239e:	c7 95       	ror	r28
    23a0:	57 95       	ror	r21
    23a2:	47 95       	ror	r20
    23a4:	f7 94       	ror	r15
    23a6:	e7 94       	ror	r14
    23a8:	1a 95       	dec	r17
    23aa:	c1 f7       	brne	.-16     	; 0x239c <__ftoa_engine+0xe6>
    23ac:	ea eb       	ldi	r30, 0xBA	; 186
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	68 94       	set
    23b2:	15 90       	lpm	r1, Z+
    23b4:	15 91       	lpm	r17, Z+
    23b6:	35 91       	lpm	r19, Z+
    23b8:	65 91       	lpm	r22, Z+
    23ba:	95 91       	lpm	r25, Z+
    23bc:	05 90       	lpm	r0, Z+
    23be:	7f e2       	ldi	r23, 0x2F	; 47
    23c0:	73 95       	inc	r23
    23c2:	e1 18       	sub	r14, r1
    23c4:	f1 0a       	sbc	r15, r17
    23c6:	43 0b       	sbc	r20, r19
    23c8:	56 0b       	sbc	r21, r22
    23ca:	c9 0b       	sbc	r28, r25
    23cc:	d0 09       	sbc	r29, r0
    23ce:	c0 f7       	brcc	.-16     	; 0x23c0 <__ftoa_engine+0x10a>
    23d0:	e1 0c       	add	r14, r1
    23d2:	f1 1e       	adc	r15, r17
    23d4:	43 1f       	adc	r20, r19
    23d6:	56 1f       	adc	r21, r22
    23d8:	c9 1f       	adc	r28, r25
    23da:	d0 1d       	adc	r29, r0
    23dc:	7e f4       	brtc	.+30     	; 0x23fc <__ftoa_engine+0x146>
    23de:	70 33       	cpi	r23, 0x30	; 48
    23e0:	11 f4       	brne	.+4      	; 0x23e6 <__ftoa_engine+0x130>
    23e2:	8a 95       	dec	r24
    23e4:	e6 cf       	rjmp	.-52     	; 0x23b2 <__ftoa_engine+0xfc>
    23e6:	e8 94       	clt
    23e8:	01 50       	subi	r16, 0x01	; 1
    23ea:	30 f0       	brcs	.+12     	; 0x23f8 <__ftoa_engine+0x142>
    23ec:	08 0f       	add	r16, r24
    23ee:	0a f4       	brpl	.+2      	; 0x23f2 <__ftoa_engine+0x13c>
    23f0:	00 27       	eor	r16, r16
    23f2:	02 17       	cp	r16, r18
    23f4:	08 f4       	brcc	.+2      	; 0x23f8 <__ftoa_engine+0x142>
    23f6:	20 2f       	mov	r18, r16
    23f8:	23 95       	inc	r18
    23fa:	02 2f       	mov	r16, r18
    23fc:	7a 33       	cpi	r23, 0x3A	; 58
    23fe:	28 f0       	brcs	.+10     	; 0x240a <__ftoa_engine+0x154>
    2400:	79 e3       	ldi	r23, 0x39	; 57
    2402:	7d 93       	st	X+, r23
    2404:	2a 95       	dec	r18
    2406:	e9 f7       	brne	.-6      	; 0x2402 <__ftoa_engine+0x14c>
    2408:	10 c0       	rjmp	.+32     	; 0x242a <__ftoa_engine+0x174>
    240a:	7d 93       	st	X+, r23
    240c:	2a 95       	dec	r18
    240e:	89 f6       	brne	.-94     	; 0x23b2 <__ftoa_engine+0xfc>
    2410:	06 94       	lsr	r0
    2412:	97 95       	ror	r25
    2414:	67 95       	ror	r22
    2416:	37 95       	ror	r19
    2418:	17 95       	ror	r17
    241a:	17 94       	ror	r1
    241c:	e1 18       	sub	r14, r1
    241e:	f1 0a       	sbc	r15, r17
    2420:	43 0b       	sbc	r20, r19
    2422:	56 0b       	sbc	r21, r22
    2424:	c9 0b       	sbc	r28, r25
    2426:	d0 09       	sbc	r29, r0
    2428:	98 f0       	brcs	.+38     	; 0x2450 <__ftoa_engine+0x19a>
    242a:	23 95       	inc	r18
    242c:	7e 91       	ld	r23, -X
    242e:	73 95       	inc	r23
    2430:	7a 33       	cpi	r23, 0x3A	; 58
    2432:	08 f0       	brcs	.+2      	; 0x2436 <__ftoa_engine+0x180>
    2434:	70 e3       	ldi	r23, 0x30	; 48
    2436:	7c 93       	st	X, r23
    2438:	20 13       	cpse	r18, r16
    243a:	b8 f7       	brcc	.-18     	; 0x242a <__ftoa_engine+0x174>
    243c:	7e 91       	ld	r23, -X
    243e:	70 61       	ori	r23, 0x10	; 16
    2440:	7d 93       	st	X+, r23
    2442:	30 f0       	brcs	.+12     	; 0x2450 <__ftoa_engine+0x19a>
    2444:	83 95       	inc	r24
    2446:	71 e3       	ldi	r23, 0x31	; 49
    2448:	7d 93       	st	X+, r23
    244a:	70 e3       	ldi	r23, 0x30	; 48
    244c:	2a 95       	dec	r18
    244e:	e1 f7       	brne	.-8      	; 0x2448 <__ftoa_engine+0x192>
    2450:	11 24       	eor	r1, r1
    2452:	ef 90       	pop	r14
    2454:	ff 90       	pop	r15
    2456:	0f 91       	pop	r16
    2458:	1f 91       	pop	r17
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	99 27       	eor	r25, r25
    2460:	87 fd       	sbrc	r24, 7
    2462:	90 95       	com	r25
    2464:	08 95       	ret

00002466 <_exit>:
    2466:	f8 94       	cli

00002468 <__stop_program>:
    2468:	ff cf       	rjmp	.-2      	; 0x2468 <__stop_program>
