
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000159a  0000160e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000159a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00004590  00000000  00000000  00001660  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000019a2  00000000  00000000  00005bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00007592  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000075a4  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000780  00000000  00000000  000075e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00007d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00008478  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00008495  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d0 e1       	ldi	r29, 0x10	; 16
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ea e9       	ldi	r30, 0x9A	; 154
      ce:	f5 e1       	ldi	r31, 0x15	; 21
      d0:	00 e0       	ldi	r16, 0x00	; 0
      d2:	0b bf       	out	0x3b, r16	; 59
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x14>
      d6:	07 90       	elpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a0 35       	cpi	r26, 0x50	; 80
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0x10>
      e0:	0e 94 43 07 	call	0xe86	; 0xe86 <main>
      e4:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <path1>:
    }

    return 0;
}

void path1(){
      ec:	ef 92       	push	r14
      ee:	ff 92       	push	r15
      f0:	0f 93       	push	r16
      f2:	1f 93       	push	r17
    //Forward for 2 seconds (about 6 feet)
    clear_display();
      f4:	0e 94 5f 03 	call	0x6be	; 0x6be <clear_display>
    string2lcd((unsigned char *)"Forward");
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	0e 94 a5 03 	call	0x74a	; 0x74a <string2lcd>
    move(50 + (MOVE_SPEED/2),50 + (MOVE_SPEED/2),STABLE_Z);
     100:	e1 2c       	mov	r14, r1
     102:	f1 2c       	mov	r15, r1
     104:	08 e4       	ldi	r16, 0x48	; 72
     106:	12 e4       	ldi	r17, 0x42	; 66
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	46 e9       	ldi	r20, 0x96	; 150
     10e:	52 e4       	ldi	r21, 0x42	; 66
     110:	ca 01       	movw	r24, r20
     112:	b9 01       	movw	r22, r18
     114:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     118:	2f ef       	ldi	r18, 0xFF	; 255
     11a:	87 ea       	ldi	r24, 0xA7	; 167
     11c:	91 e6       	ldi	r25, 0x61	; 97
     11e:	21 50       	subi	r18, 0x01	; 1
     120:	80 40       	sbci	r24, 0x00	; 0
     122:	90 40       	sbci	r25, 0x00	; 0
     124:	e1 f7       	brne	.-8      	; 0x11e <path1+0x32>
     126:	00 c0       	rjmp	.+0      	; 0x128 <path1+0x3c>
     128:	00 00       	nop
    _delay_ms(2000);
    //Down 3 seconds (aim for about 4 feet)
    clear_display();
     12a:	0e 94 5f 03 	call	0x6be	; 0x6be <clear_display>
    string2lcd((unsigned char *)"Down");
     12e:	88 e0       	ldi	r24, 0x08	; 8
     130:	91 e0       	ldi	r25, 0x01	; 1
     132:	0e 94 a5 03 	call	0x74a	; 0x74a <string2lcd>
    move (50,50,0);
     136:	e1 2c       	mov	r14, r1
     138:	f1 2c       	mov	r15, r1
     13a:	87 01       	movw	r16, r14
     13c:	20 e0       	ldi	r18, 0x00	; 0
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	48 e4       	ldi	r20, 0x48	; 72
     142:	52 e4       	ldi	r21, 0x42	; 66
     144:	ca 01       	movw	r24, r20
     146:	b9 01       	movw	r22, r18
     148:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>
     14c:	2f ef       	ldi	r18, 0xFF	; 255
     14e:	8b e7       	ldi	r24, 0x7B	; 123
     150:	92 e9       	ldi	r25, 0x92	; 146
     152:	21 50       	subi	r18, 0x01	; 1
     154:	80 40       	sbci	r24, 0x00	; 0
     156:	90 40       	sbci	r25, 0x00	; 0
     158:	e1 f7       	brne	.-8      	; 0x152 <path1+0x66>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <path1+0x70>
     15c:	00 00       	nop
    _delay_ms(3000);
    //spin left 90 degrees
    clear_display();
     15e:	0e 94 5f 03 	call	0x6be	; 0x6be <clear_display>
    string2lcd((unsigned char *)"Turn Left");
     162:	8d e0       	ldi	r24, 0x0D	; 13
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 a5 03 	call	0x74a	; 0x74a <string2lcd>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     16a:	e1 2c       	mov	r14, r1
     16c:	f1 2c       	mov	r15, r1
     16e:	08 e4       	ldi	r16, 0x48	; 72
     170:	12 e4       	ldi	r17, 0x42	; 66
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	46 e9       	ldi	r20, 0x96	; 150
     178:	52 e4       	ldi	r21, 0x42	; 66
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	88 ec       	ldi	r24, 0xC8	; 200
     180:	91 e4       	ldi	r25, 0x41	; 65
     182:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>
     186:	2f ef       	ldi	r18, 0xFF	; 255
     188:	87 ea       	ldi	r24, 0xA7	; 167
     18a:	91 e6       	ldi	r25, 0x61	; 97
     18c:	21 50       	subi	r18, 0x01	; 1
     18e:	80 40       	sbci	r24, 0x00	; 0
     190:	90 40       	sbci	r25, 0x00	; 0
     192:	e1 f7       	brne	.-8      	; 0x18c <path1+0xa0>
     194:	00 c0       	rjmp	.+0      	; 0x196 <path1+0xaa>
     196:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    clear_display();
     198:	0e 94 5f 03 	call	0x6be	; 0x6be <clear_display>
    string2lcd((unsigned char *)"Forward");
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	91 e0       	ldi	r25, 0x01	; 1
     1a0:	0e 94 a5 03 	call	0x74a	; 0x74a <string2lcd>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	46 e9       	ldi	r20, 0x96	; 150
     1aa:	52 e4       	ldi	r21, 0x42	; 66
     1ac:	ca 01       	movw	r24, r20
     1ae:	b9 01       	movw	r22, r18
     1b0:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>
     1b4:	2f ef       	ldi	r18, 0xFF	; 255
     1b6:	87 ea       	ldi	r24, 0xA7	; 167
     1b8:	91 e6       	ldi	r25, 0x61	; 97
     1ba:	21 50       	subi	r18, 0x01	; 1
     1bc:	80 40       	sbci	r24, 0x00	; 0
     1be:	90 40       	sbci	r25, 0x00	; 0
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <path1+0xce>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <path1+0xd8>
     1c4:	00 00       	nop
    _delay_ms(2000);
    //Spin left 90 degrees
    clear_display();
     1c6:	0e 94 5f 03 	call	0x6be	; 0x6be <clear_display>
    string2lcd((unsigned char *)"Turn Left");
     1ca:	8d e0       	ldi	r24, 0x0D	; 13
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	0e 94 a5 03 	call	0x74a	; 0x74a <string2lcd>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	46 e9       	ldi	r20, 0x96	; 150
     1d8:	52 e4       	ldi	r21, 0x42	; 66
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	88 ec       	ldi	r24, 0xC8	; 200
     1e0:	91 e4       	ldi	r25, 0x41	; 65
     1e2:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>
     1e6:	2f ef       	ldi	r18, 0xFF	; 255
     1e8:	87 ea       	ldi	r24, 0xA7	; 167
     1ea:	91 e6       	ldi	r25, 0x61	; 97
     1ec:	21 50       	subi	r18, 0x01	; 1
     1ee:	80 40       	sbci	r24, 0x00	; 0
     1f0:	90 40       	sbci	r25, 0x00	; 0
     1f2:	e1 f7       	brne	.-8      	; 0x1ec <path1+0x100>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <path1+0x10a>
     1f6:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    clear_display();
     1f8:	0e 94 5f 03 	call	0x6be	; 0x6be <clear_display>
    string2lcd((unsigned char *)"Forward");
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	0e 94 a5 03 	call	0x74a	; 0x74a <string2lcd>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	46 e9       	ldi	r20, 0x96	; 150
     20a:	52 e4       	ldi	r21, 0x42	; 66
     20c:	ca 01       	movw	r24, r20
     20e:	b9 01       	movw	r22, r18
     210:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>
     214:	2f ef       	ldi	r18, 0xFF	; 255
     216:	87 ea       	ldi	r24, 0xA7	; 167
     218:	91 e6       	ldi	r25, 0x61	; 97
     21a:	21 50       	subi	r18, 0x01	; 1
     21c:	80 40       	sbci	r24, 0x00	; 0
     21e:	90 40       	sbci	r25, 0x00	; 0
     220:	e1 f7       	brne	.-8      	; 0x21a <path1+0x12e>
     222:	00 c0       	rjmp	.+0      	; 0x224 <path1+0x138>
     224:	00 00       	nop
    _delay_ms(2000);
    //Up 3 seconds (resurface)
    clear_display();
     226:	0e 94 5f 03 	call	0x6be	; 0x6be <clear_display>
    string2lcd((unsigned char *)"Up");
     22a:	87 e1       	ldi	r24, 0x17	; 23
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 a5 03 	call	0x74a	; 0x74a <string2lcd>
    move(50,50,100);
     232:	e1 2c       	mov	r14, r1
     234:	f1 2c       	mov	r15, r1
     236:	08 ec       	ldi	r16, 0xC8	; 200
     238:	12 e4       	ldi	r17, 0x42	; 66
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	48 e4       	ldi	r20, 0x48	; 72
     240:	52 e4       	ldi	r21, 0x42	; 66
     242:	ca 01       	movw	r24, r20
     244:	b9 01       	movw	r22, r18
     246:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>
    //Spin left 90 degrees
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    clear_display();
     24a:	0e 94 5f 03 	call	0x6be	; 0x6be <clear_display>
    string2lcd((unsigned char *)"Forward");
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	0e 94 a5 03 	call	0x74a	; 0x74a <string2lcd>
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     256:	e1 2c       	mov	r14, r1
     258:	f1 2c       	mov	r15, r1
     25a:	08 e4       	ldi	r16, 0x48	; 72
     25c:	12 e4       	ldi	r17, 0x42	; 66
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	46 e9       	ldi	r20, 0x96	; 150
     264:	52 e4       	ldi	r21, 0x42	; 66
     266:	ca 01       	movw	r24, r20
     268:	b9 01       	movw	r22, r18
     26a:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>
    //Spin left 90 degrees
    clear_display();
     26e:	0e 94 5f 03 	call	0x6be	; 0x6be <clear_display>
    string2lcd((unsigned char *)"Turn Left");
     272:	8d e0       	ldi	r24, 0x0D	; 13
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	0e 94 a5 03 	call	0x74a	; 0x74a <string2lcd>
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	46 e9       	ldi	r20, 0x96	; 150
     280:	52 e4       	ldi	r21, 0x42	; 66
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	88 ec       	ldi	r24, 0xC8	; 200
     288:	91 e4       	ldi	r25, 0x41	; 65
     28a:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>
     28e:	2f ef       	ldi	r18, 0xFF	; 255
     290:	87 ea       	ldi	r24, 0xA7	; 167
     292:	91 e6       	ldi	r25, 0x61	; 97
     294:	21 50       	subi	r18, 0x01	; 1
     296:	80 40       	sbci	r24, 0x00	; 0
     298:	90 40       	sbci	r25, 0x00	; 0
     29a:	e1 f7       	brne	.-8      	; 0x294 <path1+0x1a8>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <path1+0x1b2>
     29e:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Complete (back in some position as start)
}
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	ff 90       	pop	r15
     2a6:	ef 90       	pop	r14
     2a8:	08 95       	ret

000002aa <path2>:
     2aa:	08 95       	ret

000002ac <path3>:
void path2(){
    //Implement if necessary
}
void path3(){
     2ac:	08 95       	ret

000002ae <turn>:
    //Implement if necessary
}

void turn(int degrees){
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
    int *x = 0;
    int *y = 0;
    int *z = 0;
    float headingDegrees = getHeading(x,y,z);
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 80 06 	call	0xd00	; 0xd00 <getHeading>
     2d0:	6b 01       	movw	r12, r22
     2d2:	7c 01       	movw	r14, r24
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
     2d4:	be 01       	movw	r22, r28
     2d6:	0d 2e       	mov	r0, r29
     2d8:	00 0c       	add	r0, r0
     2da:	88 0b       	sbc	r24, r24
     2dc:	99 0b       	sbc	r25, r25
     2de:	0e 94 45 09 	call	0x128a	; 0x128a <__floatsisf>
     2e2:	a7 01       	movw	r20, r14
     2e4:	96 01       	movw	r18, r12
     2e6:	0e 94 b8 07 	call	0xf70	; 0xf70 <__addsf3>
     2ea:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixsfsi>
     2ee:	cb 01       	movw	r24, r22
     2f0:	68 e6       	ldi	r22, 0x68	; 104
     2f2:	71 e0       	ldi	r23, 0x01	; 1
     2f4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__divmodhi4>
     2f8:	8c 01       	movw	r16, r24
    if (degrees < 0){
     2fa:	d7 fd       	sbrc	r29, 7
     2fc:	29 c0       	rjmp	.+82     	; 0x350 <turn+0xa2>
        while ((int)headingDegrees != new_heading){
            move(-TURN_SPEED,TURN_SPEED,50);
            getHeading(x,y,z);
        }
    }
    else if (degrees > 0){
     2fe:	cd 2b       	or	r28, r29
     300:	f1 f0       	breq	.+60     	; 0x33e <turn+0x90>
        //Spin right until new heading
        while ((int)headingDegrees != (int)new_heading){
     302:	c7 01       	movw	r24, r14
     304:	b6 01       	movw	r22, r12
     306:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixsfsi>
     30a:	06 17       	cp	r16, r22
     30c:	17 07       	cpc	r17, r23
     30e:	b9 f0       	breq	.+46     	; 0x33e <turn+0x90>
            move(TURN_SPEED,-TURN_SPEED,50);
     310:	e1 2c       	mov	r14, r1
     312:	f1 2c       	mov	r15, r1
     314:	08 e4       	ldi	r16, 0x48	; 72
     316:	12 e4       	ldi	r17, 0x42	; 66
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	40 e7       	ldi	r20, 0x70	; 112
     31e:	51 ec       	ldi	r21, 0xC1	; 193
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	80 e7       	ldi	r24, 0x70	; 112
     326:	91 e4       	ldi	r25, 0x41	; 65
     328:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>
            getHeading(x,y,z);
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 80 06 	call	0xd00	; 0xd00 <getHeading>
     33c:	e9 cf       	rjmp	.-46     	; 0x310 <turn+0x62>
        }
    }
}
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	df 90       	pop	r13
     34c:	cf 90       	pop	r12
     34e:	08 95       	ret
    float headingDegrees = getHeading(x,y,z);
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
    if (degrees < 0){
        //Spin left until new heading
        while ((int)headingDegrees != new_heading){
     350:	c7 01       	movw	r24, r14
     352:	b6 01       	movw	r22, r12
     354:	0e 94 0d 09 	call	0x121a	; 0x121a <__fixsfsi>
     358:	06 17       	cp	r16, r22
     35a:	17 07       	cpc	r17, r23
     35c:	81 f3       	breq	.-32     	; 0x33e <turn+0x90>
            move(-TURN_SPEED,TURN_SPEED,50);
     35e:	e1 2c       	mov	r14, r1
     360:	f1 2c       	mov	r15, r1
     362:	08 e4       	ldi	r16, 0x48	; 72
     364:	12 e4       	ldi	r17, 0x42	; 66
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	40 e7       	ldi	r20, 0x70	; 112
     36c:	51 e4       	ldi	r21, 0x41	; 65
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	80 e7       	ldi	r24, 0x70	; 112
     374:	91 ec       	ldi	r25, 0xC1	; 193
     376:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>
            getHeading(x,y,z);
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 80 06 	call	0xd00	; 0xd00 <getHeading>
     38a:	e9 cf       	rjmp	.-46     	; 0x35e <turn+0xb0>

0000038c <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     38c:	88 e4       	ldi	r24, 0x48	; 72
     38e:	80 93 70 00 	sts	0x0070, r24
     392:	08 95       	ret

00000394 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     394:	10 92 74 00 	sts	0x0074, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     398:	94 ea       	ldi	r25, 0xA4	; 164
     39a:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     39e:	90 91 74 00 	lds	r25, 0x0074
     3a2:	97 ff       	sbrs	r25, 7
     3a4:	fc cf       	rjmp	.-8      	; 0x39e <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     3a6:	90 91 71 00 	lds	r25, 0x0071
     3aa:	98 7f       	andi	r25, 0xF8	; 248
     3ac:	98 30       	cpi	r25, 0x08	; 8
     3ae:	11 f0       	breq	.+4      	; 0x3b4 <i2c_start+0x20>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
     3b4:	80 93 73 00 	sts	0x0073, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     3b8:	84 e8       	ldi	r24, 0x84	; 132
     3ba:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     3be:	80 91 74 00 	lds	r24, 0x0074
     3c2:	87 ff       	sbrs	r24, 7
     3c4:	fc cf       	rjmp	.-8      	; 0x3be <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     3c6:	80 91 71 00 	lds	r24, 0x0071
     3ca:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     3cc:	88 31       	cpi	r24, 0x18	; 24
     3ce:	11 f0       	breq	.+4      	; 0x3d4 <i2c_start+0x40>
     3d0:	80 34       	cpi	r24, 0x40	; 64
     3d2:	71 f7       	brne	.-36     	; 0x3b0 <i2c_start+0x1c>
	
	return 0;
     3d4:	80 e0       	ldi	r24, 0x00	; 0
}
     3d6:	08 95       	ret

000003d8 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     3d8:	80 93 73 00 	sts	0x0073, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     3dc:	84 e8       	ldi	r24, 0x84	; 132
     3de:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     3e2:	80 91 74 00 	lds	r24, 0x0074
     3e6:	87 ff       	sbrs	r24, 7
     3e8:	fc cf       	rjmp	.-8      	; 0x3e2 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     3ea:	90 91 71 00 	lds	r25, 0x0071
     3ee:	98 7f       	andi	r25, 0xF8	; 248
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	98 32       	cpi	r25, 0x28	; 40
     3f4:	09 f0       	breq	.+2      	; 0x3f8 <i2c_write+0x20>
	
	return 0;
}
     3f6:	08 95       	ret
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     3f8:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     3fa:	08 95       	ret

000003fc <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     3fc:	84 ec       	ldi	r24, 0xC4	; 196
     3fe:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     402:	80 91 74 00 	lds	r24, 0x0074
     406:	87 ff       	sbrs	r24, 7
     408:	fc cf       	rjmp	.-8      	; 0x402 <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
     40a:	80 91 73 00 	lds	r24, 0x0073
}
     40e:	08 95       	ret

00000410 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     410:	84 e8       	ldi	r24, 0x84	; 132
     412:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     416:	80 91 74 00 	lds	r24, 0x0074
     41a:	87 ff       	sbrs	r24, 7
     41c:	fc cf       	rjmp	.-8      	; 0x416 <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
     41e:	80 91 73 00 	lds	r24, 0x0073
}
     422:	08 95       	ret

00000424 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	8b 01       	movw	r16, r22
     42e:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     430:	0e 94 ca 01 	call	0x394	; 0x394 <i2c_start>
     434:	81 11       	cpse	r24, r1
     436:	1f c0       	rjmp	.+62     	; 0x476 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
     438:	20 97       	sbiw	r28, 0x00	; 0
     43a:	a9 f0       	breq	.+42     	; 0x466 <i2c_transmit+0x42>
     43c:	f8 01       	movw	r30, r16
     43e:	c0 0f       	add	r28, r16
     440:	d1 1f       	adc	r29, r17
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     442:	24 e8       	ldi	r18, 0x84	; 132
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     444:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     446:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     44a:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     44e:	90 91 74 00 	lds	r25, 0x0074
     452:	97 ff       	sbrs	r25, 7
     454:	fc cf       	rjmp	.-8      	; 0x44e <i2c_transmit+0x2a>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     456:	90 91 71 00 	lds	r25, 0x0071
     45a:	98 7f       	andi	r25, 0xF8	; 248
     45c:	98 32       	cpi	r25, 0x28	; 40
     45e:	59 f4       	brne	.+22     	; 0x476 <i2c_transmit+0x52>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
     460:	ec 17       	cp	r30, r28
     462:	fd 07       	cpc	r31, r29
     464:	79 f7       	brne	.-34     	; 0x444 <i2c_transmit+0x20>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     466:	94 e9       	ldi	r25, 0x94	; 148
     468:	90 93 74 00 	sts	0x0074, r25
	}
	
	i2c_stop();
	
	return 0;
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	08 95       	ret
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	8b 01       	movw	r16, r22
     48c:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_READ)) return 1;
     48e:	81 60       	ori	r24, 0x01	; 1
     490:	0e 94 ca 01 	call	0x394	; 0x394 <i2c_start>
     494:	81 11       	cpse	r24, r1
     496:	25 c0       	rjmp	.+74     	; 0x4e2 <i2c_receive+0x60>
	
	for (uint16_t i = 0; i < (length-1); i++)
     498:	de 01       	movw	r26, r28
     49a:	11 97       	sbiw	r26, 0x01	; 1
     49c:	41 f1       	breq	.+80     	; 0x4ee <i2c_receive+0x6c>
     49e:	f8 01       	movw	r30, r16
     4a0:	a0 0f       	add	r26, r16
     4a2:	b1 1f       	adc	r27, r17

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     4a4:	24 ec       	ldi	r18, 0xC4	; 196
     4a6:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4aa:	90 91 74 00 	lds	r25, 0x0074
     4ae:	97 ff       	sbrs	r25, 7
     4b0:	fc cf       	rjmp	.-8      	; 0x4aa <i2c_receive+0x28>
	// return received data from TWDR
	return TWDR;
     4b2:	90 91 73 00 	lds	r25, 0x0073
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     4b6:	91 93       	st	Z+, r25

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
     4b8:	ae 17       	cp	r26, r30
     4ba:	bf 07       	cpc	r27, r31
     4bc:	a1 f7       	brne	.-24     	; 0x4a6 <i2c_receive+0x24>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     4be:	94 e8       	ldi	r25, 0x84	; 132
     4c0:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4c4:	90 91 74 00 	lds	r25, 0x0074
     4c8:	97 ff       	sbrs	r25, 7
     4ca:	fc cf       	rjmp	.-8      	; 0x4c4 <i2c_receive+0x42>
	// return received data from TWDR
	return TWDR;
     4cc:	90 91 73 00 	lds	r25, 0x0073
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     4d0:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     4d2:	94 e9       	ldi	r25, 0x94	; 148
     4d4:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	08 95       	ret
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
     4e2:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	08 95       	ret
     4ee:	d8 01       	movw	r26, r16
     4f0:	e6 cf       	rjmp	.-52     	; 0x4be <i2c_receive+0x3c>

000004f2 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	16 2f       	mov	r17, r22
     4fe:	f4 2e       	mov	r15, r20
     500:	05 2f       	mov	r16, r21
     502:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr | 0x00)) return 1;
     504:	0e 94 ca 01 	call	0x394	; 0x394 <i2c_start>
     508:	81 11       	cpse	r24, r1
     50a:	2c c0       	rjmp	.+88     	; 0x564 <i2c_writeReg+0x72>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     50c:	10 93 73 00 	sts	0x0073, r17
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     510:	94 e8       	ldi	r25, 0x84	; 132
     512:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     516:	90 91 74 00 	lds	r25, 0x0074
     51a:	97 ff       	sbrs	r25, 7
     51c:	fc cf       	rjmp	.-8      	; 0x516 <i2c_writeReg+0x24>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     51e:	90 91 71 00 	lds	r25, 0x0071
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     522:	20 97       	sbiw	r28, 0x00	; 0
     524:	b1 f0       	breq	.+44     	; 0x552 <i2c_writeReg+0x60>
     526:	ef 2d       	mov	r30, r15
     528:	f0 2f       	mov	r31, r16
     52a:	ce 0f       	add	r28, r30
     52c:	df 1f       	adc	r29, r31
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     52e:	44 e8       	ldi	r20, 0x84	; 132

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     530:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     532:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     536:	40 93 74 00 	sts	0x0074, r20
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     53a:	90 91 74 00 	lds	r25, 0x0074
     53e:	97 ff       	sbrs	r25, 7
     540:	fc cf       	rjmp	.-8      	; 0x53a <i2c_writeReg+0x48>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     542:	90 91 71 00 	lds	r25, 0x0071
     546:	98 7f       	andi	r25, 0xF8	; 248
     548:	98 32       	cpi	r25, 0x28	; 40
     54a:	61 f4       	brne	.+24     	; 0x564 <i2c_writeReg+0x72>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     54c:	ec 17       	cp	r30, r28
     54e:	fd 07       	cpc	r31, r29
     550:	79 f7       	brne	.-34     	; 0x530 <i2c_writeReg+0x3e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     552:	94 e9       	ldi	r25, 0x94	; 148
     554:	90 93 74 00 	sts	0x0074, r25
	}

	i2c_stop();

	return 0;
}
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	ff 90       	pop	r15
     562:	08 95       	ret
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
     564:	81 e0       	ldi	r24, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	08 95       	ret

00000572 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	18 2f       	mov	r17, r24
     580:	06 2f       	mov	r16, r22
     582:	7a 01       	movw	r14, r20
     584:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
     586:	0e 94 ca 01 	call	0x394	; 0x394 <i2c_start>
     58a:	81 11       	cpse	r24, r1
     58c:	38 c0       	rjmp	.+112    	; 0x5fe <i2c_readReg+0x8c>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     58e:	00 93 73 00 	sts	0x0073, r16
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     592:	84 e8       	ldi	r24, 0x84	; 132
     594:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     598:	80 91 74 00 	lds	r24, 0x0074
     59c:	87 ff       	sbrs	r24, 7
     59e:	fc cf       	rjmp	.-8      	; 0x598 <i2c_readReg+0x26>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     5a0:	80 91 71 00 	lds	r24, 0x0071
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
     5a4:	81 2f       	mov	r24, r17
     5a6:	81 60       	ori	r24, 0x01	; 1
     5a8:	0e 94 ca 01 	call	0x394	; 0x394 <i2c_start>
     5ac:	81 11       	cpse	r24, r1
     5ae:	27 c0       	rjmp	.+78     	; 0x5fe <i2c_readReg+0x8c>

	for (uint16_t i = 0; i < (length-1); i++)
     5b0:	de 01       	movw	r26, r28
     5b2:	11 97       	sbiw	r26, 0x01	; 1
     5b4:	61 f1       	breq	.+88     	; 0x60e <i2c_readReg+0x9c>
     5b6:	f7 01       	movw	r30, r14
     5b8:	ae 0d       	add	r26, r14
     5ba:	bf 1d       	adc	r27, r15

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     5bc:	24 ec       	ldi	r18, 0xC4	; 196
     5be:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     5c2:	90 91 74 00 	lds	r25, 0x0074
     5c6:	97 ff       	sbrs	r25, 7
     5c8:	fc cf       	rjmp	.-8      	; 0x5c2 <i2c_readReg+0x50>
	// return received data from TWDR
	return TWDR;
     5ca:	90 91 73 00 	lds	r25, 0x0073

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     5ce:	91 93       	st	Z+, r25

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
     5d0:	ea 17       	cp	r30, r26
     5d2:	fb 07       	cpc	r31, r27
     5d4:	a1 f7       	brne	.-24     	; 0x5be <i2c_readReg+0x4c>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     5d6:	94 e8       	ldi	r25, 0x84	; 132
     5d8:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     5dc:	90 91 74 00 	lds	r25, 0x0074
     5e0:	97 ff       	sbrs	r25, 7
     5e2:	fc cf       	rjmp	.-8      	; 0x5dc <i2c_readReg+0x6a>
	// return received data from TWDR
	return TWDR;
     5e4:	90 91 73 00 	lds	r25, 0x0073

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     5e8:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     5ea:	94 e9       	ldi	r25, 0x94	; 148
     5ec:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	08 95       	ret
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	08 95       	ret
     60e:	d7 01       	movw	r26, r14
     610:	e2 cf       	rjmp	.-60     	; 0x5d6 <i2c_readReg+0x64>

00000612 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     612:	84 e9       	ldi	r24, 0x94	; 148
     614:	80 93 74 00 	sts	0x0074, r24
     618:	08 95       	ret

0000061a <enable_adc>:
#include "./adc.h"


void enable_adc(){
	DDRF = 0x00;
     61a:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0x00;
     61e:	10 92 62 00 	sts	0x0062, r1
	//internally wire REFSn bits in the ADMUX register to connect VREF 
		//to internal 2.56v reference --> 0.0025 v/step
	//ADMUX = (1 << REFS0) | (1 << REFS1); //2.56v
	ADMUX = (1 << REFS0); //AVCC
     622:	80 e4       	ldi	r24, 0x40	; 64
     624:	87 b9       	out	0x07, r24	; 7
	//Single ended input, gain is not allowed
	
	//Default Right Adjusted

	//Set ADEN in ADSCRA to enable ADC
	ADCSRA = (1 << ADEN);
     626:	80 e8       	ldi	r24, 0x80	; 128
     628:	86 b9       	out	0x06, r24	; 6
	//Set the ADC Clock frequency prescaler to 128 --> 125kHz
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     62a:	86 b1       	in	r24, 0x06	; 6
     62c:	87 60       	ori	r24, 0x07	; 7
     62e:	86 b9       	out	0x06, r24	; 6
	//Set free running mode
	//ADCSRA |= (1 << ADFR);
	//Enable the ADC Interrupt Flag
	ADCSRA |= (1 << ADIE);
     630:	33 9a       	sbi	0x06, 3	; 6
	//Start first conversion by setting ADSC in ADCSRA
	ADCSRA |= (1 << ADSC);
     632:	36 9a       	sbi	0x06, 6	; 6
     634:	08 95       	ret

00000636 <read_adc>:

}
int read_adc(int pin){
     636:	fc 01       	movw	r30, r24
	int data;
	if (pin > 7){
     638:	08 97       	sbiw	r24, 0x08	; 8
     63a:	fc f4       	brge	.+62     	; 0x67a <read_adc+0x44>
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	50 e0       	ldi	r21, 0x00	; 0
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
		ADMUX &= ~(1 << i);
     640:	61 e0       	ldi	r22, 0x01	; 1
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	97 b1       	in	r25, 0x07	; 7
     646:	9b 01       	movw	r18, r22
     648:	04 2e       	mov	r0, r20
     64a:	01 c0       	rjmp	.+2      	; 0x64e <read_adc+0x18>
     64c:	22 0f       	add	r18, r18
     64e:	0a 94       	dec	r0
     650:	ea f7       	brpl	.-6      	; 0x64c <read_adc+0x16>
     652:	20 95       	com	r18
     654:	29 23       	and	r18, r25
     656:	27 b9       	out	0x07, r18	; 7
	if (pin > 7){
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
     658:	4f 5f       	subi	r20, 0xFF	; 255
     65a:	5f 4f       	sbci	r21, 0xFF	; 255
     65c:	45 30       	cpi	r20, 0x05	; 5
     65e:	51 05       	cpc	r21, r1
     660:	89 f7       	brne	.-30     	; 0x644 <read_adc+0xe>
		ADMUX &= ~(1 << i);
	}
	//set the new mux bit
	ADMUX |= pin;
     662:	97 b1       	in	r25, 0x07	; 7
     664:	89 2f       	mov	r24, r25
     666:	8e 2b       	or	r24, r30
     668:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
     66a:	36 9a       	sbi	0x06, 6	; 6
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
     66c:	34 9b       	sbis	0x06, 4	; 6
     66e:	fe cf       	rjmp	.-4      	; 0x66c <read_adc+0x36>
	data = ADCL;
     670:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);
     672:	25 b1       	in	r18, 0x05	; 5
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	92 2b       	or	r25, r18
     678:	08 95       	ret

}
int read_adc(int pin){
	int data;
	if (pin > 7){
		return -1;
     67a:	8f ef       	ldi	r24, 0xFF	; 255
     67c:	9f ef       	ldi	r25, 0xFF	; 255
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
	data = ADCL;
	data |= (ADCH << 8);
	return data;
}
     67e:	08 95       	ret

00000680 <get_voltage>:
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
     680:	88 30       	cpi	r24, 0x08	; 8
     682:	91 05       	cpc	r25, r1
     684:	20 f0       	brcs	.+8      	; 0x68e <get_voltage+0xe>
		return 0;
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	cb 01       	movw	r24, r22
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
}
     68c:	08 95       	ret
}
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
		return 0;
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
     68e:	0e 94 1b 03 	call	0x636	; 0x636 <read_adc>
     692:	bc 01       	movw	r22, r24
     694:	99 0f       	add	r25, r25
     696:	88 0b       	sbc	r24, r24
     698:	99 0b       	sbc	r25, r25
     69a:	0e 94 45 09 	call	0x128a	; 0x128a <__floatsisf>
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	40 ea       	ldi	r20, 0xA0	; 160
     6a4:	5b e3       	ldi	r21, 0x3B	; 59
     6a6:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
     6aa:	08 95       	ret

000006ac <strobe_lcd>:
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     6ac:	e2 e6       	ldi	r30, 0x62	; 98
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	88 60       	ori	r24, 0x08	; 8
     6b4:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     6b6:	80 81       	ld	r24, Z
     6b8:	87 7f       	andi	r24, 0xF7	; 247
     6ba:	80 83       	st	Z, r24
     6bc:	08 95       	ret

000006be <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6be:	77 9b       	sbis	0x0e, 7	; 14
     6c0:	fe cf       	rjmp	.-4      	; 0x6be <clear_display>
    SPDR = 0x00;    //command, not data
     6c2:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6c4:	77 9b       	sbis	0x0e, 7	; 14
     6c6:	fe cf       	rjmp	.-4      	; 0x6c4 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6cc:	77 9b       	sbis	0x0e, 7	; 14
     6ce:	fe cf       	rjmp	.-4      	; 0x6cc <clear_display+0xe>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     6d0:	80 91 62 00 	lds	r24, 0x0062
     6d4:	88 60       	ori	r24, 0x08	; 8
     6d6:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     6da:	80 91 62 00 	lds	r24, 0x0062
     6de:	87 7f       	andi	r24, 0xF7	; 247
     6e0:	80 93 62 00 	sts	0x0062, r24
     6e4:	8f e9       	ldi	r24, 0x9F	; 159
     6e6:	98 e2       	ldi	r25, 0x28	; 40
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <clear_display+0x2a>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <clear_display+0x30>
     6ee:	00 00       	nop
     6f0:	08 95       	ret

000006f2 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     6f2:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6f4:	77 9b       	sbis	0x0e, 7	; 14
     6f6:	fe cf       	rjmp	.-4      	; 0x6f4 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     6f8:	80 ec       	ldi	r24, 0xC0	; 192
     6fa:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6fc:	77 9b       	sbis	0x0e, 7	; 14
     6fe:	fe cf       	rjmp	.-4      	; 0x6fc <home_line2+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     700:	80 91 62 00 	lds	r24, 0x0062
     704:	88 60       	ori	r24, 0x08	; 8
     706:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     70a:	80 91 62 00 	lds	r24, 0x0062
     70e:	87 7f       	andi	r24, 0xF7	; 247
     710:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     714:	85 ec       	ldi	r24, 0xC5	; 197
     716:	8a 95       	dec	r24
     718:	f1 f7       	brne	.-4      	; 0x716 <home_line2+0x24>
     71a:	00 00       	nop
     71c:	08 95       	ret

0000071e <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     722:	77 9b       	sbis	0x0e, 7	; 14
     724:	fe cf       	rjmp	.-4      	; 0x722 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     726:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     728:	77 9b       	sbis	0x0e, 7	; 14
     72a:	fe cf       	rjmp	.-4      	; 0x728 <char2lcd+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     72c:	80 91 62 00 	lds	r24, 0x0062
     730:	88 60       	ori	r24, 0x08	; 8
     732:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     736:	80 91 62 00 	lds	r24, 0x0062
     73a:	87 7f       	andi	r24, 0xF7	; 247
     73c:	80 93 62 00 	sts	0x0062, r24
     740:	85 ec       	ldi	r24, 0xC5	; 197
     742:	8a 95       	dec	r24
     744:	f1 f7       	brne	.-4      	; 0x742 <char2lcd+0x24>
     746:	00 00       	nop
     748:	08 95       	ret

0000074a <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	fc 01       	movw	r30, r24
     750:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     756:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     758:	77 9b       	sbis	0x0e, 7	; 14
     75a:	fe cf       	rjmp	.-4      	; 0x758 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     75c:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     75e:	77 9b       	sbis	0x0e, 7	; 14
     760:	fe cf       	rjmp	.-4      	; 0x75e <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     762:	8d 91       	ld	r24, X+
     764:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     766:	77 9b       	sbis	0x0e, 7	; 14
     768:	fe cf       	rjmp	.-4      	; 0x766 <string2lcd+0x1c>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     76a:	90 91 62 00 	lds	r25, 0x0062
     76e:	98 60       	ori	r25, 0x08	; 8
     770:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     774:	90 91 62 00 	lds	r25, 0x0062
     778:	97 7f       	andi	r25, 0xF7	; 247
     77a:	90 93 62 00 	sts	0x0062, r25
     77e:	85 ec       	ldi	r24, 0xC5	; 197
     780:	8a 95       	dec	r24
     782:	f1 f7       	brne	.-4      	; 0x780 <string2lcd+0x36>
     784:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     786:	4f 5f       	subi	r20, 0xFF	; 255
     788:	5f 4f       	sbci	r21, 0xFF	; 255
     78a:	ef 01       	movw	r28, r30
     78c:	09 90       	ld	r0, Y+
     78e:	00 20       	and	r0, r0
     790:	e9 f7       	brne	.-6      	; 0x78c <string2lcd+0x42>
     792:	9e 01       	movw	r18, r28
     794:	2e 1b       	sub	r18, r30
     796:	3f 0b       	sbc	r19, r31
     798:	22 50       	subi	r18, 0x02	; 2
     79a:	31 09       	sbc	r19, r1
     79c:	24 17       	cp	r18, r20
     79e:	35 07       	cpc	r19, r21
     7a0:	d8 f6       	brcc	.-74     	; 0x758 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     7a8:	e1 e6       	ldi	r30, 0x61	; 97
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	88 60       	ori	r24, 0x08	; 8
     7b0:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     7b2:	88 b3       	in	r24, 0x18	; 24
     7b4:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     7b6:	87 b3       	in	r24, 0x17	; 23
     7b8:	87 60       	ori	r24, 0x07	; 7
     7ba:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     7bc:	80 e5       	ldi	r24, 0x50	; 80
     7be:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	8e b9       	out	0x0e, r24	; 14
     7c4:	08 95       	ret

000007c6 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c6:	8f e5       	ldi	r24, 0x5F	; 95
     7c8:	9a ee       	ldi	r25, 0xEA	; 234
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <lcd_init+0x4>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <lcd_init+0xa>
     7d0:	00 00       	nop
     7d2:	23 e0       	ldi	r18, 0x03	; 3
     7d4:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     7d6:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     7d8:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7da:	77 9b       	sbis	0x0e, 7	; 14
     7dc:	fe cf       	rjmp	.-4      	; 0x7da <lcd_init+0x14>
        SPDR = 0x30;
     7de:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7e0:	77 9b       	sbis	0x0e, 7	; 14
     7e2:	fe cf       	rjmp	.-4      	; 0x7e0 <lcd_init+0x1a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     7e4:	80 91 62 00 	lds	r24, 0x0062
     7e8:	88 60       	ori	r24, 0x08	; 8
     7ea:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     7ee:	80 91 62 00 	lds	r24, 0x0062
     7f2:	87 7f       	andi	r24, 0xF7	; 247
     7f4:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f8:	85 ec       	ldi	r24, 0xC5	; 197
     7fa:	8a 95       	dec	r24
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <lcd_init+0x34>
     7fe:	00 00       	nop
     800:	21 50       	subi	r18, 0x01	; 1
     802:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     804:	49 f7       	brne	.-46     	; 0x7d8 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     806:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     808:	77 9b       	sbis	0x0e, 7	; 14
     80a:	fe cf       	rjmp	.-4      	; 0x808 <lcd_init+0x42>
    SPDR = 0x38;
     80c:	88 e3       	ldi	r24, 0x38	; 56
     80e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     810:	77 9b       	sbis	0x0e, 7	; 14
     812:	fe cf       	rjmp	.-4      	; 0x810 <lcd_init+0x4a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     814:	80 91 62 00 	lds	r24, 0x0062
     818:	88 60       	ori	r24, 0x08	; 8
     81a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     81e:	80 91 62 00 	lds	r24, 0x0062
     822:	87 7f       	andi	r24, 0xF7	; 247
     824:	80 93 62 00 	sts	0x0062, r24
     828:	95 ec       	ldi	r25, 0xC5	; 197
     82a:	9a 95       	dec	r25
     82c:	f1 f7       	brne	.-4      	; 0x82a <lcd_init+0x64>
     82e:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     830:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     832:	77 9b       	sbis	0x0e, 7	; 14
     834:	fe cf       	rjmp	.-4      	; 0x832 <lcd_init+0x6c>
    SPDR = 0x08;
     836:	88 e0       	ldi	r24, 0x08	; 8
     838:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     83a:	77 9b       	sbis	0x0e, 7	; 14
     83c:	fe cf       	rjmp	.-4      	; 0x83a <lcd_init+0x74>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     83e:	80 91 62 00 	lds	r24, 0x0062
     842:	88 60       	ori	r24, 0x08	; 8
     844:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     848:	80 91 62 00 	lds	r24, 0x0062
     84c:	87 7f       	andi	r24, 0xF7	; 247
     84e:	80 93 62 00 	sts	0x0062, r24
     852:	85 ec       	ldi	r24, 0xC5	; 197
     854:	8a 95       	dec	r24
     856:	f1 f7       	brne	.-4      	; 0x854 <lcd_init+0x8e>
     858:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     85a:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     85c:	77 9b       	sbis	0x0e, 7	; 14
     85e:	fe cf       	rjmp	.-4      	; 0x85c <lcd_init+0x96>
    SPDR = 0x01;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     864:	77 9b       	sbis	0x0e, 7	; 14
     866:	fe cf       	rjmp	.-4      	; 0x864 <lcd_init+0x9e>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     868:	80 91 62 00 	lds	r24, 0x0062
     86c:	88 60       	ori	r24, 0x08	; 8
     86e:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     872:	80 91 62 00 	lds	r24, 0x0062
     876:	87 7f       	andi	r24, 0xF7	; 247
     878:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	98 e1       	ldi	r25, 0x18	; 24
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <lcd_init+0xba>
     884:	00 c0       	rjmp	.+0      	; 0x886 <lcd_init+0xc0>
     886:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
     888:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     88a:	77 9b       	sbis	0x0e, 7	; 14
     88c:	fe cf       	rjmp	.-4      	; 0x88a <lcd_init+0xc4>
    SPDR = 0x06;
     88e:	86 e0       	ldi	r24, 0x06	; 6
     890:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     892:	77 9b       	sbis	0x0e, 7	; 14
     894:	fe cf       	rjmp	.-4      	; 0x892 <lcd_init+0xcc>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     896:	80 91 62 00 	lds	r24, 0x0062
     89a:	88 60       	ori	r24, 0x08	; 8
     89c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     8a0:	80 91 62 00 	lds	r24, 0x0062
     8a4:	87 7f       	andi	r24, 0xF7	; 247
     8a6:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8aa:	95 ec       	ldi	r25, 0xC5	; 197
     8ac:	9a 95       	dec	r25
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <lcd_init+0xe6>
     8b0:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     8b2:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8b4:	77 9b       	sbis	0x0e, 7	; 14
     8b6:	fe cf       	rjmp	.-4      	; 0x8b4 <lcd_init+0xee>
    SPDR = 0x0E;
     8b8:	8e e0       	ldi	r24, 0x0E	; 14
     8ba:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8bc:	77 9b       	sbis	0x0e, 7	; 14
     8be:	fe cf       	rjmp	.-4      	; 0x8bc <lcd_init+0xf6>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     8c0:	80 91 62 00 	lds	r24, 0x0062
     8c4:	88 60       	ori	r24, 0x08	; 8
     8c6:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     8ca:	80 91 62 00 	lds	r24, 0x0062
     8ce:	87 7f       	andi	r24, 0xF7	; 247
     8d0:	80 93 62 00 	sts	0x0062, r24
     8d4:	85 ec       	ldi	r24, 0xC5	; 197
     8d6:	8a 95       	dec	r24
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <lcd_init+0x110>
     8da:	00 00       	nop
     8dc:	08 95       	ret

000008de <USART1_Init>:
#include "uart.h"


void USART1_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     8de:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
     8e2:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     8e6:	88 e1       	ldi	r24, 0x18	; 24
     8e8:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (3<<UCSZ10);
     8ec:	86 e0       	ldi	r24, 0x06	; 6
     8ee:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f2:	2f ef       	ldi	r18, 0xFF	; 255
     8f4:	81 ee       	ldi	r24, 0xE1	; 225
     8f6:	94 e0       	ldi	r25, 0x04	; 4
     8f8:	21 50       	subi	r18, 0x01	; 1
     8fa:	80 40       	sbci	r24, 0x00	; 0
     8fc:	90 40       	sbci	r25, 0x00	; 0
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <USART1_Init+0x1a>
     900:	00 c0       	rjmp	.+0      	; 0x902 <USART1_Init+0x24>
     902:	00 00       	nop
     904:	08 95       	ret

00000906 <USART1_Transmit>:
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     906:	90 91 9b 00 	lds	r25, 0x009B
     90a:	95 ff       	sbrs	r25, 5
     90c:	fc cf       	rjmp	.-8      	; 0x906 <USART1_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     90e:	80 93 9c 00 	sts	0x009C, r24
     912:	08 95       	ret

00000914 <USART1_send_string>:
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     914:	fc 01       	movw	r30, r24
     916:	20 81       	ld	r18, Z
     918:	22 23       	and	r18, r18
     91a:	51 f0       	breq	.+20     	; 0x930 <USART1_send_string+0x1c>
     91c:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     91e:	90 91 9b 00 	lds	r25, 0x009B
     922:	95 ff       	sbrs	r25, 5
     924:	fc cf       	rjmp	.-8      	; 0x91e <USART1_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     926:	20 93 9c 00 	sts	0x009C, r18
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     92a:	21 91       	ld	r18, Z+
     92c:	21 11       	cpse	r18, r1
     92e:	f7 cf       	rjmp	.-18     	; 0x91e <USART1_send_string+0xa>
     930:	08 95       	ret

00000932 <USART1_Receive>:
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     932:	80 91 9b 00 	lds	r24, 0x009B
     936:	87 ff       	sbrs	r24, 7
     938:	fc cf       	rjmp	.-8      	; 0x932 <USART1_Receive>
    return UDR1;
     93a:	80 91 9c 00 	lds	r24, 0x009C
}
     93e:	08 95       	ret

00000940 <USART1_Receive_String>:

void USART1_Receive_String(unsigned char *str){
     940:	dc 01       	movw	r26, r24
     942:	fc 01       	movw	r30, r24
     944:	9c 01       	movw	r18, r24
     946:	2b 5f       	subi	r18, 0xFB	; 251
     948:	3f 4f       	sbci	r19, 0xFF	; 255
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     94a:	90 91 9b 00 	lds	r25, 0x009B
     94e:	97 ff       	sbrs	r25, 7
     950:	fc cf       	rjmp	.-8      	; 0x94a <USART1_Receive_String+0xa>
    return UDR1;
     952:	90 91 9c 00 	lds	r25, 0x009C

void USART1_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     956:	9e 37       	cpi	r25, 0x7E	; 126
     958:	29 f0       	breq	.+10     	; 0x964 <USART1_Receive_String+0x24>
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
     95a:	e2 17       	cp	r30, r18
     95c:	f3 07       	cpc	r31, r19
     95e:	19 f0       	breq	.+6      	; 0x966 <USART1_Receive_String+0x26>
            str[2] = 75;
            str[3] = END_STRING;
            str[4] = '\0';
            break;
        }
        str[i] = c;
     960:	91 93       	st	Z+, r25
     962:	f3 cf       	rjmp	.-26     	; 0x94a <USART1_Receive_String+0xa>
     964:	08 95       	ret
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
     966:	82 e3       	ldi	r24, 0x32	; 50
     968:	8c 93       	st	X, r24
            str[1] = 25;
     96a:	89 e1       	ldi	r24, 0x19	; 25
     96c:	11 96       	adiw	r26, 0x01	; 1
     96e:	8c 93       	st	X, r24
     970:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 75;
     972:	8b e4       	ldi	r24, 0x4B	; 75
     974:	12 96       	adiw	r26, 0x02	; 2
     976:	8c 93       	st	X, r24
     978:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
     97a:	8e e7       	ldi	r24, 0x7E	; 126
     97c:	13 96       	adiw	r26, 0x03	; 3
     97e:	8c 93       	st	X, r24
     980:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
     982:	14 96       	adiw	r26, 0x04	; 4
     984:	1c 92       	st	X, r1
            break;
     986:	08 95       	ret

00000988 <USART1_flush>:
        str[i] = c;
        ++i;
    }
}

void USART1_flush(){
     988:	e2 e4       	ldi	r30, 0x42	; 66
     98a:	f1 e0       	ldi	r31, 0x01	; 1
     98c:	96 e4       	ldi	r25, 0x46	; 70
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     98e:	80 91 9b 00 	lds	r24, 0x009B
     992:	85 ff       	sbrs	r24, 5
     994:	fc cf       	rjmp	.-8      	; 0x98e <USART1_flush+0x6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     996:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     99a:	91 91       	ld	r25, Z+
     99c:	91 11       	cpse	r25, r1
     99e:	f7 cf       	rjmp	.-18     	; 0x98e <USART1_flush+0x6>
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     9a0:	80 91 9b 00 	lds	r24, 0x009B
     9a4:	87 ff       	sbrs	r24, 7
     9a6:	0c c0       	rjmp	.+24     	; 0x9c0 <USART1_flush+0x38>
        dummy = UDR1;
     9a8:	90 91 9c 00 	lds	r25, 0x009C
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     9ac:	80 91 9b 00 	lds	r24, 0x009B
     9b0:	85 ff       	sbrs	r24, 5
     9b2:	fc cf       	rjmp	.-8      	; 0x9ac <USART1_flush+0x24>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     9b4:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     9b8:	80 91 9b 00 	lds	r24, 0x009B
     9bc:	87 fd       	sbrc	r24, 7
     9be:	f4 cf       	rjmp	.-24     	; 0x9a8 <USART1_flush+0x20>
     9c0:	08 95       	ret

000009c2 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     9c2:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
     9c6:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     9c8:	88 e1       	ldi	r24, 0x18	; 24
     9ca:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */ 
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
     9cc:	8e e0       	ldi	r24, 0x0E	; 14
     9ce:	80 93 95 00 	sts	0x0095, r24
     9d2:	2f ef       	ldi	r18, 0xFF	; 255
     9d4:	81 ee       	ldi	r24, 0xE1	; 225
     9d6:	94 e0       	ldi	r25, 0x04	; 4
     9d8:	21 50       	subi	r18, 0x01	; 1
     9da:	80 40       	sbci	r24, 0x00	; 0
     9dc:	90 40       	sbci	r25, 0x00	; 0
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <USART0_Init+0x16>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <USART0_Init+0x20>
     9e2:	00 00       	nop
     9e4:	08 95       	ret

000009e6 <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     9e6:	5d 9b       	sbis	0x0b, 5	; 11
     9e8:	fe cf       	rjmp	.-4      	; 0x9e6 <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     9ea:	8c b9       	out	0x0c, r24	; 12
     9ec:	08 95       	ret

000009ee <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
     9ee:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
     9f0:	90 81       	ld	r25, Z
     9f2:	99 23       	and	r25, r25
     9f4:	39 f0       	breq	.+14     	; 0xa04 <USART0_send_string+0x16>
     9f6:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     9f8:	5d 9b       	sbis	0x0b, 5	; 11
     9fa:	fe cf       	rjmp	.-4      	; 0x9f8 <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     9fc:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     9fe:	91 91       	ld	r25, Z+
     a00:	91 11       	cpse	r25, r1
     a02:	fa cf       	rjmp	.-12     	; 0x9f8 <USART0_send_string+0xa>
     a04:	08 95       	ret

00000a06 <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
     a06:	80 e8       	ldi	r24, 0x80	; 128
     a08:	9d e8       	ldi	r25, 0x8D	; 141
     a0a:	ab e5       	ldi	r26, 0x5B	; 91
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	04 c0       	rjmp	.+8      	; 0xa18 <USART0_Receive+0x12>
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	a1 09       	sbc	r26, r1
     a14:	b1 09       	sbc	r27, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
     a16:	21 f0       	breq	.+8      	; 0xa20 <USART0_Receive+0x1a>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
     a18:	5f 9b       	sbis	0x0b, 7	; 11
     a1a:	fa cf       	rjmp	.-12     	; 0xa10 <USART0_Receive+0xa>
            /* Get and return received data from buffer */ 
            return UDR0;
     a1c:	8c b1       	in	r24, 0x0c	; 12
     a1e:	08 95       	ret
        }
    } while (--timeout);
    return 255;
     a20:	8f ef       	ldi	r24, 0xFF	; 255
    /********
    * This is the original
    ************/
    //while (!(UCSR0A & (1<<RXC0)));
    //return UDR0;
}
     a22:	08 95       	ret

00000a24 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
     a24:	dc 01       	movw	r26, r24
     a26:	fc 01       	movw	r30, r24
     a28:	9c 01       	movw	r18, r24
     a2a:	2b 5f       	subi	r18, 0xFB	; 251
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	40 e8       	ldi	r20, 0x80	; 128
     a30:	5d e8       	ldi	r21, 0x8D	; 141
     a32:	6b e5       	ldi	r22, 0x5B	; 91
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	05 c0       	rjmp	.+10     	; 0xa42 <USART0_Receive_String+0x1e>
     a38:	41 50       	subi	r20, 0x01	; 1
     a3a:	51 09       	sbc	r21, r1
     a3c:	61 09       	sbc	r22, r1
     a3e:	71 09       	sbc	r23, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
     a40:	61 f0       	breq	.+24     	; 0xa5a <USART0_Receive_String+0x36>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
     a42:	5f 9b       	sbis	0x0b, 7	; 11
     a44:	f9 cf       	rjmp	.-14     	; 0xa38 <USART0_Receive_String+0x14>
            /* Get and return received data from buffer */ 
            return UDR0;
     a46:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     a48:	9e 37       	cpi	r25, 0x7E	; 126
     a4a:	b1 f0       	breq	.+44     	; 0xa78 <USART0_Receive_String+0x54>
        if (c == 255 || i > MAX_STRING_SIZE - 1){
     a4c:	9f 3f       	cpi	r25, 0xFF	; 255
     a4e:	29 f0       	breq	.+10     	; 0xa5a <USART0_Receive_String+0x36>
     a50:	e2 17       	cp	r30, r18
     a52:	f3 07       	cpc	r31, r19
     a54:	11 f0       	breq	.+4      	; 0xa5a <USART0_Receive_String+0x36>
            str[2] = 50;
            str[3] = END_STRING;
            str[4] = '\0';
            return;
        }
        str[i] = c;
     a56:	91 93       	st	Z+, r25
     a58:	ea cf       	rjmp	.-44     	; 0xa2e <USART0_Receive_String+0xa>
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
     a5a:	82 e3       	ldi	r24, 0x32	; 50
     a5c:	8c 93       	st	X, r24
            str[1] = 50;
     a5e:	11 96       	adiw	r26, 0x01	; 1
     a60:	8c 93       	st	X, r24
     a62:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
     a64:	12 96       	adiw	r26, 0x02	; 2
     a66:	8c 93       	st	X, r24
     a68:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
     a6a:	8e e7       	ldi	r24, 0x7E	; 126
     a6c:	13 96       	adiw	r26, 0x03	; 3
     a6e:	8c 93       	st	X, r24
     a70:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
     a72:	14 96       	adiw	r26, 0x04	; 4
     a74:	1c 92       	st	X, r1
            return;
     a76:	08 95       	ret
     a78:	08 95       	ret

00000a7a <USART0_flush>:
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
     a7a:	5f 9b       	sbis	0x0b, 7	; 11
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <USART0_flush+0xa>
        dummy = UDR0;
     a7e:	8c b1       	in	r24, 0x0c	; 12
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
     a80:	5f 99       	sbic	0x0b, 7	; 11
     a82:	fd cf       	rjmp	.-6      	; 0xa7e <USART0_flush+0x4>
     a84:	08 95       	ret

00000a86 <init_esc>:
void init_motors(){
    init_esc();
    set_16bitPWM1();
}

void init_esc(){
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
     a8a:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a8c:	ef e6       	ldi	r30, 0x6F	; 111
     a8e:	f7 e1       	ldi	r31, 0x17	; 23
     a90:	31 97       	sbiw	r30, 0x01	; 1
     a92:	f1 f7       	brne	.-4      	; 0xa90 <init_esc+0xa>
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <init_esc+0x10>
     a96:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
     a98:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a9a:	ff ef       	ldi	r31, 0xFF	; 255
     a9c:	23 ed       	ldi	r18, 0xD3	; 211
     a9e:	30 e3       	ldi	r19, 0x30	; 48
     aa0:	f1 50       	subi	r31, 0x01	; 1
     aa2:	20 40       	sbci	r18, 0x00	; 0
     aa4:	30 40       	sbci	r19, 0x00	; 0
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <init_esc+0x1a>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <init_esc+0x24>
     aaa:	00 00       	nop
     aac:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
     aae:	69 f7       	brne	.-38     	; 0xa8a <init_esc+0x4>
        PORTB |= (1 << 4);
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
        _delay_ms(1000);
    }
}
     ab0:	08 95       	ret

00000ab2 <set_16bitPWM1>:

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
     ab2:	8f b5       	in	r24, 0x2f	; 47
     ab4:	80 68       	ori	r24, 0x80	; 128
     ab6:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
     ab8:	8f b5       	in	r24, 0x2f	; 47
     aba:	80 62       	ori	r24, 0x20	; 32
     abc:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
     abe:	8f b5       	in	r24, 0x2f	; 47
     ac0:	88 60       	ori	r24, 0x08	; 8
     ac2:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
     ac4:	8f b5       	in	r24, 0x2f	; 47
     ac6:	82 60       	ori	r24, 0x02	; 2
     ac8:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
     aca:	8e b5       	in	r24, 0x2e	; 46
     acc:	88 61       	ori	r24, 0x18	; 24
     ace:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
     ad0:	8e b5       	in	r24, 0x2e	; 46
     ad2:	82 60       	ori	r24, 0x02	; 2
     ad4:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     ad6:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     ad8:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     ada:	21 e0       	ldi	r18, 0x01	; 1
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	3d bd       	out	0x2d, r19	; 45
     ae0:	2c bd       	out	0x2c, r18	; 44
    sei();
     ae2:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     ae4:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
     ae6:	8f ef       	ldi	r24, 0xFF	; 255
     ae8:	9f ef       	ldi	r25, 0xFF	; 255
     aea:	97 bd       	out	0x27, r25	; 39
     aec:	86 bd       	out	0x26, r24	; 38
     aee:	2f ef       	ldi	r18, 0xFF	; 255
     af0:	81 ee       	ldi	r24, 0xE1	; 225
     af2:	94 e0       	ldi	r25, 0x04	; 4
     af4:	21 50       	subi	r18, 0x01	; 1
     af6:	80 40       	sbci	r24, 0x00	; 0
     af8:	90 40       	sbci	r25, 0x00	; 0
     afa:	e1 f7       	brne	.-8      	; 0xaf4 <set_16bitPWM1+0x42>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <set_16bitPWM1+0x4c>
     afe:	00 00       	nop
     b00:	08 95       	ret

00000b02 <init_motors>:
#include "motors.h"

void init_motors(){
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	90 e0       	ldi	r25, 0x00	; 0
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
     b06:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b08:	ef e6       	ldi	r30, 0x6F	; 111
     b0a:	f7 e1       	ldi	r31, 0x17	; 23
     b0c:	31 97       	sbiw	r30, 0x01	; 1
     b0e:	f1 f7       	brne	.-4      	; 0xb0c <init_motors+0xa>
     b10:	00 c0       	rjmp	.+0      	; 0xb12 <init_motors+0x10>
     b12:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
     b14:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b16:	ff ef       	ldi	r31, 0xFF	; 255
     b18:	23 ed       	ldi	r18, 0xD3	; 211
     b1a:	30 e3       	ldi	r19, 0x30	; 48
     b1c:	f1 50       	subi	r31, 0x01	; 1
     b1e:	20 40       	sbci	r18, 0x00	; 0
     b20:	30 40       	sbci	r19, 0x00	; 0
     b22:	e1 f7       	brne	.-8      	; 0xb1c <init_motors+0x1a>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <init_motors+0x24>
     b26:	00 00       	nop
     b28:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
     b2a:	69 f7       	brne	.-38     	; 0xb06 <init_motors+0x4>
#include "motors.h"

void init_motors(){
    init_esc();
    set_16bitPWM1();
     b2c:	0c 94 59 05 	jmp	0xab2	; 0xab2 <set_16bitPWM1>

00000b30 <TIM16_WriteTCNT1>:
    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
     b30:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     b32:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     b34:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     b36:	3d bd       	out	0x2d, r19	; 45
     b38:	2c bd       	out	0x2c, r18	; 44
    sei();
     b3a:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     b3c:	9f bf       	out	0x3f, r25	; 63
     b3e:	08 95       	ret

00000b40 <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
     b40:	4f 92       	push	r4
     b42:	5f 92       	push	r5
     b44:	6f 92       	push	r6
     b46:	7f 92       	push	r7
     b48:	8f 92       	push	r8
     b4a:	9f 92       	push	r9
     b4c:	af 92       	push	r10
     b4e:	bf 92       	push	r11
     b50:	cf 92       	push	r12
     b52:	df 92       	push	r13
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	2b 01       	movw	r4, r22
     b62:	3c 01       	movw	r6, r24
     b64:	49 01       	movw	r8, r18
     b66:	5a 01       	movw	r10, r20
     b68:	67 01       	movw	r12, r14
     b6a:	78 01       	movw	r14, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 ef       	ldi	r20, 0xF0	; 240
     b72:	51 e4       	ldi	r21, 0x41	; 65
     b74:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     b78:	87 fd       	sbrc	r24, 7
     b7a:	64 c0       	rjmp	.+200    	; 0xc44 <move+0x104>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	4c e8       	ldi	r20, 0x8C	; 140
     b82:	52 e4       	ldi	r21, 0x42	; 66
     b84:	c3 01       	movw	r24, r6
     b86:	b2 01       	movw	r22, r4
     b88:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__gesf2>
     b8c:	18 16       	cp	r1, r24
     b8e:	0c f0       	brlt	.+2      	; 0xb92 <move+0x52>
     b90:	67 c0       	rjmp	.+206    	; 0xc60 <move+0x120>
     b92:	08 ef       	ldi	r16, 0xF8	; 248
     b94:	1c e0       	ldi	r17, 0x0C	; 12
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	40 ef       	ldi	r20, 0xF0	; 240
     b9c:	51 e4       	ldi	r21, 0x41	; 65
     b9e:	c5 01       	movw	r24, r10
     ba0:	b4 01       	movw	r22, r8
     ba2:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     ba6:	87 fd       	sbrc	r24, 7
     ba8:	58 c0       	rjmp	.+176    	; 0xc5a <move+0x11a>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	4c e8       	ldi	r20, 0x8C	; 140
     bb0:	52 e4       	ldi	r21, 0x42	; 66
     bb2:	c5 01       	movw	r24, r10
     bb4:	b4 01       	movw	r22, r8
     bb6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__gesf2>
     bba:	18 16       	cp	r1, r24
     bbc:	0c f0       	brlt	.+2      	; 0xbc0 <move+0x80>
     bbe:	6d c0       	rjmp	.+218    	; 0xc9a <move+0x15a>
     bc0:	c8 ef       	ldi	r28, 0xF8	; 248
     bc2:	dc e0       	ldi	r29, 0x0C	; 12
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + SATURATE_DIFFERENCE)){
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 ef       	ldi	r20, 0xF0	; 240
     bca:	51 e4       	ldi	r21, 0x41	; 65
     bcc:	c7 01       	movw	r24, r14
     bce:	b6 01       	movw	r22, r12
     bd0:	0e 94 96 08 	call	0x112c	; 0x112c <__cmpsf2>
     bd4:	87 fd       	sbrc	r24, 7
     bd6:	39 c0       	rjmp	.+114    	; 0xc4a <move+0x10a>
        z = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (z > (MAX_INPUT - SATURATE_DIFFERENCE)){
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	4c e8       	ldi	r20, 0x8C	; 140
     bde:	52 e4       	ldi	r21, 0x42	; 66
     be0:	c7 01       	movw	r24, r14
     be2:	b6 01       	movw	r22, r12
     be4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__gesf2>
     be8:	18 16       	cp	r1, r24
     bea:	0c f0       	brlt	.+2      	; 0xbee <move+0xae>
     bec:	4b c0       	rjmp	.+150    	; 0xc84 <move+0x144>
     bee:	83 e3       	ldi	r24, 0x33	; 51
     bf0:	c8 2e       	mov	r12, r24
     bf2:	dc 2c       	mov	r13, r12
     bf4:	ec 2c       	mov	r14, r12
     bf6:	8f e3       	ldi	r24, 0x3F	; 63
     bf8:	f8 2e       	mov	r15, r24

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different speed controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     bfa:	66 b5       	in	r22, 0x26	; 38
     bfc:	77 b5       	in	r23, 0x27	; 39
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 43 09 	call	0x1286	; 0x1286 <__floatunsisf>
     c06:	a7 01       	movw	r20, r14
     c08:	96 01       	movw	r18, r12
     c0a:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
     c0e:	0e 94 14 09 	call	0x1228	; 0x1228 <__fixunssfsi>
    OCR1A = left_speed;
     c12:	1b bd       	out	0x2b, r17	; 43
     c14:	0a bd       	out	0x2a, r16	; 42
    OCR1B = right_speed;
     c16:	d9 bd       	out	0x29, r29	; 41
     c18:	c8 bd       	out	0x28, r28	; 40
    OCR1C = z_speed;
     c1a:	70 93 79 00 	sts	0x0079, r23
     c1e:	60 93 78 00 	sts	0x0078, r22

}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
     c2c:	ef 90       	pop	r14
     c2e:	df 90       	pop	r13
     c30:	cf 90       	pop	r12
     c32:	bf 90       	pop	r11
     c34:	af 90       	pop	r10
     c36:	9f 90       	pop	r9
     c38:	8f 90       	pop	r8
     c3a:	7f 90       	pop	r7
     c3c:	6f 90       	pop	r6
     c3e:	5f 90       	pop	r5
     c40:	4f 90       	pop	r4
     c42:	08 95       	ret
     c44:	08 e7       	ldi	r16, 0x78	; 120
     c46:	1a e0       	ldi	r17, 0x0A	; 10
     c48:	a6 cf       	rjmp	.-180    	; 0xb96 <move+0x56>
     c4a:	9a e9       	ldi	r25, 0x9A	; 154
     c4c:	c9 2e       	mov	r12, r25
     c4e:	99 e9       	ldi	r25, 0x99	; 153
     c50:	d9 2e       	mov	r13, r25
     c52:	ed 2c       	mov	r14, r13
     c54:	9e e3       	ldi	r25, 0x3E	; 62
     c56:	f9 2e       	mov	r15, r25
     c58:	d0 cf       	rjmp	.-96     	; 0xbfa <move+0xba>
     c5a:	c8 e7       	ldi	r28, 0x78	; 120
     c5c:	da e0       	ldi	r29, 0x0A	; 10
     c5e:	b2 cf       	rjmp	.-156    	; 0xbc4 <move+0x84>
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e8       	ldi	r20, 0x80	; 128
     c66:	51 e4       	ldi	r21, 0x41	; 65
     c68:	c3 01       	movw	r24, r6
     c6a:	b2 01       	movw	r22, r4
     c6c:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e8       	ldi	r19, 0x80	; 128
     c74:	49 e0       	ldi	r20, 0x09	; 9
     c76:	55 e4       	ldi	r21, 0x45	; 69
     c78:	0e 94 b8 07 	call	0xf70	; 0xf70 <__addsf3>
     c7c:	0e 94 14 09 	call	0x1228	; 0x1228 <__fixunssfsi>
     c80:	8b 01       	movw	r16, r22
     c82:	89 cf       	rjmp	.-238    	; 0xb96 <move+0x56>
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	48 ec       	ldi	r20, 0xC8	; 200
     c8a:	52 e4       	ldi	r21, 0x42	; 66
     c8c:	c7 01       	movw	r24, r14
     c8e:	b6 01       	movw	r22, r12
     c90:	0e 94 9b 08 	call	0x1136	; 0x1136 <__divsf3>
     c94:	6b 01       	movw	r12, r22
     c96:	7c 01       	movw	r14, r24
     c98:	b0 cf       	rjmp	.-160    	; 0xbfa <move+0xba>
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 e8       	ldi	r20, 0x80	; 128
     ca0:	51 e4       	ldi	r21, 0x41	; 65
     ca2:	c5 01       	movw	r24, r10
     ca4:	b4 01       	movw	r22, r8
     ca6:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e8       	ldi	r19, 0x80	; 128
     cae:	49 e0       	ldi	r20, 0x09	; 9
     cb0:	55 e4       	ldi	r21, 0x45	; 69
     cb2:	0e 94 b8 07 	call	0xf70	; 0xf70 <__addsf3>
     cb6:	0e 94 14 09 	call	0x1228	; 0x1228 <__fixunssfsi>
     cba:	eb 01       	movw	r28, r22
     cbc:	83 cf       	rjmp	.-250    	; 0xbc4 <move+0x84>

00000cbe <init_HMC5883L>:
#include "magnometer.h"

void init_HMC5883L(void){

    i2c_start(HMC5883L_WRITE);
     cbe:	8c e3       	ldi	r24, 0x3C	; 60
     cc0:	0e 94 ca 01 	call	0x394	; 0x394 <i2c_start>
    i2c_write(0x00); // set pointer to CRA
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_write>
    i2c_write(0x70); // write 0x70 to CRA
     cca:	80 e7       	ldi	r24, 0x70	; 112
     ccc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_write>
    i2c_stop();
     cd0:	0e 94 09 03 	call	0x612	; 0x612 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
     cd4:	8c e3       	ldi	r24, 0x3C	; 60
     cd6:	0e 94 ca 01 	call	0x394	; 0x394 <i2c_start>
    i2c_write(0x01); // set pointer to CRB
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_write>
    i2c_write(0xA0);
     ce0:	80 ea       	ldi	r24, 0xA0	; 160
     ce2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_write>
    i2c_stop();
     ce6:	0e 94 09 03 	call	0x612	; 0x612 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
     cea:	8c e3       	ldi	r24, 0x3C	; 60
     cec:	0e 94 ca 01 	call	0x394	; 0x394 <i2c_start>
    i2c_write(0x02); // set pointer to measurement mode
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_write>
    i2c_write(0x00); // continous measurement
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_write>
    i2c_stop();
     cfc:	0c 94 09 03 	jmp	0x612	; 0x612 <i2c_stop>

00000d00 <getHeading>:
}
float getHeading(int16_t *x, int16_t *y, int16_t *z){
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	8c 01       	movw	r16, r24
     d12:	eb 01       	movw	r28, r22
     d14:	7a 01       	movw	r14, r20

    float headingDegrees;
    
    i2c_start(HMC5883L_WRITE);
     d16:	8c e3       	ldi	r24, 0x3C	; 60
     d18:	0e 94 ca 01 	call	0x394	; 0x394 <i2c_start>
    i2c_write(0x03); // set pointer to X axis MSB
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_write>
    i2c_stop();
     d22:	0e 94 09 03 	call	0x612	; 0x612 <i2c_stop>

    i2c_start(HMC5883L_READ);
     d26:	8d e3       	ldi	r24, 0x3D	; 61
     d28:	0e 94 ca 01 	call	0x394	; 0x394 <i2c_start>

    *x = ((uint8_t)i2c_read_ack())<<8;
     d2c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <i2c_read_ack>
     d30:	f8 01       	movw	r30, r16
     d32:	10 82       	st	Z, r1
     d34:	81 83       	std	Z+1, r24	; 0x01
    *x |= i2c_read_ack();
     d36:	0e 94 fe 01 	call	0x3fc	; 0x3fc <i2c_read_ack>
     d3a:	f8 01       	movw	r30, r16
     d3c:	20 81       	ld	r18, Z
     d3e:	31 81       	ldd	r19, Z+1	; 0x01
     d40:	28 2b       	or	r18, r24
     d42:	31 83       	std	Z+1, r19	; 0x01
     d44:	20 83       	st	Z, r18

    *z = ((uint8_t)i2c_read_ack())<<8;
     d46:	0e 94 fe 01 	call	0x3fc	; 0x3fc <i2c_read_ack>
     d4a:	f7 01       	movw	r30, r14
     d4c:	10 82       	st	Z, r1
     d4e:	81 83       	std	Z+1, r24	; 0x01
    *z |= i2c_read_ack();
     d50:	0e 94 fe 01 	call	0x3fc	; 0x3fc <i2c_read_ack>
     d54:	f7 01       	movw	r30, r14
     d56:	20 81       	ld	r18, Z
     d58:	31 81       	ldd	r19, Z+1	; 0x01
     d5a:	28 2b       	or	r18, r24
     d5c:	31 83       	std	Z+1, r19	; 0x01
     d5e:	20 83       	st	Z, r18

    *y = ((uint8_t)i2c_read_ack())<<8;
     d60:	0e 94 fe 01 	call	0x3fc	; 0x3fc <i2c_read_ack>
     d64:	18 82       	st	Y, r1
     d66:	89 83       	std	Y+1, r24	; 0x01
    *y |= i2c_read_nack();
     d68:	0e 94 08 02 	call	0x410	; 0x410 <i2c_read_nack>
     d6c:	28 81       	ld	r18, Y
     d6e:	39 81       	ldd	r19, Y+1	; 0x01
     d70:	28 2b       	or	r18, r24
     d72:	39 83       	std	Y+1, r19	; 0x01
     d74:	28 83       	st	Y, r18

    i2c_stop();
     d76:	0e 94 09 03 	call	0x612	; 0x612 <i2c_stop>

    headingDegrees = atan2((double)*y,(double)*x) * 180 / 3.141592654 + 180;
     d7a:	f8 01       	movw	r30, r16
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	07 2e       	mov	r0, r23
     d82:	00 0c       	add	r0, r0
     d84:	88 0b       	sbc	r24, r24
     d86:	99 0b       	sbc	r25, r25
     d88:	0e 94 45 09 	call	0x128a	; 0x128a <__floatsisf>
     d8c:	6b 01       	movw	r12, r22
     d8e:	7c 01       	movw	r14, r24
     d90:	68 81       	ld	r22, Y
     d92:	79 81       	ldd	r23, Y+1	; 0x01
     d94:	07 2e       	mov	r0, r23
     d96:	00 0c       	add	r0, r0
     d98:	88 0b       	sbc	r24, r24
     d9a:	99 0b       	sbc	r25, r25
     d9c:	0e 94 45 09 	call	0x128a	; 0x128a <__floatsisf>
     da0:	a7 01       	movw	r20, r14
     da2:	96 01       	movw	r18, r12
     da4:	0e 94 37 08 	call	0x106e	; 0x106e <atan2>
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	44 e3       	ldi	r20, 0x34	; 52
     dae:	53 e4       	ldi	r21, 0x43	; 67
     db0:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
     db4:	2b ed       	ldi	r18, 0xDB	; 219
     db6:	3f e0       	ldi	r19, 0x0F	; 15
     db8:	49 e4       	ldi	r20, 0x49	; 73
     dba:	50 e4       	ldi	r21, 0x40	; 64
     dbc:	0e 94 9b 08 	call	0x1136	; 0x1136 <__divsf3>
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	44 e3       	ldi	r20, 0x34	; 52
     dc6:	53 e4       	ldi	r21, 0x43	; 67
     dc8:	0e 94 b8 07 	call	0xf70	; 0xf70 <__addsf3>

    return headingDegrees;
}
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	08 95       	ret

00000dde <get_distance>:
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	08 95       	ret

00000de6 <print_distance>:
    return 0;
}

double print_distance(unsigned int pin){
    return 0;
}
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	cb 01       	movw	r24, r22
     dec:	08 95       	ret

00000dee <enable_laser_sensor>:
void enable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
     dee:	43 98       	cbi	0x08, 3	; 8

    //enable analog comparator multiplexer, set SFIOR:ACME
    SFIOR |= (1 << ACME);
     df0:	80 b5       	in	r24, 0x20	; 32
     df2:	88 60       	ori	r24, 0x08	; 8
     df4:	80 bd       	out	0x20, r24	; 32

    //set AIN1 to laser sensor pin
    ADMUX &= 0b11111000; //clear the admux input pin bits
     df6:	87 b1       	in	r24, 0x07	; 7
     df8:	88 7f       	andi	r24, 0xF8	; 248
     dfa:	87 b9       	out	0x07, r24	; 7
    ADMUX |= LASER_SENSOR;  //set the new bits
     dfc:	38 9a       	sbi	0x07, 0	; 7
    
    //enable analog comparator, clear ACSR:ACD
    ACSR &= ~(1 << ACD);
     dfe:	47 98       	cbi	0x08, 7	; 8
    
    //set comparator interrupt on rising output edge, set ACSR:ACIS1, set ACSR:ACIS0
    ACSR |= (1 << ACIS1) | (1 << ACIS0);
     e00:	88 b1       	in	r24, 0x08	; 8
     e02:	83 60       	ori	r24, 0x03	; 3
     e04:	88 b9       	out	0x08, r24	; 8
    
    //enable analog comparator interrupt, set ACSR:ACIE
    ACSR |= (1 << ACIE);
     e06:	43 9a       	sbi	0x08, 3	; 8
     e08:	08 95       	ret

00000e0a <disable_laser_sensor>:
    
    //Be sure to handle the interrupt until ACSR:ACO goes low
}
void disable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
     e0a:	43 98       	cbi	0x08, 3	; 8

    //disable analog comparator, set ACSR:ACD
    ACSR |= (1 << ACD);
     e0c:	47 9a       	sbi	0x08, 7	; 8

    //disable analog comparator multiplexor, clear SFIOR:ACME
    SFIOR &= ~(1 << ACME);
     e0e:	80 b5       	in	r24, 0x20	; 32
     e10:	87 7f       	andi	r24, 0xF7	; 247
     e12:	80 bd       	out	0x20, r24	; 32
     e14:	08 95       	ret

00000e16 <laser_off>:
}

void laser_off(){
    PORTB |= (1 << LASER);
     e16:	c0 9a       	sbi	0x18, 0	; 24
     e18:	08 95       	ret

00000e1a <laser_on>:
}
void laser_on(){
    PORTB &= ~(1 << LASER);
     e1a:	c0 98       	cbi	0x18, 0	; 24
     e1c:	08 95       	ret

00000e1e <get_depth_mpa>:

#include "pressuresensor.h"

double get_depth_mpa(){
	return 1.2 * (get_voltage(PSENSOR_PIN) - PSENSOR_MIN)/(4.5-PSENSOR_MIN);
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 40 03 	call	0x680	; 0x680 <get_voltage>
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	5f e3       	ldi	r21, 0x3F	; 63
     e2e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__subsf3>
     e32:	2a e9       	ldi	r18, 0x9A	; 154
     e34:	39 e9       	ldi	r19, 0x99	; 153
     e36:	49 e9       	ldi	r20, 0x99	; 153
     e38:	5f e3       	ldi	r21, 0x3F	; 63
     e3a:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e8       	ldi	r20, 0x80	; 128
     e44:	5e e3       	ldi	r21, 0x3E	; 62
     e46:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
}
     e4a:	08 95       	ret

00000e4c <get_depth_feet>:
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 40 03 	call	0x680	; 0x680 <get_voltage>
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	5f e3       	ldi	r21, 0x3F	; 63
     e5c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__subsf3>
     e60:	2a e9       	ldi	r18, 0x9A	; 154
     e62:	39 e9       	ldi	r19, 0x99	; 153
     e64:	49 e9       	ldi	r20, 0x99	; 153
     e66:	5f e3       	ldi	r21, 0x3F	; 63
     e68:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e8       	ldi	r20, 0x80	; 128
     e72:	5e e3       	ldi	r21, 0x3E	; 62
     e74:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
     e78:	29 ef       	ldi	r18, 0xF9	; 249
     e7a:	37 e4       	ldi	r19, 0x47	; 71
     e7c:	47 ea       	ldi	r20, 0xA7	; 167
     e7e:	53 e4       	ldi	r21, 0x43	; 67
     e80:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
     e84:	08 95       	ret

00000e86 <main>:
void turn(int degrees);
void forward();
void reverse();


int main(){
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <main+0x6>
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <main+0x8>
     e8e:	1f 92       	push	r1
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0xFF;
     e94:	8f ef       	ldi	r24, 0xFF	; 255
     e96:	87 bb       	out	0x17, r24	; 23
    PORTB = 0;
     e98:	18 ba       	out	0x18, r1	; 24
    USART0_Init(MYUBRR);
     e9a:	87 e6       	ldi	r24, 0x67	; 103
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <USART0_Init>
    USART0_send_string((unsigned char *)"USART0 (RS232) Initialized \r");
     ea2:	8a e1       	ldi	r24, 0x1A	; 26
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART0_send_string>

    //enable_adc();
    //init_HMC5883L();
    init_motors();
     eaa:	0e 94 81 05 	call	0xb02	; 0xb02 <init_motors>


    unsigned char data[MAX_STRING_SIZE];
    int i;
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        data[i] = '\0';
     eae:	19 82       	std	Y+1, r1	; 0x01
     eb0:	1a 82       	std	Y+2, r1	; 0x02
     eb2:	1b 82       	std	Y+3, r1	; 0x03
     eb4:	1d 82       	std	Y+5, r1	; 0x05
    }
    data[MAX_STRING_SIZE - 2] = '~';
     eb6:	8e e7       	ldi	r24, 0x7E	; 126
     eb8:	8c 83       	std	Y+4, r24	; 0x04

    move(50,50,50);
     eba:	e1 2c       	mov	r14, r1
     ebc:	f1 2c       	mov	r15, r1
     ebe:	08 e4       	ldi	r16, 0x48	; 72
     ec0:	12 e4       	ldi	r17, 0x42	; 66
     ec2:	a8 01       	movw	r20, r16
     ec4:	97 01       	movw	r18, r14
     ec6:	c8 01       	movw	r24, r16
     ec8:	b7 01       	movw	r22, r14
     eca:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>

        if (strcmp((char *)data,"eee~") == 0){
            path1();
        }
        else if (strcmp((char *)data,"222~") == 0){
            data[0] = 's';
     ece:	23 e7       	ldi	r18, 0x73	; 115
     ed0:	52 2e       	mov	r5, r18
            data[1] = 't';
     ed2:	34 e7       	ldi	r19, 0x74	; 116
     ed4:	63 2e       	mov	r6, r19
            data[2] = 'o';
     ed6:	4f e6       	ldi	r20, 0x6F	; 111
     ed8:	74 2e       	mov	r7, r20
    }
    data[MAX_STRING_SIZE - 2] = '~';

    move(50,50,50);
    while (1){
        USART0_Receive_String(data);
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	0e 94 12 05 	call	0xa24	; 0xa24 <USART0_Receive_String>
        // USART0_send_string(data);

        if (strcmp((char *)data,"eee~") == 0){
     ee2:	67 e3       	ldi	r22, 0x37	; 55
     ee4:	71 e0       	ldi	r23, 0x01	; 1
     ee6:	ce 01       	movw	r24, r28
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	0e 94 c2 0a 	call	0x1584	; 0x1584 <strcmp>
     eee:	89 2b       	or	r24, r25
     ef0:	d9 f1       	breq	.+118    	; 0xf68 <main+0xe2>
            path1();
        }
        else if (strcmp((char *)data,"222~") == 0){
     ef2:	6c e3       	ldi	r22, 0x3C	; 60
     ef4:	71 e0       	ldi	r23, 0x01	; 1
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 c2 0a 	call	0x1584	; 0x1584 <strcmp>
     efe:	89 2b       	or	r24, r25
     f00:	91 f4       	brne	.+36     	; 0xf26 <main+0xa0>
            data[0] = 's';
     f02:	59 82       	std	Y+1, r5	; 0x01
            data[1] = 't';
     f04:	6a 82       	std	Y+2, r6	; 0x02
            data[2] = 'o';
     f06:	7b 82       	std	Y+3, r7	; 0x03
            move(50,50,50);
     f08:	e1 2c       	mov	r14, r1
     f0a:	f1 2c       	mov	r15, r1
     f0c:	08 e4       	ldi	r16, 0x48	; 72
     f0e:	12 e4       	ldi	r17, 0x42	; 66
     f10:	a8 01       	movw	r20, r16
     f12:	97 01       	movw	r18, r14
     f14:	c8 01       	movw	r24, r16
     f16:	b7 01       	movw	r22, r14
     f18:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>
            USART0_send_string(data);
     f1c:	ce 01       	movw	r24, r28
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART0_send_string>
     f24:	da cf       	rjmp	.-76     	; 0xeda <main+0x54>
        }
        else{
            // USART0_send_string((unsigned char *)"Moving: ");
            USART0_send_string(data);
     f26:	ce 01       	movw	r24, r28
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART0_send_string>
            move((float)data[0],(float)data[1],(float)data[2]);
     f2e:	6b 81       	ldd	r22, Y+3	; 0x03
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 43 09 	call	0x1286	; 0x1286 <__floatunsisf>
     f3a:	6b 01       	movw	r12, r22
     f3c:	7c 01       	movw	r14, r24
     f3e:	6a 81       	ldd	r22, Y+2	; 0x02
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 43 09 	call	0x1286	; 0x1286 <__floatunsisf>
     f4a:	4b 01       	movw	r8, r22
     f4c:	5c 01       	movw	r10, r24
     f4e:	69 81       	ldd	r22, Y+1	; 0x01
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 43 09 	call	0x1286	; 0x1286 <__floatunsisf>
     f5a:	87 01       	movw	r16, r14
     f5c:	76 01       	movw	r14, r12
     f5e:	a5 01       	movw	r20, r10
     f60:	94 01       	movw	r18, r8
     f62:	0e 94 a0 05 	call	0xb40	; 0xb40 <move>
     f66:	b9 cf       	rjmp	.-142    	; 0xeda <main+0x54>
    while (1){
        USART0_Receive_String(data);
        // USART0_send_string(data);

        if (strcmp((char *)data,"eee~") == 0){
            path1();
     f68:	0e 94 76 00 	call	0xec	; 0xec <path1>
     f6c:	b6 cf       	rjmp	.-148    	; 0xeda <main+0x54>

00000f6e <__subsf3>:
     f6e:	50 58       	subi	r21, 0x80	; 128

00000f70 <__addsf3>:
     f70:	bb 27       	eor	r27, r27
     f72:	aa 27       	eor	r26, r26
     f74:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__addsf3x>
     f78:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__fp_round>
     f7c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__fp_pscA>
     f80:	38 f0       	brcs	.+14     	; 0xf90 <__addsf3+0x20>
     f82:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__fp_pscB>
     f86:	20 f0       	brcs	.+8      	; 0xf90 <__addsf3+0x20>
     f88:	39 f4       	brne	.+14     	; 0xf98 <__addsf3+0x28>
     f8a:	9f 3f       	cpi	r25, 0xFF	; 255
     f8c:	19 f4       	brne	.+6      	; 0xf94 <__addsf3+0x24>
     f8e:	26 f4       	brtc	.+8      	; 0xf98 <__addsf3+0x28>
     f90:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__fp_nan>
     f94:	0e f4       	brtc	.+2      	; 0xf98 <__addsf3+0x28>
     f96:	e0 95       	com	r30
     f98:	e7 fb       	bst	r30, 7
     f9a:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__fp_inf>

00000f9e <__addsf3x>:
     f9e:	e9 2f       	mov	r30, r25
     fa0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fp_split3>
     fa4:	58 f3       	brcs	.-42     	; 0xf7c <__addsf3+0xc>
     fa6:	ba 17       	cp	r27, r26
     fa8:	62 07       	cpc	r22, r18
     faa:	73 07       	cpc	r23, r19
     fac:	84 07       	cpc	r24, r20
     fae:	95 07       	cpc	r25, r21
     fb0:	20 f0       	brcs	.+8      	; 0xfba <__addsf3x+0x1c>
     fb2:	79 f4       	brne	.+30     	; 0xfd2 <__addsf3x+0x34>
     fb4:	a6 f5       	brtc	.+104    	; 0x101e <__addsf3x+0x80>
     fb6:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__fp_zero>
     fba:	0e f4       	brtc	.+2      	; 0xfbe <__addsf3x+0x20>
     fbc:	e0 95       	com	r30
     fbe:	0b 2e       	mov	r0, r27
     fc0:	ba 2f       	mov	r27, r26
     fc2:	a0 2d       	mov	r26, r0
     fc4:	0b 01       	movw	r0, r22
     fc6:	b9 01       	movw	r22, r18
     fc8:	90 01       	movw	r18, r0
     fca:	0c 01       	movw	r0, r24
     fcc:	ca 01       	movw	r24, r20
     fce:	a0 01       	movw	r20, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	ff 27       	eor	r31, r31
     fd4:	59 1b       	sub	r21, r25
     fd6:	99 f0       	breq	.+38     	; 0xffe <__addsf3x+0x60>
     fd8:	59 3f       	cpi	r21, 0xF9	; 249
     fda:	50 f4       	brcc	.+20     	; 0xff0 <__addsf3x+0x52>
     fdc:	50 3e       	cpi	r21, 0xE0	; 224
     fde:	68 f1       	brcs	.+90     	; 0x103a <__addsf3x+0x9c>
     fe0:	1a 16       	cp	r1, r26
     fe2:	f0 40       	sbci	r31, 0x00	; 0
     fe4:	a2 2f       	mov	r26, r18
     fe6:	23 2f       	mov	r18, r19
     fe8:	34 2f       	mov	r19, r20
     fea:	44 27       	eor	r20, r20
     fec:	58 5f       	subi	r21, 0xF8	; 248
     fee:	f3 cf       	rjmp	.-26     	; 0xfd6 <__addsf3x+0x38>
     ff0:	46 95       	lsr	r20
     ff2:	37 95       	ror	r19
     ff4:	27 95       	ror	r18
     ff6:	a7 95       	ror	r26
     ff8:	f0 40       	sbci	r31, 0x00	; 0
     ffa:	53 95       	inc	r21
     ffc:	c9 f7       	brne	.-14     	; 0xff0 <__addsf3x+0x52>
     ffe:	7e f4       	brtc	.+30     	; 0x101e <__addsf3x+0x80>
    1000:	1f 16       	cp	r1, r31
    1002:	ba 0b       	sbc	r27, r26
    1004:	62 0b       	sbc	r22, r18
    1006:	73 0b       	sbc	r23, r19
    1008:	84 0b       	sbc	r24, r20
    100a:	ba f0       	brmi	.+46     	; 0x103a <__addsf3x+0x9c>
    100c:	91 50       	subi	r25, 0x01	; 1
    100e:	a1 f0       	breq	.+40     	; 0x1038 <__addsf3x+0x9a>
    1010:	ff 0f       	add	r31, r31
    1012:	bb 1f       	adc	r27, r27
    1014:	66 1f       	adc	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	88 1f       	adc	r24, r24
    101a:	c2 f7       	brpl	.-16     	; 0x100c <__addsf3x+0x6e>
    101c:	0e c0       	rjmp	.+28     	; 0x103a <__addsf3x+0x9c>
    101e:	ba 0f       	add	r27, r26
    1020:	62 1f       	adc	r22, r18
    1022:	73 1f       	adc	r23, r19
    1024:	84 1f       	adc	r24, r20
    1026:	48 f4       	brcc	.+18     	; 0x103a <__addsf3x+0x9c>
    1028:	87 95       	ror	r24
    102a:	77 95       	ror	r23
    102c:	67 95       	ror	r22
    102e:	b7 95       	ror	r27
    1030:	f7 95       	ror	r31
    1032:	9e 3f       	cpi	r25, 0xFE	; 254
    1034:	08 f0       	brcs	.+2      	; 0x1038 <__addsf3x+0x9a>
    1036:	b0 cf       	rjmp	.-160    	; 0xf98 <__addsf3+0x28>
    1038:	93 95       	inc	r25
    103a:	88 0f       	add	r24, r24
    103c:	08 f0       	brcs	.+2      	; 0x1040 <__addsf3x+0xa2>
    103e:	99 27       	eor	r25, r25
    1040:	ee 0f       	add	r30, r30
    1042:	97 95       	ror	r25
    1044:	87 95       	ror	r24
    1046:	08 95       	ret
    1048:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__fp_pscA>
    104c:	60 f0       	brcs	.+24     	; 0x1066 <__addsf3x+0xc8>
    104e:	80 e8       	ldi	r24, 0x80	; 128
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	09 f4       	brne	.+2      	; 0x1056 <__addsf3x+0xb8>
    1054:	9e ef       	ldi	r25, 0xFE	; 254
    1056:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__fp_pscB>
    105a:	28 f0       	brcs	.+10     	; 0x1066 <__addsf3x+0xc8>
    105c:	40 e8       	ldi	r20, 0x80	; 128
    105e:	51 e0       	ldi	r21, 0x01	; 1
    1060:	71 f4       	brne	.+28     	; 0x107e <atan2+0x10>
    1062:	5e ef       	ldi	r21, 0xFE	; 254
    1064:	0c c0       	rjmp	.+24     	; 0x107e <atan2+0x10>
    1066:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__fp_nan>
    106a:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__fp_zero>

0000106e <atan2>:
    106e:	e9 2f       	mov	r30, r25
    1070:	e0 78       	andi	r30, 0x80	; 128
    1072:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fp_split3>
    1076:	40 f3       	brcs	.-48     	; 0x1048 <__addsf3x+0xaa>
    1078:	09 2e       	mov	r0, r25
    107a:	05 2a       	or	r0, r21
    107c:	b1 f3       	breq	.-20     	; 0x106a <__addsf3x+0xcc>
    107e:	26 17       	cp	r18, r22
    1080:	37 07       	cpc	r19, r23
    1082:	48 07       	cpc	r20, r24
    1084:	59 07       	cpc	r21, r25
    1086:	38 f0       	brcs	.+14     	; 0x1096 <atan2+0x28>
    1088:	0e 2e       	mov	r0, r30
    108a:	07 f8       	bld	r0, 7
    108c:	e0 25       	eor	r30, r0
    108e:	69 f0       	breq	.+26     	; 0x10aa <atan2+0x3c>
    1090:	e0 25       	eor	r30, r0
    1092:	e0 64       	ori	r30, 0x40	; 64
    1094:	0a c0       	rjmp	.+20     	; 0x10aa <atan2+0x3c>
    1096:	ef 63       	ori	r30, 0x3F	; 63
    1098:	07 f8       	bld	r0, 7
    109a:	00 94       	com	r0
    109c:	07 fa       	bst	r0, 7
    109e:	db 01       	movw	r26, r22
    10a0:	b9 01       	movw	r22, r18
    10a2:	9d 01       	movw	r18, r26
    10a4:	dc 01       	movw	r26, r24
    10a6:	ca 01       	movw	r24, r20
    10a8:	ad 01       	movw	r20, r26
    10aa:	ef 93       	push	r30
    10ac:	0e 94 b2 08 	call	0x1164	; 0x1164 <__divsf3_pse>
    10b0:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_round>
    10b4:	0e 94 67 08 	call	0x10ce	; 0x10ce <atan>
    10b8:	5f 91       	pop	r21
    10ba:	55 23       	and	r21, r21
    10bc:	39 f0       	breq	.+14     	; 0x10cc <atan2+0x5e>
    10be:	2b ed       	ldi	r18, 0xDB	; 219
    10c0:	3f e0       	ldi	r19, 0x0F	; 15
    10c2:	49 e4       	ldi	r20, 0x49	; 73
    10c4:	50 fd       	sbrc	r21, 0
    10c6:	49 ec       	ldi	r20, 0xC9	; 201
    10c8:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__addsf3>
    10cc:	08 95       	ret

000010ce <atan>:
    10ce:	df 93       	push	r29
    10d0:	dd 27       	eor	r29, r29
    10d2:	b9 2f       	mov	r27, r25
    10d4:	bf 77       	andi	r27, 0x7F	; 127
    10d6:	40 e8       	ldi	r20, 0x80	; 128
    10d8:	5f e3       	ldi	r21, 0x3F	; 63
    10da:	16 16       	cp	r1, r22
    10dc:	17 06       	cpc	r1, r23
    10de:	48 07       	cpc	r20, r24
    10e0:	5b 07       	cpc	r21, r27
    10e2:	18 f4       	brcc	.+6      	; 0x10ea <atan+0x1c>
    10e4:	d9 2f       	mov	r29, r25
    10e6:	0e 94 21 0a 	call	0x1442	; 0x1442 <inverse>
    10ea:	9f 93       	push	r25
    10ec:	8f 93       	push	r24
    10ee:	7f 93       	push	r23
    10f0:	6f 93       	push	r22
    10f2:	0e 94 96 0a 	call	0x152c	; 0x152c <square>
    10f6:	ec e8       	ldi	r30, 0x8C	; 140
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	0e 94 ad 09 	call	0x135a	; 0x135a <__fp_powser>
    10fe:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_round>
    1102:	2f 91       	pop	r18
    1104:	3f 91       	pop	r19
    1106:	4f 91       	pop	r20
    1108:	5f 91       	pop	r21
    110a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__mulsf3x>
    110e:	dd 23       	and	r29, r29
    1110:	51 f0       	breq	.+20     	; 0x1126 <__stack+0x27>
    1112:	90 58       	subi	r25, 0x80	; 128
    1114:	a2 ea       	ldi	r26, 0xA2	; 162
    1116:	2a ed       	ldi	r18, 0xDA	; 218
    1118:	3f e0       	ldi	r19, 0x0F	; 15
    111a:	49 ec       	ldi	r20, 0xC9	; 201
    111c:	5f e3       	ldi	r21, 0x3F	; 63
    111e:	d0 78       	andi	r29, 0x80	; 128
    1120:	5d 27       	eor	r21, r29
    1122:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__addsf3x>
    1126:	df 91       	pop	r29
    1128:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__fp_round>

0000112c <__cmpsf2>:
    112c:	0e 94 80 09 	call	0x1300	; 0x1300 <__fp_cmp>
    1130:	08 f4       	brcc	.+2      	; 0x1134 <__cmpsf2+0x8>
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	08 95       	ret

00001136 <__divsf3>:
    1136:	0e 94 af 08 	call	0x115e	; 0x115e <__divsf3x>
    113a:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__fp_round>
    113e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__fp_pscB>
    1142:	58 f0       	brcs	.+22     	; 0x115a <__divsf3+0x24>
    1144:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__fp_pscA>
    1148:	40 f0       	brcs	.+16     	; 0x115a <__divsf3+0x24>
    114a:	29 f4       	brne	.+10     	; 0x1156 <__divsf3+0x20>
    114c:	5f 3f       	cpi	r21, 0xFF	; 255
    114e:	29 f0       	breq	.+10     	; 0x115a <__divsf3+0x24>
    1150:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__fp_inf>
    1154:	51 11       	cpse	r21, r1
    1156:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_szero>
    115a:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__fp_nan>

0000115e <__divsf3x>:
    115e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fp_split3>
    1162:	68 f3       	brcs	.-38     	; 0x113e <__divsf3+0x8>

00001164 <__divsf3_pse>:
    1164:	99 23       	and	r25, r25
    1166:	b1 f3       	breq	.-20     	; 0x1154 <__divsf3+0x1e>
    1168:	55 23       	and	r21, r21
    116a:	91 f3       	breq	.-28     	; 0x1150 <__divsf3+0x1a>
    116c:	95 1b       	sub	r25, r21
    116e:	55 0b       	sbc	r21, r21
    1170:	bb 27       	eor	r27, r27
    1172:	aa 27       	eor	r26, r26
    1174:	62 17       	cp	r22, r18
    1176:	73 07       	cpc	r23, r19
    1178:	84 07       	cpc	r24, r20
    117a:	38 f0       	brcs	.+14     	; 0x118a <__divsf3_pse+0x26>
    117c:	9f 5f       	subi	r25, 0xFF	; 255
    117e:	5f 4f       	sbci	r21, 0xFF	; 255
    1180:	22 0f       	add	r18, r18
    1182:	33 1f       	adc	r19, r19
    1184:	44 1f       	adc	r20, r20
    1186:	aa 1f       	adc	r26, r26
    1188:	a9 f3       	breq	.-22     	; 0x1174 <__divsf3_pse+0x10>
    118a:	35 d0       	rcall	.+106    	; 0x11f6 <__divsf3_pse+0x92>
    118c:	0e 2e       	mov	r0, r30
    118e:	3a f0       	brmi	.+14     	; 0x119e <__divsf3_pse+0x3a>
    1190:	e0 e8       	ldi	r30, 0x80	; 128
    1192:	32 d0       	rcall	.+100    	; 0x11f8 <__divsf3_pse+0x94>
    1194:	91 50       	subi	r25, 0x01	; 1
    1196:	50 40       	sbci	r21, 0x00	; 0
    1198:	e6 95       	lsr	r30
    119a:	00 1c       	adc	r0, r0
    119c:	ca f7       	brpl	.-14     	; 0x1190 <__divsf3_pse+0x2c>
    119e:	2b d0       	rcall	.+86     	; 0x11f6 <__divsf3_pse+0x92>
    11a0:	fe 2f       	mov	r31, r30
    11a2:	29 d0       	rcall	.+82     	; 0x11f6 <__divsf3_pse+0x92>
    11a4:	66 0f       	add	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	88 1f       	adc	r24, r24
    11aa:	bb 1f       	adc	r27, r27
    11ac:	26 17       	cp	r18, r22
    11ae:	37 07       	cpc	r19, r23
    11b0:	48 07       	cpc	r20, r24
    11b2:	ab 07       	cpc	r26, r27
    11b4:	b0 e8       	ldi	r27, 0x80	; 128
    11b6:	09 f0       	breq	.+2      	; 0x11ba <__divsf3_pse+0x56>
    11b8:	bb 0b       	sbc	r27, r27
    11ba:	80 2d       	mov	r24, r0
    11bc:	bf 01       	movw	r22, r30
    11be:	ff 27       	eor	r31, r31
    11c0:	93 58       	subi	r25, 0x83	; 131
    11c2:	5f 4f       	sbci	r21, 0xFF	; 255
    11c4:	3a f0       	brmi	.+14     	; 0x11d4 <__divsf3_pse+0x70>
    11c6:	9e 3f       	cpi	r25, 0xFE	; 254
    11c8:	51 05       	cpc	r21, r1
    11ca:	78 f0       	brcs	.+30     	; 0x11ea <__divsf3_pse+0x86>
    11cc:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__fp_inf>
    11d0:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_szero>
    11d4:	5f 3f       	cpi	r21, 0xFF	; 255
    11d6:	e4 f3       	brlt	.-8      	; 0x11d0 <__divsf3_pse+0x6c>
    11d8:	98 3e       	cpi	r25, 0xE8	; 232
    11da:	d4 f3       	brlt	.-12     	; 0x11d0 <__divsf3_pse+0x6c>
    11dc:	86 95       	lsr	r24
    11de:	77 95       	ror	r23
    11e0:	67 95       	ror	r22
    11e2:	b7 95       	ror	r27
    11e4:	f7 95       	ror	r31
    11e6:	9f 5f       	subi	r25, 0xFF	; 255
    11e8:	c9 f7       	brne	.-14     	; 0x11dc <__divsf3_pse+0x78>
    11ea:	88 0f       	add	r24, r24
    11ec:	91 1d       	adc	r25, r1
    11ee:	96 95       	lsr	r25
    11f0:	87 95       	ror	r24
    11f2:	97 f9       	bld	r25, 7
    11f4:	08 95       	ret
    11f6:	e1 e0       	ldi	r30, 0x01	; 1
    11f8:	66 0f       	add	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	bb 1f       	adc	r27, r27
    1200:	62 17       	cp	r22, r18
    1202:	73 07       	cpc	r23, r19
    1204:	84 07       	cpc	r24, r20
    1206:	ba 07       	cpc	r27, r26
    1208:	20 f0       	brcs	.+8      	; 0x1212 <__divsf3_pse+0xae>
    120a:	62 1b       	sub	r22, r18
    120c:	73 0b       	sbc	r23, r19
    120e:	84 0b       	sbc	r24, r20
    1210:	ba 0b       	sbc	r27, r26
    1212:	ee 1f       	adc	r30, r30
    1214:	88 f7       	brcc	.-30     	; 0x11f8 <__divsf3_pse+0x94>
    1216:	e0 95       	com	r30
    1218:	08 95       	ret

0000121a <__fixsfsi>:
    121a:	0e 94 14 09 	call	0x1228	; 0x1228 <__fixunssfsi>
    121e:	68 94       	set
    1220:	b1 11       	cpse	r27, r1
    1222:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_szero>
    1226:	08 95       	ret

00001228 <__fixunssfsi>:
    1228:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__fp_splitA>
    122c:	88 f0       	brcs	.+34     	; 0x1250 <__fixunssfsi+0x28>
    122e:	9f 57       	subi	r25, 0x7F	; 127
    1230:	98 f0       	brcs	.+38     	; 0x1258 <__fixunssfsi+0x30>
    1232:	b9 2f       	mov	r27, r25
    1234:	99 27       	eor	r25, r25
    1236:	b7 51       	subi	r27, 0x17	; 23
    1238:	b0 f0       	brcs	.+44     	; 0x1266 <__fixunssfsi+0x3e>
    123a:	e1 f0       	breq	.+56     	; 0x1274 <__fixunssfsi+0x4c>
    123c:	66 0f       	add	r22, r22
    123e:	77 1f       	adc	r23, r23
    1240:	88 1f       	adc	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	1a f0       	brmi	.+6      	; 0x124c <__fixunssfsi+0x24>
    1246:	ba 95       	dec	r27
    1248:	c9 f7       	brne	.-14     	; 0x123c <__fixunssfsi+0x14>
    124a:	14 c0       	rjmp	.+40     	; 0x1274 <__fixunssfsi+0x4c>
    124c:	b1 30       	cpi	r27, 0x01	; 1
    124e:	91 f0       	breq	.+36     	; 0x1274 <__fixunssfsi+0x4c>
    1250:	0e 94 15 0a 	call	0x142a	; 0x142a <__fp_zero>
    1254:	b1 e0       	ldi	r27, 0x01	; 1
    1256:	08 95       	ret
    1258:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__fp_zero>
    125c:	67 2f       	mov	r22, r23
    125e:	78 2f       	mov	r23, r24
    1260:	88 27       	eor	r24, r24
    1262:	b8 5f       	subi	r27, 0xF8	; 248
    1264:	39 f0       	breq	.+14     	; 0x1274 <__fixunssfsi+0x4c>
    1266:	b9 3f       	cpi	r27, 0xF9	; 249
    1268:	cc f3       	brlt	.-14     	; 0x125c <__fixunssfsi+0x34>
    126a:	86 95       	lsr	r24
    126c:	77 95       	ror	r23
    126e:	67 95       	ror	r22
    1270:	b3 95       	inc	r27
    1272:	d9 f7       	brne	.-10     	; 0x126a <__fixunssfsi+0x42>
    1274:	3e f4       	brtc	.+14     	; 0x1284 <__fixunssfsi+0x5c>
    1276:	90 95       	com	r25
    1278:	80 95       	com	r24
    127a:	70 95       	com	r23
    127c:	61 95       	neg	r22
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	8f 4f       	sbci	r24, 0xFF	; 255
    1282:	9f 4f       	sbci	r25, 0xFF	; 255
    1284:	08 95       	ret

00001286 <__floatunsisf>:
    1286:	e8 94       	clt
    1288:	09 c0       	rjmp	.+18     	; 0x129c <__floatsisf+0x12>

0000128a <__floatsisf>:
    128a:	97 fb       	bst	r25, 7
    128c:	3e f4       	brtc	.+14     	; 0x129c <__floatsisf+0x12>
    128e:	90 95       	com	r25
    1290:	80 95       	com	r24
    1292:	70 95       	com	r23
    1294:	61 95       	neg	r22
    1296:	7f 4f       	sbci	r23, 0xFF	; 255
    1298:	8f 4f       	sbci	r24, 0xFF	; 255
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	99 23       	and	r25, r25
    129e:	a9 f0       	breq	.+42     	; 0x12ca <__floatsisf+0x40>
    12a0:	f9 2f       	mov	r31, r25
    12a2:	96 e9       	ldi	r25, 0x96	; 150
    12a4:	bb 27       	eor	r27, r27
    12a6:	93 95       	inc	r25
    12a8:	f6 95       	lsr	r31
    12aa:	87 95       	ror	r24
    12ac:	77 95       	ror	r23
    12ae:	67 95       	ror	r22
    12b0:	b7 95       	ror	r27
    12b2:	f1 11       	cpse	r31, r1
    12b4:	f8 cf       	rjmp	.-16     	; 0x12a6 <__floatsisf+0x1c>
    12b6:	fa f4       	brpl	.+62     	; 0x12f6 <__floatsisf+0x6c>
    12b8:	bb 0f       	add	r27, r27
    12ba:	11 f4       	brne	.+4      	; 0x12c0 <__floatsisf+0x36>
    12bc:	60 ff       	sbrs	r22, 0
    12be:	1b c0       	rjmp	.+54     	; 0x12f6 <__floatsisf+0x6c>
    12c0:	6f 5f       	subi	r22, 0xFF	; 255
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255
    12c4:	8f 4f       	sbci	r24, 0xFF	; 255
    12c6:	9f 4f       	sbci	r25, 0xFF	; 255
    12c8:	16 c0       	rjmp	.+44     	; 0x12f6 <__floatsisf+0x6c>
    12ca:	88 23       	and	r24, r24
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <__floatsisf+0x48>
    12ce:	96 e9       	ldi	r25, 0x96	; 150
    12d0:	11 c0       	rjmp	.+34     	; 0x12f4 <__floatsisf+0x6a>
    12d2:	77 23       	and	r23, r23
    12d4:	21 f0       	breq	.+8      	; 0x12de <__floatsisf+0x54>
    12d6:	9e e8       	ldi	r25, 0x8E	; 142
    12d8:	87 2f       	mov	r24, r23
    12da:	76 2f       	mov	r23, r22
    12dc:	05 c0       	rjmp	.+10     	; 0x12e8 <__floatsisf+0x5e>
    12de:	66 23       	and	r22, r22
    12e0:	71 f0       	breq	.+28     	; 0x12fe <__floatsisf+0x74>
    12e2:	96 e8       	ldi	r25, 0x86	; 134
    12e4:	86 2f       	mov	r24, r22
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	2a f0       	brmi	.+10     	; 0x12f6 <__floatsisf+0x6c>
    12ec:	9a 95       	dec	r25
    12ee:	66 0f       	add	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	88 1f       	adc	r24, r24
    12f4:	da f7       	brpl	.-10     	; 0x12ec <__floatsisf+0x62>
    12f6:	88 0f       	add	r24, r24
    12f8:	96 95       	lsr	r25
    12fa:	87 95       	ror	r24
    12fc:	97 f9       	bld	r25, 7
    12fe:	08 95       	ret

00001300 <__fp_cmp>:
    1300:	99 0f       	add	r25, r25
    1302:	00 08       	sbc	r0, r0
    1304:	55 0f       	add	r21, r21
    1306:	aa 0b       	sbc	r26, r26
    1308:	e0 e8       	ldi	r30, 0x80	; 128
    130a:	fe ef       	ldi	r31, 0xFE	; 254
    130c:	16 16       	cp	r1, r22
    130e:	17 06       	cpc	r1, r23
    1310:	e8 07       	cpc	r30, r24
    1312:	f9 07       	cpc	r31, r25
    1314:	c0 f0       	brcs	.+48     	; 0x1346 <__fp_cmp+0x46>
    1316:	12 16       	cp	r1, r18
    1318:	13 06       	cpc	r1, r19
    131a:	e4 07       	cpc	r30, r20
    131c:	f5 07       	cpc	r31, r21
    131e:	98 f0       	brcs	.+38     	; 0x1346 <__fp_cmp+0x46>
    1320:	62 1b       	sub	r22, r18
    1322:	73 0b       	sbc	r23, r19
    1324:	84 0b       	sbc	r24, r20
    1326:	95 0b       	sbc	r25, r21
    1328:	39 f4       	brne	.+14     	; 0x1338 <__fp_cmp+0x38>
    132a:	0a 26       	eor	r0, r26
    132c:	61 f0       	breq	.+24     	; 0x1346 <__fp_cmp+0x46>
    132e:	23 2b       	or	r18, r19
    1330:	24 2b       	or	r18, r20
    1332:	25 2b       	or	r18, r21
    1334:	21 f4       	brne	.+8      	; 0x133e <__fp_cmp+0x3e>
    1336:	08 95       	ret
    1338:	0a 26       	eor	r0, r26
    133a:	09 f4       	brne	.+2      	; 0x133e <__fp_cmp+0x3e>
    133c:	a1 40       	sbci	r26, 0x01	; 1
    133e:	a6 95       	lsr	r26
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	81 1d       	adc	r24, r1
    1344:	81 1d       	adc	r24, r1
    1346:	08 95       	ret

00001348 <__fp_inf>:
    1348:	97 f9       	bld	r25, 7
    134a:	9f 67       	ori	r25, 0x7F	; 127
    134c:	80 e8       	ldi	r24, 0x80	; 128
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	08 95       	ret

00001354 <__fp_nan>:
    1354:	9f ef       	ldi	r25, 0xFF	; 255
    1356:	80 ec       	ldi	r24, 0xC0	; 192
    1358:	08 95       	ret

0000135a <__fp_powser>:
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	1f 93       	push	r17
    1360:	0f 93       	push	r16
    1362:	ff 92       	push	r15
    1364:	ef 92       	push	r14
    1366:	df 92       	push	r13
    1368:	7b 01       	movw	r14, r22
    136a:	8c 01       	movw	r16, r24
    136c:	68 94       	set
    136e:	06 c0       	rjmp	.+12     	; 0x137c <__fp_powser+0x22>
    1370:	da 2e       	mov	r13, r26
    1372:	ef 01       	movw	r28, r30
    1374:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__mulsf3x>
    1378:	fe 01       	movw	r30, r28
    137a:	e8 94       	clt
    137c:	a5 91       	lpm	r26, Z+
    137e:	25 91       	lpm	r18, Z+
    1380:	35 91       	lpm	r19, Z+
    1382:	45 91       	lpm	r20, Z+
    1384:	55 91       	lpm	r21, Z+
    1386:	a6 f3       	brts	.-24     	; 0x1370 <__fp_powser+0x16>
    1388:	ef 01       	movw	r28, r30
    138a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__addsf3x>
    138e:	fe 01       	movw	r30, r28
    1390:	97 01       	movw	r18, r14
    1392:	a8 01       	movw	r20, r16
    1394:	da 94       	dec	r13
    1396:	69 f7       	brne	.-38     	; 0x1372 <__fp_powser+0x18>
    1398:	df 90       	pop	r13
    139a:	ef 90       	pop	r14
    139c:	ff 90       	pop	r15
    139e:	0f 91       	pop	r16
    13a0:	1f 91       	pop	r17
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <__fp_pscA>:
    13a8:	00 24       	eor	r0, r0
    13aa:	0a 94       	dec	r0
    13ac:	16 16       	cp	r1, r22
    13ae:	17 06       	cpc	r1, r23
    13b0:	18 06       	cpc	r1, r24
    13b2:	09 06       	cpc	r0, r25
    13b4:	08 95       	ret

000013b6 <__fp_pscB>:
    13b6:	00 24       	eor	r0, r0
    13b8:	0a 94       	dec	r0
    13ba:	12 16       	cp	r1, r18
    13bc:	13 06       	cpc	r1, r19
    13be:	14 06       	cpc	r1, r20
    13c0:	05 06       	cpc	r0, r21
    13c2:	08 95       	ret

000013c4 <__fp_round>:
    13c4:	09 2e       	mov	r0, r25
    13c6:	03 94       	inc	r0
    13c8:	00 0c       	add	r0, r0
    13ca:	11 f4       	brne	.+4      	; 0x13d0 <__fp_round+0xc>
    13cc:	88 23       	and	r24, r24
    13ce:	52 f0       	brmi	.+20     	; 0x13e4 <__fp_round+0x20>
    13d0:	bb 0f       	add	r27, r27
    13d2:	40 f4       	brcc	.+16     	; 0x13e4 <__fp_round+0x20>
    13d4:	bf 2b       	or	r27, r31
    13d6:	11 f4       	brne	.+4      	; 0x13dc <__fp_round+0x18>
    13d8:	60 ff       	sbrs	r22, 0
    13da:	04 c0       	rjmp	.+8      	; 0x13e4 <__fp_round+0x20>
    13dc:	6f 5f       	subi	r22, 0xFF	; 255
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	8f 4f       	sbci	r24, 0xFF	; 255
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	08 95       	ret

000013e6 <__fp_split3>:
    13e6:	57 fd       	sbrc	r21, 7
    13e8:	90 58       	subi	r25, 0x80	; 128
    13ea:	44 0f       	add	r20, r20
    13ec:	55 1f       	adc	r21, r21
    13ee:	59 f0       	breq	.+22     	; 0x1406 <__fp_splitA+0x10>
    13f0:	5f 3f       	cpi	r21, 0xFF	; 255
    13f2:	71 f0       	breq	.+28     	; 0x1410 <__fp_splitA+0x1a>
    13f4:	47 95       	ror	r20

000013f6 <__fp_splitA>:
    13f6:	88 0f       	add	r24, r24
    13f8:	97 fb       	bst	r25, 7
    13fa:	99 1f       	adc	r25, r25
    13fc:	61 f0       	breq	.+24     	; 0x1416 <__fp_splitA+0x20>
    13fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1400:	79 f0       	breq	.+30     	; 0x1420 <__fp_splitA+0x2a>
    1402:	87 95       	ror	r24
    1404:	08 95       	ret
    1406:	12 16       	cp	r1, r18
    1408:	13 06       	cpc	r1, r19
    140a:	14 06       	cpc	r1, r20
    140c:	55 1f       	adc	r21, r21
    140e:	f2 cf       	rjmp	.-28     	; 0x13f4 <__fp_split3+0xe>
    1410:	46 95       	lsr	r20
    1412:	f1 df       	rcall	.-30     	; 0x13f6 <__fp_splitA>
    1414:	08 c0       	rjmp	.+16     	; 0x1426 <__fp_splitA+0x30>
    1416:	16 16       	cp	r1, r22
    1418:	17 06       	cpc	r1, r23
    141a:	18 06       	cpc	r1, r24
    141c:	99 1f       	adc	r25, r25
    141e:	f1 cf       	rjmp	.-30     	; 0x1402 <__fp_splitA+0xc>
    1420:	86 95       	lsr	r24
    1422:	71 05       	cpc	r23, r1
    1424:	61 05       	cpc	r22, r1
    1426:	08 94       	sec
    1428:	08 95       	ret

0000142a <__fp_zero>:
    142a:	e8 94       	clt

0000142c <__fp_szero>:
    142c:	bb 27       	eor	r27, r27
    142e:	66 27       	eor	r22, r22
    1430:	77 27       	eor	r23, r23
    1432:	cb 01       	movw	r24, r22
    1434:	97 f9       	bld	r25, 7
    1436:	08 95       	ret

00001438 <__gesf2>:
    1438:	0e 94 80 09 	call	0x1300	; 0x1300 <__fp_cmp>
    143c:	08 f4       	brcc	.+2      	; 0x1440 <__gesf2+0x8>
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	08 95       	ret

00001442 <inverse>:
    1442:	9b 01       	movw	r18, r22
    1444:	ac 01       	movw	r20, r24
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	80 e8       	ldi	r24, 0x80	; 128
    144c:	9f e3       	ldi	r25, 0x3F	; 63
    144e:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__divsf3>

00001452 <__mulsf3>:
    1452:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__mulsf3x>
    1456:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__fp_round>
    145a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__fp_pscA>
    145e:	38 f0       	brcs	.+14     	; 0x146e <__mulsf3+0x1c>
    1460:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__fp_pscB>
    1464:	20 f0       	brcs	.+8      	; 0x146e <__mulsf3+0x1c>
    1466:	95 23       	and	r25, r21
    1468:	11 f0       	breq	.+4      	; 0x146e <__mulsf3+0x1c>
    146a:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__fp_inf>
    146e:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__fp_nan>
    1472:	11 24       	eor	r1, r1
    1474:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_szero>

00001478 <__mulsf3x>:
    1478:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fp_split3>
    147c:	70 f3       	brcs	.-36     	; 0x145a <__mulsf3+0x8>

0000147e <__mulsf3_pse>:
    147e:	95 9f       	mul	r25, r21
    1480:	c1 f3       	breq	.-16     	; 0x1472 <__mulsf3+0x20>
    1482:	95 0f       	add	r25, r21
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	55 1f       	adc	r21, r21
    1488:	62 9f       	mul	r22, r18
    148a:	f0 01       	movw	r30, r0
    148c:	72 9f       	mul	r23, r18
    148e:	bb 27       	eor	r27, r27
    1490:	f0 0d       	add	r31, r0
    1492:	b1 1d       	adc	r27, r1
    1494:	63 9f       	mul	r22, r19
    1496:	aa 27       	eor	r26, r26
    1498:	f0 0d       	add	r31, r0
    149a:	b1 1d       	adc	r27, r1
    149c:	aa 1f       	adc	r26, r26
    149e:	64 9f       	mul	r22, r20
    14a0:	66 27       	eor	r22, r22
    14a2:	b0 0d       	add	r27, r0
    14a4:	a1 1d       	adc	r26, r1
    14a6:	66 1f       	adc	r22, r22
    14a8:	82 9f       	mul	r24, r18
    14aa:	22 27       	eor	r18, r18
    14ac:	b0 0d       	add	r27, r0
    14ae:	a1 1d       	adc	r26, r1
    14b0:	62 1f       	adc	r22, r18
    14b2:	73 9f       	mul	r23, r19
    14b4:	b0 0d       	add	r27, r0
    14b6:	a1 1d       	adc	r26, r1
    14b8:	62 1f       	adc	r22, r18
    14ba:	83 9f       	mul	r24, r19
    14bc:	a0 0d       	add	r26, r0
    14be:	61 1d       	adc	r22, r1
    14c0:	22 1f       	adc	r18, r18
    14c2:	74 9f       	mul	r23, r20
    14c4:	33 27       	eor	r19, r19
    14c6:	a0 0d       	add	r26, r0
    14c8:	61 1d       	adc	r22, r1
    14ca:	23 1f       	adc	r18, r19
    14cc:	84 9f       	mul	r24, r20
    14ce:	60 0d       	add	r22, r0
    14d0:	21 1d       	adc	r18, r1
    14d2:	82 2f       	mov	r24, r18
    14d4:	76 2f       	mov	r23, r22
    14d6:	6a 2f       	mov	r22, r26
    14d8:	11 24       	eor	r1, r1
    14da:	9f 57       	subi	r25, 0x7F	; 127
    14dc:	50 40       	sbci	r21, 0x00	; 0
    14de:	9a f0       	brmi	.+38     	; 0x1506 <__mulsf3_pse+0x88>
    14e0:	f1 f0       	breq	.+60     	; 0x151e <__mulsf3_pse+0xa0>
    14e2:	88 23       	and	r24, r24
    14e4:	4a f0       	brmi	.+18     	; 0x14f8 <__mulsf3_pse+0x7a>
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	bb 1f       	adc	r27, r27
    14ec:	66 1f       	adc	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	88 1f       	adc	r24, r24
    14f2:	91 50       	subi	r25, 0x01	; 1
    14f4:	50 40       	sbci	r21, 0x00	; 0
    14f6:	a9 f7       	brne	.-22     	; 0x14e2 <__mulsf3_pse+0x64>
    14f8:	9e 3f       	cpi	r25, 0xFE	; 254
    14fa:	51 05       	cpc	r21, r1
    14fc:	80 f0       	brcs	.+32     	; 0x151e <__mulsf3_pse+0xa0>
    14fe:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__fp_inf>
    1502:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_szero>
    1506:	5f 3f       	cpi	r21, 0xFF	; 255
    1508:	e4 f3       	brlt	.-8      	; 0x1502 <__mulsf3_pse+0x84>
    150a:	98 3e       	cpi	r25, 0xE8	; 232
    150c:	d4 f3       	brlt	.-12     	; 0x1502 <__mulsf3_pse+0x84>
    150e:	86 95       	lsr	r24
    1510:	77 95       	ror	r23
    1512:	67 95       	ror	r22
    1514:	b7 95       	ror	r27
    1516:	f7 95       	ror	r31
    1518:	e7 95       	ror	r30
    151a:	9f 5f       	subi	r25, 0xFF	; 255
    151c:	c1 f7       	brne	.-16     	; 0x150e <__mulsf3_pse+0x90>
    151e:	fe 2b       	or	r31, r30
    1520:	88 0f       	add	r24, r24
    1522:	91 1d       	adc	r25, r1
    1524:	96 95       	lsr	r25
    1526:	87 95       	ror	r24
    1528:	97 f9       	bld	r25, 7
    152a:	08 95       	ret

0000152c <square>:
    152c:	9b 01       	movw	r18, r22
    152e:	ac 01       	movw	r20, r24
    1530:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__mulsf3>

00001534 <__divmodhi4>:
    1534:	97 fb       	bst	r25, 7
    1536:	07 2e       	mov	r0, r23
    1538:	16 f4       	brtc	.+4      	; 0x153e <__divmodhi4+0xa>
    153a:	00 94       	com	r0
    153c:	07 d0       	rcall	.+14     	; 0x154c <__divmodhi4_neg1>
    153e:	77 fd       	sbrc	r23, 7
    1540:	09 d0       	rcall	.+18     	; 0x1554 <__divmodhi4_neg2>
    1542:	0e 94 ae 0a 	call	0x155c	; 0x155c <__udivmodhi4>
    1546:	07 fc       	sbrc	r0, 7
    1548:	05 d0       	rcall	.+10     	; 0x1554 <__divmodhi4_neg2>
    154a:	3e f4       	brtc	.+14     	; 0x155a <__divmodhi4_exit>

0000154c <__divmodhi4_neg1>:
    154c:	90 95       	com	r25
    154e:	81 95       	neg	r24
    1550:	9f 4f       	sbci	r25, 0xFF	; 255
    1552:	08 95       	ret

00001554 <__divmodhi4_neg2>:
    1554:	70 95       	com	r23
    1556:	61 95       	neg	r22
    1558:	7f 4f       	sbci	r23, 0xFF	; 255

0000155a <__divmodhi4_exit>:
    155a:	08 95       	ret

0000155c <__udivmodhi4>:
    155c:	aa 1b       	sub	r26, r26
    155e:	bb 1b       	sub	r27, r27
    1560:	51 e1       	ldi	r21, 0x11	; 17
    1562:	07 c0       	rjmp	.+14     	; 0x1572 <__udivmodhi4_ep>

00001564 <__udivmodhi4_loop>:
    1564:	aa 1f       	adc	r26, r26
    1566:	bb 1f       	adc	r27, r27
    1568:	a6 17       	cp	r26, r22
    156a:	b7 07       	cpc	r27, r23
    156c:	10 f0       	brcs	.+4      	; 0x1572 <__udivmodhi4_ep>
    156e:	a6 1b       	sub	r26, r22
    1570:	b7 0b       	sbc	r27, r23

00001572 <__udivmodhi4_ep>:
    1572:	88 1f       	adc	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	5a 95       	dec	r21
    1578:	a9 f7       	brne	.-22     	; 0x1564 <__udivmodhi4_loop>
    157a:	80 95       	com	r24
    157c:	90 95       	com	r25
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	08 95       	ret

00001584 <strcmp>:
    1584:	fb 01       	movw	r30, r22
    1586:	dc 01       	movw	r26, r24
    1588:	8d 91       	ld	r24, X+
    158a:	01 90       	ld	r0, Z+
    158c:	80 19       	sub	r24, r0
    158e:	01 10       	cpse	r0, r1
    1590:	d9 f3       	breq	.-10     	; 0x1588 <strcmp+0x4>
    1592:	99 0b       	sbc	r25, r25
    1594:	08 95       	ret

00001596 <_exit>:
    1596:	f8 94       	cli

00001598 <__stop_program>:
    1598:	ff cf       	rjmp	.-2      	; 0x1598 <__stop_program>
