
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  0000052e  000005a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001b84  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000119a  00000000  00000000  00002164  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000032fe  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003310  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000780  00000000  00000000  0000334c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00003acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  000041e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00004201  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e2       	ldi	r30, 0x2E	; 46
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 33       	cpi	r26, 0x3C	; 60
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 43 02 	call	0x486	; 0x486 <main>
  b6:	0c 94 95 02 	jmp	0x52a	; 0x52a <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <USART1_Init>:
#include "uart.h"


void USART1_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
  be:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
  c2:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
  c6:	88 e1       	ldi	r24, 0x18	; 24
  c8:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (3<<UCSZ10);
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	81 ee       	ldi	r24, 0xE1	; 225
  d6:	94 e0       	ldi	r25, 0x04	; 4
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <USART1_Init+0x1a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <USART1_Init+0x24>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <USART1_Transmit>:
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
  e6:	90 91 9b 00 	lds	r25, 0x009B
  ea:	95 ff       	sbrs	r25, 5
  ec:	fc cf       	rjmp	.-8      	; 0xe6 <USART1_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
  ee:	80 93 9c 00 	sts	0x009C, r24
  f2:	08 95       	ret

000000f4 <USART1_send_string>:
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
  f4:	fc 01       	movw	r30, r24
  f6:	20 81       	ld	r18, Z
  f8:	22 23       	and	r18, r18
  fa:	51 f0       	breq	.+20     	; 0x110 <USART1_send_string+0x1c>
  fc:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
  fe:	90 91 9b 00 	lds	r25, 0x009B
 102:	95 ff       	sbrs	r25, 5
 104:	fc cf       	rjmp	.-8      	; 0xfe <USART1_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 106:	20 93 9c 00 	sts	0x009C, r18
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 10a:	21 91       	ld	r18, Z+
 10c:	21 11       	cpse	r18, r1
 10e:	f7 cf       	rjmp	.-18     	; 0xfe <USART1_send_string+0xa>
 110:	08 95       	ret

00000112 <USART1_Receive>:
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
 112:	80 91 9b 00 	lds	r24, 0x009B
 116:	87 ff       	sbrs	r24, 7
 118:	fc cf       	rjmp	.-8      	; 0x112 <USART1_Receive>
    return UDR1;
 11a:	80 91 9c 00 	lds	r24, 0x009C
}
 11e:	08 95       	ret

00000120 <USART1_Receive_String>:

void USART1_Receive_String(unsigned char *str){
 120:	fc 01       	movw	r30, r24
 122:	dc 01       	movw	r26, r24
    int i = 0;
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
 128:	82 e3       	ldi	r24, 0x32	; 50
            str[1] = 50;
            str[2] = 50;
            str[3] = END_STRING;
 12a:	4e e7       	ldi	r20, 0x7E	; 126
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
 12c:	90 91 9b 00 	lds	r25, 0x009B
 130:	97 ff       	sbrs	r25, 7
 132:	fc cf       	rjmp	.-8      	; 0x12c <USART1_Receive_String+0xc>
    return UDR1;
 134:	90 91 9c 00 	lds	r25, 0x009C

void USART1_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 138:	9e 37       	cpi	r25, 0x7E	; 126
 13a:	61 f0       	breq	.+24     	; 0x154 <USART1_Receive_String+0x34>
        if (c == 255 || i > MAX_STRING_SIZE - 1){
 13c:	25 30       	cpi	r18, 0x05	; 5
 13e:	31 05       	cpc	r19, r1
 140:	2c f0       	brlt	.+10     	; 0x14c <USART1_Receive_String+0x2c>
            str[0] = 50;
 142:	80 83       	st	Z, r24
            str[1] = 50;
 144:	81 83       	std	Z+1, r24	; 0x01
            str[2] = 50;
 146:	82 83       	std	Z+2, r24	; 0x02
            str[3] = END_STRING;
 148:	43 83       	std	Z+3, r20	; 0x03
            str[4] = '\0';
 14a:	14 82       	std	Z+4, r1	; 0x04
        }
        str[i] = c;
 14c:	9d 93       	st	X+, r25
        ++i;
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	ec cf       	rjmp	.-40     	; 0x12c <USART1_Receive_String+0xc>
    }
}
 154:	08 95       	ret

00000156 <USART1_flush>:

void USART1_flush(){
 156:	ee e2       	ldi	r30, 0x2E	; 46
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	96 e4       	ldi	r25, 0x46	; 70
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 15c:	80 91 9b 00 	lds	r24, 0x009B
 160:	85 ff       	sbrs	r24, 5
 162:	fc cf       	rjmp	.-8      	; 0x15c <USART1_flush+0x6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 164:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 168:	91 91       	ld	r25, Z+
 16a:	91 11       	cpse	r25, r1
 16c:	f7 cf       	rjmp	.-18     	; 0x15c <USART1_flush+0x6>
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
 16e:	80 91 9b 00 	lds	r24, 0x009B
 172:	87 ff       	sbrs	r24, 7
 174:	0c c0       	rjmp	.+24     	; 0x18e <USART1_flush+0x38>
        dummy = UDR1;
 176:	90 91 9c 00 	lds	r25, 0x009C
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 17a:	80 91 9b 00 	lds	r24, 0x009B
 17e:	85 ff       	sbrs	r24, 5
 180:	fc cf       	rjmp	.-8      	; 0x17a <USART1_flush+0x24>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 182:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
 186:	80 91 9b 00 	lds	r24, 0x009B
 18a:	87 fd       	sbrc	r24, 7
 18c:	f4 cf       	rjmp	.-24     	; 0x176 <USART1_flush+0x20>
 18e:	08 95       	ret

00000190 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
 190:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
 194:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 196:	88 e1       	ldi	r24, 0x18	; 24
 198:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */ 
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
 19a:	8e e0       	ldi	r24, 0x0E	; 14
 19c:	80 93 95 00 	sts	0x0095, r24
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	81 ee       	ldi	r24, 0xE1	; 225
 1a4:	94 e0       	ldi	r25, 0x04	; 4
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <USART0_Init+0x16>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <USART0_Init+0x20>
 1b0:	00 00       	nop
 1b2:	08 95       	ret

000001b4 <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
 1b4:	5d 9b       	sbis	0x0b, 5	; 11
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
 1b8:	8c b9       	out	0x0c, r24	; 12
 1ba:	08 95       	ret

000001bc <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
 1bc:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
 1be:	90 81       	ld	r25, Z
 1c0:	99 23       	and	r25, r25
 1c2:	39 f0       	breq	.+14     	; 0x1d2 <USART0_send_string+0x16>
 1c4:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
 1c6:	5d 9b       	sbis	0x0b, 5	; 11
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
 1ca:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 1cc:	91 91       	ld	r25, Z+
 1ce:	91 11       	cpse	r25, r1
 1d0:	fa cf       	rjmp	.-12     	; 0x1c6 <USART0_send_string+0xa>
 1d2:	08 95       	ret

000001d4 <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
 1d4:	80 e8       	ldi	r24, 0x80	; 128
 1d6:	9d e8       	ldi	r25, 0x8D	; 141
 1d8:	ab e5       	ldi	r26, 0x5B	; 91
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <USART0_Receive+0x12>
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	a1 09       	sbc	r26, r1
 1e2:	b1 09       	sbc	r27, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
 1e4:	21 f0       	breq	.+8      	; 0x1ee <USART0_Receive+0x1a>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
 1e6:	5f 9b       	sbis	0x0b, 7	; 11
 1e8:	fa cf       	rjmp	.-12     	; 0x1de <USART0_Receive+0xa>
            /* Get and return received data from buffer */ 
            return UDR0;
 1ea:	8c b1       	in	r24, 0x0c	; 12
 1ec:	08 95       	ret
        }
    } while (--timeout);
    return 255;
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
    /********
    * This is the original
    ************/
    //while (!(UCSR0A & (1<<RXC0)));
    //return UDR0;
}
 1f0:	08 95       	ret

000001f2 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
 1f2:	dc 01       	movw	r26, r24
 1f4:	fc 01       	movw	r30, r24
 1f6:	9c 01       	movw	r18, r24
 1f8:	2b 5f       	subi	r18, 0xFB	; 251
 1fa:	3f 4f       	sbci	r19, 0xFF	; 255
 1fc:	40 e8       	ldi	r20, 0x80	; 128
 1fe:	5d e8       	ldi	r21, 0x8D	; 141
 200:	6b e5       	ldi	r22, 0x5B	; 91
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	05 c0       	rjmp	.+10     	; 0x210 <USART0_Receive_String+0x1e>
 206:	41 50       	subi	r20, 0x01	; 1
 208:	51 09       	sbc	r21, r1
 20a:	61 09       	sbc	r22, r1
 20c:	71 09       	sbc	r23, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
 20e:	61 f0       	breq	.+24     	; 0x228 <USART0_Receive_String+0x36>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
 210:	5f 9b       	sbis	0x0b, 7	; 11
 212:	f9 cf       	rjmp	.-14     	; 0x206 <USART0_Receive_String+0x14>
            /* Get and return received data from buffer */ 
            return UDR0;
 214:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 216:	9e 37       	cpi	r25, 0x7E	; 126
 218:	b1 f0       	breq	.+44     	; 0x246 <USART0_Receive_String+0x54>
        if (c == 255 || i > MAX_STRING_SIZE - 1){
 21a:	9f 3f       	cpi	r25, 0xFF	; 255
 21c:	29 f0       	breq	.+10     	; 0x228 <USART0_Receive_String+0x36>
 21e:	e2 17       	cp	r30, r18
 220:	f3 07       	cpc	r31, r19
 222:	11 f0       	breq	.+4      	; 0x228 <USART0_Receive_String+0x36>
            str[2] = 50;
            str[3] = END_STRING;
            str[4] = '\0';
            return;
        }
        str[i] = c;
 224:	91 93       	st	Z+, r25
 226:	ea cf       	rjmp	.-44     	; 0x1fc <USART0_Receive_String+0xa>
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
 228:	82 e3       	ldi	r24, 0x32	; 50
 22a:	8c 93       	st	X, r24
            str[1] = 50;
 22c:	11 96       	adiw	r26, 0x01	; 1
 22e:	8c 93       	st	X, r24
 230:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	8c 93       	st	X, r24
 236:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
 238:	8e e7       	ldi	r24, 0x7E	; 126
 23a:	13 96       	adiw	r26, 0x03	; 3
 23c:	8c 93       	st	X, r24
 23e:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
 240:	14 96       	adiw	r26, 0x04	; 4
 242:	1c 92       	st	X, r1
            return;
 244:	08 95       	ret
 246:	08 95       	ret

00000248 <USART0_flush>:
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
 248:	5f 9b       	sbis	0x0b, 7	; 11
 24a:	03 c0       	rjmp	.+6      	; 0x252 <USART0_flush+0xa>
        dummy = UDR0;
 24c:	8c b1       	in	r24, 0x0c	; 12
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
 24e:	5f 99       	sbic	0x0b, 7	; 11
 250:	fd cf       	rjmp	.-6      	; 0x24c <USART0_flush+0x4>
 252:	08 95       	ret

00000254 <strobe_lcd>:
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 254:	e2 e6       	ldi	r30, 0x62	; 98
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	88 60       	ori	r24, 0x08	; 8
 25c:	80 83       	st	Z, r24
    PORTF &= ~0x08;
 25e:	80 81       	ld	r24, Z
 260:	87 7f       	andi	r24, 0xF7	; 247
 262:	80 83       	st	Z, r24
 264:	08 95       	ret

00000266 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 266:	77 9b       	sbis	0x0e, 7	; 14
 268:	fe cf       	rjmp	.-4      	; 0x266 <clear_display>
    SPDR = 0x00;    //command, not data
 26a:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 26c:	77 9b       	sbis	0x0e, 7	; 14
 26e:	fe cf       	rjmp	.-4      	; 0x26c <clear_display+0x6>
    SPDR = 0x01;    //clear display command
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 274:	77 9b       	sbis	0x0e, 7	; 14
 276:	fe cf       	rjmp	.-4      	; 0x274 <clear_display+0xe>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 278:	80 91 62 00 	lds	r24, 0x0062
 27c:	88 60       	ori	r24, 0x08	; 8
 27e:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 282:	80 91 62 00 	lds	r24, 0x0062
 286:	87 7f       	andi	r24, 0xF7	; 247
 288:	80 93 62 00 	sts	0x0062, r24
 28c:	8f e9       	ldi	r24, 0x9F	; 159
 28e:	98 e2       	ldi	r25, 0x28	; 40
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <clear_display+0x2a>
 294:	00 c0       	rjmp	.+0      	; 0x296 <clear_display+0x30>
 296:	00 00       	nop
 298:	08 95       	ret

0000029a <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 29a:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 29c:	77 9b       	sbis	0x0e, 7	; 14
 29e:	fe cf       	rjmp	.-4      	; 0x29c <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
 2a0:	80 ec       	ldi	r24, 0xC0	; 192
 2a2:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2a4:	77 9b       	sbis	0x0e, 7	; 14
 2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <home_line2+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 2a8:	80 91 62 00 	lds	r24, 0x0062
 2ac:	88 60       	ori	r24, 0x08	; 8
 2ae:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 2b2:	80 91 62 00 	lds	r24, 0x0062
 2b6:	87 7f       	andi	r24, 0xF7	; 247
 2b8:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2bc:	85 ec       	ldi	r24, 0xC5	; 197
 2be:	8a 95       	dec	r24
 2c0:	f1 f7       	brne	.-4      	; 0x2be <home_line2+0x24>
 2c2:	00 00       	nop
 2c4:	08 95       	ret

000002c6 <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2ca:	77 9b       	sbis	0x0e, 7	; 14
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
 2ce:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2d0:	77 9b       	sbis	0x0e, 7	; 14
 2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <char2lcd+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 2d4:	80 91 62 00 	lds	r24, 0x0062
 2d8:	88 60       	ori	r24, 0x08	; 8
 2da:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 2de:	80 91 62 00 	lds	r24, 0x0062
 2e2:	87 7f       	andi	r24, 0xF7	; 247
 2e4:	80 93 62 00 	sts	0x0062, r24
 2e8:	85 ec       	ldi	r24, 0xC5	; 197
 2ea:	8a 95       	dec	r24
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <char2lcd+0x24>
 2ee:	00 00       	nop
 2f0:	08 95       	ret

000002f2 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	fc 01       	movw	r30, r24
 2f8:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
 2fe:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 300:	77 9b       	sbis	0x0e, 7	; 14
 302:	fe cf       	rjmp	.-4      	; 0x300 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
 304:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 306:	77 9b       	sbis	0x0e, 7	; 14
 308:	fe cf       	rjmp	.-4      	; 0x306 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
 30a:	8d 91       	ld	r24, X+
 30c:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 30e:	77 9b       	sbis	0x0e, 7	; 14
 310:	fe cf       	rjmp	.-4      	; 0x30e <string2lcd+0x1c>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 312:	90 91 62 00 	lds	r25, 0x0062
 316:	98 60       	ori	r25, 0x08	; 8
 318:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
 31c:	90 91 62 00 	lds	r25, 0x0062
 320:	97 7f       	andi	r25, 0xF7	; 247
 322:	90 93 62 00 	sts	0x0062, r25
 326:	85 ec       	ldi	r24, 0xC5	; 197
 328:	8a 95       	dec	r24
 32a:	f1 f7       	brne	.-4      	; 0x328 <string2lcd+0x36>
 32c:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
 32e:	4f 5f       	subi	r20, 0xFF	; 255
 330:	5f 4f       	sbci	r21, 0xFF	; 255
 332:	ef 01       	movw	r28, r30
 334:	09 90       	ld	r0, Y+
 336:	00 20       	and	r0, r0
 338:	e9 f7       	brne	.-6      	; 0x334 <string2lcd+0x42>
 33a:	9e 01       	movw	r18, r28
 33c:	2e 1b       	sub	r18, r30
 33e:	3f 0b       	sbc	r19, r31
 340:	22 50       	subi	r18, 0x02	; 2
 342:	31 09       	sbc	r19, r1
 344:	24 17       	cp	r18, r20
 346:	35 07       	cpc	r19, r21
 348:	d8 f6       	brcc	.-74     	; 0x300 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 350:	e1 e6       	ldi	r30, 0x61	; 97
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	88 60       	ori	r24, 0x08	; 8
 358:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
 35a:	88 b3       	in	r24, 0x18	; 24
 35c:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 35e:	87 b3       	in	r24, 0x17	; 23
 360:	87 60       	ori	r24, 0x07	; 7
 362:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 364:	80 e5       	ldi	r24, 0x50	; 80
 366:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	8e b9       	out	0x0e, r24	; 14
 36c:	08 95       	ret

0000036e <lcd_init>:
 36e:	8f e5       	ldi	r24, 0x5F	; 95
 370:	9a ee       	ldi	r25, 0xEA	; 234
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <lcd_init+0x4>
 376:	00 c0       	rjmp	.+0      	; 0x378 <lcd_init+0xa>
 378:	00 00       	nop
 37a:	23 e0       	ldi	r18, 0x03	; 3
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	90 e3       	ldi	r25, 0x30	; 48
 380:	1f b8       	out	0x0f, r1	; 15
 382:	77 9b       	sbis	0x0e, 7	; 14
 384:	fe cf       	rjmp	.-4      	; 0x382 <lcd_init+0x14>
 386:	9f b9       	out	0x0f, r25	; 15
 388:	77 9b       	sbis	0x0e, 7	; 14
 38a:	fe cf       	rjmp	.-4      	; 0x388 <lcd_init+0x1a>
 38c:	80 91 62 00 	lds	r24, 0x0062
 390:	88 60       	ori	r24, 0x08	; 8
 392:	80 93 62 00 	sts	0x0062, r24
 396:	80 91 62 00 	lds	r24, 0x0062
 39a:	87 7f       	andi	r24, 0xF7	; 247
 39c:	80 93 62 00 	sts	0x0062, r24
 3a0:	85 ec       	ldi	r24, 0xC5	; 197
 3a2:	8a 95       	dec	r24
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_init+0x34>
 3a6:	00 00       	nop
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	31 09       	sbc	r19, r1
 3ac:	49 f7       	brne	.-46     	; 0x380 <lcd_init+0x12>
 3ae:	1f b8       	out	0x0f, r1	; 15
 3b0:	77 9b       	sbis	0x0e, 7	; 14
 3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <lcd_init+0x42>
 3b4:	88 e3       	ldi	r24, 0x38	; 56
 3b6:	8f b9       	out	0x0f, r24	; 15
 3b8:	77 9b       	sbis	0x0e, 7	; 14
 3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <lcd_init+0x4a>
 3bc:	80 91 62 00 	lds	r24, 0x0062
 3c0:	88 60       	ori	r24, 0x08	; 8
 3c2:	80 93 62 00 	sts	0x0062, r24
 3c6:	80 91 62 00 	lds	r24, 0x0062
 3ca:	87 7f       	andi	r24, 0xF7	; 247
 3cc:	80 93 62 00 	sts	0x0062, r24
 3d0:	95 ec       	ldi	r25, 0xC5	; 197
 3d2:	9a 95       	dec	r25
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <lcd_init+0x64>
 3d6:	00 00       	nop
 3d8:	1f b8       	out	0x0f, r1	; 15
 3da:	77 9b       	sbis	0x0e, 7	; 14
 3dc:	fe cf       	rjmp	.-4      	; 0x3da <lcd_init+0x6c>
 3de:	88 e0       	ldi	r24, 0x08	; 8
 3e0:	8f b9       	out	0x0f, r24	; 15
 3e2:	77 9b       	sbis	0x0e, 7	; 14
 3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <lcd_init+0x74>
 3e6:	80 91 62 00 	lds	r24, 0x0062
 3ea:	88 60       	ori	r24, 0x08	; 8
 3ec:	80 93 62 00 	sts	0x0062, r24
 3f0:	80 91 62 00 	lds	r24, 0x0062
 3f4:	87 7f       	andi	r24, 0xF7	; 247
 3f6:	80 93 62 00 	sts	0x0062, r24
 3fa:	85 ec       	ldi	r24, 0xC5	; 197
 3fc:	8a 95       	dec	r24
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <lcd_init+0x8e>
 400:	00 00       	nop
 402:	1f b8       	out	0x0f, r1	; 15
 404:	77 9b       	sbis	0x0e, 7	; 14
 406:	fe cf       	rjmp	.-4      	; 0x404 <lcd_init+0x96>
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	8f b9       	out	0x0f, r24	; 15
 40c:	77 9b       	sbis	0x0e, 7	; 14
 40e:	fe cf       	rjmp	.-4      	; 0x40c <lcd_init+0x9e>
 410:	80 91 62 00 	lds	r24, 0x0062
 414:	88 60       	ori	r24, 0x08	; 8
 416:	80 93 62 00 	sts	0x0062, r24
 41a:	80 91 62 00 	lds	r24, 0x0062
 41e:	87 7f       	andi	r24, 0xF7	; 247
 420:	80 93 62 00 	sts	0x0062, r24
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	98 e1       	ldi	r25, 0x18	; 24
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <lcd_init+0xba>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <lcd_init+0xc0>
 42e:	00 00       	nop
 430:	1f b8       	out	0x0f, r1	; 15
 432:	77 9b       	sbis	0x0e, 7	; 14
 434:	fe cf       	rjmp	.-4      	; 0x432 <lcd_init+0xc4>
 436:	86 e0       	ldi	r24, 0x06	; 6
 438:	8f b9       	out	0x0f, r24	; 15
 43a:	77 9b       	sbis	0x0e, 7	; 14
 43c:	fe cf       	rjmp	.-4      	; 0x43a <lcd_init+0xcc>
 43e:	80 91 62 00 	lds	r24, 0x0062
 442:	88 60       	ori	r24, 0x08	; 8
 444:	80 93 62 00 	sts	0x0062, r24
 448:	80 91 62 00 	lds	r24, 0x0062
 44c:	87 7f       	andi	r24, 0xF7	; 247
 44e:	80 93 62 00 	sts	0x0062, r24
 452:	95 ec       	ldi	r25, 0xC5	; 197
 454:	9a 95       	dec	r25
 456:	f1 f7       	brne	.-4      	; 0x454 <lcd_init+0xe6>
 458:	00 00       	nop
 45a:	1f b8       	out	0x0f, r1	; 15
 45c:	77 9b       	sbis	0x0e, 7	; 14
 45e:	fe cf       	rjmp	.-4      	; 0x45c <lcd_init+0xee>
 460:	8e e0       	ldi	r24, 0x0E	; 14
 462:	8f b9       	out	0x0f, r24	; 15
 464:	77 9b       	sbis	0x0e, 7	; 14
 466:	fe cf       	rjmp	.-4      	; 0x464 <lcd_init+0xf6>
 468:	80 91 62 00 	lds	r24, 0x0062
 46c:	88 60       	ori	r24, 0x08	; 8
 46e:	80 93 62 00 	sts	0x0062, r24
 472:	80 91 62 00 	lds	r24, 0x0062
 476:	87 7f       	andi	r24, 0xF7	; 247
 478:	80 93 62 00 	sts	0x0062, r24
 47c:	85 ec       	ldi	r24, 0xC5	; 197
 47e:	8a 95       	dec	r24
 480:	f1 f7       	brne	.-4      	; 0x47e <lcd_init+0x110>
 482:	00 00       	nop
 484:	08 95       	ret

00000486 <main>:





int main(){
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	cd b7       	in	r28, 0x3d	; 61
 48c:	de b7       	in	r29, 0x3e	; 62
 48e:	2a 97       	sbiw	r28, 0x0a	; 10
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
    
    USART0_Init(MYUBRR);
 49a:	87 e6       	ldi	r24, 0x67	; 103
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 c8 00 	call	0x190	; 0x190 <USART0_Init>
    USART1_Init(MYUBRR);
 4a2:	87 e6       	ldi	r24, 0x67	; 103
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 5f 00 	call	0xbe	; 0xbe <USART1_Init>
    USART1_send_string((unsigned char *)"Bluetooth Initialized\r");
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART1_send_string>

    unsigned char data[MAX_STRING_SIZE];
    int i;
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        data[i] = '\0';
 4b2:	1e 82       	std	Y+6, r1	; 0x06
 4b4:	1f 82       	std	Y+7, r1	; 0x07
 4b6:	18 86       	std	Y+8, r1	; 0x08
 4b8:	1a 86       	std	Y+10, r1	; 0x0a
    }
    data[MAX_STRING_SIZE - 2] = '~';
 4ba:	8e e7       	ldi	r24, 0x7E	; 126
 4bc:	89 87       	std	Y+9, r24	; 0x09

    unsigned char rec_data[MAX_STRING_SIZE];
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        rec_data[i] = '\0';
 4be:	19 82       	std	Y+1, r1	; 0x01
 4c0:	1a 82       	std	Y+2, r1	; 0x02
 4c2:	1b 82       	std	Y+3, r1	; 0x03
 4c4:	1d 82       	std	Y+5, r1	; 0x05
    }
    rec_data[MAX_STRING_SIZE - 2] = '~';
 4c6:	8c 83       	std	Y+4, r24	; 0x04

    spi_init();
 4c8:	0e 94 a8 01 	call	0x350	; 0x350 <spi_init>
    lcd_init();
 4cc:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_init>

    clear_display();
 4d0:	0e 94 33 01 	call	0x266	; 0x266 <clear_display>
    string2lcd((unsigned char *)"Ready");
 4d4:	87 e1       	ldi	r24, 0x17	; 23
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <string2lcd>
    while (1){

        USART1_Receive_String(data);
 4dc:	ce 01       	movw	r24, r28
 4de:	06 96       	adiw	r24, 0x06	; 6
 4e0:	0e 94 90 00 	call	0x120	; 0x120 <USART1_Receive_String>
        USART1_send_string((unsigned char *)"Data received: ");
 4e4:	8d e1       	ldi	r24, 0x1D	; 29
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART1_send_string>
        USART1_send_string(data);
 4ec:	ce 01       	movw	r24, r28
 4ee:	06 96       	adiw	r24, 0x06	; 6
 4f0:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART1_send_string>
        USART1_send_string((unsigned char *)"\r");
 4f4:	85 e1       	ldi	r24, 0x15	; 21
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART1_send_string>
        USART0_send_string(data);
 4fc:	ce 01       	movw	r24, r28
 4fe:	06 96       	adiw	r24, 0x06	; 6
 500:	0e 94 de 00 	call	0x1bc	; 0x1bc <USART0_send_string>
        USART0_Receive_String(rec_data);
 504:	ce 01       	movw	r24, r28
 506:	01 96       	adiw	r24, 0x01	; 1
 508:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <USART0_Receive_String>
        USART1_send_string(rec_data);
 50c:	ce 01       	movw	r24, r28
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART1_send_string>
        USART1_send_string((unsigned char *)"\r");
 514:	85 e1       	ldi	r24, 0x15	; 21
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART1_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51c:	8f e3       	ldi	r24, 0x3F	; 63
 51e:	9c e9       	ldi	r25, 0x9C	; 156
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <main+0x9a>
 524:	00 c0       	rjmp	.+0      	; 0x526 <main+0xa0>
 526:	00 00       	nop
 528:	d9 cf       	rjmp	.-78     	; 0x4dc <main+0x56>

0000052a <_exit>:
 52a:	f8 94       	cli

0000052c <__stop_program>:
 52c:	ff cf       	rjmp	.-2      	; 0x52c <__stop_program>
