
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000750  000007e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  0080016c  0080016c  00000850  2**0
                  ALLOC
  3 .stab         00001e30  00000000  00000000  00000850  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000120f  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000388f  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000038a0  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  000038dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00004774  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00004791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_30>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e5       	ldi	r30, 0x50	; 80
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 36       	cpi	r26, 0x6C	; 108
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e6       	ldi	r26, 0x6C	; 108
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 3d       	cpi	r26, 0xD0	; 208
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 bc 02 	call	0x578	; 0x578 <main>
  c6:	0c 94 a6 03 	jmp	0x74c	; 0x74c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <enable_rx0_int>:




void enable_rx0_int(){
    UCSR0B |= (1 << RXCIE0);
  ce:	57 9a       	sbi	0x0a, 7	; 10
  d0:	08 95       	ret

000000d2 <enable_rx1_int>:
}
void enable_rx1_int(){
    UCSR1B |= (1 << RXCIE1);
  d2:	ea e9       	ldi	r30, 0x9A	; 154
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <__vector_18>:
}


ISR(USART0_RX_vect){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	0b b6       	in	r0, 0x3b	; 59
  ea:	0f 92       	push	r0
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	4f 93       	push	r20
  f2:	5f 93       	push	r21
  f4:	6f 93       	push	r22
  f6:	7f 93       	push	r23
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
    unsigned char c;
    USART1_send_string((unsigned char *)"Drone Data: ");
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART1_send_string>
    USART0_Receive_String(buffer);
 10c:	8c e6       	ldi	r24, 0x6C	; 108
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 72 01 	call	0x2e4	; 0x2e4 <USART0_Receive_String>
    USART1_send_string(buffer);
 114:	8c e6       	ldi	r24, 0x6C	; 108
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART1_send_string>
    USART1_send_string((unsigned char *)"\r");   
 11c:	8d e2       	ldi	r24, 0x2D	; 45
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART1_send_string>
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	bf 91       	pop	r27
 12a:	af 91       	pop	r26
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	7f 91       	pop	r23
 132:	6f 91       	pop	r22
 134:	5f 91       	pop	r21
 136:	4f 91       	pop	r20
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0b be       	out	0x3b, r0	; 59
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_30>:
ISR(USART1_RX_vect){
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	0b b6       	in	r0, 0x3b	; 59
 156:	0f 92       	push	r0
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
    unsigned char c;
    USART1_send_string((unsigned char *)"GUI Data: "); 
 170:	8d e0       	ldi	r24, 0x0D	; 13
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART1_send_string>
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0b be       	out	0x3b, r0	; 59
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <USART1_Init>:
#include "uart.h"


void USART1_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
 19e:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
 1a2:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 1a6:	88 e1       	ldi	r24, 0x18	; 24
 1a8:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (3<<UCSZ10);
 1ac:	86 e0       	ldi	r24, 0x06	; 6
 1ae:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	81 ee       	ldi	r24, 0xE1	; 225
 1b6:	94 e0       	ldi	r25, 0x04	; 4
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <USART1_Init+0x1a>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <USART1_Init+0x24>
 1c2:	00 00       	nop
 1c4:	08 95       	ret

000001c6 <USART1_Transmit>:
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 1c6:	90 91 9b 00 	lds	r25, 0x009B
 1ca:	95 ff       	sbrs	r25, 5
 1cc:	fc cf       	rjmp	.-8      	; 0x1c6 <USART1_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 1ce:	80 93 9c 00 	sts	0x009C, r24
 1d2:	08 95       	ret

000001d4 <USART1_send_string>:
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 81       	ld	r18, Z
 1d8:	22 23       	and	r18, r18
 1da:	51 f0       	breq	.+20     	; 0x1f0 <USART1_send_string+0x1c>
 1dc:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 1de:	90 91 9b 00 	lds	r25, 0x009B
 1e2:	95 ff       	sbrs	r25, 5
 1e4:	fc cf       	rjmp	.-8      	; 0x1de <USART1_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 1e6:	20 93 9c 00 	sts	0x009C, r18
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 1ea:	21 91       	ld	r18, Z+
 1ec:	21 11       	cpse	r18, r1
 1ee:	f7 cf       	rjmp	.-18     	; 0x1de <USART1_send_string+0xa>
 1f0:	08 95       	ret

000001f2 <USART1_Receive>:
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
 1f2:	80 91 9b 00 	lds	r24, 0x009B
 1f6:	87 ff       	sbrs	r24, 7
 1f8:	fc cf       	rjmp	.-8      	; 0x1f2 <USART1_Receive>
    return UDR1;
 1fa:	80 91 9c 00 	lds	r24, 0x009C
}
 1fe:	08 95       	ret

00000200 <USART1_Receive_String>:

void USART1_Receive_String(unsigned char *str){
 200:	dc 01       	movw	r26, r24
 202:	fc 01       	movw	r30, r24
 204:	9c 01       	movw	r18, r24
 206:	2b 5f       	subi	r18, 0xFB	; 251
 208:	3f 4f       	sbci	r19, 0xFF	; 255
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
 20a:	90 91 9b 00 	lds	r25, 0x009B
 20e:	97 ff       	sbrs	r25, 7
 210:	fc cf       	rjmp	.-8      	; 0x20a <USART1_Receive_String+0xa>
    return UDR1;
 212:	90 91 9c 00 	lds	r25, 0x009C

void USART1_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 216:	9e 37       	cpi	r25, 0x7E	; 126
 218:	29 f0       	breq	.+10     	; 0x224 <USART1_Receive_String+0x24>
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
 21a:	e2 17       	cp	r30, r18
 21c:	f3 07       	cpc	r31, r19
 21e:	19 f0       	breq	.+6      	; 0x226 <USART1_Receive_String+0x26>
            str[2] = 75;
            str[3] = END_STRING;
            str[4] = '\0';
            break;
        }
        str[i] = c;
 220:	91 93       	st	Z+, r25
 222:	f3 cf       	rjmp	.-26     	; 0x20a <USART1_Receive_String+0xa>
 224:	08 95       	ret
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
 226:	82 e3       	ldi	r24, 0x32	; 50
 228:	8c 93       	st	X, r24
            str[1] = 25;
 22a:	89 e1       	ldi	r24, 0x19	; 25
 22c:	11 96       	adiw	r26, 0x01	; 1
 22e:	8c 93       	st	X, r24
 230:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 75;
 232:	8b e4       	ldi	r24, 0x4B	; 75
 234:	12 96       	adiw	r26, 0x02	; 2
 236:	8c 93       	st	X, r24
 238:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
 23a:	8e e7       	ldi	r24, 0x7E	; 126
 23c:	13 96       	adiw	r26, 0x03	; 3
 23e:	8c 93       	st	X, r24
 240:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
 242:	14 96       	adiw	r26, 0x04	; 4
 244:	1c 92       	st	X, r1
            break;
 246:	08 95       	ret

00000248 <USART1_flush>:
        str[i] = c;
        ++i;
    }
}

void USART1_flush(){
 248:	ed e5       	ldi	r30, 0x5D	; 93
 24a:	f1 e0       	ldi	r31, 0x01	; 1
 24c:	96 e4       	ldi	r25, 0x46	; 70
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 24e:	80 91 9b 00 	lds	r24, 0x009B
 252:	85 ff       	sbrs	r24, 5
 254:	fc cf       	rjmp	.-8      	; 0x24e <USART1_flush+0x6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 256:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 25a:	91 91       	ld	r25, Z+
 25c:	91 11       	cpse	r25, r1
 25e:	f7 cf       	rjmp	.-18     	; 0x24e <USART1_flush+0x6>
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
 260:	80 91 9b 00 	lds	r24, 0x009B
 264:	87 ff       	sbrs	r24, 7
 266:	0c c0       	rjmp	.+24     	; 0x280 <USART1_flush+0x38>
        dummy = UDR1;
 268:	90 91 9c 00 	lds	r25, 0x009C
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 26c:	80 91 9b 00 	lds	r24, 0x009B
 270:	85 ff       	sbrs	r24, 5
 272:	fc cf       	rjmp	.-8      	; 0x26c <USART1_flush+0x24>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 274:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
 278:	80 91 9b 00 	lds	r24, 0x009B
 27c:	87 fd       	sbrc	r24, 7
 27e:	f4 cf       	rjmp	.-24     	; 0x268 <USART1_flush+0x20>
 280:	08 95       	ret

00000282 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
 282:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
 286:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 288:	88 e1       	ldi	r24, 0x18	; 24
 28a:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */ 
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
 28c:	8e e0       	ldi	r24, 0x0E	; 14
 28e:	80 93 95 00 	sts	0x0095, r24
 292:	2f ef       	ldi	r18, 0xFF	; 255
 294:	81 ee       	ldi	r24, 0xE1	; 225
 296:	94 e0       	ldi	r25, 0x04	; 4
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <USART0_Init+0x16>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <USART0_Init+0x20>
 2a2:	00 00       	nop
 2a4:	08 95       	ret

000002a6 <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
 2a6:	5d 9b       	sbis	0x0b, 5	; 11
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
 2aa:	8c b9       	out	0x0c, r24	; 12
 2ac:	08 95       	ret

000002ae <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
 2ae:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
 2b0:	90 81       	ld	r25, Z
 2b2:	99 23       	and	r25, r25
 2b4:	39 f0       	breq	.+14     	; 0x2c4 <USART0_send_string+0x16>
 2b6:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
 2b8:	5d 9b       	sbis	0x0b, 5	; 11
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
 2bc:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 2be:	91 91       	ld	r25, Z+
 2c0:	91 11       	cpse	r25, r1
 2c2:	fa cf       	rjmp	.-12     	; 0x2b8 <USART0_send_string+0xa>
 2c4:	08 95       	ret

000002c6 <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
 2c6:	80 e8       	ldi	r24, 0x80	; 128
 2c8:	9d e8       	ldi	r25, 0x8D	; 141
 2ca:	ab e5       	ldi	r26, 0x5B	; 91
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <USART0_Receive+0x12>
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	a1 09       	sbc	r26, r1
 2d4:	b1 09       	sbc	r27, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
 2d6:	21 f0       	breq	.+8      	; 0x2e0 <USART0_Receive+0x1a>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
 2d8:	5f 9b       	sbis	0x0b, 7	; 11
 2da:	fa cf       	rjmp	.-12     	; 0x2d0 <USART0_Receive+0xa>
            /* Get and return received data from buffer */ 
            return UDR0;
 2dc:	8c b1       	in	r24, 0x0c	; 12
 2de:	08 95       	ret
        }
    } while (--timeout);
    return 255;
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
    /********
    * This is the original
    ************/
    //while (!(UCSR0A & (1<<RXC0)));
    //return UDR0;
}
 2e2:	08 95       	ret

000002e4 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
 2e4:	dc 01       	movw	r26, r24
 2e6:	fc 01       	movw	r30, r24
 2e8:	9c 01       	movw	r18, r24
 2ea:	2b 5f       	subi	r18, 0xFB	; 251
 2ec:	3f 4f       	sbci	r19, 0xFF	; 255
 2ee:	40 e8       	ldi	r20, 0x80	; 128
 2f0:	5d e8       	ldi	r21, 0x8D	; 141
 2f2:	6b e5       	ldi	r22, 0x5B	; 91
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	05 c0       	rjmp	.+10     	; 0x302 <USART0_Receive_String+0x1e>
 2f8:	41 50       	subi	r20, 0x01	; 1
 2fa:	51 09       	sbc	r21, r1
 2fc:	61 09       	sbc	r22, r1
 2fe:	71 09       	sbc	r23, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
 300:	61 f0       	breq	.+24     	; 0x31a <USART0_Receive_String+0x36>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
 302:	5f 9b       	sbis	0x0b, 7	; 11
 304:	f9 cf       	rjmp	.-14     	; 0x2f8 <USART0_Receive_String+0x14>
            /* Get and return received data from buffer */ 
            return UDR0;
 306:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 308:	9e 37       	cpi	r25, 0x7E	; 126
 30a:	b1 f0       	breq	.+44     	; 0x338 <USART0_Receive_String+0x54>
        if (c == 255 || i > MAX_STRING_SIZE - 1){
 30c:	9f 3f       	cpi	r25, 0xFF	; 255
 30e:	29 f0       	breq	.+10     	; 0x31a <USART0_Receive_String+0x36>
 310:	e2 17       	cp	r30, r18
 312:	f3 07       	cpc	r31, r19
 314:	11 f0       	breq	.+4      	; 0x31a <USART0_Receive_String+0x36>
            str[2] = 50;
            str[3] = END_STRING;
            str[4] = '\0';
            return;
        }
        str[i] = c;
 316:	91 93       	st	Z+, r25
 318:	ea cf       	rjmp	.-44     	; 0x2ee <USART0_Receive_String+0xa>
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
 31a:	82 e3       	ldi	r24, 0x32	; 50
 31c:	8c 93       	st	X, r24
            str[1] = 50;
 31e:	11 96       	adiw	r26, 0x01	; 1
 320:	8c 93       	st	X, r24
 322:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
 324:	12 96       	adiw	r26, 0x02	; 2
 326:	8c 93       	st	X, r24
 328:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
 32a:	8e e7       	ldi	r24, 0x7E	; 126
 32c:	13 96       	adiw	r26, 0x03	; 3
 32e:	8c 93       	st	X, r24
 330:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
 332:	14 96       	adiw	r26, 0x04	; 4
 334:	1c 92       	st	X, r1
            return;
 336:	08 95       	ret
 338:	08 95       	ret

0000033a <USART0_flush>:
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
 33a:	5f 9b       	sbis	0x0b, 7	; 11
 33c:	03 c0       	rjmp	.+6      	; 0x344 <USART0_flush+0xa>
        dummy = UDR0;
 33e:	8c b1       	in	r24, 0x0c	; 12
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
 340:	5f 99       	sbic	0x0b, 7	; 11
 342:	fd cf       	rjmp	.-6      	; 0x33e <USART0_flush+0x4>
 344:	08 95       	ret

00000346 <strobe_lcd>:
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 346:	e2 e6       	ldi	r30, 0x62	; 98
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	88 60       	ori	r24, 0x08	; 8
 34e:	80 83       	st	Z, r24
    PORTF &= ~0x08;
 350:	80 81       	ld	r24, Z
 352:	87 7f       	andi	r24, 0xF7	; 247
 354:	80 83       	st	Z, r24
 356:	08 95       	ret

00000358 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 358:	77 9b       	sbis	0x0e, 7	; 14
 35a:	fe cf       	rjmp	.-4      	; 0x358 <clear_display>
    SPDR = 0x00;    //command, not data
 35c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 35e:	77 9b       	sbis	0x0e, 7	; 14
 360:	fe cf       	rjmp	.-4      	; 0x35e <clear_display+0x6>
    SPDR = 0x01;    //clear display command
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 366:	77 9b       	sbis	0x0e, 7	; 14
 368:	fe cf       	rjmp	.-4      	; 0x366 <clear_display+0xe>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 36a:	80 91 62 00 	lds	r24, 0x0062
 36e:	88 60       	ori	r24, 0x08	; 8
 370:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 374:	80 91 62 00 	lds	r24, 0x0062
 378:	87 7f       	andi	r24, 0xF7	; 247
 37a:	80 93 62 00 	sts	0x0062, r24
 37e:	8f e9       	ldi	r24, 0x9F	; 159
 380:	98 e2       	ldi	r25, 0x28	; 40
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <clear_display+0x2a>
 386:	00 c0       	rjmp	.+0      	; 0x388 <clear_display+0x30>
 388:	00 00       	nop
 38a:	08 95       	ret

0000038c <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 38c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 38e:	77 9b       	sbis	0x0e, 7	; 14
 390:	fe cf       	rjmp	.-4      	; 0x38e <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
 392:	80 ec       	ldi	r24, 0xC0	; 192
 394:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 396:	77 9b       	sbis	0x0e, 7	; 14
 398:	fe cf       	rjmp	.-4      	; 0x396 <home_line2+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 39a:	80 91 62 00 	lds	r24, 0x0062
 39e:	88 60       	ori	r24, 0x08	; 8
 3a0:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 3a4:	80 91 62 00 	lds	r24, 0x0062
 3a8:	87 7f       	andi	r24, 0xF7	; 247
 3aa:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ae:	85 ec       	ldi	r24, 0xC5	; 197
 3b0:	8a 95       	dec	r24
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <home_line2+0x24>
 3b4:	00 00       	nop
 3b6:	08 95       	ret

000003b8 <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3bc:	77 9b       	sbis	0x0e, 7	; 14
 3be:	fe cf       	rjmp	.-4      	; 0x3bc <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
 3c0:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3c2:	77 9b       	sbis	0x0e, 7	; 14
 3c4:	fe cf       	rjmp	.-4      	; 0x3c2 <char2lcd+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 3c6:	80 91 62 00 	lds	r24, 0x0062
 3ca:	88 60       	ori	r24, 0x08	; 8
 3cc:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 3d0:	80 91 62 00 	lds	r24, 0x0062
 3d4:	87 7f       	andi	r24, 0xF7	; 247
 3d6:	80 93 62 00 	sts	0x0062, r24
 3da:	85 ec       	ldi	r24, 0xC5	; 197
 3dc:	8a 95       	dec	r24
 3de:	f1 f7       	brne	.-4      	; 0x3dc <char2lcd+0x24>
 3e0:	00 00       	nop
 3e2:	08 95       	ret

000003e4 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	fc 01       	movw	r30, r24
 3ea:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
 3f0:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3f2:	77 9b       	sbis	0x0e, 7	; 14
 3f4:	fe cf       	rjmp	.-4      	; 0x3f2 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
 3f6:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3f8:	77 9b       	sbis	0x0e, 7	; 14
 3fa:	fe cf       	rjmp	.-4      	; 0x3f8 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
 3fc:	8d 91       	ld	r24, X+
 3fe:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 400:	77 9b       	sbis	0x0e, 7	; 14
 402:	fe cf       	rjmp	.-4      	; 0x400 <string2lcd+0x1c>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 404:	90 91 62 00 	lds	r25, 0x0062
 408:	98 60       	ori	r25, 0x08	; 8
 40a:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
 40e:	90 91 62 00 	lds	r25, 0x0062
 412:	97 7f       	andi	r25, 0xF7	; 247
 414:	90 93 62 00 	sts	0x0062, r25
 418:	85 ec       	ldi	r24, 0xC5	; 197
 41a:	8a 95       	dec	r24
 41c:	f1 f7       	brne	.-4      	; 0x41a <string2lcd+0x36>
 41e:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
 420:	4f 5f       	subi	r20, 0xFF	; 255
 422:	5f 4f       	sbci	r21, 0xFF	; 255
 424:	ef 01       	movw	r28, r30
 426:	09 90       	ld	r0, Y+
 428:	00 20       	and	r0, r0
 42a:	e9 f7       	brne	.-6      	; 0x426 <string2lcd+0x42>
 42c:	9e 01       	movw	r18, r28
 42e:	2e 1b       	sub	r18, r30
 430:	3f 0b       	sbc	r19, r31
 432:	22 50       	subi	r18, 0x02	; 2
 434:	31 09       	sbc	r19, r1
 436:	24 17       	cp	r18, r20
 438:	35 07       	cpc	r19, r21
 43a:	d8 f6       	brcc	.-74     	; 0x3f2 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 442:	e1 e6       	ldi	r30, 0x61	; 97
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	88 60       	ori	r24, 0x08	; 8
 44a:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
 44c:	88 b3       	in	r24, 0x18	; 24
 44e:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 450:	87 b3       	in	r24, 0x17	; 23
 452:	87 60       	ori	r24, 0x07	; 7
 454:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 456:	80 e5       	ldi	r24, 0x50	; 80
 458:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	8e b9       	out	0x0e, r24	; 14
 45e:	08 95       	ret

00000460 <lcd_init>:
 460:	8f e5       	ldi	r24, 0x5F	; 95
 462:	9a ee       	ldi	r25, 0xEA	; 234
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <lcd_init+0x4>
 468:	00 c0       	rjmp	.+0      	; 0x46a <lcd_init+0xa>
 46a:	00 00       	nop
 46c:	23 e0       	ldi	r18, 0x03	; 3
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	90 e3       	ldi	r25, 0x30	; 48
 472:	1f b8       	out	0x0f, r1	; 15
 474:	77 9b       	sbis	0x0e, 7	; 14
 476:	fe cf       	rjmp	.-4      	; 0x474 <lcd_init+0x14>
 478:	9f b9       	out	0x0f, r25	; 15
 47a:	77 9b       	sbis	0x0e, 7	; 14
 47c:	fe cf       	rjmp	.-4      	; 0x47a <lcd_init+0x1a>
 47e:	80 91 62 00 	lds	r24, 0x0062
 482:	88 60       	ori	r24, 0x08	; 8
 484:	80 93 62 00 	sts	0x0062, r24
 488:	80 91 62 00 	lds	r24, 0x0062
 48c:	87 7f       	andi	r24, 0xF7	; 247
 48e:	80 93 62 00 	sts	0x0062, r24
 492:	85 ec       	ldi	r24, 0xC5	; 197
 494:	8a 95       	dec	r24
 496:	f1 f7       	brne	.-4      	; 0x494 <lcd_init+0x34>
 498:	00 00       	nop
 49a:	21 50       	subi	r18, 0x01	; 1
 49c:	31 09       	sbc	r19, r1
 49e:	49 f7       	brne	.-46     	; 0x472 <lcd_init+0x12>
 4a0:	1f b8       	out	0x0f, r1	; 15
 4a2:	77 9b       	sbis	0x0e, 7	; 14
 4a4:	fe cf       	rjmp	.-4      	; 0x4a2 <lcd_init+0x42>
 4a6:	88 e3       	ldi	r24, 0x38	; 56
 4a8:	8f b9       	out	0x0f, r24	; 15
 4aa:	77 9b       	sbis	0x0e, 7	; 14
 4ac:	fe cf       	rjmp	.-4      	; 0x4aa <lcd_init+0x4a>
 4ae:	80 91 62 00 	lds	r24, 0x0062
 4b2:	88 60       	ori	r24, 0x08	; 8
 4b4:	80 93 62 00 	sts	0x0062, r24
 4b8:	80 91 62 00 	lds	r24, 0x0062
 4bc:	87 7f       	andi	r24, 0xF7	; 247
 4be:	80 93 62 00 	sts	0x0062, r24
 4c2:	95 ec       	ldi	r25, 0xC5	; 197
 4c4:	9a 95       	dec	r25
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <lcd_init+0x64>
 4c8:	00 00       	nop
 4ca:	1f b8       	out	0x0f, r1	; 15
 4cc:	77 9b       	sbis	0x0e, 7	; 14
 4ce:	fe cf       	rjmp	.-4      	; 0x4cc <lcd_init+0x6c>
 4d0:	88 e0       	ldi	r24, 0x08	; 8
 4d2:	8f b9       	out	0x0f, r24	; 15
 4d4:	77 9b       	sbis	0x0e, 7	; 14
 4d6:	fe cf       	rjmp	.-4      	; 0x4d4 <lcd_init+0x74>
 4d8:	80 91 62 00 	lds	r24, 0x0062
 4dc:	88 60       	ori	r24, 0x08	; 8
 4de:	80 93 62 00 	sts	0x0062, r24
 4e2:	80 91 62 00 	lds	r24, 0x0062
 4e6:	87 7f       	andi	r24, 0xF7	; 247
 4e8:	80 93 62 00 	sts	0x0062, r24
 4ec:	85 ec       	ldi	r24, 0xC5	; 197
 4ee:	8a 95       	dec	r24
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <lcd_init+0x8e>
 4f2:	00 00       	nop
 4f4:	1f b8       	out	0x0f, r1	; 15
 4f6:	77 9b       	sbis	0x0e, 7	; 14
 4f8:	fe cf       	rjmp	.-4      	; 0x4f6 <lcd_init+0x96>
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	8f b9       	out	0x0f, r24	; 15
 4fe:	77 9b       	sbis	0x0e, 7	; 14
 500:	fe cf       	rjmp	.-4      	; 0x4fe <lcd_init+0x9e>
 502:	80 91 62 00 	lds	r24, 0x0062
 506:	88 60       	ori	r24, 0x08	; 8
 508:	80 93 62 00 	sts	0x0062, r24
 50c:	80 91 62 00 	lds	r24, 0x0062
 510:	87 7f       	andi	r24, 0xF7	; 247
 512:	80 93 62 00 	sts	0x0062, r24
 516:	8f ef       	ldi	r24, 0xFF	; 255
 518:	98 e1       	ldi	r25, 0x18	; 24
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <lcd_init+0xba>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <lcd_init+0xc0>
 520:	00 00       	nop
 522:	1f b8       	out	0x0f, r1	; 15
 524:	77 9b       	sbis	0x0e, 7	; 14
 526:	fe cf       	rjmp	.-4      	; 0x524 <lcd_init+0xc4>
 528:	86 e0       	ldi	r24, 0x06	; 6
 52a:	8f b9       	out	0x0f, r24	; 15
 52c:	77 9b       	sbis	0x0e, 7	; 14
 52e:	fe cf       	rjmp	.-4      	; 0x52c <lcd_init+0xcc>
 530:	80 91 62 00 	lds	r24, 0x0062
 534:	88 60       	ori	r24, 0x08	; 8
 536:	80 93 62 00 	sts	0x0062, r24
 53a:	80 91 62 00 	lds	r24, 0x0062
 53e:	87 7f       	andi	r24, 0xF7	; 247
 540:	80 93 62 00 	sts	0x0062, r24
 544:	95 ec       	ldi	r25, 0xC5	; 197
 546:	9a 95       	dec	r25
 548:	f1 f7       	brne	.-4      	; 0x546 <lcd_init+0xe6>
 54a:	00 00       	nop
 54c:	1f b8       	out	0x0f, r1	; 15
 54e:	77 9b       	sbis	0x0e, 7	; 14
 550:	fe cf       	rjmp	.-4      	; 0x54e <lcd_init+0xee>
 552:	8e e0       	ldi	r24, 0x0E	; 14
 554:	8f b9       	out	0x0f, r24	; 15
 556:	77 9b       	sbis	0x0e, 7	; 14
 558:	fe cf       	rjmp	.-4      	; 0x556 <lcd_init+0xf6>
 55a:	80 91 62 00 	lds	r24, 0x0062
 55e:	88 60       	ori	r24, 0x08	; 8
 560:	80 93 62 00 	sts	0x0062, r24
 564:	80 91 62 00 	lds	r24, 0x0062
 568:	87 7f       	andi	r24, 0xF7	; 247
 56a:	80 93 62 00 	sts	0x0062, r24
 56e:	85 ec       	ldi	r24, 0xC5	; 197
 570:	8a 95       	dec	r24
 572:	f1 f7       	brne	.-4      	; 0x570 <lcd_init+0x110>
 574:	00 00       	nop
 576:	08 95       	ret

00000578 <main>:


int main(){
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	2a 97       	sbiw	r28, 0x0a	; 10
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	de bf       	out	0x3e, r29	; 62
 588:	0f be       	out	0x3f, r0	; 63
 58a:	cd bf       	out	0x3d, r28	; 61
    
    USART0_Init(MYUBRR);
 58c:	87 e6       	ldi	r24, 0x67	; 103
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 41 01 	call	0x282	; 0x282 <USART0_Init>
    USART1_Init(MYUBRR);
 594:	87 e6       	ldi	r24, 0x67	; 103
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 cf 00 	call	0x19e	; 0x19e <USART1_Init>
    USART1_send_string((unsigned char *)"Bluetooth Initialized\r");
 59c:	88 e1       	ldi	r24, 0x18	; 24
 59e:	91 e0       	ldi	r25, 0x01	; 1
 5a0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART1_send_string>
    sei();
 5a4:	78 94       	sei




void enable_rx0_int(){
    UCSR0B |= (1 << RXCIE0);
 5a6:	57 9a       	sbi	0x0a, 7	; 10
    enable_rx0_int();
    //enable_rx1_int();
    unsigned char data[MAX_STRING_SIZE];
    int i;
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        data[i] = '\0';
 5a8:	1e 82       	std	Y+6, r1	; 0x06
 5aa:	1f 82       	std	Y+7, r1	; 0x07
 5ac:	18 86       	std	Y+8, r1	; 0x08
 5ae:	1a 86       	std	Y+10, r1	; 0x0a
    }
    data[MAX_STRING_SIZE - 2] = '~';
 5b0:	8e e7       	ldi	r24, 0x7E	; 126
 5b2:	89 87       	std	Y+9, r24	; 0x09

    unsigned char rec_data[MAX_STRING_SIZE];
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        rec_data[i] = '\0';
 5b4:	19 82       	std	Y+1, r1	; 0x01
 5b6:	1a 82       	std	Y+2, r1	; 0x02
 5b8:	1b 82       	std	Y+3, r1	; 0x03
 5ba:	1d 82       	std	Y+5, r1	; 0x05
    }
    rec_data[MAX_STRING_SIZE - 2] = '~';
 5bc:	8c 83       	std	Y+4, r24	; 0x04

    spi_init();
 5be:	0e 94 21 02 	call	0x442	; 0x442 <spi_init>
    lcd_init();
 5c2:	0e 94 30 02 	call	0x460	; 0x460 <lcd_init>

    clear_display();
 5c6:	0e 94 ac 01 	call	0x358	; 0x358 <clear_display>
    string2lcd((unsigned char *)"Ready");
 5ca:	8f e2       	ldi	r24, 0x2F	; 47
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <string2lcd>
 5d2:	45 c0       	rjmp	.+138    	; 0x65e <main+0xe6>
        clear_display();
        //string2lcd(data);
        if (data[0] == 100 && data[1] == 100){
            string2lcd((unsigned char *)"forward");
        }
        else if (data[0] == 1 && data[1] == 1){
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	09 f4       	brne	.+2      	; 0x5da <main+0x62>
 5d8:	5f c0       	rjmp	.+190    	; 0x698 <main+0x120>
            string2lcd((unsigned char *)"right");
        }
        else if (data[0] == 1 && data[1] == 100){
            string2lcd((unsigned char *)"left");
        }
        else if (data[0] == 50 && data[1] == 50){
 5da:	82 33       	cpi	r24, 0x32	; 50
 5dc:	21 f4       	brne	.+8      	; 0x5e6 <main+0x6e>
 5de:	8f 81       	ldd	r24, Y+7	; 0x07
 5e0:	82 33       	cpi	r24, 0x32	; 50
 5e2:	09 f4       	brne	.+2      	; 0x5e6 <main+0x6e>
 5e4:	64 c0       	rjmp	.+200    	; 0x6ae <main+0x136>
            string2lcd((unsigned char *)"stop");
        }
        else {
            string2lcd((unsigned char *)"Moving");
 5e6:	85 e5       	ldi	r24, 0x55	; 85
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <string2lcd>
            home_line2();
 5ee:	0e 94 c6 01 	call	0x38c	; 0x38c <home_line2>
            string2lcd((unsigned char *)itoa(data[0],rec_data,10));
 5f2:	8e 81       	ldd	r24, Y+6	; 0x06
 5f4:	4a e0       	ldi	r20, 0x0A	; 10
 5f6:	50 e0       	ldi	r21, 0x00	; 0
 5f8:	be 01       	movw	r22, r28
 5fa:	6f 5f       	subi	r22, 0xFF	; 255
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 66 03 	call	0x6cc	; 0x6cc <itoa>
 604:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <string2lcd>
            string2lcd((unsigned char *)itoa(data[1],rec_data,10));
 608:	8f 81       	ldd	r24, Y+7	; 0x07
 60a:	4a e0       	ldi	r20, 0x0A	; 10
 60c:	50 e0       	ldi	r21, 0x00	; 0
 60e:	be 01       	movw	r22, r28
 610:	6f 5f       	subi	r22, 0xFF	; 255
 612:	7f 4f       	sbci	r23, 0xFF	; 255
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 66 03 	call	0x6cc	; 0x6cc <itoa>
 61a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <string2lcd>
            string2lcd((unsigned char *)itoa(data[2],rec_data,10));
 61e:	88 85       	ldd	r24, Y+8	; 0x08
 620:	4a e0       	ldi	r20, 0x0A	; 10
 622:	50 e0       	ldi	r21, 0x00	; 0
 624:	be 01       	movw	r22, r28
 626:	6f 5f       	subi	r22, 0xFF	; 255
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 66 03 	call	0x6cc	; 0x6cc <itoa>
 630:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <string2lcd>
            string2lcd((unsigned char *)itoa(data[3],rec_data,10));
 634:	89 85       	ldd	r24, Y+9	; 0x09
 636:	4a e0       	ldi	r20, 0x0A	; 10
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	be 01       	movw	r22, r28
 63c:	6f 5f       	subi	r22, 0xFF	; 255
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 66 03 	call	0x6cc	; 0x6cc <itoa>
 646:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <string2lcd>
        }
        USART0_send_string(data);
 64a:	ce 01       	movw	r24, r28
 64c:	06 96       	adiw	r24, 0x06	; 6
 64e:	0e 94 57 01 	call	0x2ae	; 0x2ae <USART0_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 652:	8f e3       	ldi	r24, 0x3F	; 63
 654:	9c e9       	ldi	r25, 0x9C	; 156
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	f1 f7       	brne	.-4      	; 0x656 <main+0xde>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <main+0xe4>
 65c:	00 00       	nop

    clear_display();
    string2lcd((unsigned char *)"Ready");
    while (1){

        USART1_Receive_String(data);
 65e:	ce 01       	movw	r24, r28
 660:	06 96       	adiw	r24, 0x06	; 6
 662:	0e 94 00 01 	call	0x200	; 0x200 <USART1_Receive_String>
        USART1_send_string(data);
 666:	ce 01       	movw	r24, r28
 668:	06 96       	adiw	r24, 0x06	; 6
 66a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART1_send_string>
        USART1_send_string("\r");
 66e:	8d e2       	ldi	r24, 0x2D	; 45
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART1_send_string>
        clear_display();
 676:	0e 94 ac 01 	call	0x358	; 0x358 <clear_display>
        //string2lcd(data);
        if (data[0] == 100 && data[1] == 100){
 67a:	8e 81       	ldd	r24, Y+6	; 0x06
 67c:	84 36       	cpi	r24, 0x64	; 100
 67e:	09 f0       	breq	.+2      	; 0x682 <main+0x10a>
 680:	a9 cf       	rjmp	.-174    	; 0x5d4 <main+0x5c>
 682:	8f 81       	ldd	r24, Y+7	; 0x07
 684:	84 36       	cpi	r24, 0x64	; 100
 686:	c1 f0       	breq	.+48     	; 0x6b8 <main+0x140>
            string2lcd((unsigned char *)"forward");
        }
        else if (data[0] == 1 && data[1] == 1){
            string2lcd((unsigned char *)"reverse");
        }
        else if (data[0] == 100 && data[1] == 1){
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	09 f0       	breq	.+2      	; 0x68e <main+0x116>
 68c:	ac cf       	rjmp	.-168    	; 0x5e6 <main+0x6e>
            string2lcd((unsigned char *)"right");
 68e:	85 e4       	ldi	r24, 0x45	; 69
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <string2lcd>
 696:	d9 cf       	rjmp	.-78     	; 0x64a <main+0xd2>
        clear_display();
        //string2lcd(data);
        if (data[0] == 100 && data[1] == 100){
            string2lcd((unsigned char *)"forward");
        }
        else if (data[0] == 1 && data[1] == 1){
 698:	8f 81       	ldd	r24, Y+7	; 0x07
 69a:	81 30       	cpi	r24, 0x01	; 1
 69c:	91 f0       	breq	.+36     	; 0x6c2 <main+0x14a>
            string2lcd((unsigned char *)"reverse");
        }
        else if (data[0] == 100 && data[1] == 1){
            string2lcd((unsigned char *)"right");
        }
        else if (data[0] == 1 && data[1] == 100){
 69e:	84 36       	cpi	r24, 0x64	; 100
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <main+0x12c>
 6a2:	a1 cf       	rjmp	.-190    	; 0x5e6 <main+0x6e>
            string2lcd((unsigned char *)"left");
 6a4:	8b e4       	ldi	r24, 0x4B	; 75
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <string2lcd>
 6ac:	ce cf       	rjmp	.-100    	; 0x64a <main+0xd2>
        }
        else if (data[0] == 50 && data[1] == 50){
            string2lcd((unsigned char *)"stop");
 6ae:	80 e5       	ldi	r24, 0x50	; 80
 6b0:	91 e0       	ldi	r25, 0x01	; 1
 6b2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <string2lcd>
 6b6:	c9 cf       	rjmp	.-110    	; 0x64a <main+0xd2>
        USART1_send_string(data);
        USART1_send_string("\r");
        clear_display();
        //string2lcd(data);
        if (data[0] == 100 && data[1] == 100){
            string2lcd((unsigned char *)"forward");
 6b8:	85 e3       	ldi	r24, 0x35	; 53
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <string2lcd>
 6c0:	c4 cf       	rjmp	.-120    	; 0x64a <main+0xd2>
        }
        else if (data[0] == 1 && data[1] == 1){
            string2lcd((unsigned char *)"reverse");
 6c2:	8d e3       	ldi	r24, 0x3D	; 61
 6c4:	91 e0       	ldi	r25, 0x01	; 1
 6c6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <string2lcd>
 6ca:	bf cf       	rjmp	.-130    	; 0x64a <main+0xd2>

000006cc <itoa>:
 6cc:	45 32       	cpi	r20, 0x25	; 37
 6ce:	51 05       	cpc	r21, r1
 6d0:	20 f4       	brcc	.+8      	; 0x6da <itoa+0xe>
 6d2:	42 30       	cpi	r20, 0x02	; 2
 6d4:	10 f0       	brcs	.+4      	; 0x6da <itoa+0xe>
 6d6:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__itoa_ncheck>
 6da:	fb 01       	movw	r30, r22
 6dc:	10 82       	st	Z, r1
 6de:	cb 01       	movw	r24, r22
 6e0:	08 95       	ret

000006e2 <__itoa_ncheck>:
 6e2:	bb 27       	eor	r27, r27
 6e4:	4a 30       	cpi	r20, 0x0A	; 10
 6e6:	31 f4       	brne	.+12     	; 0x6f4 <__itoa_ncheck+0x12>
 6e8:	99 23       	and	r25, r25
 6ea:	22 f4       	brpl	.+8      	; 0x6f4 <__itoa_ncheck+0x12>
 6ec:	bd e2       	ldi	r27, 0x2D	; 45
 6ee:	90 95       	com	r25
 6f0:	81 95       	neg	r24
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__utoa_common>

000006f8 <__utoa_ncheck>:
 6f8:	bb 27       	eor	r27, r27

000006fa <__utoa_common>:
 6fa:	fb 01       	movw	r30, r22
 6fc:	55 27       	eor	r21, r21
 6fe:	aa 27       	eor	r26, r26
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	aa 1f       	adc	r26, r26
 706:	a4 17       	cp	r26, r20
 708:	10 f0       	brcs	.+4      	; 0x70e <__utoa_common+0x14>
 70a:	a4 1b       	sub	r26, r20
 70c:	83 95       	inc	r24
 70e:	50 51       	subi	r21, 0x10	; 16
 710:	b9 f7       	brne	.-18     	; 0x700 <__utoa_common+0x6>
 712:	a0 5d       	subi	r26, 0xD0	; 208
 714:	aa 33       	cpi	r26, 0x3A	; 58
 716:	08 f0       	brcs	.+2      	; 0x71a <__utoa_common+0x20>
 718:	a9 5d       	subi	r26, 0xD9	; 217
 71a:	a1 93       	st	Z+, r26
 71c:	00 97       	sbiw	r24, 0x00	; 0
 71e:	79 f7       	brne	.-34     	; 0x6fe <__utoa_common+0x4>
 720:	b1 11       	cpse	r27, r1
 722:	b1 93       	st	Z+, r27
 724:	11 92       	st	Z+, r1
 726:	cb 01       	movw	r24, r22
 728:	0c 94 96 03 	jmp	0x72c	; 0x72c <strrev>

0000072c <strrev>:
 72c:	dc 01       	movw	r26, r24
 72e:	fc 01       	movw	r30, r24
 730:	67 2f       	mov	r22, r23
 732:	71 91       	ld	r23, Z+
 734:	77 23       	and	r23, r23
 736:	e1 f7       	brne	.-8      	; 0x730 <strrev+0x4>
 738:	32 97       	sbiw	r30, 0x02	; 2
 73a:	04 c0       	rjmp	.+8      	; 0x744 <strrev+0x18>
 73c:	7c 91       	ld	r23, X
 73e:	6d 93       	st	X+, r22
 740:	70 83       	st	Z, r23
 742:	62 91       	ld	r22, -Z
 744:	ae 17       	cp	r26, r30
 746:	bf 07       	cpc	r27, r31
 748:	c8 f3       	brcs	.-14     	; 0x73c <strrev+0x10>
 74a:	08 95       	ret

0000074c <_exit>:
 74c:	f8 94       	cli

0000074e <__stop_program>:
 74e:	ff cf       	rjmp	.-2      	; 0x74e <__stop_program>
