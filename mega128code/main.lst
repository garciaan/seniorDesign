
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000bce  00000c62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800140  00800140  00000ca2  2**0
                  ALLOC
  3 .stab         00001794  00000000  00000000  00000ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001301  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003739  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000374c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000020  00000000  00000000  00003788  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000ba9  00000000  00000000  000037a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008ab  00000000  00000000  00004351  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000124  00000000  00000000  00004bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000164  00000000  00000000  00004d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000432  00000000  00000000  00004e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000006d1  00000000  00000000  000052b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  00005987  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 34       	cpi	r26, 0x40	; 64
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e4       	ldi	r26, 0x40	; 64
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 34       	cpi	r26, 0x42	; 66
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 87 03 	call	0x70e	; 0x70e <main>
  c6:	0c 94 e5 05 	jmp	0xbca	; 0xbca <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <init_esc>:

    return 0;
}

void init_esc(){
    PORTB |= (1 << 4);
  ce:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e6       	ldi	r24, 0x6F	; 111
  d2:	97 e1       	ldi	r25, 0x17	; 23
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <init_esc+0x6>
  d8:	00 c0       	rjmp	.+0      	; 0xda <init_esc+0xc>
  da:	00 00       	nop
    _delay_us(STOP);
    PORTB &= ~(1 << 4);
  dc:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	9f ef       	ldi	r25, 0xFF	; 255
  e0:	23 ed       	ldi	r18, 0xD3	; 211
  e2:	80 e3       	ldi	r24, 0x30	; 48
  e4:	91 50       	subi	r25, 0x01	; 1
  e6:	20 40       	sbci	r18, 0x00	; 0
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <init_esc+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <init_esc+0x20>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <set_16bitPWM1>:
    _delay_ms(1000);
}

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
  f2:	8f b5       	in	r24, 0x2f	; 47
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
  f8:	8f b5       	in	r24, 0x2f	; 47
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
  fe:	8f b5       	in	r24, 0x2f	; 47
 100:	88 60       	ori	r24, 0x08	; 8
 102:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
 104:	8f b5       	in	r24, 0x2f	; 47
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
 10a:	8e b5       	in	r24, 0x2e	; 46
 10c:	88 61       	ori	r24, 0x18	; 24
 10e:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz --> actually 800Hz?
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
 110:	8e b5       	in	r24, 0x2e	; 46
 112:	82 60       	ori	r24, 0x02	; 2
 114:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
 116:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
 118:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	3d bd       	out	0x2d, r19	; 45
 120:	2c bd       	out	0x2c, r18	; 44
    sei();
 122:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
 124:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	9f ef       	ldi	r25, 0xFF	; 255
 12a:	97 bd       	out	0x27, r25	; 39
 12c:	86 bd       	out	0x26, r24	; 38
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	81 ee       	ldi	r24, 0xE1	; 225
 132:	94 e0       	ldi	r25, 0x04	; 4
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <set_16bitPWM1+0x42>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <set_16bitPWM1+0x4c>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <TIM16_WriteTCNT1>:
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
 142:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
 144:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
 146:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
 148:	3d bd       	out	0x2d, r19	; 45
 14a:	2c bd       	out	0x2c, r18	; 44
    sei();
 14c:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
 14e:	9f bf       	out	0x3f, r25	; 63
 150:	08 95       	ret

00000152 <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
 152:	8f 92       	push	r8
 154:	9f 92       	push	r9
 156:	af 92       	push	r10
 158:	bf 92       	push	r11
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	4b 01       	movw	r8, r22
 168:	5c 01       	movw	r10, r24
 16a:	69 01       	movw	r12, r18
 16c:	7a 01       	movw	r14, r20
    if (left < MIN_INPUT){
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	48 ec       	ldi	r20, 0xC8	; 200
 174:	52 ec       	ldi	r21, 0xC2	; 194
 176:	0e 94 ca 04 	call	0x994	; 0x994 <__cmpsf2>
 17a:	87 fd       	sbrc	r24, 7
 17c:	31 c0       	rjmp	.+98     	; 0x1e0 <move+0x8e>
        left = MIN_INPUT;
    }
    if (left > MAX_INPUT){
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	48 ec       	ldi	r20, 0xC8	; 200
 184:	52 e4       	ldi	r21, 0x42	; 66
 186:	c5 01       	movw	r24, r10
 188:	b4 01       	movw	r22, r8
 18a:	0e 94 73 05 	call	0xae6	; 0xae6 <__gesf2>
 18e:	18 16       	cp	r1, r24
 190:	6c f5       	brge	.+90     	; 0x1ec <move+0x9a>
 192:	c8 ed       	ldi	r28, 0xD8	; 216
 194:	de e0       	ldi	r29, 0x0E	; 14
        left = MAX_INPUT;
    }
    if (right < MIN_INPUT){
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	48 ec       	ldi	r20, 0xC8	; 200
 19c:	52 ec       	ldi	r21, 0xC2	; 194
 19e:	c7 01       	movw	r24, r14
 1a0:	b6 01       	movw	r22, r12
 1a2:	0e 94 ca 04 	call	0x994	; 0x994 <__cmpsf2>
 1a6:	87 fd       	sbrc	r24, 7
 1a8:	1e c0       	rjmp	.+60     	; 0x1e6 <move+0x94>
        right = MIN_INPUT;
    }
    if (right > MAX_INPUT){
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	48 ec       	ldi	r20, 0xC8	; 200
 1b0:	52 e4       	ldi	r21, 0x42	; 66
 1b2:	c7 01       	movw	r24, r14
 1b4:	b6 01       	movw	r22, r12
 1b6:	0e 94 73 05 	call	0xae6	; 0xae6 <__gesf2>
 1ba:	18 16       	cp	r1, r24
 1bc:	7c f5       	brge	.+94     	; 0x21c <move+0xca>
 1be:	68 ed       	ldi	r22, 0xD8	; 216
 1c0:	7e e0       	ldi	r23, 0x0E	; 14
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
 1c2:	db bd       	out	0x2b, r29	; 43
 1c4:	ca bd       	out	0x2a, r28	; 42
    OCR1B = right_speed;
 1c6:	79 bd       	out	0x29, r23	; 41
 1c8:	68 bd       	out	0x28, r22	; 40
	string2lcd(utoa(left_speed,buffer,10));
	home_line2();
	string2lcd(utoa(right_speed,buffer,10));
    */

}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	df 90       	pop	r13
 1d4:	cf 90       	pop	r12
 1d6:	bf 90       	pop	r11
 1d8:	af 90       	pop	r10
 1da:	9f 90       	pop	r9
 1dc:	8f 90       	pop	r8
 1de:	08 95       	ret
 1e0:	c8 e9       	ldi	r28, 0x98	; 152
 1e2:	d8 e0       	ldi	r29, 0x08	; 8
 1e4:	d8 cf       	rjmp	.-80     	; 0x196 <move+0x44>
 1e6:	68 e9       	ldi	r22, 0x98	; 152
 1e8:	78 e0       	ldi	r23, 0x08	; 8
 1ea:	eb cf       	rjmp	.-42     	; 0x1c2 <move+0x70>
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	48 ec       	ldi	r20, 0xC8	; 200
 1f2:	52 e4       	ldi	r21, 0x42	; 66
 1f4:	c5 01       	movw	r24, r10
 1f6:	b4 01       	movw	r22, r8
 1f8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__addsf3>
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	51 e4       	ldi	r21, 0x41	; 65
 204:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsf3>
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e8       	ldi	r19, 0x80	; 128
 20c:	49 e0       	ldi	r20, 0x09	; 9
 20e:	55 e4       	ldi	r21, 0x45	; 69
 210:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__addsf3>
 214:	0e 94 cf 04 	call	0x99e	; 0x99e <__fixunssfsi>
 218:	eb 01       	movw	r28, r22
 21a:	bd cf       	rjmp	.-134    	; 0x196 <move+0x44>
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	48 ec       	ldi	r20, 0xC8	; 200
 222:	52 e4       	ldi	r21, 0x42	; 66
 224:	c7 01       	movw	r24, r14
 226:	b6 01       	movw	r22, r12
 228:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__addsf3>
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	51 e4       	ldi	r21, 0x41	; 65
 234:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsf3>
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e8       	ldi	r19, 0x80	; 128
 23c:	49 e0       	ldi	r20, 0x09	; 9
 23e:	55 e4       	ldi	r21, 0x45	; 69
 240:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__addsf3>
 244:	0e 94 cf 04 	call	0x99e	; 0x99e <__fixunssfsi>
 248:	bc cf       	rjmp	.-136    	; 0x1c2 <move+0x70>

0000024a <USART_Init>:


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
 24a:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
 24e:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 252:	88 e1       	ldi	r24, 0x18	; 24
 254:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
 258:	8c e0       	ldi	r24, 0x0C	; 12
 25a:	80 93 9d 00 	sts	0x009D, r24
 25e:	08 95       	ret

00000260 <USART_Transmit>:
}
void USART_Transmit( unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 260:	90 91 9b 00 	lds	r25, 0x009B
 264:	95 ff       	sbrs	r25, 5
 266:	fc cf       	rjmp	.-8      	; 0x260 <USART_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 268:	80 93 9c 00 	sts	0x009C, r24
 26c:	08 95       	ret

0000026e <USART_Receive>:
}

unsigned char USART_Receive(void){
    /* Wait for data to be received */ 
    while ( !(UCSR1A & (1<<RXC1)) );
 26e:	80 91 9b 00 	lds	r24, 0x009B
 272:	87 ff       	sbrs	r24, 7
 274:	fc cf       	rjmp	.-8      	; 0x26e <USART_Receive>
    /* Get and return received data from buffer */ 
    return UDR1;
 276:	80 91 9c 00 	lds	r24, 0x009C
}
 27a:	08 95       	ret

0000027c <USART_Receive_String>:

void USART_Receive_String(unsigned char *str){
 27c:	ac 01       	movw	r20, r24
 27e:	fc 01       	movw	r30, r24
    int i = 0;
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
    UDR1 = data;
}

unsigned char USART_Receive(void){
    /* Wait for data to be received */ 
    while ( !(UCSR1A & (1<<RXC1)) );
 284:	90 91 9b 00 	lds	r25, 0x009B
 288:	97 ff       	sbrs	r25, 7
 28a:	fc cf       	rjmp	.-8      	; 0x284 <USART_Receive_String+0x8>
    /* Get and return received data from buffer */ 
    return UDR1;
 28c:	90 91 9c 00 	lds	r25, 0x009C
}

void USART_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;
    while ((c = USART_Receive()) != EOT){
 290:	94 30       	cpi	r25, 0x04	; 4
 292:	59 f0       	breq	.+22     	; 0x2aa <USART_Receive_String+0x2e>
        str[i] = c;
 294:	91 93       	st	Z+, r25
        ++i;
 296:	2f 5f       	subi	r18, 0xFF	; 255
 298:	3f 4f       	sbci	r19, 0xFF	; 255
        if (i >= MAX_STRING_SIZE){
 29a:	24 36       	cpi	r18, 0x64	; 100
 29c:	31 05       	cpc	r19, r1
 29e:	91 f7       	brne	.-28     	; 0x284 <USART_Receive_String+0x8>
            str[MAX_STRING_SIZE - 1] = '\0';
 2a0:	4d 59       	subi	r20, 0x9D	; 157
 2a2:	5f 4f       	sbci	r21, 0xFF	; 255
 2a4:	fa 01       	movw	r30, r20
 2a6:	10 82       	st	Z, r1
            return;
 2a8:	08 95       	ret
        }
    }
    str[i] = '\0';
 2aa:	24 0f       	add	r18, r20
 2ac:	35 1f       	adc	r19, r21
 2ae:	f9 01       	movw	r30, r18
 2b0:	10 82       	st	Z, r1
 2b2:	08 95       	ret

000002b4 <strobe_lcd>:

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 2b4:	e2 e6       	ldi	r30, 0x62	; 98
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	88 60       	ori	r24, 0x08	; 8
 2bc:	80 83       	st	Z, r24
    PORTF &= ~0x08;
 2be:	80 81       	ld	r24, Z
 2c0:	87 7f       	andi	r24, 0xF7	; 247
 2c2:	80 83       	st	Z, r24
 2c4:	08 95       	ret

000002c6 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2c6:	77 9b       	sbis	0x0e, 7	; 14
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <clear_display>
    SPDR = 0x00;    //command, not data
 2ca:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2cc:	77 9b       	sbis	0x0e, 7	; 14
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <clear_display+0x6>
    SPDR = 0x01;    //clear display command
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2d4:	77 9b       	sbis	0x0e, 7	; 14
 2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <clear_display+0xe>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 2d8:	80 91 62 00 	lds	r24, 0x0062
 2dc:	88 60       	ori	r24, 0x08	; 8
 2de:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 2e2:	80 91 62 00 	lds	r24, 0x0062
 2e6:	87 7f       	andi	r24, 0xF7	; 247
 2e8:	80 93 62 00 	sts	0x0062, r24
 2ec:	8f e9       	ldi	r24, 0x9F	; 159
 2ee:	98 e2       	ldi	r25, 0x28	; 40
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <clear_display+0x2a>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <clear_display+0x30>
 2f6:	00 00       	nop
 2f8:	08 95       	ret

000002fa <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 2fa:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2fc:	77 9b       	sbis	0x0e, 7	; 14
 2fe:	fe cf       	rjmp	.-4      	; 0x2fc <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
 300:	80 ec       	ldi	r24, 0xC0	; 192
 302:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 304:	77 9b       	sbis	0x0e, 7	; 14
 306:	fe cf       	rjmp	.-4      	; 0x304 <home_line2+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 308:	80 91 62 00 	lds	r24, 0x0062
 30c:	88 60       	ori	r24, 0x08	; 8
 30e:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 312:	80 91 62 00 	lds	r24, 0x0062
 316:	87 7f       	andi	r24, 0xF7	; 247
 318:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31c:	85 ec       	ldi	r24, 0xC5	; 197
 31e:	8a 95       	dec	r24
 320:	f1 f7       	brne	.-4      	; 0x31e <home_line2+0x24>
 322:	00 00       	nop
 324:	08 95       	ret

00000326 <char2lcd>:

//sends a char to the LCD
void char2lcd(char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 32a:	77 9b       	sbis	0x0e, 7	; 14
 32c:	fe cf       	rjmp	.-4      	; 0x32a <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
 32e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 330:	77 9b       	sbis	0x0e, 7	; 14
 332:	fe cf       	rjmp	.-4      	; 0x330 <char2lcd+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 334:	80 91 62 00 	lds	r24, 0x0062
 338:	88 60       	ori	r24, 0x08	; 8
 33a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 33e:	80 91 62 00 	lds	r24, 0x0062
 342:	87 7f       	andi	r24, 0xF7	; 247
 344:	80 93 62 00 	sts	0x0062, r24
 348:	85 ec       	ldi	r24, 0xC5	; 197
 34a:	8a 95       	dec	r24
 34c:	f1 f7       	brne	.-4      	; 0x34a <char2lcd+0x24>
 34e:	00 00       	nop
 350:	08 95       	ret

00000352 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	fc 01       	movw	r30, r24
 358:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
 35e:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 360:	77 9b       	sbis	0x0e, 7	; 14
 362:	fe cf       	rjmp	.-4      	; 0x360 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
 364:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 366:	77 9b       	sbis	0x0e, 7	; 14
 368:	fe cf       	rjmp	.-4      	; 0x366 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
 36a:	8d 91       	ld	r24, X+
 36c:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 36e:	77 9b       	sbis	0x0e, 7	; 14
 370:	fe cf       	rjmp	.-4      	; 0x36e <string2lcd+0x1c>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 372:	90 91 62 00 	lds	r25, 0x0062
 376:	98 60       	ori	r25, 0x08	; 8
 378:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
 37c:	90 91 62 00 	lds	r25, 0x0062
 380:	97 7f       	andi	r25, 0xF7	; 247
 382:	90 93 62 00 	sts	0x0062, r25
 386:	85 ec       	ldi	r24, 0xC5	; 197
 388:	8a 95       	dec	r24
 38a:	f1 f7       	brne	.-4      	; 0x388 <string2lcd+0x36>
 38c:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
 38e:	4f 5f       	subi	r20, 0xFF	; 255
 390:	5f 4f       	sbci	r21, 0xFF	; 255
 392:	ef 01       	movw	r28, r30
 394:	09 90       	ld	r0, Y+
 396:	00 20       	and	r0, r0
 398:	e9 f7       	brne	.-6      	; 0x394 <string2lcd+0x42>
 39a:	9e 01       	movw	r18, r28
 39c:	2e 1b       	sub	r18, r30
 39e:	3f 0b       	sbc	r19, r31
 3a0:	22 50       	subi	r18, 0x02	; 2
 3a2:	31 09       	sbc	r19, r1
 3a4:	24 17       	cp	r18, r20
 3a6:	35 07       	cpc	r19, r21
 3a8:	d8 f6       	brcc	.-74     	; 0x360 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 3b0:	e1 e6       	ldi	r30, 0x61	; 97
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	88 60       	ori	r24, 0x08	; 8
 3b8:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
 3ba:	88 b3       	in	r24, 0x18	; 24
 3bc:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 3be:	87 b3       	in	r24, 0x17	; 23
 3c0:	87 60       	ori	r24, 0x07	; 7
 3c2:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 3c4:	80 e5       	ldi	r24, 0x50	; 80
 3c6:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	8e b9       	out	0x0e, r24	; 14
 3cc:	08 95       	ret

000003ce <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ce:	8f e5       	ldi	r24, 0x5F	; 95
 3d0:	9a ee       	ldi	r25, 0xEA	; 234
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <lcd_init+0x4>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <lcd_init+0xa>
 3d8:	00 00       	nop
 3da:	23 e0       	ldi	r18, 0x03	; 3
 3dc:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
 3de:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
 3e0:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3e2:	77 9b       	sbis	0x0e, 7	; 14
 3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <lcd_init+0x14>
        SPDR = 0x30;
 3e6:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3e8:	77 9b       	sbis	0x0e, 7	; 14
 3ea:	fe cf       	rjmp	.-4      	; 0x3e8 <lcd_init+0x1a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 3ec:	80 91 62 00 	lds	r24, 0x0062
 3f0:	88 60       	ori	r24, 0x08	; 8
 3f2:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 3f6:	80 91 62 00 	lds	r24, 0x0062
 3fa:	87 7f       	andi	r24, 0xF7	; 247
 3fc:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 400:	85 ec       	ldi	r24, 0xC5	; 197
 402:	8a 95       	dec	r24
 404:	f1 f7       	brne	.-4      	; 0x402 <lcd_init+0x34>
 406:	00 00       	nop
 408:	21 50       	subi	r18, 0x01	; 1
 40a:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
 40c:	49 f7       	brne	.-46     	; 0x3e0 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
 40e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 410:	77 9b       	sbis	0x0e, 7	; 14
 412:	fe cf       	rjmp	.-4      	; 0x410 <lcd_init+0x42>
    SPDR = 0x38;
 414:	88 e3       	ldi	r24, 0x38	; 56
 416:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 418:	77 9b       	sbis	0x0e, 7	; 14
 41a:	fe cf       	rjmp	.-4      	; 0x418 <lcd_init+0x4a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 41c:	80 91 62 00 	lds	r24, 0x0062
 420:	88 60       	ori	r24, 0x08	; 8
 422:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 426:	80 91 62 00 	lds	r24, 0x0062
 42a:	87 7f       	andi	r24, 0xF7	; 247
 42c:	80 93 62 00 	sts	0x0062, r24
 430:	95 ec       	ldi	r25, 0xC5	; 197
 432:	9a 95       	dec	r25
 434:	f1 f7       	brne	.-4      	; 0x432 <lcd_init+0x64>
 436:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 438:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 43a:	77 9b       	sbis	0x0e, 7	; 14
 43c:	fe cf       	rjmp	.-4      	; 0x43a <lcd_init+0x6c>
    SPDR = 0x08;
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 442:	77 9b       	sbis	0x0e, 7	; 14
 444:	fe cf       	rjmp	.-4      	; 0x442 <lcd_init+0x74>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 446:	80 91 62 00 	lds	r24, 0x0062
 44a:	88 60       	ori	r24, 0x08	; 8
 44c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 450:	80 91 62 00 	lds	r24, 0x0062
 454:	87 7f       	andi	r24, 0xF7	; 247
 456:	80 93 62 00 	sts	0x0062, r24
 45a:	85 ec       	ldi	r24, 0xC5	; 197
 45c:	8a 95       	dec	r24
 45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0x8e>
 460:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 462:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 464:	77 9b       	sbis	0x0e, 7	; 14
 466:	fe cf       	rjmp	.-4      	; 0x464 <lcd_init+0x96>
    SPDR = 0x01;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 46c:	77 9b       	sbis	0x0e, 7	; 14
 46e:	fe cf       	rjmp	.-4      	; 0x46c <lcd_init+0x9e>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 470:	80 91 62 00 	lds	r24, 0x0062
 474:	88 60       	ori	r24, 0x08	; 8
 476:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 47a:	80 91 62 00 	lds	r24, 0x0062
 47e:	87 7f       	andi	r24, 0xF7	; 247
 480:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 484:	8f ef       	ldi	r24, 0xFF	; 255
 486:	98 e1       	ldi	r25, 0x18	; 24
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <lcd_init+0xba>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <lcd_init+0xc0>
 48e:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
 490:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 492:	77 9b       	sbis	0x0e, 7	; 14
 494:	fe cf       	rjmp	.-4      	; 0x492 <lcd_init+0xc4>
    SPDR = 0x06;
 496:	86 e0       	ldi	r24, 0x06	; 6
 498:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 49a:	77 9b       	sbis	0x0e, 7	; 14
 49c:	fe cf       	rjmp	.-4      	; 0x49a <lcd_init+0xcc>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 49e:	80 91 62 00 	lds	r24, 0x0062
 4a2:	88 60       	ori	r24, 0x08	; 8
 4a4:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 4a8:	80 91 62 00 	lds	r24, 0x0062
 4ac:	87 7f       	andi	r24, 0xF7	; 247
 4ae:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b2:	95 ec       	ldi	r25, 0xC5	; 197
 4b4:	9a 95       	dec	r25
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <lcd_init+0xe6>
 4b8:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 4ba:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 4bc:	77 9b       	sbis	0x0e, 7	; 14
 4be:	fe cf       	rjmp	.-4      	; 0x4bc <lcd_init+0xee>
    SPDR = 0x0E;
 4c0:	8e e0       	ldi	r24, 0x0E	; 14
 4c2:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 4c4:	77 9b       	sbis	0x0e, 7	; 14
 4c6:	fe cf       	rjmp	.-4      	; 0x4c4 <lcd_init+0xf6>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 4c8:	80 91 62 00 	lds	r24, 0x0062
 4cc:	88 60       	ori	r24, 0x08	; 8
 4ce:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 4d2:	80 91 62 00 	lds	r24, 0x0062
 4d6:	87 7f       	andi	r24, 0xF7	; 247
 4d8:	80 93 62 00 	sts	0x0062, r24
 4dc:	85 ec       	ldi	r24, 0xC5	; 197
 4de:	8a 95       	dec	r24
 4e0:	f1 f7       	brne	.-4      	; 0x4de <lcd_init+0x110>
 4e2:	00 00       	nop
 4e4:	08 95       	ret

000004e6 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 4e6:	88 e4       	ldi	r24, 0x48	; 72
 4e8:	80 93 b8 00 	sts	0x00B8, r24
 4ec:	08 95       	ret

000004ee <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
 4ee:	10 92 bc 00 	sts	0x00BC, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 4f2:	94 ea       	ldi	r25, 0xA4	; 164
 4f4:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 4f8:	90 91 bc 00 	lds	r25, 0x00BC
 4fc:	97 ff       	sbrs	r25, 7
 4fe:	fc cf       	rjmp	.-8      	; 0x4f8 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 500:	90 91 b9 00 	lds	r25, 0x00B9
 504:	98 7f       	andi	r25, 0xF8	; 248
 506:	98 30       	cpi	r25, 0x08	; 8
 508:	11 f0       	breq	.+4      	; 0x50e <i2c_start+0x20>
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
 50e:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 512:	84 e8       	ldi	r24, 0x84	; 132
 514:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 518:	80 91 bc 00 	lds	r24, 0x00BC
 51c:	87 ff       	sbrs	r24, 7
 51e:	fc cf       	rjmp	.-8      	; 0x518 <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
 520:	80 91 b9 00 	lds	r24, 0x00B9
 524:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 526:	88 31       	cpi	r24, 0x18	; 24
 528:	11 f0       	breq	.+4      	; 0x52e <i2c_start+0x40>
 52a:	80 34       	cpi	r24, 0x40	; 64
 52c:	71 f7       	brne	.-36     	; 0x50a <i2c_start+0x1c>
	
	return 0;
 52e:	80 e0       	ldi	r24, 0x00	; 0
}
 530:	08 95       	ret

00000532 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
 532:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 536:	84 e8       	ldi	r24, 0x84	; 132
 538:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 53c:	80 91 bc 00 	lds	r24, 0x00BC
 540:	87 ff       	sbrs	r24, 7
 542:	fc cf       	rjmp	.-8      	; 0x53c <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 544:	90 91 b9 00 	lds	r25, 0x00B9
 548:	98 7f       	andi	r25, 0xF8	; 248
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	98 32       	cpi	r25, 0x28	; 40
 54e:	09 f4       	brne	.+2      	; 0x552 <i2c_write+0x20>
 550:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 552:	08 95       	ret

00000554 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 554:	84 ec       	ldi	r24, 0xC4	; 196
 556:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 55a:	80 91 bc 00 	lds	r24, 0x00BC
 55e:	87 ff       	sbrs	r24, 7
 560:	fc cf       	rjmp	.-8      	; 0x55a <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
 562:	80 91 bb 00 	lds	r24, 0x00BB
}
 566:	08 95       	ret

00000568 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 568:	84 e8       	ldi	r24, 0x84	; 132
 56a:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 56e:	80 91 bc 00 	lds	r24, 0x00BC
 572:	87 ff       	sbrs	r24, 7
 574:	fc cf       	rjmp	.-8      	; 0x56e <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
 576:	80 91 bb 00 	lds	r24, 0x00BB
}
 57a:	08 95       	ret

0000057c <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
 57c:	df 92       	push	r13
 57e:	ef 92       	push	r14
 580:	ff 92       	push	r15
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	d6 2e       	mov	r13, r22
 58c:	07 2f       	mov	r16, r23
 58e:	7a 01       	movw	r14, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
 590:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_start>
 594:	18 2f       	mov	r17, r24
 596:	81 11       	cpse	r24, r1
 598:	10 c0       	rjmp	.+32     	; 0x5ba <i2c_transmit+0x3e>
 59a:	cd 2d       	mov	r28, r13
 59c:	d0 2f       	mov	r29, r16
 59e:	ec 0e       	add	r14, r28
 5a0:	fd 1e       	adc	r15, r29
	
	for (uint16_t i = 0; i < length; i++)
 5a2:	ce 15       	cp	r28, r14
 5a4:	df 05       	cpc	r29, r15
 5a6:	21 f4       	brne	.+8      	; 0x5b0 <i2c_transmit+0x34>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 5a8:	84 e9       	ldi	r24, 0x94	; 148
 5aa:	80 93 bc 00 	sts	0x00BC, r24
		if (i2c_write(data[i])) return 1;
	}
	
	i2c_stop();
	
	return 0;
 5ae:	06 c0       	rjmp	.+12     	; 0x5bc <i2c_transmit+0x40>
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 5b0:	89 91       	ld	r24, Y+
 5b2:	0e 94 99 02 	call	0x532	; 0x532 <i2c_write>
 5b6:	88 23       	and	r24, r24
 5b8:	a1 f3       	breq	.-24     	; 0x5a2 <i2c_transmit+0x26>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
 5ba:	11 e0       	ldi	r17, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
 5bc:	81 2f       	mov	r24, r17
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	ff 90       	pop	r15
 5c8:	ef 90       	pop	r14
 5ca:	df 90       	pop	r13
 5cc:	08 95       	ret

000005ce <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
 5ce:	cf 92       	push	r12
 5d0:	df 92       	push	r13
 5d2:	ff 92       	push	r15
 5d4:	0f 93       	push	r16
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	eb 01       	movw	r28, r22
 5de:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_READ)) return 1;
 5e0:	81 60       	ori	r24, 0x01	; 1
 5e2:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_start>
 5e6:	f8 2e       	mov	r15, r24
 5e8:	81 11       	cpse	r24, r1
 5ea:	20 c0       	rjmp	.+64     	; 0x62c <i2c_receive+0x5e>
 5ec:	6e 01       	movw	r12, r28
	
	for (uint16_t i = 0; i < (length-1); i++)
 5ee:	01 50       	subi	r16, 0x01	; 1
 5f0:	11 09       	sbc	r17, r1
 5f2:	c6 01       	movw	r24, r12
 5f4:	8c 1b       	sub	r24, r28
 5f6:	9d 0b       	sbc	r25, r29
 5f8:	80 17       	cp	r24, r16
 5fa:	91 07       	cpc	r25, r17
 5fc:	88 f0       	brcs	.+34     	; 0x620 <i2c_receive+0x52>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 5fe:	c0 0f       	add	r28, r16
 600:	d1 1f       	adc	r29, r17
 602:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_read_nack>
 606:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 608:	84 e9       	ldi	r24, 0x94	; 148
 60a:	80 93 bc 00 	sts	0x00BC, r24
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
 60e:	8f 2d       	mov	r24, r15
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	1f 91       	pop	r17
 616:	0f 91       	pop	r16
 618:	ff 90       	pop	r15
 61a:	df 90       	pop	r13
 61c:	cf 90       	pop	r12
 61e:	08 95       	ret
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 620:	0e 94 aa 02 	call	0x554	; 0x554 <i2c_read_ack>
 624:	f6 01       	movw	r30, r12
 626:	81 93       	st	Z+, r24
 628:	6f 01       	movw	r12, r30
 62a:	e3 cf       	rjmp	.-58     	; 0x5f2 <i2c_receive+0x24>
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
 62c:	ff 24       	eor	r15, r15
 62e:	f3 94       	inc	r15
 630:	ee cf       	rjmp	.-36     	; 0x60e <i2c_receive+0x40>

00000632 <i2c_writeReg>:
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 632:	df 92       	push	r13
 634:	ef 92       	push	r14
 636:	ff 92       	push	r15
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	c6 2f       	mov	r28, r22
 642:	d4 2e       	mov	r13, r20
 644:	05 2f       	mov	r16, r21
 646:	79 01       	movw	r14, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 648:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_start>
 64c:	18 2f       	mov	r17, r24
 64e:	88 23       	and	r24, r24
 650:	51 f0       	breq	.+20     	; 0x666 <i2c_writeReg+0x34>
 652:	11 e0       	ldi	r17, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
 654:	81 2f       	mov	r24, r17
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	1f 91       	pop	r17
 65c:	0f 91       	pop	r16
 65e:	ff 90       	pop	r15
 660:	ef 90       	pop	r14
 662:	df 90       	pop	r13
 664:	08 95       	ret

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);
 666:	8c 2f       	mov	r24, r28
 668:	0e 94 99 02 	call	0x532	; 0x532 <i2c_write>
 66c:	cd 2d       	mov	r28, r13
 66e:	d0 2f       	mov	r29, r16
 670:	ec 0e       	add	r14, r28
 672:	fd 1e       	adc	r15, r29

	for (uint16_t i = 0; i < length; i++)
 674:	ce 15       	cp	r28, r14
 676:	df 05       	cpc	r29, r15
 678:	21 f4       	brne	.+8      	; 0x682 <i2c_writeReg+0x50>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 67a:	84 e9       	ldi	r24, 0x94	; 148
 67c:	80 93 bc 00 	sts	0x00BC, r24
		if (i2c_write(data[i])) return 1;
	}

	i2c_stop();

	return 0;
 680:	e9 cf       	rjmp	.-46     	; 0x654 <i2c_writeReg+0x22>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 682:	89 91       	ld	r24, Y+
 684:	0e 94 99 02 	call	0x532	; 0x532 <i2c_write>
 688:	88 23       	and	r24, r24
 68a:	a1 f3       	breq	.-24     	; 0x674 <i2c_writeReg+0x42>
 68c:	e2 cf       	rjmp	.-60     	; 0x652 <i2c_writeReg+0x20>

0000068e <i2c_readReg>:

	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 68e:	cf 92       	push	r12
 690:	df 92       	push	r13
 692:	ff 92       	push	r15
 694:	0f 93       	push	r16
 696:	1f 93       	push	r17
 698:	cf 93       	push	r28
 69a:	df 93       	push	r29
 69c:	f8 2e       	mov	r15, r24
 69e:	d6 2e       	mov	r13, r22
 6a0:	ea 01       	movw	r28, r20
 6a2:	89 01       	movw	r16, r18
	if (i2c_start(devaddr)) return 1;
 6a4:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_start>
 6a8:	88 23       	and	r24, r24
 6aa:	59 f0       	breq	.+22     	; 0x6c2 <i2c_readReg+0x34>
 6ac:	ff 24       	eor	r15, r15
 6ae:	f3 94       	inc	r15
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 6b0:	8f 2d       	mov	r24, r15
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	ff 90       	pop	r15
 6bc:	df 90       	pop	r13
 6be:	cf 90       	pop	r12
 6c0:	08 95       	ret

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);
 6c2:	8d 2d       	mov	r24, r13
 6c4:	0e 94 99 02 	call	0x532	; 0x532 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 6c8:	8f 2d       	mov	r24, r15
 6ca:	81 60       	ori	r24, 0x01	; 1
 6cc:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_start>
 6d0:	f8 2e       	mov	r15, r24
 6d2:	81 11       	cpse	r24, r1
 6d4:	eb cf       	rjmp	.-42     	; 0x6ac <i2c_readReg+0x1e>
 6d6:	6e 01       	movw	r12, r28

	for (uint16_t i = 0; i < (length-1); i++)
 6d8:	01 50       	subi	r16, 0x01	; 1
 6da:	11 09       	sbc	r17, r1
 6dc:	c6 01       	movw	r24, r12
 6de:	8c 1b       	sub	r24, r28
 6e0:	9d 0b       	sbc	r25, r29
 6e2:	80 17       	cp	r24, r16
 6e4:	91 07       	cpc	r25, r17
 6e6:	48 f0       	brcs	.+18     	; 0x6fa <i2c_readReg+0x6c>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 6e8:	c0 0f       	add	r28, r16
 6ea:	d1 1f       	adc	r29, r17
 6ec:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_read_nack>
 6f0:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 6f2:	84 e9       	ldi	r24, 0x94	; 148
 6f4:	80 93 bc 00 	sts	0x00BC, r24
	}
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
 6f8:	db cf       	rjmp	.-74     	; 0x6b0 <i2c_readReg+0x22>

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 6fa:	0e 94 aa 02 	call	0x554	; 0x554 <i2c_read_ack>
 6fe:	f6 01       	movw	r30, r12
 700:	81 93       	st	Z+, r24
 702:	6f 01       	movw	r12, r30
 704:	eb cf       	rjmp	.-42     	; 0x6dc <i2c_readReg+0x4e>

00000706 <i2c_stop>:
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 706:	84 e9       	ldi	r24, 0x94	; 148
 708:	80 93 bc 00 	sts	0x00BC, r24
 70c:	08 95       	ret

0000070e <main>:
void init_esc();

uint8_t temp, read_byte;


int main(void){
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
 712:	cd b7       	in	r28, 0x3d	; 61
 714:	de b7       	in	r29, 0x3e	; 62
 716:	c4 56       	subi	r28, 0x64	; 100
 718:	d1 09       	sbc	r29, r1
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	f8 94       	cli
 71e:	de bf       	out	0x3e, r29	; 62
 720:	0f be       	out	0x3f, r0	; 63
 722:	cd bf       	out	0x3d, r28	; 61
    DDRB = 0xFF;
 724:	8f ef       	ldi	r24, 0xFF	; 255
 726:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
 728:	18 ba       	out	0x18, r1	; 24
    DDRD = 0x00;
 72a:	11 ba       	out	0x11, r1	; 17
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 72c:	80 91 61 00 	lds	r24, 0x0061
 730:	88 60       	ori	r24, 0x08	; 8
 732:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initalization for SPI
 736:	88 b3       	in	r24, 0x18	; 24
 738:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 73a:	87 b3       	in	r24, 0x17	; 23
 73c:	87 60       	ori	r24, 0x07	; 7
 73e:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 740:	80 e5       	ldi	r24, 0x50	; 80
 742:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	8e b9       	out	0x0e, r24	; 14

    char buffer[16];
    unsigned char str[MAX_STRING_SIZE];

    spi_init();
    lcd_init();
 748:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_init>

    //Wait for S1 to be pressed before doing anything, remove this eventually
    string2lcd("Press S1");
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	91 e0       	ldi	r25, 0x01	; 1
 750:	0e 94 a9 01 	call	0x352	; 0x352 <string2lcd>
	while (((PIND) & (1 << 0)));
 754:	80 99       	sbic	0x10, 0	; 16
 756:	fe cf       	rjmp	.-4      	; 0x754 <main+0x46>

    return 0;
}

void init_esc(){
    PORTB |= (1 << 4);
 758:	c4 9a       	sbi	0x18, 4	; 24
 75a:	8f e6       	ldi	r24, 0x6F	; 111
 75c:	97 e1       	ldi	r25, 0x17	; 23
 75e:	01 97       	sbiw	r24, 0x01	; 1
 760:	f1 f7       	brne	.-4      	; 0x75e <main+0x50>
 762:	00 c0       	rjmp	.+0      	; 0x764 <main+0x56>
 764:	00 00       	nop
    _delay_us(STOP);
    PORTB &= ~(1 << 4);
 766:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 768:	9f ef       	ldi	r25, 0xFF	; 255
 76a:	e3 ed       	ldi	r30, 0xD3	; 211
 76c:	f0 e3       	ldi	r31, 0x30	; 48
 76e:	91 50       	subi	r25, 0x01	; 1
 770:	e0 40       	sbci	r30, 0x00	; 0
 772:	f0 40       	sbci	r31, 0x00	; 0
 774:	e1 f7       	brne	.-8      	; 0x76e <main+0x60>
 776:	00 c0       	rjmp	.+0      	; 0x778 <main+0x6a>
 778:	00 00       	nop
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
 77a:	08 eb       	ldi	r16, 0xB8	; 184
 77c:	1b e0       	ldi	r17, 0x0B	; 11
 77e:	88 e0       	ldi	r24, 0x08	; 8
 780:	28 2e       	mov	r2, r24
 782:	8c e0       	ldi	r24, 0x0C	; 12
 784:	38 2e       	mov	r3, r24
 786:	41 2c       	mov	r4, r1
 788:	9c e0       	ldi	r25, 0x0C	; 12
 78a:	59 2e       	mov	r5, r25
 78c:	28 ef       	ldi	r18, 0xF8	; 248
 78e:	62 2e       	mov	r6, r18
 790:	2b e0       	ldi	r18, 0x0B	; 11
 792:	72 2e       	mov	r7, r18
            OCR1C = 0;
		}
		else if (!((PIND) & (1 << 5))){
			string2lcd("Left 8%");
            move(8,0,0);
            OCR1C = 10000;
 794:	30 e1       	ldi	r19, 0x10	; 16
 796:	83 2e       	mov	r8, r19
 798:	37 e2       	ldi	r19, 0x27	; 39
 79a:	93 2e       	mov	r9, r19
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
 79c:	40 ef       	ldi	r20, 0xF0	; 240
 79e:	a4 2e       	mov	r10, r20
 7a0:	4b e0       	ldi	r20, 0x0B	; 11
 7a2:	b4 2e       	mov	r11, r20
 7a4:	58 ee       	ldi	r21, 0xE8	; 232
 7a6:	c5 2e       	mov	r12, r21
 7a8:	5b e0       	ldi	r21, 0x0B	; 11
 7aa:	d5 2e       	mov	r13, r21
        clear_display();
        USART_Receive_String(str);
		if (!((PIND) & (1 << 7))){
			string2lcd("Left 6%");
            move(6,0,0);
            OCR1C = 65000;
 7ac:	68 ee       	ldi	r22, 0xE8	; 232
 7ae:	e6 2e       	mov	r14, r22
 7b0:	6d ef       	ldi	r22, 0xFD	; 253
 7b2:	f6 2e       	mov	r15, r22
	
	init_esc();
    void set_16bitPWM1();
    
    while(1){
        clear_display();
 7b4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clear_display>
 7b8:	fe 01       	movw	r30, r28
 7ba:	31 96       	adiw	r30, 0x01	; 1
    /* Get and return received data from buffer */ 
    return UDR1;
}

void USART_Receive_String(unsigned char *str){
    int i = 0;
 7bc:	20 e0       	ldi	r18, 0x00	; 0
 7be:	30 e0       	ldi	r19, 0x00	; 0
    UDR1 = data;
}

unsigned char USART_Receive(void){
    /* Wait for data to be received */ 
    while ( !(UCSR1A & (1<<RXC1)) );
 7c0:	80 91 9b 00 	lds	r24, 0x009B
 7c4:	87 ff       	sbrs	r24, 7
 7c6:	fc cf       	rjmp	.-8      	; 0x7c0 <main+0xb2>
    /* Get and return received data from buffer */ 
    return UDR1;
 7c8:	80 91 9c 00 	lds	r24, 0x009C
}

void USART_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;
    while ((c = USART_Receive()) != EOT){
 7cc:	84 30       	cpi	r24, 0x04	; 4
 7ce:	49 f1       	breq	.+82     	; 0x822 <main+0x114>
        str[i] = c;
 7d0:	81 93       	st	Z+, r24
        ++i;
 7d2:	2f 5f       	subi	r18, 0xFF	; 255
 7d4:	3f 4f       	sbci	r19, 0xFF	; 255
        if (i >= MAX_STRING_SIZE){
 7d6:	24 36       	cpi	r18, 0x64	; 100
 7d8:	31 05       	cpc	r19, r1
 7da:	91 f7       	brne	.-28     	; 0x7c0 <main+0xb2>
            str[MAX_STRING_SIZE - 1] = '\0';
 7dc:	a5 96       	adiw	r28, 0x25	; 37
 7de:	1f ae       	std	Y+63, r1	; 0x3f
 7e0:	a5 97       	sbiw	r28, 0x25	; 37
    void set_16bitPWM1();
    
    while(1){
        clear_display();
        USART_Receive_String(str);
		if (!((PIND) & (1 << 7))){
 7e2:	87 9b       	sbis	0x10, 7	; 16
 7e4:	28 c0       	rjmp	.+80     	; 0x836 <main+0x128>
			string2lcd("Left 6%");
            move(6,0,0);
            OCR1C = 65000;
		}
		else if (!((PIND) & (1 << 6))){
 7e6:	86 9b       	sbis	0x10, 6	; 16
 7e8:	33 c0       	rjmp	.+102    	; 0x850 <main+0x142>
			string2lcd("Left 7%");
            move(7,0,0);
            OCR1C = 0;
		}
		else if (!((PIND) & (1 << 5))){
 7ea:	85 9b       	sbis	0x10, 5	; 16
 7ec:	3e c0       	rjmp	.+124    	; 0x86a <main+0x15c>
			string2lcd("Left 8%");
            move(8,0,0);
            OCR1C = 10000;
		}
		else if (!((PIND) & (1 << 4))){
 7ee:	84 9b       	sbis	0x10, 4	; 16
 7f0:	49 c0       	rjmp	.+146    	; 0x884 <main+0x176>
            string2lcd("Left 9%");
			move(9,0,0);
		}
		else if (!((PIND) & (1 << 3))){
 7f2:	83 9b       	sbis	0x10, 3	; 16
 7f4:	59 c0       	rjmp	.+178    	; 0x8a8 <main+0x19a>
            string2lcd("Left 10%");
            move(10,0,0);
		}
        else if (!((PIND) & (1 << 1))){
 7f6:	81 99       	sbic	0x10, 1	; 16
 7f8:	4e c0       	rjmp	.+156    	; 0x896 <main+0x188>
            string2lcd("Left 50%");
 7fa:	82 e3       	ldi	r24, 0x32	; 50
 7fc:	91 e0       	ldi	r25, 0x01	; 1
 7fe:	0e 94 a9 01 	call	0x352	; 0x352 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
 802:	88 e4       	ldi	r24, 0x48	; 72
 804:	9d e0       	ldi	r25, 0x0D	; 13
 806:	9b bd       	out	0x2b, r25	; 43
 808:	8a bd       	out	0x2a, r24	; 42
    OCR1B = right_speed;
 80a:	19 bd       	out	0x29, r17	; 41
 80c:	08 bd       	out	0x28, r16	; 40
 80e:	9f ef       	ldi	r25, 0xFF	; 255
 810:	e9 ef       	ldi	r30, 0xF9	; 249
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	91 50       	subi	r25, 0x01	; 1
 816:	e0 40       	sbci	r30, 0x00	; 0
 818:	f0 40       	sbci	r31, 0x00	; 0
 81a:	e1 f7       	brne	.-8      	; 0x814 <main+0x106>
 81c:	00 c0       	rjmp	.+0      	; 0x81e <main+0x110>
 81e:	00 00       	nop
 820:	c9 cf       	rjmp	.-110    	; 0x7b4 <main+0xa6>
        if (i >= MAX_STRING_SIZE){
            str[MAX_STRING_SIZE - 1] = '\0';
            return;
        }
    }
    str[i] = '\0';
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	8c 0f       	add	r24, r28
 828:	9d 1f       	adc	r25, r29
 82a:	28 0f       	add	r18, r24
 82c:	39 1f       	adc	r19, r25
 82e:	f9 01       	movw	r30, r18
 830:	10 82       	st	Z, r1
    void set_16bitPWM1();
    
    while(1){
        clear_display();
        USART_Receive_String(str);
		if (!((PIND) & (1 << 7))){
 832:	87 99       	sbic	0x10, 7	; 16
 834:	d8 cf       	rjmp	.-80     	; 0x7e6 <main+0xd8>
			string2lcd("Left 6%");
 836:	89 e0       	ldi	r24, 0x09	; 9
 838:	91 e0       	ldi	r25, 0x01	; 1
 83a:	0e 94 a9 01 	call	0x352	; 0x352 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
 83e:	db bc       	out	0x2b, r13	; 43
 840:	ca bc       	out	0x2a, r12	; 42
    OCR1B = right_speed;
 842:	19 bd       	out	0x29, r17	; 41
 844:	08 bd       	out	0x28, r16	; 40
        clear_display();
        USART_Receive_String(str);
		if (!((PIND) & (1 << 7))){
			string2lcd("Left 6%");
            move(6,0,0);
            OCR1C = 65000;
 846:	f0 92 79 00 	sts	0x0079, r15
 84a:	e0 92 78 00 	sts	0x0078, r14
 84e:	df cf       	rjmp	.-66     	; 0x80e <main+0x100>
		}
		else if (!((PIND) & (1 << 6))){
			string2lcd("Left 7%");
 850:	81 e1       	ldi	r24, 0x11	; 17
 852:	91 e0       	ldi	r25, 0x01	; 1
 854:	0e 94 a9 01 	call	0x352	; 0x352 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
 858:	bb bc       	out	0x2b, r11	; 43
 85a:	aa bc       	out	0x2a, r10	; 42
    OCR1B = right_speed;
 85c:	19 bd       	out	0x29, r17	; 41
 85e:	08 bd       	out	0x28, r16	; 40
            OCR1C = 65000;
		}
		else if (!((PIND) & (1 << 6))){
			string2lcd("Left 7%");
            move(7,0,0);
            OCR1C = 0;
 860:	10 92 79 00 	sts	0x0079, r1
 864:	10 92 78 00 	sts	0x0078, r1
 868:	d2 cf       	rjmp	.-92     	; 0x80e <main+0x100>
		}
		else if (!((PIND) & (1 << 5))){
			string2lcd("Left 8%");
 86a:	89 e1       	ldi	r24, 0x19	; 25
 86c:	91 e0       	ldi	r25, 0x01	; 1
 86e:	0e 94 a9 01 	call	0x352	; 0x352 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
 872:	7b bc       	out	0x2b, r7	; 43
 874:	6a bc       	out	0x2a, r6	; 42
    OCR1B = right_speed;
 876:	19 bd       	out	0x29, r17	; 41
 878:	08 bd       	out	0x28, r16	; 40
            OCR1C = 0;
		}
		else if (!((PIND) & (1 << 5))){
			string2lcd("Left 8%");
            move(8,0,0);
            OCR1C = 10000;
 87a:	90 92 79 00 	sts	0x0079, r9
 87e:	80 92 78 00 	sts	0x0078, r8
 882:	c5 cf       	rjmp	.-118    	; 0x80e <main+0x100>
		}
		else if (!((PIND) & (1 << 4))){
            string2lcd("Left 9%");
 884:	81 e2       	ldi	r24, 0x21	; 33
 886:	91 e0       	ldi	r25, 0x01	; 1
 888:	0e 94 a9 01 	call	0x352	; 0x352 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
 88c:	5b bc       	out	0x2b, r5	; 43
 88e:	4a bc       	out	0x2a, r4	; 42
    OCR1B = right_speed;
 890:	19 bd       	out	0x29, r17	; 41
 892:	08 bd       	out	0x28, r16	; 40
 894:	bc cf       	rjmp	.-136    	; 0x80e <main+0x100>
        else if (!((PIND) & (1 << 1))){
            string2lcd("Left 50%");
            move(50,0,0);
        }
		else {
			string2lcd("Stop");
 896:	8b e3       	ldi	r24, 0x3B	; 59
 898:	91 e0       	ldi	r25, 0x01	; 1
 89a:	0e 94 a9 01 	call	0x352	; 0x352 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
 89e:	1b bd       	out	0x2b, r17	; 43
 8a0:	0a bd       	out	0x2a, r16	; 42
    OCR1B = right_speed;
 8a2:	19 bd       	out	0x29, r17	; 41
 8a4:	08 bd       	out	0x28, r16	; 40
 8a6:	b3 cf       	rjmp	.-154    	; 0x80e <main+0x100>
		else if (!((PIND) & (1 << 4))){
            string2lcd("Left 9%");
			move(9,0,0);
		}
		else if (!((PIND) & (1 << 3))){
            string2lcd("Left 10%");
 8a8:	89 e2       	ldi	r24, 0x29	; 41
 8aa:	91 e0       	ldi	r25, 0x01	; 1
 8ac:	0e 94 a9 01 	call	0x352	; 0x352 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
 8b0:	3b bc       	out	0x2b, r3	; 43
 8b2:	2a bc       	out	0x2a, r2	; 42
    OCR1B = right_speed;
 8b4:	19 bd       	out	0x29, r17	; 41
 8b6:	08 bd       	out	0x28, r16	; 40
 8b8:	aa cf       	rjmp	.-172    	; 0x80e <main+0x100>

000008ba <__subsf3>:
 8ba:	50 58       	subi	r21, 0x80	; 128

000008bc <__addsf3>:
 8bc:	bb 27       	eor	r27, r27
 8be:	aa 27       	eor	r26, r26
 8c0:	0e 94 75 04 	call	0x8ea	; 0x8ea <__addsf3x>
 8c4:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_round>
 8c8:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_pscA>
 8cc:	38 f0       	brcs	.+14     	; 0x8dc <__addsf3+0x20>
 8ce:	0e 94 32 05 	call	0xa64	; 0xa64 <__fp_pscB>
 8d2:	20 f0       	brcs	.+8      	; 0x8dc <__addsf3+0x20>
 8d4:	39 f4       	brne	.+14     	; 0x8e4 <__addsf3+0x28>
 8d6:	9f 3f       	cpi	r25, 0xFF	; 255
 8d8:	19 f4       	brne	.+6      	; 0x8e0 <__addsf3+0x24>
 8da:	26 f4       	brtc	.+8      	; 0x8e4 <__addsf3+0x28>
 8dc:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_nan>
 8e0:	0e f4       	brtc	.+2      	; 0x8e4 <__addsf3+0x28>
 8e2:	e0 95       	com	r30
 8e4:	e7 fb       	bst	r30, 7
 8e6:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_inf>

000008ea <__addsf3x>:
 8ea:	e9 2f       	mov	r30, r25
 8ec:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_split3>
 8f0:	58 f3       	brcs	.-42     	; 0x8c8 <__addsf3+0xc>
 8f2:	ba 17       	cp	r27, r26
 8f4:	62 07       	cpc	r22, r18
 8f6:	73 07       	cpc	r23, r19
 8f8:	84 07       	cpc	r24, r20
 8fa:	95 07       	cpc	r25, r21
 8fc:	20 f0       	brcs	.+8      	; 0x906 <__addsf3x+0x1c>
 8fe:	79 f4       	brne	.+30     	; 0x91e <__addsf3x+0x34>
 900:	a6 f5       	brtc	.+104    	; 0x96a <__addsf3x+0x80>
 902:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_zero>
 906:	0e f4       	brtc	.+2      	; 0x90a <__addsf3x+0x20>
 908:	e0 95       	com	r30
 90a:	0b 2e       	mov	r0, r27
 90c:	ba 2f       	mov	r27, r26
 90e:	a0 2d       	mov	r26, r0
 910:	0b 01       	movw	r0, r22
 912:	b9 01       	movw	r22, r18
 914:	90 01       	movw	r18, r0
 916:	0c 01       	movw	r0, r24
 918:	ca 01       	movw	r24, r20
 91a:	a0 01       	movw	r20, r0
 91c:	11 24       	eor	r1, r1
 91e:	ff 27       	eor	r31, r31
 920:	59 1b       	sub	r21, r25
 922:	99 f0       	breq	.+38     	; 0x94a <__addsf3x+0x60>
 924:	59 3f       	cpi	r21, 0xF9	; 249
 926:	50 f4       	brcc	.+20     	; 0x93c <__addsf3x+0x52>
 928:	50 3e       	cpi	r21, 0xE0	; 224
 92a:	68 f1       	brcs	.+90     	; 0x986 <__addsf3x+0x9c>
 92c:	1a 16       	cp	r1, r26
 92e:	f0 40       	sbci	r31, 0x00	; 0
 930:	a2 2f       	mov	r26, r18
 932:	23 2f       	mov	r18, r19
 934:	34 2f       	mov	r19, r20
 936:	44 27       	eor	r20, r20
 938:	58 5f       	subi	r21, 0xF8	; 248
 93a:	f3 cf       	rjmp	.-26     	; 0x922 <__addsf3x+0x38>
 93c:	46 95       	lsr	r20
 93e:	37 95       	ror	r19
 940:	27 95       	ror	r18
 942:	a7 95       	ror	r26
 944:	f0 40       	sbci	r31, 0x00	; 0
 946:	53 95       	inc	r21
 948:	c9 f7       	brne	.-14     	; 0x93c <__addsf3x+0x52>
 94a:	7e f4       	brtc	.+30     	; 0x96a <__addsf3x+0x80>
 94c:	1f 16       	cp	r1, r31
 94e:	ba 0b       	sbc	r27, r26
 950:	62 0b       	sbc	r22, r18
 952:	73 0b       	sbc	r23, r19
 954:	84 0b       	sbc	r24, r20
 956:	ba f0       	brmi	.+46     	; 0x986 <__addsf3x+0x9c>
 958:	91 50       	subi	r25, 0x01	; 1
 95a:	a1 f0       	breq	.+40     	; 0x984 <__addsf3x+0x9a>
 95c:	ff 0f       	add	r31, r31
 95e:	bb 1f       	adc	r27, r27
 960:	66 1f       	adc	r22, r22
 962:	77 1f       	adc	r23, r23
 964:	88 1f       	adc	r24, r24
 966:	c2 f7       	brpl	.-16     	; 0x958 <__addsf3x+0x6e>
 968:	0e c0       	rjmp	.+28     	; 0x986 <__addsf3x+0x9c>
 96a:	ba 0f       	add	r27, r26
 96c:	62 1f       	adc	r22, r18
 96e:	73 1f       	adc	r23, r19
 970:	84 1f       	adc	r24, r20
 972:	48 f4       	brcc	.+18     	; 0x986 <__addsf3x+0x9c>
 974:	87 95       	ror	r24
 976:	77 95       	ror	r23
 978:	67 95       	ror	r22
 97a:	b7 95       	ror	r27
 97c:	f7 95       	ror	r31
 97e:	9e 3f       	cpi	r25, 0xFE	; 254
 980:	08 f0       	brcs	.+2      	; 0x984 <__addsf3x+0x9a>
 982:	b0 cf       	rjmp	.-160    	; 0x8e4 <__addsf3+0x28>
 984:	93 95       	inc	r25
 986:	88 0f       	add	r24, r24
 988:	08 f0       	brcs	.+2      	; 0x98c <__addsf3x+0xa2>
 98a:	99 27       	eor	r25, r25
 98c:	ee 0f       	add	r30, r30
 98e:	97 95       	ror	r25
 990:	87 95       	ror	r24
 992:	08 95       	ret

00000994 <__cmpsf2>:
 994:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fp_cmp>
 998:	08 f4       	brcc	.+2      	; 0x99c <__cmpsf2+0x8>
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	08 95       	ret

0000099e <__fixunssfsi>:
 99e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__fp_splitA>
 9a2:	88 f0       	brcs	.+34     	; 0x9c6 <__fixunssfsi+0x28>
 9a4:	9f 57       	subi	r25, 0x7F	; 127
 9a6:	98 f0       	brcs	.+38     	; 0x9ce <__fixunssfsi+0x30>
 9a8:	b9 2f       	mov	r27, r25
 9aa:	99 27       	eor	r25, r25
 9ac:	b7 51       	subi	r27, 0x17	; 23
 9ae:	b0 f0       	brcs	.+44     	; 0x9dc <__fixunssfsi+0x3e>
 9b0:	e1 f0       	breq	.+56     	; 0x9ea <__fixunssfsi+0x4c>
 9b2:	66 0f       	add	r22, r22
 9b4:	77 1f       	adc	r23, r23
 9b6:	88 1f       	adc	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	1a f0       	brmi	.+6      	; 0x9c2 <__fixunssfsi+0x24>
 9bc:	ba 95       	dec	r27
 9be:	c9 f7       	brne	.-14     	; 0x9b2 <__fixunssfsi+0x14>
 9c0:	14 c0       	rjmp	.+40     	; 0x9ea <__fixunssfsi+0x4c>
 9c2:	b1 30       	cpi	r27, 0x01	; 1
 9c4:	91 f0       	breq	.+36     	; 0x9ea <__fixunssfsi+0x4c>
 9c6:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fp_zero>
 9ca:	b1 e0       	ldi	r27, 0x01	; 1
 9cc:	08 95       	ret
 9ce:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_zero>
 9d2:	67 2f       	mov	r22, r23
 9d4:	78 2f       	mov	r23, r24
 9d6:	88 27       	eor	r24, r24
 9d8:	b8 5f       	subi	r27, 0xF8	; 248
 9da:	39 f0       	breq	.+14     	; 0x9ea <__fixunssfsi+0x4c>
 9dc:	b9 3f       	cpi	r27, 0xF9	; 249
 9de:	cc f3       	brlt	.-14     	; 0x9d2 <__fixunssfsi+0x34>
 9e0:	86 95       	lsr	r24
 9e2:	77 95       	ror	r23
 9e4:	67 95       	ror	r22
 9e6:	b3 95       	inc	r27
 9e8:	d9 f7       	brne	.-10     	; 0x9e0 <__fixunssfsi+0x42>
 9ea:	3e f4       	brtc	.+14     	; 0x9fa <__fixunssfsi+0x5c>
 9ec:	90 95       	com	r25
 9ee:	80 95       	com	r24
 9f0:	70 95       	com	r23
 9f2:	61 95       	neg	r22
 9f4:	7f 4f       	sbci	r23, 0xFF	; 255
 9f6:	8f 4f       	sbci	r24, 0xFF	; 255
 9f8:	9f 4f       	sbci	r25, 0xFF	; 255
 9fa:	08 95       	ret

000009fc <__fp_cmp>:
 9fc:	99 0f       	add	r25, r25
 9fe:	00 08       	sbc	r0, r0
 a00:	55 0f       	add	r21, r21
 a02:	aa 0b       	sbc	r26, r26
 a04:	e0 e8       	ldi	r30, 0x80	; 128
 a06:	fe ef       	ldi	r31, 0xFE	; 254
 a08:	16 16       	cp	r1, r22
 a0a:	17 06       	cpc	r1, r23
 a0c:	e8 07       	cpc	r30, r24
 a0e:	f9 07       	cpc	r31, r25
 a10:	c0 f0       	brcs	.+48     	; 0xa42 <__fp_cmp+0x46>
 a12:	12 16       	cp	r1, r18
 a14:	13 06       	cpc	r1, r19
 a16:	e4 07       	cpc	r30, r20
 a18:	f5 07       	cpc	r31, r21
 a1a:	98 f0       	brcs	.+38     	; 0xa42 <__fp_cmp+0x46>
 a1c:	62 1b       	sub	r22, r18
 a1e:	73 0b       	sbc	r23, r19
 a20:	84 0b       	sbc	r24, r20
 a22:	95 0b       	sbc	r25, r21
 a24:	39 f4       	brne	.+14     	; 0xa34 <__fp_cmp+0x38>
 a26:	0a 26       	eor	r0, r26
 a28:	61 f0       	breq	.+24     	; 0xa42 <__fp_cmp+0x46>
 a2a:	23 2b       	or	r18, r19
 a2c:	24 2b       	or	r18, r20
 a2e:	25 2b       	or	r18, r21
 a30:	21 f4       	brne	.+8      	; 0xa3a <__fp_cmp+0x3e>
 a32:	08 95       	ret
 a34:	0a 26       	eor	r0, r26
 a36:	09 f4       	brne	.+2      	; 0xa3a <__fp_cmp+0x3e>
 a38:	a1 40       	sbci	r26, 0x01	; 1
 a3a:	a6 95       	lsr	r26
 a3c:	8f ef       	ldi	r24, 0xFF	; 255
 a3e:	81 1d       	adc	r24, r1
 a40:	81 1d       	adc	r24, r1
 a42:	08 95       	ret

00000a44 <__fp_inf>:
 a44:	97 f9       	bld	r25, 7
 a46:	9f 67       	ori	r25, 0x7F	; 127
 a48:	80 e8       	ldi	r24, 0x80	; 128
 a4a:	70 e0       	ldi	r23, 0x00	; 0
 a4c:	60 e0       	ldi	r22, 0x00	; 0
 a4e:	08 95       	ret

00000a50 <__fp_nan>:
 a50:	9f ef       	ldi	r25, 0xFF	; 255
 a52:	80 ec       	ldi	r24, 0xC0	; 192
 a54:	08 95       	ret

00000a56 <__fp_pscA>:
 a56:	00 24       	eor	r0, r0
 a58:	0a 94       	dec	r0
 a5a:	16 16       	cp	r1, r22
 a5c:	17 06       	cpc	r1, r23
 a5e:	18 06       	cpc	r1, r24
 a60:	09 06       	cpc	r0, r25
 a62:	08 95       	ret

00000a64 <__fp_pscB>:
 a64:	00 24       	eor	r0, r0
 a66:	0a 94       	dec	r0
 a68:	12 16       	cp	r1, r18
 a6a:	13 06       	cpc	r1, r19
 a6c:	14 06       	cpc	r1, r20
 a6e:	05 06       	cpc	r0, r21
 a70:	08 95       	ret

00000a72 <__fp_round>:
 a72:	09 2e       	mov	r0, r25
 a74:	03 94       	inc	r0
 a76:	00 0c       	add	r0, r0
 a78:	11 f4       	brne	.+4      	; 0xa7e <__fp_round+0xc>
 a7a:	88 23       	and	r24, r24
 a7c:	52 f0       	brmi	.+20     	; 0xa92 <__fp_round+0x20>
 a7e:	bb 0f       	add	r27, r27
 a80:	40 f4       	brcc	.+16     	; 0xa92 <__fp_round+0x20>
 a82:	bf 2b       	or	r27, r31
 a84:	11 f4       	brne	.+4      	; 0xa8a <__fp_round+0x18>
 a86:	60 ff       	sbrs	r22, 0
 a88:	04 c0       	rjmp	.+8      	; 0xa92 <__fp_round+0x20>
 a8a:	6f 5f       	subi	r22, 0xFF	; 255
 a8c:	7f 4f       	sbci	r23, 0xFF	; 255
 a8e:	8f 4f       	sbci	r24, 0xFF	; 255
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	08 95       	ret

00000a94 <__fp_split3>:
 a94:	57 fd       	sbrc	r21, 7
 a96:	90 58       	subi	r25, 0x80	; 128
 a98:	44 0f       	add	r20, r20
 a9a:	55 1f       	adc	r21, r21
 a9c:	59 f0       	breq	.+22     	; 0xab4 <__fp_splitA+0x10>
 a9e:	5f 3f       	cpi	r21, 0xFF	; 255
 aa0:	71 f0       	breq	.+28     	; 0xabe <__fp_splitA+0x1a>
 aa2:	47 95       	ror	r20

00000aa4 <__fp_splitA>:
 aa4:	88 0f       	add	r24, r24
 aa6:	97 fb       	bst	r25, 7
 aa8:	99 1f       	adc	r25, r25
 aaa:	61 f0       	breq	.+24     	; 0xac4 <__fp_splitA+0x20>
 aac:	9f 3f       	cpi	r25, 0xFF	; 255
 aae:	79 f0       	breq	.+30     	; 0xace <__fp_splitA+0x2a>
 ab0:	87 95       	ror	r24
 ab2:	08 95       	ret
 ab4:	12 16       	cp	r1, r18
 ab6:	13 06       	cpc	r1, r19
 ab8:	14 06       	cpc	r1, r20
 aba:	55 1f       	adc	r21, r21
 abc:	f2 cf       	rjmp	.-28     	; 0xaa2 <__fp_split3+0xe>
 abe:	46 95       	lsr	r20
 ac0:	f1 df       	rcall	.-30     	; 0xaa4 <__fp_splitA>
 ac2:	08 c0       	rjmp	.+16     	; 0xad4 <__fp_splitA+0x30>
 ac4:	16 16       	cp	r1, r22
 ac6:	17 06       	cpc	r1, r23
 ac8:	18 06       	cpc	r1, r24
 aca:	99 1f       	adc	r25, r25
 acc:	f1 cf       	rjmp	.-30     	; 0xab0 <__fp_splitA+0xc>
 ace:	86 95       	lsr	r24
 ad0:	71 05       	cpc	r23, r1
 ad2:	61 05       	cpc	r22, r1
 ad4:	08 94       	sec
 ad6:	08 95       	ret

00000ad8 <__fp_zero>:
 ad8:	e8 94       	clt

00000ada <__fp_szero>:
 ada:	bb 27       	eor	r27, r27
 adc:	66 27       	eor	r22, r22
 ade:	77 27       	eor	r23, r23
 ae0:	cb 01       	movw	r24, r22
 ae2:	97 f9       	bld	r25, 7
 ae4:	08 95       	ret

00000ae6 <__gesf2>:
 ae6:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fp_cmp>
 aea:	08 f4       	brcc	.+2      	; 0xaee <__gesf2+0x8>
 aec:	8f ef       	ldi	r24, 0xFF	; 255
 aee:	08 95       	ret

00000af0 <__mulsf3>:
 af0:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3x>
 af4:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_round>
 af8:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_pscA>
 afc:	38 f0       	brcs	.+14     	; 0xb0c <__mulsf3+0x1c>
 afe:	0e 94 32 05 	call	0xa64	; 0xa64 <__fp_pscB>
 b02:	20 f0       	brcs	.+8      	; 0xb0c <__mulsf3+0x1c>
 b04:	95 23       	and	r25, r21
 b06:	11 f0       	breq	.+4      	; 0xb0c <__mulsf3+0x1c>
 b08:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_inf>
 b0c:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_nan>
 b10:	11 24       	eor	r1, r1
 b12:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_szero>

00000b16 <__mulsf3x>:
 b16:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_split3>
 b1a:	70 f3       	brcs	.-36     	; 0xaf8 <__mulsf3+0x8>

00000b1c <__mulsf3_pse>:
 b1c:	95 9f       	mul	r25, r21
 b1e:	c1 f3       	breq	.-16     	; 0xb10 <__mulsf3+0x20>
 b20:	95 0f       	add	r25, r21
 b22:	50 e0       	ldi	r21, 0x00	; 0
 b24:	55 1f       	adc	r21, r21
 b26:	62 9f       	mul	r22, r18
 b28:	f0 01       	movw	r30, r0
 b2a:	72 9f       	mul	r23, r18
 b2c:	bb 27       	eor	r27, r27
 b2e:	f0 0d       	add	r31, r0
 b30:	b1 1d       	adc	r27, r1
 b32:	63 9f       	mul	r22, r19
 b34:	aa 27       	eor	r26, r26
 b36:	f0 0d       	add	r31, r0
 b38:	b1 1d       	adc	r27, r1
 b3a:	aa 1f       	adc	r26, r26
 b3c:	64 9f       	mul	r22, r20
 b3e:	66 27       	eor	r22, r22
 b40:	b0 0d       	add	r27, r0
 b42:	a1 1d       	adc	r26, r1
 b44:	66 1f       	adc	r22, r22
 b46:	82 9f       	mul	r24, r18
 b48:	22 27       	eor	r18, r18
 b4a:	b0 0d       	add	r27, r0
 b4c:	a1 1d       	adc	r26, r1
 b4e:	62 1f       	adc	r22, r18
 b50:	73 9f       	mul	r23, r19
 b52:	b0 0d       	add	r27, r0
 b54:	a1 1d       	adc	r26, r1
 b56:	62 1f       	adc	r22, r18
 b58:	83 9f       	mul	r24, r19
 b5a:	a0 0d       	add	r26, r0
 b5c:	61 1d       	adc	r22, r1
 b5e:	22 1f       	adc	r18, r18
 b60:	74 9f       	mul	r23, r20
 b62:	33 27       	eor	r19, r19
 b64:	a0 0d       	add	r26, r0
 b66:	61 1d       	adc	r22, r1
 b68:	23 1f       	adc	r18, r19
 b6a:	84 9f       	mul	r24, r20
 b6c:	60 0d       	add	r22, r0
 b6e:	21 1d       	adc	r18, r1
 b70:	82 2f       	mov	r24, r18
 b72:	76 2f       	mov	r23, r22
 b74:	6a 2f       	mov	r22, r26
 b76:	11 24       	eor	r1, r1
 b78:	9f 57       	subi	r25, 0x7F	; 127
 b7a:	50 40       	sbci	r21, 0x00	; 0
 b7c:	9a f0       	brmi	.+38     	; 0xba4 <__mulsf3_pse+0x88>
 b7e:	f1 f0       	breq	.+60     	; 0xbbc <__mulsf3_pse+0xa0>
 b80:	88 23       	and	r24, r24
 b82:	4a f0       	brmi	.+18     	; 0xb96 <__mulsf3_pse+0x7a>
 b84:	ee 0f       	add	r30, r30
 b86:	ff 1f       	adc	r31, r31
 b88:	bb 1f       	adc	r27, r27
 b8a:	66 1f       	adc	r22, r22
 b8c:	77 1f       	adc	r23, r23
 b8e:	88 1f       	adc	r24, r24
 b90:	91 50       	subi	r25, 0x01	; 1
 b92:	50 40       	sbci	r21, 0x00	; 0
 b94:	a9 f7       	brne	.-22     	; 0xb80 <__mulsf3_pse+0x64>
 b96:	9e 3f       	cpi	r25, 0xFE	; 254
 b98:	51 05       	cpc	r21, r1
 b9a:	80 f0       	brcs	.+32     	; 0xbbc <__mulsf3_pse+0xa0>
 b9c:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_inf>
 ba0:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_szero>
 ba4:	5f 3f       	cpi	r21, 0xFF	; 255
 ba6:	e4 f3       	brlt	.-8      	; 0xba0 <__mulsf3_pse+0x84>
 ba8:	98 3e       	cpi	r25, 0xE8	; 232
 baa:	d4 f3       	brlt	.-12     	; 0xba0 <__mulsf3_pse+0x84>
 bac:	86 95       	lsr	r24
 bae:	77 95       	ror	r23
 bb0:	67 95       	ror	r22
 bb2:	b7 95       	ror	r27
 bb4:	f7 95       	ror	r31
 bb6:	e7 95       	ror	r30
 bb8:	9f 5f       	subi	r25, 0xFF	; 255
 bba:	c1 f7       	brne	.-16     	; 0xbac <__mulsf3_pse+0x90>
 bbc:	fe 2b       	or	r31, r30
 bbe:	88 0f       	add	r24, r24
 bc0:	91 1d       	adc	r25, r1
 bc2:	96 95       	lsr	r25
 bc4:	87 95       	ror	r24
 bc6:	97 f9       	bld	r25, 7
 bc8:	08 95       	ret

00000bca <_exit>:
 bca:	f8 94       	cli

00000bcc <__stop_program>:
 bcc:	ff cf       	rjmp	.-2      	; 0xbcc <__stop_program>
