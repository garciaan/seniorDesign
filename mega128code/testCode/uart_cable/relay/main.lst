
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800100  000005d4  00000648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001c08  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001177  00000000  00000000  00002364  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000034db  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000034ec  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000780  00000000  00000000  00003528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00003ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  000043c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  000043dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 4c 02 	call	0x498	; 0x498 <main>
  b6:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <strobe_lcd>:
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
  be:	e2 e6       	ldi	r30, 0x62	; 98
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
    PORTF &= ~0x08;
  c8:	80 81       	ld	r24, Z
  ca:	87 7f       	andi	r24, 0xF7	; 247
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <clear_display>
    SPDR = 0x00;    //command, not data
  d4:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
  d6:	77 9b       	sbis	0x0e, 7	; 14
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
  de:	77 9b       	sbis	0x0e, 7	; 14
  e0:	fe cf       	rjmp	.-4      	; 0xde <clear_display+0xe>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
  e2:	80 91 62 00 	lds	r24, 0x0062
  e6:	88 60       	ori	r24, 0x08	; 8
  e8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
  ec:	80 91 62 00 	lds	r24, 0x0062
  f0:	87 7f       	andi	r24, 0xF7	; 247
  f2:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	8f e9       	ldi	r24, 0x9F	; 159
  f8:	98 e2       	ldi	r25, 0x28	; 40
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <clear_display+0x2a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <clear_display+0x30>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 104:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 106:	77 9b       	sbis	0x0e, 7	; 14
 108:	fe cf       	rjmp	.-4      	; 0x106 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
 10a:	80 ec       	ldi	r24, 0xC0	; 192
 10c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 10e:	77 9b       	sbis	0x0e, 7	; 14
 110:	fe cf       	rjmp	.-4      	; 0x10e <home_line2+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 112:	80 91 62 00 	lds	r24, 0x0062
 116:	88 60       	ori	r24, 0x08	; 8
 118:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 11c:	80 91 62 00 	lds	r24, 0x0062
 120:	87 7f       	andi	r24, 0xF7	; 247
 122:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	85 ec       	ldi	r24, 0xC5	; 197
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <home_line2+0x24>
 12c:	00 00       	nop
 12e:	08 95       	ret

00000130 <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 134:	77 9b       	sbis	0x0e, 7	; 14
 136:	fe cf       	rjmp	.-4      	; 0x134 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
 138:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 13a:	77 9b       	sbis	0x0e, 7	; 14
 13c:	fe cf       	rjmp	.-4      	; 0x13a <char2lcd+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 13e:	80 91 62 00 	lds	r24, 0x0062
 142:	88 60       	ori	r24, 0x08	; 8
 144:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 148:	80 91 62 00 	lds	r24, 0x0062
 14c:	87 7f       	andi	r24, 0xF7	; 247
 14e:	80 93 62 00 	sts	0x0062, r24
 152:	85 ec       	ldi	r24, 0xC5	; 197
 154:	8a 95       	dec	r24
 156:	f1 f7       	brne	.-4      	; 0x154 <char2lcd+0x24>
 158:	00 00       	nop
 15a:	08 95       	ret

0000015c <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	fc 01       	movw	r30, r24
 162:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
 168:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 16a:	77 9b       	sbis	0x0e, 7	; 14
 16c:	fe cf       	rjmp	.-4      	; 0x16a <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
 16e:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 170:	77 9b       	sbis	0x0e, 7	; 14
 172:	fe cf       	rjmp	.-4      	; 0x170 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
 174:	8d 91       	ld	r24, X+
 176:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 178:	77 9b       	sbis	0x0e, 7	; 14
 17a:	fe cf       	rjmp	.-4      	; 0x178 <string2lcd+0x1c>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 17c:	90 91 62 00 	lds	r25, 0x0062
 180:	98 60       	ori	r25, 0x08	; 8
 182:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
 186:	90 91 62 00 	lds	r25, 0x0062
 18a:	97 7f       	andi	r25, 0xF7	; 247
 18c:	90 93 62 00 	sts	0x0062, r25
 190:	85 ec       	ldi	r24, 0xC5	; 197
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <string2lcd+0x36>
 196:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
 198:	4f 5f       	subi	r20, 0xFF	; 255
 19a:	5f 4f       	sbci	r21, 0xFF	; 255
 19c:	ef 01       	movw	r28, r30
 19e:	09 90       	ld	r0, Y+
 1a0:	00 20       	and	r0, r0
 1a2:	e9 f7       	brne	.-6      	; 0x19e <string2lcd+0x42>
 1a4:	9e 01       	movw	r18, r28
 1a6:	2e 1b       	sub	r18, r30
 1a8:	3f 0b       	sbc	r19, r31
 1aa:	22 50       	subi	r18, 0x02	; 2
 1ac:	31 09       	sbc	r19, r1
 1ae:	24 17       	cp	r18, r20
 1b0:	35 07       	cpc	r19, r21
 1b2:	d8 f6       	brcc	.-74     	; 0x16a <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 1ba:	e1 e6       	ldi	r30, 0x61	; 97
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
 1c4:	88 b3       	in	r24, 0x18	; 24
 1c6:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 1c8:	87 b3       	in	r24, 0x17	; 23
 1ca:	87 60       	ori	r24, 0x07	; 7
 1cc:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 1ce:	80 e5       	ldi	r24, 0x50	; 80
 1d0:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	8e b9       	out	0x0e, r24	; 14
 1d6:	08 95       	ret

000001d8 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	8f e5       	ldi	r24, 0x5F	; 95
 1da:	9a ee       	ldi	r25, 0xEA	; 234
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_init+0x4>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_init+0xa>
 1e2:	00 00       	nop
 1e4:	23 e0       	ldi	r18, 0x03	; 3
 1e6:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
 1e8:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
 1ea:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 1ec:	77 9b       	sbis	0x0e, 7	; 14
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <lcd_init+0x14>
        SPDR = 0x30;
 1f0:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 1f2:	77 9b       	sbis	0x0e, 7	; 14
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <lcd_init+0x1a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 1f6:	80 91 62 00 	lds	r24, 0x0062
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 200:	80 91 62 00 	lds	r24, 0x0062
 204:	87 7f       	andi	r24, 0xF7	; 247
 206:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	85 ec       	ldi	r24, 0xC5	; 197
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_init+0x34>
 210:	00 00       	nop
 212:	21 50       	subi	r18, 0x01	; 1
 214:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
 216:	49 f7       	brne	.-46     	; 0x1ea <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
 218:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 21a:	77 9b       	sbis	0x0e, 7	; 14
 21c:	fe cf       	rjmp	.-4      	; 0x21a <lcd_init+0x42>
    SPDR = 0x38;
 21e:	88 e3       	ldi	r24, 0x38	; 56
 220:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 222:	77 9b       	sbis	0x0e, 7	; 14
 224:	fe cf       	rjmp	.-4      	; 0x222 <lcd_init+0x4a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 226:	80 91 62 00 	lds	r24, 0x0062
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 230:	80 91 62 00 	lds	r24, 0x0062
 234:	87 7f       	andi	r24, 0xF7	; 247
 236:	80 93 62 00 	sts	0x0062, r24
 23a:	95 ec       	ldi	r25, 0xC5	; 197
 23c:	9a 95       	dec	r25
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_init+0x64>
 240:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 242:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 244:	77 9b       	sbis	0x0e, 7	; 14
 246:	fe cf       	rjmp	.-4      	; 0x244 <lcd_init+0x6c>
    SPDR = 0x08;
 248:	88 e0       	ldi	r24, 0x08	; 8
 24a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 24c:	77 9b       	sbis	0x0e, 7	; 14
 24e:	fe cf       	rjmp	.-4      	; 0x24c <lcd_init+0x74>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 250:	80 91 62 00 	lds	r24, 0x0062
 254:	88 60       	ori	r24, 0x08	; 8
 256:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 25a:	80 91 62 00 	lds	r24, 0x0062
 25e:	87 7f       	andi	r24, 0xF7	; 247
 260:	80 93 62 00 	sts	0x0062, r24
 264:	85 ec       	ldi	r24, 0xC5	; 197
 266:	8a 95       	dec	r24
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_init+0x8e>
 26a:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 26c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 26e:	77 9b       	sbis	0x0e, 7	; 14
 270:	fe cf       	rjmp	.-4      	; 0x26e <lcd_init+0x96>
    SPDR = 0x01;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 276:	77 9b       	sbis	0x0e, 7	; 14
 278:	fe cf       	rjmp	.-4      	; 0x276 <lcd_init+0x9e>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 27a:	80 91 62 00 	lds	r24, 0x0062
 27e:	88 60       	ori	r24, 0x08	; 8
 280:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 284:	80 91 62 00 	lds	r24, 0x0062
 288:	87 7f       	andi	r24, 0xF7	; 247
 28a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	98 e1       	ldi	r25, 0x18	; 24
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <lcd_init+0xba>
 296:	00 c0       	rjmp	.+0      	; 0x298 <lcd_init+0xc0>
 298:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
 29a:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 29c:	77 9b       	sbis	0x0e, 7	; 14
 29e:	fe cf       	rjmp	.-4      	; 0x29c <lcd_init+0xc4>
    SPDR = 0x06;
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2a4:	77 9b       	sbis	0x0e, 7	; 14
 2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <lcd_init+0xcc>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 2a8:	80 91 62 00 	lds	r24, 0x0062
 2ac:	88 60       	ori	r24, 0x08	; 8
 2ae:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 2b2:	80 91 62 00 	lds	r24, 0x0062
 2b6:	87 7f       	andi	r24, 0xF7	; 247
 2b8:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2bc:	95 ec       	ldi	r25, 0xC5	; 197
 2be:	9a 95       	dec	r25
 2c0:	f1 f7       	brne	.-4      	; 0x2be <lcd_init+0xe6>
 2c2:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 2c4:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2c6:	77 9b       	sbis	0x0e, 7	; 14
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <lcd_init+0xee>
    SPDR = 0x0E;
 2ca:	8e e0       	ldi	r24, 0x0E	; 14
 2cc:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2ce:	77 9b       	sbis	0x0e, 7	; 14
 2d0:	fe cf       	rjmp	.-4      	; 0x2ce <lcd_init+0xf6>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 2d2:	80 91 62 00 	lds	r24, 0x0062
 2d6:	88 60       	ori	r24, 0x08	; 8
 2d8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 2dc:	80 91 62 00 	lds	r24, 0x0062
 2e0:	87 7f       	andi	r24, 0xF7	; 247
 2e2:	80 93 62 00 	sts	0x0062, r24
 2e6:	85 ec       	ldi	r24, 0xC5	; 197
 2e8:	8a 95       	dec	r24
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_init+0x110>
 2ec:	00 00       	nop
 2ee:	08 95       	ret

000002f0 <USART1_Init>:
#include "uart.h"


void USART1_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
 2f0:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
 2f4:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 2f8:	88 e1       	ldi	r24, 0x18	; 24
 2fa:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (3<<UCSZ10);
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	81 ee       	ldi	r24, 0xE1	; 225
 308:	94 e0       	ldi	r25, 0x04	; 4
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <USART1_Init+0x1a>
 312:	00 c0       	rjmp	.+0      	; 0x314 <USART1_Init+0x24>
 314:	00 00       	nop
 316:	08 95       	ret

00000318 <USART1_Transmit>:
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 318:	90 91 9b 00 	lds	r25, 0x009B
 31c:	95 ff       	sbrs	r25, 5
 31e:	fc cf       	rjmp	.-8      	; 0x318 <USART1_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 320:	80 93 9c 00 	sts	0x009C, r24
 324:	08 95       	ret

00000326 <USART1_send_string>:
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 326:	fc 01       	movw	r30, r24
 328:	20 81       	ld	r18, Z
 32a:	22 23       	and	r18, r18
 32c:	51 f0       	breq	.+20     	; 0x342 <USART1_send_string+0x1c>
 32e:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 330:	90 91 9b 00 	lds	r25, 0x009B
 334:	95 ff       	sbrs	r25, 5
 336:	fc cf       	rjmp	.-8      	; 0x330 <USART1_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 338:	20 93 9c 00 	sts	0x009C, r18
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 33c:	21 91       	ld	r18, Z+
 33e:	21 11       	cpse	r18, r1
 340:	f7 cf       	rjmp	.-18     	; 0x330 <USART1_send_string+0xa>
 342:	08 95       	ret

00000344 <USART1_Receive>:
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
 344:	80 91 9b 00 	lds	r24, 0x009B
 348:	87 ff       	sbrs	r24, 7
 34a:	fc cf       	rjmp	.-8      	; 0x344 <USART1_Receive>
    return UDR1;
 34c:	80 91 9c 00 	lds	r24, 0x009C
}
 350:	08 95       	ret

00000352 <USART1_Receive_String>:

void USART1_Receive_String(unsigned char *str){
 352:	dc 01       	movw	r26, r24
 354:	fc 01       	movw	r30, r24
 356:	9c 01       	movw	r18, r24
 358:	2b 5f       	subi	r18, 0xFB	; 251
 35a:	3f 4f       	sbci	r19, 0xFF	; 255
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
 35c:	90 91 9b 00 	lds	r25, 0x009B
 360:	97 ff       	sbrs	r25, 7
 362:	fc cf       	rjmp	.-8      	; 0x35c <USART1_Receive_String+0xa>
    return UDR1;
 364:	90 91 9c 00 	lds	r25, 0x009C

void USART1_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 368:	9e 37       	cpi	r25, 0x7E	; 126
 36a:	29 f0       	breq	.+10     	; 0x376 <USART1_Receive_String+0x24>
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
 36c:	e2 17       	cp	r30, r18
 36e:	f3 07       	cpc	r31, r19
 370:	19 f0       	breq	.+6      	; 0x378 <USART1_Receive_String+0x26>
            str[2] = 75;
            str[3] = END_STRING;
            str[4] = '\0';
            break;
        }
        str[i] = c;
 372:	91 93       	st	Z+, r25
 374:	f3 cf       	rjmp	.-26     	; 0x35c <USART1_Receive_String+0xa>
 376:	08 95       	ret
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
 378:	82 e3       	ldi	r24, 0x32	; 50
 37a:	8c 93       	st	X, r24
            str[1] = 25;
 37c:	89 e1       	ldi	r24, 0x19	; 25
 37e:	11 96       	adiw	r26, 0x01	; 1
 380:	8c 93       	st	X, r24
 382:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 75;
 384:	8b e4       	ldi	r24, 0x4B	; 75
 386:	12 96       	adiw	r26, 0x02	; 2
 388:	8c 93       	st	X, r24
 38a:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
 38c:	8e e7       	ldi	r24, 0x7E	; 126
 38e:	13 96       	adiw	r26, 0x03	; 3
 390:	8c 93       	st	X, r24
 392:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
 394:	14 96       	adiw	r26, 0x04	; 4
 396:	1c 92       	st	X, r1
            break;
 398:	08 95       	ret

0000039a <USART1_flush>:
        str[i] = c;
        ++i;
    }
}

void USART1_flush(){
 39a:	e5 e0       	ldi	r30, 0x05	; 5
 39c:	f2 e0       	ldi	r31, 0x02	; 2
 39e:	96 e4       	ldi	r25, 0x46	; 70
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 3a0:	80 91 9b 00 	lds	r24, 0x009B
 3a4:	85 ff       	sbrs	r24, 5
 3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <USART1_flush+0x6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 3a8:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 3ac:	91 91       	ld	r25, Z+
 3ae:	91 11       	cpse	r25, r1
 3b0:	f7 cf       	rjmp	.-18     	; 0x3a0 <USART1_flush+0x6>
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
 3b2:	80 91 9b 00 	lds	r24, 0x009B
 3b6:	87 ff       	sbrs	r24, 7
 3b8:	0c c0       	rjmp	.+24     	; 0x3d2 <USART1_flush+0x38>
        dummy = UDR1;
 3ba:	90 91 9c 00 	lds	r25, 0x009C
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 3be:	80 91 9b 00 	lds	r24, 0x009B
 3c2:	85 ff       	sbrs	r24, 5
 3c4:	fc cf       	rjmp	.-8      	; 0x3be <USART1_flush+0x24>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 3c6:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
 3ca:	80 91 9b 00 	lds	r24, 0x009B
 3ce:	87 fd       	sbrc	r24, 7
 3d0:	f4 cf       	rjmp	.-24     	; 0x3ba <USART1_flush+0x20>
 3d2:	08 95       	ret

000003d4 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
 3d4:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
 3d8:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 3da:	88 e1       	ldi	r24, 0x18	; 24
 3dc:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */ 
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
 3de:	8e e0       	ldi	r24, 0x0E	; 14
 3e0:	80 93 95 00 	sts	0x0095, r24
 3e4:	2f ef       	ldi	r18, 0xFF	; 255
 3e6:	81 ee       	ldi	r24, 0xE1	; 225
 3e8:	94 e0       	ldi	r25, 0x04	; 4
 3ea:	21 50       	subi	r18, 0x01	; 1
 3ec:	80 40       	sbci	r24, 0x00	; 0
 3ee:	90 40       	sbci	r25, 0x00	; 0
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <USART0_Init+0x16>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <USART0_Init+0x20>
 3f4:	00 00       	nop
 3f6:	08 95       	ret

000003f8 <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
 3f8:	5d 9b       	sbis	0x0b, 5	; 11
 3fa:	fe cf       	rjmp	.-4      	; 0x3f8 <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
 3fc:	8c b9       	out	0x0c, r24	; 12
 3fe:	08 95       	ret

00000400 <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
 400:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
 402:	90 81       	ld	r25, Z
 404:	99 23       	and	r25, r25
 406:	39 f0       	breq	.+14     	; 0x416 <USART0_send_string+0x16>
 408:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
 40a:	5d 9b       	sbis	0x0b, 5	; 11
 40c:	fe cf       	rjmp	.-4      	; 0x40a <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
 40e:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 410:	91 91       	ld	r25, Z+
 412:	91 11       	cpse	r25, r1
 414:	fa cf       	rjmp	.-12     	; 0x40a <USART0_send_string+0xa>
 416:	08 95       	ret

00000418 <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
 418:	80 e8       	ldi	r24, 0x80	; 128
 41a:	9d e8       	ldi	r25, 0x8D	; 141
 41c:	ab e5       	ldi	r26, 0x5B	; 91
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	04 c0       	rjmp	.+8      	; 0x42a <USART0_Receive+0x12>
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	a1 09       	sbc	r26, r1
 426:	b1 09       	sbc	r27, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
 428:	21 f0       	breq	.+8      	; 0x432 <USART0_Receive+0x1a>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
 42a:	5f 9b       	sbis	0x0b, 7	; 11
 42c:	fa cf       	rjmp	.-12     	; 0x422 <USART0_Receive+0xa>
            /* Get and return received data from buffer */ 
            return UDR0;
 42e:	8c b1       	in	r24, 0x0c	; 12
 430:	08 95       	ret
        }
    } while (--timeout);
    return 255;
 432:	8f ef       	ldi	r24, 0xFF	; 255
    /********
    * This is the original
    ************/
    //while (!(UCSR0A & (1<<RXC0)));
    //return UDR0;
}
 434:	08 95       	ret

00000436 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
 436:	dc 01       	movw	r26, r24
 438:	fc 01       	movw	r30, r24
 43a:	9c 01       	movw	r18, r24
 43c:	2b 5f       	subi	r18, 0xFB	; 251
 43e:	3f 4f       	sbci	r19, 0xFF	; 255
 440:	40 e8       	ldi	r20, 0x80	; 128
 442:	5d e8       	ldi	r21, 0x8D	; 141
 444:	6b e5       	ldi	r22, 0x5B	; 91
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	05 c0       	rjmp	.+10     	; 0x454 <USART0_Receive_String+0x1e>
 44a:	41 50       	subi	r20, 0x01	; 1
 44c:	51 09       	sbc	r21, r1
 44e:	61 09       	sbc	r22, r1
 450:	71 09       	sbc	r23, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
 452:	61 f0       	breq	.+24     	; 0x46c <USART0_Receive_String+0x36>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
 454:	5f 9b       	sbis	0x0b, 7	; 11
 456:	f9 cf       	rjmp	.-14     	; 0x44a <USART0_Receive_String+0x14>
            /* Get and return received data from buffer */ 
            return UDR0;
 458:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 45a:	9e 37       	cpi	r25, 0x7E	; 126
 45c:	b1 f0       	breq	.+44     	; 0x48a <USART0_Receive_String+0x54>
        if (c == 255 || i > MAX_STRING_SIZE - 1){
 45e:	9f 3f       	cpi	r25, 0xFF	; 255
 460:	29 f0       	breq	.+10     	; 0x46c <USART0_Receive_String+0x36>
 462:	e2 17       	cp	r30, r18
 464:	f3 07       	cpc	r31, r19
 466:	11 f0       	breq	.+4      	; 0x46c <USART0_Receive_String+0x36>
            str[2] = 50;
            str[3] = END_STRING;
            str[4] = '\0';
            return;
        }
        str[i] = c;
 468:	91 93       	st	Z+, r25
 46a:	ea cf       	rjmp	.-44     	; 0x440 <USART0_Receive_String+0xa>
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
 46c:	82 e3       	ldi	r24, 0x32	; 50
 46e:	8c 93       	st	X, r24
            str[1] = 50;
 470:	11 96       	adiw	r26, 0x01	; 1
 472:	8c 93       	st	X, r24
 474:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
 476:	12 96       	adiw	r26, 0x02	; 2
 478:	8c 93       	st	X, r24
 47a:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
 47c:	8e e7       	ldi	r24, 0x7E	; 126
 47e:	13 96       	adiw	r26, 0x03	; 3
 480:	8c 93       	st	X, r24
 482:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
 484:	14 96       	adiw	r26, 0x04	; 4
 486:	1c 92       	st	X, r1
            return;
 488:	08 95       	ret
 48a:	08 95       	ret

0000048c <USART0_flush>:
 48c:	5f 9b       	sbis	0x0b, 7	; 11
 48e:	03 c0       	rjmp	.+6      	; 0x496 <USART0_flush+0xa>
 490:	8c b1       	in	r24, 0x0c	; 12
 492:	5f 99       	sbic	0x0b, 7	; 11
 494:	fd cf       	rjmp	.-6      	; 0x490 <USART0_flush+0x4>
 496:	08 95       	ret

00000498 <main>:
To run:
* Reset board and follow instructions
* Verify terminal does not report an error
**************************/

int main(){
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	00 d0       	rcall	.+0      	; 0x49e <main+0x6>
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <main+0x8>
 4a0:	1f 92       	push	r1
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0xFF;
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
 4aa:	18 ba       	out	0x18, r1	; 24
    USART0_Init(MYUBRR);
 4ac:	87 e6       	ldi	r24, 0x67	; 103
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <USART0_Init>
    USART0_send_string((unsigned char *)"USART0 (RS232) Initialized \r");
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	0e 94 00 02 	call	0x400	; 0x400 <USART0_send_string>
    //USART0_Transmit('A');
    USART1_Init(MYUBRR);
 4bc:	87 e6       	ldi	r24, 0x67	; 103
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART1_Init>
    USART1_send_string((unsigned char *)"USART1 (Bluetooth) Initialized \r");
 4c4:	8d e1       	ldi	r24, 0x1D	; 29
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 93 01 	call	0x326	; 0x326 <USART1_send_string>

    spi_init();
 4cc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <spi_init>
    lcd_init();
 4d0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_init>
    string2lcd((unsigned char*)"LCD Initialized");
 4d4:	8e e3       	ldi	r24, 0x3E	; 62
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	0e 94 ae 00 	call	0x15c	; 0x15c <string2lcd>
 4dc:	2f ef       	ldi	r18, 0xFF	; 255
 4de:	83 ed       	ldi	r24, 0xD3	; 211
 4e0:	90 e3       	ldi	r25, 0x30	; 48
 4e2:	21 50       	subi	r18, 0x01	; 1
 4e4:	80 40       	sbci	r24, 0x00	; 0
 4e6:	90 40       	sbci	r25, 0x00	; 0
 4e8:	e1 f7       	brne	.-8      	; 0x4e2 <main+0x4a>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <main+0x54>
 4ec:	00 00       	nop
    _delay_ms(1000);

    unsigned char data[size];
    int i;
    for (i = 0; i < size; ++i){
        data[i] = '\0';
 4ee:	19 82       	std	Y+1, r1	; 0x01
 4f0:	1a 82       	std	Y+2, r1	; 0x02
 4f2:	1b 82       	std	Y+3, r1	; 0x03
 4f4:	1d 82       	std	Y+5, r1	; 0x05
    }
    data[size-2] = '~';
 4f6:	8e e7       	ldi	r24, 0x7E	; 126
 4f8:	8c 83       	std	Y+4, r24	; 0x04
    /*****************
    *   THIS IS THE TEST FILE FOR TESTING BOTH UARTS
    *******************/
    while (1){
        
        clear_display();
 4fa:	0e 94 68 00 	call	0xd0	; 0xd0 <clear_display>
        string2lcd((unsigned char *)"Waiting Rec...");
 4fe:	8e e4       	ldi	r24, 0x4E	; 78
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	0e 94 ae 00 	call	0x15c	; 0x15c <string2lcd>
        USART1_send_string((unsigned char *)"Please send string \"123~\" over bluetooth\r");
 506:	8d e5       	ldi	r24, 0x5D	; 93
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	0e 94 93 01 	call	0x326	; 0x326 <USART1_send_string>
        USART1_Receive_String(data);
 50e:	ce 01       	movw	r24, r28
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	0e 94 a9 01 	call	0x352	; 0x352 <USART1_Receive_String>
        home_line2();
 516:	0e 94 82 00 	call	0x104	; 0x104 <home_line2>
        string2lcd(data);
 51a:	ce 01       	movw	r24, r28
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	0e 94 ae 00 	call	0x15c	; 0x15c <string2lcd>
        if (strcmp((char *)data,"123~") != 0){ //Strings are not equal
 522:	67 e8       	ldi	r22, 0x87	; 135
 524:	71 e0       	ldi	r23, 0x01	; 1
 526:	ce 01       	movw	r24, r28
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	0e 94 df 02 	call	0x5be	; 0x5be <strcmp>
 52e:	89 2b       	or	r24, r25
 530:	69 f0       	breq	.+26     	; 0x54c <main+0xb4>
            USART1_send_string((unsigned char *)"Error");
 532:	8c e8       	ldi	r24, 0x8C	; 140
 534:	91 e0       	ldi	r25, 0x01	; 1
        }

        USART0_send_string(data);
        USART0_Receive_String(data);
        if (strcmp((char *)data,"123~") != 0){ //Strings are not equal
            USART1_send_string((unsigned char *)"Error Receiving from drone: ");
 536:	0e 94 93 01 	call	0x326	; 0x326 <USART1_send_string>
            USART1_send_string(data);
 53a:	ce 01       	movw	r24, r28
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	0e 94 93 01 	call	0x326	; 0x326 <USART1_send_string>
            USART1_send_string((unsigned char *)"\r");
 542:	8b e1       	ldi	r24, 0x1B	; 27
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 93 01 	call	0x326	; 0x326 <USART1_send_string>
            continue;
 54a:	d7 cf       	rjmp	.-82     	; 0x4fa <main+0x62>
            USART1_send_string(data);
            USART1_send_string((unsigned char *)"\r");
            continue;
        }

        USART0_send_string(data);
 54c:	ce 01       	movw	r24, r28
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	0e 94 00 02 	call	0x400	; 0x400 <USART0_send_string>
        USART0_Receive_String(data);
 554:	ce 01       	movw	r24, r28
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	0e 94 1b 02 	call	0x436	; 0x436 <USART0_Receive_String>
        if (strcmp((char *)data,"123~") != 0){ //Strings are not equal
 55c:	67 e8       	ldi	r22, 0x87	; 135
 55e:	71 e0       	ldi	r23, 0x01	; 1
 560:	ce 01       	movw	r24, r28
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	0e 94 df 02 	call	0x5be	; 0x5be <strcmp>
 568:	89 2b       	or	r24, r25
 56a:	19 f0       	breq	.+6      	; 0x572 <main+0xda>
            USART1_send_string((unsigned char *)"Error Receiving from drone: ");
 56c:	82 e9       	ldi	r24, 0x92	; 146
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	e2 cf       	rjmp	.-60     	; 0x536 <main+0x9e>
            USART1_send_string(data);
            USART1_send_string((unsigned char *)"\r");
            continue;
        }
        else {
            USART1_send_string((unsigned char *)"SUCCESS: ");
 572:	8f ea       	ldi	r24, 0xAF	; 175
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	0e 94 93 01 	call	0x326	; 0x326 <USART1_send_string>
            USART1_send_string(data);
 57a:	ce 01       	movw	r24, r28
 57c:	01 96       	adiw	r24, 0x01	; 1
 57e:	0e 94 93 01 	call	0x326	; 0x326 <USART1_send_string>
            USART1_send_string((unsigned char *)"\r");
 582:	8b e1       	ldi	r24, 0x1B	; 27
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	0e 94 93 01 	call	0x326	; 0x326 <USART1_send_string>
        }

        USART1_send_string((unsigned char *)"TEST COMPLETE\r-------------------------------\r");
 58a:	89 eb       	ldi	r24, 0xB9	; 185
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	0e 94 93 01 	call	0x326	; 0x326 <USART1_send_string>
        clear_display();
 592:	0e 94 68 00 	call	0xd0	; 0xd0 <clear_display>
        string2lcd((unsigned char *)"Tests Complete");
 596:	88 ee       	ldi	r24, 0xE8	; 232
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 ae 00 	call	0x15c	; 0x15c <string2lcd>
        home_line2();
 59e:	0e 94 82 00 	call	0x104	; 0x104 <home_line2>
        string2lcd((unsigned char *)"Resetting...");
 5a2:	87 ef       	ldi	r24, 0xF7	; 247
 5a4:	91 e0       	ldi	r25, 0x01	; 1
 5a6:	0e 94 ae 00 	call	0x15c	; 0x15c <string2lcd>
 5aa:	2f ef       	ldi	r18, 0xFF	; 255
 5ac:	87 ea       	ldi	r24, 0xA7	; 167
 5ae:	91 e6       	ldi	r25, 0x61	; 97
 5b0:	21 50       	subi	r18, 0x01	; 1
 5b2:	80 40       	sbci	r24, 0x00	; 0
 5b4:	90 40       	sbci	r25, 0x00	; 0
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <main+0x118>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <main+0x122>
 5ba:	00 00       	nop
 5bc:	9e cf       	rjmp	.-196    	; 0x4fa <main+0x62>

000005be <strcmp>:
 5be:	fb 01       	movw	r30, r22
 5c0:	dc 01       	movw	r26, r24
 5c2:	8d 91       	ld	r24, X+
 5c4:	01 90       	ld	r0, Z+
 5c6:	80 19       	sub	r24, r0
 5c8:	01 10       	cpse	r0, r1
 5ca:	d9 f3       	breq	.-10     	; 0x5c2 <strcmp+0x4>
 5cc:	99 0b       	sbc	r25, r25
 5ce:	08 95       	ret

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
