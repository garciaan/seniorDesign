
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000147e  00001512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000147e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800142  00800142  00001554  2**0
                  ALLOC
  3 .stab         00001cbc  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001365  00000000  00000000  00003210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004575  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004588  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  000045c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00004d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  0000545c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00005479  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__ctors_end>
       4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      24:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      28:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      34:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      48:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      4c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      54:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      58:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      5c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      60:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      64:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      68:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      6c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      70:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      74:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      78:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      7c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      80:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      84:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      88:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	00 40       	sbci	r16, 0x00	; 0
      8e:	7a 10       	cpse	r7, r10
      90:	f3 5a       	subi	r31, 0xA3	; 163
      92:	00 a0       	ldd	r0, Z+32	; 0x20
      94:	72 4e       	sbci	r23, 0xE2	; 226
      96:	18 09       	sbc	r17, r8
      98:	00 10       	cpse	r0, r0
      9a:	a5 d4       	rcall	.+2378   	; 0x9e6 <main+0x338>
      9c:	e8 00       	.word	0x00e8	; ????
      9e:	00 e8       	ldi	r16, 0x80	; 128
      a0:	76 48       	sbci	r23, 0x86	; 134
      a2:	17 00       	.word	0x0017	; ????
      a4:	00 e4       	ldi	r16, 0x40	; 64
      a6:	0b 54       	subi	r16, 0x4B	; 75
      a8:	02 00       	.word	0x0002	; ????
      aa:	00 ca       	rjmp	.-3072   	; 0xfffff4ac <__eeprom_end+0xff7ef4ac>
      ac:	9a 3b       	cpi	r25, 0xBA	; 186
      ae:	00 00       	nop
      b0:	00 e1       	ldi	r16, 0x10	; 16
      b2:	f5 05       	cpc	r31, r5
      b4:	00 00       	nop
      b6:	80 96       	adiw	r24, 0x20	; 32
      b8:	98 00       	.word	0x0098	; ????
      ba:	00 00       	nop
      bc:	40 42       	sbci	r20, 0x20	; 32
      be:	0f 00       	.word	0x000f	; ????
      c0:	00 00       	nop
      c2:	a0 86       	std	Z+8, r10	; 0x08
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	10 27       	eor	r17, r16
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	e8 03       	fmulsu	r22, r16
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	64 00       	.word	0x0064	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	0a 00       	.word	0x000a	; ????
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	01 00       	.word	0x0001	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	2c 76       	andi	r18, 0x6C	; 108
      e8:	d8 88       	ldd	r13, Y+16	; 0x10
      ea:	dc 67       	ori	r29, 0x7C	; 124
      ec:	4f 08       	sbc	r4, r15
      ee:	23 df       	rcall	.-442    	; 0xffffff36 <__eeprom_end+0xff7eff36>
      f0:	c1 df       	rcall	.-126    	; 0x74 <__SREG__+0x35>
      f2:	ae 59       	subi	r26, 0x9E	; 158
      f4:	e1 b1       	in	r30, 0x01	; 1
      f6:	b7 96       	adiw	r30, 0x27	; 39
      f8:	e5 e3       	ldi	r30, 0x35	; 53
      fa:	e4 53       	subi	r30, 0x34	; 52
      fc:	c6 3a       	cpi	r28, 0xA6	; 166
      fe:	e6 51       	subi	r30, 0x16	; 22
     100:	99 76       	andi	r25, 0x69	; 105
     102:	96 e8       	ldi	r25, 0x86	; 134
     104:	e6 c2       	rjmp	.+1484   	; 0x6d2 <main+0x24>
     106:	84 26       	eor	r8, r20
     108:	eb 89       	ldd	r30, Y+19	; 0x13
     10a:	8c 9b       	sbis	0x11, 4	; 17
     10c:	62 ed       	ldi	r22, 0xD2	; 210
     10e:	40 7c       	andi	r20, 0xC0	; 192
     110:	6f fc       	.word	0xfc6f	; ????
     112:	ef bc       	out	0x2f, r14	; 47
     114:	9c 9f       	mul	r25, r28
     116:	40 f2       	brcs	.-112    	; 0xa8 <__trampolines_end+0x1c>
     118:	ba a5       	ldd	r27, Y+42	; 0x2a
     11a:	6f a5       	ldd	r22, Y+47	; 0x2f
     11c:	f4 90       	lpm	r15, Z
     11e:	05 5a       	subi	r16, 0xA5	; 165
     120:	2a f7       	brpl	.-54     	; 0xec <__trampolines_end+0x60>
     122:	5c 93       	st	X, r21
     124:	6b 6c       	ori	r22, 0xCB	; 203
     126:	f9 67       	ori	r31, 0x79	; 121
     128:	6d c1       	rjmp	.+730    	; 0x404 <USART_send_string+0x12>
     12a:	1b fc       	.word	0xfc1b	; ????
     12c:	e0 e4       	ldi	r30, 0x40	; 64
     12e:	0d 47       	sbci	r16, 0x7D	; 125
     130:	fe f5       	brtc	.+126    	; 0x1b0 <__do_clear_bss+0x4>
     132:	20 e6       	ldi	r18, 0x60	; 96
     134:	b5 00       	.word	0x00b5	; ????
     136:	d0 ed       	ldi	r29, 0xD0	; 208
     138:	90 2e       	mov	r9, r16
     13a:	03 00       	.word	0x0003	; ????
     13c:	94 35       	cpi	r25, 0x54	; 84
     13e:	77 05       	cpc	r23, r7
     140:	00 80       	ld	r0, Z
     142:	84 1e       	adc	r8, r20
     144:	08 00       	.word	0x0008	; ????
     146:	00 20       	and	r0, r0
     148:	4e 0a       	sbc	r4, r30
     14a:	00 00       	nop
     14c:	00 c8       	rjmp	.-4096   	; 0xfffff14e <__eeprom_end+0xff7ef14e>
     14e:	0c 33       	cpi	r16, 0x3C	; 60
     150:	33 33       	cpi	r19, 0x33	; 51
     152:	33 0f       	add	r19, r19
     154:	98 6e       	ori	r25, 0xE8	; 232
     156:	12 83       	std	Z+2, r17	; 0x02
     158:	11 41       	sbci	r17, 0x11	; 17
     15a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     15c:	21 14       	cp	r2, r1
     15e:	89 3b       	cpi	r24, 0xB9	; 185
     160:	e6 55       	subi	r30, 0x56	; 86
     162:	16 cf       	rjmp	.-468    	; 0xffffff90 <__eeprom_end+0xff7eff90>
     164:	fe e6       	ldi	r31, 0x6E	; 110
     166:	db 18       	sub	r13, r11
     168:	d1 84       	ldd	r13, Z+9	; 0x09
     16a:	4b 38       	cpi	r20, 0x8B	; 139
     16c:	1b f7       	brvc	.-58     	; 0x134 <__trampolines_end+0xa8>
     16e:	7c 1d       	adc	r23, r12
     170:	90 1d       	adc	r25, r0
     172:	a4 bb       	out	0x14, r26	; 20
     174:	e4 24       	eor	r14, r4
     176:	20 32       	cpi	r18, 0x20	; 32
     178:	84 72       	andi	r24, 0x24	; 36
     17a:	5e 22       	and	r5, r30
     17c:	81 00       	.word	0x0081	; ????
     17e:	c9 f1       	breq	.+114    	; 0x1f2 <set_16bitPWM1+0x6>
     180:	24 ec       	ldi	r18, 0xC4	; 196
     182:	a1 e5       	ldi	r26, 0x51	; 81
     184:	3d 27       	eor	r19, r29

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d0 e1       	ldi	r29, 0x10	; 16
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_copy_data>:
     192:	11 e0       	ldi	r17, 0x01	; 1
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	ee e7       	ldi	r30, 0x7E	; 126
     19a:	f4 e1       	ldi	r31, 0x14	; 20
     19c:	00 e0       	ldi	r16, 0x00	; 0
     19e:	0b bf       	out	0x3b, r16	; 59
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x14>
     1a2:	07 90       	elpm	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	a2 34       	cpi	r26, 0x42	; 66
     1a8:	b1 07       	cpc	r27, r17
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0x10>

000001ac <__do_clear_bss>:
     1ac:	21 e0       	ldi	r18, 0x01	; 1
     1ae:	a2 e4       	ldi	r26, 0x42	; 66
     1b0:	b1 e0       	ldi	r27, 0x01	; 1
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
     1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
     1b6:	a4 34       	cpi	r26, 0x44	; 68
     1b8:	b2 07       	cpc	r27, r18
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
     1bc:	0e 94 57 03 	call	0x6ae	; 0x6ae <main>
     1c0:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <_exit>

000001c4 <__bad_interrupt>:
     1c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c8 <init_esc>:

    return 0;
}

void init_esc(){
    PORTB |= (1 << 4);
     1c8:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ca:	8f e6       	ldi	r24, 0x6F	; 111
     1cc:	97 e1       	ldi	r25, 0x17	; 23
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <init_esc+0x6>
     1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <init_esc+0xc>
     1d4:	00 00       	nop
    _delay_us(STOP);
    PORTB &= ~(1 << 4);
     1d6:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d8:	9f ef       	ldi	r25, 0xFF	; 255
     1da:	23 ed       	ldi	r18, 0xD3	; 211
     1dc:	80 e3       	ldi	r24, 0x30	; 48
     1de:	91 50       	subi	r25, 0x01	; 1
     1e0:	20 40       	sbci	r18, 0x00	; 0
     1e2:	80 40       	sbci	r24, 0x00	; 0
     1e4:	e1 f7       	brne	.-8      	; 0x1de <init_esc+0x16>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <init_esc+0x20>
     1e8:	00 00       	nop
     1ea:	08 95       	ret

000001ec <set_16bitPWM1>:
    _delay_ms(1000);
}

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
     1ec:	8f b5       	in	r24, 0x2f	; 47
     1ee:	80 68       	ori	r24, 0x80	; 128
     1f0:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
     1f2:	8f b5       	in	r24, 0x2f	; 47
     1f4:	80 62       	ori	r24, 0x20	; 32
     1f6:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
     1f8:	8f b5       	in	r24, 0x2f	; 47
     1fa:	88 60       	ori	r24, 0x08	; 8
     1fc:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
     1fe:	8f b5       	in	r24, 0x2f	; 47
     200:	82 60       	ori	r24, 0x02	; 2
     202:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
     204:	8e b5       	in	r24, 0x2e	; 46
     206:	88 61       	ori	r24, 0x18	; 24
     208:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
     20a:	8e b5       	in	r24, 0x2e	; 46
     20c:	82 60       	ori	r24, 0x02	; 2
     20e:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     210:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     212:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	3d bd       	out	0x2d, r19	; 45
     21a:	2c bd       	out	0x2c, r18	; 44
    sei();
     21c:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     21e:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
     220:	8f ef       	ldi	r24, 0xFF	; 255
     222:	9f ef       	ldi	r25, 0xFF	; 255
     224:	97 bd       	out	0x27, r25	; 39
     226:	86 bd       	out	0x26, r24	; 38
     228:	2f ef       	ldi	r18, 0xFF	; 255
     22a:	81 ee       	ldi	r24, 0xE1	; 225
     22c:	94 e0       	ldi	r25, 0x04	; 4
     22e:	21 50       	subi	r18, 0x01	; 1
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	90 40       	sbci	r25, 0x00	; 0
     234:	e1 f7       	brne	.-8      	; 0x22e <set_16bitPWM1+0x42>
     236:	00 c0       	rjmp	.+0      	; 0x238 <set_16bitPWM1+0x4c>
     238:	00 00       	nop
     23a:	08 95       	ret

0000023c <TIM16_WriteTCNT1>:
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
     23c:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     23e:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     240:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     242:	3d bd       	out	0x2d, r19	; 45
     244:	2c bd       	out	0x2c, r18	; 44
    sei();
     246:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     248:	9f bf       	out	0x3f, r25	; 63
     24a:	08 95       	ret

0000024c <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
     24c:	4f 92       	push	r4
     24e:	5f 92       	push	r5
     250:	6f 92       	push	r6
     252:	7f 92       	push	r7
     254:	8f 92       	push	r8
     256:	9f 92       	push	r9
     258:	af 92       	push	r10
     25a:	bf 92       	push	r11
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	2b 01       	movw	r4, r22
     26e:	3c 01       	movw	r6, r24
     270:	49 01       	movw	r8, r18
     272:	5a 01       	movw	r10, r20
     274:	67 01       	movw	r12, r14
     276:	78 01       	movw	r14, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	a9 01       	movw	r20, r18
     27e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__cmpsf2>
     282:	87 fd       	sbrc	r24, 7
     284:	62 c0       	rjmp	.+196    	; 0x34a <move+0xfe>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	48 ec       	ldi	r20, 0xC8	; 200
     28c:	52 e4       	ldi	r21, 0x42	; 66
     28e:	c3 01       	movw	r24, r6
     290:	b2 01       	movw	r22, r4
     292:	0e 94 52 07 	call	0xea4	; 0xea4 <__gesf2>
     296:	18 16       	cp	r1, r24
     298:	0c f0       	brlt	.+2      	; 0x29c <move+0x50>
     29a:	61 c0       	rjmp	.+194    	; 0x35e <move+0x112>
     29c:	00 e1       	ldi	r16, 0x10	; 16
     29e:	1e e0       	ldi	r17, 0x0E	; 14
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	a9 01       	movw	r20, r18
     2a6:	c5 01       	movw	r24, r10
     2a8:	b4 01       	movw	r22, r8
     2aa:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__cmpsf2>
     2ae:	87 fd       	sbrc	r24, 7
     2b0:	53 c0       	rjmp	.+166    	; 0x358 <move+0x10c>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	48 ec       	ldi	r20, 0xC8	; 200
     2b8:	52 e4       	ldi	r21, 0x42	; 66
     2ba:	c5 01       	movw	r24, r10
     2bc:	b4 01       	movw	r22, r8
     2be:	0e 94 52 07 	call	0xea4	; 0xea4 <__gesf2>
     2c2:	18 16       	cp	r1, r24
     2c4:	0c f0       	brlt	.+2      	; 0x2c8 <move+0x7c>
     2c6:	5d c0       	rjmp	.+186    	; 0x382 <move+0x136>
     2c8:	c0 e1       	ldi	r28, 0x10	; 16
     2ca:	de e0       	ldi	r29, 0x0E	; 14
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + SATURATE_DIFFERENCE)){
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	a9 01       	movw	r20, r18
     2d2:	c7 01       	movw	r24, r14
     2d4:	b6 01       	movw	r22, r12
     2d6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__cmpsf2>
     2da:	87 fd       	sbrc	r24, 7
     2dc:	39 c0       	rjmp	.+114    	; 0x350 <move+0x104>
        z = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (z > (MAX_INPUT - SATURATE_DIFFERENCE)){
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	48 ec       	ldi	r20, 0xC8	; 200
     2e4:	52 e4       	ldi	r21, 0x42	; 66
     2e6:	c7 01       	movw	r24, r14
     2e8:	b6 01       	movw	r22, r12
     2ea:	0e 94 52 07 	call	0xea4	; 0xea4 <__gesf2>
     2ee:	18 16       	cp	r1, r24
     2f0:	0c f0       	brlt	.+2      	; 0x2f4 <move+0xa8>
     2f2:	59 c0       	rjmp	.+178    	; 0x3a6 <move+0x15a>
     2f4:	c1 2c       	mov	r12, r1
     2f6:	d1 2c       	mov	r13, r1
     2f8:	80 e8       	ldi	r24, 0x80	; 128
     2fa:	e8 2e       	mov	r14, r24
     2fc:	8f e3       	ldi	r24, 0x3F	; 63
     2fe:	f8 2e       	mov	r15, r24

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     300:	66 b5       	in	r22, 0x26	; 38
     302:	77 b5       	in	r23, 0x27	; 39
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
     30c:	a7 01       	movw	r20, r14
     30e:	96 01       	movw	r18, r12
     310:	0e 94 57 07 	call	0xeae	; 0xeae <__mulsf3>
     314:	0e 94 71 06 	call	0xce2	; 0xce2 <__fixunssfsi>
    OCR1A = left_speed;
     318:	1b bd       	out	0x2b, r17	; 43
     31a:	0a bd       	out	0x2a, r16	; 42
    OCR1B = right_speed;
     31c:	d9 bd       	out	0x29, r29	; 41
     31e:	c8 bd       	out	0x28, r28	; 40
    OCR1C = z_speed;
     320:	70 93 79 00 	sts	0x0079, r23
     324:	60 93 78 00 	sts	0x0078, r22
	string2lcd((unsigned char *)utoa(left_speed,(char *)buffer,10));
	home_line2();
	string2lcd((unsigned char *)utoa(right_speed,(char *)buffer,10));
    */

}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	bf 90       	pop	r11
     33a:	af 90       	pop	r10
     33c:	9f 90       	pop	r9
     33e:	8f 90       	pop	r8
     340:	7f 90       	pop	r7
     342:	6f 90       	pop	r6
     344:	5f 90       	pop	r5
     346:	4f 90       	pop	r4
     348:	08 95       	ret
     34a:	00 e6       	ldi	r16, 0x60	; 96
     34c:	19 e0       	ldi	r17, 0x09	; 9
     34e:	a8 cf       	rjmp	.-176    	; 0x2a0 <move+0x54>
     350:	c1 2c       	mov	r12, r1
     352:	d1 2c       	mov	r13, r1
     354:	76 01       	movw	r14, r12
     356:	d4 cf       	rjmp	.-88     	; 0x300 <move+0xb4>
     358:	c0 e6       	ldi	r28, 0x60	; 96
     35a:	d9 e0       	ldi	r29, 0x09	; 9
     35c:	b7 cf       	rjmp	.-146    	; 0x2cc <move+0x80>
     35e:	2b ea       	ldi	r18, 0xAB	; 171
     360:	3a ea       	ldi	r19, 0xAA	; 170
     362:	4a ea       	ldi	r20, 0xAA	; 170
     364:	5d e3       	ldi	r21, 0x3D	; 61
     366:	c3 01       	movw	r24, r6
     368:	b2 01       	movw	r22, r4
     36a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__divsf3>
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	46 e1       	ldi	r20, 0x16	; 22
     374:	55 e4       	ldi	r21, 0x45	; 69
     376:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__addsf3>
     37a:	0e 94 71 06 	call	0xce2	; 0xce2 <__fixunssfsi>
     37e:	8b 01       	movw	r16, r22
     380:	8f cf       	rjmp	.-226    	; 0x2a0 <move+0x54>
     382:	2b ea       	ldi	r18, 0xAB	; 171
     384:	3a ea       	ldi	r19, 0xAA	; 170
     386:	4a ea       	ldi	r20, 0xAA	; 170
     388:	5d e3       	ldi	r21, 0x3D	; 61
     38a:	c5 01       	movw	r24, r10
     38c:	b4 01       	movw	r22, r8
     38e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__divsf3>
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	46 e1       	ldi	r20, 0x16	; 22
     398:	55 e4       	ldi	r21, 0x45	; 69
     39a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__addsf3>
     39e:	0e 94 71 06 	call	0xce2	; 0xce2 <__fixunssfsi>
     3a2:	eb 01       	movw	r28, r22
     3a4:	93 cf       	rjmp	.-218    	; 0x2cc <move+0x80>
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	48 ec       	ldi	r20, 0xC8	; 200
     3ac:	52 e4       	ldi	r21, 0x42	; 66
     3ae:	c7 01       	movw	r24, r14
     3b0:	b6 01       	movw	r22, r12
     3b2:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__divsf3>
     3b6:	6b 01       	movw	r12, r22
     3b8:	7c 01       	movw	r14, r24
     3ba:	a2 cf       	rjmp	.-188    	; 0x300 <move+0xb4>

000003bc <USART_Init>:


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     3bc:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
     3c0:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     3c4:	88 e1       	ldi	r24, 0x18	; 24
     3c6:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
     3ca:	8c e0       	ldi	r24, 0x0C	; 12
     3cc:	80 93 9d 00 	sts	0x009D, r24
     3d0:	2f ef       	ldi	r18, 0xFF	; 255
     3d2:	81 ee       	ldi	r24, 0xE1	; 225
     3d4:	94 e0       	ldi	r25, 0x04	; 4
     3d6:	21 50       	subi	r18, 0x01	; 1
     3d8:	80 40       	sbci	r24, 0x00	; 0
     3da:	90 40       	sbci	r25, 0x00	; 0
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <USART_Init+0x1a>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <USART_Init+0x24>
     3e0:	00 00       	nop
     3e2:	08 95       	ret

000003e4 <USART_Transmit>:
    _delay_ms(100);
}
void USART_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     3e4:	90 91 9b 00 	lds	r25, 0x009B
     3e8:	95 ff       	sbrs	r25, 5
     3ea:	fc cf       	rjmp	.-8      	; 0x3e4 <USART_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     3ec:	80 93 9c 00 	sts	0x009C, r24
     3f0:	08 95       	ret

000003f2 <USART_send_string>:
}

void USART_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 81       	ld	r18, Z
     3f6:	22 23       	and	r18, r18
     3f8:	51 f0       	breq	.+20     	; 0x40e <USART_send_string+0x1c>
     3fa:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
    _delay_ms(100);
}
void USART_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     3fc:	90 91 9b 00 	lds	r25, 0x009B
     400:	95 ff       	sbrs	r25, 5
     402:	fc cf       	rjmp	.-8      	; 0x3fc <USART_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     404:	20 93 9c 00 	sts	0x009C, r18
}

void USART_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     408:	21 91       	ld	r18, Z+
     40a:	21 11       	cpse	r18, r1
     40c:	f7 cf       	rjmp	.-18     	; 0x3fc <USART_send_string+0xa>
     40e:	08 95       	ret

00000410 <USART_Receive>:
        USART_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART_Receive(void){
     410:	80 e2       	ldi	r24, 0x20	; 32
     412:	9e e4       	ldi	r25, 0x4E	; 78
     414:	02 c0       	rjmp	.+4      	; 0x41a <USART_Receive+0xa>
     416:	01 97       	sbiw	r24, 0x01	; 1
    do {
        if((UCSR1A & (1<<RXC1))){
            /* Get and return received data from buffer */ 
            return UDR1;
        }
    } while (--timeout);
     418:	39 f0       	breq	.+14     	; 0x428 <USART_Receive+0x18>

unsigned char USART_Receive(void){
    uint16_t timeout = 20000;
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR1A & (1<<RXC1))){
     41a:	20 91 9b 00 	lds	r18, 0x009B
     41e:	27 ff       	sbrs	r18, 7
     420:	fa cf       	rjmp	.-12     	; 0x416 <USART_Receive+0x6>
            /* Get and return received data from buffer */ 
            return UDR1;
     422:	80 91 9c 00 	lds	r24, 0x009C
     426:	08 95       	ret
        }
    } while (--timeout);
    return -1;
     428:	8f ef       	ldi	r24, 0xFF	; 255
}
     42a:	08 95       	ret

0000042c <USART_Receive_String>:

void USART_Receive_String(unsigned char *str){
     42c:	dc 01       	movw	r26, r24
     42e:	fc 01       	movw	r30, r24
     430:	ac 01       	movw	r20, r24
     432:	4c 59       	subi	r20, 0x9C	; 156
     434:	5f 4f       	sbci	r21, 0xFF	; 255
    int i = 0;
    char c;

    while ((c = USART_Receive()) != '\n'){ //END_STRING == ~ or 0x7E
        if (c == -1){
            str[0] = 50;
     436:	82 e3       	ldi	r24, 0x32	; 50
        if((UCSR1A & (1<<RXC1))){
            /* Get and return received data from buffer */ 
            return UDR1;
        }
    } while (--timeout);
    return -1;
     438:	20 e2       	ldi	r18, 0x20	; 32
     43a:	3e e4       	ldi	r19, 0x4E	; 78
     43c:	03 c0       	rjmp	.+6      	; 0x444 <USART_Receive_String+0x18>
     43e:	21 50       	subi	r18, 0x01	; 1
     440:	31 09       	sbc	r19, r1
    do {
        if((UCSR1A & (1<<RXC1))){
            /* Get and return received data from buffer */ 
            return UDR1;
        }
    } while (--timeout);
     442:	91 f0       	breq	.+36     	; 0x468 <USART_Receive_String+0x3c>

unsigned char USART_Receive(void){
    uint16_t timeout = 20000;
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR1A & (1<<RXC1))){
     444:	90 91 9b 00 	lds	r25, 0x009B
     448:	97 ff       	sbrs	r25, 7
     44a:	f9 cf       	rjmp	.-14     	; 0x43e <USART_Receive_String+0x12>
            /* Get and return received data from buffer */ 
            return UDR1;
     44c:	90 91 9c 00 	lds	r25, 0x009C

void USART_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART_Receive()) != '\n'){ //END_STRING == ~ or 0x7E
     450:	9a 30       	cpi	r25, 0x0A	; 10
     452:	99 f0       	breq	.+38     	; 0x47a <USART_Receive_String+0x4e>
        if (c == -1){
     454:	9f 3f       	cpi	r25, 0xFF	; 255
     456:	49 f0       	breq	.+18     	; 0x46a <USART_Receive_String+0x3e>
            str[0] = 50;
            str[1] = 50;
            str[2] = 50;
        }
        str[i] = c;
     458:	91 93       	st	Z+, r25
        //char2lcd(c);
        //string2lcd(str);
        ++i;
        if (i >= MAX_STRING_SIZE){
     45a:	e4 17       	cp	r30, r20
     45c:	f5 07       	cpc	r31, r21
     45e:	61 f7       	brne	.-40     	; 0x438 <USART_Receive_String+0xc>
            str[MAX_STRING_SIZE - 1] = '\0';
     460:	ad 59       	subi	r26, 0x9D	; 157
     462:	bf 4f       	sbci	r27, 0xFF	; 255
     464:	1c 92       	st	X, r1

            return;
     466:	08 95       	ret
        if((UCSR1A & (1<<RXC1))){
            /* Get and return received data from buffer */ 
            return UDR1;
        }
    } while (--timeout);
    return -1;
     468:	9f ef       	ldi	r25, 0xFF	; 255
    int i = 0;
    char c;

    while ((c = USART_Receive()) != '\n'){ //END_STRING == ~ or 0x7E
        if (c == -1){
            str[0] = 50;
     46a:	8c 93       	st	X, r24
            str[1] = 50;
     46c:	11 96       	adiw	r26, 0x01	; 1
     46e:	8c 93       	st	X, r24
     470:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
     472:	12 96       	adiw	r26, 0x02	; 2
     474:	8c 93       	st	X, r24
     476:	12 97       	sbiw	r26, 0x02	; 2
     478:	ef cf       	rjmp	.-34     	; 0x458 <USART_Receive_String+0x2c>
     47a:	08 95       	ret

0000047c <strobe_lcd>:

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     47c:	e2 e6       	ldi	r30, 0x62	; 98
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	88 60       	ori	r24, 0x08	; 8
     484:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     486:	80 81       	ld	r24, Z
     488:	87 7f       	andi	r24, 0xF7	; 247
     48a:	80 83       	st	Z, r24
     48c:	08 95       	ret

0000048e <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     48e:	77 9b       	sbis	0x0e, 7	; 14
     490:	fe cf       	rjmp	.-4      	; 0x48e <clear_display>
    SPDR = 0x00;    //command, not data
     492:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     494:	77 9b       	sbis	0x0e, 7	; 14
     496:	fe cf       	rjmp	.-4      	; 0x494 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     49c:	77 9b       	sbis	0x0e, 7	; 14
     49e:	fe cf       	rjmp	.-4      	; 0x49c <clear_display+0xe>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     4a0:	80 91 62 00 	lds	r24, 0x0062
     4a4:	88 60       	ori	r24, 0x08	; 8
     4a6:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     4aa:	80 91 62 00 	lds	r24, 0x0062
     4ae:	87 7f       	andi	r24, 0xF7	; 247
     4b0:	80 93 62 00 	sts	0x0062, r24
     4b4:	8f e9       	ldi	r24, 0x9F	; 159
     4b6:	98 e2       	ldi	r25, 0x28	; 40
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <clear_display+0x2a>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <clear_display+0x30>
     4be:	00 00       	nop
     4c0:	08 95       	ret

000004c2 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     4c2:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4c4:	77 9b       	sbis	0x0e, 7	; 14
     4c6:	fe cf       	rjmp	.-4      	; 0x4c4 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     4c8:	80 ec       	ldi	r24, 0xC0	; 192
     4ca:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4cc:	77 9b       	sbis	0x0e, 7	; 14
     4ce:	fe cf       	rjmp	.-4      	; 0x4cc <home_line2+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     4d0:	80 91 62 00 	lds	r24, 0x0062
     4d4:	88 60       	ori	r24, 0x08	; 8
     4d6:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     4da:	80 91 62 00 	lds	r24, 0x0062
     4de:	87 7f       	andi	r24, 0xF7	; 247
     4e0:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e4:	85 ec       	ldi	r24, 0xC5	; 197
     4e6:	8a 95       	dec	r24
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <home_line2+0x24>
     4ea:	00 00       	nop
     4ec:	08 95       	ret

000004ee <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4f2:	77 9b       	sbis	0x0e, 7	; 14
     4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     4f6:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4f8:	77 9b       	sbis	0x0e, 7	; 14
     4fa:	fe cf       	rjmp	.-4      	; 0x4f8 <char2lcd+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     4fc:	80 91 62 00 	lds	r24, 0x0062
     500:	88 60       	ori	r24, 0x08	; 8
     502:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     506:	80 91 62 00 	lds	r24, 0x0062
     50a:	87 7f       	andi	r24, 0xF7	; 247
     50c:	80 93 62 00 	sts	0x0062, r24
     510:	85 ec       	ldi	r24, 0xC5	; 197
     512:	8a 95       	dec	r24
     514:	f1 f7       	brne	.-4      	; 0x512 <char2lcd+0x24>
     516:	00 00       	nop
     518:	08 95       	ret

0000051a <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	fc 01       	movw	r30, r24
     520:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     526:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     528:	77 9b       	sbis	0x0e, 7	; 14
     52a:	fe cf       	rjmp	.-4      	; 0x528 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     52c:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     52e:	77 9b       	sbis	0x0e, 7	; 14
     530:	fe cf       	rjmp	.-4      	; 0x52e <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     532:	8d 91       	ld	r24, X+
     534:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     536:	77 9b       	sbis	0x0e, 7	; 14
     538:	fe cf       	rjmp	.-4      	; 0x536 <string2lcd+0x1c>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     53a:	90 91 62 00 	lds	r25, 0x0062
     53e:	98 60       	ori	r25, 0x08	; 8
     540:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     544:	90 91 62 00 	lds	r25, 0x0062
     548:	97 7f       	andi	r25, 0xF7	; 247
     54a:	90 93 62 00 	sts	0x0062, r25
     54e:	85 ec       	ldi	r24, 0xC5	; 197
     550:	8a 95       	dec	r24
     552:	f1 f7       	brne	.-4      	; 0x550 <string2lcd+0x36>
     554:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     556:	4f 5f       	subi	r20, 0xFF	; 255
     558:	5f 4f       	sbci	r21, 0xFF	; 255
     55a:	ef 01       	movw	r28, r30
     55c:	09 90       	ld	r0, Y+
     55e:	00 20       	and	r0, r0
     560:	e9 f7       	brne	.-6      	; 0x55c <string2lcd+0x42>
     562:	9e 01       	movw	r18, r28
     564:	2e 1b       	sub	r18, r30
     566:	3f 0b       	sbc	r19, r31
     568:	22 50       	subi	r18, 0x02	; 2
     56a:	31 09       	sbc	r19, r1
     56c:	24 17       	cp	r18, r20
     56e:	35 07       	cpc	r19, r21
     570:	d8 f6       	brcc	.-74     	; 0x528 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     578:	e1 e6       	ldi	r30, 0x61	; 97
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 81       	ld	r24, Z
     57e:	88 60       	ori	r24, 0x08	; 8
     580:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     582:	88 b3       	in	r24, 0x18	; 24
     584:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     586:	87 b3       	in	r24, 0x17	; 23
     588:	87 60       	ori	r24, 0x07	; 7
     58a:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     58c:	80 e5       	ldi	r24, 0x50	; 80
     58e:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	8e b9       	out	0x0e, r24	; 14
     594:	08 95       	ret

00000596 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     596:	8f e5       	ldi	r24, 0x5F	; 95
     598:	9a ee       	ldi	r25, 0xEA	; 234
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <lcd_init+0x4>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <lcd_init+0xa>
     5a0:	00 00       	nop
     5a2:	23 e0       	ldi	r18, 0x03	; 3
     5a4:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     5a6:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     5a8:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5aa:	77 9b       	sbis	0x0e, 7	; 14
     5ac:	fe cf       	rjmp	.-4      	; 0x5aa <lcd_init+0x14>
        SPDR = 0x30;
     5ae:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5b0:	77 9b       	sbis	0x0e, 7	; 14
     5b2:	fe cf       	rjmp	.-4      	; 0x5b0 <lcd_init+0x1a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     5b4:	80 91 62 00 	lds	r24, 0x0062
     5b8:	88 60       	ori	r24, 0x08	; 8
     5ba:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     5be:	80 91 62 00 	lds	r24, 0x0062
     5c2:	87 7f       	andi	r24, 0xF7	; 247
     5c4:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c8:	85 ec       	ldi	r24, 0xC5	; 197
     5ca:	8a 95       	dec	r24
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <lcd_init+0x34>
     5ce:	00 00       	nop
     5d0:	21 50       	subi	r18, 0x01	; 1
     5d2:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     5d4:	49 f7       	brne	.-46     	; 0x5a8 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     5d6:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5d8:	77 9b       	sbis	0x0e, 7	; 14
     5da:	fe cf       	rjmp	.-4      	; 0x5d8 <lcd_init+0x42>
    SPDR = 0x38;
     5dc:	88 e3       	ldi	r24, 0x38	; 56
     5de:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5e0:	77 9b       	sbis	0x0e, 7	; 14
     5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <lcd_init+0x4a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     5e4:	80 91 62 00 	lds	r24, 0x0062
     5e8:	88 60       	ori	r24, 0x08	; 8
     5ea:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     5ee:	80 91 62 00 	lds	r24, 0x0062
     5f2:	87 7f       	andi	r24, 0xF7	; 247
     5f4:	80 93 62 00 	sts	0x0062, r24
     5f8:	95 ec       	ldi	r25, 0xC5	; 197
     5fa:	9a 95       	dec	r25
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <lcd_init+0x64>
     5fe:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     600:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     602:	77 9b       	sbis	0x0e, 7	; 14
     604:	fe cf       	rjmp	.-4      	; 0x602 <lcd_init+0x6c>
    SPDR = 0x08;
     606:	88 e0       	ldi	r24, 0x08	; 8
     608:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     60a:	77 9b       	sbis	0x0e, 7	; 14
     60c:	fe cf       	rjmp	.-4      	; 0x60a <lcd_init+0x74>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     60e:	80 91 62 00 	lds	r24, 0x0062
     612:	88 60       	ori	r24, 0x08	; 8
     614:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     618:	80 91 62 00 	lds	r24, 0x0062
     61c:	87 7f       	andi	r24, 0xF7	; 247
     61e:	80 93 62 00 	sts	0x0062, r24
     622:	85 ec       	ldi	r24, 0xC5	; 197
     624:	8a 95       	dec	r24
     626:	f1 f7       	brne	.-4      	; 0x624 <lcd_init+0x8e>
     628:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     62a:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     62c:	77 9b       	sbis	0x0e, 7	; 14
     62e:	fe cf       	rjmp	.-4      	; 0x62c <lcd_init+0x96>
    SPDR = 0x01;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     634:	77 9b       	sbis	0x0e, 7	; 14
     636:	fe cf       	rjmp	.-4      	; 0x634 <lcd_init+0x9e>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     638:	80 91 62 00 	lds	r24, 0x0062
     63c:	88 60       	ori	r24, 0x08	; 8
     63e:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     642:	80 91 62 00 	lds	r24, 0x0062
     646:	87 7f       	andi	r24, 0xF7	; 247
     648:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     64c:	8f ef       	ldi	r24, 0xFF	; 255
     64e:	98 e1       	ldi	r25, 0x18	; 24
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	f1 f7       	brne	.-4      	; 0x650 <lcd_init+0xba>
     654:	00 c0       	rjmp	.+0      	; 0x656 <lcd_init+0xc0>
     656:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
     658:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     65a:	77 9b       	sbis	0x0e, 7	; 14
     65c:	fe cf       	rjmp	.-4      	; 0x65a <lcd_init+0xc4>
    SPDR = 0x06;
     65e:	86 e0       	ldi	r24, 0x06	; 6
     660:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     662:	77 9b       	sbis	0x0e, 7	; 14
     664:	fe cf       	rjmp	.-4      	; 0x662 <lcd_init+0xcc>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     666:	80 91 62 00 	lds	r24, 0x0062
     66a:	88 60       	ori	r24, 0x08	; 8
     66c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     670:	80 91 62 00 	lds	r24, 0x0062
     674:	87 7f       	andi	r24, 0xF7	; 247
     676:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     67a:	95 ec       	ldi	r25, 0xC5	; 197
     67c:	9a 95       	dec	r25
     67e:	f1 f7       	brne	.-4      	; 0x67c <lcd_init+0xe6>
     680:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     682:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     684:	77 9b       	sbis	0x0e, 7	; 14
     686:	fe cf       	rjmp	.-4      	; 0x684 <lcd_init+0xee>
    SPDR = 0x0E;
     688:	8e e0       	ldi	r24, 0x0E	; 14
     68a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     68c:	77 9b       	sbis	0x0e, 7	; 14
     68e:	fe cf       	rjmp	.-4      	; 0x68c <lcd_init+0xf6>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     690:	80 91 62 00 	lds	r24, 0x0062
     694:	88 60       	ori	r24, 0x08	; 8
     696:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     69a:	80 91 62 00 	lds	r24, 0x0062
     69e:	87 7f       	andi	r24, 0xF7	; 247
     6a0:	80 93 62 00 	sts	0x0062, r24
     6a4:	85 ec       	ldi	r24, 0xC5	; 197
     6a6:	8a 95       	dec	r24
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <lcd_init+0x110>
     6aa:	00 00       	nop
     6ac:	08 95       	ret

000006ae <main>:
void init_esc();

uint8_t temp, read_byte;


int main(void){
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	60 97       	sbiw	r28, 0x10	; 16
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
    DDRB = 0xFF;
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
     6c6:	18 ba       	out	0x18, r1	; 24
    DDRD = 0x00;
     6c8:	11 ba       	out	0x11, r1	; 17
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     6ca:	80 91 61 00 	lds	r24, 0x0061
     6ce:	88 60       	ori	r24, 0x08	; 8
     6d0:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initalization for SPI
     6d4:	88 b3       	in	r24, 0x18	; 24
     6d6:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     6d8:	87 b3       	in	r24, 0x17	; 23
     6da:	87 60       	ori	r24, 0x07	; 7
     6dc:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     6de:	80 e5       	ldi	r24, 0x50	; 80
     6e0:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	8e b9       	out	0x0e, r24	; 14
    [2] == z motor power
    [3] == reserved for string terminator
    */

    spi_init();
    lcd_init();
     6e6:	0e 94 cb 02 	call	0x596	; 0x596 <lcd_init>

    //Wait for S1 to be pressed before doing anything, remove this eventually
    string2lcd((unsigned char *)"Press S1");
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
	while (((PIND) & (1 << 0)));
     6f2:	80 99       	sbic	0x10, 0	; 16
     6f4:	fe cf       	rjmp	.-4      	; 0x6f2 <main+0x44>
	clear_display();
     6f6:	0e 94 47 02 	call	0x48e	; 0x48e <clear_display>

    return 0;
}

void init_esc(){
    PORTB |= (1 << 4);
     6fa:	c4 9a       	sbi	0x18, 4	; 24
     6fc:	8f e6       	ldi	r24, 0x6F	; 111
     6fe:	97 e1       	ldi	r25, 0x17	; 23
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <main+0x52>
     704:	00 c0       	rjmp	.+0      	; 0x706 <main+0x58>
     706:	00 00       	nop
    _delay_us(STOP);
    PORTB &= ~(1 << 4);
     708:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70a:	9f ef       	ldi	r25, 0xFF	; 255
     70c:	23 ed       	ldi	r18, 0xD3	; 211
     70e:	80 e3       	ldi	r24, 0x30	; 48
     710:	91 50       	subi	r25, 0x01	; 1
     712:	20 40       	sbci	r18, 0x00	; 0
     714:	80 40       	sbci	r24, 0x00	; 0
     716:	e1 f7       	brne	.-8      	; 0x710 <main+0x62>
     718:	00 c0       	rjmp	.+0      	; 0x71a <main+0x6c>
     71a:	00 00       	nop
    string2lcd((unsigned char *)"Press S1");
	while (((PIND) & (1 << 0)));
	clear_display();

	init_esc();
    set_16bitPWM1();
     71c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <set_16bitPWM1>
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     720:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = (unsigned char)ubrr;
     724:	87 e6       	ldi	r24, 0x67	; 103
     726:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     72a:	88 e1       	ldi	r24, 0x18	; 24
     72c:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
     730:	8c e0       	ldi	r24, 0x0C	; 12
     732:	80 93 9d 00 	sts	0x009D, r24
     736:	9f ef       	ldi	r25, 0xFF	; 255
     738:	21 ee       	ldi	r18, 0xE1	; 225
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	91 50       	subi	r25, 0x01	; 1
     73e:	20 40       	sbci	r18, 0x00	; 0
     740:	80 40       	sbci	r24, 0x00	; 0
     742:	e1 f7       	brne	.-8      	; 0x73c <main+0x8e>
     744:	00 c0       	rjmp	.+0      	; 0x746 <main+0x98>
     746:	00 00       	nop
     748:	9f ef       	ldi	r25, 0xFF	; 255
     74a:	21 ee       	ldi	r18, 0xE1	; 225
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	91 50       	subi	r25, 0x01	; 1
     750:	20 40       	sbci	r18, 0x00	; 0
     752:	80 40       	sbci	r24, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <main+0xa0>
     756:	00 c0       	rjmp	.+0      	; 0x758 <main+0xaa>
     758:	00 00       	nop
	init_esc();
    set_16bitPWM1();
    
    USART_Init(MYUBRR);
    _delay_ms(100);
    float voltage = 0;
     75a:	41 2c       	mov	r4, r1
     75c:	51 2c       	mov	r5, r1
     75e:	32 01       	movw	r6, r4
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    SPDR = 0xC0;   // cursor go home on line 2
     760:	40 ec       	ldi	r20, 0xC0	; 192
     762:	d4 2e       	mov	r13, r20
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
    OCR1A = left_speed;
     764:	58 eb       	ldi	r21, 0xB8	; 184
     766:	25 2e       	mov	r2, r21
     768:	5b e0       	ldi	r21, 0x0B	; 11
     76a:	35 2e       	mov	r3, r21
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
            move(100,100,100);
		}
        else if (!((PIND) & (1 << 4))){
            val = MOTOR_MAX;
            OCR1C = val;
     76c:	68 ee       	ldi	r22, 0xE8	; 232
     76e:	a6 2e       	mov	r10, r22
     770:	60 e8       	ldi	r22, 0x80	; 128
     772:	b6 2e       	mov	r11, r22
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
    OCR1A = left_speed;
     774:	70 e1       	ldi	r23, 0x10	; 16
     776:	87 2e       	mov	r8, r23
     778:	7e e0       	ldi	r23, 0x0E	; 14
     77a:	97 2e       	mov	r9, r23
     77c:	e0 e6       	ldi	r30, 0x60	; 96
     77e:	ee 2e       	mov	r14, r30
     780:	e9 e0       	ldi	r30, 0x09	; 9
     782:	fe 2e       	mov	r15, r30
    unsigned int val = 0;
    unsigned char buffer[16];

    while(1){
        
        clear_display();
     784:	0e 94 47 02 	call	0x48e	; 0x48e <clear_display>
        if (!((PIND) & (1 << 7))){
     788:	87 99       	sbic	0x10, 7	; 16
     78a:	49 c0       	rjmp	.+146    	; 0x81e <main+0x170>
			string2lcd((unsigned char*)"1200us 1200us");
     78c:	89 e0       	ldi	r24, 0x09	; 9
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     794:	66 b5       	in	r22, 0x26	; 38
     796:	77 b5       	in	r23, 0x27	; 39
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	a9 01       	movw	r20, r18
     7a6:	0e 94 57 07 	call	0xeae	; 0xeae <__mulsf3>
     7aa:	0e 94 71 06 	call	0xce2	; 0xce2 <__fixunssfsi>
    OCR1A = left_speed;
     7ae:	fb bc       	out	0x2b, r15	; 43
     7b0:	ea bc       	out	0x2a, r14	; 42
    OCR1B = right_speed;
     7b2:	f9 bc       	out	0x29, r15	; 41
     7b4:	e8 bc       	out	0x28, r14	; 40
    OCR1C = z_speed;
     7b6:	70 93 79 00 	sts	0x0079, r23
     7ba:	60 93 78 00 	sts	0x0078, r22
        clear_display();
        if (!((PIND) & (1 << 7))){
			string2lcd((unsigned char*)"1200us 1200us");
            move(0,0,0);
            val = MOTOR_MAX;
            OCR1C = val;
     7be:	b0 92 79 00 	sts	0x0079, r11
     7c2:	a0 92 78 00 	sts	0x0078, r10
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     7c6:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7c8:	77 9b       	sbis	0x0e, 7	; 14
     7ca:	fe cf       	rjmp	.-4      	; 0x7c8 <main+0x11a>
    SPDR = 0xC0;   // cursor go home on line 2
     7cc:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7ce:	77 9b       	sbis	0x0e, 7	; 14
     7d0:	fe cf       	rjmp	.-4      	; 0x7ce <main+0x120>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     7d2:	80 91 62 00 	lds	r24, 0x0062
     7d6:	88 60       	ori	r24, 0x08	; 8
     7d8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     7dc:	80 91 62 00 	lds	r24, 0x0062
     7e0:	87 7f       	andi	r24, 0xF7	; 247
     7e2:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e6:	95 ec       	ldi	r25, 0xC5	; 197
     7e8:	9a 95       	dec	r25
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <main+0x13a>
     7ec:	00 00       	nop
			string2lcd((unsigned char*)"1200us 1200us");
            move(0,0,0);
            val = MOTOR_MAX;
            OCR1C = val;
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     7ee:	8e 01       	movw	r16, r28
     7f0:	0f 5f       	subi	r16, 0xFF	; 255
     7f2:	1f 4f       	sbci	r17, 0xFF	; 255
     7f4:	23 e0       	ldi	r18, 0x03	; 3
     7f6:	42 e0       	ldi	r20, 0x02	; 2
     7f8:	c3 01       	movw	r24, r6
     7fa:	b2 01       	movw	r22, r4
     7fc:	0e 94 c4 07 	call	0xf88	; 0xf88 <dtostrf>
     800:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     804:	8f ef       	ldi	r24, 0xFF	; 255
     806:	99 ef       	ldi	r25, 0xF9	; 249
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	81 50       	subi	r24, 0x01	; 1
     80c:	90 40       	sbci	r25, 0x00	; 0
     80e:	20 40       	sbci	r18, 0x00	; 0
     810:	e1 f7       	brne	.-8      	; 0x80a <main+0x15c>
     812:	00 c0       	rjmp	.+0      	; 0x814 <main+0x166>
     814:	00 00       	nop
    unsigned int val = 0;
    unsigned char buffer[16];

    while(1){
        
        clear_display();
     816:	0e 94 47 02 	call	0x48e	; 0x48e <clear_display>
        if (!((PIND) & (1 << 7))){
     81a:	87 9b       	sbis	0x10, 7	; 16
     81c:	b7 cf       	rjmp	.-146    	; 0x78c <main+0xde>
            val = MOTOR_MAX;
            OCR1C = val;
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
		}
		else if (!((PIND) & (1 << 6))){
     81e:	86 9b       	sbis	0x10, 6	; 16
     820:	3e c0       	rjmp	.+124    	; 0x89e <main+0x1f0>
			string2lcd((unsigned char*)"1200us 1800us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
            move(-100,1000,0);
		}
		else if (!((PIND) & (1 << 5))){
     822:	85 9b       	sbis	0x10, 5	; 16
     824:	75 c0       	rjmp	.+234    	; 0x910 <main+0x262>
			string2lcd((unsigned char*)"1800us 1800us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
            move(100,100,100);
		}
        else if (!((PIND) & (1 << 4))){
     826:	84 9b       	sbis	0x10, 4	; 16
     828:	a1 c0       	rjmp	.+322    	; 0x96c <main+0x2be>
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 2))){
     82a:	82 9b       	sbis	0x10, 2	; 16
     82c:	d1 c0       	rjmp	.+418    	; 0x9d0 <main+0x322>
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 1))){
     82e:	81 9b       	sbis	0x10, 1	; 16
     830:	40 c1       	rjmp	.+640    	; 0xab2 <main+0x404>
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 0))){
     832:	80 99       	sbic	0x10, 0	; 16
     834:	01 c1       	rjmp	.+514    	; 0xa38 <main+0x38a>
            val = MOTOR_MAX/4;
            OCR1C = val;
     836:	8a e3       	ldi	r24, 0x3A	; 58
     838:	90 e2       	ldi	r25, 0x20	; 32
     83a:	90 93 79 00 	sts	0x0079, r25
     83e:	80 93 78 00 	sts	0x0078, r24
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
     842:	83 e3       	ldi	r24, 0x33	; 51
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     84a:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     84c:	77 9b       	sbis	0x0e, 7	; 14
     84e:	fe cf       	rjmp	.-4      	; 0x84c <main+0x19e>
    SPDR = 0xC0;   // cursor go home on line 2
     850:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     852:	77 9b       	sbis	0x0e, 7	; 14
     854:	fe cf       	rjmp	.-4      	; 0x852 <main+0x1a4>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     856:	80 91 62 00 	lds	r24, 0x0062
     85a:	88 60       	ori	r24, 0x08	; 8
     85c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     860:	80 91 62 00 	lds	r24, 0x0062
     864:	87 7f       	andi	r24, 0xF7	; 247
     866:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     86a:	95 ec       	ldi	r25, 0xC5	; 197
     86c:	9a 95       	dec	r25
     86e:	f1 f7       	brne	.-4      	; 0x86c <main+0x1be>
     870:	00 00       	nop
            val = MOTOR_MAX/4;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     872:	8e 01       	movw	r16, r28
     874:	0f 5f       	subi	r16, 0xFF	; 255
     876:	1f 4f       	sbci	r17, 0xFF	; 255
     878:	23 e0       	ldi	r18, 0x03	; 3
     87a:	42 e0       	ldi	r20, 0x02	; 2
     87c:	62 ec       	ldi	r22, 0xC2	; 194
     87e:	76 eb       	ldi	r23, 0xB6	; 182
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	90 e4       	ldi	r25, 0x40	; 64
     884:	0e 94 c4 07 	call	0xf88	; 0xf88 <dtostrf>
     888:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 0))){
            val = MOTOR_MAX/4;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
     88c:	82 ec       	ldi	r24, 0xC2	; 194
     88e:	48 2e       	mov	r4, r24
     890:	86 eb       	ldi	r24, 0xB6	; 182
     892:	58 2e       	mov	r5, r24
     894:	66 24       	eor	r6, r6
     896:	63 94       	inc	r6
     898:	80 e4       	ldi	r24, 0x40	; 64
     89a:	78 2e       	mov	r7, r24
     89c:	b3 cf       	rjmp	.-154    	; 0x804 <main+0x156>
            OCR1C = val;
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
		}
		else if (!((PIND) & (1 << 6))){
			string2lcd((unsigned char*)"1200us 1800us");
     89e:	87 e1       	ldi	r24, 0x17	; 23
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     8a6:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8a8:	77 9b       	sbis	0x0e, 7	; 14
     8aa:	fe cf       	rjmp	.-4      	; 0x8a8 <main+0x1fa>
    SPDR = 0xC0;   // cursor go home on line 2
     8ac:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8ae:	77 9b       	sbis	0x0e, 7	; 14
     8b0:	fe cf       	rjmp	.-4      	; 0x8ae <main+0x200>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     8b2:	80 91 62 00 	lds	r24, 0x0062
     8b6:	88 60       	ori	r24, 0x08	; 8
     8b8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     8bc:	80 91 62 00 	lds	r24, 0x0062
     8c0:	87 7f       	andi	r24, 0xF7	; 247
     8c2:	80 93 62 00 	sts	0x0062, r24
     8c6:	25 ec       	ldi	r18, 0xC5	; 197
     8c8:	2a 95       	dec	r18
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <main+0x21a>
     8cc:	00 00       	nop
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
		}
		else if (!((PIND) & (1 << 6))){
			string2lcd((unsigned char*)"1200us 1800us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     8ce:	8e 01       	movw	r16, r28
     8d0:	0f 5f       	subi	r16, 0xFF	; 255
     8d2:	1f 4f       	sbci	r17, 0xFF	; 255
     8d4:	23 e0       	ldi	r18, 0x03	; 3
     8d6:	42 e0       	ldi	r20, 0x02	; 2
     8d8:	c3 01       	movw	r24, r6
     8da:	b2 01       	movw	r22, r4
     8dc:	0e 94 c4 07 	call	0xf88	; 0xf88 <dtostrf>
     8e0:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     8e4:	66 b5       	in	r22, 0x26	; 38
     8e6:	77 b5       	in	r23, 0x27	; 39
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	a9 01       	movw	r20, r18
     8f6:	0e 94 57 07 	call	0xeae	; 0xeae <__mulsf3>
     8fa:	0e 94 71 06 	call	0xce2	; 0xce2 <__fixunssfsi>
    OCR1A = left_speed;
     8fe:	fb bc       	out	0x2b, r15	; 43
     900:	ea bc       	out	0x2a, r14	; 42
    OCR1B = right_speed;
     902:	99 bc       	out	0x29, r9	; 41
     904:	88 bc       	out	0x28, r8	; 40
    OCR1C = z_speed;
     906:	70 93 79 00 	sts	0x0079, r23
     90a:	60 93 78 00 	sts	0x0078, r22
     90e:	7a cf       	rjmp	.-268    	; 0x804 <main+0x156>
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
            move(-100,1000,0);
		}
		else if (!((PIND) & (1 << 5))){
			string2lcd((unsigned char*)"1800us 1800us");
     910:	85 e2       	ldi	r24, 0x25	; 37
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     918:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     91a:	77 9b       	sbis	0x0e, 7	; 14
     91c:	fe cf       	rjmp	.-4      	; 0x91a <main+0x26c>
    SPDR = 0xC0;   // cursor go home on line 2
     91e:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     920:	77 9b       	sbis	0x0e, 7	; 14
     922:	fe cf       	rjmp	.-4      	; 0x920 <main+0x272>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     924:	80 91 62 00 	lds	r24, 0x0062
     928:	88 60       	ori	r24, 0x08	; 8
     92a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     92e:	80 91 62 00 	lds	r24, 0x0062
     932:	87 7f       	andi	r24, 0xF7	; 247
     934:	80 93 62 00 	sts	0x0062, r24
     938:	85 ec       	ldi	r24, 0xC5	; 197
     93a:	8a 95       	dec	r24
     93c:	f1 f7       	brne	.-4      	; 0x93a <main+0x28c>
     93e:	00 00       	nop
            move(-100,1000,0);
		}
		else if (!((PIND) & (1 << 5))){
			string2lcd((unsigned char*)"1800us 1800us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     940:	8e 01       	movw	r16, r28
     942:	0f 5f       	subi	r16, 0xFF	; 255
     944:	1f 4f       	sbci	r17, 0xFF	; 255
     946:	23 e0       	ldi	r18, 0x03	; 3
     948:	42 e0       	ldi	r20, 0x02	; 2
     94a:	c3 01       	movw	r24, r6
     94c:	b2 01       	movw	r22, r4
     94e:	0e 94 c4 07 	call	0xf88	; 0xf88 <dtostrf>
     952:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     956:	86 b5       	in	r24, 0x26	; 38
     958:	97 b5       	in	r25, 0x27	; 39
    OCR1A = left_speed;
     95a:	9b bc       	out	0x2b, r9	; 43
     95c:	8a bc       	out	0x2a, r8	; 42
    OCR1B = right_speed;
     95e:	99 bc       	out	0x29, r9	; 41
     960:	88 bc       	out	0x28, r8	; 40
    OCR1C = z_speed;
     962:	90 93 79 00 	sts	0x0079, r25
     966:	80 93 78 00 	sts	0x0078, r24
     96a:	4c cf       	rjmp	.-360    	; 0x804 <main+0x156>
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
            move(100,100,100);
		}
        else if (!((PIND) & (1 << 4))){
            val = MOTOR_MAX;
            OCR1C = val;
     96c:	b0 92 79 00 	sts	0x0079, r11
     970:	a0 92 78 00 	sts	0x0078, r10
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
     974:	83 e3       	ldi	r24, 0x33	; 51
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     97c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     97e:	77 9b       	sbis	0x0e, 7	; 14
     980:	fe cf       	rjmp	.-4      	; 0x97e <main+0x2d0>
    SPDR = 0xC0;   // cursor go home on line 2
     982:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     984:	77 9b       	sbis	0x0e, 7	; 14
     986:	fe cf       	rjmp	.-4      	; 0x984 <main+0x2d6>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     988:	80 91 62 00 	lds	r24, 0x0062
     98c:	88 60       	ori	r24, 0x08	; 8
     98e:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     992:	80 91 62 00 	lds	r24, 0x0062
     996:	87 7f       	andi	r24, 0xF7	; 247
     998:	80 93 62 00 	sts	0x0062, r24
     99c:	95 ec       	ldi	r25, 0xC5	; 197
     99e:	9a 95       	dec	r25
     9a0:	f1 f7       	brne	.-4      	; 0x99e <main+0x2f0>
     9a2:	00 00       	nop
            val = MOTOR_MAX;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     9a4:	8e 01       	movw	r16, r28
     9a6:	0f 5f       	subi	r16, 0xFF	; 255
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
     9aa:	23 e0       	ldi	r18, 0x03	; 3
     9ac:	42 e0       	ldi	r20, 0x02	; 2
     9ae:	62 ec       	ldi	r22, 0xC2	; 194
     9b0:	76 eb       	ldi	r23, 0xB6	; 182
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	91 e4       	ldi	r25, 0x41	; 65
     9b6:	0e 94 c4 07 	call	0xf88	; 0xf88 <dtostrf>
     9ba:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
            move(100,100,100);
		}
        else if (!((PIND) & (1 << 4))){
            val = MOTOR_MAX;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
     9be:	32 ec       	ldi	r19, 0xC2	; 194
     9c0:	43 2e       	mov	r4, r19
     9c2:	36 eb       	ldi	r19, 0xB6	; 182
     9c4:	53 2e       	mov	r5, r19
     9c6:	66 24       	eor	r6, r6
     9c8:	63 94       	inc	r6
     9ca:	31 e4       	ldi	r19, 0x41	; 65
     9cc:	73 2e       	mov	r7, r19
     9ce:	1a cf       	rjmp	.-460    	; 0x804 <main+0x156>
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 2))){
            val = 3*MOTOR_MAX/4;
            OCR1C = val;
     9d0:	8e ea       	ldi	r24, 0xAE	; 174
     9d2:	90 e6       	ldi	r25, 0x60	; 96
     9d4:	90 93 79 00 	sts	0x0079, r25
     9d8:	80 93 78 00 	sts	0x0078, r24
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
     9dc:	83 e3       	ldi	r24, 0x33	; 51
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     9e4:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     9e6:	77 9b       	sbis	0x0e, 7	; 14
     9e8:	fe cf       	rjmp	.-4      	; 0x9e6 <main+0x338>
    SPDR = 0xC0;   // cursor go home on line 2
     9ea:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     9ec:	77 9b       	sbis	0x0e, 7	; 14
     9ee:	fe cf       	rjmp	.-4      	; 0x9ec <main+0x33e>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     9f0:	80 91 62 00 	lds	r24, 0x0062
     9f4:	88 60       	ori	r24, 0x08	; 8
     9f6:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     9fa:	80 91 62 00 	lds	r24, 0x0062
     9fe:	87 7f       	andi	r24, 0xF7	; 247
     a00:	80 93 62 00 	sts	0x0062, r24
     a04:	95 ec       	ldi	r25, 0xC5	; 197
     a06:	9a 95       	dec	r25
     a08:	f1 f7       	brne	.-4      	; 0xa06 <main+0x358>
     a0a:	00 00       	nop
            val = 3*MOTOR_MAX/4;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     a0c:	8e 01       	movw	r16, r28
     a0e:	0f 5f       	subi	r16, 0xFF	; 255
     a10:	1f 4f       	sbci	r17, 0xFF	; 255
     a12:	23 e0       	ldi	r18, 0x03	; 3
     a14:	42 e0       	ldi	r20, 0x02	; 2
     a16:	63 e2       	ldi	r22, 0x23	; 35
     a18:	72 e9       	ldi	r23, 0x92	; 146
     a1a:	82 ec       	ldi	r24, 0xC2	; 194
     a1c:	90 e4       	ldi	r25, 0x40	; 64
     a1e:	0e 94 c4 07 	call	0xf88	; 0xf88 <dtostrf>
     a22:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 2))){
            val = 3*MOTOR_MAX/4;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
     a26:	23 e2       	ldi	r18, 0x23	; 35
     a28:	42 2e       	mov	r4, r18
     a2a:	22 e9       	ldi	r18, 0x92	; 146
     a2c:	52 2e       	mov	r5, r18
     a2e:	22 ec       	ldi	r18, 0xC2	; 194
     a30:	62 2e       	mov	r6, r18
     a32:	20 e4       	ldi	r18, 0x40	; 64
     a34:	72 2e       	mov	r7, r18
     a36:	e6 ce       	rjmp	.-564    	; 0x804 <main+0x156>
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
		else {
            string2lcd((unsigned char*)"1500us 1500us");
     a38:	83 e3       	ldi	r24, 0x33	; 51
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     a40:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     a42:	77 9b       	sbis	0x0e, 7	; 14
     a44:	fe cf       	rjmp	.-4      	; 0xa42 <main+0x394>
    SPDR = 0xC0;   // cursor go home on line 2
     a46:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     a48:	77 9b       	sbis	0x0e, 7	; 14
     a4a:	fe cf       	rjmp	.-4      	; 0xa48 <main+0x39a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     a4c:	80 91 62 00 	lds	r24, 0x0062
     a50:	88 60       	ori	r24, 0x08	; 8
     a52:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     a56:	80 91 62 00 	lds	r24, 0x0062
     a5a:	87 7f       	andi	r24, 0xF7	; 247
     a5c:	80 93 62 00 	sts	0x0062, r24
     a60:	25 ec       	ldi	r18, 0xC5	; 197
     a62:	2a 95       	dec	r18
     a64:	f1 f7       	brne	.-4      	; 0xa62 <main+0x3b4>
     a66:	00 00       	nop
		else {
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            val = 0;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     a68:	8e 01       	movw	r16, r28
     a6a:	0f 5f       	subi	r16, 0xFF	; 255
     a6c:	1f 4f       	sbci	r17, 0xFF	; 255
     a6e:	23 e0       	ldi	r18, 0x03	; 3
     a70:	42 e0       	ldi	r20, 0x02	; 2
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	cb 01       	movw	r24, r22
     a78:	0e 94 c4 07 	call	0xf88	; 0xf88 <dtostrf>
     a7c:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     a80:	66 b5       	in	r22, 0x26	; 38
     a82:	77 b5       	in	r23, 0x27	; 39
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	a9 01       	movw	r20, r18
     a92:	0e 94 57 07 	call	0xeae	; 0xeae <__mulsf3>
     a96:	0e 94 71 06 	call	0xce2	; 0xce2 <__fixunssfsi>
    OCR1A = left_speed;
     a9a:	3b bc       	out	0x2b, r3	; 43
     a9c:	2a bc       	out	0x2a, r2	; 42
    OCR1B = right_speed;
     a9e:	39 bc       	out	0x29, r3	; 41
     aa0:	28 bc       	out	0x28, r2	; 40
    OCR1C = z_speed;
     aa2:	70 93 79 00 	sts	0x0079, r23
     aa6:	60 93 78 00 	sts	0x0078, r22
        }
		else {
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            val = 0;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
     aaa:	41 2c       	mov	r4, r1
     aac:	51 2c       	mov	r5, r1
     aae:	32 01       	movw	r6, r4
     ab0:	a9 ce       	rjmp	.-686    	; 0x804 <main+0x156>
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 1))){
            val = MOTOR_MAX/2;
            OCR1C = val;
     ab2:	84 e7       	ldi	r24, 0x74	; 116
     ab4:	90 e4       	ldi	r25, 0x40	; 64
     ab6:	90 93 79 00 	sts	0x0079, r25
     aba:	80 93 78 00 	sts	0x0078, r24
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
     abe:	83 e3       	ldi	r24, 0x33	; 51
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     ac6:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ac8:	77 9b       	sbis	0x0e, 7	; 14
     aca:	fe cf       	rjmp	.-4      	; 0xac8 <main+0x41a>
    SPDR = 0xC0;   // cursor go home on line 2
     acc:	df b8       	out	0x0f, r13	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ace:	77 9b       	sbis	0x0e, 7	; 14
     ad0:	fe cf       	rjmp	.-4      	; 0xace <main+0x420>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     ad2:	80 91 62 00 	lds	r24, 0x0062
     ad6:	88 60       	ori	r24, 0x08	; 8
     ad8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     adc:	80 91 62 00 	lds	r24, 0x0062
     ae0:	87 7f       	andi	r24, 0xF7	; 247
     ae2:	80 93 62 00 	sts	0x0062, r24
     ae6:	95 ec       	ldi	r25, 0xC5	; 197
     ae8:	9a 95       	dec	r25
     aea:	f1 f7       	brne	.-4      	; 0xae8 <main+0x43a>
     aec:	00 00       	nop
            val = MOTOR_MAX/2;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
            string2lcd((unsigned char*)"1500us 1500us");
            home_line2();
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
     aee:	8e 01       	movw	r16, r28
     af0:	0f 5f       	subi	r16, 0xFF	; 255
     af2:	1f 4f       	sbci	r17, 0xFF	; 255
     af4:	23 e0       	ldi	r18, 0x03	; 3
     af6:	42 e0       	ldi	r20, 0x02	; 2
     af8:	62 ec       	ldi	r22, 0xC2	; 194
     afa:	76 eb       	ldi	r23, 0xB6	; 182
     afc:	81 e8       	ldi	r24, 0x81	; 129
     afe:	90 e4       	ldi	r25, 0x40	; 64
     b00:	0e 94 c4 07 	call	0xf88	; 0xf88 <dtostrf>
     b04:	0e 94 8d 02 	call	0x51a	; 0x51a <string2lcd>
            string2lcd((unsigned char*)dtostrf(voltage,2,3,(char*)buffer));
        }
        else if (!((PIND) & (1 << 1))){
            val = MOTOR_MAX/2;
            OCR1C = val;
            voltage = (float)BATTERY_VOLTAGE * ((float)val) / ((float)65535);
     b08:	92 ec       	ldi	r25, 0xC2	; 194
     b0a:	49 2e       	mov	r4, r25
     b0c:	96 eb       	ldi	r25, 0xB6	; 182
     b0e:	59 2e       	mov	r5, r25
     b10:	91 e8       	ldi	r25, 0x81	; 129
     b12:	69 2e       	mov	r6, r25
     b14:	90 e4       	ldi	r25, 0x40	; 64
     b16:	79 2e       	mov	r7, r25
     b18:	75 ce       	rjmp	.-790    	; 0x804 <main+0x156>

00000b1a <__subsf3>:
     b1a:	50 58       	subi	r21, 0x80	; 128

00000b1c <__addsf3>:
     b1c:	bb 27       	eor	r27, r27
     b1e:	aa 27       	eor	r26, r26
     b20:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__addsf3x>
     b24:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__fp_round>
     b28:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fp_pscA>
     b2c:	38 f0       	brcs	.+14     	; 0xb3c <__addsf3+0x20>
     b2e:	0e 94 11 07 	call	0xe22	; 0xe22 <__fp_pscB>
     b32:	20 f0       	brcs	.+8      	; 0xb3c <__addsf3+0x20>
     b34:	39 f4       	brne	.+14     	; 0xb44 <__addsf3+0x28>
     b36:	9f 3f       	cpi	r25, 0xFF	; 255
     b38:	19 f4       	brne	.+6      	; 0xb40 <__addsf3+0x24>
     b3a:	26 f4       	brtc	.+8      	; 0xb44 <__addsf3+0x28>
     b3c:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_nan>
     b40:	0e f4       	brtc	.+2      	; 0xb44 <__addsf3+0x28>
     b42:	e0 95       	com	r30
     b44:	e7 fb       	bst	r30, 7
     b46:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_inf>

00000b4a <__addsf3x>:
     b4a:	e9 2f       	mov	r30, r25
     b4c:	0e 94 29 07 	call	0xe52	; 0xe52 <__fp_split3>
     b50:	58 f3       	brcs	.-42     	; 0xb28 <__addsf3+0xc>
     b52:	ba 17       	cp	r27, r26
     b54:	62 07       	cpc	r22, r18
     b56:	73 07       	cpc	r23, r19
     b58:	84 07       	cpc	r24, r20
     b5a:	95 07       	cpc	r25, r21
     b5c:	20 f0       	brcs	.+8      	; 0xb66 <__addsf3x+0x1c>
     b5e:	79 f4       	brne	.+30     	; 0xb7e <__addsf3x+0x34>
     b60:	a6 f5       	brtc	.+104    	; 0xbca <__addsf3x+0x80>
     b62:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_zero>
     b66:	0e f4       	brtc	.+2      	; 0xb6a <__addsf3x+0x20>
     b68:	e0 95       	com	r30
     b6a:	0b 2e       	mov	r0, r27
     b6c:	ba 2f       	mov	r27, r26
     b6e:	a0 2d       	mov	r26, r0
     b70:	0b 01       	movw	r0, r22
     b72:	b9 01       	movw	r22, r18
     b74:	90 01       	movw	r18, r0
     b76:	0c 01       	movw	r0, r24
     b78:	ca 01       	movw	r24, r20
     b7a:	a0 01       	movw	r20, r0
     b7c:	11 24       	eor	r1, r1
     b7e:	ff 27       	eor	r31, r31
     b80:	59 1b       	sub	r21, r25
     b82:	99 f0       	breq	.+38     	; 0xbaa <__addsf3x+0x60>
     b84:	59 3f       	cpi	r21, 0xF9	; 249
     b86:	50 f4       	brcc	.+20     	; 0xb9c <__addsf3x+0x52>
     b88:	50 3e       	cpi	r21, 0xE0	; 224
     b8a:	68 f1       	brcs	.+90     	; 0xbe6 <__addsf3x+0x9c>
     b8c:	1a 16       	cp	r1, r26
     b8e:	f0 40       	sbci	r31, 0x00	; 0
     b90:	a2 2f       	mov	r26, r18
     b92:	23 2f       	mov	r18, r19
     b94:	34 2f       	mov	r19, r20
     b96:	44 27       	eor	r20, r20
     b98:	58 5f       	subi	r21, 0xF8	; 248
     b9a:	f3 cf       	rjmp	.-26     	; 0xb82 <__addsf3x+0x38>
     b9c:	46 95       	lsr	r20
     b9e:	37 95       	ror	r19
     ba0:	27 95       	ror	r18
     ba2:	a7 95       	ror	r26
     ba4:	f0 40       	sbci	r31, 0x00	; 0
     ba6:	53 95       	inc	r21
     ba8:	c9 f7       	brne	.-14     	; 0xb9c <__addsf3x+0x52>
     baa:	7e f4       	brtc	.+30     	; 0xbca <__addsf3x+0x80>
     bac:	1f 16       	cp	r1, r31
     bae:	ba 0b       	sbc	r27, r26
     bb0:	62 0b       	sbc	r22, r18
     bb2:	73 0b       	sbc	r23, r19
     bb4:	84 0b       	sbc	r24, r20
     bb6:	ba f0       	brmi	.+46     	; 0xbe6 <__addsf3x+0x9c>
     bb8:	91 50       	subi	r25, 0x01	; 1
     bba:	a1 f0       	breq	.+40     	; 0xbe4 <__addsf3x+0x9a>
     bbc:	ff 0f       	add	r31, r31
     bbe:	bb 1f       	adc	r27, r27
     bc0:	66 1f       	adc	r22, r22
     bc2:	77 1f       	adc	r23, r23
     bc4:	88 1f       	adc	r24, r24
     bc6:	c2 f7       	brpl	.-16     	; 0xbb8 <__addsf3x+0x6e>
     bc8:	0e c0       	rjmp	.+28     	; 0xbe6 <__addsf3x+0x9c>
     bca:	ba 0f       	add	r27, r26
     bcc:	62 1f       	adc	r22, r18
     bce:	73 1f       	adc	r23, r19
     bd0:	84 1f       	adc	r24, r20
     bd2:	48 f4       	brcc	.+18     	; 0xbe6 <__addsf3x+0x9c>
     bd4:	87 95       	ror	r24
     bd6:	77 95       	ror	r23
     bd8:	67 95       	ror	r22
     bda:	b7 95       	ror	r27
     bdc:	f7 95       	ror	r31
     bde:	9e 3f       	cpi	r25, 0xFE	; 254
     be0:	08 f0       	brcs	.+2      	; 0xbe4 <__addsf3x+0x9a>
     be2:	b0 cf       	rjmp	.-160    	; 0xb44 <__addsf3+0x28>
     be4:	93 95       	inc	r25
     be6:	88 0f       	add	r24, r24
     be8:	08 f0       	brcs	.+2      	; 0xbec <__addsf3x+0xa2>
     bea:	99 27       	eor	r25, r25
     bec:	ee 0f       	add	r30, r30
     bee:	97 95       	ror	r25
     bf0:	87 95       	ror	r24
     bf2:	08 95       	ret

00000bf4 <__cmpsf2>:
     bf4:	0e 94 dd 06 	call	0xdba	; 0xdba <__fp_cmp>
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__cmpsf2+0x8>
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	08 95       	ret

00000bfe <__divsf3>:
     bfe:	0e 94 13 06 	call	0xc26	; 0xc26 <__divsf3x>
     c02:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__fp_round>
     c06:	0e 94 11 07 	call	0xe22	; 0xe22 <__fp_pscB>
     c0a:	58 f0       	brcs	.+22     	; 0xc22 <__divsf3+0x24>
     c0c:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fp_pscA>
     c10:	40 f0       	brcs	.+16     	; 0xc22 <__divsf3+0x24>
     c12:	29 f4       	brne	.+10     	; 0xc1e <__divsf3+0x20>
     c14:	5f 3f       	cpi	r21, 0xFF	; 255
     c16:	29 f0       	breq	.+10     	; 0xc22 <__divsf3+0x24>
     c18:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_inf>
     c1c:	51 11       	cpse	r21, r1
     c1e:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__fp_szero>
     c22:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_nan>

00000c26 <__divsf3x>:
     c26:	0e 94 29 07 	call	0xe52	; 0xe52 <__fp_split3>
     c2a:	68 f3       	brcs	.-38     	; 0xc06 <__divsf3+0x8>

00000c2c <__divsf3_pse>:
     c2c:	99 23       	and	r25, r25
     c2e:	b1 f3       	breq	.-20     	; 0xc1c <__divsf3+0x1e>
     c30:	55 23       	and	r21, r21
     c32:	91 f3       	breq	.-28     	; 0xc18 <__divsf3+0x1a>
     c34:	95 1b       	sub	r25, r21
     c36:	55 0b       	sbc	r21, r21
     c38:	bb 27       	eor	r27, r27
     c3a:	aa 27       	eor	r26, r26
     c3c:	62 17       	cp	r22, r18
     c3e:	73 07       	cpc	r23, r19
     c40:	84 07       	cpc	r24, r20
     c42:	38 f0       	brcs	.+14     	; 0xc52 <__divsf3_pse+0x26>
     c44:	9f 5f       	subi	r25, 0xFF	; 255
     c46:	5f 4f       	sbci	r21, 0xFF	; 255
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	44 1f       	adc	r20, r20
     c4e:	aa 1f       	adc	r26, r26
     c50:	a9 f3       	breq	.-22     	; 0xc3c <__divsf3_pse+0x10>
     c52:	35 d0       	rcall	.+106    	; 0xcbe <__divsf3_pse+0x92>
     c54:	0e 2e       	mov	r0, r30
     c56:	3a f0       	brmi	.+14     	; 0xc66 <__divsf3_pse+0x3a>
     c58:	e0 e8       	ldi	r30, 0x80	; 128
     c5a:	32 d0       	rcall	.+100    	; 0xcc0 <__divsf3_pse+0x94>
     c5c:	91 50       	subi	r25, 0x01	; 1
     c5e:	50 40       	sbci	r21, 0x00	; 0
     c60:	e6 95       	lsr	r30
     c62:	00 1c       	adc	r0, r0
     c64:	ca f7       	brpl	.-14     	; 0xc58 <__divsf3_pse+0x2c>
     c66:	2b d0       	rcall	.+86     	; 0xcbe <__divsf3_pse+0x92>
     c68:	fe 2f       	mov	r31, r30
     c6a:	29 d0       	rcall	.+82     	; 0xcbe <__divsf3_pse+0x92>
     c6c:	66 0f       	add	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	88 1f       	adc	r24, r24
     c72:	bb 1f       	adc	r27, r27
     c74:	26 17       	cp	r18, r22
     c76:	37 07       	cpc	r19, r23
     c78:	48 07       	cpc	r20, r24
     c7a:	ab 07       	cpc	r26, r27
     c7c:	b0 e8       	ldi	r27, 0x80	; 128
     c7e:	09 f0       	breq	.+2      	; 0xc82 <__divsf3_pse+0x56>
     c80:	bb 0b       	sbc	r27, r27
     c82:	80 2d       	mov	r24, r0
     c84:	bf 01       	movw	r22, r30
     c86:	ff 27       	eor	r31, r31
     c88:	93 58       	subi	r25, 0x83	; 131
     c8a:	5f 4f       	sbci	r21, 0xFF	; 255
     c8c:	3a f0       	brmi	.+14     	; 0xc9c <__divsf3_pse+0x70>
     c8e:	9e 3f       	cpi	r25, 0xFE	; 254
     c90:	51 05       	cpc	r21, r1
     c92:	78 f0       	brcs	.+30     	; 0xcb2 <__divsf3_pse+0x86>
     c94:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_inf>
     c98:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__fp_szero>
     c9c:	5f 3f       	cpi	r21, 0xFF	; 255
     c9e:	e4 f3       	brlt	.-8      	; 0xc98 <__divsf3_pse+0x6c>
     ca0:	98 3e       	cpi	r25, 0xE8	; 232
     ca2:	d4 f3       	brlt	.-12     	; 0xc98 <__divsf3_pse+0x6c>
     ca4:	86 95       	lsr	r24
     ca6:	77 95       	ror	r23
     ca8:	67 95       	ror	r22
     caa:	b7 95       	ror	r27
     cac:	f7 95       	ror	r31
     cae:	9f 5f       	subi	r25, 0xFF	; 255
     cb0:	c9 f7       	brne	.-14     	; 0xca4 <__divsf3_pse+0x78>
     cb2:	88 0f       	add	r24, r24
     cb4:	91 1d       	adc	r25, r1
     cb6:	96 95       	lsr	r25
     cb8:	87 95       	ror	r24
     cba:	97 f9       	bld	r25, 7
     cbc:	08 95       	ret
     cbe:	e1 e0       	ldi	r30, 0x01	; 1
     cc0:	66 0f       	add	r22, r22
     cc2:	77 1f       	adc	r23, r23
     cc4:	88 1f       	adc	r24, r24
     cc6:	bb 1f       	adc	r27, r27
     cc8:	62 17       	cp	r22, r18
     cca:	73 07       	cpc	r23, r19
     ccc:	84 07       	cpc	r24, r20
     cce:	ba 07       	cpc	r27, r26
     cd0:	20 f0       	brcs	.+8      	; 0xcda <__divsf3_pse+0xae>
     cd2:	62 1b       	sub	r22, r18
     cd4:	73 0b       	sbc	r23, r19
     cd6:	84 0b       	sbc	r24, r20
     cd8:	ba 0b       	sbc	r27, r26
     cda:	ee 1f       	adc	r30, r30
     cdc:	88 f7       	brcc	.-30     	; 0xcc0 <__divsf3_pse+0x94>
     cde:	e0 95       	com	r30
     ce0:	08 95       	ret

00000ce2 <__fixunssfsi>:
     ce2:	0e 94 31 07 	call	0xe62	; 0xe62 <__fp_splitA>
     ce6:	88 f0       	brcs	.+34     	; 0xd0a <__fixunssfsi+0x28>
     ce8:	9f 57       	subi	r25, 0x7F	; 127
     cea:	98 f0       	brcs	.+38     	; 0xd12 <__fixunssfsi+0x30>
     cec:	b9 2f       	mov	r27, r25
     cee:	99 27       	eor	r25, r25
     cf0:	b7 51       	subi	r27, 0x17	; 23
     cf2:	b0 f0       	brcs	.+44     	; 0xd20 <__fixunssfsi+0x3e>
     cf4:	e1 f0       	breq	.+56     	; 0xd2e <__fixunssfsi+0x4c>
     cf6:	66 0f       	add	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	88 1f       	adc	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	1a f0       	brmi	.+6      	; 0xd06 <__fixunssfsi+0x24>
     d00:	ba 95       	dec	r27
     d02:	c9 f7       	brne	.-14     	; 0xcf6 <__fixunssfsi+0x14>
     d04:	14 c0       	rjmp	.+40     	; 0xd2e <__fixunssfsi+0x4c>
     d06:	b1 30       	cpi	r27, 0x01	; 1
     d08:	91 f0       	breq	.+36     	; 0xd2e <__fixunssfsi+0x4c>
     d0a:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_zero>
     d0e:	b1 e0       	ldi	r27, 0x01	; 1
     d10:	08 95       	ret
     d12:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_zero>
     d16:	67 2f       	mov	r22, r23
     d18:	78 2f       	mov	r23, r24
     d1a:	88 27       	eor	r24, r24
     d1c:	b8 5f       	subi	r27, 0xF8	; 248
     d1e:	39 f0       	breq	.+14     	; 0xd2e <__fixunssfsi+0x4c>
     d20:	b9 3f       	cpi	r27, 0xF9	; 249
     d22:	cc f3       	brlt	.-14     	; 0xd16 <__fixunssfsi+0x34>
     d24:	86 95       	lsr	r24
     d26:	77 95       	ror	r23
     d28:	67 95       	ror	r22
     d2a:	b3 95       	inc	r27
     d2c:	d9 f7       	brne	.-10     	; 0xd24 <__fixunssfsi+0x42>
     d2e:	3e f4       	brtc	.+14     	; 0xd3e <__fixunssfsi+0x5c>
     d30:	90 95       	com	r25
     d32:	80 95       	com	r24
     d34:	70 95       	com	r23
     d36:	61 95       	neg	r22
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	8f 4f       	sbci	r24, 0xFF	; 255
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	08 95       	ret

00000d40 <__floatunsisf>:
     d40:	e8 94       	clt
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <__floatsisf+0x12>

00000d44 <__floatsisf>:
     d44:	97 fb       	bst	r25, 7
     d46:	3e f4       	brtc	.+14     	; 0xd56 <__floatsisf+0x12>
     d48:	90 95       	com	r25
     d4a:	80 95       	com	r24
     d4c:	70 95       	com	r23
     d4e:	61 95       	neg	r22
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	8f 4f       	sbci	r24, 0xFF	; 255
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	99 23       	and	r25, r25
     d58:	a9 f0       	breq	.+42     	; 0xd84 <__floatsisf+0x40>
     d5a:	f9 2f       	mov	r31, r25
     d5c:	96 e9       	ldi	r25, 0x96	; 150
     d5e:	bb 27       	eor	r27, r27
     d60:	93 95       	inc	r25
     d62:	f6 95       	lsr	r31
     d64:	87 95       	ror	r24
     d66:	77 95       	ror	r23
     d68:	67 95       	ror	r22
     d6a:	b7 95       	ror	r27
     d6c:	f1 11       	cpse	r31, r1
     d6e:	f8 cf       	rjmp	.-16     	; 0xd60 <__floatsisf+0x1c>
     d70:	fa f4       	brpl	.+62     	; 0xdb0 <__floatsisf+0x6c>
     d72:	bb 0f       	add	r27, r27
     d74:	11 f4       	brne	.+4      	; 0xd7a <__floatsisf+0x36>
     d76:	60 ff       	sbrs	r22, 0
     d78:	1b c0       	rjmp	.+54     	; 0xdb0 <__floatsisf+0x6c>
     d7a:	6f 5f       	subi	r22, 0xFF	; 255
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	8f 4f       	sbci	r24, 0xFF	; 255
     d80:	9f 4f       	sbci	r25, 0xFF	; 255
     d82:	16 c0       	rjmp	.+44     	; 0xdb0 <__floatsisf+0x6c>
     d84:	88 23       	and	r24, r24
     d86:	11 f0       	breq	.+4      	; 0xd8c <__floatsisf+0x48>
     d88:	96 e9       	ldi	r25, 0x96	; 150
     d8a:	11 c0       	rjmp	.+34     	; 0xdae <__floatsisf+0x6a>
     d8c:	77 23       	and	r23, r23
     d8e:	21 f0       	breq	.+8      	; 0xd98 <__floatsisf+0x54>
     d90:	9e e8       	ldi	r25, 0x8E	; 142
     d92:	87 2f       	mov	r24, r23
     d94:	76 2f       	mov	r23, r22
     d96:	05 c0       	rjmp	.+10     	; 0xda2 <__floatsisf+0x5e>
     d98:	66 23       	and	r22, r22
     d9a:	71 f0       	breq	.+28     	; 0xdb8 <__floatsisf+0x74>
     d9c:	96 e8       	ldi	r25, 0x86	; 134
     d9e:	86 2f       	mov	r24, r22
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	2a f0       	brmi	.+10     	; 0xdb0 <__floatsisf+0x6c>
     da6:	9a 95       	dec	r25
     da8:	66 0f       	add	r22, r22
     daa:	77 1f       	adc	r23, r23
     dac:	88 1f       	adc	r24, r24
     dae:	da f7       	brpl	.-10     	; 0xda6 <__floatsisf+0x62>
     db0:	88 0f       	add	r24, r24
     db2:	96 95       	lsr	r25
     db4:	87 95       	ror	r24
     db6:	97 f9       	bld	r25, 7
     db8:	08 95       	ret

00000dba <__fp_cmp>:
     dba:	99 0f       	add	r25, r25
     dbc:	00 08       	sbc	r0, r0
     dbe:	55 0f       	add	r21, r21
     dc0:	aa 0b       	sbc	r26, r26
     dc2:	e0 e8       	ldi	r30, 0x80	; 128
     dc4:	fe ef       	ldi	r31, 0xFE	; 254
     dc6:	16 16       	cp	r1, r22
     dc8:	17 06       	cpc	r1, r23
     dca:	e8 07       	cpc	r30, r24
     dcc:	f9 07       	cpc	r31, r25
     dce:	c0 f0       	brcs	.+48     	; 0xe00 <__fp_cmp+0x46>
     dd0:	12 16       	cp	r1, r18
     dd2:	13 06       	cpc	r1, r19
     dd4:	e4 07       	cpc	r30, r20
     dd6:	f5 07       	cpc	r31, r21
     dd8:	98 f0       	brcs	.+38     	; 0xe00 <__fp_cmp+0x46>
     dda:	62 1b       	sub	r22, r18
     ddc:	73 0b       	sbc	r23, r19
     dde:	84 0b       	sbc	r24, r20
     de0:	95 0b       	sbc	r25, r21
     de2:	39 f4       	brne	.+14     	; 0xdf2 <__fp_cmp+0x38>
     de4:	0a 26       	eor	r0, r26
     de6:	61 f0       	breq	.+24     	; 0xe00 <__fp_cmp+0x46>
     de8:	23 2b       	or	r18, r19
     dea:	24 2b       	or	r18, r20
     dec:	25 2b       	or	r18, r21
     dee:	21 f4       	brne	.+8      	; 0xdf8 <__fp_cmp+0x3e>
     df0:	08 95       	ret
     df2:	0a 26       	eor	r0, r26
     df4:	09 f4       	brne	.+2      	; 0xdf8 <__fp_cmp+0x3e>
     df6:	a1 40       	sbci	r26, 0x01	; 1
     df8:	a6 95       	lsr	r26
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	81 1d       	adc	r24, r1
     dfe:	81 1d       	adc	r24, r1
     e00:	08 95       	ret

00000e02 <__fp_inf>:
     e02:	97 f9       	bld	r25, 7
     e04:	9f 67       	ori	r25, 0x7F	; 127
     e06:	80 e8       	ldi	r24, 0x80	; 128
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	08 95       	ret

00000e0e <__fp_nan>:
     e0e:	9f ef       	ldi	r25, 0xFF	; 255
     e10:	80 ec       	ldi	r24, 0xC0	; 192
     e12:	08 95       	ret

00000e14 <__fp_pscA>:
     e14:	00 24       	eor	r0, r0
     e16:	0a 94       	dec	r0
     e18:	16 16       	cp	r1, r22
     e1a:	17 06       	cpc	r1, r23
     e1c:	18 06       	cpc	r1, r24
     e1e:	09 06       	cpc	r0, r25
     e20:	08 95       	ret

00000e22 <__fp_pscB>:
     e22:	00 24       	eor	r0, r0
     e24:	0a 94       	dec	r0
     e26:	12 16       	cp	r1, r18
     e28:	13 06       	cpc	r1, r19
     e2a:	14 06       	cpc	r1, r20
     e2c:	05 06       	cpc	r0, r21
     e2e:	08 95       	ret

00000e30 <__fp_round>:
     e30:	09 2e       	mov	r0, r25
     e32:	03 94       	inc	r0
     e34:	00 0c       	add	r0, r0
     e36:	11 f4       	brne	.+4      	; 0xe3c <__fp_round+0xc>
     e38:	88 23       	and	r24, r24
     e3a:	52 f0       	brmi	.+20     	; 0xe50 <__fp_round+0x20>
     e3c:	bb 0f       	add	r27, r27
     e3e:	40 f4       	brcc	.+16     	; 0xe50 <__fp_round+0x20>
     e40:	bf 2b       	or	r27, r31
     e42:	11 f4       	brne	.+4      	; 0xe48 <__fp_round+0x18>
     e44:	60 ff       	sbrs	r22, 0
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <__fp_round+0x20>
     e48:	6f 5f       	subi	r22, 0xFF	; 255
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	8f 4f       	sbci	r24, 0xFF	; 255
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	08 95       	ret

00000e52 <__fp_split3>:
     e52:	57 fd       	sbrc	r21, 7
     e54:	90 58       	subi	r25, 0x80	; 128
     e56:	44 0f       	add	r20, r20
     e58:	55 1f       	adc	r21, r21
     e5a:	59 f0       	breq	.+22     	; 0xe72 <__fp_splitA+0x10>
     e5c:	5f 3f       	cpi	r21, 0xFF	; 255
     e5e:	71 f0       	breq	.+28     	; 0xe7c <__fp_splitA+0x1a>
     e60:	47 95       	ror	r20

00000e62 <__fp_splitA>:
     e62:	88 0f       	add	r24, r24
     e64:	97 fb       	bst	r25, 7
     e66:	99 1f       	adc	r25, r25
     e68:	61 f0       	breq	.+24     	; 0xe82 <__fp_splitA+0x20>
     e6a:	9f 3f       	cpi	r25, 0xFF	; 255
     e6c:	79 f0       	breq	.+30     	; 0xe8c <__fp_splitA+0x2a>
     e6e:	87 95       	ror	r24
     e70:	08 95       	ret
     e72:	12 16       	cp	r1, r18
     e74:	13 06       	cpc	r1, r19
     e76:	14 06       	cpc	r1, r20
     e78:	55 1f       	adc	r21, r21
     e7a:	f2 cf       	rjmp	.-28     	; 0xe60 <__fp_split3+0xe>
     e7c:	46 95       	lsr	r20
     e7e:	f1 df       	rcall	.-30     	; 0xe62 <__fp_splitA>
     e80:	08 c0       	rjmp	.+16     	; 0xe92 <__fp_splitA+0x30>
     e82:	16 16       	cp	r1, r22
     e84:	17 06       	cpc	r1, r23
     e86:	18 06       	cpc	r1, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	f1 cf       	rjmp	.-30     	; 0xe6e <__fp_splitA+0xc>
     e8c:	86 95       	lsr	r24
     e8e:	71 05       	cpc	r23, r1
     e90:	61 05       	cpc	r22, r1
     e92:	08 94       	sec
     e94:	08 95       	ret

00000e96 <__fp_zero>:
     e96:	e8 94       	clt

00000e98 <__fp_szero>:
     e98:	bb 27       	eor	r27, r27
     e9a:	66 27       	eor	r22, r22
     e9c:	77 27       	eor	r23, r23
     e9e:	cb 01       	movw	r24, r22
     ea0:	97 f9       	bld	r25, 7
     ea2:	08 95       	ret

00000ea4 <__gesf2>:
     ea4:	0e 94 dd 06 	call	0xdba	; 0xdba <__fp_cmp>
     ea8:	08 f4       	brcc	.+2      	; 0xeac <__gesf2+0x8>
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	08 95       	ret

00000eae <__mulsf3>:
     eae:	0e 94 6a 07 	call	0xed4	; 0xed4 <__mulsf3x>
     eb2:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__fp_round>
     eb6:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fp_pscA>
     eba:	38 f0       	brcs	.+14     	; 0xeca <__mulsf3+0x1c>
     ebc:	0e 94 11 07 	call	0xe22	; 0xe22 <__fp_pscB>
     ec0:	20 f0       	brcs	.+8      	; 0xeca <__mulsf3+0x1c>
     ec2:	95 23       	and	r25, r21
     ec4:	11 f0       	breq	.+4      	; 0xeca <__mulsf3+0x1c>
     ec6:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_inf>
     eca:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_nan>
     ece:	11 24       	eor	r1, r1
     ed0:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__fp_szero>

00000ed4 <__mulsf3x>:
     ed4:	0e 94 29 07 	call	0xe52	; 0xe52 <__fp_split3>
     ed8:	70 f3       	brcs	.-36     	; 0xeb6 <__mulsf3+0x8>

00000eda <__mulsf3_pse>:
     eda:	95 9f       	mul	r25, r21
     edc:	c1 f3       	breq	.-16     	; 0xece <__mulsf3+0x20>
     ede:	95 0f       	add	r25, r21
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	55 1f       	adc	r21, r21
     ee4:	62 9f       	mul	r22, r18
     ee6:	f0 01       	movw	r30, r0
     ee8:	72 9f       	mul	r23, r18
     eea:	bb 27       	eor	r27, r27
     eec:	f0 0d       	add	r31, r0
     eee:	b1 1d       	adc	r27, r1
     ef0:	63 9f       	mul	r22, r19
     ef2:	aa 27       	eor	r26, r26
     ef4:	f0 0d       	add	r31, r0
     ef6:	b1 1d       	adc	r27, r1
     ef8:	aa 1f       	adc	r26, r26
     efa:	64 9f       	mul	r22, r20
     efc:	66 27       	eor	r22, r22
     efe:	b0 0d       	add	r27, r0
     f00:	a1 1d       	adc	r26, r1
     f02:	66 1f       	adc	r22, r22
     f04:	82 9f       	mul	r24, r18
     f06:	22 27       	eor	r18, r18
     f08:	b0 0d       	add	r27, r0
     f0a:	a1 1d       	adc	r26, r1
     f0c:	62 1f       	adc	r22, r18
     f0e:	73 9f       	mul	r23, r19
     f10:	b0 0d       	add	r27, r0
     f12:	a1 1d       	adc	r26, r1
     f14:	62 1f       	adc	r22, r18
     f16:	83 9f       	mul	r24, r19
     f18:	a0 0d       	add	r26, r0
     f1a:	61 1d       	adc	r22, r1
     f1c:	22 1f       	adc	r18, r18
     f1e:	74 9f       	mul	r23, r20
     f20:	33 27       	eor	r19, r19
     f22:	a0 0d       	add	r26, r0
     f24:	61 1d       	adc	r22, r1
     f26:	23 1f       	adc	r18, r19
     f28:	84 9f       	mul	r24, r20
     f2a:	60 0d       	add	r22, r0
     f2c:	21 1d       	adc	r18, r1
     f2e:	82 2f       	mov	r24, r18
     f30:	76 2f       	mov	r23, r22
     f32:	6a 2f       	mov	r22, r26
     f34:	11 24       	eor	r1, r1
     f36:	9f 57       	subi	r25, 0x7F	; 127
     f38:	50 40       	sbci	r21, 0x00	; 0
     f3a:	9a f0       	brmi	.+38     	; 0xf62 <__mulsf3_pse+0x88>
     f3c:	f1 f0       	breq	.+60     	; 0xf7a <__mulsf3_pse+0xa0>
     f3e:	88 23       	and	r24, r24
     f40:	4a f0       	brmi	.+18     	; 0xf54 <__mulsf3_pse+0x7a>
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	bb 1f       	adc	r27, r27
     f48:	66 1f       	adc	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	88 1f       	adc	r24, r24
     f4e:	91 50       	subi	r25, 0x01	; 1
     f50:	50 40       	sbci	r21, 0x00	; 0
     f52:	a9 f7       	brne	.-22     	; 0xf3e <__mulsf3_pse+0x64>
     f54:	9e 3f       	cpi	r25, 0xFE	; 254
     f56:	51 05       	cpc	r21, r1
     f58:	80 f0       	brcs	.+32     	; 0xf7a <__mulsf3_pse+0xa0>
     f5a:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_inf>
     f5e:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__fp_szero>
     f62:	5f 3f       	cpi	r21, 0xFF	; 255
     f64:	e4 f3       	brlt	.-8      	; 0xf5e <__mulsf3_pse+0x84>
     f66:	98 3e       	cpi	r25, 0xE8	; 232
     f68:	d4 f3       	brlt	.-12     	; 0xf5e <__mulsf3_pse+0x84>
     f6a:	86 95       	lsr	r24
     f6c:	77 95       	ror	r23
     f6e:	67 95       	ror	r22
     f70:	b7 95       	ror	r27
     f72:	f7 95       	ror	r31
     f74:	e7 95       	ror	r30
     f76:	9f 5f       	subi	r25, 0xFF	; 255
     f78:	c1 f7       	brne	.-16     	; 0xf6a <__mulsf3_pse+0x90>
     f7a:	fe 2b       	or	r31, r30
     f7c:	88 0f       	add	r24, r24
     f7e:	91 1d       	adc	r25, r1
     f80:	96 95       	lsr	r25
     f82:	87 95       	ror	r24
     f84:	97 f9       	bld	r25, 7
     f86:	08 95       	ret

00000f88 <dtostrf>:
     f88:	ef 92       	push	r14
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	e8 01       	movw	r28, r16
     f94:	47 fd       	sbrc	r20, 7
     f96:	16 c0       	rjmp	.+44     	; 0xfc4 <dtostrf+0x3c>
     f98:	34 e0       	ldi	r19, 0x04	; 4
     f9a:	04 2e       	mov	r0, r20
     f9c:	00 0c       	add	r0, r0
     f9e:	55 0b       	sbc	r21, r21
     fa0:	57 ff       	sbrs	r21, 7
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <dtostrf+0x22>
     fa4:	51 95       	neg	r21
     fa6:	41 95       	neg	r20
     fa8:	51 09       	sbc	r21, r1
     faa:	e3 2e       	mov	r14, r19
     fac:	02 2f       	mov	r16, r18
     fae:	24 2f       	mov	r18, r20
     fb0:	ae 01       	movw	r20, r28
     fb2:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <dtoa_prf>
     fb6:	ce 01       	movw	r24, r28
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ef 90       	pop	r14
     fc2:	08 95       	ret
     fc4:	34 e1       	ldi	r19, 0x14	; 20
     fc6:	e9 cf       	rjmp	.-46     	; 0xf9a <dtostrf+0x12>

00000fc8 <dtoa_prf>:
     fc8:	8f 92       	push	r8
     fca:	9f 92       	push	r9
     fcc:	af 92       	push	r10
     fce:	bf 92       	push	r11
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	29 97       	sbiw	r28, 0x09	; 9
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	6a 01       	movw	r12, r20
     ff2:	f2 2e       	mov	r15, r18
     ff4:	b0 2e       	mov	r11, r16
     ff6:	2b e3       	ldi	r18, 0x3B	; 59
     ff8:	20 17       	cp	r18, r16
     ffa:	08 f4       	brcc	.+2      	; 0xffe <dtoa_prf+0x36>
     ffc:	5f c0       	rjmp	.+190    	; 0x10bc <dtoa_prf+0xf4>
     ffe:	11 e0       	ldi	r17, 0x01	; 1
    1000:	10 0f       	add	r17, r16
    1002:	01 2f       	mov	r16, r17
    1004:	27 e0       	ldi	r18, 0x07	; 7
    1006:	ae 01       	movw	r20, r28
    1008:	4f 5f       	subi	r20, 0xFF	; 255
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
    100c:	0e 94 65 09 	call	0x12ca	; 0x12ca <__ftoa_engine>
    1010:	bc 01       	movw	r22, r24
    1012:	39 81       	ldd	r19, Y+1	; 0x01
    1014:	83 2f       	mov	r24, r19
    1016:	89 70       	andi	r24, 0x09	; 9
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	09 f4       	brne	.+2      	; 0x101e <dtoa_prf+0x56>
    101c:	51 c0       	rjmp	.+162    	; 0x10c0 <dtoa_prf+0xf8>
    101e:	e1 fc       	sbrc	r14, 1
    1020:	51 c0       	rjmp	.+162    	; 0x10c4 <dtoa_prf+0xfc>
    1022:	9e 2d       	mov	r25, r14
    1024:	91 70       	andi	r25, 0x01	; 1
    1026:	e0 fc       	sbrc	r14, 0
    1028:	90 e2       	ldi	r25, 0x20	; 32
    102a:	ae 2d       	mov	r26, r14
    102c:	a0 71       	andi	r26, 0x10	; 16
    102e:	83 2f       	mov	r24, r19
    1030:	88 70       	andi	r24, 0x08	; 8
    1032:	33 ff       	sbrs	r19, 3
    1034:	5a c0       	rjmp	.+180    	; 0x10ea <dtoa_prf+0x122>
    1036:	91 11       	cpse	r25, r1
    1038:	47 c0       	rjmp	.+142    	; 0x10c8 <dtoa_prf+0x100>
    103a:	83 e0       	ldi	r24, 0x03	; 3
    103c:	8f 15       	cp	r24, r15
    103e:	08 f0       	brcs	.+2      	; 0x1042 <dtoa_prf+0x7a>
    1040:	45 c0       	rjmp	.+138    	; 0x10cc <dtoa_prf+0x104>
    1042:	f8 1a       	sub	r15, r24
    1044:	a1 11       	cpse	r26, r1
    1046:	08 c0       	rjmp	.+16     	; 0x1058 <dtoa_prf+0x90>
    1048:	f6 01       	movw	r30, r12
    104a:	8f 2d       	mov	r24, r15
    104c:	20 e2       	ldi	r18, 0x20	; 32
    104e:	81 11       	cpse	r24, r1
    1050:	3f c0       	rjmp	.+126    	; 0x10d0 <dtoa_prf+0x108>
    1052:	cf 0c       	add	r12, r15
    1054:	d1 1c       	adc	r13, r1
    1056:	f1 2c       	mov	r15, r1
    1058:	99 23       	and	r25, r25
    105a:	29 f0       	breq	.+10     	; 0x1066 <dtoa_prf+0x9e>
    105c:	d6 01       	movw	r26, r12
    105e:	9c 93       	st	X, r25
    1060:	f6 01       	movw	r30, r12
    1062:	31 96       	adiw	r30, 0x01	; 1
    1064:	6f 01       	movw	r12, r30
    1066:	c6 01       	movw	r24, r12
    1068:	03 96       	adiw	r24, 0x03	; 3
    106a:	e2 fe       	sbrs	r14, 2
    106c:	34 c0       	rjmp	.+104    	; 0x10d6 <dtoa_prf+0x10e>
    106e:	2e e4       	ldi	r18, 0x4E	; 78
    1070:	d6 01       	movw	r26, r12
    1072:	2c 93       	st	X, r18
    1074:	31 e4       	ldi	r19, 0x41	; 65
    1076:	11 96       	adiw	r26, 0x01	; 1
    1078:	3c 93       	st	X, r19
    107a:	11 97       	sbiw	r26, 0x01	; 1
    107c:	12 96       	adiw	r26, 0x02	; 2
    107e:	2c 93       	st	X, r18
    1080:	fc 01       	movw	r30, r24
    1082:	2f 2d       	mov	r18, r15
    1084:	30 e2       	ldi	r19, 0x20	; 32
    1086:	21 11       	cpse	r18, r1
    1088:	2d c0       	rjmp	.+90     	; 0x10e4 <dtoa_prf+0x11c>
    108a:	8f 0d       	add	r24, r15
    108c:	91 1d       	adc	r25, r1
    108e:	dc 01       	movw	r26, r24
    1090:	1c 92       	st	X, r1
    1092:	8e ef       	ldi	r24, 0xFE	; 254
    1094:	9f ef       	ldi	r25, 0xFF	; 255
    1096:	29 96       	adiw	r28, 0x09	; 9
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	9f 90       	pop	r9
    10b8:	8f 90       	pop	r8
    10ba:	08 95       	ret
    10bc:	1c e3       	ldi	r17, 0x3C	; 60
    10be:	a1 cf       	rjmp	.-190    	; 0x1002 <dtoa_prf+0x3a>
    10c0:	9d e2       	ldi	r25, 0x2D	; 45
    10c2:	b3 cf       	rjmp	.-154    	; 0x102a <dtoa_prf+0x62>
    10c4:	9b e2       	ldi	r25, 0x2B	; 43
    10c6:	b1 cf       	rjmp	.-158    	; 0x102a <dtoa_prf+0x62>
    10c8:	84 e0       	ldi	r24, 0x04	; 4
    10ca:	b8 cf       	rjmp	.-144    	; 0x103c <dtoa_prf+0x74>
    10cc:	f1 2c       	mov	r15, r1
    10ce:	ba cf       	rjmp	.-140    	; 0x1044 <dtoa_prf+0x7c>
    10d0:	21 93       	st	Z+, r18
    10d2:	81 50       	subi	r24, 0x01	; 1
    10d4:	bc cf       	rjmp	.-136    	; 0x104e <dtoa_prf+0x86>
    10d6:	2e e6       	ldi	r18, 0x6E	; 110
    10d8:	f6 01       	movw	r30, r12
    10da:	20 83       	st	Z, r18
    10dc:	31 e6       	ldi	r19, 0x61	; 97
    10de:	31 83       	std	Z+1, r19	; 0x01
    10e0:	22 83       	std	Z+2, r18	; 0x02
    10e2:	ce cf       	rjmp	.-100    	; 0x1080 <dtoa_prf+0xb8>
    10e4:	31 93       	st	Z+, r19
    10e6:	21 50       	subi	r18, 0x01	; 1
    10e8:	ce cf       	rjmp	.-100    	; 0x1086 <dtoa_prf+0xbe>
    10ea:	23 2f       	mov	r18, r19
    10ec:	24 70       	andi	r18, 0x04	; 4
    10ee:	32 ff       	sbrs	r19, 2
    10f0:	41 c0       	rjmp	.+130    	; 0x1174 <__stack+0x75>
    10f2:	91 11       	cpse	r25, r1
    10f4:	2f c0       	rjmp	.+94     	; 0x1154 <__stack+0x55>
    10f6:	23 e0       	ldi	r18, 0x03	; 3
    10f8:	2f 15       	cp	r18, r15
    10fa:	10 f4       	brcc	.+4      	; 0x1100 <__stack+0x1>
    10fc:	8f 2d       	mov	r24, r15
    10fe:	82 1b       	sub	r24, r18
    1100:	a1 11       	cpse	r26, r1
    1102:	08 c0       	rjmp	.+16     	; 0x1114 <__stack+0x15>
    1104:	f6 01       	movw	r30, r12
    1106:	28 2f       	mov	r18, r24
    1108:	30 e2       	ldi	r19, 0x20	; 32
    110a:	21 11       	cpse	r18, r1
    110c:	25 c0       	rjmp	.+74     	; 0x1158 <__stack+0x59>
    110e:	c8 0e       	add	r12, r24
    1110:	d1 1c       	adc	r13, r1
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	99 23       	and	r25, r25
    1116:	31 f0       	breq	.+12     	; 0x1124 <__stack+0x25>
    1118:	f6 01       	movw	r30, r12
    111a:	90 83       	st	Z, r25
    111c:	96 01       	movw	r18, r12
    111e:	2f 5f       	subi	r18, 0xFF	; 255
    1120:	3f 4f       	sbci	r19, 0xFF	; 255
    1122:	69 01       	movw	r12, r18
    1124:	96 01       	movw	r18, r12
    1126:	2d 5f       	subi	r18, 0xFD	; 253
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	e2 fe       	sbrs	r14, 2
    112c:	18 c0       	rjmp	.+48     	; 0x115e <__stack+0x5f>
    112e:	99 e4       	ldi	r25, 0x49	; 73
    1130:	d6 01       	movw	r26, r12
    1132:	9c 93       	st	X, r25
    1134:	9e e4       	ldi	r25, 0x4E	; 78
    1136:	11 96       	adiw	r26, 0x01	; 1
    1138:	9c 93       	st	X, r25
    113a:	11 97       	sbiw	r26, 0x01	; 1
    113c:	96 e4       	ldi	r25, 0x46	; 70
    113e:	12 96       	adiw	r26, 0x02	; 2
    1140:	9c 93       	st	X, r25
    1142:	f9 01       	movw	r30, r18
    1144:	98 2f       	mov	r25, r24
    1146:	40 e2       	ldi	r20, 0x20	; 32
    1148:	91 11       	cpse	r25, r1
    114a:	11 c0       	rjmp	.+34     	; 0x116e <__stack+0x6f>
    114c:	28 0f       	add	r18, r24
    114e:	31 1d       	adc	r19, r1
    1150:	d9 01       	movw	r26, r18
    1152:	9e cf       	rjmp	.-196    	; 0x1090 <dtoa_prf+0xc8>
    1154:	24 e0       	ldi	r18, 0x04	; 4
    1156:	d0 cf       	rjmp	.-96     	; 0x10f8 <dtoa_prf+0x130>
    1158:	31 93       	st	Z+, r19
    115a:	21 50       	subi	r18, 0x01	; 1
    115c:	d6 cf       	rjmp	.-84     	; 0x110a <__stack+0xb>
    115e:	99 e6       	ldi	r25, 0x69	; 105
    1160:	f6 01       	movw	r30, r12
    1162:	90 83       	st	Z, r25
    1164:	9e e6       	ldi	r25, 0x6E	; 110
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	96 e6       	ldi	r25, 0x66	; 102
    116a:	92 83       	std	Z+2, r25	; 0x02
    116c:	ea cf       	rjmp	.-44     	; 0x1142 <__stack+0x43>
    116e:	41 93       	st	Z+, r20
    1170:	91 50       	subi	r25, 0x01	; 1
    1172:	ea cf       	rjmp	.-44     	; 0x1148 <__stack+0x49>
    1174:	41 e0       	ldi	r20, 0x01	; 1
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	91 11       	cpse	r25, r1
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <__stack+0x81>
    117c:	40 e0       	ldi	r20, 0x00	; 0
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	16 16       	cp	r1, r22
    1182:	17 06       	cpc	r1, r23
    1184:	0c f0       	brlt	.+2      	; 0x1188 <__stack+0x89>
    1186:	75 c0       	rjmp	.+234    	; 0x1272 <__stack+0x173>
    1188:	fb 01       	movw	r30, r22
    118a:	31 96       	adiw	r30, 0x01	; 1
    118c:	e4 0f       	add	r30, r20
    118e:	f5 1f       	adc	r31, r21
    1190:	bb 20       	and	r11, r11
    1192:	09 f4       	brne	.+2      	; 0x1196 <__stack+0x97>
    1194:	71 c0       	rjmp	.+226    	; 0x1278 <__stack+0x179>
    1196:	4b 2d       	mov	r20, r11
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	4f 5f       	subi	r20, 0xFF	; 255
    119c:	5f 4f       	sbci	r21, 0xFF	; 255
    119e:	4e 0f       	add	r20, r30
    11a0:	5f 1f       	adc	r21, r31
    11a2:	ef 2d       	mov	r30, r15
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	4e 17       	cp	r20, r30
    11a8:	5f 07       	cpc	r21, r31
    11aa:	14 f4       	brge	.+4      	; 0x11b0 <__stack+0xb1>
    11ac:	2f 2d       	mov	r18, r15
    11ae:	24 1b       	sub	r18, r20
    11b0:	8e 2d       	mov	r24, r14
    11b2:	88 71       	andi	r24, 0x18	; 24
    11b4:	41 f4       	brne	.+16     	; 0x11c6 <__stack+0xc7>
    11b6:	f6 01       	movw	r30, r12
    11b8:	82 2f       	mov	r24, r18
    11ba:	40 e2       	ldi	r20, 0x20	; 32
    11bc:	81 11       	cpse	r24, r1
    11be:	5f c0       	rjmp	.+190    	; 0x127e <__stack+0x17f>
    11c0:	c2 0e       	add	r12, r18
    11c2:	d1 1c       	adc	r13, r1
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	99 23       	and	r25, r25
    11c8:	29 f0       	breq	.+10     	; 0x11d4 <__stack+0xd5>
    11ca:	f6 01       	movw	r30, r12
    11cc:	90 83       	st	Z, r25
    11ce:	c6 01       	movw	r24, r12
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	6c 01       	movw	r12, r24
    11d4:	a1 11       	cpse	r26, r1
    11d6:	08 c0       	rjmp	.+16     	; 0x11e8 <__stack+0xe9>
    11d8:	f6 01       	movw	r30, r12
    11da:	82 2f       	mov	r24, r18
    11dc:	90 e3       	ldi	r25, 0x30	; 48
    11de:	81 11       	cpse	r24, r1
    11e0:	51 c0       	rjmp	.+162    	; 0x1284 <__stack+0x185>
    11e2:	c2 0e       	add	r12, r18
    11e4:	d1 1c       	adc	r13, r1
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	01 2f       	mov	r16, r17
    11ea:	06 0f       	add	r16, r22
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	a3 2f       	mov	r26, r19
    11f0:	a0 71       	andi	r26, 0x10	; 16
    11f2:	aa 2e       	mov	r10, r26
    11f4:	34 ff       	sbrs	r19, 4
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <__stack+0xff>
    11f8:	91 33       	cpi	r25, 0x31	; 49
    11fa:	09 f4       	brne	.+2      	; 0x11fe <__stack+0xff>
    11fc:	01 50       	subi	r16, 0x01	; 1
    11fe:	10 16       	cp	r1, r16
    1200:	0c f0       	brlt	.+2      	; 0x1204 <__stack+0x105>
    1202:	43 c0       	rjmp	.+134    	; 0x128a <__stack+0x18b>
    1204:	09 30       	cpi	r16, 0x09	; 9
    1206:	08 f0       	brcs	.+2      	; 0x120a <__stack+0x10b>
    1208:	08 e0       	ldi	r16, 0x08	; 8
    120a:	ab 01       	movw	r20, r22
    120c:	77 ff       	sbrs	r23, 7
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <__stack+0x115>
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	fb 01       	movw	r30, r22
    1216:	31 96       	adiw	r30, 0x01	; 1
    1218:	e4 1b       	sub	r30, r20
    121a:	f5 0b       	sbc	r31, r21
    121c:	a1 e0       	ldi	r26, 0x01	; 1
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	ac 0f       	add	r26, r28
    1222:	bd 1f       	adc	r27, r29
    1224:	ea 0f       	add	r30, r26
    1226:	fb 1f       	adc	r31, r27
    1228:	3e e2       	ldi	r19, 0x2E	; 46
    122a:	4b 01       	movw	r8, r22
    122c:	80 1a       	sub	r8, r16
    122e:	91 08       	sbc	r9, r1
    1230:	0b 2d       	mov	r16, r11
    1232:	10 e0       	ldi	r17, 0x00	; 0
    1234:	11 95       	neg	r17
    1236:	01 95       	neg	r16
    1238:	11 09       	sbc	r17, r1
    123a:	4f 3f       	cpi	r20, 0xFF	; 255
    123c:	bf ef       	ldi	r27, 0xFF	; 255
    123e:	5b 07       	cpc	r21, r27
    1240:	21 f4       	brne	.+8      	; 0x124a <__stack+0x14b>
    1242:	d6 01       	movw	r26, r12
    1244:	3c 93       	st	X, r19
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	6d 01       	movw	r12, r26
    124a:	64 17       	cp	r22, r20
    124c:	75 07       	cpc	r23, r21
    124e:	fc f0       	brlt	.+62     	; 0x128e <__stack+0x18f>
    1250:	84 16       	cp	r8, r20
    1252:	95 06       	cpc	r9, r21
    1254:	e4 f4       	brge	.+56     	; 0x128e <__stack+0x18f>
    1256:	80 81       	ld	r24, Z
    1258:	41 50       	subi	r20, 0x01	; 1
    125a:	51 09       	sbc	r21, r1
    125c:	31 96       	adiw	r30, 0x01	; 1
    125e:	d6 01       	movw	r26, r12
    1260:	11 96       	adiw	r26, 0x01	; 1
    1262:	7d 01       	movw	r14, r26
    1264:	40 17       	cp	r20, r16
    1266:	51 07       	cpc	r21, r17
    1268:	a4 f0       	brlt	.+40     	; 0x1292 <__stack+0x193>
    126a:	d6 01       	movw	r26, r12
    126c:	8c 93       	st	X, r24
    126e:	67 01       	movw	r12, r14
    1270:	e4 cf       	rjmp	.-56     	; 0x123a <__stack+0x13b>
    1272:	e1 e0       	ldi	r30, 0x01	; 1
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a cf       	rjmp	.-236    	; 0x118c <__stack+0x8d>
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	90 cf       	rjmp	.-224    	; 0x119e <__stack+0x9f>
    127e:	41 93       	st	Z+, r20
    1280:	81 50       	subi	r24, 0x01	; 1
    1282:	9c cf       	rjmp	.-200    	; 0x11bc <__stack+0xbd>
    1284:	91 93       	st	Z+, r25
    1286:	81 50       	subi	r24, 0x01	; 1
    1288:	aa cf       	rjmp	.-172    	; 0x11de <__stack+0xdf>
    128a:	01 e0       	ldi	r16, 0x01	; 1
    128c:	be cf       	rjmp	.-132    	; 0x120a <__stack+0x10b>
    128e:	80 e3       	ldi	r24, 0x30	; 48
    1290:	e3 cf       	rjmp	.-58     	; 0x1258 <__stack+0x159>
    1292:	64 17       	cp	r22, r20
    1294:	75 07       	cpc	r23, r21
    1296:	31 f4       	brne	.+12     	; 0x12a4 <__stack+0x1a5>
    1298:	96 33       	cpi	r25, 0x36	; 54
    129a:	90 f4       	brcc	.+36     	; 0x12c0 <__stack+0x1c1>
    129c:	95 33       	cpi	r25, 0x35	; 53
    129e:	11 f4       	brne	.+4      	; 0x12a4 <__stack+0x1a5>
    12a0:	aa 20       	and	r10, r10
    12a2:	71 f0       	breq	.+28     	; 0x12c0 <__stack+0x1c1>
    12a4:	f6 01       	movw	r30, r12
    12a6:	80 83       	st	Z, r24
    12a8:	f7 01       	movw	r30, r14
    12aa:	82 2f       	mov	r24, r18
    12ac:	90 e2       	ldi	r25, 0x20	; 32
    12ae:	81 11       	cpse	r24, r1
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <__stack+0x1c5>
    12b2:	f7 01       	movw	r30, r14
    12b4:	e2 0f       	add	r30, r18
    12b6:	f1 1d       	adc	r31, r1
    12b8:	10 82       	st	Z, r1
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	eb ce       	rjmp	.-554    	; 0x1096 <dtoa_prf+0xce>
    12c0:	81 e3       	ldi	r24, 0x31	; 49
    12c2:	f0 cf       	rjmp	.-32     	; 0x12a4 <__stack+0x1a5>
    12c4:	91 93       	st	Z+, r25
    12c6:	81 50       	subi	r24, 0x01	; 1
    12c8:	f2 cf       	rjmp	.-28     	; 0x12ae <__stack+0x1af>

000012ca <__ftoa_engine>:
    12ca:	28 30       	cpi	r18, 0x08	; 8
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <__ftoa_engine+0x6>
    12ce:	27 e0       	ldi	r18, 0x07	; 7
    12d0:	33 27       	eor	r19, r19
    12d2:	da 01       	movw	r26, r20
    12d4:	99 0f       	add	r25, r25
    12d6:	31 1d       	adc	r19, r1
    12d8:	87 fd       	sbrc	r24, 7
    12da:	91 60       	ori	r25, 0x01	; 1
    12dc:	00 96       	adiw	r24, 0x00	; 0
    12de:	61 05       	cpc	r22, r1
    12e0:	71 05       	cpc	r23, r1
    12e2:	39 f4       	brne	.+14     	; 0x12f2 <__ftoa_engine+0x28>
    12e4:	32 60       	ori	r19, 0x02	; 2
    12e6:	2e 5f       	subi	r18, 0xFE	; 254
    12e8:	3d 93       	st	X+, r19
    12ea:	30 e3       	ldi	r19, 0x30	; 48
    12ec:	2a 95       	dec	r18
    12ee:	e1 f7       	brne	.-8      	; 0x12e8 <__ftoa_engine+0x1e>
    12f0:	08 95       	ret
    12f2:	9f 3f       	cpi	r25, 0xFF	; 255
    12f4:	30 f0       	brcs	.+12     	; 0x1302 <__ftoa_engine+0x38>
    12f6:	80 38       	cpi	r24, 0x80	; 128
    12f8:	71 05       	cpc	r23, r1
    12fa:	61 05       	cpc	r22, r1
    12fc:	09 f0       	breq	.+2      	; 0x1300 <__ftoa_engine+0x36>
    12fe:	3c 5f       	subi	r19, 0xFC	; 252
    1300:	3c 5f       	subi	r19, 0xFC	; 252
    1302:	3d 93       	st	X+, r19
    1304:	91 30       	cpi	r25, 0x01	; 1
    1306:	08 f0       	brcs	.+2      	; 0x130a <__ftoa_engine+0x40>
    1308:	80 68       	ori	r24, 0x80	; 128
    130a:	91 1d       	adc	r25, r1
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	1f 93       	push	r17
    1312:	0f 93       	push	r16
    1314:	ff 92       	push	r15
    1316:	ef 92       	push	r14
    1318:	19 2f       	mov	r17, r25
    131a:	98 7f       	andi	r25, 0xF8	; 248
    131c:	96 95       	lsr	r25
    131e:	e9 2f       	mov	r30, r25
    1320:	96 95       	lsr	r25
    1322:	96 95       	lsr	r25
    1324:	e9 0f       	add	r30, r25
    1326:	ff 27       	eor	r31, r31
    1328:	ea 51       	subi	r30, 0x1A	; 26
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	99 27       	eor	r25, r25
    132e:	33 27       	eor	r19, r19
    1330:	ee 24       	eor	r14, r14
    1332:	ff 24       	eor	r15, r15
    1334:	a7 01       	movw	r20, r14
    1336:	e7 01       	movw	r28, r14
    1338:	05 90       	lpm	r0, Z+
    133a:	08 94       	sec
    133c:	07 94       	ror	r0
    133e:	28 f4       	brcc	.+10     	; 0x134a <__ftoa_engine+0x80>
    1340:	36 0f       	add	r19, r22
    1342:	e7 1e       	adc	r14, r23
    1344:	f8 1e       	adc	r15, r24
    1346:	49 1f       	adc	r20, r25
    1348:	51 1d       	adc	r21, r1
    134a:	66 0f       	add	r22, r22
    134c:	77 1f       	adc	r23, r23
    134e:	88 1f       	adc	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	06 94       	lsr	r0
    1354:	a1 f7       	brne	.-24     	; 0x133e <__ftoa_engine+0x74>
    1356:	05 90       	lpm	r0, Z+
    1358:	07 94       	ror	r0
    135a:	28 f4       	brcc	.+10     	; 0x1366 <__ftoa_engine+0x9c>
    135c:	e7 0e       	add	r14, r23
    135e:	f8 1e       	adc	r15, r24
    1360:	49 1f       	adc	r20, r25
    1362:	56 1f       	adc	r21, r22
    1364:	c1 1d       	adc	r28, r1
    1366:	77 0f       	add	r23, r23
    1368:	88 1f       	adc	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	66 1f       	adc	r22, r22
    136e:	06 94       	lsr	r0
    1370:	a1 f7       	brne	.-24     	; 0x135a <__ftoa_engine+0x90>
    1372:	05 90       	lpm	r0, Z+
    1374:	07 94       	ror	r0
    1376:	28 f4       	brcc	.+10     	; 0x1382 <__ftoa_engine+0xb8>
    1378:	f8 0e       	add	r15, r24
    137a:	49 1f       	adc	r20, r25
    137c:	56 1f       	adc	r21, r22
    137e:	c7 1f       	adc	r28, r23
    1380:	d1 1d       	adc	r29, r1
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	66 1f       	adc	r22, r22
    1388:	77 1f       	adc	r23, r23
    138a:	06 94       	lsr	r0
    138c:	a1 f7       	brne	.-24     	; 0x1376 <__ftoa_engine+0xac>
    138e:	05 90       	lpm	r0, Z+
    1390:	07 94       	ror	r0
    1392:	20 f4       	brcc	.+8      	; 0x139c <__ftoa_engine+0xd2>
    1394:	49 0f       	add	r20, r25
    1396:	56 1f       	adc	r21, r22
    1398:	c7 1f       	adc	r28, r23
    139a:	d8 1f       	adc	r29, r24
    139c:	99 0f       	add	r25, r25
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	88 1f       	adc	r24, r24
    13a4:	06 94       	lsr	r0
    13a6:	a9 f7       	brne	.-22     	; 0x1392 <__ftoa_engine+0xc8>
    13a8:	84 91       	lpm	r24, Z
    13aa:	10 95       	com	r17
    13ac:	17 70       	andi	r17, 0x07	; 7
    13ae:	41 f0       	breq	.+16     	; 0x13c0 <__ftoa_engine+0xf6>
    13b0:	d6 95       	lsr	r29
    13b2:	c7 95       	ror	r28
    13b4:	57 95       	ror	r21
    13b6:	47 95       	ror	r20
    13b8:	f7 94       	ror	r15
    13ba:	e7 94       	ror	r14
    13bc:	1a 95       	dec	r17
    13be:	c1 f7       	brne	.-16     	; 0x13b0 <__ftoa_engine+0xe6>
    13c0:	ec e8       	ldi	r30, 0x8C	; 140
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	68 94       	set
    13c6:	15 90       	lpm	r1, Z+
    13c8:	15 91       	lpm	r17, Z+
    13ca:	35 91       	lpm	r19, Z+
    13cc:	65 91       	lpm	r22, Z+
    13ce:	95 91       	lpm	r25, Z+
    13d0:	05 90       	lpm	r0, Z+
    13d2:	7f e2       	ldi	r23, 0x2F	; 47
    13d4:	73 95       	inc	r23
    13d6:	e1 18       	sub	r14, r1
    13d8:	f1 0a       	sbc	r15, r17
    13da:	43 0b       	sbc	r20, r19
    13dc:	56 0b       	sbc	r21, r22
    13de:	c9 0b       	sbc	r28, r25
    13e0:	d0 09       	sbc	r29, r0
    13e2:	c0 f7       	brcc	.-16     	; 0x13d4 <__ftoa_engine+0x10a>
    13e4:	e1 0c       	add	r14, r1
    13e6:	f1 1e       	adc	r15, r17
    13e8:	43 1f       	adc	r20, r19
    13ea:	56 1f       	adc	r21, r22
    13ec:	c9 1f       	adc	r28, r25
    13ee:	d0 1d       	adc	r29, r0
    13f0:	7e f4       	brtc	.+30     	; 0x1410 <__ftoa_engine+0x146>
    13f2:	70 33       	cpi	r23, 0x30	; 48
    13f4:	11 f4       	brne	.+4      	; 0x13fa <__ftoa_engine+0x130>
    13f6:	8a 95       	dec	r24
    13f8:	e6 cf       	rjmp	.-52     	; 0x13c6 <__ftoa_engine+0xfc>
    13fa:	e8 94       	clt
    13fc:	01 50       	subi	r16, 0x01	; 1
    13fe:	30 f0       	brcs	.+12     	; 0x140c <__ftoa_engine+0x142>
    1400:	08 0f       	add	r16, r24
    1402:	0a f4       	brpl	.+2      	; 0x1406 <__ftoa_engine+0x13c>
    1404:	00 27       	eor	r16, r16
    1406:	02 17       	cp	r16, r18
    1408:	08 f4       	brcc	.+2      	; 0x140c <__ftoa_engine+0x142>
    140a:	20 2f       	mov	r18, r16
    140c:	23 95       	inc	r18
    140e:	02 2f       	mov	r16, r18
    1410:	7a 33       	cpi	r23, 0x3A	; 58
    1412:	28 f0       	brcs	.+10     	; 0x141e <__ftoa_engine+0x154>
    1414:	79 e3       	ldi	r23, 0x39	; 57
    1416:	7d 93       	st	X+, r23
    1418:	2a 95       	dec	r18
    141a:	e9 f7       	brne	.-6      	; 0x1416 <__ftoa_engine+0x14c>
    141c:	10 c0       	rjmp	.+32     	; 0x143e <__ftoa_engine+0x174>
    141e:	7d 93       	st	X+, r23
    1420:	2a 95       	dec	r18
    1422:	89 f6       	brne	.-94     	; 0x13c6 <__ftoa_engine+0xfc>
    1424:	06 94       	lsr	r0
    1426:	97 95       	ror	r25
    1428:	67 95       	ror	r22
    142a:	37 95       	ror	r19
    142c:	17 95       	ror	r17
    142e:	17 94       	ror	r1
    1430:	e1 18       	sub	r14, r1
    1432:	f1 0a       	sbc	r15, r17
    1434:	43 0b       	sbc	r20, r19
    1436:	56 0b       	sbc	r21, r22
    1438:	c9 0b       	sbc	r28, r25
    143a:	d0 09       	sbc	r29, r0
    143c:	98 f0       	brcs	.+38     	; 0x1464 <__ftoa_engine+0x19a>
    143e:	23 95       	inc	r18
    1440:	7e 91       	ld	r23, -X
    1442:	73 95       	inc	r23
    1444:	7a 33       	cpi	r23, 0x3A	; 58
    1446:	08 f0       	brcs	.+2      	; 0x144a <__ftoa_engine+0x180>
    1448:	70 e3       	ldi	r23, 0x30	; 48
    144a:	7c 93       	st	X, r23
    144c:	20 13       	cpse	r18, r16
    144e:	b8 f7       	brcc	.-18     	; 0x143e <__ftoa_engine+0x174>
    1450:	7e 91       	ld	r23, -X
    1452:	70 61       	ori	r23, 0x10	; 16
    1454:	7d 93       	st	X+, r23
    1456:	30 f0       	brcs	.+12     	; 0x1464 <__ftoa_engine+0x19a>
    1458:	83 95       	inc	r24
    145a:	71 e3       	ldi	r23, 0x31	; 49
    145c:	7d 93       	st	X+, r23
    145e:	70 e3       	ldi	r23, 0x30	; 48
    1460:	2a 95       	dec	r18
    1462:	e1 f7       	brne	.-8      	; 0x145c <__ftoa_engine+0x192>
    1464:	11 24       	eor	r1, r1
    1466:	ef 90       	pop	r14
    1468:	ff 90       	pop	r15
    146a:	0f 91       	pop	r16
    146c:	1f 91       	pop	r17
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	99 27       	eor	r25, r25
    1474:	87 fd       	sbrc	r24, 7
    1476:	90 95       	com	r25
    1478:	08 95       	ret

0000147a <_exit>:
    147a:	f8 94       	cli

0000147c <__stop_program>:
    147c:	ff cf       	rjmp	.-2      	; 0x147c <__stop_program>
