
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000015a6  0000163a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800140  00800140  0000167a  2**0
                  ALLOC
  3 .stab         000046a4  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a65  00000000  00000000  00005d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007785  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007798  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  000077d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00007f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  0000866c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00008689  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      58:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      5c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      60:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      68:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      6c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      70:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      74:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      7c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      80:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      84:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      88:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d0 e1       	ldi	r29, 0x10	; 16
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e6 ea       	ldi	r30, 0xA6	; 166
      ce:	f5 e1       	ldi	r31, 0x15	; 21
      d0:	00 e0       	ldi	r16, 0x00	; 0
      d2:	0b bf       	out	0x3b, r16	; 59
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x14>
      d6:	07 90       	elpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a0 34       	cpi	r26, 0x40	; 64
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0x10>

000000e0 <__do_clear_bss>:
      e0:	21 e0       	ldi	r18, 0x01	; 1
      e2:	a0 e4       	ldi	r26, 0x40	; 64
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a4 34       	cpi	r26, 0x44	; 68
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
      f0:	0e 94 0a 07 	call	0xe14	; 0xe14 <main>
      f4:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <_exit>

000000f8 <__bad_interrupt>:
      f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <path2>:
      fc:	08 95       	ret

000000fe <path3>:
    //Complete (back in some position as start)
}
void path2(){
    //Implement if necessary
}
void path3(){
      fe:	08 95       	ret

00000100 <turn>:
    //Implement if necessary
}

void turn(int degrees){
     100:	cf 92       	push	r12
     102:	df 92       	push	r13
     104:	ef 92       	push	r14
     106:	ff 92       	push	r15
     108:	0f 93       	push	r16
     10a:	1f 93       	push	r17
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	ec 01       	movw	r28, r24
    int *x = 0;
    int *y = 0;
    int *z = 0;
    float headingDegrees = getHeading(x,y,z);
     112:	40 e0       	ldi	r20, 0x00	; 0
     114:	50 e0       	ldi	r21, 0x00	; 0
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	70 e0       	ldi	r23, 0x00	; 0
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 28 06 	call	0xc50	; 0xc50 <getHeading>
     122:	6b 01       	movw	r12, r22
     124:	7c 01       	movw	r14, r24
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
     126:	be 01       	movw	r22, r28
     128:	0d 2e       	mov	r0, r29
     12a:	00 0c       	add	r0, r0
     12c:	88 0b       	sbc	r24, r24
     12e:	99 0b       	sbc	r25, r25
     130:	0e 94 1f 09 	call	0x123e	; 0x123e <__floatsisf>
     134:	a7 01       	movw	r20, r14
     136:	96 01       	movw	r18, r12
     138:	0e 94 92 07 	call	0xf24	; 0xf24 <__addsf3>
     13c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__fixsfsi>
     140:	cb 01       	movw	r24, r22
     142:	68 e6       	ldi	r22, 0x68	; 104
     144:	71 e0       	ldi	r23, 0x01	; 1
     146:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divmodhi4>
     14a:	8c 01       	movw	r16, r24
    if (degrees < 0){
     14c:	d7 fd       	sbrc	r29, 7
     14e:	29 c0       	rjmp	.+82     	; 0x1a2 <turn+0xa2>
        while ((int)headingDegrees != new_heading){
            move(-TURN_SPEED,TURN_SPEED,50);
            getHeading(x,y,z);
        }
    }
    else if (degrees > 0){
     150:	cd 2b       	or	r28, r29
     152:	f1 f0       	breq	.+60     	; 0x190 <turn+0x90>
        //Spin right until new heading
        while ((int)headingDegrees != (int)new_heading){
     154:	c7 01       	movw	r24, r14
     156:	b6 01       	movw	r22, r12
     158:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__fixsfsi>
     15c:	06 17       	cp	r16, r22
     15e:	17 07       	cpc	r17, r23
     160:	b9 f0       	breq	.+46     	; 0x190 <turn+0x90>
            move(TURN_SPEED,-TURN_SPEED,50);
     162:	e1 2c       	mov	r14, r1
     164:	f1 2c       	mov	r15, r1
     166:	08 e4       	ldi	r16, 0x48	; 72
     168:	12 e4       	ldi	r17, 0x42	; 66
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	40 e7       	ldi	r20, 0x70	; 112
     170:	51 ec       	ldi	r21, 0xC1	; 193
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	80 e7       	ldi	r24, 0x70	; 112
     178:	91 e4       	ldi	r25, 0x41	; 65
     17a:	0e 94 48 05 	call	0xa90	; 0xa90 <move>
            getHeading(x,y,z);
     17e:	40 e0       	ldi	r20, 0x00	; 0
     180:	50 e0       	ldi	r21, 0x00	; 0
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 28 06 	call	0xc50	; 0xc50 <getHeading>
     18e:	e9 cf       	rjmp	.-46     	; 0x162 <turn+0x62>
        }
    }
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	1f 91       	pop	r17
     196:	0f 91       	pop	r16
     198:	ff 90       	pop	r15
     19a:	ef 90       	pop	r14
     19c:	df 90       	pop	r13
     19e:	cf 90       	pop	r12
     1a0:	08 95       	ret
    float headingDegrees = getHeading(x,y,z);
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
    if (degrees < 0){
        //Spin left until new heading
        while ((int)headingDegrees != new_heading){
     1a2:	c7 01       	movw	r24, r14
     1a4:	b6 01       	movw	r22, r12
     1a6:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__fixsfsi>
     1aa:	06 17       	cp	r16, r22
     1ac:	17 07       	cpc	r17, r23
     1ae:	81 f3       	breq	.-32     	; 0x190 <turn+0x90>
            move(-TURN_SPEED,TURN_SPEED,50);
     1b0:	e1 2c       	mov	r14, r1
     1b2:	f1 2c       	mov	r15, r1
     1b4:	08 e4       	ldi	r16, 0x48	; 72
     1b6:	12 e4       	ldi	r17, 0x42	; 66
     1b8:	20 e0       	ldi	r18, 0x00	; 0
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	40 e7       	ldi	r20, 0x70	; 112
     1be:	51 e4       	ldi	r21, 0x41	; 65
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	80 e7       	ldi	r24, 0x70	; 112
     1c6:	91 ec       	ldi	r25, 0xC1	; 193
     1c8:	0e 94 48 05 	call	0xa90	; 0xa90 <move>
            getHeading(x,y,z);
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 28 06 	call	0xc50	; 0xc50 <getHeading>
     1dc:	e9 cf       	rjmp	.-46     	; 0x1b0 <turn+0xb0>

000001de <path1>:
    }

    return 0;
}

void path1(){
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
    //Forward for 2 seconds (about 6 feet)
    move(50 + (MOVE_SPEED/2),50 + (MOVE_SPEED/2),STABLE_Z);
     1e6:	e1 2c       	mov	r14, r1
     1e8:	f1 2c       	mov	r15, r1
     1ea:	08 e4       	ldi	r16, 0x48	; 72
     1ec:	12 e4       	ldi	r17, 0x42	; 66
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	46 e9       	ldi	r20, 0x96	; 150
     1f4:	52 e4       	ldi	r21, 0x42	; 66
     1f6:	ca 01       	movw	r24, r20
     1f8:	b9 01       	movw	r22, r18
     1fa:	0e 94 48 05 	call	0xa90	; 0xa90 <move>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fe:	2f ef       	ldi	r18, 0xFF	; 255
     200:	87 ea       	ldi	r24, 0xA7	; 167
     202:	91 e6       	ldi	r25, 0x61	; 97
     204:	21 50       	subi	r18, 0x01	; 1
     206:	80 40       	sbci	r24, 0x00	; 0
     208:	90 40       	sbci	r25, 0x00	; 0
     20a:	e1 f7       	brne	.-8      	; 0x204 <path1+0x26>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <path1+0x30>
     20e:	00 00       	nop
    _delay_ms(2000);
    //Down 3 seconds (aim for about 4 feet)
    move (50,50,0);
     210:	e1 2c       	mov	r14, r1
     212:	f1 2c       	mov	r15, r1
     214:	87 01       	movw	r16, r14
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	48 e4       	ldi	r20, 0x48	; 72
     21c:	52 e4       	ldi	r21, 0x42	; 66
     21e:	ca 01       	movw	r24, r20
     220:	b9 01       	movw	r22, r18
     222:	0e 94 48 05 	call	0xa90	; 0xa90 <move>
     226:	2f ef       	ldi	r18, 0xFF	; 255
     228:	8b e7       	ldi	r24, 0x7B	; 123
     22a:	92 e9       	ldi	r25, 0x92	; 146
     22c:	21 50       	subi	r18, 0x01	; 1
     22e:	80 40       	sbci	r24, 0x00	; 0
     230:	90 40       	sbci	r25, 0x00	; 0
     232:	e1 f7       	brne	.-8      	; 0x22c <path1+0x4e>
     234:	00 c0       	rjmp	.+0      	; 0x236 <path1+0x58>
     236:	00 00       	nop
    _delay_ms(3000);
    //spin left 90 degrees
    turn(-90);
     238:	86 ea       	ldi	r24, 0xA6	; 166
     23a:	9f ef       	ldi	r25, 0xFF	; 255
     23c:	0e 94 80 00 	call	0x100	; 0x100 <turn>
    //Forward for 2 seconds (about 6 feet)
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     240:	e1 2c       	mov	r14, r1
     242:	f1 2c       	mov	r15, r1
     244:	08 e4       	ldi	r16, 0x48	; 72
     246:	12 e4       	ldi	r17, 0x42	; 66
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	46 e9       	ldi	r20, 0x96	; 150
     24e:	52 e4       	ldi	r21, 0x42	; 66
     250:	ca 01       	movw	r24, r20
     252:	b9 01       	movw	r22, r18
     254:	0e 94 48 05 	call	0xa90	; 0xa90 <move>
     258:	2f ef       	ldi	r18, 0xFF	; 255
     25a:	87 ea       	ldi	r24, 0xA7	; 167
     25c:	91 e6       	ldi	r25, 0x61	; 97
     25e:	21 50       	subi	r18, 0x01	; 1
     260:	80 40       	sbci	r24, 0x00	; 0
     262:	90 40       	sbci	r25, 0x00	; 0
     264:	e1 f7       	brne	.-8      	; 0x25e <path1+0x80>
     266:	00 c0       	rjmp	.+0      	; 0x268 <path1+0x8a>
     268:	00 00       	nop
    _delay_ms(2000);
    //Spin left 90 degrees
    turn(-90);
     26a:	86 ea       	ldi	r24, 0xA6	; 166
     26c:	9f ef       	ldi	r25, 0xFF	; 255
     26e:	0e 94 80 00 	call	0x100	; 0x100 <turn>
    //Forward for 2 seconds (about 6 feet)
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	46 e9       	ldi	r20, 0x96	; 150
     278:	52 e4       	ldi	r21, 0x42	; 66
     27a:	ca 01       	movw	r24, r20
     27c:	b9 01       	movw	r22, r18
     27e:	0e 94 48 05 	call	0xa90	; 0xa90 <move>
     282:	2f ef       	ldi	r18, 0xFF	; 255
     284:	87 ea       	ldi	r24, 0xA7	; 167
     286:	91 e6       	ldi	r25, 0x61	; 97
     288:	21 50       	subi	r18, 0x01	; 1
     28a:	80 40       	sbci	r24, 0x00	; 0
     28c:	90 40       	sbci	r25, 0x00	; 0
     28e:	e1 f7       	brne	.-8      	; 0x288 <path1+0xaa>
     290:	00 c0       	rjmp	.+0      	; 0x292 <path1+0xb4>
     292:	00 00       	nop
    _delay_ms(2000);
    //Up 3 seconds (resurface)
    move(50,50,100);
     294:	e1 2c       	mov	r14, r1
     296:	f1 2c       	mov	r15, r1
     298:	08 ec       	ldi	r16, 0xC8	; 200
     29a:	12 e4       	ldi	r17, 0x42	; 66
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	48 e4       	ldi	r20, 0x48	; 72
     2a2:	52 e4       	ldi	r21, 0x42	; 66
     2a4:	ca 01       	movw	r24, r20
     2a6:	b9 01       	movw	r22, r18
     2a8:	0e 94 48 05 	call	0xa90	; 0xa90 <move>
    //Spin left 90 degrees
    turn(-90);
     2ac:	86 ea       	ldi	r24, 0xA6	; 166
     2ae:	9f ef       	ldi	r25, 0xFF	; 255
     2b0:	0e 94 80 00 	call	0x100	; 0x100 <turn>
    //Forward for 2 seconds (about 6 feet)
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     2b4:	e1 2c       	mov	r14, r1
     2b6:	f1 2c       	mov	r15, r1
     2b8:	08 e4       	ldi	r16, 0x48	; 72
     2ba:	12 e4       	ldi	r17, 0x42	; 66
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	46 e9       	ldi	r20, 0x96	; 150
     2c2:	52 e4       	ldi	r21, 0x42	; 66
     2c4:	ca 01       	movw	r24, r20
     2c6:	b9 01       	movw	r22, r18
     2c8:	0e 94 48 05 	call	0xa90	; 0xa90 <move>
    //Spin left 90 degrees
    turn(-90);
     2cc:	86 ea       	ldi	r24, 0xA6	; 166
     2ce:	9f ef       	ldi	r25, 0xFF	; 255
    //Complete (back in some position as start)
}
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	ef 90       	pop	r14
    //Spin left 90 degrees
    turn(-90);
    //Forward for 2 seconds (about 6 feet)
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
    //Spin left 90 degrees
    turn(-90);
     2d8:	0c 94 80 00 	jmp	0x100	; 0x100 <turn>

000002dc <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     2dc:	88 e4       	ldi	r24, 0x48	; 72
     2de:	80 93 70 00 	sts	0x0070, r24
     2e2:	08 95       	ret

000002e4 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     2e4:	10 92 74 00 	sts	0x0074, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     2e8:	94 ea       	ldi	r25, 0xA4	; 164
     2ea:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     2ee:	90 91 74 00 	lds	r25, 0x0074
     2f2:	97 ff       	sbrs	r25, 7
     2f4:	fc cf       	rjmp	.-8      	; 0x2ee <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     2f6:	90 91 71 00 	lds	r25, 0x0071
     2fa:	98 7f       	andi	r25, 0xF8	; 248
     2fc:	98 30       	cpi	r25, 0x08	; 8
     2fe:	11 f0       	breq	.+4      	; 0x304 <i2c_start+0x20>
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
     304:	80 93 73 00 	sts	0x0073, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     308:	84 e8       	ldi	r24, 0x84	; 132
     30a:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     30e:	80 91 74 00 	lds	r24, 0x0074
     312:	87 ff       	sbrs	r24, 7
     314:	fc cf       	rjmp	.-8      	; 0x30e <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     316:	80 91 71 00 	lds	r24, 0x0071
     31a:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     31c:	88 31       	cpi	r24, 0x18	; 24
     31e:	11 f0       	breq	.+4      	; 0x324 <i2c_start+0x40>
     320:	80 34       	cpi	r24, 0x40	; 64
     322:	71 f7       	brne	.-36     	; 0x300 <i2c_start+0x1c>
	
	return 0;
     324:	80 e0       	ldi	r24, 0x00	; 0
}
     326:	08 95       	ret

00000328 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     328:	80 93 73 00 	sts	0x0073, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     32c:	84 e8       	ldi	r24, 0x84	; 132
     32e:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     332:	80 91 74 00 	lds	r24, 0x0074
     336:	87 ff       	sbrs	r24, 7
     338:	fc cf       	rjmp	.-8      	; 0x332 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     33a:	90 91 71 00 	lds	r25, 0x0071
     33e:	98 7f       	andi	r25, 0xF8	; 248
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	98 32       	cpi	r25, 0x28	; 40
     344:	09 f0       	breq	.+2      	; 0x348 <i2c_write+0x20>
	
	return 0;
}
     346:	08 95       	ret
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     348:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     34a:	08 95       	ret

0000034c <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     34c:	84 ec       	ldi	r24, 0xC4	; 196
     34e:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     352:	80 91 74 00 	lds	r24, 0x0074
     356:	87 ff       	sbrs	r24, 7
     358:	fc cf       	rjmp	.-8      	; 0x352 <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
     35a:	80 91 73 00 	lds	r24, 0x0073
}
     35e:	08 95       	ret

00000360 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     360:	84 e8       	ldi	r24, 0x84	; 132
     362:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     366:	80 91 74 00 	lds	r24, 0x0074
     36a:	87 ff       	sbrs	r24, 7
     36c:	fc cf       	rjmp	.-8      	; 0x366 <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
     36e:	80 91 73 00 	lds	r24, 0x0073
}
     372:	08 95       	ret

00000374 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	8b 01       	movw	r16, r22
     37e:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     380:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_start>
     384:	81 11       	cpse	r24, r1
     386:	1f c0       	rjmp	.+62     	; 0x3c6 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
     388:	20 97       	sbiw	r28, 0x00	; 0
     38a:	a9 f0       	breq	.+42     	; 0x3b6 <i2c_transmit+0x42>
     38c:	f8 01       	movw	r30, r16
     38e:	c0 0f       	add	r28, r16
     390:	d1 1f       	adc	r29, r17
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     392:	24 e8       	ldi	r18, 0x84	; 132
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     394:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     396:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     39a:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     39e:	90 91 74 00 	lds	r25, 0x0074
     3a2:	97 ff       	sbrs	r25, 7
     3a4:	fc cf       	rjmp	.-8      	; 0x39e <i2c_transmit+0x2a>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     3a6:	90 91 71 00 	lds	r25, 0x0071
     3aa:	98 7f       	andi	r25, 0xF8	; 248
     3ac:	98 32       	cpi	r25, 0x28	; 40
     3ae:	59 f4       	brne	.+22     	; 0x3c6 <i2c_transmit+0x52>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
     3b0:	ec 17       	cp	r30, r28
     3b2:	fd 07       	cpc	r31, r29
     3b4:	79 f7       	brne	.-34     	; 0x394 <i2c_transmit+0x20>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     3b6:	94 e9       	ldi	r25, 0x94	; 148
     3b8:	90 93 74 00 	sts	0x0074, r25
	}
	
	i2c_stop();
	
	return 0;
}
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	08 95       	ret
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	08 95       	ret

000003d2 <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	8b 01       	movw	r16, r22
     3dc:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_READ)) return 1;
     3de:	81 60       	ori	r24, 0x01	; 1
     3e0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_start>
     3e4:	81 11       	cpse	r24, r1
     3e6:	25 c0       	rjmp	.+74     	; 0x432 <i2c_receive+0x60>
	
	for (uint16_t i = 0; i < (length-1); i++)
     3e8:	de 01       	movw	r26, r28
     3ea:	11 97       	sbiw	r26, 0x01	; 1
     3ec:	41 f1       	breq	.+80     	; 0x43e <i2c_receive+0x6c>
     3ee:	f8 01       	movw	r30, r16
     3f0:	a0 0f       	add	r26, r16
     3f2:	b1 1f       	adc	r27, r17

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     3f4:	24 ec       	ldi	r18, 0xC4	; 196
     3f6:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     3fa:	90 91 74 00 	lds	r25, 0x0074
     3fe:	97 ff       	sbrs	r25, 7
     400:	fc cf       	rjmp	.-8      	; 0x3fa <i2c_receive+0x28>
	// return received data from TWDR
	return TWDR;
     402:	90 91 73 00 	lds	r25, 0x0073
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     406:	91 93       	st	Z+, r25

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
     408:	ae 17       	cp	r26, r30
     40a:	bf 07       	cpc	r27, r31
     40c:	a1 f7       	brne	.-24     	; 0x3f6 <i2c_receive+0x24>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     40e:	94 e8       	ldi	r25, 0x84	; 132
     410:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     414:	90 91 74 00 	lds	r25, 0x0074
     418:	97 ff       	sbrs	r25, 7
     41a:	fc cf       	rjmp	.-8      	; 0x414 <i2c_receive+0x42>
	// return received data from TWDR
	return TWDR;
     41c:	90 91 73 00 	lds	r25, 0x0073
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     420:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     422:	94 e9       	ldi	r25, 0x94	; 148
     424:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	08 95       	ret
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
     432:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	08 95       	ret
     43e:	d8 01       	movw	r26, r16
     440:	e6 cf       	rjmp	.-52     	; 0x40e <i2c_receive+0x3c>

00000442 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     442:	ff 92       	push	r15
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	16 2f       	mov	r17, r22
     44e:	f4 2e       	mov	r15, r20
     450:	05 2f       	mov	r16, r21
     452:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr | 0x00)) return 1;
     454:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_start>
     458:	81 11       	cpse	r24, r1
     45a:	2c c0       	rjmp	.+88     	; 0x4b4 <i2c_writeReg+0x72>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     45c:	10 93 73 00 	sts	0x0073, r17
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     460:	94 e8       	ldi	r25, 0x84	; 132
     462:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     466:	90 91 74 00 	lds	r25, 0x0074
     46a:	97 ff       	sbrs	r25, 7
     46c:	fc cf       	rjmp	.-8      	; 0x466 <i2c_writeReg+0x24>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     46e:	90 91 71 00 	lds	r25, 0x0071
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     472:	20 97       	sbiw	r28, 0x00	; 0
     474:	b1 f0       	breq	.+44     	; 0x4a2 <i2c_writeReg+0x60>
     476:	ef 2d       	mov	r30, r15
     478:	f0 2f       	mov	r31, r16
     47a:	ce 0f       	add	r28, r30
     47c:	df 1f       	adc	r29, r31
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     47e:	44 e8       	ldi	r20, 0x84	; 132

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     480:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     482:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     486:	40 93 74 00 	sts	0x0074, r20
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     48a:	90 91 74 00 	lds	r25, 0x0074
     48e:	97 ff       	sbrs	r25, 7
     490:	fc cf       	rjmp	.-8      	; 0x48a <i2c_writeReg+0x48>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     492:	90 91 71 00 	lds	r25, 0x0071
     496:	98 7f       	andi	r25, 0xF8	; 248
     498:	98 32       	cpi	r25, 0x28	; 40
     49a:	61 f4       	brne	.+24     	; 0x4b4 <i2c_writeReg+0x72>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     49c:	ec 17       	cp	r30, r28
     49e:	fd 07       	cpc	r31, r29
     4a0:	79 f7       	brne	.-34     	; 0x480 <i2c_writeReg+0x3e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     4a2:	94 e9       	ldi	r25, 0x94	; 148
     4a4:	90 93 74 00 	sts	0x0074, r25
	}

	i2c_stop();

	return 0;
}
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	08 95       	ret
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
     4b4:	81 e0       	ldi	r24, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	08 95       	ret

000004c2 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	18 2f       	mov	r17, r24
     4d0:	06 2f       	mov	r16, r22
     4d2:	7a 01       	movw	r14, r20
     4d4:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
     4d6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_start>
     4da:	81 11       	cpse	r24, r1
     4dc:	38 c0       	rjmp	.+112    	; 0x54e <i2c_readReg+0x8c>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     4de:	00 93 73 00 	sts	0x0073, r16
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     4e2:	84 e8       	ldi	r24, 0x84	; 132
     4e4:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4e8:	80 91 74 00 	lds	r24, 0x0074
     4ec:	87 ff       	sbrs	r24, 7
     4ee:	fc cf       	rjmp	.-8      	; 0x4e8 <i2c_readReg+0x26>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     4f0:	80 91 71 00 	lds	r24, 0x0071
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
     4f4:	81 2f       	mov	r24, r17
     4f6:	81 60       	ori	r24, 0x01	; 1
     4f8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_start>
     4fc:	81 11       	cpse	r24, r1
     4fe:	27 c0       	rjmp	.+78     	; 0x54e <i2c_readReg+0x8c>

	for (uint16_t i = 0; i < (length-1); i++)
     500:	de 01       	movw	r26, r28
     502:	11 97       	sbiw	r26, 0x01	; 1
     504:	61 f1       	breq	.+88     	; 0x55e <i2c_readReg+0x9c>
     506:	f7 01       	movw	r30, r14
     508:	ae 0d       	add	r26, r14
     50a:	bf 1d       	adc	r27, r15

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     50c:	24 ec       	ldi	r18, 0xC4	; 196
     50e:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     512:	90 91 74 00 	lds	r25, 0x0074
     516:	97 ff       	sbrs	r25, 7
     518:	fc cf       	rjmp	.-8      	; 0x512 <i2c_readReg+0x50>
	// return received data from TWDR
	return TWDR;
     51a:	90 91 73 00 	lds	r25, 0x0073

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     51e:	91 93       	st	Z+, r25

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
     520:	ea 17       	cp	r30, r26
     522:	fb 07       	cpc	r31, r27
     524:	a1 f7       	brne	.-24     	; 0x50e <i2c_readReg+0x4c>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     526:	94 e8       	ldi	r25, 0x84	; 132
     528:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     52c:	90 91 74 00 	lds	r25, 0x0074
     530:	97 ff       	sbrs	r25, 7
     532:	fc cf       	rjmp	.-8      	; 0x52c <i2c_readReg+0x6a>
	// return received data from TWDR
	return TWDR;
     534:	90 91 73 00 	lds	r25, 0x0073

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     538:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     53a:	94 e9       	ldi	r25, 0x94	; 148
     53c:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
     54a:	ef 90       	pop	r14
     54c:	08 95       	ret
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
     54e:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	08 95       	ret
     55e:	d7 01       	movw	r26, r14
     560:	e2 cf       	rjmp	.-60     	; 0x526 <i2c_readReg+0x64>

00000562 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     562:	84 e9       	ldi	r24, 0x94	; 148
     564:	80 93 74 00 	sts	0x0074, r24
     568:	08 95       	ret

0000056a <enable_adc>:
#include "./adc.h"


void enable_adc(){
	DDRF = 0x00;
     56a:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0x00;
     56e:	10 92 62 00 	sts	0x0062, r1
	//internally wire REFSn bits in the ADMUX register to connect VREF 
		//to internal 2.56v reference --> 0.0025 v/step
	//ADMUX = (1 << REFS0) | (1 << REFS1); //2.56v
	ADMUX = (1 << REFS0); //AVCC
     572:	80 e4       	ldi	r24, 0x40	; 64
     574:	87 b9       	out	0x07, r24	; 7
	//Single ended input, gain is not allowed
	
	//Default Right Adjusted

	//Set ADEN in ADSCRA to enable ADC
	ADCSRA = (1 << ADEN);
     576:	80 e8       	ldi	r24, 0x80	; 128
     578:	86 b9       	out	0x06, r24	; 6
	//Set the ADC Clock frequency prescaler to 128 --> 125kHz
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     57a:	86 b1       	in	r24, 0x06	; 6
     57c:	87 60       	ori	r24, 0x07	; 7
     57e:	86 b9       	out	0x06, r24	; 6
	//Set free running mode
	//ADCSRA |= (1 << ADFR);
	//Enable the ADC Interrupt Flag
	ADCSRA |= (1 << ADIE);
     580:	33 9a       	sbi	0x06, 3	; 6
	//Start first conversion by setting ADSC in ADCSRA
	ADCSRA |= (1 << ADSC);
     582:	36 9a       	sbi	0x06, 6	; 6
     584:	08 95       	ret

00000586 <read_adc>:

}
int read_adc(int pin){
     586:	fc 01       	movw	r30, r24
	int data;
	if (pin > 7){
     588:	08 97       	sbiw	r24, 0x08	; 8
     58a:	fc f4       	brge	.+62     	; 0x5ca <read_adc+0x44>
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	50 e0       	ldi	r21, 0x00	; 0
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
		ADMUX &= ~(1 << i);
     590:	61 e0       	ldi	r22, 0x01	; 1
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	97 b1       	in	r25, 0x07	; 7
     596:	9b 01       	movw	r18, r22
     598:	04 2e       	mov	r0, r20
     59a:	01 c0       	rjmp	.+2      	; 0x59e <read_adc+0x18>
     59c:	22 0f       	add	r18, r18
     59e:	0a 94       	dec	r0
     5a0:	ea f7       	brpl	.-6      	; 0x59c <read_adc+0x16>
     5a2:	20 95       	com	r18
     5a4:	29 23       	and	r18, r25
     5a6:	27 b9       	out	0x07, r18	; 7
	if (pin > 7){
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
     5a8:	4f 5f       	subi	r20, 0xFF	; 255
     5aa:	5f 4f       	sbci	r21, 0xFF	; 255
     5ac:	45 30       	cpi	r20, 0x05	; 5
     5ae:	51 05       	cpc	r21, r1
     5b0:	89 f7       	brne	.-30     	; 0x594 <read_adc+0xe>
		ADMUX &= ~(1 << i);
	}
	//set the new mux bit
	ADMUX |= pin;
     5b2:	97 b1       	in	r25, 0x07	; 7
     5b4:	89 2f       	mov	r24, r25
     5b6:	8e 2b       	or	r24, r30
     5b8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
     5ba:	36 9a       	sbi	0x06, 6	; 6
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
     5bc:	34 9b       	sbis	0x06, 4	; 6
     5be:	fe cf       	rjmp	.-4      	; 0x5bc <read_adc+0x36>
	data = ADCL;
     5c0:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);
     5c2:	25 b1       	in	r18, 0x05	; 5
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	92 2b       	or	r25, r18
     5c8:	08 95       	ret

}
int read_adc(int pin){
	int data;
	if (pin > 7){
		return -1;
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	9f ef       	ldi	r25, 0xFF	; 255
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
	data = ADCL;
	data |= (ADCH << 8);
	return data;
}
     5ce:	08 95       	ret

000005d0 <get_voltage>:
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
     5d0:	88 30       	cpi	r24, 0x08	; 8
     5d2:	91 05       	cpc	r25, r1
     5d4:	20 f0       	brcs	.+8      	; 0x5de <get_voltage+0xe>
		return 0;
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	cb 01       	movw	r24, r22
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
}
     5dc:	08 95       	ret
}
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
		return 0;
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
     5de:	0e 94 c3 02 	call	0x586	; 0x586 <read_adc>
     5e2:	bc 01       	movw	r22, r24
     5e4:	99 0f       	add	r25, r25
     5e6:	88 0b       	sbc	r24, r24
     5e8:	99 0b       	sbc	r25, r25
     5ea:	0e 94 1f 09 	call	0x123e	; 0x123e <__floatsisf>
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	40 ea       	ldi	r20, 0xA0	; 160
     5f4:	5b e3       	ldi	r21, 0x3B	; 59
     5f6:	0e 94 03 0a 	call	0x1406	; 0x1406 <__mulsf3>
     5fa:	08 95       	ret

000005fc <strobe_lcd>:
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     5fc:	e2 e6       	ldi	r30, 0x62	; 98
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	88 60       	ori	r24, 0x08	; 8
     604:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     606:	80 81       	ld	r24, Z
     608:	87 7f       	andi	r24, 0xF7	; 247
     60a:	80 83       	st	Z, r24
     60c:	08 95       	ret

0000060e <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     60e:	77 9b       	sbis	0x0e, 7	; 14
     610:	fe cf       	rjmp	.-4      	; 0x60e <clear_display>
    SPDR = 0x00;    //command, not data
     612:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     614:	77 9b       	sbis	0x0e, 7	; 14
     616:	fe cf       	rjmp	.-4      	; 0x614 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     61c:	77 9b       	sbis	0x0e, 7	; 14
     61e:	fe cf       	rjmp	.-4      	; 0x61c <clear_display+0xe>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     620:	80 91 62 00 	lds	r24, 0x0062
     624:	88 60       	ori	r24, 0x08	; 8
     626:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     62a:	80 91 62 00 	lds	r24, 0x0062
     62e:	87 7f       	andi	r24, 0xF7	; 247
     630:	80 93 62 00 	sts	0x0062, r24
     634:	8f e9       	ldi	r24, 0x9F	; 159
     636:	98 e2       	ldi	r25, 0x28	; 40
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <clear_display+0x2a>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <clear_display+0x30>
     63e:	00 00       	nop
     640:	08 95       	ret

00000642 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     642:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     644:	77 9b       	sbis	0x0e, 7	; 14
     646:	fe cf       	rjmp	.-4      	; 0x644 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     648:	80 ec       	ldi	r24, 0xC0	; 192
     64a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     64c:	77 9b       	sbis	0x0e, 7	; 14
     64e:	fe cf       	rjmp	.-4      	; 0x64c <home_line2+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     650:	80 91 62 00 	lds	r24, 0x0062
     654:	88 60       	ori	r24, 0x08	; 8
     656:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     65a:	80 91 62 00 	lds	r24, 0x0062
     65e:	87 7f       	andi	r24, 0xF7	; 247
     660:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     664:	85 ec       	ldi	r24, 0xC5	; 197
     666:	8a 95       	dec	r24
     668:	f1 f7       	brne	.-4      	; 0x666 <home_line2+0x24>
     66a:	00 00       	nop
     66c:	08 95       	ret

0000066e <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     672:	77 9b       	sbis	0x0e, 7	; 14
     674:	fe cf       	rjmp	.-4      	; 0x672 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     676:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     678:	77 9b       	sbis	0x0e, 7	; 14
     67a:	fe cf       	rjmp	.-4      	; 0x678 <char2lcd+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     67c:	80 91 62 00 	lds	r24, 0x0062
     680:	88 60       	ori	r24, 0x08	; 8
     682:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     686:	80 91 62 00 	lds	r24, 0x0062
     68a:	87 7f       	andi	r24, 0xF7	; 247
     68c:	80 93 62 00 	sts	0x0062, r24
     690:	85 ec       	ldi	r24, 0xC5	; 197
     692:	8a 95       	dec	r24
     694:	f1 f7       	brne	.-4      	; 0x692 <char2lcd+0x24>
     696:	00 00       	nop
     698:	08 95       	ret

0000069a <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	fc 01       	movw	r30, r24
     6a0:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     6a6:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6a8:	77 9b       	sbis	0x0e, 7	; 14
     6aa:	fe cf       	rjmp	.-4      	; 0x6a8 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     6ac:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6ae:	77 9b       	sbis	0x0e, 7	; 14
     6b0:	fe cf       	rjmp	.-4      	; 0x6ae <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     6b2:	8d 91       	ld	r24, X+
     6b4:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6b6:	77 9b       	sbis	0x0e, 7	; 14
     6b8:	fe cf       	rjmp	.-4      	; 0x6b6 <string2lcd+0x1c>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     6ba:	90 91 62 00 	lds	r25, 0x0062
     6be:	98 60       	ori	r25, 0x08	; 8
     6c0:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     6c4:	90 91 62 00 	lds	r25, 0x0062
     6c8:	97 7f       	andi	r25, 0xF7	; 247
     6ca:	90 93 62 00 	sts	0x0062, r25
     6ce:	85 ec       	ldi	r24, 0xC5	; 197
     6d0:	8a 95       	dec	r24
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <string2lcd+0x36>
     6d4:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     6d6:	4f 5f       	subi	r20, 0xFF	; 255
     6d8:	5f 4f       	sbci	r21, 0xFF	; 255
     6da:	ef 01       	movw	r28, r30
     6dc:	09 90       	ld	r0, Y+
     6de:	00 20       	and	r0, r0
     6e0:	e9 f7       	brne	.-6      	; 0x6dc <string2lcd+0x42>
     6e2:	9e 01       	movw	r18, r28
     6e4:	2e 1b       	sub	r18, r30
     6e6:	3f 0b       	sbc	r19, r31
     6e8:	22 50       	subi	r18, 0x02	; 2
     6ea:	31 09       	sbc	r19, r1
     6ec:	24 17       	cp	r18, r20
     6ee:	35 07       	cpc	r19, r21
     6f0:	d8 f6       	brcc	.-74     	; 0x6a8 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	08 95       	ret

000006f8 <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     6f8:	e1 e6       	ldi	r30, 0x61	; 97
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 81       	ld	r24, Z
     6fe:	88 60       	ori	r24, 0x08	; 8
     700:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     702:	88 b3       	in	r24, 0x18	; 24
     704:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     706:	87 b3       	in	r24, 0x17	; 23
     708:	87 60       	ori	r24, 0x07	; 7
     70a:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     70c:	80 e5       	ldi	r24, 0x50	; 80
     70e:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	8e b9       	out	0x0e, r24	; 14
     714:	08 95       	ret

00000716 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     716:	8f e5       	ldi	r24, 0x5F	; 95
     718:	9a ee       	ldi	r25, 0xEA	; 234
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <lcd_init+0x4>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <lcd_init+0xa>
     720:	00 00       	nop
     722:	23 e0       	ldi	r18, 0x03	; 3
     724:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     726:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     728:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     72a:	77 9b       	sbis	0x0e, 7	; 14
     72c:	fe cf       	rjmp	.-4      	; 0x72a <lcd_init+0x14>
        SPDR = 0x30;
     72e:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     730:	77 9b       	sbis	0x0e, 7	; 14
     732:	fe cf       	rjmp	.-4      	; 0x730 <lcd_init+0x1a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     734:	80 91 62 00 	lds	r24, 0x0062
     738:	88 60       	ori	r24, 0x08	; 8
     73a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     73e:	80 91 62 00 	lds	r24, 0x0062
     742:	87 7f       	andi	r24, 0xF7	; 247
     744:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     748:	85 ec       	ldi	r24, 0xC5	; 197
     74a:	8a 95       	dec	r24
     74c:	f1 f7       	brne	.-4      	; 0x74a <lcd_init+0x34>
     74e:	00 00       	nop
     750:	21 50       	subi	r18, 0x01	; 1
     752:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     754:	49 f7       	brne	.-46     	; 0x728 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     756:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     758:	77 9b       	sbis	0x0e, 7	; 14
     75a:	fe cf       	rjmp	.-4      	; 0x758 <lcd_init+0x42>
    SPDR = 0x38;
     75c:	88 e3       	ldi	r24, 0x38	; 56
     75e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     760:	77 9b       	sbis	0x0e, 7	; 14
     762:	fe cf       	rjmp	.-4      	; 0x760 <lcd_init+0x4a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     764:	80 91 62 00 	lds	r24, 0x0062
     768:	88 60       	ori	r24, 0x08	; 8
     76a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     76e:	80 91 62 00 	lds	r24, 0x0062
     772:	87 7f       	andi	r24, 0xF7	; 247
     774:	80 93 62 00 	sts	0x0062, r24
     778:	95 ec       	ldi	r25, 0xC5	; 197
     77a:	9a 95       	dec	r25
     77c:	f1 f7       	brne	.-4      	; 0x77a <lcd_init+0x64>
     77e:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     780:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     782:	77 9b       	sbis	0x0e, 7	; 14
     784:	fe cf       	rjmp	.-4      	; 0x782 <lcd_init+0x6c>
    SPDR = 0x08;
     786:	88 e0       	ldi	r24, 0x08	; 8
     788:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     78a:	77 9b       	sbis	0x0e, 7	; 14
     78c:	fe cf       	rjmp	.-4      	; 0x78a <lcd_init+0x74>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     78e:	80 91 62 00 	lds	r24, 0x0062
     792:	88 60       	ori	r24, 0x08	; 8
     794:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     798:	80 91 62 00 	lds	r24, 0x0062
     79c:	87 7f       	andi	r24, 0xF7	; 247
     79e:	80 93 62 00 	sts	0x0062, r24
     7a2:	85 ec       	ldi	r24, 0xC5	; 197
     7a4:	8a 95       	dec	r24
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <lcd_init+0x8e>
     7a8:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     7aa:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7ac:	77 9b       	sbis	0x0e, 7	; 14
     7ae:	fe cf       	rjmp	.-4      	; 0x7ac <lcd_init+0x96>
    SPDR = 0x01;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7b4:	77 9b       	sbis	0x0e, 7	; 14
     7b6:	fe cf       	rjmp	.-4      	; 0x7b4 <lcd_init+0x9e>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     7b8:	80 91 62 00 	lds	r24, 0x0062
     7bc:	88 60       	ori	r24, 0x08	; 8
     7be:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     7c2:	80 91 62 00 	lds	r24, 0x0062
     7c6:	87 7f       	andi	r24, 0xF7	; 247
     7c8:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7cc:	8f ef       	ldi	r24, 0xFF	; 255
     7ce:	98 e1       	ldi	r25, 0x18	; 24
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <lcd_init+0xba>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <lcd_init+0xc0>
     7d6:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
     7d8:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7da:	77 9b       	sbis	0x0e, 7	; 14
     7dc:	fe cf       	rjmp	.-4      	; 0x7da <lcd_init+0xc4>
    SPDR = 0x06;
     7de:	86 e0       	ldi	r24, 0x06	; 6
     7e0:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7e2:	77 9b       	sbis	0x0e, 7	; 14
     7e4:	fe cf       	rjmp	.-4      	; 0x7e2 <lcd_init+0xcc>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     7e6:	80 91 62 00 	lds	r24, 0x0062
     7ea:	88 60       	ori	r24, 0x08	; 8
     7ec:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     7f0:	80 91 62 00 	lds	r24, 0x0062
     7f4:	87 7f       	andi	r24, 0xF7	; 247
     7f6:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7fa:	95 ec       	ldi	r25, 0xC5	; 197
     7fc:	9a 95       	dec	r25
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <lcd_init+0xe6>
     800:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     802:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     804:	77 9b       	sbis	0x0e, 7	; 14
     806:	fe cf       	rjmp	.-4      	; 0x804 <lcd_init+0xee>
    SPDR = 0x0E;
     808:	8e e0       	ldi	r24, 0x0E	; 14
     80a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     80c:	77 9b       	sbis	0x0e, 7	; 14
     80e:	fe cf       	rjmp	.-4      	; 0x80c <lcd_init+0xf6>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     810:	80 91 62 00 	lds	r24, 0x0062
     814:	88 60       	ori	r24, 0x08	; 8
     816:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     81a:	80 91 62 00 	lds	r24, 0x0062
     81e:	87 7f       	andi	r24, 0xF7	; 247
     820:	80 93 62 00 	sts	0x0062, r24
     824:	85 ec       	ldi	r24, 0xC5	; 197
     826:	8a 95       	dec	r24
     828:	f1 f7       	brne	.-4      	; 0x826 <lcd_init+0x110>
     82a:	00 00       	nop
     82c:	08 95       	ret

0000082e <USART1_Init>:
#include "uart.h"


void USART1_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     82e:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
     832:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     836:	88 e1       	ldi	r24, 0x18	; 24
     838:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (3<<UCSZ10);
     83c:	86 e0       	ldi	r24, 0x06	; 6
     83e:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     842:	2f ef       	ldi	r18, 0xFF	; 255
     844:	81 ee       	ldi	r24, 0xE1	; 225
     846:	94 e0       	ldi	r25, 0x04	; 4
     848:	21 50       	subi	r18, 0x01	; 1
     84a:	80 40       	sbci	r24, 0x00	; 0
     84c:	90 40       	sbci	r25, 0x00	; 0
     84e:	e1 f7       	brne	.-8      	; 0x848 <USART1_Init+0x1a>
     850:	00 c0       	rjmp	.+0      	; 0x852 <USART1_Init+0x24>
     852:	00 00       	nop
     854:	08 95       	ret

00000856 <USART1_Transmit>:
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     856:	90 91 9b 00 	lds	r25, 0x009B
     85a:	95 ff       	sbrs	r25, 5
     85c:	fc cf       	rjmp	.-8      	; 0x856 <USART1_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     85e:	80 93 9c 00 	sts	0x009C, r24
     862:	08 95       	ret

00000864 <USART1_send_string>:
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     864:	fc 01       	movw	r30, r24
     866:	20 81       	ld	r18, Z
     868:	22 23       	and	r18, r18
     86a:	51 f0       	breq	.+20     	; 0x880 <USART1_send_string+0x1c>
     86c:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     86e:	90 91 9b 00 	lds	r25, 0x009B
     872:	95 ff       	sbrs	r25, 5
     874:	fc cf       	rjmp	.-8      	; 0x86e <USART1_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     876:	20 93 9c 00 	sts	0x009C, r18
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     87a:	21 91       	ld	r18, Z+
     87c:	21 11       	cpse	r18, r1
     87e:	f7 cf       	rjmp	.-18     	; 0x86e <USART1_send_string+0xa>
     880:	08 95       	ret

00000882 <USART1_Receive>:
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     882:	80 91 9b 00 	lds	r24, 0x009B
     886:	87 ff       	sbrs	r24, 7
     888:	fc cf       	rjmp	.-8      	; 0x882 <USART1_Receive>
    return UDR1;
     88a:	80 91 9c 00 	lds	r24, 0x009C
}
     88e:	08 95       	ret

00000890 <USART1_Receive_String>:

void USART1_Receive_String(unsigned char *str){
     890:	dc 01       	movw	r26, r24
     892:	fc 01       	movw	r30, r24
     894:	9c 01       	movw	r18, r24
     896:	2b 5f       	subi	r18, 0xFB	; 251
     898:	3f 4f       	sbci	r19, 0xFF	; 255
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     89a:	90 91 9b 00 	lds	r25, 0x009B
     89e:	97 ff       	sbrs	r25, 7
     8a0:	fc cf       	rjmp	.-8      	; 0x89a <USART1_Receive_String+0xa>
    return UDR1;
     8a2:	90 91 9c 00 	lds	r25, 0x009C

void USART1_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     8a6:	9e 37       	cpi	r25, 0x7E	; 126
     8a8:	29 f0       	breq	.+10     	; 0x8b4 <USART1_Receive_String+0x24>
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
     8aa:	e2 17       	cp	r30, r18
     8ac:	f3 07       	cpc	r31, r19
     8ae:	19 f0       	breq	.+6      	; 0x8b6 <USART1_Receive_String+0x26>
            str[2] = 75;
            str[3] = END_STRING;
            str[4] = '\0';
            break;
        }
        str[i] = c;
     8b0:	91 93       	st	Z+, r25
     8b2:	f3 cf       	rjmp	.-26     	; 0x89a <USART1_Receive_String+0xa>
     8b4:	08 95       	ret
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
     8b6:	82 e3       	ldi	r24, 0x32	; 50
     8b8:	8c 93       	st	X, r24
            str[1] = 25;
     8ba:	89 e1       	ldi	r24, 0x19	; 25
     8bc:	11 96       	adiw	r26, 0x01	; 1
     8be:	8c 93       	st	X, r24
     8c0:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 75;
     8c2:	8b e4       	ldi	r24, 0x4B	; 75
     8c4:	12 96       	adiw	r26, 0x02	; 2
     8c6:	8c 93       	st	X, r24
     8c8:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
     8ca:	8e e7       	ldi	r24, 0x7E	; 126
     8cc:	13 96       	adiw	r26, 0x03	; 3
     8ce:	8c 93       	st	X, r24
     8d0:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
     8d2:	14 96       	adiw	r26, 0x04	; 4
     8d4:	1c 92       	st	X, r1
            break;
     8d6:	08 95       	ret

000008d8 <USART1_flush>:
        str[i] = c;
        ++i;
    }
}

void USART1_flush(){
     8d8:	e1 e3       	ldi	r30, 0x31	; 49
     8da:	f1 e0       	ldi	r31, 0x01	; 1
     8dc:	96 e4       	ldi	r25, 0x46	; 70
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     8de:	80 91 9b 00 	lds	r24, 0x009B
     8e2:	85 ff       	sbrs	r24, 5
     8e4:	fc cf       	rjmp	.-8      	; 0x8de <USART1_flush+0x6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     8e6:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     8ea:	91 91       	ld	r25, Z+
     8ec:	91 11       	cpse	r25, r1
     8ee:	f7 cf       	rjmp	.-18     	; 0x8de <USART1_flush+0x6>
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     8f0:	80 91 9b 00 	lds	r24, 0x009B
     8f4:	87 ff       	sbrs	r24, 7
     8f6:	0c c0       	rjmp	.+24     	; 0x910 <USART1_flush+0x38>
        dummy = UDR1;
     8f8:	90 91 9c 00 	lds	r25, 0x009C
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     8fc:	80 91 9b 00 	lds	r24, 0x009B
     900:	85 ff       	sbrs	r24, 5
     902:	fc cf       	rjmp	.-8      	; 0x8fc <USART1_flush+0x24>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     904:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     908:	80 91 9b 00 	lds	r24, 0x009B
     90c:	87 fd       	sbrc	r24, 7
     90e:	f4 cf       	rjmp	.-24     	; 0x8f8 <USART1_flush+0x20>
     910:	08 95       	ret

00000912 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     912:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
     916:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     918:	88 e1       	ldi	r24, 0x18	; 24
     91a:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */ 
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
     91c:	8e e0       	ldi	r24, 0x0E	; 14
     91e:	80 93 95 00 	sts	0x0095, r24
     922:	2f ef       	ldi	r18, 0xFF	; 255
     924:	81 ee       	ldi	r24, 0xE1	; 225
     926:	94 e0       	ldi	r25, 0x04	; 4
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	80 40       	sbci	r24, 0x00	; 0
     92c:	90 40       	sbci	r25, 0x00	; 0
     92e:	e1 f7       	brne	.-8      	; 0x928 <USART0_Init+0x16>
     930:	00 c0       	rjmp	.+0      	; 0x932 <USART0_Init+0x20>
     932:	00 00       	nop
     934:	08 95       	ret

00000936 <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     936:	5d 9b       	sbis	0x0b, 5	; 11
     938:	fe cf       	rjmp	.-4      	; 0x936 <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     93a:	8c b9       	out	0x0c, r24	; 12
     93c:	08 95       	ret

0000093e <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
     93e:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
     940:	90 81       	ld	r25, Z
     942:	99 23       	and	r25, r25
     944:	39 f0       	breq	.+14     	; 0x954 <USART0_send_string+0x16>
     946:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     948:	5d 9b       	sbis	0x0b, 5	; 11
     94a:	fe cf       	rjmp	.-4      	; 0x948 <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     94c:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     94e:	91 91       	ld	r25, Z+
     950:	91 11       	cpse	r25, r1
     952:	fa cf       	rjmp	.-12     	; 0x948 <USART0_send_string+0xa>
     954:	08 95       	ret

00000956 <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
     956:	80 e8       	ldi	r24, 0x80	; 128
     958:	9d e8       	ldi	r25, 0x8D	; 141
     95a:	ab e5       	ldi	r26, 0x5B	; 91
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	04 c0       	rjmp	.+8      	; 0x968 <USART0_Receive+0x12>
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	a1 09       	sbc	r26, r1
     964:	b1 09       	sbc	r27, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
     966:	21 f0       	breq	.+8      	; 0x970 <USART0_Receive+0x1a>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
     968:	5f 9b       	sbis	0x0b, 7	; 11
     96a:	fa cf       	rjmp	.-12     	; 0x960 <USART0_Receive+0xa>
            /* Get and return received data from buffer */ 
            return UDR0;
     96c:	8c b1       	in	r24, 0x0c	; 12
     96e:	08 95       	ret
        }
    } while (--timeout);
    return 255;
     970:	8f ef       	ldi	r24, 0xFF	; 255
    /********
    * This is the original
    ************/
    //while (!(UCSR0A & (1<<RXC0)));
    //return UDR0;
}
     972:	08 95       	ret

00000974 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
     974:	dc 01       	movw	r26, r24
     976:	fc 01       	movw	r30, r24
     978:	9c 01       	movw	r18, r24
     97a:	2b 5f       	subi	r18, 0xFB	; 251
     97c:	3f 4f       	sbci	r19, 0xFF	; 255
     97e:	40 e8       	ldi	r20, 0x80	; 128
     980:	5d e8       	ldi	r21, 0x8D	; 141
     982:	6b e5       	ldi	r22, 0x5B	; 91
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	05 c0       	rjmp	.+10     	; 0x992 <USART0_Receive_String+0x1e>
     988:	41 50       	subi	r20, 0x01	; 1
     98a:	51 09       	sbc	r21, r1
     98c:	61 09       	sbc	r22, r1
     98e:	71 09       	sbc	r23, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
     990:	61 f0       	breq	.+24     	; 0x9aa <USART0_Receive_String+0x36>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
     992:	5f 9b       	sbis	0x0b, 7	; 11
     994:	f9 cf       	rjmp	.-14     	; 0x988 <USART0_Receive_String+0x14>
            /* Get and return received data from buffer */ 
            return UDR0;
     996:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     998:	9e 37       	cpi	r25, 0x7E	; 126
     99a:	b1 f0       	breq	.+44     	; 0x9c8 <USART0_Receive_String+0x54>
        if (c == 255 || i > MAX_STRING_SIZE - 1){
     99c:	9f 3f       	cpi	r25, 0xFF	; 255
     99e:	29 f0       	breq	.+10     	; 0x9aa <USART0_Receive_String+0x36>
     9a0:	e2 17       	cp	r30, r18
     9a2:	f3 07       	cpc	r31, r19
     9a4:	11 f0       	breq	.+4      	; 0x9aa <USART0_Receive_String+0x36>
            str[2] = 50;
            str[3] = END_STRING;
            str[4] = '\0';
            return;
        }
        str[i] = c;
     9a6:	91 93       	st	Z+, r25
     9a8:	ea cf       	rjmp	.-44     	; 0x97e <USART0_Receive_String+0xa>
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
     9aa:	82 e3       	ldi	r24, 0x32	; 50
     9ac:	8c 93       	st	X, r24
            str[1] = 50;
     9ae:	11 96       	adiw	r26, 0x01	; 1
     9b0:	8c 93       	st	X, r24
     9b2:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
     9b4:	12 96       	adiw	r26, 0x02	; 2
     9b6:	8c 93       	st	X, r24
     9b8:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
     9ba:	8e e7       	ldi	r24, 0x7E	; 126
     9bc:	13 96       	adiw	r26, 0x03	; 3
     9be:	8c 93       	st	X, r24
     9c0:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
     9c2:	14 96       	adiw	r26, 0x04	; 4
     9c4:	1c 92       	st	X, r1
            return;
     9c6:	08 95       	ret
     9c8:	08 95       	ret

000009ca <USART0_flush>:
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
     9ca:	5f 9b       	sbis	0x0b, 7	; 11
     9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <USART0_flush+0xa>
        dummy = UDR0;
     9ce:	8c b1       	in	r24, 0x0c	; 12
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
     9d0:	5f 99       	sbic	0x0b, 7	; 11
     9d2:	fd cf       	rjmp	.-6      	; 0x9ce <USART0_flush+0x4>
     9d4:	08 95       	ret

000009d6 <init_esc>:
void init_motors(){
    init_esc();
    set_16bitPWM1();
}

void init_esc(){
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
     9da:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9dc:	ef e6       	ldi	r30, 0x6F	; 111
     9de:	f7 e1       	ldi	r31, 0x17	; 23
     9e0:	31 97       	sbiw	r30, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <init_esc+0xa>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <init_esc+0x10>
     9e6:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
     9e8:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ea:	ff ef       	ldi	r31, 0xFF	; 255
     9ec:	23 ed       	ldi	r18, 0xD3	; 211
     9ee:	30 e3       	ldi	r19, 0x30	; 48
     9f0:	f1 50       	subi	r31, 0x01	; 1
     9f2:	20 40       	sbci	r18, 0x00	; 0
     9f4:	30 40       	sbci	r19, 0x00	; 0
     9f6:	e1 f7       	brne	.-8      	; 0x9f0 <init_esc+0x1a>
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <init_esc+0x24>
     9fa:	00 00       	nop
     9fc:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
     9fe:	69 f7       	brne	.-38     	; 0x9da <init_esc+0x4>
        PORTB |= (1 << 4);
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
        _delay_ms(1000);
    }
}
     a00:	08 95       	ret

00000a02 <set_16bitPWM1>:

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
     a02:	8f b5       	in	r24, 0x2f	; 47
     a04:	80 68       	ori	r24, 0x80	; 128
     a06:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
     a08:	8f b5       	in	r24, 0x2f	; 47
     a0a:	80 62       	ori	r24, 0x20	; 32
     a0c:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
     a0e:	8f b5       	in	r24, 0x2f	; 47
     a10:	88 60       	ori	r24, 0x08	; 8
     a12:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
     a14:	8f b5       	in	r24, 0x2f	; 47
     a16:	82 60       	ori	r24, 0x02	; 2
     a18:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
     a1a:	8e b5       	in	r24, 0x2e	; 46
     a1c:	88 61       	ori	r24, 0x18	; 24
     a1e:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
     a20:	8e b5       	in	r24, 0x2e	; 46
     a22:	82 60       	ori	r24, 0x02	; 2
     a24:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     a26:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     a28:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     a2a:	21 e0       	ldi	r18, 0x01	; 1
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	3d bd       	out	0x2d, r19	; 45
     a30:	2c bd       	out	0x2c, r18	; 44
    sei();
     a32:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     a34:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
     a36:	8f ef       	ldi	r24, 0xFF	; 255
     a38:	9f ef       	ldi	r25, 0xFF	; 255
     a3a:	97 bd       	out	0x27, r25	; 39
     a3c:	86 bd       	out	0x26, r24	; 38
     a3e:	2f ef       	ldi	r18, 0xFF	; 255
     a40:	81 ee       	ldi	r24, 0xE1	; 225
     a42:	94 e0       	ldi	r25, 0x04	; 4
     a44:	21 50       	subi	r18, 0x01	; 1
     a46:	80 40       	sbci	r24, 0x00	; 0
     a48:	90 40       	sbci	r25, 0x00	; 0
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <set_16bitPWM1+0x42>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <set_16bitPWM1+0x4c>
     a4e:	00 00       	nop
     a50:	08 95       	ret

00000a52 <init_motors>:
#include "motors.h"

void init_motors(){
     a52:	83 e0       	ldi	r24, 0x03	; 3
     a54:	90 e0       	ldi	r25, 0x00	; 0
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
     a56:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a58:	ef e6       	ldi	r30, 0x6F	; 111
     a5a:	f7 e1       	ldi	r31, 0x17	; 23
     a5c:	31 97       	sbiw	r30, 0x01	; 1
     a5e:	f1 f7       	brne	.-4      	; 0xa5c <init_motors+0xa>
     a60:	00 c0       	rjmp	.+0      	; 0xa62 <init_motors+0x10>
     a62:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
     a64:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a66:	ff ef       	ldi	r31, 0xFF	; 255
     a68:	23 ed       	ldi	r18, 0xD3	; 211
     a6a:	30 e3       	ldi	r19, 0x30	; 48
     a6c:	f1 50       	subi	r31, 0x01	; 1
     a6e:	20 40       	sbci	r18, 0x00	; 0
     a70:	30 40       	sbci	r19, 0x00	; 0
     a72:	e1 f7       	brne	.-8      	; 0xa6c <init_motors+0x1a>
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <init_motors+0x24>
     a76:	00 00       	nop
     a78:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
     a7a:	69 f7       	brne	.-38     	; 0xa56 <init_motors+0x4>
#include "motors.h"

void init_motors(){
    init_esc();
    set_16bitPWM1();
     a7c:	0c 94 01 05 	jmp	0xa02	; 0xa02 <set_16bitPWM1>

00000a80 <TIM16_WriteTCNT1>:
    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
     a80:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     a82:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     a84:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     a86:	3d bd       	out	0x2d, r19	; 45
     a88:	2c bd       	out	0x2c, r18	; 44
    sei();
     a8a:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     a8c:	9f bf       	out	0x3f, r25	; 63
     a8e:	08 95       	ret

00000a90 <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
     a90:	4f 92       	push	r4
     a92:	5f 92       	push	r5
     a94:	6f 92       	push	r6
     a96:	7f 92       	push	r7
     a98:	8f 92       	push	r8
     a9a:	9f 92       	push	r9
     a9c:	af 92       	push	r10
     a9e:	bf 92       	push	r11
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	2b 01       	movw	r4, r22
     ab2:	3c 01       	movw	r6, r24
     ab4:	49 01       	movw	r8, r18
     ab6:	5a 01       	movw	r10, r20
     ab8:	67 01       	movw	r12, r14
     aba:	78 01       	movw	r14, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 ef       	ldi	r20, 0xF0	; 240
     ac2:	51 e4       	ldi	r21, 0x41	; 65
     ac4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__cmpsf2>
     ac8:	87 fd       	sbrc	r24, 7
     aca:	64 c0       	rjmp	.+200    	; 0xb94 <move+0x104>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	4c e8       	ldi	r20, 0x8C	; 140
     ad2:	52 e4       	ldi	r21, 0x42	; 66
     ad4:	c3 01       	movw	r24, r6
     ad6:	b2 01       	movw	r22, r4
     ad8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__gesf2>
     adc:	18 16       	cp	r1, r24
     ade:	0c f0       	brlt	.+2      	; 0xae2 <move+0x52>
     ae0:	67 c0       	rjmp	.+206    	; 0xbb0 <move+0x120>
     ae2:	08 ef       	ldi	r16, 0xF8	; 248
     ae4:	1c e0       	ldi	r17, 0x0C	; 12
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	40 ef       	ldi	r20, 0xF0	; 240
     aec:	51 e4       	ldi	r21, 0x41	; 65
     aee:	c5 01       	movw	r24, r10
     af0:	b4 01       	movw	r22, r8
     af2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__cmpsf2>
     af6:	87 fd       	sbrc	r24, 7
     af8:	58 c0       	rjmp	.+176    	; 0xbaa <move+0x11a>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	4c e8       	ldi	r20, 0x8C	; 140
     b00:	52 e4       	ldi	r21, 0x42	; 66
     b02:	c5 01       	movw	r24, r10
     b04:	b4 01       	movw	r22, r8
     b06:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__gesf2>
     b0a:	18 16       	cp	r1, r24
     b0c:	0c f0       	brlt	.+2      	; 0xb10 <move+0x80>
     b0e:	6d c0       	rjmp	.+218    	; 0xbea <move+0x15a>
     b10:	c8 ef       	ldi	r28, 0xF8	; 248
     b12:	dc e0       	ldi	r29, 0x0C	; 12
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + SATURATE_DIFFERENCE)){
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 ef       	ldi	r20, 0xF0	; 240
     b1a:	51 e4       	ldi	r21, 0x41	; 65
     b1c:	c7 01       	movw	r24, r14
     b1e:	b6 01       	movw	r22, r12
     b20:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__cmpsf2>
     b24:	87 fd       	sbrc	r24, 7
     b26:	39 c0       	rjmp	.+114    	; 0xb9a <move+0x10a>
        z = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (z > (MAX_INPUT - SATURATE_DIFFERENCE)){
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	4c e8       	ldi	r20, 0x8C	; 140
     b2e:	52 e4       	ldi	r21, 0x42	; 66
     b30:	c7 01       	movw	r24, r14
     b32:	b6 01       	movw	r22, r12
     b34:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__gesf2>
     b38:	18 16       	cp	r1, r24
     b3a:	0c f0       	brlt	.+2      	; 0xb3e <move+0xae>
     b3c:	4b c0       	rjmp	.+150    	; 0xbd4 <move+0x144>
     b3e:	83 e3       	ldi	r24, 0x33	; 51
     b40:	c8 2e       	mov	r12, r24
     b42:	dc 2c       	mov	r13, r12
     b44:	ec 2c       	mov	r14, r12
     b46:	8f e3       	ldi	r24, 0x3F	; 63
     b48:	f8 2e       	mov	r15, r24

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different speed controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     b4a:	66 b5       	in	r22, 0x26	; 38
     b4c:	77 b5       	in	r23, 0x27	; 39
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 1d 09 	call	0x123a	; 0x123a <__floatunsisf>
     b56:	a7 01       	movw	r20, r14
     b58:	96 01       	movw	r18, r12
     b5a:	0e 94 03 0a 	call	0x1406	; 0x1406 <__mulsf3>
     b5e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fixunssfsi>
    OCR1A = left_speed;
     b62:	1b bd       	out	0x2b, r17	; 43
     b64:	0a bd       	out	0x2a, r16	; 42
    OCR1B = right_speed;
     b66:	d9 bd       	out	0x29, r29	; 41
     b68:	c8 bd       	out	0x28, r28	; 40
    OCR1C = z_speed;
     b6a:	70 93 79 00 	sts	0x0079, r23
     b6e:	60 93 78 00 	sts	0x0078, r22

}
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	bf 90       	pop	r11
     b84:	af 90       	pop	r10
     b86:	9f 90       	pop	r9
     b88:	8f 90       	pop	r8
     b8a:	7f 90       	pop	r7
     b8c:	6f 90       	pop	r6
     b8e:	5f 90       	pop	r5
     b90:	4f 90       	pop	r4
     b92:	08 95       	ret
     b94:	08 e7       	ldi	r16, 0x78	; 120
     b96:	1a e0       	ldi	r17, 0x0A	; 10
     b98:	a6 cf       	rjmp	.-180    	; 0xae6 <move+0x56>
     b9a:	9a e9       	ldi	r25, 0x9A	; 154
     b9c:	c9 2e       	mov	r12, r25
     b9e:	99 e9       	ldi	r25, 0x99	; 153
     ba0:	d9 2e       	mov	r13, r25
     ba2:	ed 2c       	mov	r14, r13
     ba4:	9e e3       	ldi	r25, 0x3E	; 62
     ba6:	f9 2e       	mov	r15, r25
     ba8:	d0 cf       	rjmp	.-96     	; 0xb4a <move+0xba>
     baa:	c8 e7       	ldi	r28, 0x78	; 120
     bac:	da e0       	ldi	r29, 0x0A	; 10
     bae:	b2 cf       	rjmp	.-156    	; 0xb14 <move+0x84>
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	51 e4       	ldi	r21, 0x41	; 65
     bb8:	c3 01       	movw	r24, r6
     bba:	b2 01       	movw	r22, r4
     bbc:	0e 94 03 0a 	call	0x1406	; 0x1406 <__mulsf3>
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e8       	ldi	r19, 0x80	; 128
     bc4:	49 e0       	ldi	r20, 0x09	; 9
     bc6:	55 e4       	ldi	r21, 0x45	; 69
     bc8:	0e 94 92 07 	call	0xf24	; 0xf24 <__addsf3>
     bcc:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fixunssfsi>
     bd0:	8b 01       	movw	r16, r22
     bd2:	89 cf       	rjmp	.-238    	; 0xae6 <move+0x56>
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	48 ec       	ldi	r20, 0xC8	; 200
     bda:	52 e4       	ldi	r21, 0x42	; 66
     bdc:	c7 01       	movw	r24, r14
     bde:	b6 01       	movw	r22, r12
     be0:	0e 94 75 08 	call	0x10ea	; 0x10ea <__divsf3>
     be4:	6b 01       	movw	r12, r22
     be6:	7c 01       	movw	r14, r24
     be8:	b0 cf       	rjmp	.-160    	; 0xb4a <move+0xba>
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e8       	ldi	r20, 0x80	; 128
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	c5 01       	movw	r24, r10
     bf4:	b4 01       	movw	r22, r8
     bf6:	0e 94 03 0a 	call	0x1406	; 0x1406 <__mulsf3>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e8       	ldi	r19, 0x80	; 128
     bfe:	49 e0       	ldi	r20, 0x09	; 9
     c00:	55 e4       	ldi	r21, 0x45	; 69
     c02:	0e 94 92 07 	call	0xf24	; 0xf24 <__addsf3>
     c06:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fixunssfsi>
     c0a:	eb 01       	movw	r28, r22
     c0c:	83 cf       	rjmp	.-250    	; 0xb14 <move+0x84>

00000c0e <init_HMC5883L>:
#include "magnometer.h"

void init_HMC5883L(void){

    i2c_start(HMC5883L_WRITE);
     c0e:	8c e3       	ldi	r24, 0x3C	; 60
     c10:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_start>
    i2c_write(0x00); // set pointer to CRA
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	0e 94 94 01 	call	0x328	; 0x328 <i2c_write>
    i2c_write(0x70); // write 0x70 to CRA
     c1a:	80 e7       	ldi	r24, 0x70	; 112
     c1c:	0e 94 94 01 	call	0x328	; 0x328 <i2c_write>
    i2c_stop();
     c20:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
     c24:	8c e3       	ldi	r24, 0x3C	; 60
     c26:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_start>
    i2c_write(0x01); // set pointer to CRB
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	0e 94 94 01 	call	0x328	; 0x328 <i2c_write>
    i2c_write(0xA0);
     c30:	80 ea       	ldi	r24, 0xA0	; 160
     c32:	0e 94 94 01 	call	0x328	; 0x328 <i2c_write>
    i2c_stop();
     c36:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
     c3a:	8c e3       	ldi	r24, 0x3C	; 60
     c3c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_start>
    i2c_write(0x02); // set pointer to measurement mode
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	0e 94 94 01 	call	0x328	; 0x328 <i2c_write>
    i2c_write(0x00); // continous measurement
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	0e 94 94 01 	call	0x328	; 0x328 <i2c_write>
    i2c_stop();
     c4c:	0c 94 b1 02 	jmp	0x562	; 0x562 <i2c_stop>

00000c50 <getHeading>:
}
float getHeading(int16_t *x, int16_t *y, int16_t *z){
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	8c 01       	movw	r16, r24
     c62:	eb 01       	movw	r28, r22
     c64:	7a 01       	movw	r14, r20

    float headingDegrees;
    
    i2c_start(HMC5883L_WRITE);
     c66:	8c e3       	ldi	r24, 0x3C	; 60
     c68:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_start>
    i2c_write(0x03); // set pointer to X axis MSB
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	0e 94 94 01 	call	0x328	; 0x328 <i2c_write>
    i2c_stop();
     c72:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_stop>

    i2c_start(HMC5883L_READ);
     c76:	8d e3       	ldi	r24, 0x3D	; 61
     c78:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_start>

    *x = ((uint8_t)i2c_read_ack())<<8;
     c7c:	0e 94 a6 01 	call	0x34c	; 0x34c <i2c_read_ack>
     c80:	f8 01       	movw	r30, r16
     c82:	10 82       	st	Z, r1
     c84:	81 83       	std	Z+1, r24	; 0x01
    *x |= i2c_read_ack();
     c86:	0e 94 a6 01 	call	0x34c	; 0x34c <i2c_read_ack>
     c8a:	f8 01       	movw	r30, r16
     c8c:	20 81       	ld	r18, Z
     c8e:	31 81       	ldd	r19, Z+1	; 0x01
     c90:	28 2b       	or	r18, r24
     c92:	31 83       	std	Z+1, r19	; 0x01
     c94:	20 83       	st	Z, r18

    *z = ((uint8_t)i2c_read_ack())<<8;
     c96:	0e 94 a6 01 	call	0x34c	; 0x34c <i2c_read_ack>
     c9a:	f7 01       	movw	r30, r14
     c9c:	10 82       	st	Z, r1
     c9e:	81 83       	std	Z+1, r24	; 0x01
    *z |= i2c_read_ack();
     ca0:	0e 94 a6 01 	call	0x34c	; 0x34c <i2c_read_ack>
     ca4:	f7 01       	movw	r30, r14
     ca6:	20 81       	ld	r18, Z
     ca8:	31 81       	ldd	r19, Z+1	; 0x01
     caa:	28 2b       	or	r18, r24
     cac:	31 83       	std	Z+1, r19	; 0x01
     cae:	20 83       	st	Z, r18

    *y = ((uint8_t)i2c_read_ack())<<8;
     cb0:	0e 94 a6 01 	call	0x34c	; 0x34c <i2c_read_ack>
     cb4:	18 82       	st	Y, r1
     cb6:	89 83       	std	Y+1, r24	; 0x01
    *y |= i2c_read_nack();
     cb8:	0e 94 b0 01 	call	0x360	; 0x360 <i2c_read_nack>
     cbc:	28 81       	ld	r18, Y
     cbe:	39 81       	ldd	r19, Y+1	; 0x01
     cc0:	28 2b       	or	r18, r24
     cc2:	39 83       	std	Y+1, r19	; 0x01
     cc4:	28 83       	st	Y, r18

    i2c_stop();
     cc6:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_stop>

    headingDegrees = atan2((double)*y,(double)*x) * 180 / 3.141592654 + 180;
     cca:	f8 01       	movw	r30, r16
     ccc:	60 81       	ld	r22, Z
     cce:	71 81       	ldd	r23, Z+1	; 0x01
     cd0:	07 2e       	mov	r0, r23
     cd2:	00 0c       	add	r0, r0
     cd4:	88 0b       	sbc	r24, r24
     cd6:	99 0b       	sbc	r25, r25
     cd8:	0e 94 1f 09 	call	0x123e	; 0x123e <__floatsisf>
     cdc:	6b 01       	movw	r12, r22
     cde:	7c 01       	movw	r14, r24
     ce0:	68 81       	ld	r22, Y
     ce2:	79 81       	ldd	r23, Y+1	; 0x01
     ce4:	07 2e       	mov	r0, r23
     ce6:	00 0c       	add	r0, r0
     ce8:	88 0b       	sbc	r24, r24
     cea:	99 0b       	sbc	r25, r25
     cec:	0e 94 1f 09 	call	0x123e	; 0x123e <__floatsisf>
     cf0:	a7 01       	movw	r20, r14
     cf2:	96 01       	movw	r18, r12
     cf4:	0e 94 11 08 	call	0x1022	; 0x1022 <atan2>
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	44 e3       	ldi	r20, 0x34	; 52
     cfe:	53 e4       	ldi	r21, 0x43	; 67
     d00:	0e 94 03 0a 	call	0x1406	; 0x1406 <__mulsf3>
     d04:	2b ed       	ldi	r18, 0xDB	; 219
     d06:	3f e0       	ldi	r19, 0x0F	; 15
     d08:	49 e4       	ldi	r20, 0x49	; 73
     d0a:	50 e4       	ldi	r21, 0x40	; 64
     d0c:	0e 94 75 08 	call	0x10ea	; 0x10ea <__divsf3>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	44 e3       	ldi	r20, 0x34	; 52
     d16:	53 e4       	ldi	r21, 0x43	; 67
     d18:	0e 94 92 07 	call	0xf24	; 0xf24 <__addsf3>

    return headingDegrees;
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	08 95       	ret

00000d2e <get_distance>:
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	cb 01       	movw	r24, r22
     d34:	08 95       	ret

00000d36 <print_distance>:
    return 0;
}

double print_distance(unsigned int pin){
    return 0;
}
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	cb 01       	movw	r24, r22
     d3c:	08 95       	ret

00000d3e <enable_laser_sensor>:
void enable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
     d3e:	43 98       	cbi	0x08, 3	; 8

    //enable analog comparator multiplexer, set SFIOR:ACME
    SFIOR |= (1 << ACME);
     d40:	80 b5       	in	r24, 0x20	; 32
     d42:	88 60       	ori	r24, 0x08	; 8
     d44:	80 bd       	out	0x20, r24	; 32

    //set AIN1 to laser sensor pin
    ADMUX &= 0b11111000; //clear the admux input pin bits
     d46:	87 b1       	in	r24, 0x07	; 7
     d48:	88 7f       	andi	r24, 0xF8	; 248
     d4a:	87 b9       	out	0x07, r24	; 7
    ADMUX |= LASER_SENSOR;  //set the new bits
     d4c:	38 9a       	sbi	0x07, 0	; 7
    
    //enable analog comparator, clear ACSR:ACD
    ACSR &= ~(1 << ACD);
     d4e:	47 98       	cbi	0x08, 7	; 8
    
    //set comparator interrupt on rising output edge, set ACSR:ACIS1, set ACSR:ACIS0
    ACSR |= (1 << ACIS1) | (1 << ACIS0);
     d50:	88 b1       	in	r24, 0x08	; 8
     d52:	83 60       	ori	r24, 0x03	; 3
     d54:	88 b9       	out	0x08, r24	; 8
    
    //enable analog comparator interrupt, set ACSR:ACIE
    ACSR |= (1 << ACIE);
     d56:	43 9a       	sbi	0x08, 3	; 8
     d58:	08 95       	ret

00000d5a <disable_laser_sensor>:
    
    //Be sure to handle the interrupt until ACSR:ACO goes low
}
void disable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
     d5a:	43 98       	cbi	0x08, 3	; 8

    //disable analog comparator, set ACSR:ACD
    ACSR |= (1 << ACD);
     d5c:	47 9a       	sbi	0x08, 7	; 8

    //disable analog comparator multiplexor, clear SFIOR:ACME
    SFIOR &= ~(1 << ACME);
     d5e:	80 b5       	in	r24, 0x20	; 32
     d60:	87 7f       	andi	r24, 0xF7	; 247
     d62:	80 bd       	out	0x20, r24	; 32
     d64:	08 95       	ret

00000d66 <laser_off>:
}

void laser_off(){
    PORTB |= (1 << LASER);
     d66:	c0 9a       	sbi	0x18, 0	; 24
     d68:	08 95       	ret

00000d6a <laser_on>:
}
void laser_on(){
    PORTB &= ~(1 << LASER);
     d6a:	c0 98       	cbi	0x18, 0	; 24
     d6c:	08 95       	ret

00000d6e <calibrate_pressure_sensor>:
#define	PRESSURESENSOR_C

#include "pressuresensor.h"

void calibrate_pressure_sensor(){
	PSENSOR_MIN = get_voltage(PSENSOR_PIN);;
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <get_voltage>
     d76:	60 93 40 01 	sts	0x0140, r22
     d7a:	70 93 41 01 	sts	0x0141, r23
     d7e:	80 93 42 01 	sts	0x0142, r24
     d82:	90 93 43 01 	sts	0x0143, r25
     d86:	08 95       	ret

00000d88 <get_depth_mpa>:
}

double get_depth_mpa(){
     d88:	8f 92       	push	r8
     d8a:	9f 92       	push	r9
     d8c:	af 92       	push	r10
     d8e:	bf 92       	push	r11
     d90:	cf 92       	push	r12
     d92:	df 92       	push	r13
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
	return 1.2 * (get_voltage(PSENSOR_PIN) - PSENSOR_MIN)/(4.5-PSENSOR_MIN);
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <get_voltage>
     da0:	20 91 40 01 	lds	r18, 0x0140
     da4:	30 91 41 01 	lds	r19, 0x0141
     da8:	40 91 42 01 	lds	r20, 0x0142
     dac:	50 91 43 01 	lds	r21, 0x0143
     db0:	80 90 40 01 	lds	r8, 0x0140
     db4:	90 90 41 01 	lds	r9, 0x0141
     db8:	a0 90 42 01 	lds	r10, 0x0142
     dbc:	b0 90 43 01 	lds	r11, 0x0143
     dc0:	0e 94 91 07 	call	0xf22	; 0xf22 <__subsf3>
     dc4:	2a e9       	ldi	r18, 0x9A	; 154
     dc6:	39 e9       	ldi	r19, 0x99	; 153
     dc8:	49 e9       	ldi	r20, 0x99	; 153
     dca:	5f e3       	ldi	r21, 0x3F	; 63
     dcc:	0e 94 03 0a 	call	0x1406	; 0x1406 <__mulsf3>
     dd0:	6b 01       	movw	r12, r22
     dd2:	7c 01       	movw	r14, r24
     dd4:	a5 01       	movw	r20, r10
     dd6:	94 01       	movw	r18, r8
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	80 e9       	ldi	r24, 0x90	; 144
     dde:	90 e4       	ldi	r25, 0x40	; 64
     de0:	0e 94 91 07 	call	0xf22	; 0xf22 <__subsf3>
     de4:	9b 01       	movw	r18, r22
     de6:	ac 01       	movw	r20, r24
     de8:	c7 01       	movw	r24, r14
     dea:	b6 01       	movw	r22, r12
     dec:	0e 94 75 08 	call	0x10ea	; 0x10ea <__divsf3>
}
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	cf 90       	pop	r12
     df8:	bf 90       	pop	r11
     dfa:	af 90       	pop	r10
     dfc:	9f 90       	pop	r9
     dfe:	8f 90       	pop	r8
     e00:	08 95       	ret

00000e02 <get_depth_feet>:
     e02:	0e 94 c4 06 	call	0xd88	; 0xd88 <get_depth_mpa>
     e06:	29 ef       	ldi	r18, 0xF9	; 249
     e08:	37 e4       	ldi	r19, 0x47	; 71
     e0a:	47 ea       	ldi	r20, 0xA7	; 167
     e0c:	53 e4       	ldi	r21, 0x43	; 67
     e0e:	0e 94 03 0a 	call	0x1406	; 0x1406 <__mulsf3>
     e12:	08 95       	ret

00000e14 <main>:
void forward();
void reverse();



int main(){
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	c4 56       	subi	r28, 0x64	; 100
     e1e:	d1 09       	sbc	r29, r1
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
    DDRB = 0xFF;
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
     e2e:	18 ba       	out	0x18, r1	; 24
    USART0_Init(MYUBRR);
     e30:	87 e6       	ldi	r24, 0x67	; 103
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 89 04 	call	0x912	; 0x912 <USART0_Init>
    enable_adc();
     e38:	0e 94 b5 02 	call	0x56a	; 0x56a <enable_adc>
    spi_init();
     e3c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <spi_init>
    lcd_init();
     e40:	0e 94 8b 03 	call	0x716	; 0x716 <lcd_init>
    unsigned char data[100];
    /*****************
    *   THIS IS THE TEST FILE
    *******************/
    while (1){
        laser_on();
     e44:	0e 94 b5 06 	call	0xd6a	; 0xd6a <laser_on>
     e48:	8f e3       	ldi	r24, 0x3F	; 63
     e4a:	9c e9       	ldi	r25, 0x9C	; 156
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <main+0x38>
     e50:	00 c0       	rjmp	.+0      	; 0xe52 <main+0x3e>
     e52:	00 00       	nop
        _delay_ms(10);
        on = read_adc(LASER_SENSOR);
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 c3 02 	call	0x586	; 0x586 <read_adc>
     e5c:	8c 01       	movw	r16, r24
        USART0_send_string((unsigned char*)"ADC Value ON: ");
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	0e 94 9f 04 	call	0x93e	; 0x93e <USART0_send_string>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     e66:	4a e0       	ldi	r20, 0x0A	; 10
     e68:	be 01       	movw	r22, r28
     e6a:	6f 5f       	subi	r22, 0xFF	; 255
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	c8 01       	movw	r24, r16
     e70:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__itoa_ncheck>
        USART0_send_string((unsigned char*)itoa(on,(char *)data,10));
     e74:	0e 94 9f 04 	call	0x93e	; 0x93e <USART0_send_string>
        clear_display();
     e78:	0e 94 07 03 	call	0x60e	; 0x60e <clear_display>
     e7c:	4a e0       	ldi	r20, 0x0A	; 10
     e7e:	be 01       	movw	r22, r28
     e80:	6f 5f       	subi	r22, 0xFF	; 255
     e82:	7f 4f       	sbci	r23, 0xFF	; 255
     e84:	c8 01       	movw	r24, r16
     e86:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__itoa_ncheck>
        string2lcd((unsigned char*)itoa(on,(char *)data,10));
     e8a:	0e 94 4d 03 	call	0x69a	; 0x69a <string2lcd>
        USART0_send_string("   ");
     e8e:	8f e0       	ldi	r24, 0x0F	; 15
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	0e 94 9f 04 	call	0x93e	; 0x93e <USART0_send_string>
     e96:	9f ef       	ldi	r25, 0xFF	; 255
     e98:	23 ec       	ldi	r18, 0xC3	; 195
     e9a:	89 e0       	ldi	r24, 0x09	; 9
     e9c:	91 50       	subi	r25, 0x01	; 1
     e9e:	20 40       	sbci	r18, 0x00	; 0
     ea0:	80 40       	sbci	r24, 0x00	; 0
     ea2:	e1 f7       	brne	.-8      	; 0xe9c <main+0x88>
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <main+0x92>
     ea6:	00 00       	nop
        _delay_ms(200);
        laser_off();
     ea8:	0e 94 b3 06 	call	0xd66	; 0xd66 <laser_off>
     eac:	8f e3       	ldi	r24, 0x3F	; 63
     eae:	9c e9       	ldi	r25, 0x9C	; 156
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <main+0x9c>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <main+0xa2>
     eb6:	00 00       	nop
        _delay_ms(10);
        off = read_adc(LASER_SENSOR);
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 c3 02 	call	0x586	; 0x586 <read_adc>
     ec0:	7c 01       	movw	r14, r24
        USART0_send_string((unsigned char*)"ADC Value OFF: ");
     ec2:	83 e1       	ldi	r24, 0x13	; 19
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	0e 94 9f 04 	call	0x93e	; 0x93e <USART0_send_string>
     eca:	4a e0       	ldi	r20, 0x0A	; 10
     ecc:	be 01       	movw	r22, r28
     ece:	6f 5f       	subi	r22, 0xFF	; 255
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	c7 01       	movw	r24, r14
     ed4:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__itoa_ncheck>
        USART0_send_string((unsigned char*)itoa(off,(char *)data,10));
     ed8:	0e 94 9f 04 	call	0x93e	; 0x93e <USART0_send_string>
        USART0_send_string("   ");
     edc:	8f e0       	ldi	r24, 0x0F	; 15
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 9f 04 	call	0x93e	; 0x93e <USART0_send_string>
     ee4:	9f ef       	ldi	r25, 0xFF	; 255
     ee6:	23 ec       	ldi	r18, 0xC3	; 195
     ee8:	89 e0       	ldi	r24, 0x09	; 9
     eea:	91 50       	subi	r25, 0x01	; 1
     eec:	20 40       	sbci	r18, 0x00	; 0
     eee:	80 40       	sbci	r24, 0x00	; 0
     ef0:	e1 f7       	brne	.-8      	; 0xeea <main+0xd6>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <main+0xe0>
     ef4:	00 00       	nop
        _delay_ms(200);

        USART0_send_string((unsigned char*)"Difference: ");
     ef6:	83 e2       	ldi	r24, 0x23	; 35
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	0e 94 9f 04 	call	0x93e	; 0x93e <USART0_send_string>
     efe:	4a e0       	ldi	r20, 0x0A	; 10
     f00:	be 01       	movw	r22, r28
     f02:	6f 5f       	subi	r22, 0xFF	; 255
     f04:	7f 4f       	sbci	r23, 0xFF	; 255
     f06:	c8 01       	movw	r24, r16
     f08:	8e 19       	sub	r24, r14
     f0a:	9f 09       	sbc	r25, r15
     f0c:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__itoa_ncheck>
        USART0_send_string((unsigned char*)itoa((on-off),(char *)data,10));
     f10:	0e 94 9f 04 	call	0x93e	; 0x93e <USART0_send_string>
        USART0_Transmit(10);
     f14:	8a e0       	ldi	r24, 0x0A	; 10
     f16:	0e 94 9b 04 	call	0x936	; 0x936 <USART0_Transmit>
        USART0_Transmit(10);
     f1a:	8a e0       	ldi	r24, 0x0A	; 10
     f1c:	0e 94 9b 04 	call	0x936	; 0x936 <USART0_Transmit>
     f20:	91 cf       	rjmp	.-222    	; 0xe44 <main+0x30>

00000f22 <__subsf3>:
     f22:	50 58       	subi	r21, 0x80	; 128

00000f24 <__addsf3>:
     f24:	bb 27       	eor	r27, r27
     f26:	aa 27       	eor	r26, r26
     f28:	0e 94 a9 07 	call	0xf52	; 0xf52 <__addsf3x>
     f2c:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_round>
     f30:	0e 94 ae 09 	call	0x135c	; 0x135c <__fp_pscA>
     f34:	38 f0       	brcs	.+14     	; 0xf44 <__addsf3+0x20>
     f36:	0e 94 b5 09 	call	0x136a	; 0x136a <__fp_pscB>
     f3a:	20 f0       	brcs	.+8      	; 0xf44 <__addsf3+0x20>
     f3c:	39 f4       	brne	.+14     	; 0xf4c <__addsf3+0x28>
     f3e:	9f 3f       	cpi	r25, 0xFF	; 255
     f40:	19 f4       	brne	.+6      	; 0xf48 <__addsf3+0x24>
     f42:	26 f4       	brtc	.+8      	; 0xf4c <__addsf3+0x28>
     f44:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__fp_nan>
     f48:	0e f4       	brtc	.+2      	; 0xf4c <__addsf3+0x28>
     f4a:	e0 95       	com	r30
     f4c:	e7 fb       	bst	r30, 7
     f4e:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_inf>

00000f52 <__addsf3x>:
     f52:	e9 2f       	mov	r30, r25
     f54:	0e 94 cd 09 	call	0x139a	; 0x139a <__fp_split3>
     f58:	58 f3       	brcs	.-42     	; 0xf30 <__addsf3+0xc>
     f5a:	ba 17       	cp	r27, r26
     f5c:	62 07       	cpc	r22, r18
     f5e:	73 07       	cpc	r23, r19
     f60:	84 07       	cpc	r24, r20
     f62:	95 07       	cpc	r25, r21
     f64:	20 f0       	brcs	.+8      	; 0xf6e <__addsf3x+0x1c>
     f66:	79 f4       	brne	.+30     	; 0xf86 <__addsf3x+0x34>
     f68:	a6 f5       	brtc	.+104    	; 0xfd2 <__addsf3x+0x80>
     f6a:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_zero>
     f6e:	0e f4       	brtc	.+2      	; 0xf72 <__addsf3x+0x20>
     f70:	e0 95       	com	r30
     f72:	0b 2e       	mov	r0, r27
     f74:	ba 2f       	mov	r27, r26
     f76:	a0 2d       	mov	r26, r0
     f78:	0b 01       	movw	r0, r22
     f7a:	b9 01       	movw	r22, r18
     f7c:	90 01       	movw	r18, r0
     f7e:	0c 01       	movw	r0, r24
     f80:	ca 01       	movw	r24, r20
     f82:	a0 01       	movw	r20, r0
     f84:	11 24       	eor	r1, r1
     f86:	ff 27       	eor	r31, r31
     f88:	59 1b       	sub	r21, r25
     f8a:	99 f0       	breq	.+38     	; 0xfb2 <__addsf3x+0x60>
     f8c:	59 3f       	cpi	r21, 0xF9	; 249
     f8e:	50 f4       	brcc	.+20     	; 0xfa4 <__addsf3x+0x52>
     f90:	50 3e       	cpi	r21, 0xE0	; 224
     f92:	68 f1       	brcs	.+90     	; 0xfee <__addsf3x+0x9c>
     f94:	1a 16       	cp	r1, r26
     f96:	f0 40       	sbci	r31, 0x00	; 0
     f98:	a2 2f       	mov	r26, r18
     f9a:	23 2f       	mov	r18, r19
     f9c:	34 2f       	mov	r19, r20
     f9e:	44 27       	eor	r20, r20
     fa0:	58 5f       	subi	r21, 0xF8	; 248
     fa2:	f3 cf       	rjmp	.-26     	; 0xf8a <__addsf3x+0x38>
     fa4:	46 95       	lsr	r20
     fa6:	37 95       	ror	r19
     fa8:	27 95       	ror	r18
     faa:	a7 95       	ror	r26
     fac:	f0 40       	sbci	r31, 0x00	; 0
     fae:	53 95       	inc	r21
     fb0:	c9 f7       	brne	.-14     	; 0xfa4 <__addsf3x+0x52>
     fb2:	7e f4       	brtc	.+30     	; 0xfd2 <__addsf3x+0x80>
     fb4:	1f 16       	cp	r1, r31
     fb6:	ba 0b       	sbc	r27, r26
     fb8:	62 0b       	sbc	r22, r18
     fba:	73 0b       	sbc	r23, r19
     fbc:	84 0b       	sbc	r24, r20
     fbe:	ba f0       	brmi	.+46     	; 0xfee <__addsf3x+0x9c>
     fc0:	91 50       	subi	r25, 0x01	; 1
     fc2:	a1 f0       	breq	.+40     	; 0xfec <__addsf3x+0x9a>
     fc4:	ff 0f       	add	r31, r31
     fc6:	bb 1f       	adc	r27, r27
     fc8:	66 1f       	adc	r22, r22
     fca:	77 1f       	adc	r23, r23
     fcc:	88 1f       	adc	r24, r24
     fce:	c2 f7       	brpl	.-16     	; 0xfc0 <__addsf3x+0x6e>
     fd0:	0e c0       	rjmp	.+28     	; 0xfee <__addsf3x+0x9c>
     fd2:	ba 0f       	add	r27, r26
     fd4:	62 1f       	adc	r22, r18
     fd6:	73 1f       	adc	r23, r19
     fd8:	84 1f       	adc	r24, r20
     fda:	48 f4       	brcc	.+18     	; 0xfee <__addsf3x+0x9c>
     fdc:	87 95       	ror	r24
     fde:	77 95       	ror	r23
     fe0:	67 95       	ror	r22
     fe2:	b7 95       	ror	r27
     fe4:	f7 95       	ror	r31
     fe6:	9e 3f       	cpi	r25, 0xFE	; 254
     fe8:	08 f0       	brcs	.+2      	; 0xfec <__addsf3x+0x9a>
     fea:	b0 cf       	rjmp	.-160    	; 0xf4c <__addsf3+0x28>
     fec:	93 95       	inc	r25
     fee:	88 0f       	add	r24, r24
     ff0:	08 f0       	brcs	.+2      	; 0xff4 <__addsf3x+0xa2>
     ff2:	99 27       	eor	r25, r25
     ff4:	ee 0f       	add	r30, r30
     ff6:	97 95       	ror	r25
     ff8:	87 95       	ror	r24
     ffa:	08 95       	ret
     ffc:	0e 94 ae 09 	call	0x135c	; 0x135c <__fp_pscA>
    1000:	60 f0       	brcs	.+24     	; 0x101a <__addsf3x+0xc8>
    1002:	80 e8       	ldi	r24, 0x80	; 128
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	09 f4       	brne	.+2      	; 0x100a <__addsf3x+0xb8>
    1008:	9e ef       	ldi	r25, 0xFE	; 254
    100a:	0e 94 b5 09 	call	0x136a	; 0x136a <__fp_pscB>
    100e:	28 f0       	brcs	.+10     	; 0x101a <__addsf3x+0xc8>
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	51 e0       	ldi	r21, 0x01	; 1
    1014:	71 f4       	brne	.+28     	; 0x1032 <atan2+0x10>
    1016:	5e ef       	ldi	r21, 0xFE	; 254
    1018:	0c c0       	rjmp	.+24     	; 0x1032 <atan2+0x10>
    101a:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__fp_nan>
    101e:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_zero>

00001022 <atan2>:
    1022:	e9 2f       	mov	r30, r25
    1024:	e0 78       	andi	r30, 0x80	; 128
    1026:	0e 94 cd 09 	call	0x139a	; 0x139a <__fp_split3>
    102a:	40 f3       	brcs	.-48     	; 0xffc <__addsf3x+0xaa>
    102c:	09 2e       	mov	r0, r25
    102e:	05 2a       	or	r0, r21
    1030:	b1 f3       	breq	.-20     	; 0x101e <__addsf3x+0xcc>
    1032:	26 17       	cp	r18, r22
    1034:	37 07       	cpc	r19, r23
    1036:	48 07       	cpc	r20, r24
    1038:	59 07       	cpc	r21, r25
    103a:	38 f0       	brcs	.+14     	; 0x104a <atan2+0x28>
    103c:	0e 2e       	mov	r0, r30
    103e:	07 f8       	bld	r0, 7
    1040:	e0 25       	eor	r30, r0
    1042:	69 f0       	breq	.+26     	; 0x105e <atan2+0x3c>
    1044:	e0 25       	eor	r30, r0
    1046:	e0 64       	ori	r30, 0x40	; 64
    1048:	0a c0       	rjmp	.+20     	; 0x105e <atan2+0x3c>
    104a:	ef 63       	ori	r30, 0x3F	; 63
    104c:	07 f8       	bld	r0, 7
    104e:	00 94       	com	r0
    1050:	07 fa       	bst	r0, 7
    1052:	db 01       	movw	r26, r22
    1054:	b9 01       	movw	r22, r18
    1056:	9d 01       	movw	r18, r26
    1058:	dc 01       	movw	r26, r24
    105a:	ca 01       	movw	r24, r20
    105c:	ad 01       	movw	r20, r26
    105e:	ef 93       	push	r30
    1060:	0e 94 8c 08 	call	0x1118	; 0x1118 <__divsf3_pse>
    1064:	0e 94 bc 09 	call	0x1378	; 0x1378 <__fp_round>
    1068:	0e 94 41 08 	call	0x1082	; 0x1082 <atan>
    106c:	5f 91       	pop	r21
    106e:	55 23       	and	r21, r21
    1070:	39 f0       	breq	.+14     	; 0x1080 <atan2+0x5e>
    1072:	2b ed       	ldi	r18, 0xDB	; 219
    1074:	3f e0       	ldi	r19, 0x0F	; 15
    1076:	49 e4       	ldi	r20, 0x49	; 73
    1078:	50 fd       	sbrc	r21, 0
    107a:	49 ec       	ldi	r20, 0xC9	; 201
    107c:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__addsf3>
    1080:	08 95       	ret

00001082 <atan>:
    1082:	df 93       	push	r29
    1084:	dd 27       	eor	r29, r29
    1086:	b9 2f       	mov	r27, r25
    1088:	bf 77       	andi	r27, 0x7F	; 127
    108a:	40 e8       	ldi	r20, 0x80	; 128
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	16 16       	cp	r1, r22
    1090:	17 06       	cpc	r1, r23
    1092:	48 07       	cpc	r20, r24
    1094:	5b 07       	cpc	r21, r27
    1096:	18 f4       	brcc	.+6      	; 0x109e <atan+0x1c>
    1098:	d9 2f       	mov	r29, r25
    109a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <inverse>
    109e:	9f 93       	push	r25
    10a0:	8f 93       	push	r24
    10a2:	7f 93       	push	r23
    10a4:	6f 93       	push	r22
    10a6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <square>
    10aa:	ec e8       	ldi	r30, 0x8C	; 140
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	0e 94 87 09 	call	0x130e	; 0x130e <__fp_powser>
    10b2:	0e 94 bc 09 	call	0x1378	; 0x1378 <__fp_round>
    10b6:	2f 91       	pop	r18
    10b8:	3f 91       	pop	r19
    10ba:	4f 91       	pop	r20
    10bc:	5f 91       	pop	r21
    10be:	0e 94 16 0a 	call	0x142c	; 0x142c <__mulsf3x>
    10c2:	dd 23       	and	r29, r29
    10c4:	51 f0       	breq	.+20     	; 0x10da <atan+0x58>
    10c6:	90 58       	subi	r25, 0x80	; 128
    10c8:	a2 ea       	ldi	r26, 0xA2	; 162
    10ca:	2a ed       	ldi	r18, 0xDA	; 218
    10cc:	3f e0       	ldi	r19, 0x0F	; 15
    10ce:	49 ec       	ldi	r20, 0xC9	; 201
    10d0:	5f e3       	ldi	r21, 0x3F	; 63
    10d2:	d0 78       	andi	r29, 0x80	; 128
    10d4:	5d 27       	eor	r21, r29
    10d6:	0e 94 a9 07 	call	0xf52	; 0xf52 <__addsf3x>
    10da:	df 91       	pop	r29
    10dc:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_round>

000010e0 <__cmpsf2>:
    10e0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__fp_cmp>
    10e4:	08 f4       	brcc	.+2      	; 0x10e8 <__cmpsf2+0x8>
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	08 95       	ret

000010ea <__divsf3>:
    10ea:	0e 94 89 08 	call	0x1112	; 0x1112 <__divsf3x>
    10ee:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_round>
    10f2:	0e 94 b5 09 	call	0x136a	; 0x136a <__fp_pscB>
    10f6:	58 f0       	brcs	.+22     	; 0x110e <__stack+0xf>
    10f8:	0e 94 ae 09 	call	0x135c	; 0x135c <__fp_pscA>
    10fc:	40 f0       	brcs	.+16     	; 0x110e <__stack+0xf>
    10fe:	29 f4       	brne	.+10     	; 0x110a <__stack+0xb>
    1100:	5f 3f       	cpi	r21, 0xFF	; 255
    1102:	29 f0       	breq	.+10     	; 0x110e <__stack+0xf>
    1104:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_inf>
    1108:	51 11       	cpse	r21, r1
    110a:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_szero>
    110e:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__fp_nan>

00001112 <__divsf3x>:
    1112:	0e 94 cd 09 	call	0x139a	; 0x139a <__fp_split3>
    1116:	68 f3       	brcs	.-38     	; 0x10f2 <__divsf3+0x8>

00001118 <__divsf3_pse>:
    1118:	99 23       	and	r25, r25
    111a:	b1 f3       	breq	.-20     	; 0x1108 <__stack+0x9>
    111c:	55 23       	and	r21, r21
    111e:	91 f3       	breq	.-28     	; 0x1104 <__stack+0x5>
    1120:	95 1b       	sub	r25, r21
    1122:	55 0b       	sbc	r21, r21
    1124:	bb 27       	eor	r27, r27
    1126:	aa 27       	eor	r26, r26
    1128:	62 17       	cp	r22, r18
    112a:	73 07       	cpc	r23, r19
    112c:	84 07       	cpc	r24, r20
    112e:	38 f0       	brcs	.+14     	; 0x113e <__divsf3_pse+0x26>
    1130:	9f 5f       	subi	r25, 0xFF	; 255
    1132:	5f 4f       	sbci	r21, 0xFF	; 255
    1134:	22 0f       	add	r18, r18
    1136:	33 1f       	adc	r19, r19
    1138:	44 1f       	adc	r20, r20
    113a:	aa 1f       	adc	r26, r26
    113c:	a9 f3       	breq	.-22     	; 0x1128 <__divsf3_pse+0x10>
    113e:	35 d0       	rcall	.+106    	; 0x11aa <__divsf3_pse+0x92>
    1140:	0e 2e       	mov	r0, r30
    1142:	3a f0       	brmi	.+14     	; 0x1152 <__divsf3_pse+0x3a>
    1144:	e0 e8       	ldi	r30, 0x80	; 128
    1146:	32 d0       	rcall	.+100    	; 0x11ac <__divsf3_pse+0x94>
    1148:	91 50       	subi	r25, 0x01	; 1
    114a:	50 40       	sbci	r21, 0x00	; 0
    114c:	e6 95       	lsr	r30
    114e:	00 1c       	adc	r0, r0
    1150:	ca f7       	brpl	.-14     	; 0x1144 <__divsf3_pse+0x2c>
    1152:	2b d0       	rcall	.+86     	; 0x11aa <__divsf3_pse+0x92>
    1154:	fe 2f       	mov	r31, r30
    1156:	29 d0       	rcall	.+82     	; 0x11aa <__divsf3_pse+0x92>
    1158:	66 0f       	add	r22, r22
    115a:	77 1f       	adc	r23, r23
    115c:	88 1f       	adc	r24, r24
    115e:	bb 1f       	adc	r27, r27
    1160:	26 17       	cp	r18, r22
    1162:	37 07       	cpc	r19, r23
    1164:	48 07       	cpc	r20, r24
    1166:	ab 07       	cpc	r26, r27
    1168:	b0 e8       	ldi	r27, 0x80	; 128
    116a:	09 f0       	breq	.+2      	; 0x116e <__divsf3_pse+0x56>
    116c:	bb 0b       	sbc	r27, r27
    116e:	80 2d       	mov	r24, r0
    1170:	bf 01       	movw	r22, r30
    1172:	ff 27       	eor	r31, r31
    1174:	93 58       	subi	r25, 0x83	; 131
    1176:	5f 4f       	sbci	r21, 0xFF	; 255
    1178:	3a f0       	brmi	.+14     	; 0x1188 <__divsf3_pse+0x70>
    117a:	9e 3f       	cpi	r25, 0xFE	; 254
    117c:	51 05       	cpc	r21, r1
    117e:	78 f0       	brcs	.+30     	; 0x119e <__divsf3_pse+0x86>
    1180:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_inf>
    1184:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_szero>
    1188:	5f 3f       	cpi	r21, 0xFF	; 255
    118a:	e4 f3       	brlt	.-8      	; 0x1184 <__divsf3_pse+0x6c>
    118c:	98 3e       	cpi	r25, 0xE8	; 232
    118e:	d4 f3       	brlt	.-12     	; 0x1184 <__divsf3_pse+0x6c>
    1190:	86 95       	lsr	r24
    1192:	77 95       	ror	r23
    1194:	67 95       	ror	r22
    1196:	b7 95       	ror	r27
    1198:	f7 95       	ror	r31
    119a:	9f 5f       	subi	r25, 0xFF	; 255
    119c:	c9 f7       	brne	.-14     	; 0x1190 <__divsf3_pse+0x78>
    119e:	88 0f       	add	r24, r24
    11a0:	91 1d       	adc	r25, r1
    11a2:	96 95       	lsr	r25
    11a4:	87 95       	ror	r24
    11a6:	97 f9       	bld	r25, 7
    11a8:	08 95       	ret
    11aa:	e1 e0       	ldi	r30, 0x01	; 1
    11ac:	66 0f       	add	r22, r22
    11ae:	77 1f       	adc	r23, r23
    11b0:	88 1f       	adc	r24, r24
    11b2:	bb 1f       	adc	r27, r27
    11b4:	62 17       	cp	r22, r18
    11b6:	73 07       	cpc	r23, r19
    11b8:	84 07       	cpc	r24, r20
    11ba:	ba 07       	cpc	r27, r26
    11bc:	20 f0       	brcs	.+8      	; 0x11c6 <__divsf3_pse+0xae>
    11be:	62 1b       	sub	r22, r18
    11c0:	73 0b       	sbc	r23, r19
    11c2:	84 0b       	sbc	r24, r20
    11c4:	ba 0b       	sbc	r27, r26
    11c6:	ee 1f       	adc	r30, r30
    11c8:	88 f7       	brcc	.-30     	; 0x11ac <__divsf3_pse+0x94>
    11ca:	e0 95       	com	r30
    11cc:	08 95       	ret

000011ce <__fixsfsi>:
    11ce:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fixunssfsi>
    11d2:	68 94       	set
    11d4:	b1 11       	cpse	r27, r1
    11d6:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_szero>
    11da:	08 95       	ret

000011dc <__fixunssfsi>:
    11dc:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__fp_splitA>
    11e0:	88 f0       	brcs	.+34     	; 0x1204 <__fixunssfsi+0x28>
    11e2:	9f 57       	subi	r25, 0x7F	; 127
    11e4:	98 f0       	brcs	.+38     	; 0x120c <__fixunssfsi+0x30>
    11e6:	b9 2f       	mov	r27, r25
    11e8:	99 27       	eor	r25, r25
    11ea:	b7 51       	subi	r27, 0x17	; 23
    11ec:	b0 f0       	brcs	.+44     	; 0x121a <__fixunssfsi+0x3e>
    11ee:	e1 f0       	breq	.+56     	; 0x1228 <__fixunssfsi+0x4c>
    11f0:	66 0f       	add	r22, r22
    11f2:	77 1f       	adc	r23, r23
    11f4:	88 1f       	adc	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	1a f0       	brmi	.+6      	; 0x1200 <__fixunssfsi+0x24>
    11fa:	ba 95       	dec	r27
    11fc:	c9 f7       	brne	.-14     	; 0x11f0 <__fixunssfsi+0x14>
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <__fixunssfsi+0x4c>
    1200:	b1 30       	cpi	r27, 0x01	; 1
    1202:	91 f0       	breq	.+36     	; 0x1228 <__fixunssfsi+0x4c>
    1204:	0e 94 ef 09 	call	0x13de	; 0x13de <__fp_zero>
    1208:	b1 e0       	ldi	r27, 0x01	; 1
    120a:	08 95       	ret
    120c:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_zero>
    1210:	67 2f       	mov	r22, r23
    1212:	78 2f       	mov	r23, r24
    1214:	88 27       	eor	r24, r24
    1216:	b8 5f       	subi	r27, 0xF8	; 248
    1218:	39 f0       	breq	.+14     	; 0x1228 <__fixunssfsi+0x4c>
    121a:	b9 3f       	cpi	r27, 0xF9	; 249
    121c:	cc f3       	brlt	.-14     	; 0x1210 <__fixunssfsi+0x34>
    121e:	86 95       	lsr	r24
    1220:	77 95       	ror	r23
    1222:	67 95       	ror	r22
    1224:	b3 95       	inc	r27
    1226:	d9 f7       	brne	.-10     	; 0x121e <__fixunssfsi+0x42>
    1228:	3e f4       	brtc	.+14     	; 0x1238 <__fixunssfsi+0x5c>
    122a:	90 95       	com	r25
    122c:	80 95       	com	r24
    122e:	70 95       	com	r23
    1230:	61 95       	neg	r22
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	8f 4f       	sbci	r24, 0xFF	; 255
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	08 95       	ret

0000123a <__floatunsisf>:
    123a:	e8 94       	clt
    123c:	09 c0       	rjmp	.+18     	; 0x1250 <__floatsisf+0x12>

0000123e <__floatsisf>:
    123e:	97 fb       	bst	r25, 7
    1240:	3e f4       	brtc	.+14     	; 0x1250 <__floatsisf+0x12>
    1242:	90 95       	com	r25
    1244:	80 95       	com	r24
    1246:	70 95       	com	r23
    1248:	61 95       	neg	r22
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	8f 4f       	sbci	r24, 0xFF	; 255
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	99 23       	and	r25, r25
    1252:	a9 f0       	breq	.+42     	; 0x127e <__floatsisf+0x40>
    1254:	f9 2f       	mov	r31, r25
    1256:	96 e9       	ldi	r25, 0x96	; 150
    1258:	bb 27       	eor	r27, r27
    125a:	93 95       	inc	r25
    125c:	f6 95       	lsr	r31
    125e:	87 95       	ror	r24
    1260:	77 95       	ror	r23
    1262:	67 95       	ror	r22
    1264:	b7 95       	ror	r27
    1266:	f1 11       	cpse	r31, r1
    1268:	f8 cf       	rjmp	.-16     	; 0x125a <__floatsisf+0x1c>
    126a:	fa f4       	brpl	.+62     	; 0x12aa <__floatsisf+0x6c>
    126c:	bb 0f       	add	r27, r27
    126e:	11 f4       	brne	.+4      	; 0x1274 <__floatsisf+0x36>
    1270:	60 ff       	sbrs	r22, 0
    1272:	1b c0       	rjmp	.+54     	; 0x12aa <__floatsisf+0x6c>
    1274:	6f 5f       	subi	r22, 0xFF	; 255
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	8f 4f       	sbci	r24, 0xFF	; 255
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	16 c0       	rjmp	.+44     	; 0x12aa <__floatsisf+0x6c>
    127e:	88 23       	and	r24, r24
    1280:	11 f0       	breq	.+4      	; 0x1286 <__floatsisf+0x48>
    1282:	96 e9       	ldi	r25, 0x96	; 150
    1284:	11 c0       	rjmp	.+34     	; 0x12a8 <__floatsisf+0x6a>
    1286:	77 23       	and	r23, r23
    1288:	21 f0       	breq	.+8      	; 0x1292 <__floatsisf+0x54>
    128a:	9e e8       	ldi	r25, 0x8E	; 142
    128c:	87 2f       	mov	r24, r23
    128e:	76 2f       	mov	r23, r22
    1290:	05 c0       	rjmp	.+10     	; 0x129c <__floatsisf+0x5e>
    1292:	66 23       	and	r22, r22
    1294:	71 f0       	breq	.+28     	; 0x12b2 <__floatsisf+0x74>
    1296:	96 e8       	ldi	r25, 0x86	; 134
    1298:	86 2f       	mov	r24, r22
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	2a f0       	brmi	.+10     	; 0x12aa <__floatsisf+0x6c>
    12a0:	9a 95       	dec	r25
    12a2:	66 0f       	add	r22, r22
    12a4:	77 1f       	adc	r23, r23
    12a6:	88 1f       	adc	r24, r24
    12a8:	da f7       	brpl	.-10     	; 0x12a0 <__floatsisf+0x62>
    12aa:	88 0f       	add	r24, r24
    12ac:	96 95       	lsr	r25
    12ae:	87 95       	ror	r24
    12b0:	97 f9       	bld	r25, 7
    12b2:	08 95       	ret

000012b4 <__fp_cmp>:
    12b4:	99 0f       	add	r25, r25
    12b6:	00 08       	sbc	r0, r0
    12b8:	55 0f       	add	r21, r21
    12ba:	aa 0b       	sbc	r26, r26
    12bc:	e0 e8       	ldi	r30, 0x80	; 128
    12be:	fe ef       	ldi	r31, 0xFE	; 254
    12c0:	16 16       	cp	r1, r22
    12c2:	17 06       	cpc	r1, r23
    12c4:	e8 07       	cpc	r30, r24
    12c6:	f9 07       	cpc	r31, r25
    12c8:	c0 f0       	brcs	.+48     	; 0x12fa <__fp_cmp+0x46>
    12ca:	12 16       	cp	r1, r18
    12cc:	13 06       	cpc	r1, r19
    12ce:	e4 07       	cpc	r30, r20
    12d0:	f5 07       	cpc	r31, r21
    12d2:	98 f0       	brcs	.+38     	; 0x12fa <__fp_cmp+0x46>
    12d4:	62 1b       	sub	r22, r18
    12d6:	73 0b       	sbc	r23, r19
    12d8:	84 0b       	sbc	r24, r20
    12da:	95 0b       	sbc	r25, r21
    12dc:	39 f4       	brne	.+14     	; 0x12ec <__fp_cmp+0x38>
    12de:	0a 26       	eor	r0, r26
    12e0:	61 f0       	breq	.+24     	; 0x12fa <__fp_cmp+0x46>
    12e2:	23 2b       	or	r18, r19
    12e4:	24 2b       	or	r18, r20
    12e6:	25 2b       	or	r18, r21
    12e8:	21 f4       	brne	.+8      	; 0x12f2 <__fp_cmp+0x3e>
    12ea:	08 95       	ret
    12ec:	0a 26       	eor	r0, r26
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <__fp_cmp+0x3e>
    12f0:	a1 40       	sbci	r26, 0x01	; 1
    12f2:	a6 95       	lsr	r26
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	81 1d       	adc	r24, r1
    12f8:	81 1d       	adc	r24, r1
    12fa:	08 95       	ret

000012fc <__fp_inf>:
    12fc:	97 f9       	bld	r25, 7
    12fe:	9f 67       	ori	r25, 0x7F	; 127
    1300:	80 e8       	ldi	r24, 0x80	; 128
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	08 95       	ret

00001308 <__fp_nan>:
    1308:	9f ef       	ldi	r25, 0xFF	; 255
    130a:	80 ec       	ldi	r24, 0xC0	; 192
    130c:	08 95       	ret

0000130e <__fp_powser>:
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	1f 93       	push	r17
    1314:	0f 93       	push	r16
    1316:	ff 92       	push	r15
    1318:	ef 92       	push	r14
    131a:	df 92       	push	r13
    131c:	7b 01       	movw	r14, r22
    131e:	8c 01       	movw	r16, r24
    1320:	68 94       	set
    1322:	06 c0       	rjmp	.+12     	; 0x1330 <__fp_powser+0x22>
    1324:	da 2e       	mov	r13, r26
    1326:	ef 01       	movw	r28, r30
    1328:	0e 94 16 0a 	call	0x142c	; 0x142c <__mulsf3x>
    132c:	fe 01       	movw	r30, r28
    132e:	e8 94       	clt
    1330:	a5 91       	lpm	r26, Z+
    1332:	25 91       	lpm	r18, Z+
    1334:	35 91       	lpm	r19, Z+
    1336:	45 91       	lpm	r20, Z+
    1338:	55 91       	lpm	r21, Z+
    133a:	a6 f3       	brts	.-24     	; 0x1324 <__fp_powser+0x16>
    133c:	ef 01       	movw	r28, r30
    133e:	0e 94 a9 07 	call	0xf52	; 0xf52 <__addsf3x>
    1342:	fe 01       	movw	r30, r28
    1344:	97 01       	movw	r18, r14
    1346:	a8 01       	movw	r20, r16
    1348:	da 94       	dec	r13
    134a:	69 f7       	brne	.-38     	; 0x1326 <__fp_powser+0x18>
    134c:	df 90       	pop	r13
    134e:	ef 90       	pop	r14
    1350:	ff 90       	pop	r15
    1352:	0f 91       	pop	r16
    1354:	1f 91       	pop	r17
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <__fp_pscA>:
    135c:	00 24       	eor	r0, r0
    135e:	0a 94       	dec	r0
    1360:	16 16       	cp	r1, r22
    1362:	17 06       	cpc	r1, r23
    1364:	18 06       	cpc	r1, r24
    1366:	09 06       	cpc	r0, r25
    1368:	08 95       	ret

0000136a <__fp_pscB>:
    136a:	00 24       	eor	r0, r0
    136c:	0a 94       	dec	r0
    136e:	12 16       	cp	r1, r18
    1370:	13 06       	cpc	r1, r19
    1372:	14 06       	cpc	r1, r20
    1374:	05 06       	cpc	r0, r21
    1376:	08 95       	ret

00001378 <__fp_round>:
    1378:	09 2e       	mov	r0, r25
    137a:	03 94       	inc	r0
    137c:	00 0c       	add	r0, r0
    137e:	11 f4       	brne	.+4      	; 0x1384 <__fp_round+0xc>
    1380:	88 23       	and	r24, r24
    1382:	52 f0       	brmi	.+20     	; 0x1398 <__fp_round+0x20>
    1384:	bb 0f       	add	r27, r27
    1386:	40 f4       	brcc	.+16     	; 0x1398 <__fp_round+0x20>
    1388:	bf 2b       	or	r27, r31
    138a:	11 f4       	brne	.+4      	; 0x1390 <__fp_round+0x18>
    138c:	60 ff       	sbrs	r22, 0
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <__fp_round+0x20>
    1390:	6f 5f       	subi	r22, 0xFF	; 255
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	8f 4f       	sbci	r24, 0xFF	; 255
    1396:	9f 4f       	sbci	r25, 0xFF	; 255
    1398:	08 95       	ret

0000139a <__fp_split3>:
    139a:	57 fd       	sbrc	r21, 7
    139c:	90 58       	subi	r25, 0x80	; 128
    139e:	44 0f       	add	r20, r20
    13a0:	55 1f       	adc	r21, r21
    13a2:	59 f0       	breq	.+22     	; 0x13ba <__fp_splitA+0x10>
    13a4:	5f 3f       	cpi	r21, 0xFF	; 255
    13a6:	71 f0       	breq	.+28     	; 0x13c4 <__fp_splitA+0x1a>
    13a8:	47 95       	ror	r20

000013aa <__fp_splitA>:
    13aa:	88 0f       	add	r24, r24
    13ac:	97 fb       	bst	r25, 7
    13ae:	99 1f       	adc	r25, r25
    13b0:	61 f0       	breq	.+24     	; 0x13ca <__fp_splitA+0x20>
    13b2:	9f 3f       	cpi	r25, 0xFF	; 255
    13b4:	79 f0       	breq	.+30     	; 0x13d4 <__fp_splitA+0x2a>
    13b6:	87 95       	ror	r24
    13b8:	08 95       	ret
    13ba:	12 16       	cp	r1, r18
    13bc:	13 06       	cpc	r1, r19
    13be:	14 06       	cpc	r1, r20
    13c0:	55 1f       	adc	r21, r21
    13c2:	f2 cf       	rjmp	.-28     	; 0x13a8 <__fp_split3+0xe>
    13c4:	46 95       	lsr	r20
    13c6:	f1 df       	rcall	.-30     	; 0x13aa <__fp_splitA>
    13c8:	08 c0       	rjmp	.+16     	; 0x13da <__fp_splitA+0x30>
    13ca:	16 16       	cp	r1, r22
    13cc:	17 06       	cpc	r1, r23
    13ce:	18 06       	cpc	r1, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	f1 cf       	rjmp	.-30     	; 0x13b6 <__fp_splitA+0xc>
    13d4:	86 95       	lsr	r24
    13d6:	71 05       	cpc	r23, r1
    13d8:	61 05       	cpc	r22, r1
    13da:	08 94       	sec
    13dc:	08 95       	ret

000013de <__fp_zero>:
    13de:	e8 94       	clt

000013e0 <__fp_szero>:
    13e0:	bb 27       	eor	r27, r27
    13e2:	66 27       	eor	r22, r22
    13e4:	77 27       	eor	r23, r23
    13e6:	cb 01       	movw	r24, r22
    13e8:	97 f9       	bld	r25, 7
    13ea:	08 95       	ret

000013ec <__gesf2>:
    13ec:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__fp_cmp>
    13f0:	08 f4       	brcc	.+2      	; 0x13f4 <__gesf2+0x8>
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	08 95       	ret

000013f6 <inverse>:
    13f6:	9b 01       	movw	r18, r22
    13f8:	ac 01       	movw	r20, r24
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	80 e8       	ldi	r24, 0x80	; 128
    1400:	9f e3       	ldi	r25, 0x3F	; 63
    1402:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__divsf3>

00001406 <__mulsf3>:
    1406:	0e 94 16 0a 	call	0x142c	; 0x142c <__mulsf3x>
    140a:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_round>
    140e:	0e 94 ae 09 	call	0x135c	; 0x135c <__fp_pscA>
    1412:	38 f0       	brcs	.+14     	; 0x1422 <__mulsf3+0x1c>
    1414:	0e 94 b5 09 	call	0x136a	; 0x136a <__fp_pscB>
    1418:	20 f0       	brcs	.+8      	; 0x1422 <__mulsf3+0x1c>
    141a:	95 23       	and	r25, r21
    141c:	11 f0       	breq	.+4      	; 0x1422 <__mulsf3+0x1c>
    141e:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_inf>
    1422:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__fp_nan>
    1426:	11 24       	eor	r1, r1
    1428:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_szero>

0000142c <__mulsf3x>:
    142c:	0e 94 cd 09 	call	0x139a	; 0x139a <__fp_split3>
    1430:	70 f3       	brcs	.-36     	; 0x140e <__mulsf3+0x8>

00001432 <__mulsf3_pse>:
    1432:	95 9f       	mul	r25, r21
    1434:	c1 f3       	breq	.-16     	; 0x1426 <__mulsf3+0x20>
    1436:	95 0f       	add	r25, r21
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	55 1f       	adc	r21, r21
    143c:	62 9f       	mul	r22, r18
    143e:	f0 01       	movw	r30, r0
    1440:	72 9f       	mul	r23, r18
    1442:	bb 27       	eor	r27, r27
    1444:	f0 0d       	add	r31, r0
    1446:	b1 1d       	adc	r27, r1
    1448:	63 9f       	mul	r22, r19
    144a:	aa 27       	eor	r26, r26
    144c:	f0 0d       	add	r31, r0
    144e:	b1 1d       	adc	r27, r1
    1450:	aa 1f       	adc	r26, r26
    1452:	64 9f       	mul	r22, r20
    1454:	66 27       	eor	r22, r22
    1456:	b0 0d       	add	r27, r0
    1458:	a1 1d       	adc	r26, r1
    145a:	66 1f       	adc	r22, r22
    145c:	82 9f       	mul	r24, r18
    145e:	22 27       	eor	r18, r18
    1460:	b0 0d       	add	r27, r0
    1462:	a1 1d       	adc	r26, r1
    1464:	62 1f       	adc	r22, r18
    1466:	73 9f       	mul	r23, r19
    1468:	b0 0d       	add	r27, r0
    146a:	a1 1d       	adc	r26, r1
    146c:	62 1f       	adc	r22, r18
    146e:	83 9f       	mul	r24, r19
    1470:	a0 0d       	add	r26, r0
    1472:	61 1d       	adc	r22, r1
    1474:	22 1f       	adc	r18, r18
    1476:	74 9f       	mul	r23, r20
    1478:	33 27       	eor	r19, r19
    147a:	a0 0d       	add	r26, r0
    147c:	61 1d       	adc	r22, r1
    147e:	23 1f       	adc	r18, r19
    1480:	84 9f       	mul	r24, r20
    1482:	60 0d       	add	r22, r0
    1484:	21 1d       	adc	r18, r1
    1486:	82 2f       	mov	r24, r18
    1488:	76 2f       	mov	r23, r22
    148a:	6a 2f       	mov	r22, r26
    148c:	11 24       	eor	r1, r1
    148e:	9f 57       	subi	r25, 0x7F	; 127
    1490:	50 40       	sbci	r21, 0x00	; 0
    1492:	9a f0       	brmi	.+38     	; 0x14ba <__mulsf3_pse+0x88>
    1494:	f1 f0       	breq	.+60     	; 0x14d2 <__mulsf3_pse+0xa0>
    1496:	88 23       	and	r24, r24
    1498:	4a f0       	brmi	.+18     	; 0x14ac <__mulsf3_pse+0x7a>
    149a:	ee 0f       	add	r30, r30
    149c:	ff 1f       	adc	r31, r31
    149e:	bb 1f       	adc	r27, r27
    14a0:	66 1f       	adc	r22, r22
    14a2:	77 1f       	adc	r23, r23
    14a4:	88 1f       	adc	r24, r24
    14a6:	91 50       	subi	r25, 0x01	; 1
    14a8:	50 40       	sbci	r21, 0x00	; 0
    14aa:	a9 f7       	brne	.-22     	; 0x1496 <__mulsf3_pse+0x64>
    14ac:	9e 3f       	cpi	r25, 0xFE	; 254
    14ae:	51 05       	cpc	r21, r1
    14b0:	80 f0       	brcs	.+32     	; 0x14d2 <__mulsf3_pse+0xa0>
    14b2:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_inf>
    14b6:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_szero>
    14ba:	5f 3f       	cpi	r21, 0xFF	; 255
    14bc:	e4 f3       	brlt	.-8      	; 0x14b6 <__mulsf3_pse+0x84>
    14be:	98 3e       	cpi	r25, 0xE8	; 232
    14c0:	d4 f3       	brlt	.-12     	; 0x14b6 <__mulsf3_pse+0x84>
    14c2:	86 95       	lsr	r24
    14c4:	77 95       	ror	r23
    14c6:	67 95       	ror	r22
    14c8:	b7 95       	ror	r27
    14ca:	f7 95       	ror	r31
    14cc:	e7 95       	ror	r30
    14ce:	9f 5f       	subi	r25, 0xFF	; 255
    14d0:	c1 f7       	brne	.-16     	; 0x14c2 <__mulsf3_pse+0x90>
    14d2:	fe 2b       	or	r31, r30
    14d4:	88 0f       	add	r24, r24
    14d6:	91 1d       	adc	r25, r1
    14d8:	96 95       	lsr	r25
    14da:	87 95       	ror	r24
    14dc:	97 f9       	bld	r25, 7
    14de:	08 95       	ret

000014e0 <square>:
    14e0:	9b 01       	movw	r18, r22
    14e2:	ac 01       	movw	r20, r24
    14e4:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__mulsf3>

000014e8 <__divmodhi4>:
    14e8:	97 fb       	bst	r25, 7
    14ea:	07 2e       	mov	r0, r23
    14ec:	16 f4       	brtc	.+4      	; 0x14f2 <__divmodhi4+0xa>
    14ee:	00 94       	com	r0
    14f0:	07 d0       	rcall	.+14     	; 0x1500 <__divmodhi4_neg1>
    14f2:	77 fd       	sbrc	r23, 7
    14f4:	09 d0       	rcall	.+18     	; 0x1508 <__divmodhi4_neg2>
    14f6:	0e 94 88 0a 	call	0x1510	; 0x1510 <__udivmodhi4>
    14fa:	07 fc       	sbrc	r0, 7
    14fc:	05 d0       	rcall	.+10     	; 0x1508 <__divmodhi4_neg2>
    14fe:	3e f4       	brtc	.+14     	; 0x150e <__divmodhi4_exit>

00001500 <__divmodhi4_neg1>:
    1500:	90 95       	com	r25
    1502:	81 95       	neg	r24
    1504:	9f 4f       	sbci	r25, 0xFF	; 255
    1506:	08 95       	ret

00001508 <__divmodhi4_neg2>:
    1508:	70 95       	com	r23
    150a:	61 95       	neg	r22
    150c:	7f 4f       	sbci	r23, 0xFF	; 255

0000150e <__divmodhi4_exit>:
    150e:	08 95       	ret

00001510 <__udivmodhi4>:
    1510:	aa 1b       	sub	r26, r26
    1512:	bb 1b       	sub	r27, r27
    1514:	51 e1       	ldi	r21, 0x11	; 17
    1516:	07 c0       	rjmp	.+14     	; 0x1526 <__udivmodhi4_ep>

00001518 <__udivmodhi4_loop>:
    1518:	aa 1f       	adc	r26, r26
    151a:	bb 1f       	adc	r27, r27
    151c:	a6 17       	cp	r26, r22
    151e:	b7 07       	cpc	r27, r23
    1520:	10 f0       	brcs	.+4      	; 0x1526 <__udivmodhi4_ep>
    1522:	a6 1b       	sub	r26, r22
    1524:	b7 0b       	sbc	r27, r23

00001526 <__udivmodhi4_ep>:
    1526:	88 1f       	adc	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	5a 95       	dec	r21
    152c:	a9 f7       	brne	.-22     	; 0x1518 <__udivmodhi4_loop>
    152e:	80 95       	com	r24
    1530:	90 95       	com	r25
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	08 95       	ret

00001538 <__itoa_ncheck>:
    1538:	bb 27       	eor	r27, r27
    153a:	4a 30       	cpi	r20, 0x0A	; 10
    153c:	31 f4       	brne	.+12     	; 0x154a <__itoa_ncheck+0x12>
    153e:	99 23       	and	r25, r25
    1540:	22 f4       	brpl	.+8      	; 0x154a <__itoa_ncheck+0x12>
    1542:	bd e2       	ldi	r27, 0x2D	; 45
    1544:	90 95       	com	r25
    1546:	81 95       	neg	r24
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__utoa_common>

0000154e <__utoa_ncheck>:
    154e:	bb 27       	eor	r27, r27

00001550 <__utoa_common>:
    1550:	fb 01       	movw	r30, r22
    1552:	55 27       	eor	r21, r21
    1554:	aa 27       	eor	r26, r26
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	aa 1f       	adc	r26, r26
    155c:	a4 17       	cp	r26, r20
    155e:	10 f0       	brcs	.+4      	; 0x1564 <__utoa_common+0x14>
    1560:	a4 1b       	sub	r26, r20
    1562:	83 95       	inc	r24
    1564:	50 51       	subi	r21, 0x10	; 16
    1566:	b9 f7       	brne	.-18     	; 0x1556 <__utoa_common+0x6>
    1568:	a0 5d       	subi	r26, 0xD0	; 208
    156a:	aa 33       	cpi	r26, 0x3A	; 58
    156c:	08 f0       	brcs	.+2      	; 0x1570 <__utoa_common+0x20>
    156e:	a9 5d       	subi	r26, 0xD9	; 217
    1570:	a1 93       	st	Z+, r26
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	79 f7       	brne	.-34     	; 0x1554 <__utoa_common+0x4>
    1576:	b1 11       	cpse	r27, r1
    1578:	b1 93       	st	Z+, r27
    157a:	11 92       	st	Z+, r1
    157c:	cb 01       	movw	r24, r22
    157e:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <strrev>

00001582 <strrev>:
    1582:	dc 01       	movw	r26, r24
    1584:	fc 01       	movw	r30, r24
    1586:	67 2f       	mov	r22, r23
    1588:	71 91       	ld	r23, Z+
    158a:	77 23       	and	r23, r23
    158c:	e1 f7       	brne	.-8      	; 0x1586 <strrev+0x4>
    158e:	32 97       	sbiw	r30, 0x02	; 2
    1590:	04 c0       	rjmp	.+8      	; 0x159a <strrev+0x18>
    1592:	7c 91       	ld	r23, X
    1594:	6d 93       	st	X+, r22
    1596:	70 83       	st	Z, r23
    1598:	62 91       	ld	r22, -Z
    159a:	ae 17       	cp	r26, r30
    159c:	bf 07       	cpc	r27, r31
    159e:	c8 f3       	brcs	.-14     	; 0x1592 <strrev+0x10>
    15a0:	08 95       	ret

000015a2 <_exit>:
    15a2:	f8 94       	cli

000015a4 <__stop_program>:
    15a4:	ff cf       	rjmp	.-2      	; 0x15a4 <__stop_program>
