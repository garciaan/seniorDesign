
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000134c  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000134c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800112  00800112  000013f2  2**0
                  ALLOC
  3 .stab         00004734  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b5c  00000000  00000000  00005b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007684  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007698  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  000076d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00007e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  0000856c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00008589  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_7>
      20:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_8>
      24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      58:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      5c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      60:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      68:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      6c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      70:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      74:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      7c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      80:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      84:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      88:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d0 e1       	ldi	r29, 0x10	; 16
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ec e4       	ldi	r30, 0x4C	; 76
      ce:	f3 e1       	ldi	r31, 0x13	; 19
      d0:	00 e0       	ldi	r16, 0x00	; 0
      d2:	0b bf       	out	0x3b, r16	; 59
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x14>
      d6:	07 90       	elpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a2 31       	cpi	r26, 0x12	; 18
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0x10>

000000e0 <__do_clear_bss>:
      e0:	21 e0       	ldi	r18, 0x01	; 1
      e2:	a2 e1       	ldi	r26, 0x12	; 18
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a4 32       	cpi	r26, 0x24	; 36
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
      f0:	0e 94 9a 06 	call	0xd34	; 0xd34 <main>
      f4:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <_exit>

000000f8 <__bad_interrupt>:
      f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <__vector_7>:
    }

    return 0;
}

ISR(INT6_vect){  //Left bumper on PE6
      fc:	1f 92       	push	r1
      fe:	0f 92       	push	r0
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	0f 92       	push	r0
     104:	11 24       	eor	r1, r1
     106:	2f 93       	push	r18
     108:	8f 93       	push	r24
     10a:	9f 93       	push	r25
    cli();
     10c:	f8 94       	cli
    PORTB = 255;
     10e:	8f ef       	ldi	r24, 0xFF	; 255
     110:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     112:	2f ef       	ldi	r18, 0xFF	; 255
     114:	89 e6       	ldi	r24, 0x69	; 105
     116:	98 e1       	ldi	r25, 0x18	; 24
     118:	21 50       	subi	r18, 0x01	; 1
     11a:	80 40       	sbci	r24, 0x00	; 0
     11c:	90 40       	sbci	r25, 0x00	; 0
     11e:	e1 f7       	brne	.-8      	; 0x118 <__vector_7+0x1c>
     120:	00 c0       	rjmp	.+0      	; 0x122 <__vector_7+0x26>
     122:	00 00       	nop
    _delay_ms(500);
    sei();
     124:	78 94       	sei


}
     126:	9f 91       	pop	r25
     128:	8f 91       	pop	r24
     12a:	2f 91       	pop	r18
     12c:	0f 90       	pop	r0
     12e:	0f be       	out	0x3f, r0	; 63
     130:	0f 90       	pop	r0
     132:	1f 90       	pop	r1
     134:	18 95       	reti

00000136 <__vector_8>:

ISR(INT7_vect){  //Right bumper on PE7
     136:	1f 92       	push	r1
     138:	0f 92       	push	r0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	0f 92       	push	r0
     13e:	11 24       	eor	r1, r1
     140:	2f 93       	push	r18
     142:	8f 93       	push	r24
     144:	9f 93       	push	r25
    
    cli();
     146:	f8 94       	cli
    PORTB = 0b11110000;
     148:	80 ef       	ldi	r24, 0xF0	; 240
     14a:	88 bb       	out	0x18, r24	; 24
     14c:	2f ef       	ldi	r18, 0xFF	; 255
     14e:	89 e6       	ldi	r24, 0x69	; 105
     150:	98 e1       	ldi	r25, 0x18	; 24
     152:	21 50       	subi	r18, 0x01	; 1
     154:	80 40       	sbci	r24, 0x00	; 0
     156:	90 40       	sbci	r25, 0x00	; 0
     158:	e1 f7       	brne	.-8      	; 0x152 <__vector_8+0x1c>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <__vector_8+0x26>
     15c:	00 00       	nop
    _delay_ms(500);
    sei();
     15e:	78 94       	sei
}
     160:	9f 91       	pop	r25
     162:	8f 91       	pop	r24
     164:	2f 91       	pop	r18
     166:	0f 90       	pop	r0
     168:	0f be       	out	0x3f, r0	; 63
     16a:	0f 90       	pop	r0
     16c:	1f 90       	pop	r1
     16e:	18 95       	reti

00000170 <enable_bumpers>:
/*********
* Need to do rising edge
**********/
void enable_bumpers(){
    //Set pins as inputs
    DDRE &= ~(1 << 6);
     170:	16 98       	cbi	0x02, 6	; 2
    DDRE &= ~(1 << 7);
     172:	17 98       	cbi	0x02, 7	; 2
    
    //Enable internal pullups
    PORTE |= (1 << 6);
     174:	1e 9a       	sbi	0x03, 6	; 3
    PORTE |= (1 << 7);
     176:	1f 9a       	sbi	0x03, 7	; 3
    //PORTE = 0;

    //Set both interrupt 6 and 7 to rising edge
    EICRB |= (1 << ISC61) | (1 << ISC60);
     178:	8a b7       	in	r24, 0x3a	; 58
     17a:	80 63       	ori	r24, 0x30	; 48
     17c:	8a bf       	out	0x3a, r24	; 58
    EICRB |= (1 << ISC71) | (1 << ISC70);
     17e:	8a b7       	in	r24, 0x3a	; 58
     180:	80 6c       	ori	r24, 0xC0	; 192
     182:	8a bf       	out	0x3a, r24	; 58

    //enable the interrupts
    EIMSK |= (1 << INT6) | (1 << INT7);
     184:	89 b7       	in	r24, 0x39	; 57
     186:	80 6c       	ori	r24, 0xC0	; 192
     188:	89 bf       	out	0x39, r24	; 57
     18a:	08 95       	ret

0000018c <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     18c:	88 e4       	ldi	r24, 0x48	; 72
     18e:	80 93 70 00 	sts	0x0070, r24
     192:	08 95       	ret

00000194 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     194:	10 92 74 00 	sts	0x0074, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     198:	94 ea       	ldi	r25, 0xA4	; 164
     19a:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     19e:	90 91 74 00 	lds	r25, 0x0074
     1a2:	97 ff       	sbrs	r25, 7
     1a4:	fc cf       	rjmp	.-8      	; 0x19e <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     1a6:	90 91 71 00 	lds	r25, 0x0071
     1aa:	98 7f       	andi	r25, 0xF8	; 248
     1ac:	98 30       	cpi	r25, 0x08	; 8
     1ae:	11 f0       	breq	.+4      	; 0x1b4 <i2c_start+0x20>
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
     1b4:	80 93 73 00 	sts	0x0073, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     1b8:	84 e8       	ldi	r24, 0x84	; 132
     1ba:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     1be:	80 91 74 00 	lds	r24, 0x0074
     1c2:	87 ff       	sbrs	r24, 7
     1c4:	fc cf       	rjmp	.-8      	; 0x1be <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     1c6:	80 91 71 00 	lds	r24, 0x0071
     1ca:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     1cc:	88 31       	cpi	r24, 0x18	; 24
     1ce:	11 f0       	breq	.+4      	; 0x1d4 <i2c_start+0x40>
     1d0:	80 34       	cpi	r24, 0x40	; 64
     1d2:	71 f7       	brne	.-36     	; 0x1b0 <i2c_start+0x1c>
	
	return 0;
     1d4:	80 e0       	ldi	r24, 0x00	; 0
}
     1d6:	08 95       	ret

000001d8 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     1d8:	80 93 73 00 	sts	0x0073, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     1dc:	84 e8       	ldi	r24, 0x84	; 132
     1de:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     1e2:	80 91 74 00 	lds	r24, 0x0074
     1e6:	87 ff       	sbrs	r24, 7
     1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     1ea:	90 91 71 00 	lds	r25, 0x0071
     1ee:	98 7f       	andi	r25, 0xF8	; 248
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	98 32       	cpi	r25, 0x28	; 40
     1f4:	09 f0       	breq	.+2      	; 0x1f8 <i2c_write+0x20>
	
	return 0;
}
     1f6:	08 95       	ret
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     1f8:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     1fa:	08 95       	ret

000001fc <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     1fc:	84 ec       	ldi	r24, 0xC4	; 196
     1fe:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     202:	80 91 74 00 	lds	r24, 0x0074
     206:	87 ff       	sbrs	r24, 7
     208:	fc cf       	rjmp	.-8      	; 0x202 <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
     20a:	80 91 73 00 	lds	r24, 0x0073
}
     20e:	08 95       	ret

00000210 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     210:	84 e8       	ldi	r24, 0x84	; 132
     212:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     216:	80 91 74 00 	lds	r24, 0x0074
     21a:	87 ff       	sbrs	r24, 7
     21c:	fc cf       	rjmp	.-8      	; 0x216 <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
     21e:	80 91 73 00 	lds	r24, 0x0073
}
     222:	08 95       	ret

00000224 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     224:	0f 93       	push	r16
     226:	1f 93       	push	r17
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	8b 01       	movw	r16, r22
     22e:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     230:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_start>
     234:	81 11       	cpse	r24, r1
     236:	1f c0       	rjmp	.+62     	; 0x276 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
     238:	20 97       	sbiw	r28, 0x00	; 0
     23a:	a9 f0       	breq	.+42     	; 0x266 <i2c_transmit+0x42>
     23c:	f8 01       	movw	r30, r16
     23e:	c0 0f       	add	r28, r16
     240:	d1 1f       	adc	r29, r17
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     242:	24 e8       	ldi	r18, 0x84	; 132
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     244:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     246:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     24a:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     24e:	90 91 74 00 	lds	r25, 0x0074
     252:	97 ff       	sbrs	r25, 7
     254:	fc cf       	rjmp	.-8      	; 0x24e <i2c_transmit+0x2a>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     256:	90 91 71 00 	lds	r25, 0x0071
     25a:	98 7f       	andi	r25, 0xF8	; 248
     25c:	98 32       	cpi	r25, 0x28	; 40
     25e:	59 f4       	brne	.+22     	; 0x276 <i2c_transmit+0x52>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
     260:	ec 17       	cp	r30, r28
     262:	fd 07       	cpc	r31, r29
     264:	79 f7       	brne	.-34     	; 0x244 <i2c_transmit+0x20>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     266:	94 e9       	ldi	r25, 0x94	; 148
     268:	90 93 74 00 	sts	0x0074, r25
	}
	
	i2c_stop();
	
	return 0;
}
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	08 95       	ret
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     276:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	08 95       	ret

00000282 <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	8b 01       	movw	r16, r22
     28c:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_READ)) return 1;
     28e:	81 60       	ori	r24, 0x01	; 1
     290:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_start>
     294:	81 11       	cpse	r24, r1
     296:	25 c0       	rjmp	.+74     	; 0x2e2 <i2c_receive+0x60>
	
	for (uint16_t i = 0; i < (length-1); i++)
     298:	de 01       	movw	r26, r28
     29a:	11 97       	sbiw	r26, 0x01	; 1
     29c:	41 f1       	breq	.+80     	; 0x2ee <i2c_receive+0x6c>
     29e:	f8 01       	movw	r30, r16
     2a0:	a0 0f       	add	r26, r16
     2a2:	b1 1f       	adc	r27, r17

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     2a4:	24 ec       	ldi	r18, 0xC4	; 196
     2a6:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     2aa:	90 91 74 00 	lds	r25, 0x0074
     2ae:	97 ff       	sbrs	r25, 7
     2b0:	fc cf       	rjmp	.-8      	; 0x2aa <i2c_receive+0x28>
	// return received data from TWDR
	return TWDR;
     2b2:	90 91 73 00 	lds	r25, 0x0073
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     2b6:	91 93       	st	Z+, r25

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
     2b8:	ae 17       	cp	r26, r30
     2ba:	bf 07       	cpc	r27, r31
     2bc:	a1 f7       	brne	.-24     	; 0x2a6 <i2c_receive+0x24>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     2be:	94 e8       	ldi	r25, 0x84	; 132
     2c0:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     2c4:	90 91 74 00 	lds	r25, 0x0074
     2c8:	97 ff       	sbrs	r25, 7
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <i2c_receive+0x42>
	// return received data from TWDR
	return TWDR;
     2cc:	90 91 73 00 	lds	r25, 0x0073
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     2d0:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2d2:	94 e9       	ldi	r25, 0x94	; 148
     2d4:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	08 95       	ret
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	08 95       	ret
     2ee:	d8 01       	movw	r26, r16
     2f0:	e6 cf       	rjmp	.-52     	; 0x2be <i2c_receive+0x3c>

000002f2 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	16 2f       	mov	r17, r22
     2fe:	f4 2e       	mov	r15, r20
     300:	05 2f       	mov	r16, r21
     302:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr | 0x00)) return 1;
     304:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_start>
     308:	81 11       	cpse	r24, r1
     30a:	2c c0       	rjmp	.+88     	; 0x364 <i2c_writeReg+0x72>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     30c:	10 93 73 00 	sts	0x0073, r17
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     310:	94 e8       	ldi	r25, 0x84	; 132
     312:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     316:	90 91 74 00 	lds	r25, 0x0074
     31a:	97 ff       	sbrs	r25, 7
     31c:	fc cf       	rjmp	.-8      	; 0x316 <i2c_writeReg+0x24>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     31e:	90 91 71 00 	lds	r25, 0x0071
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     322:	20 97       	sbiw	r28, 0x00	; 0
     324:	b1 f0       	breq	.+44     	; 0x352 <i2c_writeReg+0x60>
     326:	ef 2d       	mov	r30, r15
     328:	f0 2f       	mov	r31, r16
     32a:	ce 0f       	add	r28, r30
     32c:	df 1f       	adc	r29, r31
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     32e:	44 e8       	ldi	r20, 0x84	; 132

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     330:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     332:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     336:	40 93 74 00 	sts	0x0074, r20
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     33a:	90 91 74 00 	lds	r25, 0x0074
     33e:	97 ff       	sbrs	r25, 7
     340:	fc cf       	rjmp	.-8      	; 0x33a <i2c_writeReg+0x48>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     342:	90 91 71 00 	lds	r25, 0x0071
     346:	98 7f       	andi	r25, 0xF8	; 248
     348:	98 32       	cpi	r25, 0x28	; 40
     34a:	61 f4       	brne	.+24     	; 0x364 <i2c_writeReg+0x72>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     34c:	ec 17       	cp	r30, r28
     34e:	fd 07       	cpc	r31, r29
     350:	79 f7       	brne	.-34     	; 0x330 <i2c_writeReg+0x3e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     352:	94 e9       	ldi	r25, 0x94	; 148
     354:	90 93 74 00 	sts	0x0074, r25
	}

	i2c_stop();

	return 0;
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	08 95       	ret
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
     364:	81 e0       	ldi	r24, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	08 95       	ret

00000372 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     372:	ef 92       	push	r14
     374:	ff 92       	push	r15
     376:	0f 93       	push	r16
     378:	1f 93       	push	r17
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	18 2f       	mov	r17, r24
     380:	06 2f       	mov	r16, r22
     382:	7a 01       	movw	r14, r20
     384:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
     386:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_start>
     38a:	81 11       	cpse	r24, r1
     38c:	38 c0       	rjmp	.+112    	; 0x3fe <i2c_readReg+0x8c>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     38e:	00 93 73 00 	sts	0x0073, r16
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     392:	84 e8       	ldi	r24, 0x84	; 132
     394:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     398:	80 91 74 00 	lds	r24, 0x0074
     39c:	87 ff       	sbrs	r24, 7
     39e:	fc cf       	rjmp	.-8      	; 0x398 <i2c_readReg+0x26>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     3a0:	80 91 71 00 	lds	r24, 0x0071
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
     3a4:	81 2f       	mov	r24, r17
     3a6:	81 60       	ori	r24, 0x01	; 1
     3a8:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_start>
     3ac:	81 11       	cpse	r24, r1
     3ae:	27 c0       	rjmp	.+78     	; 0x3fe <i2c_readReg+0x8c>

	for (uint16_t i = 0; i < (length-1); i++)
     3b0:	de 01       	movw	r26, r28
     3b2:	11 97       	sbiw	r26, 0x01	; 1
     3b4:	61 f1       	breq	.+88     	; 0x40e <i2c_readReg+0x9c>
     3b6:	f7 01       	movw	r30, r14
     3b8:	ae 0d       	add	r26, r14
     3ba:	bf 1d       	adc	r27, r15

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     3bc:	24 ec       	ldi	r18, 0xC4	; 196
     3be:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     3c2:	90 91 74 00 	lds	r25, 0x0074
     3c6:	97 ff       	sbrs	r25, 7
     3c8:	fc cf       	rjmp	.-8      	; 0x3c2 <i2c_readReg+0x50>
	// return received data from TWDR
	return TWDR;
     3ca:	90 91 73 00 	lds	r25, 0x0073

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     3ce:	91 93       	st	Z+, r25

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
     3d0:	ea 17       	cp	r30, r26
     3d2:	fb 07       	cpc	r31, r27
     3d4:	a1 f7       	brne	.-24     	; 0x3be <i2c_readReg+0x4c>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     3d6:	94 e8       	ldi	r25, 0x84	; 132
     3d8:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     3dc:	90 91 74 00 	lds	r25, 0x0074
     3e0:	97 ff       	sbrs	r25, 7
     3e2:	fc cf       	rjmp	.-8      	; 0x3dc <i2c_readReg+0x6a>
	// return received data from TWDR
	return TWDR;
     3e4:	90 91 73 00 	lds	r25, 0x0073

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     3e8:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     3ea:	94 e9       	ldi	r25, 0x94	; 148
     3ec:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	08 95       	ret
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
     3fe:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	08 95       	ret
     40e:	d7 01       	movw	r26, r14
     410:	e2 cf       	rjmp	.-60     	; 0x3d6 <i2c_readReg+0x64>

00000412 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     412:	84 e9       	ldi	r24, 0x94	; 148
     414:	80 93 74 00 	sts	0x0074, r24
     418:	08 95       	ret

0000041a <enable_adc>:
#include "./adc.h"


void enable_adc(){
	DDRF = 0x00;
     41a:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0x00;
     41e:	10 92 62 00 	sts	0x0062, r1
	//internally wire REFSn bits in the ADMUX register to connect VREF 
		//to internal 2.56v reference --> 0.0025 v/step
	//ADMUX = (1 << REFS0) | (1 << REFS1); //2.56v
	ADMUX = (1 << REFS0); //AVCC
     422:	80 e4       	ldi	r24, 0x40	; 64
     424:	87 b9       	out	0x07, r24	; 7
	//Single ended input, gain is not allowed
	
	//Default Right Adjusted

	//Set ADEN in ADSCRA to enable ADC
	ADCSRA = (1 << ADEN);
     426:	80 e8       	ldi	r24, 0x80	; 128
     428:	86 b9       	out	0x06, r24	; 6
	//Set the ADC Clock frequency prescaler to 128 --> 125kHz
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     42a:	86 b1       	in	r24, 0x06	; 6
     42c:	87 60       	ori	r24, 0x07	; 7
     42e:	86 b9       	out	0x06, r24	; 6
	//Set free running mode
	//ADCSRA |= (1 << ADFR);
	//Enable the ADC Interrupt Flag
	//ADCSRA |= (1 << ADIE);
	//Start first conversion by setting ADSC in ADCSRA
	ADCSRA |= (1 << ADSC);
     430:	36 9a       	sbi	0x06, 6	; 6
     432:	08 95       	ret

00000434 <read_adc>:

}
int read_adc(int pin){
     434:	fc 01       	movw	r30, r24
	int data;
	if (pin > 7){
     436:	08 97       	sbiw	r24, 0x08	; 8
     438:	fc f4       	brge	.+62     	; 0x478 <read_adc+0x44>
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	50 e0       	ldi	r21, 0x00	; 0
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
		ADMUX &= ~(1 << i);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	97 b1       	in	r25, 0x07	; 7
     444:	9b 01       	movw	r18, r22
     446:	04 2e       	mov	r0, r20
     448:	01 c0       	rjmp	.+2      	; 0x44c <read_adc+0x18>
     44a:	22 0f       	add	r18, r18
     44c:	0a 94       	dec	r0
     44e:	ea f7       	brpl	.-6      	; 0x44a <read_adc+0x16>
     450:	20 95       	com	r18
     452:	29 23       	and	r18, r25
     454:	27 b9       	out	0x07, r18	; 7
	if (pin > 7){
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
     456:	4f 5f       	subi	r20, 0xFF	; 255
     458:	5f 4f       	sbci	r21, 0xFF	; 255
     45a:	45 30       	cpi	r20, 0x05	; 5
     45c:	51 05       	cpc	r21, r1
     45e:	89 f7       	brne	.-30     	; 0x442 <read_adc+0xe>
		ADMUX &= ~(1 << i);
	}
	//set the new mux bit
	ADMUX |= pin;
     460:	97 b1       	in	r25, 0x07	; 7
     462:	89 2f       	mov	r24, r25
     464:	8e 2b       	or	r24, r30
     466:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
     468:	36 9a       	sbi	0x06, 6	; 6
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
     46a:	34 9b       	sbis	0x06, 4	; 6
     46c:	fe cf       	rjmp	.-4      	; 0x46a <read_adc+0x36>
	data = ADCL;
     46e:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);
     470:	25 b1       	in	r18, 0x05	; 5
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	92 2b       	or	r25, r18
     476:	08 95       	ret

}
int read_adc(int pin){
	int data;
	if (pin > 7){
		return -1;
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	9f ef       	ldi	r25, 0xFF	; 255
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
	data = ADCL;
	data |= (ADCH << 8);
	return data;
}
     47c:	08 95       	ret

0000047e <get_voltage>:
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
     47e:	88 30       	cpi	r24, 0x08	; 8
     480:	91 05       	cpc	r25, r1
     482:	20 f0       	brcs	.+8      	; 0x48c <get_voltage+0xe>
		return 0;
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	cb 01       	movw	r24, r22
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
}
     48a:	08 95       	ret
}
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
		return 0;
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
     48c:	0e 94 1a 02 	call	0x434	; 0x434 <read_adc>
     490:	bc 01       	movw	r22, r24
     492:	99 0f       	add	r25, r25
     494:	88 0b       	sbc	r24, r24
     496:	99 0b       	sbc	r25, r25
     498:	0e 94 4f 08 	call	0x109e	; 0x109e <__floatsisf>
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	40 ea       	ldi	r20, 0xA0	; 160
     4a2:	5b e3       	ldi	r21, 0x3B	; 59
     4a4:	0e 94 33 09 	call	0x1266	; 0x1266 <__mulsf3>
     4a8:	08 95       	ret

000004aa <strobe_lcd>:
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     4aa:	e2 e6       	ldi	r30, 0x62	; 98
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	88 60       	ori	r24, 0x08	; 8
     4b2:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     4b4:	80 81       	ld	r24, Z
     4b6:	87 7f       	andi	r24, 0xF7	; 247
     4b8:	80 83       	st	Z, r24
     4ba:	08 95       	ret

000004bc <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4bc:	77 9b       	sbis	0x0e, 7	; 14
     4be:	fe cf       	rjmp	.-4      	; 0x4bc <clear_display>
    SPDR = 0x00;    //command, not data
     4c0:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4c2:	77 9b       	sbis	0x0e, 7	; 14
     4c4:	fe cf       	rjmp	.-4      	; 0x4c2 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4ca:	77 9b       	sbis	0x0e, 7	; 14
     4cc:	fe cf       	rjmp	.-4      	; 0x4ca <clear_display+0xe>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     4ce:	80 91 62 00 	lds	r24, 0x0062
     4d2:	88 60       	ori	r24, 0x08	; 8
     4d4:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     4d8:	80 91 62 00 	lds	r24, 0x0062
     4dc:	87 7f       	andi	r24, 0xF7	; 247
     4de:	80 93 62 00 	sts	0x0062, r24
     4e2:	8f e9       	ldi	r24, 0x9F	; 159
     4e4:	98 e2       	ldi	r25, 0x28	; 40
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <clear_display+0x2a>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <clear_display+0x30>
     4ec:	00 00       	nop
     4ee:	08 95       	ret

000004f0 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     4f0:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4f2:	77 9b       	sbis	0x0e, 7	; 14
     4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     4f6:	80 ec       	ldi	r24, 0xC0	; 192
     4f8:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4fa:	77 9b       	sbis	0x0e, 7	; 14
     4fc:	fe cf       	rjmp	.-4      	; 0x4fa <home_line2+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     4fe:	80 91 62 00 	lds	r24, 0x0062
     502:	88 60       	ori	r24, 0x08	; 8
     504:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     508:	80 91 62 00 	lds	r24, 0x0062
     50c:	87 7f       	andi	r24, 0xF7	; 247
     50e:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     512:	85 ec       	ldi	r24, 0xC5	; 197
     514:	8a 95       	dec	r24
     516:	f1 f7       	brne	.-4      	; 0x514 <home_line2+0x24>
     518:	00 00       	nop
     51a:	08 95       	ret

0000051c <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     520:	77 9b       	sbis	0x0e, 7	; 14
     522:	fe cf       	rjmp	.-4      	; 0x520 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     524:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     526:	77 9b       	sbis	0x0e, 7	; 14
     528:	fe cf       	rjmp	.-4      	; 0x526 <char2lcd+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     52a:	80 91 62 00 	lds	r24, 0x0062
     52e:	88 60       	ori	r24, 0x08	; 8
     530:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     534:	80 91 62 00 	lds	r24, 0x0062
     538:	87 7f       	andi	r24, 0xF7	; 247
     53a:	80 93 62 00 	sts	0x0062, r24
     53e:	85 ec       	ldi	r24, 0xC5	; 197
     540:	8a 95       	dec	r24
     542:	f1 f7       	brne	.-4      	; 0x540 <char2lcd+0x24>
     544:	00 00       	nop
     546:	08 95       	ret

00000548 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	fc 01       	movw	r30, r24
     54e:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     550:	40 e0       	ldi	r20, 0x00	; 0
     552:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     554:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     556:	77 9b       	sbis	0x0e, 7	; 14
     558:	fe cf       	rjmp	.-4      	; 0x556 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     55a:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     55c:	77 9b       	sbis	0x0e, 7	; 14
     55e:	fe cf       	rjmp	.-4      	; 0x55c <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     560:	8d 91       	ld	r24, X+
     562:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     564:	77 9b       	sbis	0x0e, 7	; 14
     566:	fe cf       	rjmp	.-4      	; 0x564 <string2lcd+0x1c>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     568:	90 91 62 00 	lds	r25, 0x0062
     56c:	98 60       	ori	r25, 0x08	; 8
     56e:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     572:	90 91 62 00 	lds	r25, 0x0062
     576:	97 7f       	andi	r25, 0xF7	; 247
     578:	90 93 62 00 	sts	0x0062, r25
     57c:	85 ec       	ldi	r24, 0xC5	; 197
     57e:	8a 95       	dec	r24
     580:	f1 f7       	brne	.-4      	; 0x57e <string2lcd+0x36>
     582:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     584:	4f 5f       	subi	r20, 0xFF	; 255
     586:	5f 4f       	sbci	r21, 0xFF	; 255
     588:	ef 01       	movw	r28, r30
     58a:	09 90       	ld	r0, Y+
     58c:	00 20       	and	r0, r0
     58e:	e9 f7       	brne	.-6      	; 0x58a <string2lcd+0x42>
     590:	9e 01       	movw	r18, r28
     592:	2e 1b       	sub	r18, r30
     594:	3f 0b       	sbc	r19, r31
     596:	22 50       	subi	r18, 0x02	; 2
     598:	31 09       	sbc	r19, r1
     59a:	24 17       	cp	r18, r20
     59c:	35 07       	cpc	r19, r21
     59e:	d8 f6       	brcc	.-74     	; 0x556 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     5a6:	e1 e6       	ldi	r30, 0x61	; 97
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	88 60       	ori	r24, 0x08	; 8
     5ae:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     5b0:	88 b3       	in	r24, 0x18	; 24
     5b2:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     5b4:	87 b3       	in	r24, 0x17	; 23
     5b6:	87 60       	ori	r24, 0x07	; 7
     5b8:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     5ba:	80 e5       	ldi	r24, 0x50	; 80
     5bc:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	8e b9       	out	0x0e, r24	; 14
     5c2:	08 95       	ret

000005c4 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c4:	8f e5       	ldi	r24, 0x5F	; 95
     5c6:	9a ee       	ldi	r25, 0xEA	; 234
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <lcd_init+0x4>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <lcd_init+0xa>
     5ce:	00 00       	nop
     5d0:	23 e0       	ldi	r18, 0x03	; 3
     5d2:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     5d4:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     5d6:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5d8:	77 9b       	sbis	0x0e, 7	; 14
     5da:	fe cf       	rjmp	.-4      	; 0x5d8 <lcd_init+0x14>
        SPDR = 0x30;
     5dc:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5de:	77 9b       	sbis	0x0e, 7	; 14
     5e0:	fe cf       	rjmp	.-4      	; 0x5de <lcd_init+0x1a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     5e2:	80 91 62 00 	lds	r24, 0x0062
     5e6:	88 60       	ori	r24, 0x08	; 8
     5e8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     5ec:	80 91 62 00 	lds	r24, 0x0062
     5f0:	87 7f       	andi	r24, 0xF7	; 247
     5f2:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f6:	85 ec       	ldi	r24, 0xC5	; 197
     5f8:	8a 95       	dec	r24
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <lcd_init+0x34>
     5fc:	00 00       	nop
     5fe:	21 50       	subi	r18, 0x01	; 1
     600:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     602:	49 f7       	brne	.-46     	; 0x5d6 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     604:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     606:	77 9b       	sbis	0x0e, 7	; 14
     608:	fe cf       	rjmp	.-4      	; 0x606 <lcd_init+0x42>
    SPDR = 0x38;
     60a:	88 e3       	ldi	r24, 0x38	; 56
     60c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     60e:	77 9b       	sbis	0x0e, 7	; 14
     610:	fe cf       	rjmp	.-4      	; 0x60e <lcd_init+0x4a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     612:	80 91 62 00 	lds	r24, 0x0062
     616:	88 60       	ori	r24, 0x08	; 8
     618:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     61c:	80 91 62 00 	lds	r24, 0x0062
     620:	87 7f       	andi	r24, 0xF7	; 247
     622:	80 93 62 00 	sts	0x0062, r24
     626:	95 ec       	ldi	r25, 0xC5	; 197
     628:	9a 95       	dec	r25
     62a:	f1 f7       	brne	.-4      	; 0x628 <lcd_init+0x64>
     62c:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     62e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     630:	77 9b       	sbis	0x0e, 7	; 14
     632:	fe cf       	rjmp	.-4      	; 0x630 <lcd_init+0x6c>
    SPDR = 0x08;
     634:	88 e0       	ldi	r24, 0x08	; 8
     636:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     638:	77 9b       	sbis	0x0e, 7	; 14
     63a:	fe cf       	rjmp	.-4      	; 0x638 <lcd_init+0x74>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     63c:	80 91 62 00 	lds	r24, 0x0062
     640:	88 60       	ori	r24, 0x08	; 8
     642:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     646:	80 91 62 00 	lds	r24, 0x0062
     64a:	87 7f       	andi	r24, 0xF7	; 247
     64c:	80 93 62 00 	sts	0x0062, r24
     650:	85 ec       	ldi	r24, 0xC5	; 197
     652:	8a 95       	dec	r24
     654:	f1 f7       	brne	.-4      	; 0x652 <lcd_init+0x8e>
     656:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     658:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     65a:	77 9b       	sbis	0x0e, 7	; 14
     65c:	fe cf       	rjmp	.-4      	; 0x65a <lcd_init+0x96>
    SPDR = 0x01;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     662:	77 9b       	sbis	0x0e, 7	; 14
     664:	fe cf       	rjmp	.-4      	; 0x662 <lcd_init+0x9e>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     666:	80 91 62 00 	lds	r24, 0x0062
     66a:	88 60       	ori	r24, 0x08	; 8
     66c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     670:	80 91 62 00 	lds	r24, 0x0062
     674:	87 7f       	andi	r24, 0xF7	; 247
     676:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     67a:	8f ef       	ldi	r24, 0xFF	; 255
     67c:	98 e1       	ldi	r25, 0x18	; 24
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <lcd_init+0xba>
     682:	00 c0       	rjmp	.+0      	; 0x684 <lcd_init+0xc0>
     684:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
     686:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     688:	77 9b       	sbis	0x0e, 7	; 14
     68a:	fe cf       	rjmp	.-4      	; 0x688 <lcd_init+0xc4>
    SPDR = 0x06;
     68c:	86 e0       	ldi	r24, 0x06	; 6
     68e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     690:	77 9b       	sbis	0x0e, 7	; 14
     692:	fe cf       	rjmp	.-4      	; 0x690 <lcd_init+0xcc>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     694:	80 91 62 00 	lds	r24, 0x0062
     698:	88 60       	ori	r24, 0x08	; 8
     69a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     69e:	80 91 62 00 	lds	r24, 0x0062
     6a2:	87 7f       	andi	r24, 0xF7	; 247
     6a4:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a8:	95 ec       	ldi	r25, 0xC5	; 197
     6aa:	9a 95       	dec	r25
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_init+0xe6>
     6ae:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     6b0:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6b2:	77 9b       	sbis	0x0e, 7	; 14
     6b4:	fe cf       	rjmp	.-4      	; 0x6b2 <lcd_init+0xee>
    SPDR = 0x0E;
     6b6:	8e e0       	ldi	r24, 0x0E	; 14
     6b8:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     6ba:	77 9b       	sbis	0x0e, 7	; 14
     6bc:	fe cf       	rjmp	.-4      	; 0x6ba <lcd_init+0xf6>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     6be:	80 91 62 00 	lds	r24, 0x0062
     6c2:	88 60       	ori	r24, 0x08	; 8
     6c4:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     6c8:	80 91 62 00 	lds	r24, 0x0062
     6cc:	87 7f       	andi	r24, 0xF7	; 247
     6ce:	80 93 62 00 	sts	0x0062, r24
     6d2:	85 ec       	ldi	r24, 0xC5	; 197
     6d4:	8a 95       	dec	r24
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <lcd_init+0x110>
     6d8:	00 00       	nop
     6da:	08 95       	ret

000006dc <USART1_Init>:
#include "uart.h"


void USART1_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     6dc:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
     6e0:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     6e4:	88 e1       	ldi	r24, 0x18	; 24
     6e6:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (3<<UCSZ10);
     6ea:	86 e0       	ldi	r24, 0x06	; 6
     6ec:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f0:	2f ef       	ldi	r18, 0xFF	; 255
     6f2:	81 ee       	ldi	r24, 0xE1	; 225
     6f4:	94 e0       	ldi	r25, 0x04	; 4
     6f6:	21 50       	subi	r18, 0x01	; 1
     6f8:	80 40       	sbci	r24, 0x00	; 0
     6fa:	90 40       	sbci	r25, 0x00	; 0
     6fc:	e1 f7       	brne	.-8      	; 0x6f6 <USART1_Init+0x1a>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <USART1_Init+0x24>
     700:	00 00       	nop
     702:	08 95       	ret

00000704 <USART1_Transmit>:
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     704:	90 91 9b 00 	lds	r25, 0x009B
     708:	95 ff       	sbrs	r25, 5
     70a:	fc cf       	rjmp	.-8      	; 0x704 <USART1_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     70c:	80 93 9c 00 	sts	0x009C, r24
     710:	08 95       	ret

00000712 <USART1_send_string>:
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     712:	fc 01       	movw	r30, r24
     714:	20 81       	ld	r18, Z
     716:	22 23       	and	r18, r18
     718:	51 f0       	breq	.+20     	; 0x72e <USART1_send_string+0x1c>
     71a:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     71c:	90 91 9b 00 	lds	r25, 0x009B
     720:	95 ff       	sbrs	r25, 5
     722:	fc cf       	rjmp	.-8      	; 0x71c <USART1_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     724:	20 93 9c 00 	sts	0x009C, r18
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     728:	21 91       	ld	r18, Z+
     72a:	21 11       	cpse	r18, r1
     72c:	f7 cf       	rjmp	.-18     	; 0x71c <USART1_send_string+0xa>
     72e:	08 95       	ret

00000730 <USART1_Receive>:
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     730:	80 91 9b 00 	lds	r24, 0x009B
     734:	87 ff       	sbrs	r24, 7
     736:	fc cf       	rjmp	.-8      	; 0x730 <USART1_Receive>
    return UDR1;
     738:	80 91 9c 00 	lds	r24, 0x009C
}
     73c:	08 95       	ret

0000073e <USART1_Receive_String>:

void USART1_Receive_String(unsigned char *str){
     73e:	dc 01       	movw	r26, r24
     740:	fc 01       	movw	r30, r24
     742:	9c 01       	movw	r18, r24
     744:	2b 5f       	subi	r18, 0xFB	; 251
     746:	3f 4f       	sbci	r19, 0xFF	; 255
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     748:	90 91 9b 00 	lds	r25, 0x009B
     74c:	97 ff       	sbrs	r25, 7
     74e:	fc cf       	rjmp	.-8      	; 0x748 <USART1_Receive_String+0xa>
    return UDR1;
     750:	90 91 9c 00 	lds	r25, 0x009C

void USART1_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     754:	9e 37       	cpi	r25, 0x7E	; 126
     756:	29 f0       	breq	.+10     	; 0x762 <USART1_Receive_String+0x24>
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
     758:	e2 17       	cp	r30, r18
     75a:	f3 07       	cpc	r31, r19
     75c:	19 f0       	breq	.+6      	; 0x764 <USART1_Receive_String+0x26>
            str[2] = 75;
            str[3] = END_STRING;
            str[4] = '\0';
            break;
        }
        str[i] = c;
     75e:	91 93       	st	Z+, r25
     760:	f3 cf       	rjmp	.-26     	; 0x748 <USART1_Receive_String+0xa>
     762:	08 95       	ret
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
     764:	82 e3       	ldi	r24, 0x32	; 50
     766:	8c 93       	st	X, r24
            str[1] = 25;
     768:	89 e1       	ldi	r24, 0x19	; 25
     76a:	11 96       	adiw	r26, 0x01	; 1
     76c:	8c 93       	st	X, r24
     76e:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 75;
     770:	8b e4       	ldi	r24, 0x4B	; 75
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	8c 93       	st	X, r24
     776:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
     778:	8e e7       	ldi	r24, 0x7E	; 126
     77a:	13 96       	adiw	r26, 0x03	; 3
     77c:	8c 93       	st	X, r24
     77e:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
     780:	14 96       	adiw	r26, 0x04	; 4
     782:	1c 92       	st	X, r1
            break;
     784:	08 95       	ret

00000786 <USART1_flush>:
        str[i] = c;
        ++i;
    }
}

void USART1_flush(){
     786:	e3 e0       	ldi	r30, 0x03	; 3
     788:	f1 e0       	ldi	r31, 0x01	; 1
     78a:	96 e4       	ldi	r25, 0x46	; 70
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     78c:	80 91 9b 00 	lds	r24, 0x009B
     790:	85 ff       	sbrs	r24, 5
     792:	fc cf       	rjmp	.-8      	; 0x78c <USART1_flush+0x6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     794:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     798:	91 91       	ld	r25, Z+
     79a:	91 11       	cpse	r25, r1
     79c:	f7 cf       	rjmp	.-18     	; 0x78c <USART1_flush+0x6>
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     79e:	80 91 9b 00 	lds	r24, 0x009B
     7a2:	87 ff       	sbrs	r24, 7
     7a4:	0c c0       	rjmp	.+24     	; 0x7be <USART1_flush+0x38>
        dummy = UDR1;
     7a6:	90 91 9c 00 	lds	r25, 0x009C
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     7aa:	80 91 9b 00 	lds	r24, 0x009B
     7ae:	85 ff       	sbrs	r24, 5
     7b0:	fc cf       	rjmp	.-8      	; 0x7aa <USART1_flush+0x24>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     7b2:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     7b6:	80 91 9b 00 	lds	r24, 0x009B
     7ba:	87 fd       	sbrc	r24, 7
     7bc:	f4 cf       	rjmp	.-24     	; 0x7a6 <USART1_flush+0x20>
     7be:	08 95       	ret

000007c0 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     7c0:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
     7c4:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     7c6:	88 e1       	ldi	r24, 0x18	; 24
     7c8:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */ 
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
     7ca:	8e e0       	ldi	r24, 0x0E	; 14
     7cc:	80 93 95 00 	sts	0x0095, r24
     7d0:	2f ef       	ldi	r18, 0xFF	; 255
     7d2:	81 ee       	ldi	r24, 0xE1	; 225
     7d4:	94 e0       	ldi	r25, 0x04	; 4
     7d6:	21 50       	subi	r18, 0x01	; 1
     7d8:	80 40       	sbci	r24, 0x00	; 0
     7da:	90 40       	sbci	r25, 0x00	; 0
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <USART0_Init+0x16>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <USART0_Init+0x20>
     7e0:	00 00       	nop
     7e2:	08 95       	ret

000007e4 <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     7e4:	5d 9b       	sbis	0x0b, 5	; 11
     7e6:	fe cf       	rjmp	.-4      	; 0x7e4 <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     7e8:	8c b9       	out	0x0c, r24	; 12
     7ea:	08 95       	ret

000007ec <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
     7ec:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
     7ee:	90 81       	ld	r25, Z
     7f0:	99 23       	and	r25, r25
     7f2:	39 f0       	breq	.+14     	; 0x802 <USART0_send_string+0x16>
     7f4:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     7f6:	5d 9b       	sbis	0x0b, 5	; 11
     7f8:	fe cf       	rjmp	.-4      	; 0x7f6 <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     7fa:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     7fc:	91 91       	ld	r25, Z+
     7fe:	91 11       	cpse	r25, r1
     800:	fa cf       	rjmp	.-12     	; 0x7f6 <USART0_send_string+0xa>
     802:	08 95       	ret

00000804 <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
     804:	80 e8       	ldi	r24, 0x80	; 128
     806:	9d e8       	ldi	r25, 0x8D	; 141
     808:	ab e5       	ldi	r26, 0x5B	; 91
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	04 c0       	rjmp	.+8      	; 0x816 <USART0_Receive+0x12>
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	a1 09       	sbc	r26, r1
     812:	b1 09       	sbc	r27, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
     814:	21 f0       	breq	.+8      	; 0x81e <USART0_Receive+0x1a>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
     816:	5f 9b       	sbis	0x0b, 7	; 11
     818:	fa cf       	rjmp	.-12     	; 0x80e <USART0_Receive+0xa>
            /* Get and return received data from buffer */ 
            return UDR0;
     81a:	8c b1       	in	r24, 0x0c	; 12
     81c:	08 95       	ret
        }
    } while (--timeout);
    return 255;
     81e:	8f ef       	ldi	r24, 0xFF	; 255
    /********
    * This is the original
    ************/
    //while (!(UCSR0A & (1<<RXC0)));
    //return UDR0;
}
     820:	08 95       	ret

00000822 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
     822:	dc 01       	movw	r26, r24
     824:	fc 01       	movw	r30, r24
     826:	9c 01       	movw	r18, r24
     828:	2b 5f       	subi	r18, 0xFB	; 251
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	40 e8       	ldi	r20, 0x80	; 128
     82e:	5d e8       	ldi	r21, 0x8D	; 141
     830:	6b e5       	ldi	r22, 0x5B	; 91
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	05 c0       	rjmp	.+10     	; 0x840 <USART0_Receive_String+0x1e>
     836:	41 50       	subi	r20, 0x01	; 1
     838:	51 09       	sbc	r21, r1
     83a:	61 09       	sbc	r22, r1
     83c:	71 09       	sbc	r23, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
     83e:	61 f0       	breq	.+24     	; 0x858 <USART0_Receive_String+0x36>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
     840:	5f 9b       	sbis	0x0b, 7	; 11
     842:	f9 cf       	rjmp	.-14     	; 0x836 <USART0_Receive_String+0x14>
            /* Get and return received data from buffer */ 
            return UDR0;
     844:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     846:	9e 37       	cpi	r25, 0x7E	; 126
     848:	b1 f0       	breq	.+44     	; 0x876 <USART0_Receive_String+0x54>
        if (c == 255 || i > MAX_STRING_SIZE - 1){
     84a:	9f 3f       	cpi	r25, 0xFF	; 255
     84c:	29 f0       	breq	.+10     	; 0x858 <USART0_Receive_String+0x36>
     84e:	e2 17       	cp	r30, r18
     850:	f3 07       	cpc	r31, r19
     852:	11 f0       	breq	.+4      	; 0x858 <USART0_Receive_String+0x36>
            str[2] = 50;
            str[3] = END_STRING;
            str[4] = '\0';
            return;
        }
        str[i] = c;
     854:	91 93       	st	Z+, r25
     856:	ea cf       	rjmp	.-44     	; 0x82c <USART0_Receive_String+0xa>
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
     858:	82 e3       	ldi	r24, 0x32	; 50
     85a:	8c 93       	st	X, r24
            str[1] = 50;
     85c:	11 96       	adiw	r26, 0x01	; 1
     85e:	8c 93       	st	X, r24
     860:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
     862:	12 96       	adiw	r26, 0x02	; 2
     864:	8c 93       	st	X, r24
     866:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
     868:	8e e7       	ldi	r24, 0x7E	; 126
     86a:	13 96       	adiw	r26, 0x03	; 3
     86c:	8c 93       	st	X, r24
     86e:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
     870:	14 96       	adiw	r26, 0x04	; 4
     872:	1c 92       	st	X, r1
            return;
     874:	08 95       	ret
     876:	08 95       	ret

00000878 <USART0_flush>:
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
     878:	5f 9b       	sbis	0x0b, 7	; 11
     87a:	03 c0       	rjmp	.+6      	; 0x882 <USART0_flush+0xa>
        dummy = UDR0;
     87c:	8c b1       	in	r24, 0x0c	; 12
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
     87e:	5f 99       	sbic	0x0b, 7	; 11
     880:	fd cf       	rjmp	.-6      	; 0x87c <USART0_flush+0x4>
     882:	08 95       	ret

00000884 <init_esc>:

void init_motors(){
    set_16bitPWM1();
}

void init_esc(){
     884:	83 e0       	ldi	r24, 0x03	; 3
     886:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
     888:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88a:	ef e6       	ldi	r30, 0x6F	; 111
     88c:	f7 e1       	ldi	r31, 0x17	; 23
     88e:	31 97       	sbiw	r30, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <init_esc+0xa>
     892:	00 c0       	rjmp	.+0      	; 0x894 <init_esc+0x10>
     894:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
     896:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     898:	ff ef       	ldi	r31, 0xFF	; 255
     89a:	23 ed       	ldi	r18, 0xD3	; 211
     89c:	30 e3       	ldi	r19, 0x30	; 48
     89e:	f1 50       	subi	r31, 0x01	; 1
     8a0:	20 40       	sbci	r18, 0x00	; 0
     8a2:	30 40       	sbci	r19, 0x00	; 0
     8a4:	e1 f7       	brne	.-8      	; 0x89e <init_esc+0x1a>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <init_esc+0x24>
     8a8:	00 00       	nop
     8aa:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
     8ac:	69 f7       	brne	.-38     	; 0x888 <init_esc+0x4>
        PORTB |= (1 << 4);
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
        _delay_ms(1000);
    }
}
     8ae:	08 95       	ret

000008b0 <set_16bitPWM1>:

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
     8b0:	8f b5       	in	r24, 0x2f	; 47
     8b2:	80 68       	ori	r24, 0x80	; 128
     8b4:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
     8b6:	8f b5       	in	r24, 0x2f	; 47
     8b8:	80 62       	ori	r24, 0x20	; 32
     8ba:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
     8bc:	8f b5       	in	r24, 0x2f	; 47
     8be:	88 60       	ori	r24, 0x08	; 8
     8c0:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
     8c2:	8f b5       	in	r24, 0x2f	; 47
     8c4:	82 60       	ori	r24, 0x02	; 2
     8c6:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
     8c8:	8e b5       	in	r24, 0x2e	; 46
     8ca:	88 61       	ori	r24, 0x18	; 24
     8cc:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
     8ce:	8e b5       	in	r24, 0x2e	; 46
     8d0:	82 60       	ori	r24, 0x02	; 2
     8d2:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     8d4:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     8d6:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     8d8:	21 e0       	ldi	r18, 0x01	; 1
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	3d bd       	out	0x2d, r19	; 45
     8de:	2c bd       	out	0x2c, r18	; 44
    sei();
     8e0:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     8e2:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
     8e4:	8f ef       	ldi	r24, 0xFF	; 255
     8e6:	9f ef       	ldi	r25, 0xFF	; 255
     8e8:	97 bd       	out	0x27, r25	; 39
     8ea:	86 bd       	out	0x26, r24	; 38
     8ec:	2f ef       	ldi	r18, 0xFF	; 255
     8ee:	81 ee       	ldi	r24, 0xE1	; 225
     8f0:	94 e0       	ldi	r25, 0x04	; 4
     8f2:	21 50       	subi	r18, 0x01	; 1
     8f4:	80 40       	sbci	r24, 0x00	; 0
     8f6:	90 40       	sbci	r25, 0x00	; 0
     8f8:	e1 f7       	brne	.-8      	; 0x8f2 <set_16bitPWM1+0x42>
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <set_16bitPWM1+0x4c>
     8fc:	00 00       	nop
     8fe:	08 95       	ret

00000900 <init_motors>:
#include "motors.h"

void init_motors(){
    set_16bitPWM1();
     900:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <set_16bitPWM1>

00000904 <TIM16_WriteTCNT1>:
    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
     904:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     906:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     908:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     90a:	3d bd       	out	0x2d, r19	; 45
     90c:	2c bd       	out	0x2c, r18	; 44
    sei();
     90e:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     910:	9f bf       	out	0x3f, r25	; 63
     912:	08 95       	ret

00000914 <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
     914:	4f 92       	push	r4
     916:	5f 92       	push	r5
     918:	6f 92       	push	r6
     91a:	7f 92       	push	r7
     91c:	8f 92       	push	r8
     91e:	9f 92       	push	r9
     920:	af 92       	push	r10
     922:	bf 92       	push	r11
     924:	cf 92       	push	r12
     926:	df 92       	push	r13
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	2b 01       	movw	r4, r22
     936:	3c 01       	movw	r6, r24
     938:	49 01       	movw	r8, r18
     93a:	5a 01       	movw	r10, r20
     93c:	67 01       	movw	r12, r14
     93e:	78 01       	movw	r14, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 ea       	ldi	r20, 0xA0	; 160
     946:	51 e4       	ldi	r21, 0x41	; 65
     948:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__cmpsf2>
     94c:	87 fd       	sbrc	r24, 7
     94e:	53 c0       	rjmp	.+166    	; 0x9f6 <move+0xe2>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 ea       	ldi	r20, 0xA0	; 160
     956:	52 e4       	ldi	r21, 0x42	; 66
     958:	c3 01       	movw	r24, r6
     95a:	b2 01       	movw	r22, r4
     95c:	0e 94 26 09 	call	0x124c	; 0x124c <__gesf2>
     960:	18 16       	cp	r1, r24
     962:	0c f0       	brlt	.+2      	; 0x966 <move+0x52>
     964:	51 c0       	rjmp	.+162    	; 0xa08 <move+0xf4>
     966:	c8 e9       	ldi	r28, 0x98	; 152
     968:	dd e0       	ldi	r29, 0x0D	; 13
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 ea       	ldi	r20, 0xA0	; 160
     970:	51 e4       	ldi	r21, 0x41	; 65
     972:	c5 01       	movw	r24, r10
     974:	b4 01       	movw	r22, r8
     976:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__cmpsf2>
     97a:	87 fd       	sbrc	r24, 7
     97c:	42 c0       	rjmp	.+132    	; 0xa02 <move+0xee>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 ea       	ldi	r20, 0xA0	; 160
     984:	52 e4       	ldi	r21, 0x42	; 66
     986:	c5 01       	movw	r24, r10
     988:	b4 01       	movw	r22, r8
     98a:	0e 94 26 09 	call	0x124c	; 0x124c <__gesf2>
     98e:	18 16       	cp	r1, r24
     990:	0c f0       	brlt	.+2      	; 0x994 <move+0x80>
     992:	5d c0       	rjmp	.+186    	; 0xa4e <move+0x13a>
     994:	08 e9       	ldi	r16, 0x98	; 152
     996:	1d e0       	ldi	r17, 0x0D	; 13
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + Z_SATURATE_DIFFERENCE)){
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	40 e2       	ldi	r20, 0x20	; 32
     99e:	51 e4       	ldi	r21, 0x41	; 65
     9a0:	c7 01       	movw	r24, r14
     9a2:	b6 01       	movw	r22, r12
     9a4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__cmpsf2>
     9a8:	87 fd       	sbrc	r24, 7
     9aa:	28 c0       	rjmp	.+80     	; 0x9fc <move+0xe8>
        z = MIN_INPUT + 1;
    }
    if (z > (MAX_INPUT - Z_SATURATE_DIFFERENCE)){
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	44 eb       	ldi	r20, 0xB4	; 180
     9b2:	52 e4       	ldi	r21, 0x42	; 66
     9b4:	c7 01       	movw	r24, r14
     9b6:	b6 01       	movw	r22, r12
     9b8:	0e 94 26 09 	call	0x124c	; 0x124c <__gesf2>
     9bc:	18 16       	cp	r1, r24
     9be:	b4 f5       	brge	.+108    	; 0xa2c <move+0x118>
     9c0:	68 ed       	ldi	r22, 0xD8	; 216
     9c2:	7e e0       	ldi	r23, 0x0E	; 14
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different speed controller
    z_speed = (unsigned int)((z - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    OCR1A = left_speed;
     9c4:	db bd       	out	0x2b, r29	; 43
     9c6:	ca bd       	out	0x2a, r28	; 42
    OCR1B = right_speed;
     9c8:	19 bd       	out	0x29, r17	; 41
     9ca:	08 bd       	out	0x28, r16	; 40
    OCR1C = z_speed;
     9cc:	70 93 79 00 	sts	0x0079, r23
     9d0:	60 93 78 00 	sts	0x0078, r22

}
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	df 90       	pop	r13
     9e2:	cf 90       	pop	r12
     9e4:	bf 90       	pop	r11
     9e6:	af 90       	pop	r10
     9e8:	9f 90       	pop	r9
     9ea:	8f 90       	pop	r8
     9ec:	7f 90       	pop	r7
     9ee:	6f 90       	pop	r6
     9f0:	5f 90       	pop	r5
     9f2:	4f 90       	pop	r4
     9f4:	08 95       	ret
     9f6:	c8 ed       	ldi	r28, 0xD8	; 216
     9f8:	d9 e0       	ldi	r29, 0x09	; 9
     9fa:	b7 cf       	rjmp	.-146    	; 0x96a <move+0x56>
     9fc:	68 ea       	ldi	r22, 0xA8	; 168
     9fe:	78 e0       	ldi	r23, 0x08	; 8
     a00:	e1 cf       	rjmp	.-62     	; 0x9c4 <move+0xb0>
     a02:	08 ed       	ldi	r16, 0xD8	; 216
     a04:	19 e0       	ldi	r17, 0x09	; 9
     a06:	c8 cf       	rjmp	.-112    	; 0x998 <move+0x84>
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 e8       	ldi	r20, 0x80	; 128
     a0e:	51 e4       	ldi	r21, 0x41	; 65
     a10:	c3 01       	movw	r24, r6
     a12:	b2 01       	movw	r22, r4
     a14:	0e 94 33 09 	call	0x1266	; 0x1266 <__mulsf3>
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e8       	ldi	r19, 0x80	; 128
     a1c:	49 e0       	ldi	r20, 0x09	; 9
     a1e:	55 e4       	ldi	r21, 0x45	; 69
     a20:	0e 94 c9 06 	call	0xd92	; 0xd92 <__addsf3>
     a24:	0e 94 1e 08 	call	0x103c	; 0x103c <__fixunssfsi>
     a28:	eb 01       	movw	r28, r22
     a2a:	9f cf       	rjmp	.-194    	; 0x96a <move+0x56>
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e8       	ldi	r20, 0x80	; 128
     a32:	51 e4       	ldi	r21, 0x41	; 65
     a34:	c7 01       	movw	r24, r14
     a36:	b6 01       	movw	r22, r12
     a38:	0e 94 33 09 	call	0x1266	; 0x1266 <__mulsf3>
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e8       	ldi	r19, 0x80	; 128
     a40:	49 e0       	ldi	r20, 0x09	; 9
     a42:	55 e4       	ldi	r21, 0x45	; 69
     a44:	0e 94 c9 06 	call	0xd92	; 0xd92 <__addsf3>
     a48:	0e 94 1e 08 	call	0x103c	; 0x103c <__fixunssfsi>
     a4c:	bb cf       	rjmp	.-138    	; 0x9c4 <move+0xb0>
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 e8       	ldi	r20, 0x80	; 128
     a54:	51 e4       	ldi	r21, 0x41	; 65
     a56:	c5 01       	movw	r24, r10
     a58:	b4 01       	movw	r22, r8
     a5a:	0e 94 33 09 	call	0x1266	; 0x1266 <__mulsf3>
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e8       	ldi	r19, 0x80	; 128
     a62:	49 e0       	ldi	r20, 0x09	; 9
     a64:	55 e4       	ldi	r21, 0x45	; 69
     a66:	0e 94 c9 06 	call	0xd92	; 0xd92 <__addsf3>
     a6a:	0e 94 1e 08 	call	0x103c	; 0x103c <__fixunssfsi>
     a6e:	8b 01       	movw	r16, r22
     a70:	93 cf       	rjmp	.-218    	; 0x998 <move+0x84>

00000a72 <init_HMC5883L>:
#include "magnometer.h"

void init_HMC5883L(void){

    i2c_start(HMC5883L_WRITE);
     a72:	8c e3       	ldi	r24, 0x3C	; 60
     a74:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_start>
    i2c_write(0x00); // set pointer to CRA
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_write>
    i2c_write(0x70); // write 0x70 to CRA
     a7e:	80 e7       	ldi	r24, 0x70	; 112
     a80:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_write>
    i2c_stop();
     a84:	0e 94 09 02 	call	0x412	; 0x412 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
     a88:	8c e3       	ldi	r24, 0x3C	; 60
     a8a:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_start>
    i2c_write(0x01); // set pointer to CRB
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_write>
    i2c_write(0xA0);
     a94:	80 ea       	ldi	r24, 0xA0	; 160
     a96:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_write>
    i2c_stop();
     a9a:	0e 94 09 02 	call	0x412	; 0x412 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
     a9e:	8c e3       	ldi	r24, 0x3C	; 60
     aa0:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_start>
    i2c_write(0x02); // set pointer to measurement mode
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_write>
    i2c_write(0x00); // continous measurement
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_write>
    i2c_stop();
     ab0:	0c 94 09 02 	jmp	0x412	; 0x412 <i2c_stop>

00000ab4 <getHeading>:
}
float getHeading(int16_t *x, int16_t *y, int16_t *z){
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	8c 01       	movw	r16, r24
     ac6:	eb 01       	movw	r28, r22
     ac8:	7a 01       	movw	r14, r20

    float headingDegrees;
    
    i2c_start(HMC5883L_WRITE);
     aca:	8c e3       	ldi	r24, 0x3C	; 60
     acc:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_start>
    i2c_write(0x03); // set pointer to X axis MSB
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_write>
    i2c_stop();
     ad6:	0e 94 09 02 	call	0x412	; 0x412 <i2c_stop>

    i2c_start(HMC5883L_READ);
     ada:	8d e3       	ldi	r24, 0x3D	; 61
     adc:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_start>

    *x = ((uint8_t)i2c_read_ack())<<8;
     ae0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_read_ack>
     ae4:	f8 01       	movw	r30, r16
     ae6:	10 82       	st	Z, r1
     ae8:	81 83       	std	Z+1, r24	; 0x01
    *x |= i2c_read_ack();
     aea:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_read_ack>
     aee:	f8 01       	movw	r30, r16
     af0:	20 81       	ld	r18, Z
     af2:	31 81       	ldd	r19, Z+1	; 0x01
     af4:	28 2b       	or	r18, r24
     af6:	31 83       	std	Z+1, r19	; 0x01
     af8:	20 83       	st	Z, r18

    *z = ((uint8_t)i2c_read_ack())<<8;
     afa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_read_ack>
     afe:	f7 01       	movw	r30, r14
     b00:	10 82       	st	Z, r1
     b02:	81 83       	std	Z+1, r24	; 0x01
    *z |= i2c_read_ack();
     b04:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_read_ack>
     b08:	f7 01       	movw	r30, r14
     b0a:	20 81       	ld	r18, Z
     b0c:	31 81       	ldd	r19, Z+1	; 0x01
     b0e:	28 2b       	or	r18, r24
     b10:	31 83       	std	Z+1, r19	; 0x01
     b12:	20 83       	st	Z, r18

    *y = ((uint8_t)i2c_read_ack())<<8;
     b14:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_read_ack>
     b18:	18 82       	st	Y, r1
     b1a:	89 83       	std	Y+1, r24	; 0x01
    *y |= i2c_read_nack();
     b1c:	0e 94 08 01 	call	0x210	; 0x210 <i2c_read_nack>
     b20:	28 81       	ld	r18, Y
     b22:	39 81       	ldd	r19, Y+1	; 0x01
     b24:	28 2b       	or	r18, r24
     b26:	39 83       	std	Y+1, r19	; 0x01
     b28:	28 83       	st	Y, r18

    i2c_stop();
     b2a:	0e 94 09 02 	call	0x412	; 0x412 <i2c_stop>

    headingDegrees = atan2((double)*y,(double)*x) * 180 / 3.141592654 + 180;
     b2e:	f8 01       	movw	r30, r16
     b30:	60 81       	ld	r22, Z
     b32:	71 81       	ldd	r23, Z+1	; 0x01
     b34:	07 2e       	mov	r0, r23
     b36:	00 0c       	add	r0, r0
     b38:	88 0b       	sbc	r24, r24
     b3a:	99 0b       	sbc	r25, r25
     b3c:	0e 94 4f 08 	call	0x109e	; 0x109e <__floatsisf>
     b40:	6b 01       	movw	r12, r22
     b42:	7c 01       	movw	r14, r24
     b44:	68 81       	ld	r22, Y
     b46:	79 81       	ldd	r23, Y+1	; 0x01
     b48:	07 2e       	mov	r0, r23
     b4a:	00 0c       	add	r0, r0
     b4c:	88 0b       	sbc	r24, r24
     b4e:	99 0b       	sbc	r25, r25
     b50:	0e 94 4f 08 	call	0x109e	; 0x109e <__floatsisf>
     b54:	a7 01       	movw	r20, r14
     b56:	96 01       	movw	r18, r12
     b58:	0e 94 48 07 	call	0xe90	; 0xe90 <atan2>
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	44 e3       	ldi	r20, 0x34	; 52
     b62:	53 e4       	ldi	r21, 0x43	; 67
     b64:	0e 94 33 09 	call	0x1266	; 0x1266 <__mulsf3>
     b68:	2b ed       	ldi	r18, 0xDB	; 219
     b6a:	3f e0       	ldi	r19, 0x0F	; 15
     b6c:	49 e4       	ldi	r20, 0x49	; 73
     b6e:	50 e4       	ldi	r21, 0x40	; 64
     b70:	0e 94 ac 07 	call	0xf58	; 0xf58 <__divsf3>
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	44 e3       	ldi	r20, 0x34	; 52
     b7a:	53 e4       	ldi	r21, 0x43	; 67
     b7c:	0e 94 c9 06 	call	0xd92	; 0xd92 <__addsf3>

    return headingDegrees;
}
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	cf 90       	pop	r12
     b90:	08 95       	ret

00000b92 <get_distance>:
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	cb 01       	movw	r24, r22
     b98:	08 95       	ret

00000b9a <print_distance>:
    return 0;
}

double print_distance(unsigned int pin){
    return 0;
}
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	cb 01       	movw	r24, r22
     ba0:	08 95       	ret

00000ba2 <enable_laser_sensor>:
void enable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
     ba2:	43 98       	cbi	0x08, 3	; 8

    //enable analog comparator multiplexer, set SFIOR:ACME
    SFIOR |= (1 << ACME);
     ba4:	80 b5       	in	r24, 0x20	; 32
     ba6:	88 60       	ori	r24, 0x08	; 8
     ba8:	80 bd       	out	0x20, r24	; 32

    //set AIN1 to laser sensor pin
    ADMUX &= 0b11111000; //clear the admux input pin bits
     baa:	87 b1       	in	r24, 0x07	; 7
     bac:	88 7f       	andi	r24, 0xF8	; 248
     bae:	87 b9       	out	0x07, r24	; 7
    ADMUX |= LASER_SENSOR;  //set the new bits
     bb0:	38 9a       	sbi	0x07, 0	; 7
    
    //enable analog comparator, clear ACSR:ACD
    ACSR &= ~(1 << ACD);
     bb2:	47 98       	cbi	0x08, 7	; 8
    
    //set comparator interrupt on rising output edge, set ACSR:ACIS1, set ACSR:ACIS0
    ACSR |= (1 << ACIS1) | (1 << ACIS0);
     bb4:	88 b1       	in	r24, 0x08	; 8
     bb6:	83 60       	ori	r24, 0x03	; 3
     bb8:	88 b9       	out	0x08, r24	; 8
    
    //enable analog comparator interrupt, set ACSR:ACIE
    ACSR |= (1 << ACIE);
     bba:	43 9a       	sbi	0x08, 3	; 8
     bbc:	08 95       	ret

00000bbe <disable_laser_sensor>:
    
    //Be sure to handle the interrupt until ACSR:ACO goes low
}
void disable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
     bbe:	43 98       	cbi	0x08, 3	; 8

    //disable analog comparator, set ACSR:ACD
    ACSR |= (1 << ACD);
     bc0:	47 9a       	sbi	0x08, 7	; 8

    //disable analog comparator multiplexor, clear SFIOR:ACME
    SFIOR &= ~(1 << ACME);
     bc2:	80 b5       	in	r24, 0x20	; 32
     bc4:	87 7f       	andi	r24, 0xF7	; 247
     bc6:	80 bd       	out	0x20, r24	; 32
     bc8:	08 95       	ret

00000bca <laser_off>:
}

void laser_off(){
    PORTB |= (1 << LASER);
     bca:	c0 9a       	sbi	0x18, 0	; 24
     bcc:	08 95       	ret

00000bce <laser_on>:
}
void laser_on(){
    PORTB &= ~(1 << LASER);
     bce:	c0 98       	cbi	0x18, 0	; 24
     bd0:	08 95       	ret

00000bd2 <calibrate_pressure_sensor>:
#define	PRESSURESENSOR_C

#include "pressuresensor.h"

void calibrate_pressure_sensor(){
	PSENSOR_MIN = get_voltage(PSENSOR_PIN);;
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 3f 02 	call	0x47e	; 0x47e <get_voltage>
     bda:	60 93 14 01 	sts	0x0114, r22
     bde:	70 93 15 01 	sts	0x0115, r23
     be2:	80 93 16 01 	sts	0x0116, r24
     be6:	90 93 17 01 	sts	0x0117, r25
     bea:	08 95       	ret

00000bec <get_depth_mpa>:
}

double get_depth_mpa(){
     bec:	8f 92       	push	r8
     bee:	9f 92       	push	r9
     bf0:	af 92       	push	r10
     bf2:	bf 92       	push	r11
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
	return 1.2 * (get_voltage(PSENSOR_PIN) - PSENSOR_MIN)/(4.5-PSENSOR_MIN);
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 3f 02 	call	0x47e	; 0x47e <get_voltage>
     c04:	20 91 14 01 	lds	r18, 0x0114
     c08:	30 91 15 01 	lds	r19, 0x0115
     c0c:	40 91 16 01 	lds	r20, 0x0116
     c10:	50 91 17 01 	lds	r21, 0x0117
     c14:	80 90 14 01 	lds	r8, 0x0114
     c18:	90 90 15 01 	lds	r9, 0x0115
     c1c:	a0 90 16 01 	lds	r10, 0x0116
     c20:	b0 90 17 01 	lds	r11, 0x0117
     c24:	0e 94 c8 06 	call	0xd90	; 0xd90 <__subsf3>
     c28:	2a e9       	ldi	r18, 0x9A	; 154
     c2a:	39 e9       	ldi	r19, 0x99	; 153
     c2c:	49 e9       	ldi	r20, 0x99	; 153
     c2e:	5f e3       	ldi	r21, 0x3F	; 63
     c30:	0e 94 33 09 	call	0x1266	; 0x1266 <__mulsf3>
     c34:	6b 01       	movw	r12, r22
     c36:	7c 01       	movw	r14, r24
     c38:	a5 01       	movw	r20, r10
     c3a:	94 01       	movw	r18, r8
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	80 e9       	ldi	r24, 0x90	; 144
     c42:	90 e4       	ldi	r25, 0x40	; 64
     c44:	0e 94 c8 06 	call	0xd90	; 0xd90 <__subsf3>
     c48:	9b 01       	movw	r18, r22
     c4a:	ac 01       	movw	r20, r24
     c4c:	c7 01       	movw	r24, r14
     c4e:	b6 01       	movw	r22, r12
     c50:	0e 94 ac 07 	call	0xf58	; 0xf58 <__divsf3>
}
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	bf 90       	pop	r11
     c5e:	af 90       	pop	r10
     c60:	9f 90       	pop	r9
     c62:	8f 90       	pop	r8
     c64:	08 95       	ret

00000c66 <get_depth_feet>:
double get_depth_feet(){
	return 334.56229215 * get_depth_mpa();
     c66:	0e 94 f6 05 	call	0xbec	; 0xbec <get_depth_mpa>
     c6a:	29 ef       	ldi	r18, 0xF9	; 249
     c6c:	37 e4       	ldi	r19, 0x47	; 71
     c6e:	47 ea       	ldi	r20, 0xA7	; 167
     c70:	53 e4       	ldi	r21, 0x43	; 67
     c72:	0e 94 33 09 	call	0x1266	; 0x1266 <__mulsf3>
}
     c76:	08 95       	ret

00000c78 <set_rgb>:
        blue = 0;
    if (blue > 255)
        blue = 255;
    temp = (255 - red)/(float)255;
    //OCR3A = temp*ICR3;
    OCR3A = 32000;
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	9d e7       	ldi	r25, 0x7D	; 125
     c7c:	90 93 87 00 	sts	0x0087, r25
     c80:	80 93 86 00 	sts	0x0086, r24
    temp = (255 - green)/(float)255;
    //OCR3B = temp*ICR3;
    OCR3B = 32000;
     c84:	90 93 85 00 	sts	0x0085, r25
     c88:	80 93 84 00 	sts	0x0084, r24
    temp = (255 - blue)/(float)255;
    //OCR3C = temp*ICR3;
    OCR3C = 32000;
     c8c:	90 93 83 00 	sts	0x0083, r25
     c90:	80 93 82 00 	sts	0x0082, r24
     c94:	08 95       	ret

00000c96 <set_16bitPWM3>:

}

void set_16bitPWM3(){

    TCCR3A |= (1 << COM3A1); //non-inverting
     c96:	eb e8       	ldi	r30, 0x8B	; 139
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 68       	ori	r24, 0x80	; 128
     c9e:	80 83       	st	Z, r24
    TCCR3A |= (1 << COM3B1); //non-inverting
     ca0:	80 81       	ld	r24, Z
     ca2:	80 62       	ori	r24, 0x20	; 32
     ca4:	80 83       	st	Z, r24
    TCCR3A |= (1 << COM3C1); //non-inverting
     ca6:	80 81       	ld	r24, Z
     ca8:	88 60       	ori	r24, 0x08	; 8
     caa:	80 83       	st	Z, r24

    //Fast PWM w/ TOP ICR1
    TCCR3A |= (1 << WGM31); 
     cac:	80 81       	ld	r24, Z
     cae:	82 60       	ori	r24, 0x02	; 2
     cb0:	80 83       	st	Z, r24
    TCCR3B |= (1 << WGM33) | (1 << WGM32);
     cb2:	ea e8       	ldi	r30, 0x8A	; 138
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	88 61       	ori	r24, 0x18	; 24
     cba:	80 83       	st	Z, r24
    
    switch (LED_PRESCALER){
        case 1:
            TCCR3B |= (1 << CS30); //244.140625 Hz
     cbc:	80 81       	ld	r24, Z
     cbe:	81 60       	ori	r24, 0x01	; 1
     cc0:	80 83       	st	Z, r24
}

void TIM16_WriteTCNT3( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     cc2:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     cc4:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT3 = i;
     cc6:	21 e0       	ldi	r18, 0x01	; 1
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	30 93 89 00 	sts	0x0089, r19
     cce:	20 93 88 00 	sts	0x0088, r18
    sei();
     cd2:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     cd4:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT3(1);
    ICR3 = (unsigned int) 65535;
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	9f ef       	ldi	r25, 0xFF	; 255
     cda:	90 93 81 00 	sts	0x0081, r25
     cde:	80 93 80 00 	sts	0x0080, r24
     ce2:	2f ef       	ldi	r18, 0xFF	; 255
     ce4:	81 ee       	ldi	r24, 0xE1	; 225
     ce6:	94 e0       	ldi	r25, 0x04	; 4
     ce8:	21 50       	subi	r18, 0x01	; 1
     cea:	80 40       	sbci	r24, 0x00	; 0
     cec:	90 40       	sbci	r25, 0x00	; 0
     cee:	e1 f7       	brne	.-8      	; 0xce8 <set_16bitPWM3+0x52>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <set_16bitPWM3+0x5c>
     cf2:	00 00       	nop
     cf4:	08 95       	ret

00000cf6 <init_leds>:
#include "leds.h"

void init_leds(){
    DDRE |= 0xFF;
     cf6:	82 b1       	in	r24, 0x02	; 2
     cf8:	8f ef       	ldi	r24, 0xFF	; 255
     cfa:	82 b9       	out	0x02, r24	; 2
    PORTE = 0;
     cfc:	13 b8       	out	0x03, r1	; 3
    set_16bitPWM3();
     cfe:	0e 94 4b 06 	call	0xc96	; 0xc96 <set_16bitPWM3>
        blue = 0;
    if (blue > 255)
        blue = 255;
    temp = (255 - red)/(float)255;
    //OCR3A = temp*ICR3;
    OCR3A = 32000;
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	9d e7       	ldi	r25, 0x7D	; 125
     d06:	90 93 87 00 	sts	0x0087, r25
     d0a:	80 93 86 00 	sts	0x0086, r24
    temp = (255 - green)/(float)255;
    //OCR3B = temp*ICR3;
    OCR3B = 32000;
     d0e:	90 93 85 00 	sts	0x0085, r25
     d12:	80 93 84 00 	sts	0x0084, r24
    temp = (255 - blue)/(float)255;
    //OCR3C = temp*ICR3;
    OCR3C = 32000;
     d16:	90 93 83 00 	sts	0x0083, r25
     d1a:	80 93 82 00 	sts	0x0082, r24
     d1e:	08 95       	ret

00000d20 <TIM16_WriteTCNT3>:
     d20:	9c 01       	movw	r18, r24
     d22:	9f b7       	in	r25, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	30 93 89 00 	sts	0x0089, r19
     d2a:	20 93 88 00 	sts	0x0088, r18
     d2e:	78 94       	sei
     d30:	9f bf       	out	0x3f, r25	; 63
     d32:	08 95       	ret

00000d34 <main>:
char buffer[10];
volatile int object_detected = 0;


int main(){
    DDRB = 0xFF;
     d34:	8f ef       	ldi	r24, 0xFF	; 255
     d36:	87 bb       	out	0x17, r24	; 23
    PORTB = 0;
     d38:	18 ba       	out	0x18, r1	; 24
    STABLE_Z = 50;
     d3a:	82 e3       	ldi	r24, 0x32	; 50
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	90 93 01 01 	sts	0x0101, r25
     d42:	80 93 00 01 	sts	0x0100, r24

    enable_bumpers();
     d46:	0e 94 b8 00 	call	0x170	; 0x170 <enable_bumpers>

   
    
    PORTB = 0b01010101;
     d4a:	85 e5       	ldi	r24, 0x55	; 85
     d4c:	88 bb       	out	0x18, r24	; 24
     d4e:	2f ef       	ldi	r18, 0xFF	; 255
     d50:	33 ed       	ldi	r19, 0xD3	; 211
     d52:	80 e3       	ldi	r24, 0x30	; 48
     d54:	21 50       	subi	r18, 0x01	; 1
     d56:	30 40       	sbci	r19, 0x00	; 0
     d58:	80 40       	sbci	r24, 0x00	; 0
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <main+0x20>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <main+0x2a>
     d5e:	00 00       	nop
    _delay_ms(1000);
    PORTB = 0;
     d60:	18 ba       	out	0x18, r1	; 24
    sei();
     d62:	78 94       	sei
    while (1){
        PORTB = 0b10101010;
     d64:	8a ea       	ldi	r24, 0xAA	; 170
     d66:	88 bb       	out	0x18, r24	; 24
     d68:	9f ef       	ldi	r25, 0xFF	; 255
     d6a:	23 ed       	ldi	r18, 0xD3	; 211
     d6c:	30 e3       	ldi	r19, 0x30	; 48
     d6e:	91 50       	subi	r25, 0x01	; 1
     d70:	20 40       	sbci	r18, 0x00	; 0
     d72:	30 40       	sbci	r19, 0x00	; 0
     d74:	e1 f7       	brne	.-8      	; 0xd6e <main+0x3a>
     d76:	00 c0       	rjmp	.+0      	; 0xd78 <main+0x44>
     d78:	00 00       	nop
        _delay_ms(1000);
        PORTB = 0;
     d7a:	18 ba       	out	0x18, r1	; 24
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	23 ed       	ldi	r18, 0xD3	; 211
     d80:	30 e3       	ldi	r19, 0x30	; 48
     d82:	91 50       	subi	r25, 0x01	; 1
     d84:	20 40       	sbci	r18, 0x00	; 0
     d86:	30 40       	sbci	r19, 0x00	; 0
     d88:	e1 f7       	brne	.-8      	; 0xd82 <main+0x4e>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <main+0x58>
     d8c:	00 00       	nop
     d8e:	eb cf       	rjmp	.-42     	; 0xd66 <main+0x32>

00000d90 <__subsf3>:
     d90:	50 58       	subi	r21, 0x80	; 128

00000d92 <__addsf3>:
     d92:	bb 27       	eor	r27, r27
     d94:	aa 27       	eor	r26, r26
     d96:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__addsf3x>
     d9a:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__fp_round>
     d9e:	0e 94 de 08 	call	0x11bc	; 0x11bc <__fp_pscA>
     da2:	38 f0       	brcs	.+14     	; 0xdb2 <__addsf3+0x20>
     da4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__fp_pscB>
     da8:	20 f0       	brcs	.+8      	; 0xdb2 <__addsf3+0x20>
     daa:	39 f4       	brne	.+14     	; 0xdba <__addsf3+0x28>
     dac:	9f 3f       	cpi	r25, 0xFF	; 255
     dae:	19 f4       	brne	.+6      	; 0xdb6 <__addsf3+0x24>
     db0:	26 f4       	brtc	.+8      	; 0xdba <__addsf3+0x28>
     db2:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__fp_nan>
     db6:	0e f4       	brtc	.+2      	; 0xdba <__addsf3+0x28>
     db8:	e0 95       	com	r30
     dba:	e7 fb       	bst	r30, 7
     dbc:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__fp_inf>

00000dc0 <__addsf3x>:
     dc0:	e9 2f       	mov	r30, r25
     dc2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_split3>
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__addsf3+0xc>
     dc8:	ba 17       	cp	r27, r26
     dca:	62 07       	cpc	r22, r18
     dcc:	73 07       	cpc	r23, r19
     dce:	84 07       	cpc	r24, r20
     dd0:	95 07       	cpc	r25, r21
     dd2:	20 f0       	brcs	.+8      	; 0xddc <__addsf3x+0x1c>
     dd4:	79 f4       	brne	.+30     	; 0xdf4 <__addsf3x+0x34>
     dd6:	a6 f5       	brtc	.+104    	; 0xe40 <__addsf3x+0x80>
     dd8:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_zero>
     ddc:	0e f4       	brtc	.+2      	; 0xde0 <__addsf3x+0x20>
     dde:	e0 95       	com	r30
     de0:	0b 2e       	mov	r0, r27
     de2:	ba 2f       	mov	r27, r26
     de4:	a0 2d       	mov	r26, r0
     de6:	0b 01       	movw	r0, r22
     de8:	b9 01       	movw	r22, r18
     dea:	90 01       	movw	r18, r0
     dec:	0c 01       	movw	r0, r24
     dee:	ca 01       	movw	r24, r20
     df0:	a0 01       	movw	r20, r0
     df2:	11 24       	eor	r1, r1
     df4:	ff 27       	eor	r31, r31
     df6:	59 1b       	sub	r21, r25
     df8:	99 f0       	breq	.+38     	; 0xe20 <__addsf3x+0x60>
     dfa:	59 3f       	cpi	r21, 0xF9	; 249
     dfc:	50 f4       	brcc	.+20     	; 0xe12 <__addsf3x+0x52>
     dfe:	50 3e       	cpi	r21, 0xE0	; 224
     e00:	68 f1       	brcs	.+90     	; 0xe5c <__addsf3x+0x9c>
     e02:	1a 16       	cp	r1, r26
     e04:	f0 40       	sbci	r31, 0x00	; 0
     e06:	a2 2f       	mov	r26, r18
     e08:	23 2f       	mov	r18, r19
     e0a:	34 2f       	mov	r19, r20
     e0c:	44 27       	eor	r20, r20
     e0e:	58 5f       	subi	r21, 0xF8	; 248
     e10:	f3 cf       	rjmp	.-26     	; 0xdf8 <__addsf3x+0x38>
     e12:	46 95       	lsr	r20
     e14:	37 95       	ror	r19
     e16:	27 95       	ror	r18
     e18:	a7 95       	ror	r26
     e1a:	f0 40       	sbci	r31, 0x00	; 0
     e1c:	53 95       	inc	r21
     e1e:	c9 f7       	brne	.-14     	; 0xe12 <__addsf3x+0x52>
     e20:	7e f4       	brtc	.+30     	; 0xe40 <__addsf3x+0x80>
     e22:	1f 16       	cp	r1, r31
     e24:	ba 0b       	sbc	r27, r26
     e26:	62 0b       	sbc	r22, r18
     e28:	73 0b       	sbc	r23, r19
     e2a:	84 0b       	sbc	r24, r20
     e2c:	ba f0       	brmi	.+46     	; 0xe5c <__addsf3x+0x9c>
     e2e:	91 50       	subi	r25, 0x01	; 1
     e30:	a1 f0       	breq	.+40     	; 0xe5a <__addsf3x+0x9a>
     e32:	ff 0f       	add	r31, r31
     e34:	bb 1f       	adc	r27, r27
     e36:	66 1f       	adc	r22, r22
     e38:	77 1f       	adc	r23, r23
     e3a:	88 1f       	adc	r24, r24
     e3c:	c2 f7       	brpl	.-16     	; 0xe2e <__addsf3x+0x6e>
     e3e:	0e c0       	rjmp	.+28     	; 0xe5c <__addsf3x+0x9c>
     e40:	ba 0f       	add	r27, r26
     e42:	62 1f       	adc	r22, r18
     e44:	73 1f       	adc	r23, r19
     e46:	84 1f       	adc	r24, r20
     e48:	48 f4       	brcc	.+18     	; 0xe5c <__addsf3x+0x9c>
     e4a:	87 95       	ror	r24
     e4c:	77 95       	ror	r23
     e4e:	67 95       	ror	r22
     e50:	b7 95       	ror	r27
     e52:	f7 95       	ror	r31
     e54:	9e 3f       	cpi	r25, 0xFE	; 254
     e56:	08 f0       	brcs	.+2      	; 0xe5a <__addsf3x+0x9a>
     e58:	b0 cf       	rjmp	.-160    	; 0xdba <__addsf3+0x28>
     e5a:	93 95       	inc	r25
     e5c:	88 0f       	add	r24, r24
     e5e:	08 f0       	brcs	.+2      	; 0xe62 <__addsf3x+0xa2>
     e60:	99 27       	eor	r25, r25
     e62:	ee 0f       	add	r30, r30
     e64:	97 95       	ror	r25
     e66:	87 95       	ror	r24
     e68:	08 95       	ret
     e6a:	0e 94 de 08 	call	0x11bc	; 0x11bc <__fp_pscA>
     e6e:	60 f0       	brcs	.+24     	; 0xe88 <__addsf3x+0xc8>
     e70:	80 e8       	ldi	r24, 0x80	; 128
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	09 f4       	brne	.+2      	; 0xe78 <__addsf3x+0xb8>
     e76:	9e ef       	ldi	r25, 0xFE	; 254
     e78:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__fp_pscB>
     e7c:	28 f0       	brcs	.+10     	; 0xe88 <__addsf3x+0xc8>
     e7e:	40 e8       	ldi	r20, 0x80	; 128
     e80:	51 e0       	ldi	r21, 0x01	; 1
     e82:	71 f4       	brne	.+28     	; 0xea0 <atan2+0x10>
     e84:	5e ef       	ldi	r21, 0xFE	; 254
     e86:	0c c0       	rjmp	.+24     	; 0xea0 <atan2+0x10>
     e88:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__fp_nan>
     e8c:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_zero>

00000e90 <atan2>:
     e90:	e9 2f       	mov	r30, r25
     e92:	e0 78       	andi	r30, 0x80	; 128
     e94:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_split3>
     e98:	40 f3       	brcs	.-48     	; 0xe6a <__addsf3x+0xaa>
     e9a:	09 2e       	mov	r0, r25
     e9c:	05 2a       	or	r0, r21
     e9e:	b1 f3       	breq	.-20     	; 0xe8c <__addsf3x+0xcc>
     ea0:	26 17       	cp	r18, r22
     ea2:	37 07       	cpc	r19, r23
     ea4:	48 07       	cpc	r20, r24
     ea6:	59 07       	cpc	r21, r25
     ea8:	38 f0       	brcs	.+14     	; 0xeb8 <atan2+0x28>
     eaa:	0e 2e       	mov	r0, r30
     eac:	07 f8       	bld	r0, 7
     eae:	e0 25       	eor	r30, r0
     eb0:	69 f0       	breq	.+26     	; 0xecc <atan2+0x3c>
     eb2:	e0 25       	eor	r30, r0
     eb4:	e0 64       	ori	r30, 0x40	; 64
     eb6:	0a c0       	rjmp	.+20     	; 0xecc <atan2+0x3c>
     eb8:	ef 63       	ori	r30, 0x3F	; 63
     eba:	07 f8       	bld	r0, 7
     ebc:	00 94       	com	r0
     ebe:	07 fa       	bst	r0, 7
     ec0:	db 01       	movw	r26, r22
     ec2:	b9 01       	movw	r22, r18
     ec4:	9d 01       	movw	r18, r26
     ec6:	dc 01       	movw	r26, r24
     ec8:	ca 01       	movw	r24, r20
     eca:	ad 01       	movw	r20, r26
     ecc:	ef 93       	push	r30
     ece:	0e 94 c3 07 	call	0xf86	; 0xf86 <__divsf3_pse>
     ed2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__fp_round>
     ed6:	0e 94 78 07 	call	0xef0	; 0xef0 <atan>
     eda:	5f 91       	pop	r21
     edc:	55 23       	and	r21, r21
     ede:	39 f0       	breq	.+14     	; 0xeee <atan2+0x5e>
     ee0:	2b ed       	ldi	r18, 0xDB	; 219
     ee2:	3f e0       	ldi	r19, 0x0F	; 15
     ee4:	49 e4       	ldi	r20, 0x49	; 73
     ee6:	50 fd       	sbrc	r21, 0
     ee8:	49 ec       	ldi	r20, 0xC9	; 201
     eea:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__addsf3>
     eee:	08 95       	ret

00000ef0 <atan>:
     ef0:	df 93       	push	r29
     ef2:	dd 27       	eor	r29, r29
     ef4:	b9 2f       	mov	r27, r25
     ef6:	bf 77       	andi	r27, 0x7F	; 127
     ef8:	40 e8       	ldi	r20, 0x80	; 128
     efa:	5f e3       	ldi	r21, 0x3F	; 63
     efc:	16 16       	cp	r1, r22
     efe:	17 06       	cpc	r1, r23
     f00:	48 07       	cpc	r20, r24
     f02:	5b 07       	cpc	r21, r27
     f04:	18 f4       	brcc	.+6      	; 0xf0c <atan+0x1c>
     f06:	d9 2f       	mov	r29, r25
     f08:	0e 94 2b 09 	call	0x1256	; 0x1256 <inverse>
     f0c:	9f 93       	push	r25
     f0e:	8f 93       	push	r24
     f10:	7f 93       	push	r23
     f12:	6f 93       	push	r22
     f14:	0e 94 a0 09 	call	0x1340	; 0x1340 <square>
     f18:	ec e8       	ldi	r30, 0x8C	; 140
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	0e 94 b7 08 	call	0x116e	; 0x116e <__fp_powser>
     f20:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__fp_round>
     f24:	2f 91       	pop	r18
     f26:	3f 91       	pop	r19
     f28:	4f 91       	pop	r20
     f2a:	5f 91       	pop	r21
     f2c:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3x>
     f30:	dd 23       	and	r29, r29
     f32:	51 f0       	breq	.+20     	; 0xf48 <atan+0x58>
     f34:	90 58       	subi	r25, 0x80	; 128
     f36:	a2 ea       	ldi	r26, 0xA2	; 162
     f38:	2a ed       	ldi	r18, 0xDA	; 218
     f3a:	3f e0       	ldi	r19, 0x0F	; 15
     f3c:	49 ec       	ldi	r20, 0xC9	; 201
     f3e:	5f e3       	ldi	r21, 0x3F	; 63
     f40:	d0 78       	andi	r29, 0x80	; 128
     f42:	5d 27       	eor	r21, r29
     f44:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__addsf3x>
     f48:	df 91       	pop	r29
     f4a:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__fp_round>

00000f4e <__cmpsf2>:
     f4e:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fp_cmp>
     f52:	08 f4       	brcc	.+2      	; 0xf56 <__cmpsf2+0x8>
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	08 95       	ret

00000f58 <__divsf3>:
     f58:	0e 94 c0 07 	call	0xf80	; 0xf80 <__divsf3x>
     f5c:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__fp_round>
     f60:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__fp_pscB>
     f64:	58 f0       	brcs	.+22     	; 0xf7c <__divsf3+0x24>
     f66:	0e 94 de 08 	call	0x11bc	; 0x11bc <__fp_pscA>
     f6a:	40 f0       	brcs	.+16     	; 0xf7c <__divsf3+0x24>
     f6c:	29 f4       	brne	.+10     	; 0xf78 <__divsf3+0x20>
     f6e:	5f 3f       	cpi	r21, 0xFF	; 255
     f70:	29 f0       	breq	.+10     	; 0xf7c <__divsf3+0x24>
     f72:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__fp_inf>
     f76:	51 11       	cpse	r21, r1
     f78:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__fp_szero>
     f7c:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__fp_nan>

00000f80 <__divsf3x>:
     f80:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_split3>
     f84:	68 f3       	brcs	.-38     	; 0xf60 <__divsf3+0x8>

00000f86 <__divsf3_pse>:
     f86:	99 23       	and	r25, r25
     f88:	b1 f3       	breq	.-20     	; 0xf76 <__divsf3+0x1e>
     f8a:	55 23       	and	r21, r21
     f8c:	91 f3       	breq	.-28     	; 0xf72 <__divsf3+0x1a>
     f8e:	95 1b       	sub	r25, r21
     f90:	55 0b       	sbc	r21, r21
     f92:	bb 27       	eor	r27, r27
     f94:	aa 27       	eor	r26, r26
     f96:	62 17       	cp	r22, r18
     f98:	73 07       	cpc	r23, r19
     f9a:	84 07       	cpc	r24, r20
     f9c:	38 f0       	brcs	.+14     	; 0xfac <__divsf3_pse+0x26>
     f9e:	9f 5f       	subi	r25, 0xFF	; 255
     fa0:	5f 4f       	sbci	r21, 0xFF	; 255
     fa2:	22 0f       	add	r18, r18
     fa4:	33 1f       	adc	r19, r19
     fa6:	44 1f       	adc	r20, r20
     fa8:	aa 1f       	adc	r26, r26
     faa:	a9 f3       	breq	.-22     	; 0xf96 <__divsf3_pse+0x10>
     fac:	35 d0       	rcall	.+106    	; 0x1018 <__divsf3_pse+0x92>
     fae:	0e 2e       	mov	r0, r30
     fb0:	3a f0       	brmi	.+14     	; 0xfc0 <__divsf3_pse+0x3a>
     fb2:	e0 e8       	ldi	r30, 0x80	; 128
     fb4:	32 d0       	rcall	.+100    	; 0x101a <__divsf3_pse+0x94>
     fb6:	91 50       	subi	r25, 0x01	; 1
     fb8:	50 40       	sbci	r21, 0x00	; 0
     fba:	e6 95       	lsr	r30
     fbc:	00 1c       	adc	r0, r0
     fbe:	ca f7       	brpl	.-14     	; 0xfb2 <__divsf3_pse+0x2c>
     fc0:	2b d0       	rcall	.+86     	; 0x1018 <__divsf3_pse+0x92>
     fc2:	fe 2f       	mov	r31, r30
     fc4:	29 d0       	rcall	.+82     	; 0x1018 <__divsf3_pse+0x92>
     fc6:	66 0f       	add	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	88 1f       	adc	r24, r24
     fcc:	bb 1f       	adc	r27, r27
     fce:	26 17       	cp	r18, r22
     fd0:	37 07       	cpc	r19, r23
     fd2:	48 07       	cpc	r20, r24
     fd4:	ab 07       	cpc	r26, r27
     fd6:	b0 e8       	ldi	r27, 0x80	; 128
     fd8:	09 f0       	breq	.+2      	; 0xfdc <__divsf3_pse+0x56>
     fda:	bb 0b       	sbc	r27, r27
     fdc:	80 2d       	mov	r24, r0
     fde:	bf 01       	movw	r22, r30
     fe0:	ff 27       	eor	r31, r31
     fe2:	93 58       	subi	r25, 0x83	; 131
     fe4:	5f 4f       	sbci	r21, 0xFF	; 255
     fe6:	3a f0       	brmi	.+14     	; 0xff6 <__divsf3_pse+0x70>
     fe8:	9e 3f       	cpi	r25, 0xFE	; 254
     fea:	51 05       	cpc	r21, r1
     fec:	78 f0       	brcs	.+30     	; 0x100c <__divsf3_pse+0x86>
     fee:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__fp_inf>
     ff2:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__fp_szero>
     ff6:	5f 3f       	cpi	r21, 0xFF	; 255
     ff8:	e4 f3       	brlt	.-8      	; 0xff2 <__divsf3_pse+0x6c>
     ffa:	98 3e       	cpi	r25, 0xE8	; 232
     ffc:	d4 f3       	brlt	.-12     	; 0xff2 <__divsf3_pse+0x6c>
     ffe:	86 95       	lsr	r24
    1000:	77 95       	ror	r23
    1002:	67 95       	ror	r22
    1004:	b7 95       	ror	r27
    1006:	f7 95       	ror	r31
    1008:	9f 5f       	subi	r25, 0xFF	; 255
    100a:	c9 f7       	brne	.-14     	; 0xffe <__divsf3_pse+0x78>
    100c:	88 0f       	add	r24, r24
    100e:	91 1d       	adc	r25, r1
    1010:	96 95       	lsr	r25
    1012:	87 95       	ror	r24
    1014:	97 f9       	bld	r25, 7
    1016:	08 95       	ret
    1018:	e1 e0       	ldi	r30, 0x01	; 1
    101a:	66 0f       	add	r22, r22
    101c:	77 1f       	adc	r23, r23
    101e:	88 1f       	adc	r24, r24
    1020:	bb 1f       	adc	r27, r27
    1022:	62 17       	cp	r22, r18
    1024:	73 07       	cpc	r23, r19
    1026:	84 07       	cpc	r24, r20
    1028:	ba 07       	cpc	r27, r26
    102a:	20 f0       	brcs	.+8      	; 0x1034 <__divsf3_pse+0xae>
    102c:	62 1b       	sub	r22, r18
    102e:	73 0b       	sbc	r23, r19
    1030:	84 0b       	sbc	r24, r20
    1032:	ba 0b       	sbc	r27, r26
    1034:	ee 1f       	adc	r30, r30
    1036:	88 f7       	brcc	.-30     	; 0x101a <__divsf3_pse+0x94>
    1038:	e0 95       	com	r30
    103a:	08 95       	ret

0000103c <__fixunssfsi>:
    103c:	0e 94 05 09 	call	0x120a	; 0x120a <__fp_splitA>
    1040:	88 f0       	brcs	.+34     	; 0x1064 <__fixunssfsi+0x28>
    1042:	9f 57       	subi	r25, 0x7F	; 127
    1044:	98 f0       	brcs	.+38     	; 0x106c <__fixunssfsi+0x30>
    1046:	b9 2f       	mov	r27, r25
    1048:	99 27       	eor	r25, r25
    104a:	b7 51       	subi	r27, 0x17	; 23
    104c:	b0 f0       	brcs	.+44     	; 0x107a <__fixunssfsi+0x3e>
    104e:	e1 f0       	breq	.+56     	; 0x1088 <__fixunssfsi+0x4c>
    1050:	66 0f       	add	r22, r22
    1052:	77 1f       	adc	r23, r23
    1054:	88 1f       	adc	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	1a f0       	brmi	.+6      	; 0x1060 <__fixunssfsi+0x24>
    105a:	ba 95       	dec	r27
    105c:	c9 f7       	brne	.-14     	; 0x1050 <__fixunssfsi+0x14>
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <__fixunssfsi+0x4c>
    1060:	b1 30       	cpi	r27, 0x01	; 1
    1062:	91 f0       	breq	.+36     	; 0x1088 <__fixunssfsi+0x4c>
    1064:	0e 94 1f 09 	call	0x123e	; 0x123e <__fp_zero>
    1068:	b1 e0       	ldi	r27, 0x01	; 1
    106a:	08 95       	ret
    106c:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_zero>
    1070:	67 2f       	mov	r22, r23
    1072:	78 2f       	mov	r23, r24
    1074:	88 27       	eor	r24, r24
    1076:	b8 5f       	subi	r27, 0xF8	; 248
    1078:	39 f0       	breq	.+14     	; 0x1088 <__fixunssfsi+0x4c>
    107a:	b9 3f       	cpi	r27, 0xF9	; 249
    107c:	cc f3       	brlt	.-14     	; 0x1070 <__fixunssfsi+0x34>
    107e:	86 95       	lsr	r24
    1080:	77 95       	ror	r23
    1082:	67 95       	ror	r22
    1084:	b3 95       	inc	r27
    1086:	d9 f7       	brne	.-10     	; 0x107e <__fixunssfsi+0x42>
    1088:	3e f4       	brtc	.+14     	; 0x1098 <__fixunssfsi+0x5c>
    108a:	90 95       	com	r25
    108c:	80 95       	com	r24
    108e:	70 95       	com	r23
    1090:	61 95       	neg	r22
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	8f 4f       	sbci	r24, 0xFF	; 255
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	08 95       	ret

0000109a <__floatunsisf>:
    109a:	e8 94       	clt
    109c:	09 c0       	rjmp	.+18     	; 0x10b0 <__floatsisf+0x12>

0000109e <__floatsisf>:
    109e:	97 fb       	bst	r25, 7
    10a0:	3e f4       	brtc	.+14     	; 0x10b0 <__floatsisf+0x12>
    10a2:	90 95       	com	r25
    10a4:	80 95       	com	r24
    10a6:	70 95       	com	r23
    10a8:	61 95       	neg	r22
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	8f 4f       	sbci	r24, 0xFF	; 255
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	99 23       	and	r25, r25
    10b2:	a9 f0       	breq	.+42     	; 0x10de <__floatsisf+0x40>
    10b4:	f9 2f       	mov	r31, r25
    10b6:	96 e9       	ldi	r25, 0x96	; 150
    10b8:	bb 27       	eor	r27, r27
    10ba:	93 95       	inc	r25
    10bc:	f6 95       	lsr	r31
    10be:	87 95       	ror	r24
    10c0:	77 95       	ror	r23
    10c2:	67 95       	ror	r22
    10c4:	b7 95       	ror	r27
    10c6:	f1 11       	cpse	r31, r1
    10c8:	f8 cf       	rjmp	.-16     	; 0x10ba <__floatsisf+0x1c>
    10ca:	fa f4       	brpl	.+62     	; 0x110a <__stack+0xb>
    10cc:	bb 0f       	add	r27, r27
    10ce:	11 f4       	brne	.+4      	; 0x10d4 <__floatsisf+0x36>
    10d0:	60 ff       	sbrs	r22, 0
    10d2:	1b c0       	rjmp	.+54     	; 0x110a <__stack+0xb>
    10d4:	6f 5f       	subi	r22, 0xFF	; 255
    10d6:	7f 4f       	sbci	r23, 0xFF	; 255
    10d8:	8f 4f       	sbci	r24, 0xFF	; 255
    10da:	9f 4f       	sbci	r25, 0xFF	; 255
    10dc:	16 c0       	rjmp	.+44     	; 0x110a <__stack+0xb>
    10de:	88 23       	and	r24, r24
    10e0:	11 f0       	breq	.+4      	; 0x10e6 <__floatsisf+0x48>
    10e2:	96 e9       	ldi	r25, 0x96	; 150
    10e4:	11 c0       	rjmp	.+34     	; 0x1108 <__stack+0x9>
    10e6:	77 23       	and	r23, r23
    10e8:	21 f0       	breq	.+8      	; 0x10f2 <__floatsisf+0x54>
    10ea:	9e e8       	ldi	r25, 0x8E	; 142
    10ec:	87 2f       	mov	r24, r23
    10ee:	76 2f       	mov	r23, r22
    10f0:	05 c0       	rjmp	.+10     	; 0x10fc <__floatsisf+0x5e>
    10f2:	66 23       	and	r22, r22
    10f4:	71 f0       	breq	.+28     	; 0x1112 <__stack+0x13>
    10f6:	96 e8       	ldi	r25, 0x86	; 134
    10f8:	86 2f       	mov	r24, r22
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	2a f0       	brmi	.+10     	; 0x110a <__stack+0xb>
    1100:	9a 95       	dec	r25
    1102:	66 0f       	add	r22, r22
    1104:	77 1f       	adc	r23, r23
    1106:	88 1f       	adc	r24, r24
    1108:	da f7       	brpl	.-10     	; 0x1100 <__stack+0x1>
    110a:	88 0f       	add	r24, r24
    110c:	96 95       	lsr	r25
    110e:	87 95       	ror	r24
    1110:	97 f9       	bld	r25, 7
    1112:	08 95       	ret

00001114 <__fp_cmp>:
    1114:	99 0f       	add	r25, r25
    1116:	00 08       	sbc	r0, r0
    1118:	55 0f       	add	r21, r21
    111a:	aa 0b       	sbc	r26, r26
    111c:	e0 e8       	ldi	r30, 0x80	; 128
    111e:	fe ef       	ldi	r31, 0xFE	; 254
    1120:	16 16       	cp	r1, r22
    1122:	17 06       	cpc	r1, r23
    1124:	e8 07       	cpc	r30, r24
    1126:	f9 07       	cpc	r31, r25
    1128:	c0 f0       	brcs	.+48     	; 0x115a <__fp_cmp+0x46>
    112a:	12 16       	cp	r1, r18
    112c:	13 06       	cpc	r1, r19
    112e:	e4 07       	cpc	r30, r20
    1130:	f5 07       	cpc	r31, r21
    1132:	98 f0       	brcs	.+38     	; 0x115a <__fp_cmp+0x46>
    1134:	62 1b       	sub	r22, r18
    1136:	73 0b       	sbc	r23, r19
    1138:	84 0b       	sbc	r24, r20
    113a:	95 0b       	sbc	r25, r21
    113c:	39 f4       	brne	.+14     	; 0x114c <__fp_cmp+0x38>
    113e:	0a 26       	eor	r0, r26
    1140:	61 f0       	breq	.+24     	; 0x115a <__fp_cmp+0x46>
    1142:	23 2b       	or	r18, r19
    1144:	24 2b       	or	r18, r20
    1146:	25 2b       	or	r18, r21
    1148:	21 f4       	brne	.+8      	; 0x1152 <__fp_cmp+0x3e>
    114a:	08 95       	ret
    114c:	0a 26       	eor	r0, r26
    114e:	09 f4       	brne	.+2      	; 0x1152 <__fp_cmp+0x3e>
    1150:	a1 40       	sbci	r26, 0x01	; 1
    1152:	a6 95       	lsr	r26
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	81 1d       	adc	r24, r1
    1158:	81 1d       	adc	r24, r1
    115a:	08 95       	ret

0000115c <__fp_inf>:
    115c:	97 f9       	bld	r25, 7
    115e:	9f 67       	ori	r25, 0x7F	; 127
    1160:	80 e8       	ldi	r24, 0x80	; 128
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	08 95       	ret

00001168 <__fp_nan>:
    1168:	9f ef       	ldi	r25, 0xFF	; 255
    116a:	80 ec       	ldi	r24, 0xC0	; 192
    116c:	08 95       	ret

0000116e <__fp_powser>:
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	1f 93       	push	r17
    1174:	0f 93       	push	r16
    1176:	ff 92       	push	r15
    1178:	ef 92       	push	r14
    117a:	df 92       	push	r13
    117c:	7b 01       	movw	r14, r22
    117e:	8c 01       	movw	r16, r24
    1180:	68 94       	set
    1182:	06 c0       	rjmp	.+12     	; 0x1190 <__fp_powser+0x22>
    1184:	da 2e       	mov	r13, r26
    1186:	ef 01       	movw	r28, r30
    1188:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3x>
    118c:	fe 01       	movw	r30, r28
    118e:	e8 94       	clt
    1190:	a5 91       	lpm	r26, Z+
    1192:	25 91       	lpm	r18, Z+
    1194:	35 91       	lpm	r19, Z+
    1196:	45 91       	lpm	r20, Z+
    1198:	55 91       	lpm	r21, Z+
    119a:	a6 f3       	brts	.-24     	; 0x1184 <__fp_powser+0x16>
    119c:	ef 01       	movw	r28, r30
    119e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__addsf3x>
    11a2:	fe 01       	movw	r30, r28
    11a4:	97 01       	movw	r18, r14
    11a6:	a8 01       	movw	r20, r16
    11a8:	da 94       	dec	r13
    11aa:	69 f7       	brne	.-38     	; 0x1186 <__fp_powser+0x18>
    11ac:	df 90       	pop	r13
    11ae:	ef 90       	pop	r14
    11b0:	ff 90       	pop	r15
    11b2:	0f 91       	pop	r16
    11b4:	1f 91       	pop	r17
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <__fp_pscA>:
    11bc:	00 24       	eor	r0, r0
    11be:	0a 94       	dec	r0
    11c0:	16 16       	cp	r1, r22
    11c2:	17 06       	cpc	r1, r23
    11c4:	18 06       	cpc	r1, r24
    11c6:	09 06       	cpc	r0, r25
    11c8:	08 95       	ret

000011ca <__fp_pscB>:
    11ca:	00 24       	eor	r0, r0
    11cc:	0a 94       	dec	r0
    11ce:	12 16       	cp	r1, r18
    11d0:	13 06       	cpc	r1, r19
    11d2:	14 06       	cpc	r1, r20
    11d4:	05 06       	cpc	r0, r21
    11d6:	08 95       	ret

000011d8 <__fp_round>:
    11d8:	09 2e       	mov	r0, r25
    11da:	03 94       	inc	r0
    11dc:	00 0c       	add	r0, r0
    11de:	11 f4       	brne	.+4      	; 0x11e4 <__fp_round+0xc>
    11e0:	88 23       	and	r24, r24
    11e2:	52 f0       	brmi	.+20     	; 0x11f8 <__fp_round+0x20>
    11e4:	bb 0f       	add	r27, r27
    11e6:	40 f4       	brcc	.+16     	; 0x11f8 <__fp_round+0x20>
    11e8:	bf 2b       	or	r27, r31
    11ea:	11 f4       	brne	.+4      	; 0x11f0 <__fp_round+0x18>
    11ec:	60 ff       	sbrs	r22, 0
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <__fp_round+0x20>
    11f0:	6f 5f       	subi	r22, 0xFF	; 255
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	8f 4f       	sbci	r24, 0xFF	; 255
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	08 95       	ret

000011fa <__fp_split3>:
    11fa:	57 fd       	sbrc	r21, 7
    11fc:	90 58       	subi	r25, 0x80	; 128
    11fe:	44 0f       	add	r20, r20
    1200:	55 1f       	adc	r21, r21
    1202:	59 f0       	breq	.+22     	; 0x121a <__fp_splitA+0x10>
    1204:	5f 3f       	cpi	r21, 0xFF	; 255
    1206:	71 f0       	breq	.+28     	; 0x1224 <__fp_splitA+0x1a>
    1208:	47 95       	ror	r20

0000120a <__fp_splitA>:
    120a:	88 0f       	add	r24, r24
    120c:	97 fb       	bst	r25, 7
    120e:	99 1f       	adc	r25, r25
    1210:	61 f0       	breq	.+24     	; 0x122a <__fp_splitA+0x20>
    1212:	9f 3f       	cpi	r25, 0xFF	; 255
    1214:	79 f0       	breq	.+30     	; 0x1234 <__fp_splitA+0x2a>
    1216:	87 95       	ror	r24
    1218:	08 95       	ret
    121a:	12 16       	cp	r1, r18
    121c:	13 06       	cpc	r1, r19
    121e:	14 06       	cpc	r1, r20
    1220:	55 1f       	adc	r21, r21
    1222:	f2 cf       	rjmp	.-28     	; 0x1208 <__fp_split3+0xe>
    1224:	46 95       	lsr	r20
    1226:	f1 df       	rcall	.-30     	; 0x120a <__fp_splitA>
    1228:	08 c0       	rjmp	.+16     	; 0x123a <__fp_splitA+0x30>
    122a:	16 16       	cp	r1, r22
    122c:	17 06       	cpc	r1, r23
    122e:	18 06       	cpc	r1, r24
    1230:	99 1f       	adc	r25, r25
    1232:	f1 cf       	rjmp	.-30     	; 0x1216 <__fp_splitA+0xc>
    1234:	86 95       	lsr	r24
    1236:	71 05       	cpc	r23, r1
    1238:	61 05       	cpc	r22, r1
    123a:	08 94       	sec
    123c:	08 95       	ret

0000123e <__fp_zero>:
    123e:	e8 94       	clt

00001240 <__fp_szero>:
    1240:	bb 27       	eor	r27, r27
    1242:	66 27       	eor	r22, r22
    1244:	77 27       	eor	r23, r23
    1246:	cb 01       	movw	r24, r22
    1248:	97 f9       	bld	r25, 7
    124a:	08 95       	ret

0000124c <__gesf2>:
    124c:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fp_cmp>
    1250:	08 f4       	brcc	.+2      	; 0x1254 <__gesf2+0x8>
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	08 95       	ret

00001256 <inverse>:
    1256:	9b 01       	movw	r18, r22
    1258:	ac 01       	movw	r20, r24
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	80 e8       	ldi	r24, 0x80	; 128
    1260:	9f e3       	ldi	r25, 0x3F	; 63
    1262:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__divsf3>

00001266 <__mulsf3>:
    1266:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3x>
    126a:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__fp_round>
    126e:	0e 94 de 08 	call	0x11bc	; 0x11bc <__fp_pscA>
    1272:	38 f0       	brcs	.+14     	; 0x1282 <__mulsf3+0x1c>
    1274:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__fp_pscB>
    1278:	20 f0       	brcs	.+8      	; 0x1282 <__mulsf3+0x1c>
    127a:	95 23       	and	r25, r21
    127c:	11 f0       	breq	.+4      	; 0x1282 <__mulsf3+0x1c>
    127e:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__fp_inf>
    1282:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__fp_nan>
    1286:	11 24       	eor	r1, r1
    1288:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__fp_szero>

0000128c <__mulsf3x>:
    128c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_split3>
    1290:	70 f3       	brcs	.-36     	; 0x126e <__mulsf3+0x8>

00001292 <__mulsf3_pse>:
    1292:	95 9f       	mul	r25, r21
    1294:	c1 f3       	breq	.-16     	; 0x1286 <__mulsf3+0x20>
    1296:	95 0f       	add	r25, r21
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	55 1f       	adc	r21, r21
    129c:	62 9f       	mul	r22, r18
    129e:	f0 01       	movw	r30, r0
    12a0:	72 9f       	mul	r23, r18
    12a2:	bb 27       	eor	r27, r27
    12a4:	f0 0d       	add	r31, r0
    12a6:	b1 1d       	adc	r27, r1
    12a8:	63 9f       	mul	r22, r19
    12aa:	aa 27       	eor	r26, r26
    12ac:	f0 0d       	add	r31, r0
    12ae:	b1 1d       	adc	r27, r1
    12b0:	aa 1f       	adc	r26, r26
    12b2:	64 9f       	mul	r22, r20
    12b4:	66 27       	eor	r22, r22
    12b6:	b0 0d       	add	r27, r0
    12b8:	a1 1d       	adc	r26, r1
    12ba:	66 1f       	adc	r22, r22
    12bc:	82 9f       	mul	r24, r18
    12be:	22 27       	eor	r18, r18
    12c0:	b0 0d       	add	r27, r0
    12c2:	a1 1d       	adc	r26, r1
    12c4:	62 1f       	adc	r22, r18
    12c6:	73 9f       	mul	r23, r19
    12c8:	b0 0d       	add	r27, r0
    12ca:	a1 1d       	adc	r26, r1
    12cc:	62 1f       	adc	r22, r18
    12ce:	83 9f       	mul	r24, r19
    12d0:	a0 0d       	add	r26, r0
    12d2:	61 1d       	adc	r22, r1
    12d4:	22 1f       	adc	r18, r18
    12d6:	74 9f       	mul	r23, r20
    12d8:	33 27       	eor	r19, r19
    12da:	a0 0d       	add	r26, r0
    12dc:	61 1d       	adc	r22, r1
    12de:	23 1f       	adc	r18, r19
    12e0:	84 9f       	mul	r24, r20
    12e2:	60 0d       	add	r22, r0
    12e4:	21 1d       	adc	r18, r1
    12e6:	82 2f       	mov	r24, r18
    12e8:	76 2f       	mov	r23, r22
    12ea:	6a 2f       	mov	r22, r26
    12ec:	11 24       	eor	r1, r1
    12ee:	9f 57       	subi	r25, 0x7F	; 127
    12f0:	50 40       	sbci	r21, 0x00	; 0
    12f2:	9a f0       	brmi	.+38     	; 0x131a <__mulsf3_pse+0x88>
    12f4:	f1 f0       	breq	.+60     	; 0x1332 <__mulsf3_pse+0xa0>
    12f6:	88 23       	and	r24, r24
    12f8:	4a f0       	brmi	.+18     	; 0x130c <__mulsf3_pse+0x7a>
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	bb 1f       	adc	r27, r27
    1300:	66 1f       	adc	r22, r22
    1302:	77 1f       	adc	r23, r23
    1304:	88 1f       	adc	r24, r24
    1306:	91 50       	subi	r25, 0x01	; 1
    1308:	50 40       	sbci	r21, 0x00	; 0
    130a:	a9 f7       	brne	.-22     	; 0x12f6 <__mulsf3_pse+0x64>
    130c:	9e 3f       	cpi	r25, 0xFE	; 254
    130e:	51 05       	cpc	r21, r1
    1310:	80 f0       	brcs	.+32     	; 0x1332 <__mulsf3_pse+0xa0>
    1312:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__fp_inf>
    1316:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__fp_szero>
    131a:	5f 3f       	cpi	r21, 0xFF	; 255
    131c:	e4 f3       	brlt	.-8      	; 0x1316 <__mulsf3_pse+0x84>
    131e:	98 3e       	cpi	r25, 0xE8	; 232
    1320:	d4 f3       	brlt	.-12     	; 0x1316 <__mulsf3_pse+0x84>
    1322:	86 95       	lsr	r24
    1324:	77 95       	ror	r23
    1326:	67 95       	ror	r22
    1328:	b7 95       	ror	r27
    132a:	f7 95       	ror	r31
    132c:	e7 95       	ror	r30
    132e:	9f 5f       	subi	r25, 0xFF	; 255
    1330:	c1 f7       	brne	.-16     	; 0x1322 <__mulsf3_pse+0x90>
    1332:	fe 2b       	or	r31, r30
    1334:	88 0f       	add	r24, r24
    1336:	91 1d       	adc	r25, r1
    1338:	96 95       	lsr	r25
    133a:	87 95       	ror	r24
    133c:	97 f9       	bld	r25, 7
    133e:	08 95       	ret

00001340 <square>:
    1340:	9b 01       	movw	r18, r22
    1342:	ac 01       	movw	r20, r24
    1344:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__mulsf3>

00001348 <_exit>:
    1348:	f8 94       	cli

0000134a <__stop_program>:
    134a:	ff cf       	rjmp	.-2      	; 0x134a <__stop_program>
