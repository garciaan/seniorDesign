
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000e1c  00000eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800122  00800122  00000ed2  2**0
                  ALLOC
  3 .stab         00001488  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012cd  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003629  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000363c  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00003678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00003df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000452d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__ctors_end>
   4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
   8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
   c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  24:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  28:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  34:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  48:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  4c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  54:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  58:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  5c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  60:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  64:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  68:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  6c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  70:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  74:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  78:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  7c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  80:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  84:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  88:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>

0000008c <__trampolines_end>:
  8c:	00 40       	sbci	r16, 0x00	; 0
  8e:	7a 10       	cpse	r7, r10
  90:	f3 5a       	subi	r31, 0xA3	; 163
  92:	00 a0       	ldd	r0, Z+32	; 0x20
  94:	72 4e       	sbci	r23, 0xE2	; 226
  96:	18 09       	sbc	r17, r8
  98:	00 10       	cpse	r0, r0
  9a:	a5 d4       	rcall	.+2378   	; 0x9e6 <dtoa_prf+0x80>
  9c:	e8 00       	.word	0x00e8	; ????
  9e:	00 e8       	ldi	r16, 0x80	; 128
  a0:	76 48       	sbci	r23, 0x86	; 134
  a2:	17 00       	.word	0x0017	; ????
  a4:	00 e4       	ldi	r16, 0x40	; 64
  a6:	0b 54       	subi	r16, 0x4B	; 75
  a8:	02 00       	.word	0x0002	; ????
  aa:	00 ca       	rjmp	.-3072   	; 0xfffff4ac <__eeprom_end+0xff7ef4ac>
  ac:	9a 3b       	cpi	r25, 0xBA	; 186
  ae:	00 00       	nop
  b0:	00 e1       	ldi	r16, 0x10	; 16
  b2:	f5 05       	cpc	r31, r5
  b4:	00 00       	nop
  b6:	80 96       	adiw	r24, 0x20	; 32
  b8:	98 00       	.word	0x0098	; ????
  ba:	00 00       	nop
  bc:	40 42       	sbci	r20, 0x20	; 32
  be:	0f 00       	.word	0x000f	; ????
  c0:	00 00       	nop
  c2:	a0 86       	std	Z+8, r10	; 0x08
  c4:	01 00       	.word	0x0001	; ????
  c6:	00 00       	nop
  c8:	10 27       	eor	r17, r16
  ca:	00 00       	nop
  cc:	00 00       	nop
  ce:	e8 03       	fmulsu	r22, r16
  d0:	00 00       	nop
  d2:	00 00       	nop
  d4:	64 00       	.word	0x0064	; ????
  d6:	00 00       	nop
  d8:	00 00       	nop
  da:	0a 00       	.word	0x000a	; ????
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	01 00       	.word	0x0001	; ????
  e2:	00 00       	nop
  e4:	00 00       	nop
  e6:	2c 76       	andi	r18, 0x6C	; 108
  e8:	d8 88       	ldd	r13, Y+16	; 0x10
  ea:	dc 67       	ori	r29, 0x7C	; 124
  ec:	4f 08       	sbc	r4, r15
  ee:	23 df       	rcall	.-442    	; 0xffffff36 <__eeprom_end+0xff7eff36>
  f0:	c1 df       	rcall	.-126    	; 0x74 <__SREG__+0x35>
  f2:	ae 59       	subi	r26, 0x9E	; 158
  f4:	e1 b1       	in	r30, 0x01	; 1
  f6:	b7 96       	adiw	r30, 0x27	; 39
  f8:	e5 e3       	ldi	r30, 0x35	; 53
  fa:	e4 53       	subi	r30, 0x34	; 52
  fc:	c6 3a       	cpi	r28, 0xA6	; 166
  fe:	e6 51       	subi	r30, 0x16	; 22
 100:	99 76       	andi	r25, 0x69	; 105
 102:	96 e8       	ldi	r25, 0x86	; 134
 104:	e6 c2       	rjmp	.+1484   	; 0x6d2 <__divsf3_pse+0x58>
 106:	84 26       	eor	r8, r20
 108:	eb 89       	ldd	r30, Y+19	; 0x13
 10a:	8c 9b       	sbis	0x11, 4	; 17
 10c:	62 ed       	ldi	r22, 0xD2	; 210
 10e:	40 7c       	andi	r20, 0xC0	; 192
 110:	6f fc       	.word	0xfc6f	; ????
 112:	ef bc       	out	0x2f, r14	; 47
 114:	9c 9f       	mul	r25, r28
 116:	40 f2       	brcs	.-112    	; 0xa8 <__trampolines_end+0x1c>
 118:	ba a5       	ldd	r27, Y+42	; 0x2a
 11a:	6f a5       	ldd	r22, Y+47	; 0x2f
 11c:	f4 90       	lpm	r15, Z
 11e:	05 5a       	subi	r16, 0xA5	; 165
 120:	2a f7       	brpl	.-54     	; 0xec <__trampolines_end+0x60>
 122:	5c 93       	st	X, r21
 124:	6b 6c       	ori	r22, 0xCB	; 203
 126:	f9 67       	ori	r31, 0x79	; 121
 128:	6d c1       	rjmp	.+730    	; 0x404 <print_distance+0x10>
 12a:	1b fc       	.word	0xfc1b	; ????
 12c:	e0 e4       	ldi	r30, 0x40	; 64
 12e:	0d 47       	sbci	r16, 0x7D	; 125
 130:	fe f5       	brtc	.+126    	; 0x1b0 <__do_clear_bss+0x4>
 132:	20 e6       	ldi	r18, 0x60	; 96
 134:	b5 00       	.word	0x00b5	; ????
 136:	d0 ed       	ldi	r29, 0xD0	; 208
 138:	90 2e       	mov	r9, r16
 13a:	03 00       	.word	0x0003	; ????
 13c:	94 35       	cpi	r25, 0x54	; 84
 13e:	77 05       	cpc	r23, r7
 140:	00 80       	ld	r0, Z
 142:	84 1e       	adc	r8, r20
 144:	08 00       	.word	0x0008	; ????
 146:	00 20       	and	r0, r0
 148:	4e 0a       	sbc	r4, r30
 14a:	00 00       	nop
 14c:	00 c8       	rjmp	.-4096   	; 0xfffff14e <__eeprom_end+0xff7ef14e>
 14e:	0c 33       	cpi	r16, 0x3C	; 60
 150:	33 33       	cpi	r19, 0x33	; 51
 152:	33 0f       	add	r19, r19
 154:	98 6e       	ori	r25, 0xE8	; 232
 156:	12 83       	std	Z+2, r17	; 0x02
 158:	11 41       	sbci	r17, 0x11	; 17
 15a:	ef 8d       	ldd	r30, Y+31	; 0x1f
 15c:	21 14       	cp	r2, r1
 15e:	89 3b       	cpi	r24, 0xB9	; 185
 160:	e6 55       	subi	r30, 0x56	; 86
 162:	16 cf       	rjmp	.-468    	; 0xffffff90 <__eeprom_end+0xff7eff90>
 164:	fe e6       	ldi	r31, 0x6E	; 110
 166:	db 18       	sub	r13, r11
 168:	d1 84       	ldd	r13, Z+9	; 0x09
 16a:	4b 38       	cpi	r20, 0x8B	; 139
 16c:	1b f7       	brvc	.-58     	; 0x134 <__trampolines_end+0xa8>
 16e:	7c 1d       	adc	r23, r12
 170:	90 1d       	adc	r25, r0
 172:	a4 bb       	out	0x14, r26	; 20
 174:	e4 24       	eor	r14, r4
 176:	20 32       	cpi	r18, 0x20	; 32
 178:	84 72       	andi	r24, 0x24	; 36
 17a:	5e 22       	and	r5, r30
 17c:	81 00       	.word	0x0081	; ????
 17e:	c9 f1       	breq	.+114    	; 0x1f2 <blink+0x2a>
 180:	24 ec       	ldi	r18, 0xC4	; 196
 182:	a1 e5       	ldi	r26, 0x51	; 81
 184:	3d 27       	eor	r19, r29

00000186 <__ctors_end>:
 186:	11 24       	eor	r1, r1
 188:	1f be       	out	0x3f, r1	; 63
 18a:	cf ef       	ldi	r28, 0xFF	; 255
 18c:	d0 e1       	ldi	r29, 0x10	; 16
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_copy_data>:
 192:	11 e0       	ldi	r17, 0x01	; 1
 194:	a0 e0       	ldi	r26, 0x00	; 0
 196:	b1 e0       	ldi	r27, 0x01	; 1
 198:	ec e1       	ldi	r30, 0x1C	; 28
 19a:	fe e0       	ldi	r31, 0x0E	; 14
 19c:	00 e0       	ldi	r16, 0x00	; 0
 19e:	0b bf       	out	0x3b, r16	; 59
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x14>
 1a2:	07 90       	elpm	r0, Z+
 1a4:	0d 92       	st	X+, r0
 1a6:	a2 32       	cpi	r26, 0x22	; 34
 1a8:	b1 07       	cpc	r27, r17
 1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0x10>

000001ac <__do_clear_bss>:
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	a2 e2       	ldi	r26, 0x22	; 34
 1b0:	b1 e0       	ldi	r27, 0x01	; 1
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
 1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
 1b6:	a4 32       	cpi	r26, 0x24	; 36
 1b8:	b2 07       	cpc	r27, r18
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
 1bc:	0e 94 c4 02 	call	0x588	; 0x588 <main>
 1c0:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <_exit>

000001c4 <__bad_interrupt>:
 1c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c8 <blink>:

    return 0;
}


void blink(int led, int speed){
 1c8:	65 36       	cpi	r22, 0x65	; 101
 1ca:	71 05       	cpc	r23, r1
 1cc:	14 f0       	brlt	.+4      	; 0x1d2 <blink+0xa>
 1ce:	64 e6       	ldi	r22, 0x64	; 100
 1d0:	70 e0       	ldi	r23, 0x00	; 0
    }
    if (speed > 100){
        speed = 100;
    }
    int i;
    PORTB |= (1 << led);
 1d2:	98 b3       	in	r25, 0x18	; 24
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <blink+0x14>
 1da:	44 0f       	add	r20, r20
 1dc:	8a 95       	dec	r24
 1de:	ea f7       	brpl	.-6      	; 0x1da <blink+0x12>
 1e0:	89 2f       	mov	r24, r25
 1e2:	84 2b       	or	r24, r20
 1e4:	88 bb       	out	0x18, r24	; 24
    for (i = 0; i < (121-speed); ++i){
 1e6:	77 fd       	sbrc	r23, 7
 1e8:	15 c0       	rjmp	.+42     	; 0x214 <blink+0x4c>
 1ea:	29 e7       	ldi	r18, 0x79	; 121
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	26 1b       	sub	r18, r22
 1f0:	37 0b       	sbc	r19, r23
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	ef e9       	ldi	r30, 0x9F	; 159
 1f8:	ff e0       	ldi	r31, 0x0F	; 15
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <blink+0x32>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <blink+0x38>
 200:	00 00       	nop
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	82 17       	cp	r24, r18
 206:	93 07       	cpc	r25, r19
 208:	b1 f7       	brne	.-20     	; 0x1f6 <blink+0x2e>
        _delay_ms(1);
    }
    PORTB &= ~(1 << led);
 20a:	88 b3       	in	r24, 0x18	; 24
 20c:	40 95       	com	r20
 20e:	48 23       	and	r20, r24
 210:	48 bb       	out	0x18, r20	; 24
 212:	08 95       	ret
    if (speed > 100){
        speed = 100;
    }
    int i;
    PORTB |= (1 << led);
    for (i = 0; i < (121-speed); ++i){
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	e8 cf       	rjmp	.-48     	; 0x1ea <blink+0x22>

0000021a <trigger>:
    string2lcd(str);
    return distance;
}

void trigger(unsigned int pin){
    PORTE |= pin;
 21a:	93 b1       	in	r25, 0x03	; 3
 21c:	98 2b       	or	r25, r24
 21e:	93 b9       	out	0x03, r25	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	90 e5       	ldi	r25, 0x50	; 80
 222:	9a 95       	dec	r25
 224:	f1 f7       	brne	.-4      	; 0x222 <trigger+0x8>
    _delay_us(15);
    PORTE &= ~pin;
 226:	93 b1       	in	r25, 0x03	; 3
 228:	80 95       	com	r24
 22a:	89 23       	and	r24, r25
 22c:	83 b9       	out	0x03, r24	; 3
 22e:	08 95       	ret

00000230 <get_distance>:
    string2lcd(str);
    return distance;
}

void trigger(unsigned int pin){
    PORTE |= pin;
 230:	23 b1       	in	r18, 0x03	; 3
 232:	28 2b       	or	r18, r24
 234:	23 b9       	out	0x03, r18	; 3
 236:	20 e5       	ldi	r18, 0x50	; 80
 238:	2a 95       	dec	r18
 23a:	f1 f7       	brne	.-4      	; 0x238 <get_distance+0x8>
    _delay_us(15);
    PORTE &= ~pin;
 23c:	33 b1       	in	r19, 0x03	; 3
 23e:	28 2f       	mov	r18, r24
 240:	20 95       	com	r18
 242:	23 23       	and	r18, r19
 244:	23 b9       	out	0x03, r18	; 3
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25

double get_distance(unsigned int pin){
    double distance = 0;
    int count = 0;
    trigger(pin);
    while ((PINE & (pin << 1)) == 0); //while pinc port 1 is low, aka wait for echo to raise
 24a:	21 b1       	in	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	28 23       	and	r18, r24
 250:	39 23       	and	r19, r25
 252:	23 2b       	or	r18, r19
 254:	d1 f3       	breq	.-12     	; 0x24a <get_distance+0x1a>
    while (1){
        if ((PINE & (pin << 1)) != (pin << 1)){ //wait for pinc port 1 to go back to low
 256:	21 b1       	in	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	28 23       	and	r18, r24
 25c:	39 23       	and	r19, r25
 25e:	82 17       	cp	r24, r18
 260:	93 07       	cpc	r25, r19
 262:	69 f5       	brne	.+90     	; 0x2be <get_distance+0x8e>
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	03 c0       	rjmp	.+6      	; 0x270 <get_distance+0x40>
            break;
        }
        if (count == 255){
 26a:	6f 3f       	cpi	r22, 0xFF	; 255
 26c:	71 05       	cpc	r23, r1
 26e:	11 f1       	breq	.+68     	; 0x2b4 <get_distance+0x84>
 270:	e7 ec       	ldi	r30, 0xC7	; 199
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <get_distance+0x44>
 278:	00 c0       	rjmp	.+0      	; 0x27a <get_distance+0x4a>
 27a:	00 00       	nop
            break;
        }
        _delay_us(50);
        ++count;
 27c:	6f 5f       	subi	r22, 0xFF	; 255
 27e:	7f 4f       	sbci	r23, 0xFF	; 255
    double distance = 0;
    int count = 0;
    trigger(pin);
    while ((PINE & (pin << 1)) == 0); //while pinc port 1 is low, aka wait for echo to raise
    while (1){
        if ((PINE & (pin << 1)) != (pin << 1)){ //wait for pinc port 1 to go back to low
 280:	21 b1       	in	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	28 23       	and	r18, r24
 286:	39 23       	and	r19, r25
 288:	82 17       	cp	r24, r18
 28a:	93 07       	cpc	r25, r19
 28c:	71 f3       	breq	.-36     	; 0x26a <get_distance+0x3a>
 28e:	07 2e       	mov	r0, r23
 290:	00 0c       	add	r0, r0
 292:	88 0b       	sbc	r24, r24
 294:	99 0b       	sbc	r25, r25
 296:	0e 94 9a 03 	call	0x734	; 0x734 <__floatsisf>
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	40 e2       	ldi	r20, 0x20	; 32
 2a0:	52 e4       	ldi	r21, 0x42	; 66
 2a2:	0e 94 26 04 	call	0x84c	; 0x84c <__mulsf3>
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	48 e6       	ldi	r20, 0x68	; 104
 2ac:	52 e4       	ldi	r21, 0x42	; 66
 2ae:	0e 94 26 03 	call	0x64c	; 0x64c <__divsf3>
 2b2:	08 95       	ret
 2b4:	61 eb       	ldi	r22, 0xB1	; 177
 2b6:	7c ed       	ldi	r23, 0xDC	; 220
 2b8:	8f e2       	ldi	r24, 0x2F	; 47
 2ba:	93 e4       	ldi	r25, 0x43	; 67
    distance = (double)count * 40;
    distance /= 58;


    return distance;
}
 2bc:	08 95       	ret
    double distance = 0;
    int count = 0;
    trigger(pin);
    while ((PINE & (pin << 1)) == 0); //while pinc port 1 is low, aka wait for echo to raise
    while (1){
        if ((PINE & (pin << 1)) != (pin << 1)){ //wait for pinc port 1 to go back to low
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	cb 01       	movw	r24, r22
 2c4:	08 95       	ret

000002c6 <USART_Init>:
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
 2c6:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
 2ca:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 2ce:	88 e1       	ldi	r24, 0x18	; 24
 2d0:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
 2d4:	8c e0       	ldi	r24, 0x0C	; 12
 2d6:	80 93 9d 00 	sts	0x009D, r24
 2da:	08 95       	ret

000002dc <USART_Transmit>:
}
void USART_Transmit( unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 2dc:	90 91 9b 00 	lds	r25, 0x009B
 2e0:	95 ff       	sbrs	r25, 5
 2e2:	fc cf       	rjmp	.-8      	; 0x2dc <USART_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 2e4:	80 93 9c 00 	sts	0x009C, r24
 2e8:	08 95       	ret

000002ea <USART_Receive>:
}

unsigned char USART_Receive(void){
    /* Wait for data to be received */ 
    while ( !(UCSR1A & (1<<RXC1)) );
 2ea:	80 91 9b 00 	lds	r24, 0x009B
 2ee:	87 ff       	sbrs	r24, 7
 2f0:	fc cf       	rjmp	.-8      	; 0x2ea <USART_Receive>
    /* Get and return received data from buffer */ 
    return UDR1;
 2f2:	80 91 9c 00 	lds	r24, 0x009C
}
 2f6:	08 95       	ret

000002f8 <strobe_lcd>:
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 2f8:	e2 e6       	ldi	r30, 0x62	; 98
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	88 60       	ori	r24, 0x08	; 8
 300:	80 83       	st	Z, r24
    PORTF &= ~0x08;
 302:	80 81       	ld	r24, Z
 304:	87 7f       	andi	r24, 0xF7	; 247
 306:	80 83       	st	Z, r24
 308:	08 95       	ret

0000030a <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 30a:	77 9b       	sbis	0x0e, 7	; 14
 30c:	fe cf       	rjmp	.-4      	; 0x30a <clear_display>
    SPDR = 0x00;    //command, not data
 30e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 310:	77 9b       	sbis	0x0e, 7	; 14
 312:	fe cf       	rjmp	.-4      	; 0x310 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 318:	77 9b       	sbis	0x0e, 7	; 14
 31a:	fe cf       	rjmp	.-4      	; 0x318 <clear_display+0xe>
    /* Get and return received data from buffer */ 
    return UDR1;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 31c:	80 91 62 00 	lds	r24, 0x0062
 320:	88 60       	ori	r24, 0x08	; 8
 322:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 326:	80 91 62 00 	lds	r24, 0x0062
 32a:	87 7f       	andi	r24, 0xF7	; 247
 32c:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	98 e1       	ldi	r25, 0x18	; 24
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <clear_display+0x2a>
 338:	00 c0       	rjmp	.+0      	; 0x33a <clear_display+0x30>
 33a:	00 00       	nop
 33c:	08 95       	ret

0000033e <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(1.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 33e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 340:	77 9b       	sbis	0x0e, 7	; 14
 342:	fe cf       	rjmp	.-4      	; 0x340 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
 344:	80 ec       	ldi	r24, 0xC0	; 192
 346:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 348:	77 9b       	sbis	0x0e, 7	; 14
 34a:	fe cf       	rjmp	.-4      	; 0x348 <home_line2+0xa>
    /* Get and return received data from buffer */ 
    return UDR1;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 34c:	80 91 62 00 	lds	r24, 0x0062
 350:	88 60       	ori	r24, 0x08	; 8
 352:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 356:	80 91 62 00 	lds	r24, 0x0062
 35a:	87 7f       	andi	r24, 0xF7	; 247
 35c:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 360:	85 ec       	ldi	r24, 0xC5	; 197
 362:	8a 95       	dec	r24
 364:	f1 f7       	brne	.-4      	; 0x362 <home_line2+0x24>
 366:	00 00       	nop
 368:	08 95       	ret

0000036a <char2lcd>:

//sends a char to the LCD
void char2lcd(char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 36e:	77 9b       	sbis	0x0e, 7	; 14
 370:	fe cf       	rjmp	.-4      	; 0x36e <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
 372:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 374:	77 9b       	sbis	0x0e, 7	; 14
 376:	fe cf       	rjmp	.-4      	; 0x374 <char2lcd+0xa>
    /* Get and return received data from buffer */ 
    return UDR1;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 378:	80 91 62 00 	lds	r24, 0x0062
 37c:	88 60       	ori	r24, 0x08	; 8
 37e:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 382:	80 91 62 00 	lds	r24, 0x0062
 386:	87 7f       	andi	r24, 0xF7	; 247
 388:	80 93 62 00 	sts	0x0062, r24
 38c:	85 ec       	ldi	r24, 0xC5	; 197
 38e:	8a 95       	dec	r24
 390:	f1 f7       	brne	.-4      	; 0x38e <char2lcd+0x24>
 392:	00 00       	nop
 394:	08 95       	ret

00000396 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	fc 01       	movw	r30, r24
 39c:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
 3a2:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3a4:	77 9b       	sbis	0x0e, 7	; 14
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
 3a8:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3aa:	77 9b       	sbis	0x0e, 7	; 14
 3ac:	fe cf       	rjmp	.-4      	; 0x3aa <string2lcd+0x14>
        SPDR = lcd_str[count]; 
 3ae:	8d 91       	ld	r24, X+
 3b0:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3b2:	77 9b       	sbis	0x0e, 7	; 14
 3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <string2lcd+0x1c>
    /* Get and return received data from buffer */ 
    return UDR1;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 3b6:	90 91 62 00 	lds	r25, 0x0062
 3ba:	98 60       	ori	r25, 0x08	; 8
 3bc:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
 3c0:	90 91 62 00 	lds	r25, 0x0062
 3c4:	97 7f       	andi	r25, 0xF7	; 247
 3c6:	90 93 62 00 	sts	0x0062, r25
 3ca:	85 ec       	ldi	r24, 0xC5	; 197
 3cc:	8a 95       	dec	r24
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <string2lcd+0x36>
 3d0:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
 3d2:	4f 5f       	subi	r20, 0xFF	; 255
 3d4:	5f 4f       	sbci	r21, 0xFF	; 255
 3d6:	ef 01       	movw	r28, r30
 3d8:	09 90       	ld	r0, Y+
 3da:	00 20       	and	r0, r0
 3dc:	e9 f7       	brne	.-6      	; 0x3d8 <string2lcd+0x42>
 3de:	9e 01       	movw	r18, r28
 3e0:	2e 1b       	sub	r18, r30
 3e2:	3f 0b       	sbc	r19, r31
 3e4:	22 50       	subi	r18, 0x02	; 2
 3e6:	31 09       	sbc	r19, r1
 3e8:	24 17       	cp	r18, r20
 3ea:	35 07       	cpc	r19, r21
 3ec:	d8 f6       	brcc	.-74     	; 0x3a4 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <print_distance>:
        _delay_ms(1);
    }
    PORTB &= ~(1 << led);

}
double print_distance(unsigned int pin){
 3f4:	cf 92       	push	r12
 3f6:	df 92       	push	r13
 3f8:	ef 92       	push	r14
 3fa:	ff 92       	push	r15
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	60 97       	sbiw	r28, 0x10	; 16
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	de bf       	out	0x3e, r29	; 62
 410:	0f be       	out	0x3f, r0	; 63
 412:	cd bf       	out	0x3d, r28	; 61
    char str[16];
    double distance = 0;
    distance = get_distance(pin);
 414:	0e 94 18 01 	call	0x230	; 0x230 <get_distance>
 418:	6b 01       	movw	r12, r22
 41a:	7c 01       	movw	r14, r24
    dtostrf(distance,1,6,str);
 41c:	8e 01       	movw	r16, r28
 41e:	0f 5f       	subi	r16, 0xFF	; 255
 420:	1f 4f       	sbci	r17, 0xFF	; 255
 422:	26 e0       	ldi	r18, 0x06	; 6
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	0e 94 93 04 	call	0x926	; 0x926 <dtostrf>
    string2lcd(str);
 42a:	c8 01       	movw	r24, r16
 42c:	0e 94 cb 01 	call	0x396	; 0x396 <string2lcd>
    return distance;
}
 430:	c7 01       	movw	r24, r14
 432:	b6 01       	movw	r22, r12
 434:	60 96       	adiw	r28, 0x10	; 16
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	f8 94       	cli
 43a:	de bf       	out	0x3e, r29	; 62
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	cd bf       	out	0x3d, r28	; 61
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	08 95       	ret

00000452 <spi_init>:
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 452:	e1 e6       	ldi	r30, 0x61	; 97
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	88 60       	ori	r24, 0x08	; 8
 45a:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
 45c:	88 b3       	in	r24, 0x18	; 24
 45e:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 460:	87 b3       	in	r24, 0x17	; 23
 462:	87 60       	ori	r24, 0x07	; 7
 464:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 466:	80 e5       	ldi	r24, 0x50	; 80
 468:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	8e b9       	out	0x0e, r24	; 14
 46e:	08 95       	ret

00000470 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 470:	8f e5       	ldi	r24, 0x5F	; 95
 472:	9a ee       	ldi	r25, 0xEA	; 234
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <lcd_init+0x4>
 478:	00 c0       	rjmp	.+0      	; 0x47a <lcd_init+0xa>
 47a:	00 00       	nop
 47c:	23 e0       	ldi	r18, 0x03	; 3
 47e:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
 480:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
 482:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 484:	77 9b       	sbis	0x0e, 7	; 14
 486:	fe cf       	rjmp	.-4      	; 0x484 <lcd_init+0x14>
        SPDR = 0x30;
 488:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 48a:	77 9b       	sbis	0x0e, 7	; 14
 48c:	fe cf       	rjmp	.-4      	; 0x48a <lcd_init+0x1a>
    /* Get and return received data from buffer */ 
    return UDR1;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 48e:	80 91 62 00 	lds	r24, 0x0062
 492:	88 60       	ori	r24, 0x08	; 8
 494:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 498:	80 91 62 00 	lds	r24, 0x0062
 49c:	87 7f       	andi	r24, 0xF7	; 247
 49e:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a2:	85 ec       	ldi	r24, 0xC5	; 197
 4a4:	8a 95       	dec	r24
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <lcd_init+0x34>
 4a8:	00 00       	nop
 4aa:	21 50       	subi	r18, 0x01	; 1
 4ac:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
 4ae:	49 f7       	brne	.-46     	; 0x482 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
 4b0:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 4b2:	77 9b       	sbis	0x0e, 7	; 14
 4b4:	fe cf       	rjmp	.-4      	; 0x4b2 <lcd_init+0x42>
    SPDR = 0x38;
 4b6:	88 e3       	ldi	r24, 0x38	; 56
 4b8:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 4ba:	77 9b       	sbis	0x0e, 7	; 14
 4bc:	fe cf       	rjmp	.-4      	; 0x4ba <lcd_init+0x4a>
    /* Get and return received data from buffer */ 
    return UDR1;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 4be:	80 91 62 00 	lds	r24, 0x0062
 4c2:	88 60       	ori	r24, 0x08	; 8
 4c4:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 4c8:	80 91 62 00 	lds	r24, 0x0062
 4cc:	87 7f       	andi	r24, 0xF7	; 247
 4ce:	80 93 62 00 	sts	0x0062, r24
 4d2:	95 ec       	ldi	r25, 0xC5	; 197
 4d4:	9a 95       	dec	r25
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <lcd_init+0x64>
 4d8:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 4da:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 4dc:	77 9b       	sbis	0x0e, 7	; 14
 4de:	fe cf       	rjmp	.-4      	; 0x4dc <lcd_init+0x6c>
    SPDR = 0x08;
 4e0:	88 e0       	ldi	r24, 0x08	; 8
 4e2:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 4e4:	77 9b       	sbis	0x0e, 7	; 14
 4e6:	fe cf       	rjmp	.-4      	; 0x4e4 <lcd_init+0x74>
    /* Get and return received data from buffer */ 
    return UDR1;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 4e8:	80 91 62 00 	lds	r24, 0x0062
 4ec:	88 60       	ori	r24, 0x08	; 8
 4ee:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 4f2:	80 91 62 00 	lds	r24, 0x0062
 4f6:	87 7f       	andi	r24, 0xF7	; 247
 4f8:	80 93 62 00 	sts	0x0062, r24
 4fc:	85 ec       	ldi	r24, 0xC5	; 197
 4fe:	8a 95       	dec	r24
 500:	f1 f7       	brne	.-4      	; 0x4fe <lcd_init+0x8e>
 502:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 504:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 506:	77 9b       	sbis	0x0e, 7	; 14
 508:	fe cf       	rjmp	.-4      	; 0x506 <lcd_init+0x96>
    SPDR = 0x01;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 50e:	77 9b       	sbis	0x0e, 7	; 14
 510:	fe cf       	rjmp	.-4      	; 0x50e <lcd_init+0x9e>
    /* Get and return received data from buffer */ 
    return UDR1;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 512:	80 91 62 00 	lds	r24, 0x0062
 516:	88 60       	ori	r24, 0x08	; 8
 518:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 51c:	80 91 62 00 	lds	r24, 0x0062
 520:	87 7f       	andi	r24, 0xF7	; 247
 522:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 526:	8f ef       	ldi	r24, 0xFF	; 255
 528:	98 e1       	ldi	r25, 0x18	; 24
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <lcd_init+0xba>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <lcd_init+0xc0>
 530:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
 532:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 534:	77 9b       	sbis	0x0e, 7	; 14
 536:	fe cf       	rjmp	.-4      	; 0x534 <lcd_init+0xc4>
    SPDR = 0x06;
 538:	86 e0       	ldi	r24, 0x06	; 6
 53a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 53c:	77 9b       	sbis	0x0e, 7	; 14
 53e:	fe cf       	rjmp	.-4      	; 0x53c <lcd_init+0xcc>
    /* Get and return received data from buffer */ 
    return UDR1;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 540:	80 91 62 00 	lds	r24, 0x0062
 544:	88 60       	ori	r24, 0x08	; 8
 546:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 54a:	80 91 62 00 	lds	r24, 0x0062
 54e:	87 7f       	andi	r24, 0xF7	; 247
 550:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 554:	95 ec       	ldi	r25, 0xC5	; 197
 556:	9a 95       	dec	r25
 558:	f1 f7       	brne	.-4      	; 0x556 <lcd_init+0xe6>
 55a:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 55c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 55e:	77 9b       	sbis	0x0e, 7	; 14
 560:	fe cf       	rjmp	.-4      	; 0x55e <lcd_init+0xee>
    SPDR = 0x0E;
 562:	8e e0       	ldi	r24, 0x0E	; 14
 564:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 566:	77 9b       	sbis	0x0e, 7	; 14
 568:	fe cf       	rjmp	.-4      	; 0x566 <lcd_init+0xf6>
    /* Get and return received data from buffer */ 
    return UDR1;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 56a:	80 91 62 00 	lds	r24, 0x0062
 56e:	88 60       	ori	r24, 0x08	; 8
 570:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 574:	80 91 62 00 	lds	r24, 0x0062
 578:	87 7f       	andi	r24, 0xF7	; 247
 57a:	80 93 62 00 	sts	0x0062, r24
 57e:	85 ec       	ldi	r24, 0xC5	; 197
 580:	8a 95       	dec	r24
 582:	f1 f7       	brne	.-4      	; 0x580 <lcd_init+0x110>
 584:	00 00       	nop
 586:	08 95       	ret

00000588 <main>:


uint8_t temp, read_byte;


int main(void){
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	60 97       	sbiw	r28, 0x10	; 16
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	f8 94       	cli
 596:	de bf       	out	0x3e, r29	; 62
 598:	0f be       	out	0x3f, r0	; 63
 59a:	cd bf       	out	0x3d, r28	; 61

    char buffer[16] = "Hello World";
 59c:	8c e0       	ldi	r24, 0x0C	; 12
 59e:	e0 e0       	ldi	r30, 0x00	; 0
 5a0:	f1 e0       	ldi	r31, 0x01	; 1
 5a2:	de 01       	movw	r26, r28
 5a4:	11 96       	adiw	r26, 0x01	; 1
 5a6:	01 90       	ld	r0, Z+
 5a8:	0d 92       	st	X+, r0
 5aa:	8a 95       	dec	r24
 5ac:	e1 f7       	brne	.-8      	; 0x5a6 <main+0x1e>
 5ae:	fe 01       	movw	r30, r28
 5b0:	3d 96       	adiw	r30, 0x0d	; 13
 5b2:	84 e0       	ldi	r24, 0x04	; 4
 5b4:	df 01       	movw	r26, r30
 5b6:	1d 92       	st	X+, r1
 5b8:	8a 95       	dec	r24
 5ba:	e9 f7       	brne	.-6      	; 0x5b6 <main+0x2e>
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 5bc:	80 91 61 00 	lds	r24, 0x0061
 5c0:	88 60       	ori	r24, 0x08	; 8
 5c2:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initalization for SPI
 5c6:	88 b3       	in	r24, 0x18	; 24
 5c8:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 5ca:	87 b3       	in	r24, 0x17	; 23
 5cc:	87 60       	ori	r24, 0x07	; 7
 5ce:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 5d0:	80 e5       	ldi	r24, 0x50	; 80
 5d2:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	8e b9       	out	0x0e, r24	; 14
int main(void){

    char buffer[16] = "Hello World";
    char temp;
    spi_init();
    lcd_init();
 5d8:	0e 94 38 02 	call	0x470	; 0x470 <lcd_init>

    clear_display();
 5dc:	0e 94 85 01 	call	0x30a	; 0x30a <clear_display>
    string2lcd("Starting Program");
 5e0:	80 e1       	ldi	r24, 0x10	; 16
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	0e 94 cb 01 	call	0x396	; 0x396 <string2lcd>
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
 5e8:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = (unsigned char)ubrr;
 5ec:	87 e6       	ldi	r24, 0x67	; 103
 5ee:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 5f2:	88 e1       	ldi	r24, 0x18	; 24
 5f4:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
 5f8:	8c e0       	ldi	r24, 0x0C	; 12
 5fa:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5fe:	bf ef       	ldi	r27, 0xFF	; 255
 600:	29 e6       	ldi	r18, 0x69	; 105
 602:	88 e1       	ldi	r24, 0x18	; 24
 604:	b1 50       	subi	r27, 0x01	; 1
 606:	20 40       	sbci	r18, 0x00	; 0
 608:	80 40       	sbci	r24, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <main+0x7c>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <main+0x86>
 60e:	00 00       	nop
}
void USART_Transmit( unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 610:	15 e3       	ldi	r17, 0x35	; 53

    USART_Init(MYUBRR);

    _delay_ms(500);
    while(1){
        clear_display();
 612:	0e 94 85 01 	call	0x30a	; 0x30a <clear_display>
 616:	af e9       	ldi	r26, 0x9F	; 159
 618:	bf e0       	ldi	r27, 0x0F	; 15
 61a:	11 97       	sbiw	r26, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <main+0x92>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <main+0x98>
 620:	00 00       	nop
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
}
void USART_Transmit( unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 622:	80 91 9b 00 	lds	r24, 0x009B
 626:	85 ff       	sbrs	r24, 5
 628:	fc cf       	rjmp	.-8      	; 0x622 <main+0x9a>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 62a:	10 93 9c 00 	sts	0x009C, r17
    while(1){
        clear_display();
        _delay_ms(1);
        USART_Transmit('5');

        buffer[14] = temp;
 62e:	1f 86       	std	Y+15, r1	; 0x0f
        string2lcd(buffer);
 630:	ce 01       	movw	r24, r28
 632:	01 96       	adiw	r24, 0x01	; 1
 634:	0e 94 cb 01 	call	0x396	; 0x396 <string2lcd>
 638:	bf ef       	ldi	r27, 0xFF	; 255
 63a:	2d ee       	ldi	r18, 0xED	; 237
 63c:	82 e0       	ldi	r24, 0x02	; 2
 63e:	b1 50       	subi	r27, 0x01	; 1
 640:	20 40       	sbci	r18, 0x00	; 0
 642:	80 40       	sbci	r24, 0x00	; 0
 644:	e1 f7       	brne	.-8      	; 0x63e <main+0xb6>
 646:	00 c0       	rjmp	.+0      	; 0x648 <main+0xc0>
 648:	00 00       	nop
 64a:	e3 cf       	rjmp	.-58     	; 0x612 <main+0x8a>

0000064c <__divsf3>:
 64c:	0e 94 3a 03 	call	0x674	; 0x674 <__divsf3x>
 650:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_round>
 654:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_pscB>
 658:	58 f0       	brcs	.+22     	; 0x670 <__divsf3+0x24>
 65a:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_pscA>
 65e:	40 f0       	brcs	.+16     	; 0x670 <__divsf3+0x24>
 660:	29 f4       	brne	.+10     	; 0x66c <__divsf3+0x20>
 662:	5f 3f       	cpi	r21, 0xFF	; 255
 664:	29 f0       	breq	.+10     	; 0x670 <__divsf3+0x24>
 666:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_inf>
 66a:	51 11       	cpse	r21, r1
 66c:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>
 670:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_nan>

00000674 <__divsf3x>:
 674:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_split3>
 678:	68 f3       	brcs	.-38     	; 0x654 <__divsf3+0x8>

0000067a <__divsf3_pse>:
 67a:	99 23       	and	r25, r25
 67c:	b1 f3       	breq	.-20     	; 0x66a <__divsf3+0x1e>
 67e:	55 23       	and	r21, r21
 680:	91 f3       	breq	.-28     	; 0x666 <__divsf3+0x1a>
 682:	95 1b       	sub	r25, r21
 684:	55 0b       	sbc	r21, r21
 686:	bb 27       	eor	r27, r27
 688:	aa 27       	eor	r26, r26
 68a:	62 17       	cp	r22, r18
 68c:	73 07       	cpc	r23, r19
 68e:	84 07       	cpc	r24, r20
 690:	38 f0       	brcs	.+14     	; 0x6a0 <__divsf3_pse+0x26>
 692:	9f 5f       	subi	r25, 0xFF	; 255
 694:	5f 4f       	sbci	r21, 0xFF	; 255
 696:	22 0f       	add	r18, r18
 698:	33 1f       	adc	r19, r19
 69a:	44 1f       	adc	r20, r20
 69c:	aa 1f       	adc	r26, r26
 69e:	a9 f3       	breq	.-22     	; 0x68a <__divsf3_pse+0x10>
 6a0:	35 d0       	rcall	.+106    	; 0x70c <__divsf3_pse+0x92>
 6a2:	0e 2e       	mov	r0, r30
 6a4:	3a f0       	brmi	.+14     	; 0x6b4 <__divsf3_pse+0x3a>
 6a6:	e0 e8       	ldi	r30, 0x80	; 128
 6a8:	32 d0       	rcall	.+100    	; 0x70e <__divsf3_pse+0x94>
 6aa:	91 50       	subi	r25, 0x01	; 1
 6ac:	50 40       	sbci	r21, 0x00	; 0
 6ae:	e6 95       	lsr	r30
 6b0:	00 1c       	adc	r0, r0
 6b2:	ca f7       	brpl	.-14     	; 0x6a6 <__divsf3_pse+0x2c>
 6b4:	2b d0       	rcall	.+86     	; 0x70c <__divsf3_pse+0x92>
 6b6:	fe 2f       	mov	r31, r30
 6b8:	29 d0       	rcall	.+82     	; 0x70c <__divsf3_pse+0x92>
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	bb 1f       	adc	r27, r27
 6c2:	26 17       	cp	r18, r22
 6c4:	37 07       	cpc	r19, r23
 6c6:	48 07       	cpc	r20, r24
 6c8:	ab 07       	cpc	r26, r27
 6ca:	b0 e8       	ldi	r27, 0x80	; 128
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <__divsf3_pse+0x56>
 6ce:	bb 0b       	sbc	r27, r27
 6d0:	80 2d       	mov	r24, r0
 6d2:	bf 01       	movw	r22, r30
 6d4:	ff 27       	eor	r31, r31
 6d6:	93 58       	subi	r25, 0x83	; 131
 6d8:	5f 4f       	sbci	r21, 0xFF	; 255
 6da:	3a f0       	brmi	.+14     	; 0x6ea <__divsf3_pse+0x70>
 6dc:	9e 3f       	cpi	r25, 0xFE	; 254
 6de:	51 05       	cpc	r21, r1
 6e0:	78 f0       	brcs	.+30     	; 0x700 <__divsf3_pse+0x86>
 6e2:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_inf>
 6e6:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>
 6ea:	5f 3f       	cpi	r21, 0xFF	; 255
 6ec:	e4 f3       	brlt	.-8      	; 0x6e6 <__divsf3_pse+0x6c>
 6ee:	98 3e       	cpi	r25, 0xE8	; 232
 6f0:	d4 f3       	brlt	.-12     	; 0x6e6 <__divsf3_pse+0x6c>
 6f2:	86 95       	lsr	r24
 6f4:	77 95       	ror	r23
 6f6:	67 95       	ror	r22
 6f8:	b7 95       	ror	r27
 6fa:	f7 95       	ror	r31
 6fc:	9f 5f       	subi	r25, 0xFF	; 255
 6fe:	c9 f7       	brne	.-14     	; 0x6f2 <__divsf3_pse+0x78>
 700:	88 0f       	add	r24, r24
 702:	91 1d       	adc	r25, r1
 704:	96 95       	lsr	r25
 706:	87 95       	ror	r24
 708:	97 f9       	bld	r25, 7
 70a:	08 95       	ret
 70c:	e1 e0       	ldi	r30, 0x01	; 1
 70e:	66 0f       	add	r22, r22
 710:	77 1f       	adc	r23, r23
 712:	88 1f       	adc	r24, r24
 714:	bb 1f       	adc	r27, r27
 716:	62 17       	cp	r22, r18
 718:	73 07       	cpc	r23, r19
 71a:	84 07       	cpc	r24, r20
 71c:	ba 07       	cpc	r27, r26
 71e:	20 f0       	brcs	.+8      	; 0x728 <__divsf3_pse+0xae>
 720:	62 1b       	sub	r22, r18
 722:	73 0b       	sbc	r23, r19
 724:	84 0b       	sbc	r24, r20
 726:	ba 0b       	sbc	r27, r26
 728:	ee 1f       	adc	r30, r30
 72a:	88 f7       	brcc	.-30     	; 0x70e <__divsf3_pse+0x94>
 72c:	e0 95       	com	r30
 72e:	08 95       	ret

00000730 <__floatunsisf>:
 730:	e8 94       	clt
 732:	09 c0       	rjmp	.+18     	; 0x746 <__floatsisf+0x12>

00000734 <__floatsisf>:
 734:	97 fb       	bst	r25, 7
 736:	3e f4       	brtc	.+14     	; 0x746 <__floatsisf+0x12>
 738:	90 95       	com	r25
 73a:	80 95       	com	r24
 73c:	70 95       	com	r23
 73e:	61 95       	neg	r22
 740:	7f 4f       	sbci	r23, 0xFF	; 255
 742:	8f 4f       	sbci	r24, 0xFF	; 255
 744:	9f 4f       	sbci	r25, 0xFF	; 255
 746:	99 23       	and	r25, r25
 748:	a9 f0       	breq	.+42     	; 0x774 <__floatsisf+0x40>
 74a:	f9 2f       	mov	r31, r25
 74c:	96 e9       	ldi	r25, 0x96	; 150
 74e:	bb 27       	eor	r27, r27
 750:	93 95       	inc	r25
 752:	f6 95       	lsr	r31
 754:	87 95       	ror	r24
 756:	77 95       	ror	r23
 758:	67 95       	ror	r22
 75a:	b7 95       	ror	r27
 75c:	f1 11       	cpse	r31, r1
 75e:	f8 cf       	rjmp	.-16     	; 0x750 <__floatsisf+0x1c>
 760:	fa f4       	brpl	.+62     	; 0x7a0 <__floatsisf+0x6c>
 762:	bb 0f       	add	r27, r27
 764:	11 f4       	brne	.+4      	; 0x76a <__floatsisf+0x36>
 766:	60 ff       	sbrs	r22, 0
 768:	1b c0       	rjmp	.+54     	; 0x7a0 <__floatsisf+0x6c>
 76a:	6f 5f       	subi	r22, 0xFF	; 255
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	16 c0       	rjmp	.+44     	; 0x7a0 <__floatsisf+0x6c>
 774:	88 23       	and	r24, r24
 776:	11 f0       	breq	.+4      	; 0x77c <__floatsisf+0x48>
 778:	96 e9       	ldi	r25, 0x96	; 150
 77a:	11 c0       	rjmp	.+34     	; 0x79e <__floatsisf+0x6a>
 77c:	77 23       	and	r23, r23
 77e:	21 f0       	breq	.+8      	; 0x788 <__floatsisf+0x54>
 780:	9e e8       	ldi	r25, 0x8E	; 142
 782:	87 2f       	mov	r24, r23
 784:	76 2f       	mov	r23, r22
 786:	05 c0       	rjmp	.+10     	; 0x792 <__floatsisf+0x5e>
 788:	66 23       	and	r22, r22
 78a:	71 f0       	breq	.+28     	; 0x7a8 <__floatsisf+0x74>
 78c:	96 e8       	ldi	r25, 0x86	; 134
 78e:	86 2f       	mov	r24, r22
 790:	70 e0       	ldi	r23, 0x00	; 0
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	2a f0       	brmi	.+10     	; 0x7a0 <__floatsisf+0x6c>
 796:	9a 95       	dec	r25
 798:	66 0f       	add	r22, r22
 79a:	77 1f       	adc	r23, r23
 79c:	88 1f       	adc	r24, r24
 79e:	da f7       	brpl	.-10     	; 0x796 <__floatsisf+0x62>
 7a0:	88 0f       	add	r24, r24
 7a2:	96 95       	lsr	r25
 7a4:	87 95       	ror	r24
 7a6:	97 f9       	bld	r25, 7
 7a8:	08 95       	ret

000007aa <__fp_inf>:
 7aa:	97 f9       	bld	r25, 7
 7ac:	9f 67       	ori	r25, 0x7F	; 127
 7ae:	80 e8       	ldi	r24, 0x80	; 128
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	08 95       	ret

000007b6 <__fp_nan>:
 7b6:	9f ef       	ldi	r25, 0xFF	; 255
 7b8:	80 ec       	ldi	r24, 0xC0	; 192
 7ba:	08 95       	ret

000007bc <__fp_pscA>:
 7bc:	00 24       	eor	r0, r0
 7be:	0a 94       	dec	r0
 7c0:	16 16       	cp	r1, r22
 7c2:	17 06       	cpc	r1, r23
 7c4:	18 06       	cpc	r1, r24
 7c6:	09 06       	cpc	r0, r25
 7c8:	08 95       	ret

000007ca <__fp_pscB>:
 7ca:	00 24       	eor	r0, r0
 7cc:	0a 94       	dec	r0
 7ce:	12 16       	cp	r1, r18
 7d0:	13 06       	cpc	r1, r19
 7d2:	14 06       	cpc	r1, r20
 7d4:	05 06       	cpc	r0, r21
 7d6:	08 95       	ret

000007d8 <__fp_round>:
 7d8:	09 2e       	mov	r0, r25
 7da:	03 94       	inc	r0
 7dc:	00 0c       	add	r0, r0
 7de:	11 f4       	brne	.+4      	; 0x7e4 <__fp_round+0xc>
 7e0:	88 23       	and	r24, r24
 7e2:	52 f0       	brmi	.+20     	; 0x7f8 <__fp_round+0x20>
 7e4:	bb 0f       	add	r27, r27
 7e6:	40 f4       	brcc	.+16     	; 0x7f8 <__fp_round+0x20>
 7e8:	bf 2b       	or	r27, r31
 7ea:	11 f4       	brne	.+4      	; 0x7f0 <__fp_round+0x18>
 7ec:	60 ff       	sbrs	r22, 0
 7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <__fp_round+0x20>
 7f0:	6f 5f       	subi	r22, 0xFF	; 255
 7f2:	7f 4f       	sbci	r23, 0xFF	; 255
 7f4:	8f 4f       	sbci	r24, 0xFF	; 255
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	08 95       	ret

000007fa <__fp_split3>:
 7fa:	57 fd       	sbrc	r21, 7
 7fc:	90 58       	subi	r25, 0x80	; 128
 7fe:	44 0f       	add	r20, r20
 800:	55 1f       	adc	r21, r21
 802:	59 f0       	breq	.+22     	; 0x81a <__fp_splitA+0x10>
 804:	5f 3f       	cpi	r21, 0xFF	; 255
 806:	71 f0       	breq	.+28     	; 0x824 <__fp_splitA+0x1a>
 808:	47 95       	ror	r20

0000080a <__fp_splitA>:
 80a:	88 0f       	add	r24, r24
 80c:	97 fb       	bst	r25, 7
 80e:	99 1f       	adc	r25, r25
 810:	61 f0       	breq	.+24     	; 0x82a <__fp_splitA+0x20>
 812:	9f 3f       	cpi	r25, 0xFF	; 255
 814:	79 f0       	breq	.+30     	; 0x834 <__fp_splitA+0x2a>
 816:	87 95       	ror	r24
 818:	08 95       	ret
 81a:	12 16       	cp	r1, r18
 81c:	13 06       	cpc	r1, r19
 81e:	14 06       	cpc	r1, r20
 820:	55 1f       	adc	r21, r21
 822:	f2 cf       	rjmp	.-28     	; 0x808 <__fp_split3+0xe>
 824:	46 95       	lsr	r20
 826:	f1 df       	rcall	.-30     	; 0x80a <__fp_splitA>
 828:	08 c0       	rjmp	.+16     	; 0x83a <__fp_splitA+0x30>
 82a:	16 16       	cp	r1, r22
 82c:	17 06       	cpc	r1, r23
 82e:	18 06       	cpc	r1, r24
 830:	99 1f       	adc	r25, r25
 832:	f1 cf       	rjmp	.-30     	; 0x816 <__fp_splitA+0xc>
 834:	86 95       	lsr	r24
 836:	71 05       	cpc	r23, r1
 838:	61 05       	cpc	r22, r1
 83a:	08 94       	sec
 83c:	08 95       	ret

0000083e <__fp_zero>:
 83e:	e8 94       	clt

00000840 <__fp_szero>:
 840:	bb 27       	eor	r27, r27
 842:	66 27       	eor	r22, r22
 844:	77 27       	eor	r23, r23
 846:	cb 01       	movw	r24, r22
 848:	97 f9       	bld	r25, 7
 84a:	08 95       	ret

0000084c <__mulsf3>:
 84c:	0e 94 39 04 	call	0x872	; 0x872 <__mulsf3x>
 850:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_round>
 854:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_pscA>
 858:	38 f0       	brcs	.+14     	; 0x868 <__mulsf3+0x1c>
 85a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_pscB>
 85e:	20 f0       	brcs	.+8      	; 0x868 <__mulsf3+0x1c>
 860:	95 23       	and	r25, r21
 862:	11 f0       	breq	.+4      	; 0x868 <__mulsf3+0x1c>
 864:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_inf>
 868:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_nan>
 86c:	11 24       	eor	r1, r1
 86e:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>

00000872 <__mulsf3x>:
 872:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_split3>
 876:	70 f3       	brcs	.-36     	; 0x854 <__mulsf3+0x8>

00000878 <__mulsf3_pse>:
 878:	95 9f       	mul	r25, r21
 87a:	c1 f3       	breq	.-16     	; 0x86c <__mulsf3+0x20>
 87c:	95 0f       	add	r25, r21
 87e:	50 e0       	ldi	r21, 0x00	; 0
 880:	55 1f       	adc	r21, r21
 882:	62 9f       	mul	r22, r18
 884:	f0 01       	movw	r30, r0
 886:	72 9f       	mul	r23, r18
 888:	bb 27       	eor	r27, r27
 88a:	f0 0d       	add	r31, r0
 88c:	b1 1d       	adc	r27, r1
 88e:	63 9f       	mul	r22, r19
 890:	aa 27       	eor	r26, r26
 892:	f0 0d       	add	r31, r0
 894:	b1 1d       	adc	r27, r1
 896:	aa 1f       	adc	r26, r26
 898:	64 9f       	mul	r22, r20
 89a:	66 27       	eor	r22, r22
 89c:	b0 0d       	add	r27, r0
 89e:	a1 1d       	adc	r26, r1
 8a0:	66 1f       	adc	r22, r22
 8a2:	82 9f       	mul	r24, r18
 8a4:	22 27       	eor	r18, r18
 8a6:	b0 0d       	add	r27, r0
 8a8:	a1 1d       	adc	r26, r1
 8aa:	62 1f       	adc	r22, r18
 8ac:	73 9f       	mul	r23, r19
 8ae:	b0 0d       	add	r27, r0
 8b0:	a1 1d       	adc	r26, r1
 8b2:	62 1f       	adc	r22, r18
 8b4:	83 9f       	mul	r24, r19
 8b6:	a0 0d       	add	r26, r0
 8b8:	61 1d       	adc	r22, r1
 8ba:	22 1f       	adc	r18, r18
 8bc:	74 9f       	mul	r23, r20
 8be:	33 27       	eor	r19, r19
 8c0:	a0 0d       	add	r26, r0
 8c2:	61 1d       	adc	r22, r1
 8c4:	23 1f       	adc	r18, r19
 8c6:	84 9f       	mul	r24, r20
 8c8:	60 0d       	add	r22, r0
 8ca:	21 1d       	adc	r18, r1
 8cc:	82 2f       	mov	r24, r18
 8ce:	76 2f       	mov	r23, r22
 8d0:	6a 2f       	mov	r22, r26
 8d2:	11 24       	eor	r1, r1
 8d4:	9f 57       	subi	r25, 0x7F	; 127
 8d6:	50 40       	sbci	r21, 0x00	; 0
 8d8:	9a f0       	brmi	.+38     	; 0x900 <__mulsf3_pse+0x88>
 8da:	f1 f0       	breq	.+60     	; 0x918 <__mulsf3_pse+0xa0>
 8dc:	88 23       	and	r24, r24
 8de:	4a f0       	brmi	.+18     	; 0x8f2 <__mulsf3_pse+0x7a>
 8e0:	ee 0f       	add	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	bb 1f       	adc	r27, r27
 8e6:	66 1f       	adc	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	91 50       	subi	r25, 0x01	; 1
 8ee:	50 40       	sbci	r21, 0x00	; 0
 8f0:	a9 f7       	brne	.-22     	; 0x8dc <__mulsf3_pse+0x64>
 8f2:	9e 3f       	cpi	r25, 0xFE	; 254
 8f4:	51 05       	cpc	r21, r1
 8f6:	80 f0       	brcs	.+32     	; 0x918 <__mulsf3_pse+0xa0>
 8f8:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_inf>
 8fc:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>
 900:	5f 3f       	cpi	r21, 0xFF	; 255
 902:	e4 f3       	brlt	.-8      	; 0x8fc <__mulsf3_pse+0x84>
 904:	98 3e       	cpi	r25, 0xE8	; 232
 906:	d4 f3       	brlt	.-12     	; 0x8fc <__mulsf3_pse+0x84>
 908:	86 95       	lsr	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	b7 95       	ror	r27
 910:	f7 95       	ror	r31
 912:	e7 95       	ror	r30
 914:	9f 5f       	subi	r25, 0xFF	; 255
 916:	c1 f7       	brne	.-16     	; 0x908 <__mulsf3_pse+0x90>
 918:	fe 2b       	or	r31, r30
 91a:	88 0f       	add	r24, r24
 91c:	91 1d       	adc	r25, r1
 91e:	96 95       	lsr	r25
 920:	87 95       	ror	r24
 922:	97 f9       	bld	r25, 7
 924:	08 95       	ret

00000926 <dtostrf>:
 926:	ef 92       	push	r14
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	e8 01       	movw	r28, r16
 932:	47 fd       	sbrc	r20, 7
 934:	16 c0       	rjmp	.+44     	; 0x962 <dtostrf+0x3c>
 936:	34 e0       	ldi	r19, 0x04	; 4
 938:	04 2e       	mov	r0, r20
 93a:	00 0c       	add	r0, r0
 93c:	55 0b       	sbc	r21, r21
 93e:	57 ff       	sbrs	r21, 7
 940:	03 c0       	rjmp	.+6      	; 0x948 <dtostrf+0x22>
 942:	51 95       	neg	r21
 944:	41 95       	neg	r20
 946:	51 09       	sbc	r21, r1
 948:	e3 2e       	mov	r14, r19
 94a:	02 2f       	mov	r16, r18
 94c:	24 2f       	mov	r18, r20
 94e:	ae 01       	movw	r20, r28
 950:	0e 94 b3 04 	call	0x966	; 0x966 <dtoa_prf>
 954:	ce 01       	movw	r24, r28
 956:	df 91       	pop	r29
 958:	cf 91       	pop	r28
 95a:	1f 91       	pop	r17
 95c:	0f 91       	pop	r16
 95e:	ef 90       	pop	r14
 960:	08 95       	ret
 962:	34 e1       	ldi	r19, 0x14	; 20
 964:	e9 cf       	rjmp	.-46     	; 0x938 <dtostrf+0x12>

00000966 <dtoa_prf>:
 966:	8f 92       	push	r8
 968:	9f 92       	push	r9
 96a:	af 92       	push	r10
 96c:	bf 92       	push	r11
 96e:	cf 92       	push	r12
 970:	df 92       	push	r13
 972:	ef 92       	push	r14
 974:	ff 92       	push	r15
 976:	0f 93       	push	r16
 978:	1f 93       	push	r17
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
 97e:	cd b7       	in	r28, 0x3d	; 61
 980:	de b7       	in	r29, 0x3e	; 62
 982:	29 97       	sbiw	r28, 0x09	; 9
 984:	0f b6       	in	r0, 0x3f	; 63
 986:	f8 94       	cli
 988:	de bf       	out	0x3e, r29	; 62
 98a:	0f be       	out	0x3f, r0	; 63
 98c:	cd bf       	out	0x3d, r28	; 61
 98e:	6a 01       	movw	r12, r20
 990:	f2 2e       	mov	r15, r18
 992:	b0 2e       	mov	r11, r16
 994:	2b e3       	ldi	r18, 0x3B	; 59
 996:	20 17       	cp	r18, r16
 998:	08 f4       	brcc	.+2      	; 0x99c <dtoa_prf+0x36>
 99a:	5f c0       	rjmp	.+190    	; 0xa5a <dtoa_prf+0xf4>
 99c:	11 e0       	ldi	r17, 0x01	; 1
 99e:	10 0f       	add	r17, r16
 9a0:	01 2f       	mov	r16, r17
 9a2:	27 e0       	ldi	r18, 0x07	; 7
 9a4:	ae 01       	movw	r20, r28
 9a6:	4f 5f       	subi	r20, 0xFF	; 255
 9a8:	5f 4f       	sbci	r21, 0xFF	; 255
 9aa:	0e 94 34 06 	call	0xc68	; 0xc68 <__ftoa_engine>
 9ae:	bc 01       	movw	r22, r24
 9b0:	39 81       	ldd	r19, Y+1	; 0x01
 9b2:	83 2f       	mov	r24, r19
 9b4:	89 70       	andi	r24, 0x09	; 9
 9b6:	81 30       	cpi	r24, 0x01	; 1
 9b8:	09 f4       	brne	.+2      	; 0x9bc <dtoa_prf+0x56>
 9ba:	51 c0       	rjmp	.+162    	; 0xa5e <dtoa_prf+0xf8>
 9bc:	e1 fc       	sbrc	r14, 1
 9be:	51 c0       	rjmp	.+162    	; 0xa62 <dtoa_prf+0xfc>
 9c0:	9e 2d       	mov	r25, r14
 9c2:	91 70       	andi	r25, 0x01	; 1
 9c4:	e0 fc       	sbrc	r14, 0
 9c6:	90 e2       	ldi	r25, 0x20	; 32
 9c8:	ae 2d       	mov	r26, r14
 9ca:	a0 71       	andi	r26, 0x10	; 16
 9cc:	83 2f       	mov	r24, r19
 9ce:	88 70       	andi	r24, 0x08	; 8
 9d0:	33 ff       	sbrs	r19, 3
 9d2:	5a c0       	rjmp	.+180    	; 0xa88 <dtoa_prf+0x122>
 9d4:	91 11       	cpse	r25, r1
 9d6:	47 c0       	rjmp	.+142    	; 0xa66 <dtoa_prf+0x100>
 9d8:	83 e0       	ldi	r24, 0x03	; 3
 9da:	8f 15       	cp	r24, r15
 9dc:	08 f0       	brcs	.+2      	; 0x9e0 <dtoa_prf+0x7a>
 9de:	45 c0       	rjmp	.+138    	; 0xa6a <dtoa_prf+0x104>
 9e0:	f8 1a       	sub	r15, r24
 9e2:	a1 11       	cpse	r26, r1
 9e4:	08 c0       	rjmp	.+16     	; 0x9f6 <dtoa_prf+0x90>
 9e6:	f6 01       	movw	r30, r12
 9e8:	8f 2d       	mov	r24, r15
 9ea:	20 e2       	ldi	r18, 0x20	; 32
 9ec:	81 11       	cpse	r24, r1
 9ee:	3f c0       	rjmp	.+126    	; 0xa6e <dtoa_prf+0x108>
 9f0:	cf 0c       	add	r12, r15
 9f2:	d1 1c       	adc	r13, r1
 9f4:	f1 2c       	mov	r15, r1
 9f6:	99 23       	and	r25, r25
 9f8:	29 f0       	breq	.+10     	; 0xa04 <dtoa_prf+0x9e>
 9fa:	d6 01       	movw	r26, r12
 9fc:	9c 93       	st	X, r25
 9fe:	f6 01       	movw	r30, r12
 a00:	31 96       	adiw	r30, 0x01	; 1
 a02:	6f 01       	movw	r12, r30
 a04:	c6 01       	movw	r24, r12
 a06:	03 96       	adiw	r24, 0x03	; 3
 a08:	e2 fe       	sbrs	r14, 2
 a0a:	34 c0       	rjmp	.+104    	; 0xa74 <dtoa_prf+0x10e>
 a0c:	2e e4       	ldi	r18, 0x4E	; 78
 a0e:	d6 01       	movw	r26, r12
 a10:	2c 93       	st	X, r18
 a12:	31 e4       	ldi	r19, 0x41	; 65
 a14:	11 96       	adiw	r26, 0x01	; 1
 a16:	3c 93       	st	X, r19
 a18:	11 97       	sbiw	r26, 0x01	; 1
 a1a:	12 96       	adiw	r26, 0x02	; 2
 a1c:	2c 93       	st	X, r18
 a1e:	fc 01       	movw	r30, r24
 a20:	2f 2d       	mov	r18, r15
 a22:	30 e2       	ldi	r19, 0x20	; 32
 a24:	21 11       	cpse	r18, r1
 a26:	2d c0       	rjmp	.+90     	; 0xa82 <dtoa_prf+0x11c>
 a28:	8f 0d       	add	r24, r15
 a2a:	91 1d       	adc	r25, r1
 a2c:	dc 01       	movw	r26, r24
 a2e:	1c 92       	st	X, r1
 a30:	8e ef       	ldi	r24, 0xFE	; 254
 a32:	9f ef       	ldi	r25, 0xFF	; 255
 a34:	29 96       	adiw	r28, 0x09	; 9
 a36:	0f b6       	in	r0, 0x3f	; 63
 a38:	f8 94       	cli
 a3a:	de bf       	out	0x3e, r29	; 62
 a3c:	0f be       	out	0x3f, r0	; 63
 a3e:	cd bf       	out	0x3d, r28	; 61
 a40:	df 91       	pop	r29
 a42:	cf 91       	pop	r28
 a44:	1f 91       	pop	r17
 a46:	0f 91       	pop	r16
 a48:	ff 90       	pop	r15
 a4a:	ef 90       	pop	r14
 a4c:	df 90       	pop	r13
 a4e:	cf 90       	pop	r12
 a50:	bf 90       	pop	r11
 a52:	af 90       	pop	r10
 a54:	9f 90       	pop	r9
 a56:	8f 90       	pop	r8
 a58:	08 95       	ret
 a5a:	1c e3       	ldi	r17, 0x3C	; 60
 a5c:	a1 cf       	rjmp	.-190    	; 0x9a0 <dtoa_prf+0x3a>
 a5e:	9d e2       	ldi	r25, 0x2D	; 45
 a60:	b3 cf       	rjmp	.-154    	; 0x9c8 <dtoa_prf+0x62>
 a62:	9b e2       	ldi	r25, 0x2B	; 43
 a64:	b1 cf       	rjmp	.-158    	; 0x9c8 <dtoa_prf+0x62>
 a66:	84 e0       	ldi	r24, 0x04	; 4
 a68:	b8 cf       	rjmp	.-144    	; 0x9da <dtoa_prf+0x74>
 a6a:	f1 2c       	mov	r15, r1
 a6c:	ba cf       	rjmp	.-140    	; 0x9e2 <dtoa_prf+0x7c>
 a6e:	21 93       	st	Z+, r18
 a70:	81 50       	subi	r24, 0x01	; 1
 a72:	bc cf       	rjmp	.-136    	; 0x9ec <dtoa_prf+0x86>
 a74:	2e e6       	ldi	r18, 0x6E	; 110
 a76:	f6 01       	movw	r30, r12
 a78:	20 83       	st	Z, r18
 a7a:	31 e6       	ldi	r19, 0x61	; 97
 a7c:	31 83       	std	Z+1, r19	; 0x01
 a7e:	22 83       	std	Z+2, r18	; 0x02
 a80:	ce cf       	rjmp	.-100    	; 0xa1e <dtoa_prf+0xb8>
 a82:	31 93       	st	Z+, r19
 a84:	21 50       	subi	r18, 0x01	; 1
 a86:	ce cf       	rjmp	.-100    	; 0xa24 <dtoa_prf+0xbe>
 a88:	23 2f       	mov	r18, r19
 a8a:	24 70       	andi	r18, 0x04	; 4
 a8c:	32 ff       	sbrs	r19, 2
 a8e:	41 c0       	rjmp	.+130    	; 0xb12 <dtoa_prf+0x1ac>
 a90:	91 11       	cpse	r25, r1
 a92:	2f c0       	rjmp	.+94     	; 0xaf2 <dtoa_prf+0x18c>
 a94:	23 e0       	ldi	r18, 0x03	; 3
 a96:	2f 15       	cp	r18, r15
 a98:	10 f4       	brcc	.+4      	; 0xa9e <dtoa_prf+0x138>
 a9a:	8f 2d       	mov	r24, r15
 a9c:	82 1b       	sub	r24, r18
 a9e:	a1 11       	cpse	r26, r1
 aa0:	08 c0       	rjmp	.+16     	; 0xab2 <dtoa_prf+0x14c>
 aa2:	f6 01       	movw	r30, r12
 aa4:	28 2f       	mov	r18, r24
 aa6:	30 e2       	ldi	r19, 0x20	; 32
 aa8:	21 11       	cpse	r18, r1
 aaa:	25 c0       	rjmp	.+74     	; 0xaf6 <dtoa_prf+0x190>
 aac:	c8 0e       	add	r12, r24
 aae:	d1 1c       	adc	r13, r1
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	99 23       	and	r25, r25
 ab4:	31 f0       	breq	.+12     	; 0xac2 <dtoa_prf+0x15c>
 ab6:	f6 01       	movw	r30, r12
 ab8:	90 83       	st	Z, r25
 aba:	96 01       	movw	r18, r12
 abc:	2f 5f       	subi	r18, 0xFF	; 255
 abe:	3f 4f       	sbci	r19, 0xFF	; 255
 ac0:	69 01       	movw	r12, r18
 ac2:	96 01       	movw	r18, r12
 ac4:	2d 5f       	subi	r18, 0xFD	; 253
 ac6:	3f 4f       	sbci	r19, 0xFF	; 255
 ac8:	e2 fe       	sbrs	r14, 2
 aca:	18 c0       	rjmp	.+48     	; 0xafc <dtoa_prf+0x196>
 acc:	99 e4       	ldi	r25, 0x49	; 73
 ace:	d6 01       	movw	r26, r12
 ad0:	9c 93       	st	X, r25
 ad2:	9e e4       	ldi	r25, 0x4E	; 78
 ad4:	11 96       	adiw	r26, 0x01	; 1
 ad6:	9c 93       	st	X, r25
 ad8:	11 97       	sbiw	r26, 0x01	; 1
 ada:	96 e4       	ldi	r25, 0x46	; 70
 adc:	12 96       	adiw	r26, 0x02	; 2
 ade:	9c 93       	st	X, r25
 ae0:	f9 01       	movw	r30, r18
 ae2:	98 2f       	mov	r25, r24
 ae4:	40 e2       	ldi	r20, 0x20	; 32
 ae6:	91 11       	cpse	r25, r1
 ae8:	11 c0       	rjmp	.+34     	; 0xb0c <dtoa_prf+0x1a6>
 aea:	28 0f       	add	r18, r24
 aec:	31 1d       	adc	r19, r1
 aee:	d9 01       	movw	r26, r18
 af0:	9e cf       	rjmp	.-196    	; 0xa2e <dtoa_prf+0xc8>
 af2:	24 e0       	ldi	r18, 0x04	; 4
 af4:	d0 cf       	rjmp	.-96     	; 0xa96 <dtoa_prf+0x130>
 af6:	31 93       	st	Z+, r19
 af8:	21 50       	subi	r18, 0x01	; 1
 afa:	d6 cf       	rjmp	.-84     	; 0xaa8 <dtoa_prf+0x142>
 afc:	99 e6       	ldi	r25, 0x69	; 105
 afe:	f6 01       	movw	r30, r12
 b00:	90 83       	st	Z, r25
 b02:	9e e6       	ldi	r25, 0x6E	; 110
 b04:	91 83       	std	Z+1, r25	; 0x01
 b06:	96 e6       	ldi	r25, 0x66	; 102
 b08:	92 83       	std	Z+2, r25	; 0x02
 b0a:	ea cf       	rjmp	.-44     	; 0xae0 <dtoa_prf+0x17a>
 b0c:	41 93       	st	Z+, r20
 b0e:	91 50       	subi	r25, 0x01	; 1
 b10:	ea cf       	rjmp	.-44     	; 0xae6 <dtoa_prf+0x180>
 b12:	41 e0       	ldi	r20, 0x01	; 1
 b14:	50 e0       	ldi	r21, 0x00	; 0
 b16:	91 11       	cpse	r25, r1
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <dtoa_prf+0x1b8>
 b1a:	40 e0       	ldi	r20, 0x00	; 0
 b1c:	50 e0       	ldi	r21, 0x00	; 0
 b1e:	16 16       	cp	r1, r22
 b20:	17 06       	cpc	r1, r23
 b22:	0c f0       	brlt	.+2      	; 0xb26 <dtoa_prf+0x1c0>
 b24:	75 c0       	rjmp	.+234    	; 0xc10 <dtoa_prf+0x2aa>
 b26:	fb 01       	movw	r30, r22
 b28:	31 96       	adiw	r30, 0x01	; 1
 b2a:	e4 0f       	add	r30, r20
 b2c:	f5 1f       	adc	r31, r21
 b2e:	bb 20       	and	r11, r11
 b30:	09 f4       	brne	.+2      	; 0xb34 <dtoa_prf+0x1ce>
 b32:	71 c0       	rjmp	.+226    	; 0xc16 <dtoa_prf+0x2b0>
 b34:	4b 2d       	mov	r20, r11
 b36:	50 e0       	ldi	r21, 0x00	; 0
 b38:	4f 5f       	subi	r20, 0xFF	; 255
 b3a:	5f 4f       	sbci	r21, 0xFF	; 255
 b3c:	4e 0f       	add	r20, r30
 b3e:	5f 1f       	adc	r21, r31
 b40:	ef 2d       	mov	r30, r15
 b42:	f0 e0       	ldi	r31, 0x00	; 0
 b44:	4e 17       	cp	r20, r30
 b46:	5f 07       	cpc	r21, r31
 b48:	14 f4       	brge	.+4      	; 0xb4e <dtoa_prf+0x1e8>
 b4a:	2f 2d       	mov	r18, r15
 b4c:	24 1b       	sub	r18, r20
 b4e:	8e 2d       	mov	r24, r14
 b50:	88 71       	andi	r24, 0x18	; 24
 b52:	41 f4       	brne	.+16     	; 0xb64 <dtoa_prf+0x1fe>
 b54:	f6 01       	movw	r30, r12
 b56:	82 2f       	mov	r24, r18
 b58:	40 e2       	ldi	r20, 0x20	; 32
 b5a:	81 11       	cpse	r24, r1
 b5c:	5f c0       	rjmp	.+190    	; 0xc1c <dtoa_prf+0x2b6>
 b5e:	c2 0e       	add	r12, r18
 b60:	d1 1c       	adc	r13, r1
 b62:	20 e0       	ldi	r18, 0x00	; 0
 b64:	99 23       	and	r25, r25
 b66:	29 f0       	breq	.+10     	; 0xb72 <dtoa_prf+0x20c>
 b68:	f6 01       	movw	r30, r12
 b6a:	90 83       	st	Z, r25
 b6c:	c6 01       	movw	r24, r12
 b6e:	01 96       	adiw	r24, 0x01	; 1
 b70:	6c 01       	movw	r12, r24
 b72:	a1 11       	cpse	r26, r1
 b74:	08 c0       	rjmp	.+16     	; 0xb86 <dtoa_prf+0x220>
 b76:	f6 01       	movw	r30, r12
 b78:	82 2f       	mov	r24, r18
 b7a:	90 e3       	ldi	r25, 0x30	; 48
 b7c:	81 11       	cpse	r24, r1
 b7e:	51 c0       	rjmp	.+162    	; 0xc22 <dtoa_prf+0x2bc>
 b80:	c2 0e       	add	r12, r18
 b82:	d1 1c       	adc	r13, r1
 b84:	20 e0       	ldi	r18, 0x00	; 0
 b86:	01 2f       	mov	r16, r17
 b88:	06 0f       	add	r16, r22
 b8a:	9a 81       	ldd	r25, Y+2	; 0x02
 b8c:	a3 2f       	mov	r26, r19
 b8e:	a0 71       	andi	r26, 0x10	; 16
 b90:	aa 2e       	mov	r10, r26
 b92:	34 ff       	sbrs	r19, 4
 b94:	03 c0       	rjmp	.+6      	; 0xb9c <dtoa_prf+0x236>
 b96:	91 33       	cpi	r25, 0x31	; 49
 b98:	09 f4       	brne	.+2      	; 0xb9c <dtoa_prf+0x236>
 b9a:	01 50       	subi	r16, 0x01	; 1
 b9c:	10 16       	cp	r1, r16
 b9e:	0c f0       	brlt	.+2      	; 0xba2 <dtoa_prf+0x23c>
 ba0:	43 c0       	rjmp	.+134    	; 0xc28 <dtoa_prf+0x2c2>
 ba2:	09 30       	cpi	r16, 0x09	; 9
 ba4:	08 f0       	brcs	.+2      	; 0xba8 <dtoa_prf+0x242>
 ba6:	08 e0       	ldi	r16, 0x08	; 8
 ba8:	ab 01       	movw	r20, r22
 baa:	77 ff       	sbrs	r23, 7
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <dtoa_prf+0x24c>
 bae:	40 e0       	ldi	r20, 0x00	; 0
 bb0:	50 e0       	ldi	r21, 0x00	; 0
 bb2:	fb 01       	movw	r30, r22
 bb4:	31 96       	adiw	r30, 0x01	; 1
 bb6:	e4 1b       	sub	r30, r20
 bb8:	f5 0b       	sbc	r31, r21
 bba:	a1 e0       	ldi	r26, 0x01	; 1
 bbc:	b0 e0       	ldi	r27, 0x00	; 0
 bbe:	ac 0f       	add	r26, r28
 bc0:	bd 1f       	adc	r27, r29
 bc2:	ea 0f       	add	r30, r26
 bc4:	fb 1f       	adc	r31, r27
 bc6:	3e e2       	ldi	r19, 0x2E	; 46
 bc8:	4b 01       	movw	r8, r22
 bca:	80 1a       	sub	r8, r16
 bcc:	91 08       	sbc	r9, r1
 bce:	0b 2d       	mov	r16, r11
 bd0:	10 e0       	ldi	r17, 0x00	; 0
 bd2:	11 95       	neg	r17
 bd4:	01 95       	neg	r16
 bd6:	11 09       	sbc	r17, r1
 bd8:	4f 3f       	cpi	r20, 0xFF	; 255
 bda:	bf ef       	ldi	r27, 0xFF	; 255
 bdc:	5b 07       	cpc	r21, r27
 bde:	21 f4       	brne	.+8      	; 0xbe8 <dtoa_prf+0x282>
 be0:	d6 01       	movw	r26, r12
 be2:	3c 93       	st	X, r19
 be4:	11 96       	adiw	r26, 0x01	; 1
 be6:	6d 01       	movw	r12, r26
 be8:	64 17       	cp	r22, r20
 bea:	75 07       	cpc	r23, r21
 bec:	fc f0       	brlt	.+62     	; 0xc2c <dtoa_prf+0x2c6>
 bee:	84 16       	cp	r8, r20
 bf0:	95 06       	cpc	r9, r21
 bf2:	e4 f4       	brge	.+56     	; 0xc2c <dtoa_prf+0x2c6>
 bf4:	80 81       	ld	r24, Z
 bf6:	41 50       	subi	r20, 0x01	; 1
 bf8:	51 09       	sbc	r21, r1
 bfa:	31 96       	adiw	r30, 0x01	; 1
 bfc:	d6 01       	movw	r26, r12
 bfe:	11 96       	adiw	r26, 0x01	; 1
 c00:	7d 01       	movw	r14, r26
 c02:	40 17       	cp	r20, r16
 c04:	51 07       	cpc	r21, r17
 c06:	a4 f0       	brlt	.+40     	; 0xc30 <dtoa_prf+0x2ca>
 c08:	d6 01       	movw	r26, r12
 c0a:	8c 93       	st	X, r24
 c0c:	67 01       	movw	r12, r14
 c0e:	e4 cf       	rjmp	.-56     	; 0xbd8 <dtoa_prf+0x272>
 c10:	e1 e0       	ldi	r30, 0x01	; 1
 c12:	f0 e0       	ldi	r31, 0x00	; 0
 c14:	8a cf       	rjmp	.-236    	; 0xb2a <dtoa_prf+0x1c4>
 c16:	40 e0       	ldi	r20, 0x00	; 0
 c18:	50 e0       	ldi	r21, 0x00	; 0
 c1a:	90 cf       	rjmp	.-224    	; 0xb3c <dtoa_prf+0x1d6>
 c1c:	41 93       	st	Z+, r20
 c1e:	81 50       	subi	r24, 0x01	; 1
 c20:	9c cf       	rjmp	.-200    	; 0xb5a <dtoa_prf+0x1f4>
 c22:	91 93       	st	Z+, r25
 c24:	81 50       	subi	r24, 0x01	; 1
 c26:	aa cf       	rjmp	.-172    	; 0xb7c <dtoa_prf+0x216>
 c28:	01 e0       	ldi	r16, 0x01	; 1
 c2a:	be cf       	rjmp	.-132    	; 0xba8 <dtoa_prf+0x242>
 c2c:	80 e3       	ldi	r24, 0x30	; 48
 c2e:	e3 cf       	rjmp	.-58     	; 0xbf6 <dtoa_prf+0x290>
 c30:	64 17       	cp	r22, r20
 c32:	75 07       	cpc	r23, r21
 c34:	31 f4       	brne	.+12     	; 0xc42 <dtoa_prf+0x2dc>
 c36:	96 33       	cpi	r25, 0x36	; 54
 c38:	90 f4       	brcc	.+36     	; 0xc5e <dtoa_prf+0x2f8>
 c3a:	95 33       	cpi	r25, 0x35	; 53
 c3c:	11 f4       	brne	.+4      	; 0xc42 <dtoa_prf+0x2dc>
 c3e:	aa 20       	and	r10, r10
 c40:	71 f0       	breq	.+28     	; 0xc5e <dtoa_prf+0x2f8>
 c42:	f6 01       	movw	r30, r12
 c44:	80 83       	st	Z, r24
 c46:	f7 01       	movw	r30, r14
 c48:	82 2f       	mov	r24, r18
 c4a:	90 e2       	ldi	r25, 0x20	; 32
 c4c:	81 11       	cpse	r24, r1
 c4e:	09 c0       	rjmp	.+18     	; 0xc62 <dtoa_prf+0x2fc>
 c50:	f7 01       	movw	r30, r14
 c52:	e2 0f       	add	r30, r18
 c54:	f1 1d       	adc	r31, r1
 c56:	10 82       	st	Z, r1
 c58:	80 e0       	ldi	r24, 0x00	; 0
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	eb ce       	rjmp	.-554    	; 0xa34 <dtoa_prf+0xce>
 c5e:	81 e3       	ldi	r24, 0x31	; 49
 c60:	f0 cf       	rjmp	.-32     	; 0xc42 <dtoa_prf+0x2dc>
 c62:	91 93       	st	Z+, r25
 c64:	81 50       	subi	r24, 0x01	; 1
 c66:	f2 cf       	rjmp	.-28     	; 0xc4c <dtoa_prf+0x2e6>

00000c68 <__ftoa_engine>:
 c68:	28 30       	cpi	r18, 0x08	; 8
 c6a:	08 f0       	brcs	.+2      	; 0xc6e <__ftoa_engine+0x6>
 c6c:	27 e0       	ldi	r18, 0x07	; 7
 c6e:	33 27       	eor	r19, r19
 c70:	da 01       	movw	r26, r20
 c72:	99 0f       	add	r25, r25
 c74:	31 1d       	adc	r19, r1
 c76:	87 fd       	sbrc	r24, 7
 c78:	91 60       	ori	r25, 0x01	; 1
 c7a:	00 96       	adiw	r24, 0x00	; 0
 c7c:	61 05       	cpc	r22, r1
 c7e:	71 05       	cpc	r23, r1
 c80:	39 f4       	brne	.+14     	; 0xc90 <__ftoa_engine+0x28>
 c82:	32 60       	ori	r19, 0x02	; 2
 c84:	2e 5f       	subi	r18, 0xFE	; 254
 c86:	3d 93       	st	X+, r19
 c88:	30 e3       	ldi	r19, 0x30	; 48
 c8a:	2a 95       	dec	r18
 c8c:	e1 f7       	brne	.-8      	; 0xc86 <__ftoa_engine+0x1e>
 c8e:	08 95       	ret
 c90:	9f 3f       	cpi	r25, 0xFF	; 255
 c92:	30 f0       	brcs	.+12     	; 0xca0 <__ftoa_engine+0x38>
 c94:	80 38       	cpi	r24, 0x80	; 128
 c96:	71 05       	cpc	r23, r1
 c98:	61 05       	cpc	r22, r1
 c9a:	09 f0       	breq	.+2      	; 0xc9e <__ftoa_engine+0x36>
 c9c:	3c 5f       	subi	r19, 0xFC	; 252
 c9e:	3c 5f       	subi	r19, 0xFC	; 252
 ca0:	3d 93       	st	X+, r19
 ca2:	91 30       	cpi	r25, 0x01	; 1
 ca4:	08 f0       	brcs	.+2      	; 0xca8 <__ftoa_engine+0x40>
 ca6:	80 68       	ori	r24, 0x80	; 128
 ca8:	91 1d       	adc	r25, r1
 caa:	df 93       	push	r29
 cac:	cf 93       	push	r28
 cae:	1f 93       	push	r17
 cb0:	0f 93       	push	r16
 cb2:	ff 92       	push	r15
 cb4:	ef 92       	push	r14
 cb6:	19 2f       	mov	r17, r25
 cb8:	98 7f       	andi	r25, 0xF8	; 248
 cba:	96 95       	lsr	r25
 cbc:	e9 2f       	mov	r30, r25
 cbe:	96 95       	lsr	r25
 cc0:	96 95       	lsr	r25
 cc2:	e9 0f       	add	r30, r25
 cc4:	ff 27       	eor	r31, r31
 cc6:	ea 51       	subi	r30, 0x1A	; 26
 cc8:	ff 4f       	sbci	r31, 0xFF	; 255
 cca:	99 27       	eor	r25, r25
 ccc:	33 27       	eor	r19, r19
 cce:	ee 24       	eor	r14, r14
 cd0:	ff 24       	eor	r15, r15
 cd2:	a7 01       	movw	r20, r14
 cd4:	e7 01       	movw	r28, r14
 cd6:	05 90       	lpm	r0, Z+
 cd8:	08 94       	sec
 cda:	07 94       	ror	r0
 cdc:	28 f4       	brcc	.+10     	; 0xce8 <__ftoa_engine+0x80>
 cde:	36 0f       	add	r19, r22
 ce0:	e7 1e       	adc	r14, r23
 ce2:	f8 1e       	adc	r15, r24
 ce4:	49 1f       	adc	r20, r25
 ce6:	51 1d       	adc	r21, r1
 ce8:	66 0f       	add	r22, r22
 cea:	77 1f       	adc	r23, r23
 cec:	88 1f       	adc	r24, r24
 cee:	99 1f       	adc	r25, r25
 cf0:	06 94       	lsr	r0
 cf2:	a1 f7       	brne	.-24     	; 0xcdc <__ftoa_engine+0x74>
 cf4:	05 90       	lpm	r0, Z+
 cf6:	07 94       	ror	r0
 cf8:	28 f4       	brcc	.+10     	; 0xd04 <__ftoa_engine+0x9c>
 cfa:	e7 0e       	add	r14, r23
 cfc:	f8 1e       	adc	r15, r24
 cfe:	49 1f       	adc	r20, r25
 d00:	56 1f       	adc	r21, r22
 d02:	c1 1d       	adc	r28, r1
 d04:	77 0f       	add	r23, r23
 d06:	88 1f       	adc	r24, r24
 d08:	99 1f       	adc	r25, r25
 d0a:	66 1f       	adc	r22, r22
 d0c:	06 94       	lsr	r0
 d0e:	a1 f7       	brne	.-24     	; 0xcf8 <__ftoa_engine+0x90>
 d10:	05 90       	lpm	r0, Z+
 d12:	07 94       	ror	r0
 d14:	28 f4       	brcc	.+10     	; 0xd20 <__ftoa_engine+0xb8>
 d16:	f8 0e       	add	r15, r24
 d18:	49 1f       	adc	r20, r25
 d1a:	56 1f       	adc	r21, r22
 d1c:	c7 1f       	adc	r28, r23
 d1e:	d1 1d       	adc	r29, r1
 d20:	88 0f       	add	r24, r24
 d22:	99 1f       	adc	r25, r25
 d24:	66 1f       	adc	r22, r22
 d26:	77 1f       	adc	r23, r23
 d28:	06 94       	lsr	r0
 d2a:	a1 f7       	brne	.-24     	; 0xd14 <__ftoa_engine+0xac>
 d2c:	05 90       	lpm	r0, Z+
 d2e:	07 94       	ror	r0
 d30:	20 f4       	brcc	.+8      	; 0xd3a <__ftoa_engine+0xd2>
 d32:	49 0f       	add	r20, r25
 d34:	56 1f       	adc	r21, r22
 d36:	c7 1f       	adc	r28, r23
 d38:	d8 1f       	adc	r29, r24
 d3a:	99 0f       	add	r25, r25
 d3c:	66 1f       	adc	r22, r22
 d3e:	77 1f       	adc	r23, r23
 d40:	88 1f       	adc	r24, r24
 d42:	06 94       	lsr	r0
 d44:	a9 f7       	brne	.-22     	; 0xd30 <__ftoa_engine+0xc8>
 d46:	84 91       	lpm	r24, Z
 d48:	10 95       	com	r17
 d4a:	17 70       	andi	r17, 0x07	; 7
 d4c:	41 f0       	breq	.+16     	; 0xd5e <__ftoa_engine+0xf6>
 d4e:	d6 95       	lsr	r29
 d50:	c7 95       	ror	r28
 d52:	57 95       	ror	r21
 d54:	47 95       	ror	r20
 d56:	f7 94       	ror	r15
 d58:	e7 94       	ror	r14
 d5a:	1a 95       	dec	r17
 d5c:	c1 f7       	brne	.-16     	; 0xd4e <__ftoa_engine+0xe6>
 d5e:	ec e8       	ldi	r30, 0x8C	; 140
 d60:	f0 e0       	ldi	r31, 0x00	; 0
 d62:	68 94       	set
 d64:	15 90       	lpm	r1, Z+
 d66:	15 91       	lpm	r17, Z+
 d68:	35 91       	lpm	r19, Z+
 d6a:	65 91       	lpm	r22, Z+
 d6c:	95 91       	lpm	r25, Z+
 d6e:	05 90       	lpm	r0, Z+
 d70:	7f e2       	ldi	r23, 0x2F	; 47
 d72:	73 95       	inc	r23
 d74:	e1 18       	sub	r14, r1
 d76:	f1 0a       	sbc	r15, r17
 d78:	43 0b       	sbc	r20, r19
 d7a:	56 0b       	sbc	r21, r22
 d7c:	c9 0b       	sbc	r28, r25
 d7e:	d0 09       	sbc	r29, r0
 d80:	c0 f7       	brcc	.-16     	; 0xd72 <__ftoa_engine+0x10a>
 d82:	e1 0c       	add	r14, r1
 d84:	f1 1e       	adc	r15, r17
 d86:	43 1f       	adc	r20, r19
 d88:	56 1f       	adc	r21, r22
 d8a:	c9 1f       	adc	r28, r25
 d8c:	d0 1d       	adc	r29, r0
 d8e:	7e f4       	brtc	.+30     	; 0xdae <__ftoa_engine+0x146>
 d90:	70 33       	cpi	r23, 0x30	; 48
 d92:	11 f4       	brne	.+4      	; 0xd98 <__ftoa_engine+0x130>
 d94:	8a 95       	dec	r24
 d96:	e6 cf       	rjmp	.-52     	; 0xd64 <__ftoa_engine+0xfc>
 d98:	e8 94       	clt
 d9a:	01 50       	subi	r16, 0x01	; 1
 d9c:	30 f0       	brcs	.+12     	; 0xdaa <__ftoa_engine+0x142>
 d9e:	08 0f       	add	r16, r24
 da0:	0a f4       	brpl	.+2      	; 0xda4 <__ftoa_engine+0x13c>
 da2:	00 27       	eor	r16, r16
 da4:	02 17       	cp	r16, r18
 da6:	08 f4       	brcc	.+2      	; 0xdaa <__ftoa_engine+0x142>
 da8:	20 2f       	mov	r18, r16
 daa:	23 95       	inc	r18
 dac:	02 2f       	mov	r16, r18
 dae:	7a 33       	cpi	r23, 0x3A	; 58
 db0:	28 f0       	brcs	.+10     	; 0xdbc <__ftoa_engine+0x154>
 db2:	79 e3       	ldi	r23, 0x39	; 57
 db4:	7d 93       	st	X+, r23
 db6:	2a 95       	dec	r18
 db8:	e9 f7       	brne	.-6      	; 0xdb4 <__ftoa_engine+0x14c>
 dba:	10 c0       	rjmp	.+32     	; 0xddc <__ftoa_engine+0x174>
 dbc:	7d 93       	st	X+, r23
 dbe:	2a 95       	dec	r18
 dc0:	89 f6       	brne	.-94     	; 0xd64 <__ftoa_engine+0xfc>
 dc2:	06 94       	lsr	r0
 dc4:	97 95       	ror	r25
 dc6:	67 95       	ror	r22
 dc8:	37 95       	ror	r19
 dca:	17 95       	ror	r17
 dcc:	17 94       	ror	r1
 dce:	e1 18       	sub	r14, r1
 dd0:	f1 0a       	sbc	r15, r17
 dd2:	43 0b       	sbc	r20, r19
 dd4:	56 0b       	sbc	r21, r22
 dd6:	c9 0b       	sbc	r28, r25
 dd8:	d0 09       	sbc	r29, r0
 dda:	98 f0       	brcs	.+38     	; 0xe02 <__ftoa_engine+0x19a>
 ddc:	23 95       	inc	r18
 dde:	7e 91       	ld	r23, -X
 de0:	73 95       	inc	r23
 de2:	7a 33       	cpi	r23, 0x3A	; 58
 de4:	08 f0       	brcs	.+2      	; 0xde8 <__ftoa_engine+0x180>
 de6:	70 e3       	ldi	r23, 0x30	; 48
 de8:	7c 93       	st	X, r23
 dea:	20 13       	cpse	r18, r16
 dec:	b8 f7       	brcc	.-18     	; 0xddc <__ftoa_engine+0x174>
 dee:	7e 91       	ld	r23, -X
 df0:	70 61       	ori	r23, 0x10	; 16
 df2:	7d 93       	st	X+, r23
 df4:	30 f0       	brcs	.+12     	; 0xe02 <__ftoa_engine+0x19a>
 df6:	83 95       	inc	r24
 df8:	71 e3       	ldi	r23, 0x31	; 49
 dfa:	7d 93       	st	X+, r23
 dfc:	70 e3       	ldi	r23, 0x30	; 48
 dfe:	2a 95       	dec	r18
 e00:	e1 f7       	brne	.-8      	; 0xdfa <__ftoa_engine+0x192>
 e02:	11 24       	eor	r1, r1
 e04:	ef 90       	pop	r14
 e06:	ff 90       	pop	r15
 e08:	0f 91       	pop	r16
 e0a:	1f 91       	pop	r17
 e0c:	cf 91       	pop	r28
 e0e:	df 91       	pop	r29
 e10:	99 27       	eor	r25, r25
 e12:	87 fd       	sbrc	r24, 7
 e14:	90 95       	com	r25
 e16:	08 95       	ret

00000e18 <_exit>:
 e18:	f8 94       	cli

00000e1a <__stop_program>:
 e1a:	ff cf       	rjmp	.-2      	; 0xe1a <__stop_program>
