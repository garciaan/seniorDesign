
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000015dc  00001670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800140  00800140  000016b0  2**0
                  ALLOC
  3 .stab         00001be4  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000134e  00000000  00000000  00003294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000045e2  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000045f4  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000020  00000000  00000000  00004630  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000ba9  00000000  00000000  00004650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008ab  00000000  00000000  000051f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000124  00000000  00000000  00005aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000164  00000000  00000000  00005bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000432  00000000  00000000  00005d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000006d1  00000000  00000000  0000615e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  0000682f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__ctors_end>
       4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      24:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      28:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      34:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      48:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      4c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      54:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      58:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      5c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      60:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      64:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      68:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      6c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      70:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      74:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      78:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      7c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      80:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      84:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      88:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	00 40       	sbci	r16, 0x00	; 0
      8e:	7a 10       	cpse	r7, r10
      90:	f3 5a       	subi	r31, 0xA3	; 163
      92:	00 a0       	ldd	r0, Z+32	; 0x20
      94:	72 4e       	sbci	r23, 0xE2	; 226
      96:	18 09       	sbc	r17, r8
      98:	00 10       	cpse	r0, r0
      9a:	a5 d4       	rcall	.+2378   	; 0x9e6 <i2c_readReg+0x2>
      9c:	e8 00       	.word	0x00e8	; ????
      9e:	00 e8       	ldi	r16, 0x80	; 128
      a0:	76 48       	sbci	r23, 0x86	; 134
      a2:	17 00       	.word	0x0017	; ????
      a4:	00 e4       	ldi	r16, 0x40	; 64
      a6:	0b 54       	subi	r16, 0x4B	; 75
      a8:	02 00       	.word	0x0002	; ????
      aa:	00 ca       	rjmp	.-3072   	; 0xfffff4ac <__eeprom_end+0xff7ef4ac>
      ac:	9a 3b       	cpi	r25, 0xBA	; 186
      ae:	00 00       	nop
      b0:	00 e1       	ldi	r16, 0x10	; 16
      b2:	f5 05       	cpc	r31, r5
      b4:	00 00       	nop
      b6:	80 96       	adiw	r24, 0x20	; 32
      b8:	98 00       	.word	0x0098	; ????
      ba:	00 00       	nop
      bc:	40 42       	sbci	r20, 0x20	; 32
      be:	0f 00       	.word	0x000f	; ????
      c0:	00 00       	nop
      c2:	a0 86       	std	Z+8, r10	; 0x08
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	10 27       	eor	r17, r16
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	e8 03       	fmulsu	r22, r16
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	64 00       	.word	0x0064	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	0a 00       	.word	0x000a	; ????
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	01 00       	.word	0x0001	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	2c 76       	andi	r18, 0x6C	; 108
      e8:	d8 88       	ldd	r13, Y+16	; 0x10
      ea:	dc 67       	ori	r29, 0x7C	; 124
      ec:	4f 08       	sbc	r4, r15
      ee:	23 df       	rcall	.-442    	; 0xffffff36 <__eeprom_end+0xff7eff36>
      f0:	c1 df       	rcall	.-126    	; 0x74 <__SREG__+0x35>
      f2:	ae 59       	subi	r26, 0x9E	; 158
      f4:	e1 b1       	in	r30, 0x01	; 1
      f6:	b7 96       	adiw	r30, 0x27	; 39
      f8:	e5 e3       	ldi	r30, 0x35	; 53
      fa:	e4 53       	subi	r30, 0x34	; 52
      fc:	c6 3a       	cpi	r28, 0xA6	; 166
      fe:	e6 51       	subi	r30, 0x16	; 22
     100:	99 76       	andi	r25, 0x69	; 105
     102:	96 e8       	ldi	r25, 0x86	; 134
     104:	e6 c2       	rjmp	.+1484   	; 0x6d2 <print_distance+0x2a>
     106:	84 26       	eor	r8, r20
     108:	eb 89       	ldd	r30, Y+19	; 0x13
     10a:	8c 9b       	sbis	0x11, 4	; 17
     10c:	62 ed       	ldi	r22, 0xD2	; 210
     10e:	40 7c       	andi	r20, 0xC0	; 192
     110:	6f fc       	.word	0xfc6f	; ????
     112:	ef bc       	out	0x2f, r14	; 47
     114:	9c 9f       	mul	r25, r28
     116:	40 f2       	brcs	.-112    	; 0xa8 <__trampolines_end+0x1c>
     118:	ba a5       	ldd	r27, Y+42	; 0x2a
     11a:	6f a5       	ldd	r22, Y+47	; 0x2f
     11c:	f4 90       	lpm	r15, Z
     11e:	05 5a       	subi	r16, 0xA5	; 165
     120:	2a f7       	brpl	.-54     	; 0xec <__trampolines_end+0x60>
     122:	5c 93       	st	X, r21
     124:	6b 6c       	ori	r22, 0xCB	; 203
     126:	f9 67       	ori	r31, 0x79	; 121
     128:	6d c1       	rjmp	.+730    	; 0x404 <clear_display>
     12a:	1b fc       	.word	0xfc1b	; ????
     12c:	e0 e4       	ldi	r30, 0x40	; 64
     12e:	0d 47       	sbci	r16, 0x7D	; 125
     130:	fe f5       	brtc	.+126    	; 0x1b0 <__do_clear_bss+0x4>
     132:	20 e6       	ldi	r18, 0x60	; 96
     134:	b5 00       	.word	0x00b5	; ????
     136:	d0 ed       	ldi	r29, 0xD0	; 208
     138:	90 2e       	mov	r9, r16
     13a:	03 00       	.word	0x0003	; ????
     13c:	94 35       	cpi	r25, 0x54	; 84
     13e:	77 05       	cpc	r23, r7
     140:	00 80       	ld	r0, Z
     142:	84 1e       	adc	r8, r20
     144:	08 00       	.word	0x0008	; ????
     146:	00 20       	and	r0, r0
     148:	4e 0a       	sbc	r4, r30
     14a:	00 00       	nop
     14c:	00 c8       	rjmp	.-4096   	; 0xfffff14e <__eeprom_end+0xff7ef14e>
     14e:	0c 33       	cpi	r16, 0x3C	; 60
     150:	33 33       	cpi	r19, 0x33	; 51
     152:	33 0f       	add	r19, r19
     154:	98 6e       	ori	r25, 0xE8	; 232
     156:	12 83       	std	Z+2, r17	; 0x02
     158:	11 41       	sbci	r17, 0x11	; 17
     15a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     15c:	21 14       	cp	r2, r1
     15e:	89 3b       	cpi	r24, 0xB9	; 185
     160:	e6 55       	subi	r30, 0x56	; 86
     162:	16 cf       	rjmp	.-468    	; 0xffffff90 <__eeprom_end+0xff7eff90>
     164:	fe e6       	ldi	r31, 0x6E	; 110
     166:	db 18       	sub	r13, r11
     168:	d1 84       	ldd	r13, Z+9	; 0x09
     16a:	4b 38       	cpi	r20, 0x8B	; 139
     16c:	1b f7       	brvc	.-58     	; 0x134 <__trampolines_end+0xa8>
     16e:	7c 1d       	adc	r23, r12
     170:	90 1d       	adc	r25, r0
     172:	a4 bb       	out	0x14, r26	; 20
     174:	e4 24       	eor	r14, r4
     176:	20 32       	cpi	r18, 0x20	; 32
     178:	84 72       	andi	r24, 0x24	; 36
     17a:	5e 22       	and	r5, r30
     17c:	81 00       	.word	0x0081	; ????
     17e:	c9 f1       	breq	.+114    	; 0x1f2 <move+0x1a>
     180:	24 ec       	ldi	r18, 0xC4	; 196
     182:	a1 e5       	ldi	r26, 0x51	; 81
     184:	3d 27       	eor	r19, r29

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d0 e1       	ldi	r29, 0x10	; 16
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_copy_data>:
     192:	11 e0       	ldi	r17, 0x01	; 1
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	ec ed       	ldi	r30, 0xDC	; 220
     19a:	f5 e1       	ldi	r31, 0x15	; 21
     19c:	00 e0       	ldi	r16, 0x00	; 0
     19e:	0b bf       	out	0x3b, r16	; 59
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x14>
     1a2:	07 90       	elpm	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	a0 34       	cpi	r26, 0x40	; 64
     1a8:	b1 07       	cpc	r27, r17
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0x10>

000001ac <__do_clear_bss>:
     1ac:	21 e0       	ldi	r18, 0x01	; 1
     1ae:	a0 e4       	ldi	r26, 0x40	; 64
     1b0:	b1 e0       	ldi	r27, 0x01	; 1
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
     1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
     1b6:	a2 34       	cpi	r26, 0x42	; 66
     1b8:	b2 07       	cpc	r27, r18
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
     1bc:	0e 94 32 05 	call	0xa64	; 0xa64 <main>
     1c0:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c8 <TIM16_WriteTCNT1>:
	}

    return 0;
}

void TIM16_WriteTCNT1( unsigned int i ) {
     1c8:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     1ca:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     1cc:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     1ce:	3d bd       	out	0x2d, r19	; 45
     1d0:	2c bd       	out	0x2c, r18	; 44
    sei();
     1d2:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     1d4:	9f bf       	out	0x3f, r25	; 63
     1d6:	08 95       	ret

000001d8 <move>:
    OCR1B = Right motor
    maybe OCR1C = Z motor?

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
     1d8:	8f 92       	push	r8
     1da:	9f 92       	push	r9
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	4b 01       	movw	r8, r22
     1ee:	5c 01       	movw	r10, r24
     1f0:	69 01       	movw	r12, r18
     1f2:	7a 01       	movw	r14, r20
    if (left < MIN_INPUT){
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	48 ec       	ldi	r20, 0xC8	; 200
     1fa:	52 ec       	ldi	r21, 0xC2	; 194
     1fc:	0e 94 74 06 	call	0xce8	; 0xce8 <__cmpsf2>
     200:	87 fd       	sbrc	r24, 7
     202:	31 c0       	rjmp	.+98     	; 0x266 <move+0x8e>
        left = MIN_INPUT;
    }
    if (left > MAX_INPUT){
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	48 ec       	ldi	r20, 0xC8	; 200
     20a:	52 e4       	ldi	r21, 0x42	; 66
     20c:	c5 01       	movw	r24, r10
     20e:	b4 01       	movw	r22, r8
     210:	0e 94 cc 07 	call	0xf98	; 0xf98 <__gesf2>
     214:	18 16       	cp	r1, r24
     216:	6c f5       	brge	.+90     	; 0x272 <move+0x9a>
     218:	c8 ed       	ldi	r28, 0xD8	; 216
     21a:	de e0       	ldi	r29, 0x0E	; 14
        left = MAX_INPUT;
    }
    if (right < MIN_INPUT){
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	48 ec       	ldi	r20, 0xC8	; 200
     222:	52 ec       	ldi	r21, 0xC2	; 194
     224:	c7 01       	movw	r24, r14
     226:	b6 01       	movw	r22, r12
     228:	0e 94 74 06 	call	0xce8	; 0xce8 <__cmpsf2>
     22c:	87 fd       	sbrc	r24, 7
     22e:	1e c0       	rjmp	.+60     	; 0x26c <move+0x94>
        right = MIN_INPUT;
    }
    if (right > MAX_INPUT){
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	48 ec       	ldi	r20, 0xC8	; 200
     236:	52 e4       	ldi	r21, 0x42	; 66
     238:	c7 01       	movw	r24, r14
     23a:	b6 01       	movw	r22, r12
     23c:	0e 94 cc 07 	call	0xf98	; 0xf98 <__gesf2>
     240:	18 16       	cp	r1, r24
     242:	7c f5       	brge	.+94     	; 0x2a2 <move+0xca>
     244:	68 ed       	ldi	r22, 0xD8	; 216
     246:	7e e0       	ldi	r23, 0x0E	; 14
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
     248:	db bd       	out	0x2b, r29	; 43
     24a:	ca bd       	out	0x2a, r28	; 42
    OCR1B = right_speed;
     24c:	79 bd       	out	0x29, r23	; 41
     24e:	68 bd       	out	0x28, r22	; 40
	string2lcd(utoa(left_speed,buffer,10));
	home_line2();
	string2lcd(utoa(right_speed,buffer,10));
    */

}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	ff 90       	pop	r15
     256:	ef 90       	pop	r14
     258:	df 90       	pop	r13
     25a:	cf 90       	pop	r12
     25c:	bf 90       	pop	r11
     25e:	af 90       	pop	r10
     260:	9f 90       	pop	r9
     262:	8f 90       	pop	r8
     264:	08 95       	ret
     266:	c8 e9       	ldi	r28, 0x98	; 152
     268:	d8 e0       	ldi	r29, 0x08	; 8
     26a:	d8 cf       	rjmp	.-80     	; 0x21c <move+0x44>
     26c:	68 e9       	ldi	r22, 0x98	; 152
     26e:	78 e0       	ldi	r23, 0x08	; 8
     270:	eb cf       	rjmp	.-42     	; 0x248 <move+0x70>
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	48 ec       	ldi	r20, 0xC8	; 200
     278:	52 e4       	ldi	r21, 0x42	; 66
     27a:	c5 01       	movw	r24, r10
     27c:	b4 01       	movw	r22, r8
     27e:	0e 94 08 06 	call	0xc10	; 0xc10 <__addsf3>
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	40 e0       	ldi	r20, 0x00	; 0
     288:	51 e4       	ldi	r21, 0x41	; 65
     28a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__mulsf3>
     28e:	20 e0       	ldi	r18, 0x00	; 0
     290:	30 e8       	ldi	r19, 0x80	; 128
     292:	49 e0       	ldi	r20, 0x09	; 9
     294:	55 e4       	ldi	r21, 0x45	; 69
     296:	0e 94 08 06 	call	0xc10	; 0xc10 <__addsf3>
     29a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fixunssfsi>
     29e:	eb 01       	movw	r28, r22
     2a0:	bd cf       	rjmp	.-134    	; 0x21c <move+0x44>
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	48 ec       	ldi	r20, 0xC8	; 200
     2a8:	52 e4       	ldi	r21, 0x42	; 66
     2aa:	c7 01       	movw	r24, r14
     2ac:	b6 01       	movw	r22, r12
     2ae:	0e 94 08 06 	call	0xc10	; 0xc10 <__addsf3>
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	51 e4       	ldi	r21, 0x41	; 65
     2ba:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__mulsf3>
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e8       	ldi	r19, 0x80	; 128
     2c2:	49 e0       	ldi	r20, 0x09	; 9
     2c4:	55 e4       	ldi	r21, 0x45	; 69
     2c6:	0e 94 08 06 	call	0xc10	; 0xc10 <__addsf3>
     2ca:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fixunssfsi>
     2ce:	bc cf       	rjmp	.-136    	; 0x248 <move+0x70>

000002d0 <blink>:
	string2lcd(itoa(STOP,buffer,10));
}



void blink(int led, int speed){
     2d0:	65 36       	cpi	r22, 0x65	; 101
     2d2:	71 05       	cpc	r23, r1
     2d4:	14 f0       	brlt	.+4      	; 0x2da <blink+0xa>
     2d6:	64 e6       	ldi	r22, 0x64	; 100
     2d8:	70 e0       	ldi	r23, 0x00	; 0
    }
    if (speed > 100){
        speed = 100;
    }
    int i;
    PORTB |= (1 << led);
     2da:	98 b3       	in	r25, 0x18	; 24
     2dc:	41 e0       	ldi	r20, 0x01	; 1
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <blink+0x14>
     2e2:	44 0f       	add	r20, r20
     2e4:	8a 95       	dec	r24
     2e6:	ea f7       	brpl	.-6      	; 0x2e2 <blink+0x12>
     2e8:	89 2f       	mov	r24, r25
     2ea:	84 2b       	or	r24, r20
     2ec:	88 bb       	out	0x18, r24	; 24
    for (i = 0; i < (121-speed); ++i){
     2ee:	77 fd       	sbrc	r23, 7
     2f0:	15 c0       	rjmp	.+42     	; 0x31c <blink+0x4c>
     2f2:	29 e7       	ldi	r18, 0x79	; 121
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	26 1b       	sub	r18, r22
     2f8:	37 0b       	sbc	r19, r23
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fe:	ef e9       	ldi	r30, 0x9F	; 159
     300:	ff e0       	ldi	r31, 0x0F	; 15
     302:	31 97       	sbiw	r30, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <blink+0x32>
     306:	00 c0       	rjmp	.+0      	; 0x308 <blink+0x38>
     308:	00 00       	nop
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	82 17       	cp	r24, r18
     30e:	93 07       	cpc	r25, r19
     310:	b1 f7       	brne	.-20     	; 0x2fe <blink+0x2e>
        _delay_ms(1);
    }
    PORTB &= ~(1 << led);
     312:	88 b3       	in	r24, 0x18	; 24
     314:	40 95       	com	r20
     316:	48 23       	and	r20, r24
     318:	48 bb       	out	0x18, r20	; 24
     31a:	08 95       	ret
    if (speed > 100){
        speed = 100;
    }
    int i;
    PORTB |= (1 << led);
    for (i = 0; i < (121-speed); ++i){
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	e8 cf       	rjmp	.-48     	; 0x2f2 <blink+0x22>

00000322 <trigger>:
    string2lcd(str);
    return distance;
}

void trigger(unsigned int pin){
    PORTE |= pin;
     322:	93 b1       	in	r25, 0x03	; 3
     324:	98 2b       	or	r25, r24
     326:	93 b9       	out	0x03, r25	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     328:	90 e5       	ldi	r25, 0x50	; 80
     32a:	9a 95       	dec	r25
     32c:	f1 f7       	brne	.-4      	; 0x32a <trigger+0x8>
    _delay_us(15);
    PORTE &= ~pin;
     32e:	93 b1       	in	r25, 0x03	; 3
     330:	80 95       	com	r24
     332:	89 23       	and	r24, r25
     334:	83 b9       	out	0x03, r24	; 3
     336:	08 95       	ret

00000338 <get_distance>:
    string2lcd(str);
    return distance;
}

void trigger(unsigned int pin){
    PORTE |= pin;
     338:	23 b1       	in	r18, 0x03	; 3
     33a:	28 2b       	or	r18, r24
     33c:	23 b9       	out	0x03, r18	; 3
     33e:	20 e5       	ldi	r18, 0x50	; 80
     340:	2a 95       	dec	r18
     342:	f1 f7       	brne	.-4      	; 0x340 <get_distance+0x8>
    _delay_us(15);
    PORTE &= ~pin;
     344:	33 b1       	in	r19, 0x03	; 3
     346:	28 2f       	mov	r18, r24
     348:	20 95       	com	r18
     34a:	23 23       	and	r18, r19
     34c:	23 b9       	out	0x03, r18	; 3
     34e:	88 0f       	add	r24, r24
     350:	99 1f       	adc	r25, r25

double get_distance(unsigned int pin){
    double distance = 0;
    int count = 0;
    trigger(pin);
    while ((PINE & (pin << 1)) == 0); //while pinc port 1 is low, aka wait for echo to raise
     352:	21 b1       	in	r18, 0x01	; 1
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	28 23       	and	r18, r24
     358:	39 23       	and	r19, r25
     35a:	23 2b       	or	r18, r19
     35c:	d1 f3       	breq	.-12     	; 0x352 <get_distance+0x1a>
    while (1){
        if ((PINE & (pin << 1)) != (pin << 1)){ //wait for pinc port 1 to go back to low
     35e:	21 b1       	in	r18, 0x01	; 1
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	28 23       	and	r18, r24
     364:	39 23       	and	r19, r25
     366:	82 17       	cp	r24, r18
     368:	93 07       	cpc	r25, r19
     36a:	69 f5       	brne	.+90     	; 0x3c6 <get_distance+0x8e>
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	03 c0       	rjmp	.+6      	; 0x378 <get_distance+0x40>
            break;
        }
        if (count == 255){
     372:	6f 3f       	cpi	r22, 0xFF	; 255
     374:	71 05       	cpc	r23, r1
     376:	11 f1       	breq	.+68     	; 0x3bc <get_distance+0x84>
     378:	e7 ec       	ldi	r30, 0xC7	; 199
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	31 97       	sbiw	r30, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <get_distance+0x44>
     380:	00 c0       	rjmp	.+0      	; 0x382 <get_distance+0x4a>
     382:	00 00       	nop
            break;
        }
        _delay_us(50);
        ++count;
     384:	6f 5f       	subi	r22, 0xFF	; 255
     386:	7f 4f       	sbci	r23, 0xFF	; 255
    double distance = 0;
    int count = 0;
    trigger(pin);
    while ((PINE & (pin << 1)) == 0); //while pinc port 1 is low, aka wait for echo to raise
    while (1){
        if ((PINE & (pin << 1)) != (pin << 1)){ //wait for pinc port 1 to go back to low
     388:	21 b1       	in	r18, 0x01	; 1
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	28 23       	and	r18, r24
     38e:	39 23       	and	r19, r25
     390:	82 17       	cp	r24, r18
     392:	93 07       	cpc	r25, r19
     394:	71 f3       	breq	.-36     	; 0x372 <get_distance+0x3a>
     396:	07 2e       	mov	r0, r23
     398:	00 0c       	add	r0, r0
     39a:	88 0b       	sbc	r24, r24
     39c:	99 0b       	sbc	r25, r25
     39e:	0e 94 1c 07 	call	0xe38	; 0xe38 <__floatsisf>
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	40 e2       	ldi	r20, 0x20	; 32
     3a8:	52 e4       	ldi	r21, 0x42	; 66
     3aa:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__mulsf3>
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	48 e6       	ldi	r20, 0x68	; 104
     3b4:	52 e4       	ldi	r21, 0x42	; 66
     3b6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__divsf3>
     3ba:	08 95       	ret
     3bc:	61 eb       	ldi	r22, 0xB1	; 177
     3be:	7c ed       	ldi	r23, 0xDC	; 220
     3c0:	8f e2       	ldi	r24, 0x2F	; 47
     3c2:	93 e4       	ldi	r25, 0x43	; 67
    distance = (double)count * 40;
    distance /= 58;


    return distance;
}
     3c4:	08 95       	ret
    double distance = 0;
    int count = 0;
    trigger(pin);
    while ((PINE & (pin << 1)) == 0); //while pinc port 1 is low, aka wait for echo to raise
    while (1){
        if ((PINE & (pin << 1)) != (pin << 1)){ //wait for pinc port 1 to go back to low
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	cb 01       	movw	r24, r22
     3cc:	08 95       	ret

000003ce <USART_Init>:
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     3ce:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
     3d2:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     3d6:	88 e1       	ldi	r24, 0x18	; 24
     3d8:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
     3dc:	8c e0       	ldi	r24, 0x0C	; 12
     3de:	80 93 9d 00 	sts	0x009D, r24
     3e2:	08 95       	ret

000003e4 <USART_Transmit>:
}
void USART_Transmit( unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     3e4:	90 91 9b 00 	lds	r25, 0x009B
     3e8:	95 ff       	sbrs	r25, 5
     3ea:	fc cf       	rjmp	.-8      	; 0x3e4 <USART_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     3ec:	80 93 9c 00 	sts	0x009C, r24
     3f0:	08 95       	ret

000003f2 <strobe_lcd>:
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     3f2:	e2 e6       	ldi	r30, 0x62	; 98
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	88 60       	ori	r24, 0x08	; 8
     3fa:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     3fc:	80 81       	ld	r24, Z
     3fe:	87 7f       	andi	r24, 0xF7	; 247
     400:	80 83       	st	Z, r24
     402:	08 95       	ret

00000404 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     404:	77 9b       	sbis	0x0e, 7	; 14
     406:	fe cf       	rjmp	.-4      	; 0x404 <clear_display>
    SPDR = 0x00;    //command, not data
     408:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     40a:	77 9b       	sbis	0x0e, 7	; 14
     40c:	fe cf       	rjmp	.-4      	; 0x40a <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     412:	77 9b       	sbis	0x0e, 7	; 14
     414:	fe cf       	rjmp	.-4      	; 0x412 <clear_display+0xe>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     416:	80 91 62 00 	lds	r24, 0x0062
     41a:	88 60       	ori	r24, 0x08	; 8
     41c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     420:	80 91 62 00 	lds	r24, 0x0062
     424:	87 7f       	andi	r24, 0xF7	; 247
     426:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42a:	8f e9       	ldi	r24, 0x9F	; 159
     42c:	98 e2       	ldi	r25, 0x28	; 40
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <clear_display+0x2a>
     432:	00 c0       	rjmp	.+0      	; 0x434 <clear_display+0x30>
     434:	00 00       	nop
     436:	08 95       	ret

00000438 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     438:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     43a:	77 9b       	sbis	0x0e, 7	; 14
     43c:	fe cf       	rjmp	.-4      	; 0x43a <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     43e:	80 ec       	ldi	r24, 0xC0	; 192
     440:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     442:	77 9b       	sbis	0x0e, 7	; 14
     444:	fe cf       	rjmp	.-4      	; 0x442 <home_line2+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     446:	80 91 62 00 	lds	r24, 0x0062
     44a:	88 60       	ori	r24, 0x08	; 8
     44c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     450:	80 91 62 00 	lds	r24, 0x0062
     454:	87 7f       	andi	r24, 0xF7	; 247
     456:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     45a:	85 ec       	ldi	r24, 0xC5	; 197
     45c:	8a 95       	dec	r24
     45e:	f1 f7       	brne	.-4      	; 0x45c <home_line2+0x24>
     460:	00 00       	nop
     462:	08 95       	ret

00000464 <char2lcd>:

//sends a char to the LCD
void char2lcd(char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     468:	77 9b       	sbis	0x0e, 7	; 14
     46a:	fe cf       	rjmp	.-4      	; 0x468 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     46c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     46e:	77 9b       	sbis	0x0e, 7	; 14
     470:	fe cf       	rjmp	.-4      	; 0x46e <char2lcd+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     472:	80 91 62 00 	lds	r24, 0x0062
     476:	88 60       	ori	r24, 0x08	; 8
     478:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     47c:	80 91 62 00 	lds	r24, 0x0062
     480:	87 7f       	andi	r24, 0xF7	; 247
     482:	80 93 62 00 	sts	0x0062, r24
     486:	85 ec       	ldi	r24, 0xC5	; 197
     488:	8a 95       	dec	r24
     48a:	f1 f7       	brne	.-4      	; 0x488 <char2lcd+0x24>
     48c:	00 00       	nop
     48e:	08 95       	ret

00000490 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	fc 01       	movw	r30, r24
     496:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     49c:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     49e:	77 9b       	sbis	0x0e, 7	; 14
     4a0:	fe cf       	rjmp	.-4      	; 0x49e <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     4a2:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4a4:	77 9b       	sbis	0x0e, 7	; 14
     4a6:	fe cf       	rjmp	.-4      	; 0x4a4 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     4a8:	8d 91       	ld	r24, X+
     4aa:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     4ac:	77 9b       	sbis	0x0e, 7	; 14
     4ae:	fe cf       	rjmp	.-4      	; 0x4ac <string2lcd+0x1c>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     4b0:	90 91 62 00 	lds	r25, 0x0062
     4b4:	98 60       	ori	r25, 0x08	; 8
     4b6:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     4ba:	90 91 62 00 	lds	r25, 0x0062
     4be:	97 7f       	andi	r25, 0xF7	; 247
     4c0:	90 93 62 00 	sts	0x0062, r25
     4c4:	85 ec       	ldi	r24, 0xC5	; 197
     4c6:	8a 95       	dec	r24
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <string2lcd+0x36>
     4ca:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
     4cc:	4f 5f       	subi	r20, 0xFF	; 255
     4ce:	5f 4f       	sbci	r21, 0xFF	; 255
     4d0:	ef 01       	movw	r28, r30
     4d2:	09 90       	ld	r0, Y+
     4d4:	00 20       	and	r0, r0
     4d6:	e9 f7       	brne	.-6      	; 0x4d2 <string2lcd+0x42>
     4d8:	9e 01       	movw	r18, r28
     4da:	2e 1b       	sub	r18, r30
     4dc:	3f 0b       	sbc	r19, r31
     4de:	22 50       	subi	r18, 0x02	; 2
     4e0:	31 09       	sbc	r19, r1
     4e2:	24 17       	cp	r18, r20
     4e4:	35 07       	cpc	r19, r21
     4e6:	d8 f6       	brcc	.-74     	; 0x49e <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <forward>:
	string2lcd(utoa(right_speed,buffer,10));
    */

}

void forward(int speed){
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	60 97       	sbiw	r28, 0x10	; 16
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	cd bf       	out	0x3d, r28	; 61
     502:	97 fd       	sbrc	r25, 7
     504:	41 c0       	rjmp	.+130    	; 0x588 <forward+0x9a>
     506:	85 36       	cpi	r24, 0x65	; 101
     508:	91 05       	cpc	r25, r1
     50a:	14 f0       	brlt	.+4      	; 0x510 <forward+0x22>
     50c:	84 e6       	ldi	r24, 0x64	; 100
     50e:	90 e0       	ldi	r25, 0x00	; 0
		speed = 100;
	}
	if (speed < 0){
		speed = 0;
	}
	speed *= 4;
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25

	PORTB |= (1 << 4);
     518:	c4 9a       	sbi	0x18, 4	; 24
	int i;
	for (i = 0; i < STOP + speed; ++i){
     51a:	ac 01       	movw	r20, r24
     51c:	45 52       	subi	r20, 0x25	; 37
     51e:	5a 4f       	sbci	r21, 0xFA	; 250
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	65 e0       	ldi	r22, 0x05	; 5
     526:	6a 95       	dec	r22
     528:	f1 f7       	brne	.-4      	; 0x526 <forward+0x38>
     52a:	00 00       	nop
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	42 17       	cp	r20, r18
     532:	53 07       	cpc	r21, r19
     534:	bc f7       	brge	.-18     	; 0x524 <forward+0x36>
		_delay_us(1);
	}
	//_delay_us(1600);
	PORTB &= ~(1 << 4);
     536:	c4 98       	cbi	0x18, 4	; 24
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     538:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     53a:	77 9b       	sbis	0x0e, 7	; 14
     53c:	fe cf       	rjmp	.-4      	; 0x53a <forward+0x4c>
    SPDR = 0xC0;   // cursor go home on line 2
     53e:	20 ec       	ldi	r18, 0xC0	; 192
     540:	2f b9       	out	0x0f, r18	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     542:	77 9b       	sbis	0x0e, 7	; 14
     544:	fe cf       	rjmp	.-4      	; 0x542 <forward+0x54>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     546:	20 91 62 00 	lds	r18, 0x0062
     54a:	28 60       	ori	r18, 0x08	; 8
     54c:	20 93 62 00 	sts	0x0062, r18
    PORTF &= ~0x08;
     550:	20 91 62 00 	lds	r18, 0x0062
     554:	27 7f       	andi	r18, 0xF7	; 247
     556:	20 93 62 00 	sts	0x0062, r18
     55a:	25 ec       	ldi	r18, 0xC5	; 197
     55c:	2a 95       	dec	r18
     55e:	f1 f7       	brne	.-4      	; 0x55c <forward+0x6e>
     560:	00 00       	nop
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     562:	4a e0       	ldi	r20, 0x0A	; 10
     564:	be 01       	movw	r22, r28
     566:	6f 5f       	subi	r22, 0xFF	; 255
     568:	7f 4f       	sbci	r23, 0xFF	; 255
     56a:	84 52       	subi	r24, 0x24	; 36
     56c:	9a 4f       	sbci	r25, 0xFA	; 250
     56e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__itoa_ncheck>
	}
	//_delay_us(1600);
	PORTB &= ~(1 << 4);
	home_line2();
	char buffer[16];
	string2lcd(itoa(STOP + speed,buffer,10));
     572:	0e 94 48 02 	call	0x490	; 0x490 <string2lcd>
}
     576:	60 96       	adiw	r28, 0x10	; 16
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	bc cf       	rjmp	.-136    	; 0x506 <forward+0x18>

0000058e <reverse>:
void reverse(int speed){
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	60 97       	sbiw	r28, 0x10	; 16
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	97 fd       	sbrc	r25, 7
     5a8:	42 c0       	rjmp	.+132    	; 0x62e <reverse+0xa0>
     5aa:	85 36       	cpi	r24, 0x65	; 101
     5ac:	91 05       	cpc	r25, r1
     5ae:	14 f0       	brlt	.+4      	; 0x5b4 <reverse+0x26>
     5b0:	84 e6       	ldi	r24, 0x64	; 100
     5b2:	90 e0       	ldi	r25, 0x00	; 0
		speed = 100;
	}
	if (speed < 0){
		speed = 0;
	}
	speed *= 4;
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     5bc:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5be:	77 9b       	sbis	0x0e, 7	; 14
     5c0:	fe cf       	rjmp	.-4      	; 0x5be <reverse+0x30>
    SPDR = 0xC0;   // cursor go home on line 2
     5c2:	20 ec       	ldi	r18, 0xC0	; 192
     5c4:	2f b9       	out	0x0f, r18	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5c6:	77 9b       	sbis	0x0e, 7	; 14
     5c8:	fe cf       	rjmp	.-4      	; 0x5c6 <reverse+0x38>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     5ca:	20 91 62 00 	lds	r18, 0x0062
     5ce:	28 60       	ori	r18, 0x08	; 8
     5d0:	20 93 62 00 	sts	0x0062, r18
    PORTF &= ~0x08;
     5d4:	20 91 62 00 	lds	r18, 0x0062
     5d8:	27 7f       	andi	r18, 0xF7	; 247
     5da:	20 93 62 00 	sts	0x0062, r18
     5de:	25 ec       	ldi	r18, 0xC5	; 197
     5e0:	2a 95       	dec	r18
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <reverse+0x52>
     5e4:	00 00       	nop
		speed = 0;
	}
	speed *= 4;
	home_line2();
	char buffer[16];
	string2lcd(itoa(STOP - speed,buffer,10));
     5e6:	0c ed       	ldi	r16, 0xDC	; 220
     5e8:	15 e0       	ldi	r17, 0x05	; 5
     5ea:	08 1b       	sub	r16, r24
     5ec:	19 0b       	sbc	r17, r25
     5ee:	4a e0       	ldi	r20, 0x0A	; 10
     5f0:	be 01       	movw	r22, r28
     5f2:	6f 5f       	subi	r22, 0xFF	; 255
     5f4:	7f 4f       	sbci	r23, 0xFF	; 255
     5f6:	c8 01       	movw	r24, r16
     5f8:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__itoa_ncheck>
     5fc:	0e 94 48 02 	call	0x490	; 0x490 <string2lcd>
	PORTB |= (1 << 4);
     600:	c4 9a       	sbi	0x18, 4	; 24
	int i;
	for (i = 0; i < STOP - speed; ++i){
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	25 e0       	ldi	r18, 0x05	; 5
     608:	2a 95       	dec	r18
     60a:	f1 f7       	brne	.-4      	; 0x608 <reverse+0x7a>
     60c:	00 00       	nop
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	08 17       	cp	r16, r24
     612:	19 07       	cpc	r17, r25
     614:	c1 f7       	brne	.-16     	; 0x606 <reverse+0x78>
		_delay_us(1);
	}
	
	//_delay_us(1400);
	PORTB &= ~(1 << 4);
     616:	c4 98       	cbi	0x18, 4	; 24
}
     618:	60 96       	adiw	r28, 0x10	; 16
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	08 95       	ret
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	bb cf       	rjmp	.-138    	; 0x5aa <reverse+0x1c>

00000634 <stop>:
void stop(){
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	60 97       	sbiw	r28, 0x10	; 16
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	de bf       	out	0x3e, r29	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	cd bf       	out	0x3d, r28	; 61
	PORTB |= (1 << 4);
     648:	c4 9a       	sbi	0x18, 4	; 24
     64a:	8f e6       	ldi	r24, 0x6F	; 111
     64c:	97 e1       	ldi	r25, 0x17	; 23
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	f1 f7       	brne	.-4      	; 0x64e <stop+0x1a>
     652:	00 c0       	rjmp	.+0      	; 0x654 <stop+0x20>
     654:	00 00       	nop
	_delay_us(STOP);
	PORTB &= ~(1 << 4);
     656:	c4 98       	cbi	0x18, 4	; 24
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     658:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     65a:	77 9b       	sbis	0x0e, 7	; 14
     65c:	fe cf       	rjmp	.-4      	; 0x65a <stop+0x26>
    SPDR = 0xC0;   // cursor go home on line 2
     65e:	80 ec       	ldi	r24, 0xC0	; 192
     660:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     662:	77 9b       	sbis	0x0e, 7	; 14
     664:	fe cf       	rjmp	.-4      	; 0x662 <stop+0x2e>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     666:	80 91 62 00 	lds	r24, 0x0062
     66a:	88 60       	ori	r24, 0x08	; 8
     66c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     670:	80 91 62 00 	lds	r24, 0x0062
     674:	87 7f       	andi	r24, 0xF7	; 247
     676:	80 93 62 00 	sts	0x0062, r24
     67a:	95 ec       	ldi	r25, 0xC5	; 197
     67c:	9a 95       	dec	r25
     67e:	f1 f7       	brne	.-4      	; 0x67c <stop+0x48>
     680:	00 00       	nop
     682:	4a e0       	ldi	r20, 0x0A	; 10
     684:	be 01       	movw	r22, r28
     686:	6f 5f       	subi	r22, 0xFF	; 255
     688:	7f 4f       	sbci	r23, 0xFF	; 255
     68a:	8c ed       	ldi	r24, 0xDC	; 220
     68c:	95 e0       	ldi	r25, 0x05	; 5
     68e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__itoa_ncheck>
	PORTB |= (1 << 4);
	_delay_us(STOP);
	PORTB &= ~(1 << 4);
	home_line2();
	char buffer[16];
	string2lcd(itoa(STOP,buffer,10));
     692:	0e 94 48 02 	call	0x490	; 0x490 <string2lcd>
}
     696:	60 96       	adiw	r28, 0x10	; 16
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <print_distance>:
        _delay_ms(1);
    }
    PORTB &= ~(1 << led);
    */
}
double print_distance(unsigned int pin){
     6a8:	cf 92       	push	r12
     6aa:	df 92       	push	r13
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	60 97       	sbiw	r28, 0x10	; 16
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
    char str[16];
    double distance = 0;
    distance = get_distance(pin);
     6c8:	0e 94 9c 01 	call	0x338	; 0x338 <get_distance>
     6cc:	6b 01       	movw	r12, r22
     6ce:	7c 01       	movw	r14, r24
    dtostrf(distance,1,6,str);
     6d0:	8e 01       	movw	r16, r28
     6d2:	0f 5f       	subi	r16, 0xFF	; 255
     6d4:	1f 4f       	sbci	r17, 0xFF	; 255
     6d6:	26 e0       	ldi	r18, 0x06	; 6
     6d8:	41 e0       	ldi	r20, 0x01	; 1
     6da:	0e 94 3e 08 	call	0x107c	; 0x107c <dtostrf>
    string2lcd(str);
     6de:	c8 01       	movw	r24, r16
     6e0:	0e 94 48 02 	call	0x490	; 0x490 <string2lcd>
    return distance;
}
     6e4:	c7 01       	movw	r24, r14
     6e6:	b6 01       	movw	r22, r12
     6e8:	60 96       	adiw	r28, 0x10	; 16
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	08 95       	ret

00000706 <spi_init>:
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     706:	e1 e6       	ldi	r30, 0x61	; 97
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	88 60       	ori	r24, 0x08	; 8
     70e:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     710:	88 b3       	in	r24, 0x18	; 24
     712:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     714:	87 b3       	in	r24, 0x17	; 23
     716:	87 60       	ori	r24, 0x07	; 7
     718:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     71a:	80 e5       	ldi	r24, 0x50	; 80
     71c:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	8e b9       	out	0x0e, r24	; 14
     722:	08 95       	ret

00000724 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     724:	8f e5       	ldi	r24, 0x5F	; 95
     726:	9a ee       	ldi	r25, 0xEA	; 234
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <lcd_init+0x4>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <lcd_init+0xa>
     72e:	00 00       	nop
     730:	23 e0       	ldi	r18, 0x03	; 3
     732:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     734:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     736:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     738:	77 9b       	sbis	0x0e, 7	; 14
     73a:	fe cf       	rjmp	.-4      	; 0x738 <lcd_init+0x14>
        SPDR = 0x30;
     73c:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     73e:	77 9b       	sbis	0x0e, 7	; 14
     740:	fe cf       	rjmp	.-4      	; 0x73e <lcd_init+0x1a>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     742:	80 91 62 00 	lds	r24, 0x0062
     746:	88 60       	ori	r24, 0x08	; 8
     748:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     74c:	80 91 62 00 	lds	r24, 0x0062
     750:	87 7f       	andi	r24, 0xF7	; 247
     752:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     756:	85 ec       	ldi	r24, 0xC5	; 197
     758:	8a 95       	dec	r24
     75a:	f1 f7       	brne	.-4      	; 0x758 <lcd_init+0x34>
     75c:	00 00       	nop
     75e:	21 50       	subi	r18, 0x01	; 1
     760:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     762:	49 f7       	brne	.-46     	; 0x736 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     764:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     766:	77 9b       	sbis	0x0e, 7	; 14
     768:	fe cf       	rjmp	.-4      	; 0x766 <lcd_init+0x42>
    SPDR = 0x38;
     76a:	88 e3       	ldi	r24, 0x38	; 56
     76c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     76e:	77 9b       	sbis	0x0e, 7	; 14
     770:	fe cf       	rjmp	.-4      	; 0x76e <lcd_init+0x4a>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     772:	80 91 62 00 	lds	r24, 0x0062
     776:	88 60       	ori	r24, 0x08	; 8
     778:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     77c:	80 91 62 00 	lds	r24, 0x0062
     780:	87 7f       	andi	r24, 0xF7	; 247
     782:	80 93 62 00 	sts	0x0062, r24
     786:	95 ec       	ldi	r25, 0xC5	; 197
     788:	9a 95       	dec	r25
     78a:	f1 f7       	brne	.-4      	; 0x788 <lcd_init+0x64>
     78c:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     78e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     790:	77 9b       	sbis	0x0e, 7	; 14
     792:	fe cf       	rjmp	.-4      	; 0x790 <lcd_init+0x6c>
    SPDR = 0x08;
     794:	88 e0       	ldi	r24, 0x08	; 8
     796:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     798:	77 9b       	sbis	0x0e, 7	; 14
     79a:	fe cf       	rjmp	.-4      	; 0x798 <lcd_init+0x74>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     79c:	80 91 62 00 	lds	r24, 0x0062
     7a0:	88 60       	ori	r24, 0x08	; 8
     7a2:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     7a6:	80 91 62 00 	lds	r24, 0x0062
     7aa:	87 7f       	andi	r24, 0xF7	; 247
     7ac:	80 93 62 00 	sts	0x0062, r24
     7b0:	85 ec       	ldi	r24, 0xC5	; 197
     7b2:	8a 95       	dec	r24
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <lcd_init+0x8e>
     7b6:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     7b8:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7ba:	77 9b       	sbis	0x0e, 7	; 14
     7bc:	fe cf       	rjmp	.-4      	; 0x7ba <lcd_init+0x96>
    SPDR = 0x01;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7c2:	77 9b       	sbis	0x0e, 7	; 14
     7c4:	fe cf       	rjmp	.-4      	; 0x7c2 <lcd_init+0x9e>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     7c6:	80 91 62 00 	lds	r24, 0x0062
     7ca:	88 60       	ori	r24, 0x08	; 8
     7cc:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     7d0:	80 91 62 00 	lds	r24, 0x0062
     7d4:	87 7f       	andi	r24, 0xF7	; 247
     7d6:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7da:	8f ef       	ldi	r24, 0xFF	; 255
     7dc:	98 e1       	ldi	r25, 0x18	; 24
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <lcd_init+0xba>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <lcd_init+0xc0>
     7e4:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
     7e6:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7e8:	77 9b       	sbis	0x0e, 7	; 14
     7ea:	fe cf       	rjmp	.-4      	; 0x7e8 <lcd_init+0xc4>
    SPDR = 0x06;
     7ec:	86 e0       	ldi	r24, 0x06	; 6
     7ee:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7f0:	77 9b       	sbis	0x0e, 7	; 14
     7f2:	fe cf       	rjmp	.-4      	; 0x7f0 <lcd_init+0xcc>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     7f4:	80 91 62 00 	lds	r24, 0x0062
     7f8:	88 60       	ori	r24, 0x08	; 8
     7fa:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     7fe:	80 91 62 00 	lds	r24, 0x0062
     802:	87 7f       	andi	r24, 0xF7	; 247
     804:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     808:	95 ec       	ldi	r25, 0xC5	; 197
     80a:	9a 95       	dec	r25
     80c:	f1 f7       	brne	.-4      	; 0x80a <lcd_init+0xe6>
     80e:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     810:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     812:	77 9b       	sbis	0x0e, 7	; 14
     814:	fe cf       	rjmp	.-4      	; 0x812 <lcd_init+0xee>
    SPDR = 0x0E;
     816:	8e e0       	ldi	r24, 0x0E	; 14
     818:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     81a:	77 9b       	sbis	0x0e, 7	; 14
     81c:	fe cf       	rjmp	.-4      	; 0x81a <lcd_init+0xf6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
}
//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     81e:	80 91 62 00 	lds	r24, 0x0062
     822:	88 60       	ori	r24, 0x08	; 8
     824:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     828:	80 91 62 00 	lds	r24, 0x0062
     82c:	87 7f       	andi	r24, 0xF7	; 247
     82e:	80 93 62 00 	sts	0x0062, r24
     832:	85 ec       	ldi	r24, 0xC5	; 197
     834:	8a 95       	dec	r24
     836:	f1 f7       	brne	.-4      	; 0x834 <lcd_init+0x110>
     838:	00 00       	nop
     83a:	08 95       	ret

0000083c <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     83c:	88 e4       	ldi	r24, 0x48	; 72
     83e:	80 93 b8 00 	sts	0x00B8, r24
     842:	08 95       	ret

00000844 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     844:	10 92 bc 00 	sts	0x00BC, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     848:	94 ea       	ldi	r25, 0xA4	; 164
     84a:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     84e:	90 91 bc 00 	lds	r25, 0x00BC
     852:	97 ff       	sbrs	r25, 7
     854:	fc cf       	rjmp	.-8      	; 0x84e <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     856:	90 91 b9 00 	lds	r25, 0x00B9
     85a:	98 7f       	andi	r25, 0xF8	; 248
     85c:	98 30       	cpi	r25, 0x08	; 8
     85e:	11 f0       	breq	.+4      	; 0x864 <i2c_start+0x20>
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
     864:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     868:	84 e8       	ldi	r24, 0x84	; 132
     86a:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     86e:	80 91 bc 00 	lds	r24, 0x00BC
     872:	87 ff       	sbrs	r24, 7
     874:	fc cf       	rjmp	.-8      	; 0x86e <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     876:	80 91 b9 00 	lds	r24, 0x00B9
     87a:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     87c:	88 31       	cpi	r24, 0x18	; 24
     87e:	11 f0       	breq	.+4      	; 0x884 <i2c_start+0x40>
     880:	80 34       	cpi	r24, 0x40	; 64
     882:	71 f7       	brne	.-36     	; 0x860 <i2c_start+0x1c>
	
	return 0;
     884:	80 e0       	ldi	r24, 0x00	; 0
}
     886:	08 95       	ret

00000888 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     888:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     88c:	84 e8       	ldi	r24, 0x84	; 132
     88e:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     892:	80 91 bc 00 	lds	r24, 0x00BC
     896:	87 ff       	sbrs	r24, 7
     898:	fc cf       	rjmp	.-8      	; 0x892 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     89a:	90 91 b9 00 	lds	r25, 0x00B9
     89e:	98 7f       	andi	r25, 0xF8	; 248
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	98 32       	cpi	r25, 0x28	; 40
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <i2c_write+0x20>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     8a8:	08 95       	ret

000008aa <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     8aa:	84 ec       	ldi	r24, 0xC4	; 196
     8ac:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     8b0:	80 91 bc 00 	lds	r24, 0x00BC
     8b4:	87 ff       	sbrs	r24, 7
     8b6:	fc cf       	rjmp	.-8      	; 0x8b0 <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
     8b8:	80 91 bb 00 	lds	r24, 0x00BB
}
     8bc:	08 95       	ret

000008be <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     8be:	84 e8       	ldi	r24, 0x84	; 132
     8c0:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     8c4:	80 91 bc 00 	lds	r24, 0x00BC
     8c8:	87 ff       	sbrs	r24, 7
     8ca:	fc cf       	rjmp	.-8      	; 0x8c4 <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
     8cc:	80 91 bb 00 	lds	r24, 0x00BB
}
     8d0:	08 95       	ret

000008d2 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     8d2:	df 92       	push	r13
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	d6 2e       	mov	r13, r22
     8e2:	07 2f       	mov	r16, r23
     8e4:	7a 01       	movw	r14, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     8e6:	0e 94 22 04 	call	0x844	; 0x844 <i2c_start>
     8ea:	18 2f       	mov	r17, r24
     8ec:	81 11       	cpse	r24, r1
     8ee:	10 c0       	rjmp	.+32     	; 0x910 <i2c_transmit+0x3e>
     8f0:	cd 2d       	mov	r28, r13
     8f2:	d0 2f       	mov	r29, r16
     8f4:	ec 0e       	add	r14, r28
     8f6:	fd 1e       	adc	r15, r29
	
	for (uint16_t i = 0; i < length; i++)
     8f8:	ce 15       	cp	r28, r14
     8fa:	df 05       	cpc	r29, r15
     8fc:	21 f4       	brne	.+8      	; 0x906 <i2c_transmit+0x34>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     8fe:	84 e9       	ldi	r24, 0x94	; 148
     900:	80 93 bc 00 	sts	0x00BC, r24
		if (i2c_write(data[i])) return 1;
	}
	
	i2c_stop();
	
	return 0;
     904:	06 c0       	rjmp	.+12     	; 0x912 <i2c_transmit+0x40>
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     906:	89 91       	ld	r24, Y+
     908:	0e 94 44 04 	call	0x888	; 0x888 <i2c_write>
     90c:	88 23       	and	r24, r24
     90e:	a1 f3       	breq	.-24     	; 0x8f8 <i2c_transmit+0x26>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     910:	11 e0       	ldi	r17, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
     912:	81 2f       	mov	r24, r17
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	df 90       	pop	r13
     922:	08 95       	ret

00000924 <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
     924:	cf 92       	push	r12
     926:	df 92       	push	r13
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	eb 01       	movw	r28, r22
     934:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_READ)) return 1;
     936:	81 60       	ori	r24, 0x01	; 1
     938:	0e 94 22 04 	call	0x844	; 0x844 <i2c_start>
     93c:	f8 2e       	mov	r15, r24
     93e:	81 11       	cpse	r24, r1
     940:	20 c0       	rjmp	.+64     	; 0x982 <i2c_receive+0x5e>
     942:	6e 01       	movw	r12, r28
	
	for (uint16_t i = 0; i < (length-1); i++)
     944:	01 50       	subi	r16, 0x01	; 1
     946:	11 09       	sbc	r17, r1
     948:	c6 01       	movw	r24, r12
     94a:	8c 1b       	sub	r24, r28
     94c:	9d 0b       	sbc	r25, r29
     94e:	80 17       	cp	r24, r16
     950:	91 07       	cpc	r25, r17
     952:	88 f0       	brcs	.+34     	; 0x976 <i2c_receive+0x52>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     954:	c0 0f       	add	r28, r16
     956:	d1 1f       	adc	r29, r17
     958:	0e 94 5f 04 	call	0x8be	; 0x8be <i2c_read_nack>
     95c:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     95e:	84 e9       	ldi	r24, 0x94	; 148
     960:	80 93 bc 00 	sts	0x00BC, r24
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     964:	8f 2d       	mov	r24, r15
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	08 95       	ret
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     976:	0e 94 55 04 	call	0x8aa	; 0x8aa <i2c_read_ack>
     97a:	f6 01       	movw	r30, r12
     97c:	81 93       	st	Z+, r24
     97e:	6f 01       	movw	r12, r30
     980:	e3 cf       	rjmp	.-58     	; 0x948 <i2c_receive+0x24>
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
     982:	ff 24       	eor	r15, r15
     984:	f3 94       	inc	r15
     986:	ee cf       	rjmp	.-36     	; 0x964 <i2c_receive+0x40>

00000988 <i2c_writeReg>:
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     988:	df 92       	push	r13
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	c6 2f       	mov	r28, r22
     998:	d4 2e       	mov	r13, r20
     99a:	05 2f       	mov	r16, r21
     99c:	79 01       	movw	r14, r18
	if (i2c_start(devaddr | 0x00)) return 1;
     99e:	0e 94 22 04 	call	0x844	; 0x844 <i2c_start>
     9a2:	18 2f       	mov	r17, r24
     9a4:	88 23       	and	r24, r24
     9a6:	51 f0       	breq	.+20     	; 0x9bc <i2c_writeReg+0x34>
     9a8:	11 e0       	ldi	r17, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
     9aa:	81 2f       	mov	r24, r17
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	df 90       	pop	r13
     9ba:	08 95       	ret

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);
     9bc:	8c 2f       	mov	r24, r28
     9be:	0e 94 44 04 	call	0x888	; 0x888 <i2c_write>
     9c2:	cd 2d       	mov	r28, r13
     9c4:	d0 2f       	mov	r29, r16
     9c6:	ec 0e       	add	r14, r28
     9c8:	fd 1e       	adc	r15, r29

	for (uint16_t i = 0; i < length; i++)
     9ca:	ce 15       	cp	r28, r14
     9cc:	df 05       	cpc	r29, r15
     9ce:	21 f4       	brne	.+8      	; 0x9d8 <i2c_writeReg+0x50>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     9d0:	84 e9       	ldi	r24, 0x94	; 148
     9d2:	80 93 bc 00 	sts	0x00BC, r24
		if (i2c_write(data[i])) return 1;
	}

	i2c_stop();

	return 0;
     9d6:	e9 cf       	rjmp	.-46     	; 0x9aa <i2c_writeReg+0x22>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     9d8:	89 91       	ld	r24, Y+
     9da:	0e 94 44 04 	call	0x888	; 0x888 <i2c_write>
     9de:	88 23       	and	r24, r24
     9e0:	a1 f3       	breq	.-24     	; 0x9ca <i2c_writeReg+0x42>
     9e2:	e2 cf       	rjmp	.-60     	; 0x9a8 <i2c_writeReg+0x20>

000009e4 <i2c_readReg>:

	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	f8 2e       	mov	r15, r24
     9f4:	d6 2e       	mov	r13, r22
     9f6:	ea 01       	movw	r28, r20
     9f8:	89 01       	movw	r16, r18
	if (i2c_start(devaddr)) return 1;
     9fa:	0e 94 22 04 	call	0x844	; 0x844 <i2c_start>
     9fe:	88 23       	and	r24, r24
     a00:	59 f0       	breq	.+22     	; 0xa18 <i2c_readReg+0x34>
     a02:	ff 24       	eor	r15, r15
     a04:	f3 94       	inc	r15
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     a06:	8f 2d       	mov	r24, r15
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	08 95       	ret

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);
     a18:	8d 2d       	mov	r24, r13
     a1a:	0e 94 44 04 	call	0x888	; 0x888 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
     a1e:	8f 2d       	mov	r24, r15
     a20:	81 60       	ori	r24, 0x01	; 1
     a22:	0e 94 22 04 	call	0x844	; 0x844 <i2c_start>
     a26:	f8 2e       	mov	r15, r24
     a28:	81 11       	cpse	r24, r1
     a2a:	eb cf       	rjmp	.-42     	; 0xa02 <i2c_readReg+0x1e>
     a2c:	6e 01       	movw	r12, r28

	for (uint16_t i = 0; i < (length-1); i++)
     a2e:	01 50       	subi	r16, 0x01	; 1
     a30:	11 09       	sbc	r17, r1
     a32:	c6 01       	movw	r24, r12
     a34:	8c 1b       	sub	r24, r28
     a36:	9d 0b       	sbc	r25, r29
     a38:	80 17       	cp	r24, r16
     a3a:	91 07       	cpc	r25, r17
     a3c:	48 f0       	brcs	.+18     	; 0xa50 <i2c_readReg+0x6c>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     a3e:	c0 0f       	add	r28, r16
     a40:	d1 1f       	adc	r29, r17
     a42:	0e 94 5f 04 	call	0x8be	; 0x8be <i2c_read_nack>
     a46:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     a48:	84 e9       	ldi	r24, 0x94	; 148
     a4a:	80 93 bc 00 	sts	0x00BC, r24
	}
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
     a4e:	db cf       	rjmp	.-74     	; 0xa06 <i2c_readReg+0x22>

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     a50:	0e 94 55 04 	call	0x8aa	; 0x8aa <i2c_read_ack>
     a54:	f6 01       	movw	r30, r12
     a56:	81 93       	st	Z+, r24
     a58:	6f 01       	movw	r12, r30
     a5a:	eb cf       	rjmp	.-42     	; 0xa32 <i2c_readReg+0x4e>

00000a5c <i2c_stop>:
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     a5c:	84 e9       	ldi	r24, 0x94	; 148
     a5e:	80 93 bc 00 	sts	0x00BC, r24
     a62:	08 95       	ret

00000a64 <main>:

uint8_t temp, read_byte;


int main(void){
    DDRB = 0xFF;
     a64:	8f ef       	ldi	r24, 0xFF	; 255
     a66:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
     a68:	18 ba       	out	0x18, r1	; 24
    DDRD = 0x00;
     a6a:	11 ba       	out	0x11, r1	; 17
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     a6c:	80 91 61 00 	lds	r24, 0x0061
     a70:	88 60       	ori	r24, 0x08	; 8
     a72:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initalization for SPI
     a76:	88 b3       	in	r24, 0x18	; 24
     a78:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     a7a:	87 b3       	in	r24, 0x17	; 23
     a7c:	87 60       	ori	r24, 0x07	; 7
     a7e:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     a80:	80 e5       	ldi	r24, 0x50	; 80
     a82:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	8e b9       	out	0x0e, r24	; 14
    DDRD = 0x00;


    char buffer[16];
    spi_init();
    lcd_init();
     a88:	0e 94 92 03 	call	0x724	; 0x724 <lcd_init>

    double temp;

    clear_display();
     a8c:	0e 94 02 02 	call	0x404	; 0x404 <clear_display>
    string2lcd("Press S1");
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	0e 94 48 02 	call	0x490	; 0x490 <string2lcd>
	while (((PIND) & (1 << 0)));
     a98:	80 99       	sbic	0x10, 0	; 16
     a9a:	fe cf       	rjmp	.-4      	; 0xa98 <main+0x34>
	
	PORTB |= (1 << 4);
     a9c:	c4 9a       	sbi	0x18, 4	; 24
     a9e:	8f e6       	ldi	r24, 0x6F	; 111
     aa0:	97 e1       	ldi	r25, 0x17	; 23
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <main+0x3e>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <main+0x44>
     aa8:	00 00       	nop
	_delay_us(STOP);
	PORTB &= ~(1 << 4);
     aaa:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aac:	9f ef       	ldi	r25, 0xFF	; 255
     aae:	23 ed       	ldi	r18, 0xD3	; 211
     ab0:	80 e3       	ldi	r24, 0x30	; 48
     ab2:	91 50       	subi	r25, 0x01	; 1
     ab4:	20 40       	sbci	r18, 0x00	; 0
     ab6:	80 40       	sbci	r24, 0x00	; 0
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <main+0x4e>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <main+0x58>
     abc:	00 00       	nop
    OCR0 = 0;
    */

    
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
     abe:	8f b5       	in	r24, 0x2f	; 47
     ac0:	80 68       	ori	r24, 0x80	; 128
     ac2:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
     ac4:	8f b5       	in	r24, 0x2f	; 47
     ac6:	80 62       	ori	r24, 0x20	; 32
     ac8:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
     aca:	8f b5       	in	r24, 0x2f	; 47
     acc:	88 60       	ori	r24, 0x08	; 8
     ace:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
     ad0:	8f b5       	in	r24, 0x2f	; 47
     ad2:	82 60       	ori	r24, 0x02	; 2
     ad4:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
     ad6:	8e b5       	in	r24, 0x2e	; 46
     ad8:	88 61       	ori	r24, 0x18	; 24
     ada:	8e bd       	out	0x2e, r24	; 46
    
    //Prescaler 8 which is 30.517578 Hz
    TCCR1B |= (1 << CS11);
     adc:	8e b5       	in	r24, 0x2e	; 46
     ade:	82 60       	ori	r24, 0x02	; 2
     ae0:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     ae2:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     ae4:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     ae6:	21 e0       	ldi	r18, 0x01	; 1
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	3d bd       	out	0x2d, r19	; 45
     aec:	2c bd       	out	0x2c, r18	; 44
    sei();
     aee:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     af0:	8f bf       	out	0x3f, r24	; 63

    //Prescaler 1 which is 244.140625 Hz --> actually 800Hz?
    //TCCR1B |= (1 << CS10);

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	9f ef       	ldi	r25, 0xFF	; 255
     af6:	97 bd       	out	0x27, r25	; 39
     af8:	86 bd       	out	0x26, r24	; 38
     afa:	9f ef       	ldi	r25, 0xFF	; 255
     afc:	21 ee       	ldi	r18, 0xE1	; 225
     afe:	84 e0       	ldi	r24, 0x04	; 4
     b00:	91 50       	subi	r25, 0x01	; 1
     b02:	20 40       	sbci	r18, 0x00	; 0
     b04:	80 40       	sbci	r24, 0x00	; 0
     b06:	e1 f7       	brne	.-8      	; 0xb00 <main+0x9c>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <main+0xa6>
     b0a:	00 00       	nop
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
     b0c:	c8 eb       	ldi	r28, 0xB8	; 184
     b0e:	db e0       	ldi	r29, 0x0B	; 11
     b10:	88 e4       	ldi	r24, 0x48	; 72
     b12:	48 2e       	mov	r4, r24
     b14:	8d e0       	ldi	r24, 0x0D	; 13
     b16:	58 2e       	mov	r5, r24
     b18:	98 e0       	ldi	r25, 0x08	; 8
     b1a:	29 2e       	mov	r2, r25
     b1c:	9c e0       	ldi	r25, 0x0C	; 12
     b1e:	39 2e       	mov	r3, r25
     b20:	61 2c       	mov	r6, r1
     b22:	2c e0       	ldi	r18, 0x0C	; 12
     b24:	72 2e       	mov	r7, r18
     b26:	38 ef       	ldi	r19, 0xF8	; 248
     b28:	a3 2e       	mov	r10, r19
     b2a:	3b e0       	ldi	r19, 0x0B	; 11
     b2c:	b3 2e       	mov	r11, r19
            OCR1C = 0;
		}
		else if (!((PIND) & (1 << 5))){
			string2lcd("Left 8%");
            move(8,0,0);
            OCR1C = 10000;
     b2e:	40 e1       	ldi	r20, 0x10	; 16
     b30:	84 2e       	mov	r8, r20
     b32:	47 e2       	ldi	r20, 0x27	; 39
     b34:	94 2e       	mov	r9, r20
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
     b36:	50 ef       	ldi	r21, 0xF0	; 240
     b38:	c5 2e       	mov	r12, r21
     b3a:	5b e0       	ldi	r21, 0x0B	; 11
     b3c:	d5 2e       	mov	r13, r21
     b3e:	68 ee       	ldi	r22, 0xE8	; 232
     b40:	e6 2e       	mov	r14, r22
     b42:	6b e0       	ldi	r22, 0x0B	; 11
     b44:	f6 2e       	mov	r15, r22
    while(1){
        clear_display();
		if (!((PIND) & (1 << 7))){
			string2lcd("Left 6%");
            move(6,0,0);
            OCR1C = 65000;
     b46:	08 ee       	ldi	r16, 0xE8	; 232
     b48:	1d ef       	ldi	r17, 0xFD	; 253
     b4a:	15 c0       	rjmp	.+42     	; 0xb76 <main+0x112>
    _delay_ms(100);
	
    while(1){
        clear_display();
		if (!((PIND) & (1 << 7))){
			string2lcd("Left 6%");
     b4c:	89 e0       	ldi	r24, 0x09	; 9
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 48 02 	call	0x490	; 0x490 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
     b54:	fb bc       	out	0x2b, r15	; 43
     b56:	ea bc       	out	0x2a, r14	; 42
    OCR1B = right_speed;
     b58:	d9 bd       	out	0x29, r29	; 41
     b5a:	c8 bd       	out	0x28, r28	; 40
    while(1){
        clear_display();
		if (!((PIND) & (1 << 7))){
			string2lcd("Left 6%");
            move(6,0,0);
            OCR1C = 65000;
     b5c:	10 93 79 00 	sts	0x0079, r17
     b60:	00 93 78 00 	sts	0x0078, r16
     b64:	9f ef       	ldi	r25, 0xFF	; 255
     b66:	29 ef       	ldi	r18, 0xF9	; 249
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	91 50       	subi	r25, 0x01	; 1
     b6c:	20 40       	sbci	r18, 0x00	; 0
     b6e:	80 40       	sbci	r24, 0x00	; 0
     b70:	e1 f7       	brne	.-8      	; 0xb6a <main+0x106>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <main+0x110>
     b74:	00 00       	nop
    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    _delay_ms(100);
	
    while(1){
        clear_display();
     b76:	0e 94 02 02 	call	0x404	; 0x404 <clear_display>
		if (!((PIND) & (1 << 7))){
     b7a:	87 9b       	sbis	0x10, 7	; 16
     b7c:	e7 cf       	rjmp	.-50     	; 0xb4c <main+0xe8>
			string2lcd("Left 6%");
            move(6,0,0);
            OCR1C = 65000;
		}
		else if (!((PIND) & (1 << 6))){
     b7e:	86 9b       	sbis	0x10, 6	; 16
     b80:	11 c0       	rjmp	.+34     	; 0xba4 <main+0x140>
			string2lcd("Left 7%");
            move(7,0,0);
            OCR1C = 0;
		}
		else if (!((PIND) & (1 << 5))){
     b82:	85 9b       	sbis	0x10, 5	; 16
     b84:	1c c0       	rjmp	.+56     	; 0xbbe <main+0x15a>
			string2lcd("Left 8%");
            move(8,0,0);
            OCR1C = 10000;
		}
		else if (!((PIND) & (1 << 4))){
     b86:	84 9b       	sbis	0x10, 4	; 16
     b88:	27 c0       	rjmp	.+78     	; 0xbd8 <main+0x174>
            string2lcd("Left 9%");
			move(9,0,0);
		}
		else if (!((PIND) & (1 << 3))){
     b8a:	83 9b       	sbis	0x10, 3	; 16
     b8c:	37 c0       	rjmp	.+110    	; 0xbfc <main+0x198>
            string2lcd("Left 10%");
            move(10,0,0);
		}
        else if (!((PIND) & (1 << 1))){
     b8e:	81 99       	sbic	0x10, 1	; 16
     b90:	2c c0       	rjmp	.+88     	; 0xbea <main+0x186>
            string2lcd("Left 50%");
     b92:	82 e3       	ldi	r24, 0x32	; 50
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 48 02 	call	0x490	; 0x490 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
     b9a:	5b bc       	out	0x2b, r5	; 43
     b9c:	4a bc       	out	0x2a, r4	; 42
    OCR1B = right_speed;
     b9e:	d9 bd       	out	0x29, r29	; 41
     ba0:	c8 bd       	out	0x28, r28	; 40
     ba2:	e0 cf       	rjmp	.-64     	; 0xb64 <main+0x100>
			string2lcd("Left 6%");
            move(6,0,0);
            OCR1C = 65000;
		}
		else if (!((PIND) & (1 << 6))){
			string2lcd("Left 7%");
     ba4:	81 e1       	ldi	r24, 0x11	; 17
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	0e 94 48 02 	call	0x490	; 0x490 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
     bac:	db bc       	out	0x2b, r13	; 43
     bae:	ca bc       	out	0x2a, r12	; 42
    OCR1B = right_speed;
     bb0:	d9 bd       	out	0x29, r29	; 41
     bb2:	c8 bd       	out	0x28, r28	; 40
            OCR1C = 65000;
		}
		else if (!((PIND) & (1 << 6))){
			string2lcd("Left 7%");
            move(7,0,0);
            OCR1C = 0;
     bb4:	10 92 79 00 	sts	0x0079, r1
     bb8:	10 92 78 00 	sts	0x0078, r1
     bbc:	d3 cf       	rjmp	.-90     	; 0xb64 <main+0x100>
		}
		else if (!((PIND) & (1 << 5))){
			string2lcd("Left 8%");
     bbe:	89 e1       	ldi	r24, 0x19	; 25
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	0e 94 48 02 	call	0x490	; 0x490 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
     bc6:	bb bc       	out	0x2b, r11	; 43
     bc8:	aa bc       	out	0x2a, r10	; 42
    OCR1B = right_speed;
     bca:	d9 bd       	out	0x29, r29	; 41
     bcc:	c8 bd       	out	0x28, r28	; 40
            OCR1C = 0;
		}
		else if (!((PIND) & (1 << 5))){
			string2lcd("Left 8%");
            move(8,0,0);
            OCR1C = 10000;
     bce:	90 92 79 00 	sts	0x0079, r9
     bd2:	80 92 78 00 	sts	0x0078, r8
     bd6:	c6 cf       	rjmp	.-116    	; 0xb64 <main+0x100>
		}
		else if (!((PIND) & (1 << 4))){
            string2lcd("Left 9%");
     bd8:	81 e2       	ldi	r24, 0x21	; 33
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0e 94 48 02 	call	0x490	; 0x490 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
     be0:	7b bc       	out	0x2b, r7	; 43
     be2:	6a bc       	out	0x2a, r6	; 42
    OCR1B = right_speed;
     be4:	d9 bd       	out	0x29, r29	; 41
     be6:	c8 bd       	out	0x28, r28	; 40
     be8:	bd cf       	rjmp	.-134    	; 0xb64 <main+0x100>
        else if (!((PIND) & (1 << 1))){
            string2lcd("Left 50%");
            move(50,0,0);
        }
		else {
			string2lcd("Stop");
     bea:	8b e3       	ldi	r24, 0x3B	; 59
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 48 02 	call	0x490	; 0x490 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
     bf2:	db bd       	out	0x2b, r29	; 43
     bf4:	ca bd       	out	0x2a, r28	; 42
    OCR1B = right_speed;
     bf6:	d9 bd       	out	0x29, r29	; 41
     bf8:	c8 bd       	out	0x28, r28	; 40
     bfa:	b4 cf       	rjmp	.-152    	; 0xb64 <main+0x100>
		else if (!((PIND) & (1 << 4))){
            string2lcd("Left 9%");
			move(9,0,0);
		}
		else if (!((PIND) & (1 << 3))){
            string2lcd("Left 10%");
     bfc:	89 e2       	ldi	r24, 0x29	; 41
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 48 02 	call	0x490	; 0x490 <string2lcd>
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((100 + left)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((100 + right)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)((100 + z)/((double)STEP) + MIN_SPEED); 
    OCR1A = left_speed;
     c04:	3b bc       	out	0x2b, r3	; 43
     c06:	2a bc       	out	0x2a, r2	; 42
    OCR1B = right_speed;
     c08:	d9 bd       	out	0x29, r29	; 41
     c0a:	c8 bd       	out	0x28, r28	; 40
     c0c:	ab cf       	rjmp	.-170    	; 0xb64 <main+0x100>

00000c0e <__subsf3>:
     c0e:	50 58       	subi	r21, 0x80	; 128

00000c10 <__addsf3>:
     c10:	bb 27       	eor	r27, r27
     c12:	aa 27       	eor	r26, r26
     c14:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__addsf3x>
     c18:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__fp_round>
     c1c:	0e 94 84 07 	call	0xf08	; 0xf08 <__fp_pscA>
     c20:	38 f0       	brcs	.+14     	; 0xc30 <__addsf3+0x20>
     c22:	0e 94 8b 07 	call	0xf16	; 0xf16 <__fp_pscB>
     c26:	20 f0       	brcs	.+8      	; 0xc30 <__addsf3+0x20>
     c28:	39 f4       	brne	.+14     	; 0xc38 <__addsf3+0x28>
     c2a:	9f 3f       	cpi	r25, 0xFF	; 255
     c2c:	19 f4       	brne	.+6      	; 0xc34 <__addsf3+0x24>
     c2e:	26 f4       	brtc	.+8      	; 0xc38 <__addsf3+0x28>
     c30:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_nan>
     c34:	0e f4       	brtc	.+2      	; 0xc38 <__addsf3+0x28>
     c36:	e0 95       	com	r30
     c38:	e7 fb       	bst	r30, 7
     c3a:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__fp_inf>

00000c3e <__addsf3x>:
     c3e:	e9 2f       	mov	r30, r25
     c40:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_split3>
     c44:	58 f3       	brcs	.-42     	; 0xc1c <__addsf3+0xc>
     c46:	ba 17       	cp	r27, r26
     c48:	62 07       	cpc	r22, r18
     c4a:	73 07       	cpc	r23, r19
     c4c:	84 07       	cpc	r24, r20
     c4e:	95 07       	cpc	r25, r21
     c50:	20 f0       	brcs	.+8      	; 0xc5a <__addsf3x+0x1c>
     c52:	79 f4       	brne	.+30     	; 0xc72 <__addsf3x+0x34>
     c54:	a6 f5       	brtc	.+104    	; 0xcbe <__addsf3x+0x80>
     c56:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_zero>
     c5a:	0e f4       	brtc	.+2      	; 0xc5e <__addsf3x+0x20>
     c5c:	e0 95       	com	r30
     c5e:	0b 2e       	mov	r0, r27
     c60:	ba 2f       	mov	r27, r26
     c62:	a0 2d       	mov	r26, r0
     c64:	0b 01       	movw	r0, r22
     c66:	b9 01       	movw	r22, r18
     c68:	90 01       	movw	r18, r0
     c6a:	0c 01       	movw	r0, r24
     c6c:	ca 01       	movw	r24, r20
     c6e:	a0 01       	movw	r20, r0
     c70:	11 24       	eor	r1, r1
     c72:	ff 27       	eor	r31, r31
     c74:	59 1b       	sub	r21, r25
     c76:	99 f0       	breq	.+38     	; 0xc9e <__addsf3x+0x60>
     c78:	59 3f       	cpi	r21, 0xF9	; 249
     c7a:	50 f4       	brcc	.+20     	; 0xc90 <__addsf3x+0x52>
     c7c:	50 3e       	cpi	r21, 0xE0	; 224
     c7e:	68 f1       	brcs	.+90     	; 0xcda <__addsf3x+0x9c>
     c80:	1a 16       	cp	r1, r26
     c82:	f0 40       	sbci	r31, 0x00	; 0
     c84:	a2 2f       	mov	r26, r18
     c86:	23 2f       	mov	r18, r19
     c88:	34 2f       	mov	r19, r20
     c8a:	44 27       	eor	r20, r20
     c8c:	58 5f       	subi	r21, 0xF8	; 248
     c8e:	f3 cf       	rjmp	.-26     	; 0xc76 <__addsf3x+0x38>
     c90:	46 95       	lsr	r20
     c92:	37 95       	ror	r19
     c94:	27 95       	ror	r18
     c96:	a7 95       	ror	r26
     c98:	f0 40       	sbci	r31, 0x00	; 0
     c9a:	53 95       	inc	r21
     c9c:	c9 f7       	brne	.-14     	; 0xc90 <__addsf3x+0x52>
     c9e:	7e f4       	brtc	.+30     	; 0xcbe <__addsf3x+0x80>
     ca0:	1f 16       	cp	r1, r31
     ca2:	ba 0b       	sbc	r27, r26
     ca4:	62 0b       	sbc	r22, r18
     ca6:	73 0b       	sbc	r23, r19
     ca8:	84 0b       	sbc	r24, r20
     caa:	ba f0       	brmi	.+46     	; 0xcda <__addsf3x+0x9c>
     cac:	91 50       	subi	r25, 0x01	; 1
     cae:	a1 f0       	breq	.+40     	; 0xcd8 <__addsf3x+0x9a>
     cb0:	ff 0f       	add	r31, r31
     cb2:	bb 1f       	adc	r27, r27
     cb4:	66 1f       	adc	r22, r22
     cb6:	77 1f       	adc	r23, r23
     cb8:	88 1f       	adc	r24, r24
     cba:	c2 f7       	brpl	.-16     	; 0xcac <__addsf3x+0x6e>
     cbc:	0e c0       	rjmp	.+28     	; 0xcda <__addsf3x+0x9c>
     cbe:	ba 0f       	add	r27, r26
     cc0:	62 1f       	adc	r22, r18
     cc2:	73 1f       	adc	r23, r19
     cc4:	84 1f       	adc	r24, r20
     cc6:	48 f4       	brcc	.+18     	; 0xcda <__addsf3x+0x9c>
     cc8:	87 95       	ror	r24
     cca:	77 95       	ror	r23
     ccc:	67 95       	ror	r22
     cce:	b7 95       	ror	r27
     cd0:	f7 95       	ror	r31
     cd2:	9e 3f       	cpi	r25, 0xFE	; 254
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <__addsf3x+0x9a>
     cd6:	b0 cf       	rjmp	.-160    	; 0xc38 <__addsf3+0x28>
     cd8:	93 95       	inc	r25
     cda:	88 0f       	add	r24, r24
     cdc:	08 f0       	brcs	.+2      	; 0xce0 <__addsf3x+0xa2>
     cde:	99 27       	eor	r25, r25
     ce0:	ee 0f       	add	r30, r30
     ce2:	97 95       	ror	r25
     ce4:	87 95       	ror	r24
     ce6:	08 95       	ret

00000ce8 <__cmpsf2>:
     ce8:	0e 94 57 07 	call	0xeae	; 0xeae <__fp_cmp>
     cec:	08 f4       	brcc	.+2      	; 0xcf0 <__cmpsf2+0x8>
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	08 95       	ret

00000cf2 <__divsf3>:
     cf2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__divsf3x>
     cf6:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__fp_round>
     cfa:	0e 94 8b 07 	call	0xf16	; 0xf16 <__fp_pscB>
     cfe:	58 f0       	brcs	.+22     	; 0xd16 <__divsf3+0x24>
     d00:	0e 94 84 07 	call	0xf08	; 0xf08 <__fp_pscA>
     d04:	40 f0       	brcs	.+16     	; 0xd16 <__divsf3+0x24>
     d06:	29 f4       	brne	.+10     	; 0xd12 <__divsf3+0x20>
     d08:	5f 3f       	cpi	r21, 0xFF	; 255
     d0a:	29 f0       	breq	.+10     	; 0xd16 <__divsf3+0x24>
     d0c:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__fp_inf>
     d10:	51 11       	cpse	r21, r1
     d12:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_szero>
     d16:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_nan>

00000d1a <__divsf3x>:
     d1a:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_split3>
     d1e:	68 f3       	brcs	.-38     	; 0xcfa <__divsf3+0x8>

00000d20 <__divsf3_pse>:
     d20:	99 23       	and	r25, r25
     d22:	b1 f3       	breq	.-20     	; 0xd10 <__divsf3+0x1e>
     d24:	55 23       	and	r21, r21
     d26:	91 f3       	breq	.-28     	; 0xd0c <__divsf3+0x1a>
     d28:	95 1b       	sub	r25, r21
     d2a:	55 0b       	sbc	r21, r21
     d2c:	bb 27       	eor	r27, r27
     d2e:	aa 27       	eor	r26, r26
     d30:	62 17       	cp	r22, r18
     d32:	73 07       	cpc	r23, r19
     d34:	84 07       	cpc	r24, r20
     d36:	38 f0       	brcs	.+14     	; 0xd46 <__divsf3_pse+0x26>
     d38:	9f 5f       	subi	r25, 0xFF	; 255
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	44 1f       	adc	r20, r20
     d42:	aa 1f       	adc	r26, r26
     d44:	a9 f3       	breq	.-22     	; 0xd30 <__divsf3_pse+0x10>
     d46:	35 d0       	rcall	.+106    	; 0xdb2 <__divsf3_pse+0x92>
     d48:	0e 2e       	mov	r0, r30
     d4a:	3a f0       	brmi	.+14     	; 0xd5a <__divsf3_pse+0x3a>
     d4c:	e0 e8       	ldi	r30, 0x80	; 128
     d4e:	32 d0       	rcall	.+100    	; 0xdb4 <__divsf3_pse+0x94>
     d50:	91 50       	subi	r25, 0x01	; 1
     d52:	50 40       	sbci	r21, 0x00	; 0
     d54:	e6 95       	lsr	r30
     d56:	00 1c       	adc	r0, r0
     d58:	ca f7       	brpl	.-14     	; 0xd4c <__divsf3_pse+0x2c>
     d5a:	2b d0       	rcall	.+86     	; 0xdb2 <__divsf3_pse+0x92>
     d5c:	fe 2f       	mov	r31, r30
     d5e:	29 d0       	rcall	.+82     	; 0xdb2 <__divsf3_pse+0x92>
     d60:	66 0f       	add	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	88 1f       	adc	r24, r24
     d66:	bb 1f       	adc	r27, r27
     d68:	26 17       	cp	r18, r22
     d6a:	37 07       	cpc	r19, r23
     d6c:	48 07       	cpc	r20, r24
     d6e:	ab 07       	cpc	r26, r27
     d70:	b0 e8       	ldi	r27, 0x80	; 128
     d72:	09 f0       	breq	.+2      	; 0xd76 <__divsf3_pse+0x56>
     d74:	bb 0b       	sbc	r27, r27
     d76:	80 2d       	mov	r24, r0
     d78:	bf 01       	movw	r22, r30
     d7a:	ff 27       	eor	r31, r31
     d7c:	93 58       	subi	r25, 0x83	; 131
     d7e:	5f 4f       	sbci	r21, 0xFF	; 255
     d80:	3a f0       	brmi	.+14     	; 0xd90 <__divsf3_pse+0x70>
     d82:	9e 3f       	cpi	r25, 0xFE	; 254
     d84:	51 05       	cpc	r21, r1
     d86:	78 f0       	brcs	.+30     	; 0xda6 <__divsf3_pse+0x86>
     d88:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__fp_inf>
     d8c:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_szero>
     d90:	5f 3f       	cpi	r21, 0xFF	; 255
     d92:	e4 f3       	brlt	.-8      	; 0xd8c <__divsf3_pse+0x6c>
     d94:	98 3e       	cpi	r25, 0xE8	; 232
     d96:	d4 f3       	brlt	.-12     	; 0xd8c <__divsf3_pse+0x6c>
     d98:	86 95       	lsr	r24
     d9a:	77 95       	ror	r23
     d9c:	67 95       	ror	r22
     d9e:	b7 95       	ror	r27
     da0:	f7 95       	ror	r31
     da2:	9f 5f       	subi	r25, 0xFF	; 255
     da4:	c9 f7       	brne	.-14     	; 0xd98 <__divsf3_pse+0x78>
     da6:	88 0f       	add	r24, r24
     da8:	91 1d       	adc	r25, r1
     daa:	96 95       	lsr	r25
     dac:	87 95       	ror	r24
     dae:	97 f9       	bld	r25, 7
     db0:	08 95       	ret
     db2:	e1 e0       	ldi	r30, 0x01	; 1
     db4:	66 0f       	add	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	88 1f       	adc	r24, r24
     dba:	bb 1f       	adc	r27, r27
     dbc:	62 17       	cp	r22, r18
     dbe:	73 07       	cpc	r23, r19
     dc0:	84 07       	cpc	r24, r20
     dc2:	ba 07       	cpc	r27, r26
     dc4:	20 f0       	brcs	.+8      	; 0xdce <__divsf3_pse+0xae>
     dc6:	62 1b       	sub	r22, r18
     dc8:	73 0b       	sbc	r23, r19
     dca:	84 0b       	sbc	r24, r20
     dcc:	ba 0b       	sbc	r27, r26
     dce:	ee 1f       	adc	r30, r30
     dd0:	88 f7       	brcc	.-30     	; 0xdb4 <__divsf3_pse+0x94>
     dd2:	e0 95       	com	r30
     dd4:	08 95       	ret

00000dd6 <__fixunssfsi>:
     dd6:	0e 94 ab 07 	call	0xf56	; 0xf56 <__fp_splitA>
     dda:	88 f0       	brcs	.+34     	; 0xdfe <__fixunssfsi+0x28>
     ddc:	9f 57       	subi	r25, 0x7F	; 127
     dde:	98 f0       	brcs	.+38     	; 0xe06 <__fixunssfsi+0x30>
     de0:	b9 2f       	mov	r27, r25
     de2:	99 27       	eor	r25, r25
     de4:	b7 51       	subi	r27, 0x17	; 23
     de6:	b0 f0       	brcs	.+44     	; 0xe14 <__fixunssfsi+0x3e>
     de8:	e1 f0       	breq	.+56     	; 0xe22 <__fixunssfsi+0x4c>
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	1a f0       	brmi	.+6      	; 0xdfa <__fixunssfsi+0x24>
     df4:	ba 95       	dec	r27
     df6:	c9 f7       	brne	.-14     	; 0xdea <__fixunssfsi+0x14>
     df8:	14 c0       	rjmp	.+40     	; 0xe22 <__fixunssfsi+0x4c>
     dfa:	b1 30       	cpi	r27, 0x01	; 1
     dfc:	91 f0       	breq	.+36     	; 0xe22 <__fixunssfsi+0x4c>
     dfe:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fp_zero>
     e02:	b1 e0       	ldi	r27, 0x01	; 1
     e04:	08 95       	ret
     e06:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_zero>
     e0a:	67 2f       	mov	r22, r23
     e0c:	78 2f       	mov	r23, r24
     e0e:	88 27       	eor	r24, r24
     e10:	b8 5f       	subi	r27, 0xF8	; 248
     e12:	39 f0       	breq	.+14     	; 0xe22 <__fixunssfsi+0x4c>
     e14:	b9 3f       	cpi	r27, 0xF9	; 249
     e16:	cc f3       	brlt	.-14     	; 0xe0a <__fixunssfsi+0x34>
     e18:	86 95       	lsr	r24
     e1a:	77 95       	ror	r23
     e1c:	67 95       	ror	r22
     e1e:	b3 95       	inc	r27
     e20:	d9 f7       	brne	.-10     	; 0xe18 <__fixunssfsi+0x42>
     e22:	3e f4       	brtc	.+14     	; 0xe32 <__fixunssfsi+0x5c>
     e24:	90 95       	com	r25
     e26:	80 95       	com	r24
     e28:	70 95       	com	r23
     e2a:	61 95       	neg	r22
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	08 95       	ret

00000e34 <__floatunsisf>:
     e34:	e8 94       	clt
     e36:	09 c0       	rjmp	.+18     	; 0xe4a <__floatsisf+0x12>

00000e38 <__floatsisf>:
     e38:	97 fb       	bst	r25, 7
     e3a:	3e f4       	brtc	.+14     	; 0xe4a <__floatsisf+0x12>
     e3c:	90 95       	com	r25
     e3e:	80 95       	com	r24
     e40:	70 95       	com	r23
     e42:	61 95       	neg	r22
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	8f 4f       	sbci	r24, 0xFF	; 255
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	99 23       	and	r25, r25
     e4c:	a9 f0       	breq	.+42     	; 0xe78 <__floatsisf+0x40>
     e4e:	f9 2f       	mov	r31, r25
     e50:	96 e9       	ldi	r25, 0x96	; 150
     e52:	bb 27       	eor	r27, r27
     e54:	93 95       	inc	r25
     e56:	f6 95       	lsr	r31
     e58:	87 95       	ror	r24
     e5a:	77 95       	ror	r23
     e5c:	67 95       	ror	r22
     e5e:	b7 95       	ror	r27
     e60:	f1 11       	cpse	r31, r1
     e62:	f8 cf       	rjmp	.-16     	; 0xe54 <__floatsisf+0x1c>
     e64:	fa f4       	brpl	.+62     	; 0xea4 <__floatsisf+0x6c>
     e66:	bb 0f       	add	r27, r27
     e68:	11 f4       	brne	.+4      	; 0xe6e <__floatsisf+0x36>
     e6a:	60 ff       	sbrs	r22, 0
     e6c:	1b c0       	rjmp	.+54     	; 0xea4 <__floatsisf+0x6c>
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	8f 4f       	sbci	r24, 0xFF	; 255
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	16 c0       	rjmp	.+44     	; 0xea4 <__floatsisf+0x6c>
     e78:	88 23       	and	r24, r24
     e7a:	11 f0       	breq	.+4      	; 0xe80 <__floatsisf+0x48>
     e7c:	96 e9       	ldi	r25, 0x96	; 150
     e7e:	11 c0       	rjmp	.+34     	; 0xea2 <__floatsisf+0x6a>
     e80:	77 23       	and	r23, r23
     e82:	21 f0       	breq	.+8      	; 0xe8c <__floatsisf+0x54>
     e84:	9e e8       	ldi	r25, 0x8E	; 142
     e86:	87 2f       	mov	r24, r23
     e88:	76 2f       	mov	r23, r22
     e8a:	05 c0       	rjmp	.+10     	; 0xe96 <__floatsisf+0x5e>
     e8c:	66 23       	and	r22, r22
     e8e:	71 f0       	breq	.+28     	; 0xeac <__floatsisf+0x74>
     e90:	96 e8       	ldi	r25, 0x86	; 134
     e92:	86 2f       	mov	r24, r22
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	2a f0       	brmi	.+10     	; 0xea4 <__floatsisf+0x6c>
     e9a:	9a 95       	dec	r25
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	88 1f       	adc	r24, r24
     ea2:	da f7       	brpl	.-10     	; 0xe9a <__floatsisf+0x62>
     ea4:	88 0f       	add	r24, r24
     ea6:	96 95       	lsr	r25
     ea8:	87 95       	ror	r24
     eaa:	97 f9       	bld	r25, 7
     eac:	08 95       	ret

00000eae <__fp_cmp>:
     eae:	99 0f       	add	r25, r25
     eb0:	00 08       	sbc	r0, r0
     eb2:	55 0f       	add	r21, r21
     eb4:	aa 0b       	sbc	r26, r26
     eb6:	e0 e8       	ldi	r30, 0x80	; 128
     eb8:	fe ef       	ldi	r31, 0xFE	; 254
     eba:	16 16       	cp	r1, r22
     ebc:	17 06       	cpc	r1, r23
     ebe:	e8 07       	cpc	r30, r24
     ec0:	f9 07       	cpc	r31, r25
     ec2:	c0 f0       	brcs	.+48     	; 0xef4 <__fp_cmp+0x46>
     ec4:	12 16       	cp	r1, r18
     ec6:	13 06       	cpc	r1, r19
     ec8:	e4 07       	cpc	r30, r20
     eca:	f5 07       	cpc	r31, r21
     ecc:	98 f0       	brcs	.+38     	; 0xef4 <__fp_cmp+0x46>
     ece:	62 1b       	sub	r22, r18
     ed0:	73 0b       	sbc	r23, r19
     ed2:	84 0b       	sbc	r24, r20
     ed4:	95 0b       	sbc	r25, r21
     ed6:	39 f4       	brne	.+14     	; 0xee6 <__fp_cmp+0x38>
     ed8:	0a 26       	eor	r0, r26
     eda:	61 f0       	breq	.+24     	; 0xef4 <__fp_cmp+0x46>
     edc:	23 2b       	or	r18, r19
     ede:	24 2b       	or	r18, r20
     ee0:	25 2b       	or	r18, r21
     ee2:	21 f4       	brne	.+8      	; 0xeec <__fp_cmp+0x3e>
     ee4:	08 95       	ret
     ee6:	0a 26       	eor	r0, r26
     ee8:	09 f4       	brne	.+2      	; 0xeec <__fp_cmp+0x3e>
     eea:	a1 40       	sbci	r26, 0x01	; 1
     eec:	a6 95       	lsr	r26
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	81 1d       	adc	r24, r1
     ef2:	81 1d       	adc	r24, r1
     ef4:	08 95       	ret

00000ef6 <__fp_inf>:
     ef6:	97 f9       	bld	r25, 7
     ef8:	9f 67       	ori	r25, 0x7F	; 127
     efa:	80 e8       	ldi	r24, 0x80	; 128
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	08 95       	ret

00000f02 <__fp_nan>:
     f02:	9f ef       	ldi	r25, 0xFF	; 255
     f04:	80 ec       	ldi	r24, 0xC0	; 192
     f06:	08 95       	ret

00000f08 <__fp_pscA>:
     f08:	00 24       	eor	r0, r0
     f0a:	0a 94       	dec	r0
     f0c:	16 16       	cp	r1, r22
     f0e:	17 06       	cpc	r1, r23
     f10:	18 06       	cpc	r1, r24
     f12:	09 06       	cpc	r0, r25
     f14:	08 95       	ret

00000f16 <__fp_pscB>:
     f16:	00 24       	eor	r0, r0
     f18:	0a 94       	dec	r0
     f1a:	12 16       	cp	r1, r18
     f1c:	13 06       	cpc	r1, r19
     f1e:	14 06       	cpc	r1, r20
     f20:	05 06       	cpc	r0, r21
     f22:	08 95       	ret

00000f24 <__fp_round>:
     f24:	09 2e       	mov	r0, r25
     f26:	03 94       	inc	r0
     f28:	00 0c       	add	r0, r0
     f2a:	11 f4       	brne	.+4      	; 0xf30 <__fp_round+0xc>
     f2c:	88 23       	and	r24, r24
     f2e:	52 f0       	brmi	.+20     	; 0xf44 <__fp_round+0x20>
     f30:	bb 0f       	add	r27, r27
     f32:	40 f4       	brcc	.+16     	; 0xf44 <__fp_round+0x20>
     f34:	bf 2b       	or	r27, r31
     f36:	11 f4       	brne	.+4      	; 0xf3c <__fp_round+0x18>
     f38:	60 ff       	sbrs	r22, 0
     f3a:	04 c0       	rjmp	.+8      	; 0xf44 <__fp_round+0x20>
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	8f 4f       	sbci	r24, 0xFF	; 255
     f42:	9f 4f       	sbci	r25, 0xFF	; 255
     f44:	08 95       	ret

00000f46 <__fp_split3>:
     f46:	57 fd       	sbrc	r21, 7
     f48:	90 58       	subi	r25, 0x80	; 128
     f4a:	44 0f       	add	r20, r20
     f4c:	55 1f       	adc	r21, r21
     f4e:	59 f0       	breq	.+22     	; 0xf66 <__fp_splitA+0x10>
     f50:	5f 3f       	cpi	r21, 0xFF	; 255
     f52:	71 f0       	breq	.+28     	; 0xf70 <__fp_splitA+0x1a>
     f54:	47 95       	ror	r20

00000f56 <__fp_splitA>:
     f56:	88 0f       	add	r24, r24
     f58:	97 fb       	bst	r25, 7
     f5a:	99 1f       	adc	r25, r25
     f5c:	61 f0       	breq	.+24     	; 0xf76 <__fp_splitA+0x20>
     f5e:	9f 3f       	cpi	r25, 0xFF	; 255
     f60:	79 f0       	breq	.+30     	; 0xf80 <__fp_splitA+0x2a>
     f62:	87 95       	ror	r24
     f64:	08 95       	ret
     f66:	12 16       	cp	r1, r18
     f68:	13 06       	cpc	r1, r19
     f6a:	14 06       	cpc	r1, r20
     f6c:	55 1f       	adc	r21, r21
     f6e:	f2 cf       	rjmp	.-28     	; 0xf54 <__fp_split3+0xe>
     f70:	46 95       	lsr	r20
     f72:	f1 df       	rcall	.-30     	; 0xf56 <__fp_splitA>
     f74:	08 c0       	rjmp	.+16     	; 0xf86 <__fp_splitA+0x30>
     f76:	16 16       	cp	r1, r22
     f78:	17 06       	cpc	r1, r23
     f7a:	18 06       	cpc	r1, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	f1 cf       	rjmp	.-30     	; 0xf62 <__fp_splitA+0xc>
     f80:	86 95       	lsr	r24
     f82:	71 05       	cpc	r23, r1
     f84:	61 05       	cpc	r22, r1
     f86:	08 94       	sec
     f88:	08 95       	ret

00000f8a <__fp_zero>:
     f8a:	e8 94       	clt

00000f8c <__fp_szero>:
     f8c:	bb 27       	eor	r27, r27
     f8e:	66 27       	eor	r22, r22
     f90:	77 27       	eor	r23, r23
     f92:	cb 01       	movw	r24, r22
     f94:	97 f9       	bld	r25, 7
     f96:	08 95       	ret

00000f98 <__gesf2>:
     f98:	0e 94 57 07 	call	0xeae	; 0xeae <__fp_cmp>
     f9c:	08 f4       	brcc	.+2      	; 0xfa0 <__gesf2+0x8>
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	08 95       	ret

00000fa2 <__mulsf3>:
     fa2:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3x>
     fa6:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__fp_round>
     faa:	0e 94 84 07 	call	0xf08	; 0xf08 <__fp_pscA>
     fae:	38 f0       	brcs	.+14     	; 0xfbe <__mulsf3+0x1c>
     fb0:	0e 94 8b 07 	call	0xf16	; 0xf16 <__fp_pscB>
     fb4:	20 f0       	brcs	.+8      	; 0xfbe <__mulsf3+0x1c>
     fb6:	95 23       	and	r25, r21
     fb8:	11 f0       	breq	.+4      	; 0xfbe <__mulsf3+0x1c>
     fba:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__fp_inf>
     fbe:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_nan>
     fc2:	11 24       	eor	r1, r1
     fc4:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_szero>

00000fc8 <__mulsf3x>:
     fc8:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_split3>
     fcc:	70 f3       	brcs	.-36     	; 0xfaa <__mulsf3+0x8>

00000fce <__mulsf3_pse>:
     fce:	95 9f       	mul	r25, r21
     fd0:	c1 f3       	breq	.-16     	; 0xfc2 <__mulsf3+0x20>
     fd2:	95 0f       	add	r25, r21
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	55 1f       	adc	r21, r21
     fd8:	62 9f       	mul	r22, r18
     fda:	f0 01       	movw	r30, r0
     fdc:	72 9f       	mul	r23, r18
     fde:	bb 27       	eor	r27, r27
     fe0:	f0 0d       	add	r31, r0
     fe2:	b1 1d       	adc	r27, r1
     fe4:	63 9f       	mul	r22, r19
     fe6:	aa 27       	eor	r26, r26
     fe8:	f0 0d       	add	r31, r0
     fea:	b1 1d       	adc	r27, r1
     fec:	aa 1f       	adc	r26, r26
     fee:	64 9f       	mul	r22, r20
     ff0:	66 27       	eor	r22, r22
     ff2:	b0 0d       	add	r27, r0
     ff4:	a1 1d       	adc	r26, r1
     ff6:	66 1f       	adc	r22, r22
     ff8:	82 9f       	mul	r24, r18
     ffa:	22 27       	eor	r18, r18
     ffc:	b0 0d       	add	r27, r0
     ffe:	a1 1d       	adc	r26, r1
    1000:	62 1f       	adc	r22, r18
    1002:	73 9f       	mul	r23, r19
    1004:	b0 0d       	add	r27, r0
    1006:	a1 1d       	adc	r26, r1
    1008:	62 1f       	adc	r22, r18
    100a:	83 9f       	mul	r24, r19
    100c:	a0 0d       	add	r26, r0
    100e:	61 1d       	adc	r22, r1
    1010:	22 1f       	adc	r18, r18
    1012:	74 9f       	mul	r23, r20
    1014:	33 27       	eor	r19, r19
    1016:	a0 0d       	add	r26, r0
    1018:	61 1d       	adc	r22, r1
    101a:	23 1f       	adc	r18, r19
    101c:	84 9f       	mul	r24, r20
    101e:	60 0d       	add	r22, r0
    1020:	21 1d       	adc	r18, r1
    1022:	82 2f       	mov	r24, r18
    1024:	76 2f       	mov	r23, r22
    1026:	6a 2f       	mov	r22, r26
    1028:	11 24       	eor	r1, r1
    102a:	9f 57       	subi	r25, 0x7F	; 127
    102c:	50 40       	sbci	r21, 0x00	; 0
    102e:	9a f0       	brmi	.+38     	; 0x1056 <__mulsf3_pse+0x88>
    1030:	f1 f0       	breq	.+60     	; 0x106e <__mulsf3_pse+0xa0>
    1032:	88 23       	and	r24, r24
    1034:	4a f0       	brmi	.+18     	; 0x1048 <__mulsf3_pse+0x7a>
    1036:	ee 0f       	add	r30, r30
    1038:	ff 1f       	adc	r31, r31
    103a:	bb 1f       	adc	r27, r27
    103c:	66 1f       	adc	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	88 1f       	adc	r24, r24
    1042:	91 50       	subi	r25, 0x01	; 1
    1044:	50 40       	sbci	r21, 0x00	; 0
    1046:	a9 f7       	brne	.-22     	; 0x1032 <__mulsf3_pse+0x64>
    1048:	9e 3f       	cpi	r25, 0xFE	; 254
    104a:	51 05       	cpc	r21, r1
    104c:	80 f0       	brcs	.+32     	; 0x106e <__mulsf3_pse+0xa0>
    104e:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__fp_inf>
    1052:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_szero>
    1056:	5f 3f       	cpi	r21, 0xFF	; 255
    1058:	e4 f3       	brlt	.-8      	; 0x1052 <__mulsf3_pse+0x84>
    105a:	98 3e       	cpi	r25, 0xE8	; 232
    105c:	d4 f3       	brlt	.-12     	; 0x1052 <__mulsf3_pse+0x84>
    105e:	86 95       	lsr	r24
    1060:	77 95       	ror	r23
    1062:	67 95       	ror	r22
    1064:	b7 95       	ror	r27
    1066:	f7 95       	ror	r31
    1068:	e7 95       	ror	r30
    106a:	9f 5f       	subi	r25, 0xFF	; 255
    106c:	c1 f7       	brne	.-16     	; 0x105e <__mulsf3_pse+0x90>
    106e:	fe 2b       	or	r31, r30
    1070:	88 0f       	add	r24, r24
    1072:	91 1d       	adc	r25, r1
    1074:	96 95       	lsr	r25
    1076:	87 95       	ror	r24
    1078:	97 f9       	bld	r25, 7
    107a:	08 95       	ret

0000107c <dtostrf>:
    107c:	ef 92       	push	r14
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	e8 01       	movw	r28, r16
    1088:	47 fd       	sbrc	r20, 7
    108a:	16 c0       	rjmp	.+44     	; 0x10b8 <dtostrf+0x3c>
    108c:	34 e0       	ldi	r19, 0x04	; 4
    108e:	04 2e       	mov	r0, r20
    1090:	00 0c       	add	r0, r0
    1092:	55 0b       	sbc	r21, r21
    1094:	57 ff       	sbrs	r21, 7
    1096:	03 c0       	rjmp	.+6      	; 0x109e <dtostrf+0x22>
    1098:	51 95       	neg	r21
    109a:	41 95       	neg	r20
    109c:	51 09       	sbc	r21, r1
    109e:	e3 2e       	mov	r14, r19
    10a0:	02 2f       	mov	r16, r18
    10a2:	24 2f       	mov	r18, r20
    10a4:	ae 01       	movw	r20, r28
    10a6:	0e 94 83 08 	call	0x1106	; 0x1106 <dtoa_prf>
    10aa:	ce 01       	movw	r24, r28
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ef 90       	pop	r14
    10b6:	08 95       	ret
    10b8:	34 e1       	ldi	r19, 0x14	; 20
    10ba:	e9 cf       	rjmp	.-46     	; 0x108e <dtostrf+0x12>

000010bc <__itoa_ncheck>:
    10bc:	bb 27       	eor	r27, r27
    10be:	4a 30       	cpi	r20, 0x0A	; 10
    10c0:	31 f4       	brne	.+12     	; 0x10ce <__itoa_ncheck+0x12>
    10c2:	99 23       	and	r25, r25
    10c4:	22 f4       	brpl	.+8      	; 0x10ce <__itoa_ncheck+0x12>
    10c6:	bd e2       	ldi	r27, 0x2D	; 45
    10c8:	90 95       	com	r25
    10ca:	81 95       	neg	r24
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <__utoa_common>

000010d2 <__utoa_ncheck>:
    10d2:	bb 27       	eor	r27, r27

000010d4 <__utoa_common>:
    10d4:	fb 01       	movw	r30, r22
    10d6:	55 27       	eor	r21, r21
    10d8:	aa 27       	eor	r26, r26
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	aa 1f       	adc	r26, r26
    10e0:	a4 17       	cp	r26, r20
    10e2:	10 f0       	brcs	.+4      	; 0x10e8 <__utoa_common+0x14>
    10e4:	a4 1b       	sub	r26, r20
    10e6:	83 95       	inc	r24
    10e8:	50 51       	subi	r21, 0x10	; 16
    10ea:	b9 f7       	brne	.-18     	; 0x10da <__utoa_common+0x6>
    10ec:	a0 5d       	subi	r26, 0xD0	; 208
    10ee:	aa 33       	cpi	r26, 0x3A	; 58
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <__utoa_common+0x20>
    10f2:	a9 5d       	subi	r26, 0xD9	; 217
    10f4:	a1 93       	st	Z+, r26
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	79 f7       	brne	.-34     	; 0x10d8 <__utoa_common+0x4>
    10fa:	b1 11       	cpse	r27, r1
    10fc:	b1 93       	st	Z+, r27
    10fe:	11 92       	st	Z+, r1
    1100:	cb 01       	movw	r24, r22
    1102:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <strrev>

00001106 <dtoa_prf>:
    1106:	8f 92       	push	r8
    1108:	9f 92       	push	r9
    110a:	af 92       	push	r10
    110c:	bf 92       	push	r11
    110e:	cf 92       	push	r12
    1110:	df 92       	push	r13
    1112:	ef 92       	push	r14
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	29 97       	sbiw	r28, 0x09	; 9
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	6a 01       	movw	r12, r20
    1130:	f2 2e       	mov	r15, r18
    1132:	b0 2e       	mov	r11, r16
    1134:	2b e3       	ldi	r18, 0x3B	; 59
    1136:	20 17       	cp	r18, r16
    1138:	08 f4       	brcc	.+2      	; 0x113c <dtoa_prf+0x36>
    113a:	5f c0       	rjmp	.+190    	; 0x11fa <dtoa_prf+0xf4>
    113c:	11 e0       	ldi	r17, 0x01	; 1
    113e:	10 0f       	add	r17, r16
    1140:	01 2f       	mov	r16, r17
    1142:	27 e0       	ldi	r18, 0x07	; 7
    1144:	ae 01       	movw	r20, r28
    1146:	4f 5f       	subi	r20, 0xFF	; 255
    1148:	5f 4f       	sbci	r21, 0xFF	; 255
    114a:	0e 94 04 0a 	call	0x1408	; 0x1408 <__ftoa_engine>
    114e:	bc 01       	movw	r22, r24
    1150:	39 81       	ldd	r19, Y+1	; 0x01
    1152:	83 2f       	mov	r24, r19
    1154:	89 70       	andi	r24, 0x09	; 9
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	09 f4       	brne	.+2      	; 0x115c <dtoa_prf+0x56>
    115a:	51 c0       	rjmp	.+162    	; 0x11fe <dtoa_prf+0xf8>
    115c:	e1 fc       	sbrc	r14, 1
    115e:	51 c0       	rjmp	.+162    	; 0x1202 <dtoa_prf+0xfc>
    1160:	9e 2d       	mov	r25, r14
    1162:	91 70       	andi	r25, 0x01	; 1
    1164:	e0 fc       	sbrc	r14, 0
    1166:	90 e2       	ldi	r25, 0x20	; 32
    1168:	ae 2d       	mov	r26, r14
    116a:	a0 71       	andi	r26, 0x10	; 16
    116c:	83 2f       	mov	r24, r19
    116e:	88 70       	andi	r24, 0x08	; 8
    1170:	33 ff       	sbrs	r19, 3
    1172:	5a c0       	rjmp	.+180    	; 0x1228 <dtoa_prf+0x122>
    1174:	91 11       	cpse	r25, r1
    1176:	47 c0       	rjmp	.+142    	; 0x1206 <dtoa_prf+0x100>
    1178:	83 e0       	ldi	r24, 0x03	; 3
    117a:	8f 15       	cp	r24, r15
    117c:	08 f0       	brcs	.+2      	; 0x1180 <dtoa_prf+0x7a>
    117e:	45 c0       	rjmp	.+138    	; 0x120a <dtoa_prf+0x104>
    1180:	f8 1a       	sub	r15, r24
    1182:	a1 11       	cpse	r26, r1
    1184:	08 c0       	rjmp	.+16     	; 0x1196 <dtoa_prf+0x90>
    1186:	f6 01       	movw	r30, r12
    1188:	8f 2d       	mov	r24, r15
    118a:	20 e2       	ldi	r18, 0x20	; 32
    118c:	81 11       	cpse	r24, r1
    118e:	3f c0       	rjmp	.+126    	; 0x120e <dtoa_prf+0x108>
    1190:	cf 0c       	add	r12, r15
    1192:	d1 1c       	adc	r13, r1
    1194:	f1 2c       	mov	r15, r1
    1196:	99 23       	and	r25, r25
    1198:	29 f0       	breq	.+10     	; 0x11a4 <dtoa_prf+0x9e>
    119a:	d6 01       	movw	r26, r12
    119c:	9c 93       	st	X, r25
    119e:	f6 01       	movw	r30, r12
    11a0:	31 96       	adiw	r30, 0x01	; 1
    11a2:	6f 01       	movw	r12, r30
    11a4:	c6 01       	movw	r24, r12
    11a6:	03 96       	adiw	r24, 0x03	; 3
    11a8:	e2 fe       	sbrs	r14, 2
    11aa:	34 c0       	rjmp	.+104    	; 0x1214 <dtoa_prf+0x10e>
    11ac:	2e e4       	ldi	r18, 0x4E	; 78
    11ae:	d6 01       	movw	r26, r12
    11b0:	2c 93       	st	X, r18
    11b2:	31 e4       	ldi	r19, 0x41	; 65
    11b4:	11 96       	adiw	r26, 0x01	; 1
    11b6:	3c 93       	st	X, r19
    11b8:	11 97       	sbiw	r26, 0x01	; 1
    11ba:	12 96       	adiw	r26, 0x02	; 2
    11bc:	2c 93       	st	X, r18
    11be:	fc 01       	movw	r30, r24
    11c0:	2f 2d       	mov	r18, r15
    11c2:	30 e2       	ldi	r19, 0x20	; 32
    11c4:	21 11       	cpse	r18, r1
    11c6:	2d c0       	rjmp	.+90     	; 0x1222 <dtoa_prf+0x11c>
    11c8:	8f 0d       	add	r24, r15
    11ca:	91 1d       	adc	r25, r1
    11cc:	dc 01       	movw	r26, r24
    11ce:	1c 92       	st	X, r1
    11d0:	8e ef       	ldi	r24, 0xFE	; 254
    11d2:	9f ef       	ldi	r25, 0xFF	; 255
    11d4:	29 96       	adiw	r28, 0x09	; 9
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	df 90       	pop	r13
    11ee:	cf 90       	pop	r12
    11f0:	bf 90       	pop	r11
    11f2:	af 90       	pop	r10
    11f4:	9f 90       	pop	r9
    11f6:	8f 90       	pop	r8
    11f8:	08 95       	ret
    11fa:	1c e3       	ldi	r17, 0x3C	; 60
    11fc:	a1 cf       	rjmp	.-190    	; 0x1140 <dtoa_prf+0x3a>
    11fe:	9d e2       	ldi	r25, 0x2D	; 45
    1200:	b3 cf       	rjmp	.-154    	; 0x1168 <dtoa_prf+0x62>
    1202:	9b e2       	ldi	r25, 0x2B	; 43
    1204:	b1 cf       	rjmp	.-158    	; 0x1168 <dtoa_prf+0x62>
    1206:	84 e0       	ldi	r24, 0x04	; 4
    1208:	b8 cf       	rjmp	.-144    	; 0x117a <dtoa_prf+0x74>
    120a:	f1 2c       	mov	r15, r1
    120c:	ba cf       	rjmp	.-140    	; 0x1182 <dtoa_prf+0x7c>
    120e:	21 93       	st	Z+, r18
    1210:	81 50       	subi	r24, 0x01	; 1
    1212:	bc cf       	rjmp	.-136    	; 0x118c <dtoa_prf+0x86>
    1214:	2e e6       	ldi	r18, 0x6E	; 110
    1216:	f6 01       	movw	r30, r12
    1218:	20 83       	st	Z, r18
    121a:	31 e6       	ldi	r19, 0x61	; 97
    121c:	31 83       	std	Z+1, r19	; 0x01
    121e:	22 83       	std	Z+2, r18	; 0x02
    1220:	ce cf       	rjmp	.-100    	; 0x11be <dtoa_prf+0xb8>
    1222:	31 93       	st	Z+, r19
    1224:	21 50       	subi	r18, 0x01	; 1
    1226:	ce cf       	rjmp	.-100    	; 0x11c4 <dtoa_prf+0xbe>
    1228:	23 2f       	mov	r18, r19
    122a:	24 70       	andi	r18, 0x04	; 4
    122c:	32 ff       	sbrs	r19, 2
    122e:	41 c0       	rjmp	.+130    	; 0x12b2 <dtoa_prf+0x1ac>
    1230:	91 11       	cpse	r25, r1
    1232:	2f c0       	rjmp	.+94     	; 0x1292 <dtoa_prf+0x18c>
    1234:	23 e0       	ldi	r18, 0x03	; 3
    1236:	2f 15       	cp	r18, r15
    1238:	10 f4       	brcc	.+4      	; 0x123e <dtoa_prf+0x138>
    123a:	8f 2d       	mov	r24, r15
    123c:	82 1b       	sub	r24, r18
    123e:	a1 11       	cpse	r26, r1
    1240:	08 c0       	rjmp	.+16     	; 0x1252 <dtoa_prf+0x14c>
    1242:	f6 01       	movw	r30, r12
    1244:	28 2f       	mov	r18, r24
    1246:	30 e2       	ldi	r19, 0x20	; 32
    1248:	21 11       	cpse	r18, r1
    124a:	25 c0       	rjmp	.+74     	; 0x1296 <dtoa_prf+0x190>
    124c:	c8 0e       	add	r12, r24
    124e:	d1 1c       	adc	r13, r1
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	99 23       	and	r25, r25
    1254:	31 f0       	breq	.+12     	; 0x1262 <dtoa_prf+0x15c>
    1256:	f6 01       	movw	r30, r12
    1258:	90 83       	st	Z, r25
    125a:	96 01       	movw	r18, r12
    125c:	2f 5f       	subi	r18, 0xFF	; 255
    125e:	3f 4f       	sbci	r19, 0xFF	; 255
    1260:	69 01       	movw	r12, r18
    1262:	96 01       	movw	r18, r12
    1264:	2d 5f       	subi	r18, 0xFD	; 253
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	e2 fe       	sbrs	r14, 2
    126a:	18 c0       	rjmp	.+48     	; 0x129c <dtoa_prf+0x196>
    126c:	99 e4       	ldi	r25, 0x49	; 73
    126e:	d6 01       	movw	r26, r12
    1270:	9c 93       	st	X, r25
    1272:	9e e4       	ldi	r25, 0x4E	; 78
    1274:	11 96       	adiw	r26, 0x01	; 1
    1276:	9c 93       	st	X, r25
    1278:	11 97       	sbiw	r26, 0x01	; 1
    127a:	96 e4       	ldi	r25, 0x46	; 70
    127c:	12 96       	adiw	r26, 0x02	; 2
    127e:	9c 93       	st	X, r25
    1280:	f9 01       	movw	r30, r18
    1282:	98 2f       	mov	r25, r24
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	91 11       	cpse	r25, r1
    1288:	11 c0       	rjmp	.+34     	; 0x12ac <dtoa_prf+0x1a6>
    128a:	28 0f       	add	r18, r24
    128c:	31 1d       	adc	r19, r1
    128e:	d9 01       	movw	r26, r18
    1290:	9e cf       	rjmp	.-196    	; 0x11ce <dtoa_prf+0xc8>
    1292:	24 e0       	ldi	r18, 0x04	; 4
    1294:	d0 cf       	rjmp	.-96     	; 0x1236 <dtoa_prf+0x130>
    1296:	31 93       	st	Z+, r19
    1298:	21 50       	subi	r18, 0x01	; 1
    129a:	d6 cf       	rjmp	.-84     	; 0x1248 <dtoa_prf+0x142>
    129c:	99 e6       	ldi	r25, 0x69	; 105
    129e:	f6 01       	movw	r30, r12
    12a0:	90 83       	st	Z, r25
    12a2:	9e e6       	ldi	r25, 0x6E	; 110
    12a4:	91 83       	std	Z+1, r25	; 0x01
    12a6:	96 e6       	ldi	r25, 0x66	; 102
    12a8:	92 83       	std	Z+2, r25	; 0x02
    12aa:	ea cf       	rjmp	.-44     	; 0x1280 <dtoa_prf+0x17a>
    12ac:	41 93       	st	Z+, r20
    12ae:	91 50       	subi	r25, 0x01	; 1
    12b0:	ea cf       	rjmp	.-44     	; 0x1286 <dtoa_prf+0x180>
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	91 11       	cpse	r25, r1
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <dtoa_prf+0x1b8>
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	16 16       	cp	r1, r22
    12c0:	17 06       	cpc	r1, r23
    12c2:	0c f0       	brlt	.+2      	; 0x12c6 <dtoa_prf+0x1c0>
    12c4:	75 c0       	rjmp	.+234    	; 0x13b0 <dtoa_prf+0x2aa>
    12c6:	fb 01       	movw	r30, r22
    12c8:	31 96       	adiw	r30, 0x01	; 1
    12ca:	e4 0f       	add	r30, r20
    12cc:	f5 1f       	adc	r31, r21
    12ce:	bb 20       	and	r11, r11
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <dtoa_prf+0x1ce>
    12d2:	71 c0       	rjmp	.+226    	; 0x13b6 <dtoa_prf+0x2b0>
    12d4:	4b 2d       	mov	r20, r11
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	4f 5f       	subi	r20, 0xFF	; 255
    12da:	5f 4f       	sbci	r21, 0xFF	; 255
    12dc:	4e 0f       	add	r20, r30
    12de:	5f 1f       	adc	r21, r31
    12e0:	ef 2d       	mov	r30, r15
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	4e 17       	cp	r20, r30
    12e6:	5f 07       	cpc	r21, r31
    12e8:	14 f4       	brge	.+4      	; 0x12ee <dtoa_prf+0x1e8>
    12ea:	2f 2d       	mov	r18, r15
    12ec:	24 1b       	sub	r18, r20
    12ee:	8e 2d       	mov	r24, r14
    12f0:	88 71       	andi	r24, 0x18	; 24
    12f2:	41 f4       	brne	.+16     	; 0x1304 <dtoa_prf+0x1fe>
    12f4:	f6 01       	movw	r30, r12
    12f6:	82 2f       	mov	r24, r18
    12f8:	40 e2       	ldi	r20, 0x20	; 32
    12fa:	81 11       	cpse	r24, r1
    12fc:	5f c0       	rjmp	.+190    	; 0x13bc <dtoa_prf+0x2b6>
    12fe:	c2 0e       	add	r12, r18
    1300:	d1 1c       	adc	r13, r1
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	99 23       	and	r25, r25
    1306:	29 f0       	breq	.+10     	; 0x1312 <dtoa_prf+0x20c>
    1308:	f6 01       	movw	r30, r12
    130a:	90 83       	st	Z, r25
    130c:	c6 01       	movw	r24, r12
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	6c 01       	movw	r12, r24
    1312:	a1 11       	cpse	r26, r1
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <dtoa_prf+0x220>
    1316:	f6 01       	movw	r30, r12
    1318:	82 2f       	mov	r24, r18
    131a:	90 e3       	ldi	r25, 0x30	; 48
    131c:	81 11       	cpse	r24, r1
    131e:	51 c0       	rjmp	.+162    	; 0x13c2 <dtoa_prf+0x2bc>
    1320:	c2 0e       	add	r12, r18
    1322:	d1 1c       	adc	r13, r1
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	01 2f       	mov	r16, r17
    1328:	06 0f       	add	r16, r22
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	a3 2f       	mov	r26, r19
    132e:	a0 71       	andi	r26, 0x10	; 16
    1330:	aa 2e       	mov	r10, r26
    1332:	34 ff       	sbrs	r19, 4
    1334:	03 c0       	rjmp	.+6      	; 0x133c <dtoa_prf+0x236>
    1336:	91 33       	cpi	r25, 0x31	; 49
    1338:	09 f4       	brne	.+2      	; 0x133c <dtoa_prf+0x236>
    133a:	01 50       	subi	r16, 0x01	; 1
    133c:	10 16       	cp	r1, r16
    133e:	0c f0       	brlt	.+2      	; 0x1342 <dtoa_prf+0x23c>
    1340:	43 c0       	rjmp	.+134    	; 0x13c8 <dtoa_prf+0x2c2>
    1342:	09 30       	cpi	r16, 0x09	; 9
    1344:	08 f0       	brcs	.+2      	; 0x1348 <dtoa_prf+0x242>
    1346:	08 e0       	ldi	r16, 0x08	; 8
    1348:	ab 01       	movw	r20, r22
    134a:	77 ff       	sbrs	r23, 7
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <dtoa_prf+0x24c>
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	fb 01       	movw	r30, r22
    1354:	31 96       	adiw	r30, 0x01	; 1
    1356:	e4 1b       	sub	r30, r20
    1358:	f5 0b       	sbc	r31, r21
    135a:	a1 e0       	ldi	r26, 0x01	; 1
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	ac 0f       	add	r26, r28
    1360:	bd 1f       	adc	r27, r29
    1362:	ea 0f       	add	r30, r26
    1364:	fb 1f       	adc	r31, r27
    1366:	3e e2       	ldi	r19, 0x2E	; 46
    1368:	4b 01       	movw	r8, r22
    136a:	80 1a       	sub	r8, r16
    136c:	91 08       	sbc	r9, r1
    136e:	0b 2d       	mov	r16, r11
    1370:	10 e0       	ldi	r17, 0x00	; 0
    1372:	11 95       	neg	r17
    1374:	01 95       	neg	r16
    1376:	11 09       	sbc	r17, r1
    1378:	4f 3f       	cpi	r20, 0xFF	; 255
    137a:	bf ef       	ldi	r27, 0xFF	; 255
    137c:	5b 07       	cpc	r21, r27
    137e:	21 f4       	brne	.+8      	; 0x1388 <dtoa_prf+0x282>
    1380:	d6 01       	movw	r26, r12
    1382:	3c 93       	st	X, r19
    1384:	11 96       	adiw	r26, 0x01	; 1
    1386:	6d 01       	movw	r12, r26
    1388:	64 17       	cp	r22, r20
    138a:	75 07       	cpc	r23, r21
    138c:	fc f0       	brlt	.+62     	; 0x13cc <dtoa_prf+0x2c6>
    138e:	84 16       	cp	r8, r20
    1390:	95 06       	cpc	r9, r21
    1392:	e4 f4       	brge	.+56     	; 0x13cc <dtoa_prf+0x2c6>
    1394:	80 81       	ld	r24, Z
    1396:	41 50       	subi	r20, 0x01	; 1
    1398:	51 09       	sbc	r21, r1
    139a:	31 96       	adiw	r30, 0x01	; 1
    139c:	d6 01       	movw	r26, r12
    139e:	11 96       	adiw	r26, 0x01	; 1
    13a0:	7d 01       	movw	r14, r26
    13a2:	40 17       	cp	r20, r16
    13a4:	51 07       	cpc	r21, r17
    13a6:	a4 f0       	brlt	.+40     	; 0x13d0 <dtoa_prf+0x2ca>
    13a8:	d6 01       	movw	r26, r12
    13aa:	8c 93       	st	X, r24
    13ac:	67 01       	movw	r12, r14
    13ae:	e4 cf       	rjmp	.-56     	; 0x1378 <dtoa_prf+0x272>
    13b0:	e1 e0       	ldi	r30, 0x01	; 1
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8a cf       	rjmp	.-236    	; 0x12ca <dtoa_prf+0x1c4>
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	90 cf       	rjmp	.-224    	; 0x12dc <dtoa_prf+0x1d6>
    13bc:	41 93       	st	Z+, r20
    13be:	81 50       	subi	r24, 0x01	; 1
    13c0:	9c cf       	rjmp	.-200    	; 0x12fa <dtoa_prf+0x1f4>
    13c2:	91 93       	st	Z+, r25
    13c4:	81 50       	subi	r24, 0x01	; 1
    13c6:	aa cf       	rjmp	.-172    	; 0x131c <dtoa_prf+0x216>
    13c8:	01 e0       	ldi	r16, 0x01	; 1
    13ca:	be cf       	rjmp	.-132    	; 0x1348 <dtoa_prf+0x242>
    13cc:	80 e3       	ldi	r24, 0x30	; 48
    13ce:	e3 cf       	rjmp	.-58     	; 0x1396 <dtoa_prf+0x290>
    13d0:	64 17       	cp	r22, r20
    13d2:	75 07       	cpc	r23, r21
    13d4:	31 f4       	brne	.+12     	; 0x13e2 <dtoa_prf+0x2dc>
    13d6:	96 33       	cpi	r25, 0x36	; 54
    13d8:	90 f4       	brcc	.+36     	; 0x13fe <dtoa_prf+0x2f8>
    13da:	95 33       	cpi	r25, 0x35	; 53
    13dc:	11 f4       	brne	.+4      	; 0x13e2 <dtoa_prf+0x2dc>
    13de:	aa 20       	and	r10, r10
    13e0:	71 f0       	breq	.+28     	; 0x13fe <dtoa_prf+0x2f8>
    13e2:	f6 01       	movw	r30, r12
    13e4:	80 83       	st	Z, r24
    13e6:	f7 01       	movw	r30, r14
    13e8:	82 2f       	mov	r24, r18
    13ea:	90 e2       	ldi	r25, 0x20	; 32
    13ec:	81 11       	cpse	r24, r1
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <dtoa_prf+0x2fc>
    13f0:	f7 01       	movw	r30, r14
    13f2:	e2 0f       	add	r30, r18
    13f4:	f1 1d       	adc	r31, r1
    13f6:	10 82       	st	Z, r1
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	eb ce       	rjmp	.-554    	; 0x11d4 <dtoa_prf+0xce>
    13fe:	81 e3       	ldi	r24, 0x31	; 49
    1400:	f0 cf       	rjmp	.-32     	; 0x13e2 <dtoa_prf+0x2dc>
    1402:	91 93       	st	Z+, r25
    1404:	81 50       	subi	r24, 0x01	; 1
    1406:	f2 cf       	rjmp	.-28     	; 0x13ec <dtoa_prf+0x2e6>

00001408 <__ftoa_engine>:
    1408:	28 30       	cpi	r18, 0x08	; 8
    140a:	08 f0       	brcs	.+2      	; 0x140e <__ftoa_engine+0x6>
    140c:	27 e0       	ldi	r18, 0x07	; 7
    140e:	33 27       	eor	r19, r19
    1410:	da 01       	movw	r26, r20
    1412:	99 0f       	add	r25, r25
    1414:	31 1d       	adc	r19, r1
    1416:	87 fd       	sbrc	r24, 7
    1418:	91 60       	ori	r25, 0x01	; 1
    141a:	00 96       	adiw	r24, 0x00	; 0
    141c:	61 05       	cpc	r22, r1
    141e:	71 05       	cpc	r23, r1
    1420:	39 f4       	brne	.+14     	; 0x1430 <__ftoa_engine+0x28>
    1422:	32 60       	ori	r19, 0x02	; 2
    1424:	2e 5f       	subi	r18, 0xFE	; 254
    1426:	3d 93       	st	X+, r19
    1428:	30 e3       	ldi	r19, 0x30	; 48
    142a:	2a 95       	dec	r18
    142c:	e1 f7       	brne	.-8      	; 0x1426 <__ftoa_engine+0x1e>
    142e:	08 95       	ret
    1430:	9f 3f       	cpi	r25, 0xFF	; 255
    1432:	30 f0       	brcs	.+12     	; 0x1440 <__ftoa_engine+0x38>
    1434:	80 38       	cpi	r24, 0x80	; 128
    1436:	71 05       	cpc	r23, r1
    1438:	61 05       	cpc	r22, r1
    143a:	09 f0       	breq	.+2      	; 0x143e <__ftoa_engine+0x36>
    143c:	3c 5f       	subi	r19, 0xFC	; 252
    143e:	3c 5f       	subi	r19, 0xFC	; 252
    1440:	3d 93       	st	X+, r19
    1442:	91 30       	cpi	r25, 0x01	; 1
    1444:	08 f0       	brcs	.+2      	; 0x1448 <__ftoa_engine+0x40>
    1446:	80 68       	ori	r24, 0x80	; 128
    1448:	91 1d       	adc	r25, r1
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	1f 93       	push	r17
    1450:	0f 93       	push	r16
    1452:	ff 92       	push	r15
    1454:	ef 92       	push	r14
    1456:	19 2f       	mov	r17, r25
    1458:	98 7f       	andi	r25, 0xF8	; 248
    145a:	96 95       	lsr	r25
    145c:	e9 2f       	mov	r30, r25
    145e:	96 95       	lsr	r25
    1460:	96 95       	lsr	r25
    1462:	e9 0f       	add	r30, r25
    1464:	ff 27       	eor	r31, r31
    1466:	ea 51       	subi	r30, 0x1A	; 26
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	99 27       	eor	r25, r25
    146c:	33 27       	eor	r19, r19
    146e:	ee 24       	eor	r14, r14
    1470:	ff 24       	eor	r15, r15
    1472:	a7 01       	movw	r20, r14
    1474:	e7 01       	movw	r28, r14
    1476:	05 90       	lpm	r0, Z+
    1478:	08 94       	sec
    147a:	07 94       	ror	r0
    147c:	28 f4       	brcc	.+10     	; 0x1488 <__ftoa_engine+0x80>
    147e:	36 0f       	add	r19, r22
    1480:	e7 1e       	adc	r14, r23
    1482:	f8 1e       	adc	r15, r24
    1484:	49 1f       	adc	r20, r25
    1486:	51 1d       	adc	r21, r1
    1488:	66 0f       	add	r22, r22
    148a:	77 1f       	adc	r23, r23
    148c:	88 1f       	adc	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	06 94       	lsr	r0
    1492:	a1 f7       	brne	.-24     	; 0x147c <__ftoa_engine+0x74>
    1494:	05 90       	lpm	r0, Z+
    1496:	07 94       	ror	r0
    1498:	28 f4       	brcc	.+10     	; 0x14a4 <__ftoa_engine+0x9c>
    149a:	e7 0e       	add	r14, r23
    149c:	f8 1e       	adc	r15, r24
    149e:	49 1f       	adc	r20, r25
    14a0:	56 1f       	adc	r21, r22
    14a2:	c1 1d       	adc	r28, r1
    14a4:	77 0f       	add	r23, r23
    14a6:	88 1f       	adc	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	66 1f       	adc	r22, r22
    14ac:	06 94       	lsr	r0
    14ae:	a1 f7       	brne	.-24     	; 0x1498 <__ftoa_engine+0x90>
    14b0:	05 90       	lpm	r0, Z+
    14b2:	07 94       	ror	r0
    14b4:	28 f4       	brcc	.+10     	; 0x14c0 <__ftoa_engine+0xb8>
    14b6:	f8 0e       	add	r15, r24
    14b8:	49 1f       	adc	r20, r25
    14ba:	56 1f       	adc	r21, r22
    14bc:	c7 1f       	adc	r28, r23
    14be:	d1 1d       	adc	r29, r1
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	66 1f       	adc	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	06 94       	lsr	r0
    14ca:	a1 f7       	brne	.-24     	; 0x14b4 <__ftoa_engine+0xac>
    14cc:	05 90       	lpm	r0, Z+
    14ce:	07 94       	ror	r0
    14d0:	20 f4       	brcc	.+8      	; 0x14da <__ftoa_engine+0xd2>
    14d2:	49 0f       	add	r20, r25
    14d4:	56 1f       	adc	r21, r22
    14d6:	c7 1f       	adc	r28, r23
    14d8:	d8 1f       	adc	r29, r24
    14da:	99 0f       	add	r25, r25
    14dc:	66 1f       	adc	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	06 94       	lsr	r0
    14e4:	a9 f7       	brne	.-22     	; 0x14d0 <__ftoa_engine+0xc8>
    14e6:	84 91       	lpm	r24, Z
    14e8:	10 95       	com	r17
    14ea:	17 70       	andi	r17, 0x07	; 7
    14ec:	41 f0       	breq	.+16     	; 0x14fe <__ftoa_engine+0xf6>
    14ee:	d6 95       	lsr	r29
    14f0:	c7 95       	ror	r28
    14f2:	57 95       	ror	r21
    14f4:	47 95       	ror	r20
    14f6:	f7 94       	ror	r15
    14f8:	e7 94       	ror	r14
    14fa:	1a 95       	dec	r17
    14fc:	c1 f7       	brne	.-16     	; 0x14ee <__ftoa_engine+0xe6>
    14fe:	ec e8       	ldi	r30, 0x8C	; 140
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	68 94       	set
    1504:	15 90       	lpm	r1, Z+
    1506:	15 91       	lpm	r17, Z+
    1508:	35 91       	lpm	r19, Z+
    150a:	65 91       	lpm	r22, Z+
    150c:	95 91       	lpm	r25, Z+
    150e:	05 90       	lpm	r0, Z+
    1510:	7f e2       	ldi	r23, 0x2F	; 47
    1512:	73 95       	inc	r23
    1514:	e1 18       	sub	r14, r1
    1516:	f1 0a       	sbc	r15, r17
    1518:	43 0b       	sbc	r20, r19
    151a:	56 0b       	sbc	r21, r22
    151c:	c9 0b       	sbc	r28, r25
    151e:	d0 09       	sbc	r29, r0
    1520:	c0 f7       	brcc	.-16     	; 0x1512 <__ftoa_engine+0x10a>
    1522:	e1 0c       	add	r14, r1
    1524:	f1 1e       	adc	r15, r17
    1526:	43 1f       	adc	r20, r19
    1528:	56 1f       	adc	r21, r22
    152a:	c9 1f       	adc	r28, r25
    152c:	d0 1d       	adc	r29, r0
    152e:	7e f4       	brtc	.+30     	; 0x154e <__ftoa_engine+0x146>
    1530:	70 33       	cpi	r23, 0x30	; 48
    1532:	11 f4       	brne	.+4      	; 0x1538 <__ftoa_engine+0x130>
    1534:	8a 95       	dec	r24
    1536:	e6 cf       	rjmp	.-52     	; 0x1504 <__ftoa_engine+0xfc>
    1538:	e8 94       	clt
    153a:	01 50       	subi	r16, 0x01	; 1
    153c:	30 f0       	brcs	.+12     	; 0x154a <__ftoa_engine+0x142>
    153e:	08 0f       	add	r16, r24
    1540:	0a f4       	brpl	.+2      	; 0x1544 <__ftoa_engine+0x13c>
    1542:	00 27       	eor	r16, r16
    1544:	02 17       	cp	r16, r18
    1546:	08 f4       	brcc	.+2      	; 0x154a <__ftoa_engine+0x142>
    1548:	20 2f       	mov	r18, r16
    154a:	23 95       	inc	r18
    154c:	02 2f       	mov	r16, r18
    154e:	7a 33       	cpi	r23, 0x3A	; 58
    1550:	28 f0       	brcs	.+10     	; 0x155c <__ftoa_engine+0x154>
    1552:	79 e3       	ldi	r23, 0x39	; 57
    1554:	7d 93       	st	X+, r23
    1556:	2a 95       	dec	r18
    1558:	e9 f7       	brne	.-6      	; 0x1554 <__ftoa_engine+0x14c>
    155a:	10 c0       	rjmp	.+32     	; 0x157c <__ftoa_engine+0x174>
    155c:	7d 93       	st	X+, r23
    155e:	2a 95       	dec	r18
    1560:	89 f6       	brne	.-94     	; 0x1504 <__ftoa_engine+0xfc>
    1562:	06 94       	lsr	r0
    1564:	97 95       	ror	r25
    1566:	67 95       	ror	r22
    1568:	37 95       	ror	r19
    156a:	17 95       	ror	r17
    156c:	17 94       	ror	r1
    156e:	e1 18       	sub	r14, r1
    1570:	f1 0a       	sbc	r15, r17
    1572:	43 0b       	sbc	r20, r19
    1574:	56 0b       	sbc	r21, r22
    1576:	c9 0b       	sbc	r28, r25
    1578:	d0 09       	sbc	r29, r0
    157a:	98 f0       	brcs	.+38     	; 0x15a2 <__ftoa_engine+0x19a>
    157c:	23 95       	inc	r18
    157e:	7e 91       	ld	r23, -X
    1580:	73 95       	inc	r23
    1582:	7a 33       	cpi	r23, 0x3A	; 58
    1584:	08 f0       	brcs	.+2      	; 0x1588 <__ftoa_engine+0x180>
    1586:	70 e3       	ldi	r23, 0x30	; 48
    1588:	7c 93       	st	X, r23
    158a:	20 13       	cpse	r18, r16
    158c:	b8 f7       	brcc	.-18     	; 0x157c <__ftoa_engine+0x174>
    158e:	7e 91       	ld	r23, -X
    1590:	70 61       	ori	r23, 0x10	; 16
    1592:	7d 93       	st	X+, r23
    1594:	30 f0       	brcs	.+12     	; 0x15a2 <__ftoa_engine+0x19a>
    1596:	83 95       	inc	r24
    1598:	71 e3       	ldi	r23, 0x31	; 49
    159a:	7d 93       	st	X+, r23
    159c:	70 e3       	ldi	r23, 0x30	; 48
    159e:	2a 95       	dec	r18
    15a0:	e1 f7       	brne	.-8      	; 0x159a <__ftoa_engine+0x192>
    15a2:	11 24       	eor	r1, r1
    15a4:	ef 90       	pop	r14
    15a6:	ff 90       	pop	r15
    15a8:	0f 91       	pop	r16
    15aa:	1f 91       	pop	r17
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	99 27       	eor	r25, r25
    15b2:	87 fd       	sbrc	r24, 7
    15b4:	90 95       	com	r25
    15b6:	08 95       	ret

000015b8 <strrev>:
    15b8:	dc 01       	movw	r26, r24
    15ba:	fc 01       	movw	r30, r24
    15bc:	67 2f       	mov	r22, r23
    15be:	71 91       	ld	r23, Z+
    15c0:	77 23       	and	r23, r23
    15c2:	e1 f7       	brne	.-8      	; 0x15bc <strrev+0x4>
    15c4:	32 97       	sbiw	r30, 0x02	; 2
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <strrev+0x18>
    15c8:	7c 91       	ld	r23, X
    15ca:	6d 93       	st	X+, r22
    15cc:	70 83       	st	Z, r23
    15ce:	62 91       	ld	r22, -Z
    15d0:	ae 17       	cp	r26, r30
    15d2:	bf 07       	cpc	r27, r31
    15d4:	c8 f3       	brcs	.-14     	; 0x15c8 <strrev+0x10>
    15d6:	08 95       	ret

000015d8 <_exit>:
    15d8:	f8 94       	cli

000015da <__stop_program>:
    15da:	ff cf       	rjmp	.-2      	; 0x15da <__stop_program>
