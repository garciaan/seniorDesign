
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000ce8  00000d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  00000d86  2**0
                  ALLOC
  3 .stab         00001c20  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000140a  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003db2  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003dc4  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00003e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00004580  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00004c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00004cb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ee       	ldi	r30, 0xE8	; 232
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 8a 03 	call	0x714	; 0x714 <main>
  c6:	0c 94 72 06 	jmp	0xce4	; 0xce4 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <init_esc>:

    return 0;
}

void init_esc(){
    PORTB |= (1 << 4);
  ce:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e6       	ldi	r24, 0x6F	; 111
  d2:	97 e1       	ldi	r25, 0x17	; 23
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <init_esc+0x6>
  d8:	00 c0       	rjmp	.+0      	; 0xda <init_esc+0xc>
  da:	00 00       	nop
    _delay_us(STOP);
    PORTB &= ~(1 << 4);
  dc:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	9f ef       	ldi	r25, 0xFF	; 255
  e0:	23 ed       	ldi	r18, 0xD3	; 211
  e2:	80 e3       	ldi	r24, 0x30	; 48
  e4:	91 50       	subi	r25, 0x01	; 1
  e6:	20 40       	sbci	r18, 0x00	; 0
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <init_esc+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <init_esc+0x20>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <set_16bitPWM1>:
    _delay_ms(1000);
}

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
  f2:	8f b5       	in	r24, 0x2f	; 47
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
  f8:	8f b5       	in	r24, 0x2f	; 47
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
  fe:	8f b5       	in	r24, 0x2f	; 47
 100:	88 60       	ori	r24, 0x08	; 8
 102:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
 104:	8f b5       	in	r24, 0x2f	; 47
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
 10a:	8e b5       	in	r24, 0x2e	; 46
 10c:	88 61       	ori	r24, 0x18	; 24
 10e:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
 110:	8e b5       	in	r24, 0x2e	; 46
 112:	82 60       	ori	r24, 0x02	; 2
 114:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
 116:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
 118:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	3d bd       	out	0x2d, r19	; 45
 120:	2c bd       	out	0x2c, r18	; 44
    sei();
 122:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
 124:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	9f ef       	ldi	r25, 0xFF	; 255
 12a:	97 bd       	out	0x27, r25	; 39
 12c:	86 bd       	out	0x26, r24	; 38
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	81 ee       	ldi	r24, 0xE1	; 225
 132:	94 e0       	ldi	r25, 0x04	; 4
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <set_16bitPWM1+0x42>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <set_16bitPWM1+0x4c>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <TIM16_WriteTCNT1>:
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
 142:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
 144:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
 146:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
 148:	3d bd       	out	0x2d, r19	; 45
 14a:	2c bd       	out	0x2c, r18	; 44
    sei();
 14c:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
 14e:	9f bf       	out	0x3f, r25	; 63
 150:	08 95       	ret

00000152 <USART_Init>:
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
 152:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
 156:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 15a:	88 e1       	ldi	r24, 0x18	; 24
 15c:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 1stop bit */ 
    UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	80 93 9d 00 	sts	0x009D, r24
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	94 e0       	ldi	r25, 0x04	; 4
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <USART_Init+0x1a>
 174:	00 c0       	rjmp	.+0      	; 0x176 <USART_Init+0x24>
 176:	00 00       	nop
 178:	08 95       	ret

0000017a <USART_Transmit>:

    _delay_ms(100);
}
void USART_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 17a:	90 91 9b 00 	lds	r25, 0x009B
 17e:	95 ff       	sbrs	r25, 5
 180:	fc cf       	rjmp	.-8      	; 0x17a <USART_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 182:	80 93 9c 00 	sts	0x009C, r24
 186:	08 95       	ret

00000188 <USART_send_string>:
}

void USART_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 188:	fc 01       	movw	r30, r24
 18a:	20 81       	ld	r18, Z
 18c:	22 23       	and	r18, r18
 18e:	51 f0       	breq	.+20     	; 0x1a4 <USART_send_string+0x1c>
 190:	31 96       	adiw	r30, 0x01	; 1

    _delay_ms(100);
}
void USART_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 192:	90 91 9b 00 	lds	r25, 0x009B
 196:	95 ff       	sbrs	r25, 5
 198:	fc cf       	rjmp	.-8      	; 0x192 <USART_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 19a:	20 93 9c 00 	sts	0x009C, r18
}

void USART_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 19e:	21 91       	ld	r18, Z+
 1a0:	21 11       	cpse	r18, r1
 1a2:	f7 cf       	rjmp	.-18     	; 0x192 <USART_send_string+0xa>
 1a4:	08 95       	ret

000001a6 <USART_Receive>:
        USART_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART_Receive(void){
 1a6:	80 e5       	ldi	r24, 0x50	; 80
 1a8:	93 ec       	ldi	r25, 0xC3	; 195
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <USART_Receive+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	20 ea       	ldi	r18, 0xA0	; 160
 1ae:	2a 95       	dec	r18
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <USART_Receive+0x8>
 1b2:	01 97       	sbiw	r24, 0x01	; 1
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout) {
 1b4:	39 f0       	breq	.+14     	; 0x1c4 <USART_Receive+0x1e>
        if((UCSR1A & (1<<RXC1))){
 1b6:	20 91 9b 00 	lds	r18, 0x009B
 1ba:	27 ff       	sbrs	r18, 7
 1bc:	f7 cf       	rjmp	.-18     	; 0x1ac <USART_Receive+0x6>
            /* Get and return received data from buffer */ 
            return UDR1;
 1be:	80 91 9c 00 	lds	r24, 0x009C
 1c2:	08 95       	ret
        --timeout;
    }
    //while (!(UCSR1A & (1 << RXC1))){
    //}

    return 255;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
}
 1c6:	08 95       	ret

000001c8 <USART_Receive_String>:

void USART_Receive_String(unsigned char *str){
 1c8:	dc 01       	movw	r26, r24
 1ca:	fc 01       	movw	r30, r24
    int i = 0;
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	20 e5       	ldi	r18, 0x50	; 80
 1d2:	33 ec       	ldi	r19, 0xC3	; 195
 1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <USART_Receive_String+0x1a>
 1d6:	80 ea       	ldi	r24, 0xA0	; 160
 1d8:	8a 95       	dec	r24
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <USART_Receive_String+0x10>
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	31 09       	sbc	r19, r1

unsigned char USART_Receive(void){
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout) {
 1e0:	99 f0       	breq	.+38     	; 0x208 <USART_Receive_String+0x40>
        if((UCSR1A & (1<<RXC1))){
 1e2:	90 91 9b 00 	lds	r25, 0x009B
 1e6:	97 ff       	sbrs	r25, 7
 1e8:	f6 cf       	rjmp	.-20     	; 0x1d6 <USART_Receive_String+0xe>
            /* Get and return received data from buffer */ 
            return UDR1;
 1ea:	90 91 9c 00 	lds	r25, 0x009C

void USART_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 1ee:	9e 37       	cpi	r25, 0x7E	; 126
 1f0:	b1 f0       	breq	.+44     	; 0x21e <USART_Receive_String+0x56>
        if (c == 255){
 1f2:	9f 3f       	cpi	r25, 0xFF	; 255
 1f4:	49 f0       	breq	.+18     	; 0x208 <USART_Receive_String+0x40>
            str[1] = 50;
            str[2] = 50;
            str[3] = '\0';
            return;
        }
        str[i] = c;
 1f6:	91 93       	st	Z+, r25
        //char2lcd(c);
        //string2lcd(str);
        ++i;
 1f8:	4f 5f       	subi	r20, 0xFF	; 255
 1fa:	5f 4f       	sbci	r21, 0xFF	; 255
        if (i >= MAX_STRING_SIZE){
 1fc:	44 30       	cpi	r20, 0x04	; 4
 1fe:	51 05       	cpc	r21, r1
 200:	39 f7       	brne	.-50     	; 0x1d0 <USART_Receive_String+0x8>
            str[MAX_STRING_SIZE - 1] = '\0';
 202:	13 96       	adiw	r26, 0x03	; 3
 204:	1c 92       	st	X, r1

            return;
 206:	08 95       	ret
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255){
            str[0] = 50;
 208:	82 e3       	ldi	r24, 0x32	; 50
 20a:	8c 93       	st	X, r24
            str[1] = 50;
 20c:	11 96       	adiw	r26, 0x01	; 1
 20e:	8c 93       	st	X, r24
 210:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
 212:	12 96       	adiw	r26, 0x02	; 2
 214:	8c 93       	st	X, r24
 216:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = '\0';
 218:	13 96       	adiw	r26, 0x03	; 3
 21a:	1c 92       	st	X, r1
            return;
 21c:	08 95       	ret
            str[MAX_STRING_SIZE - 1] = '\0';

            return;
        }
    }
    str[i] = '\0';
 21e:	a4 0f       	add	r26, r20
 220:	b5 1f       	adc	r27, r21
 222:	1c 92       	st	X, r1
 224:	08 95       	ret

00000226 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
 226:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
 22a:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 22c:	88 e1       	ldi	r24, 0x18	; 24
 22e:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 1stop bit */ 
    UCSR0C = (3<<UCSZ00);
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	80 93 95 00 	sts	0x0095, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	81 ee       	ldi	r24, 0xE1	; 225
 23a:	94 e0       	ldi	r25, 0x04	; 4
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <USART0_Init+0x16>
 244:	00 c0       	rjmp	.+0      	; 0x246 <USART0_Init+0x20>
 246:	00 00       	nop
 248:	08 95       	ret

0000024a <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
 24a:	5d 9b       	sbis	0x0b, 5	; 11
 24c:	fe cf       	rjmp	.-4      	; 0x24a <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
 24e:	8c b9       	out	0x0c, r24	; 12
 250:	08 95       	ret

00000252 <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
 252:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
 254:	90 81       	ld	r25, Z
 256:	99 23       	and	r25, r25
 258:	39 f0       	breq	.+14     	; 0x268 <USART0_send_string+0x16>
 25a:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
 25c:	5d 9b       	sbis	0x0b, 5	; 11
 25e:	fe cf       	rjmp	.-4      	; 0x25c <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
 260:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
 262:	91 91       	ld	r25, Z+
 264:	91 11       	cpse	r25, r1
 266:	fa cf       	rjmp	.-12     	; 0x25c <USART0_send_string+0xa>
 268:	08 95       	ret

0000026a <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
 26a:	80 e5       	ldi	r24, 0x50	; 80
 26c:	93 ec       	ldi	r25, 0xC3	; 195
 26e:	06 c0       	rjmp	.+12     	; 0x27c <USART0_Receive+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	25 e3       	ldi	r18, 0x35	; 53
 272:	2a 95       	dec	r18
 274:	f1 f7       	brne	.-4      	; 0x272 <USART0_Receive+0x8>
 276:	00 00       	nop
 278:	01 97       	sbiw	r24, 0x01	; 1
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout > 0) {
 27a:	21 f0       	breq	.+8      	; 0x284 <USART0_Receive+0x1a>
        if((UCSR0A & (1<<RXC0))){
 27c:	5f 9b       	sbis	0x0b, 7	; 11
 27e:	f8 cf       	rjmp	.-16     	; 0x270 <USART0_Receive+0x6>
            /* Get and return received data from buffer */ 
            return UDR0;
 280:	8c b1       	in	r24, 0x0c	; 12
 282:	08 95       	ret
        //clear_display();
        //string2lcd((unsigned char *)utoa((unsigned int)timeout,buffer,10));
        _delay_us(10);
        --timeout;
    }
    return 255;
 284:	8f ef       	ldi	r24, 0xFF	; 255
}
 286:	08 95       	ret

00000288 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
 288:	dc 01       	movw	r26, r24
 28a:	fc 01       	movw	r30, r24
    int i = 0;
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	20 e5       	ldi	r18, 0x50	; 80
 292:	33 ec       	ldi	r19, 0xC3	; 195
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <USART0_Receive_String+0x1c>
 296:	85 e3       	ldi	r24, 0x35	; 53
 298:	8a 95       	dec	r24
 29a:	f1 f7       	brne	.-4      	; 0x298 <USART0_Receive_String+0x10>
 29c:	00 00       	nop
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	31 09       	sbc	r19, r1

unsigned char USART0_Receive(void){
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout > 0) {
 2a2:	81 f0       	breq	.+32     	; 0x2c4 <USART0_Receive_String+0x3c>
        if((UCSR0A & (1<<RXC0))){
 2a4:	5f 9b       	sbis	0x0b, 7	; 11
 2a6:	f7 cf       	rjmp	.-18     	; 0x296 <USART0_Receive_String+0xe>
            /* Get and return received data from buffer */ 
            return UDR0;
 2a8:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 2aa:	9e 37       	cpi	r25, 0x7E	; 126
 2ac:	b1 f0       	breq	.+44     	; 0x2da <USART0_Receive_String+0x52>
        if (c == 255){
 2ae:	9f 3f       	cpi	r25, 0xFF	; 255
 2b0:	49 f0       	breq	.+18     	; 0x2c4 <USART0_Receive_String+0x3c>
            str[1] = 50;
            str[2] = 50;
            str[3] = '\0';
            return;
        }
        str[i] = c;
 2b2:	91 93       	st	Z+, r25
        //char2lcd(c);
        //string2lcd(str);
        ++i;
 2b4:	4f 5f       	subi	r20, 0xFF	; 255
 2b6:	5f 4f       	sbci	r21, 0xFF	; 255
        if (i >= MAX_STRING_SIZE){
 2b8:	44 30       	cpi	r20, 0x04	; 4
 2ba:	51 05       	cpc	r21, r1
 2bc:	49 f7       	brne	.-46     	; 0x290 <USART0_Receive_String+0x8>
            str[MAX_STRING_SIZE - 1] = '\0';
 2be:	13 96       	adiw	r26, 0x03	; 3
 2c0:	1c 92       	st	X, r1

            return;
 2c2:	08 95       	ret
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255){
            str[0] = 50;
 2c4:	82 e3       	ldi	r24, 0x32	; 50
 2c6:	8c 93       	st	X, r24
            str[1] = 50;
 2c8:	11 96       	adiw	r26, 0x01	; 1
 2ca:	8c 93       	st	X, r24
 2cc:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
 2ce:	12 96       	adiw	r26, 0x02	; 2
 2d0:	8c 93       	st	X, r24
 2d2:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = '\0';
 2d4:	13 96       	adiw	r26, 0x03	; 3
 2d6:	1c 92       	st	X, r1
 2d8:	08 95       	ret
            str[MAX_STRING_SIZE - 1] = '\0';

            return;
        }
    }
    str[i] = '\0';
 2da:	a4 0f       	add	r26, r20
 2dc:	b5 1f       	adc	r27, r21
 2de:	1c 92       	st	X, r1
 2e0:	08 95       	ret

000002e2 <strobe_lcd>:

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 2e2:	e2 e6       	ldi	r30, 0x62	; 98
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	80 83       	st	Z, r24
    PORTF &= ~0x08;
 2ec:	80 81       	ld	r24, Z
 2ee:	87 7f       	andi	r24, 0xF7	; 247
 2f0:	80 83       	st	Z, r24
 2f2:	08 95       	ret

000002f4 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2f4:	77 9b       	sbis	0x0e, 7	; 14
 2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <clear_display>
    SPDR = 0x00;    //command, not data
 2f8:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 2fa:	77 9b       	sbis	0x0e, 7	; 14
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <clear_display+0x6>
    SPDR = 0x01;    //clear display command
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 302:	77 9b       	sbis	0x0e, 7	; 14
 304:	fe cf       	rjmp	.-4      	; 0x302 <clear_display+0xe>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 306:	80 91 62 00 	lds	r24, 0x0062
 30a:	88 60       	ori	r24, 0x08	; 8
 30c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 310:	80 91 62 00 	lds	r24, 0x0062
 314:	87 7f       	andi	r24, 0xF7	; 247
 316:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31a:	8f e9       	ldi	r24, 0x9F	; 159
 31c:	98 e2       	ldi	r25, 0x28	; 40
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <clear_display+0x2a>
 322:	00 c0       	rjmp	.+0      	; 0x324 <clear_display+0x30>
 324:	00 00       	nop
 326:	08 95       	ret

00000328 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 328:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 32a:	77 9b       	sbis	0x0e, 7	; 14
 32c:	fe cf       	rjmp	.-4      	; 0x32a <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
 32e:	80 ec       	ldi	r24, 0xC0	; 192
 330:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 332:	77 9b       	sbis	0x0e, 7	; 14
 334:	fe cf       	rjmp	.-4      	; 0x332 <home_line2+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 336:	80 91 62 00 	lds	r24, 0x0062
 33a:	88 60       	ori	r24, 0x08	; 8
 33c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 340:	80 91 62 00 	lds	r24, 0x0062
 344:	87 7f       	andi	r24, 0xF7	; 247
 346:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	85 ec       	ldi	r24, 0xC5	; 197
 34c:	8a 95       	dec	r24
 34e:	f1 f7       	brne	.-4      	; 0x34c <home_line2+0x24>
 350:	00 00       	nop
 352:	08 95       	ret

00000354 <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 358:	77 9b       	sbis	0x0e, 7	; 14
 35a:	fe cf       	rjmp	.-4      	; 0x358 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
 35c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 35e:	77 9b       	sbis	0x0e, 7	; 14
 360:	fe cf       	rjmp	.-4      	; 0x35e <char2lcd+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 362:	80 91 62 00 	lds	r24, 0x0062
 366:	88 60       	ori	r24, 0x08	; 8
 368:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 36c:	80 91 62 00 	lds	r24, 0x0062
 370:	87 7f       	andi	r24, 0xF7	; 247
 372:	80 93 62 00 	sts	0x0062, r24
 376:	85 ec       	ldi	r24, 0xC5	; 197
 378:	8a 95       	dec	r24
 37a:	f1 f7       	brne	.-4      	; 0x378 <char2lcd+0x24>
 37c:	00 00       	nop
 37e:	08 95       	ret

00000380 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	fc 01       	movw	r30, r24
 386:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
 38c:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 38e:	77 9b       	sbis	0x0e, 7	; 14
 390:	fe cf       	rjmp	.-4      	; 0x38e <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
 392:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 394:	77 9b       	sbis	0x0e, 7	; 14
 396:	fe cf       	rjmp	.-4      	; 0x394 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
 398:	8d 91       	ld	r24, X+
 39a:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 39c:	77 9b       	sbis	0x0e, 7	; 14
 39e:	fe cf       	rjmp	.-4      	; 0x39c <string2lcd+0x1c>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 3a0:	90 91 62 00 	lds	r25, 0x0062
 3a4:	98 60       	ori	r25, 0x08	; 8
 3a6:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
 3aa:	90 91 62 00 	lds	r25, 0x0062
 3ae:	97 7f       	andi	r25, 0xF7	; 247
 3b0:	90 93 62 00 	sts	0x0062, r25
 3b4:	85 ec       	ldi	r24, 0xC5	; 197
 3b6:	8a 95       	dec	r24
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <string2lcd+0x36>
 3ba:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
 3bc:	4f 5f       	subi	r20, 0xFF	; 255
 3be:	5f 4f       	sbci	r21, 0xFF	; 255
 3c0:	ef 01       	movw	r28, r30
 3c2:	09 90       	ld	r0, Y+
 3c4:	00 20       	and	r0, r0
 3c6:	e9 f7       	brne	.-6      	; 0x3c2 <string2lcd+0x42>
 3c8:	9e 01       	movw	r18, r28
 3ca:	2e 1b       	sub	r18, r30
 3cc:	3f 0b       	sbc	r19, r31
 3ce:	22 50       	subi	r18, 0x02	; 2
 3d0:	31 09       	sbc	r19, r1
 3d2:	24 17       	cp	r18, r20
 3d4:	35 07       	cpc	r19, r21
 3d6:	d8 f6       	brcc	.-74     	; 0x38e <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
 3de:	4f 92       	push	r4
 3e0:	5f 92       	push	r5
 3e2:	6f 92       	push	r6
 3e4:	7f 92       	push	r7
 3e6:	8f 92       	push	r8
 3e8:	9f 92       	push	r9
 3ea:	af 92       	push	r10
 3ec:	bf 92       	push	r11
 3ee:	cf 92       	push	r12
 3f0:	df 92       	push	r13
 3f2:	ef 92       	push	r14
 3f4:	ff 92       	push	r15
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	64 97       	sbiw	r28, 0x14	; 20
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	69 8b       	std	Y+17, r22	; 0x11
 410:	7a 8b       	std	Y+18, r23	; 0x12
 412:	8b 8b       	std	Y+19, r24	; 0x13
 414:	9c 8b       	std	Y+20, r25	; 0x14
 416:	29 01       	movw	r4, r18
 418:	3a 01       	movw	r6, r20
 41a:	47 01       	movw	r8, r14
 41c:	58 01       	movw	r10, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	40 ef       	ldi	r20, 0xF0	; 240
 424:	51 e4       	ldi	r21, 0x41	; 65
 426:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__cmpsf2>
 42a:	87 fd       	sbrc	r24, 7
 42c:	a2 c0       	rjmp	.+324    	; 0x572 <move+0x194>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	4c e8       	ldi	r20, 0x8C	; 140
 434:	52 e4       	ldi	r21, 0x42	; 66
 436:	69 89       	ldd	r22, Y+17	; 0x11
 438:	7a 89       	ldd	r23, Y+18	; 0x12
 43a:	8b 89       	ldd	r24, Y+19	; 0x13
 43c:	9c 89       	ldd	r25, Y+20	; 0x14
 43e:	0e 94 d6 05 	call	0xbac	; 0xbac <__gesf2>
 442:	18 16       	cp	r1, r24
 444:	0c f0       	brlt	.+2      	; 0x448 <move+0x6a>
 446:	9a c0       	rjmp	.+308    	; 0x57c <move+0x19e>
 448:	28 ef       	ldi	r18, 0xF8	; 248
 44a:	c2 2e       	mov	r12, r18
 44c:	2c e0       	ldi	r18, 0x0C	; 12
 44e:	d2 2e       	mov	r13, r18
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	40 ef       	ldi	r20, 0xF0	; 240
 456:	51 e4       	ldi	r21, 0x41	; 65
 458:	c3 01       	movw	r24, r6
 45a:	b2 01       	movw	r22, r4
 45c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__cmpsf2>
 460:	87 fd       	sbrc	r24, 7
 462:	84 c0       	rjmp	.+264    	; 0x56c <move+0x18e>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	4c e8       	ldi	r20, 0x8C	; 140
 46a:	52 e4       	ldi	r21, 0x42	; 66
 46c:	c3 01       	movw	r24, r6
 46e:	b2 01       	movw	r22, r4
 470:	0e 94 d6 05 	call	0xbac	; 0xbac <__gesf2>
 474:	18 16       	cp	r1, r24
 476:	0c f0       	brlt	.+2      	; 0x47a <move+0x9c>
 478:	a0 c0       	rjmp	.+320    	; 0x5ba <move+0x1dc>
 47a:	08 ef       	ldi	r16, 0xF8	; 248
 47c:	1c e0       	ldi	r17, 0x0C	; 12
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + SATURATE_DIFFERENCE)){
 47e:	20 e0       	ldi	r18, 0x00	; 0
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	40 ef       	ldi	r20, 0xF0	; 240
 484:	51 e4       	ldi	r21, 0x41	; 65
 486:	c5 01       	movw	r24, r10
 488:	b4 01       	movw	r22, r8
 48a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__cmpsf2>
 48e:	87 fd       	sbrc	r24, 7
 490:	65 c0       	rjmp	.+202    	; 0x55c <move+0x17e>
        z = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (z > (MAX_INPUT - SATURATE_DIFFERENCE)){
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	4c e8       	ldi	r20, 0x8C	; 140
 498:	52 e4       	ldi	r21, 0x42	; 66
 49a:	c5 01       	movw	r24, r10
 49c:	b4 01       	movw	r22, r8
 49e:	0e 94 d6 05 	call	0xbac	; 0xbac <__gesf2>
 4a2:	18 16       	cp	r1, r24
 4a4:	0c f0       	brlt	.+2      	; 0x4a8 <move+0xca>
 4a6:	7e c0       	rjmp	.+252    	; 0x5a4 <move+0x1c6>
 4a8:	83 e3       	ldi	r24, 0x33	; 51
 4aa:	88 2e       	mov	r8, r24
 4ac:	98 2c       	mov	r9, r8
 4ae:	a8 2c       	mov	r10, r8
 4b0:	8f e3       	ldi	r24, 0x3F	; 63
 4b2:	b8 2e       	mov	r11, r24

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
 4b4:	66 b5       	in	r22, 0x26	; 38
 4b6:	77 b5       	in	r23, 0x27	; 39
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 24 05 	call	0xa48	; 0xa48 <__floatunsisf>
 4c0:	a5 01       	movw	r20, r10
 4c2:	94 01       	movw	r18, r8
 4c4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 4c8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fixunssfsi>
    OCR1A = left_speed;
 4cc:	db bc       	out	0x2b, r13	; 43
 4ce:	ca bc       	out	0x2a, r12	; 42
    OCR1B = right_speed;
 4d0:	19 bd       	out	0x29, r17	; 41
 4d2:	08 bd       	out	0x28, r16	; 40
    OCR1C = z_speed;
 4d4:	70 93 79 00 	sts	0x0079, r23
 4d8:	60 93 78 00 	sts	0x0078, r22
    
	unsigned char buffer[16];
    clear_display();
 4dc:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <clear_display>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 4e0:	4a e0       	ldi	r20, 0x0A	; 10
 4e2:	be 01       	movw	r22, r28
 4e4:	6f 5f       	subi	r22, 0xFF	; 255
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	c6 01       	movw	r24, r12
 4ea:	0e 94 48 06 	call	0xc90	; 0xc90 <__utoa_ncheck>
	string2lcd((unsigned char *)utoa(left_speed,(char *)buffer,10));
 4ee:	0e 94 c0 01 	call	0x380	; 0x380 <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 4f2:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 4f4:	77 9b       	sbis	0x0e, 7	; 14
 4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <move+0x116>
    SPDR = 0xC0;   // cursor go home on line 2
 4f8:	80 ec       	ldi	r24, 0xC0	; 192
 4fa:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 4fc:	77 9b       	sbis	0x0e, 7	; 14
 4fe:	fe cf       	rjmp	.-4      	; 0x4fc <move+0x11e>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 500:	80 91 62 00 	lds	r24, 0x0062
 504:	88 60       	ori	r24, 0x08	; 8
 506:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 50a:	80 91 62 00 	lds	r24, 0x0062
 50e:	87 7f       	andi	r24, 0xF7	; 247
 510:	80 93 62 00 	sts	0x0062, r24
 514:	85 ec       	ldi	r24, 0xC5	; 197
 516:	8a 95       	dec	r24
 518:	f1 f7       	brne	.-4      	; 0x516 <move+0x138>
 51a:	00 00       	nop
 51c:	4a e0       	ldi	r20, 0x0A	; 10
 51e:	be 01       	movw	r22, r28
 520:	6f 5f       	subi	r22, 0xFF	; 255
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	c8 01       	movw	r24, r16
 526:	0e 94 48 06 	call	0xc90	; 0xc90 <__utoa_ncheck>
    
	unsigned char buffer[16];
    clear_display();
	string2lcd((unsigned char *)utoa(left_speed,(char *)buffer,10));
	home_line2();
	string2lcd((unsigned char *)utoa(right_speed,(char *)buffer,10));
 52a:	0e 94 c0 01 	call	0x380	; 0x380 <string2lcd>
    

}
 52e:	64 96       	adiw	r28, 0x14	; 20
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	f8 94       	cli
 534:	de bf       	out	0x3e, r29	; 62
 536:	0f be       	out	0x3f, r0	; 63
 538:	cd bf       	out	0x3d, r28	; 61
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	ff 90       	pop	r15
 544:	ef 90       	pop	r14
 546:	df 90       	pop	r13
 548:	cf 90       	pop	r12
 54a:	bf 90       	pop	r11
 54c:	af 90       	pop	r10
 54e:	9f 90       	pop	r9
 550:	8f 90       	pop	r8
 552:	7f 90       	pop	r7
 554:	6f 90       	pop	r6
 556:	5f 90       	pop	r5
 558:	4f 90       	pop	r4
 55a:	08 95       	ret
 55c:	9a e9       	ldi	r25, 0x9A	; 154
 55e:	89 2e       	mov	r8, r25
 560:	99 e9       	ldi	r25, 0x99	; 153
 562:	99 2e       	mov	r9, r25
 564:	a9 2c       	mov	r10, r9
 566:	9e e3       	ldi	r25, 0x3E	; 62
 568:	b9 2e       	mov	r11, r25
 56a:	a4 cf       	rjmp	.-184    	; 0x4b4 <move+0xd6>
 56c:	08 e7       	ldi	r16, 0x78	; 120
 56e:	1a e0       	ldi	r17, 0x0A	; 10
 570:	86 cf       	rjmp	.-244    	; 0x47e <move+0xa0>
 572:	38 e7       	ldi	r19, 0x78	; 120
 574:	c3 2e       	mov	r12, r19
 576:	3a e0       	ldi	r19, 0x0A	; 10
 578:	d3 2e       	mov	r13, r19
 57a:	6a cf       	rjmp	.-300    	; 0x450 <move+0x72>
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	40 e8       	ldi	r20, 0x80	; 128
 582:	51 e4       	ldi	r21, 0x41	; 65
 584:	69 89       	ldd	r22, Y+17	; 0x11
 586:	7a 89       	ldd	r23, Y+18	; 0x12
 588:	8b 89       	ldd	r24, Y+19	; 0x13
 58a:	9c 89       	ldd	r25, Y+20	; 0x14
 58c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 590:	20 e0       	ldi	r18, 0x00	; 0
 592:	30 e8       	ldi	r19, 0x80	; 128
 594:	49 e0       	ldi	r20, 0x09	; 9
 596:	55 e4       	ldi	r21, 0x45	; 69
 598:	0e 94 12 04 	call	0x824	; 0x824 <__addsf3>
 59c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fixunssfsi>
 5a0:	6b 01       	movw	r12, r22
 5a2:	56 cf       	rjmp	.-340    	; 0x450 <move+0x72>
 5a4:	20 e0       	ldi	r18, 0x00	; 0
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	48 ec       	ldi	r20, 0xC8	; 200
 5aa:	52 e4       	ldi	r21, 0x42	; 66
 5ac:	c5 01       	movw	r24, r10
 5ae:	b4 01       	movw	r22, r8
 5b0:	0e 94 83 04 	call	0x906	; 0x906 <__divsf3>
 5b4:	4b 01       	movw	r8, r22
 5b6:	5c 01       	movw	r10, r24
 5b8:	7d cf       	rjmp	.-262    	; 0x4b4 <move+0xd6>
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	40 e8       	ldi	r20, 0x80	; 128
 5c0:	51 e4       	ldi	r21, 0x41	; 65
 5c2:	c3 01       	movw	r24, r6
 5c4:	b2 01       	movw	r22, r4
 5c6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	30 e8       	ldi	r19, 0x80	; 128
 5ce:	49 e0       	ldi	r20, 0x09	; 9
 5d0:	55 e4       	ldi	r21, 0x45	; 69
 5d2:	0e 94 12 04 	call	0x824	; 0x824 <__addsf3>
 5d6:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fixunssfsi>
 5da:	8b 01       	movw	r16, r22
 5dc:	50 cf       	rjmp	.-352    	; 0x47e <move+0xa0>

000005de <spi_init>:
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 5de:	e1 e6       	ldi	r30, 0x61	; 97
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	88 60       	ori	r24, 0x08	; 8
 5e6:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
 5e8:	88 b3       	in	r24, 0x18	; 24
 5ea:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 5ec:	87 b3       	in	r24, 0x17	; 23
 5ee:	87 60       	ori	r24, 0x07	; 7
 5f0:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 5f2:	80 e5       	ldi	r24, 0x50	; 80
 5f4:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	8e b9       	out	0x0e, r24	; 14
 5fa:	08 95       	ret

000005fc <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5fc:	8f e5       	ldi	r24, 0x5F	; 95
 5fe:	9a ee       	ldi	r25, 0xEA	; 234
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	f1 f7       	brne	.-4      	; 0x600 <lcd_init+0x4>
 604:	00 c0       	rjmp	.+0      	; 0x606 <lcd_init+0xa>
 606:	00 00       	nop
 608:	23 e0       	ldi	r18, 0x03	; 3
 60a:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
 60c:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
 60e:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 610:	77 9b       	sbis	0x0e, 7	; 14
 612:	fe cf       	rjmp	.-4      	; 0x610 <lcd_init+0x14>
        SPDR = 0x30;
 614:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 616:	77 9b       	sbis	0x0e, 7	; 14
 618:	fe cf       	rjmp	.-4      	; 0x616 <lcd_init+0x1a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 61a:	80 91 62 00 	lds	r24, 0x0062
 61e:	88 60       	ori	r24, 0x08	; 8
 620:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 624:	80 91 62 00 	lds	r24, 0x0062
 628:	87 7f       	andi	r24, 0xF7	; 247
 62a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 62e:	85 ec       	ldi	r24, 0xC5	; 197
 630:	8a 95       	dec	r24
 632:	f1 f7       	brne	.-4      	; 0x630 <lcd_init+0x34>
 634:	00 00       	nop
 636:	21 50       	subi	r18, 0x01	; 1
 638:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
 63a:	49 f7       	brne	.-46     	; 0x60e <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
 63c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 63e:	77 9b       	sbis	0x0e, 7	; 14
 640:	fe cf       	rjmp	.-4      	; 0x63e <lcd_init+0x42>
    SPDR = 0x38;
 642:	88 e3       	ldi	r24, 0x38	; 56
 644:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 646:	77 9b       	sbis	0x0e, 7	; 14
 648:	fe cf       	rjmp	.-4      	; 0x646 <lcd_init+0x4a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 64a:	80 91 62 00 	lds	r24, 0x0062
 64e:	88 60       	ori	r24, 0x08	; 8
 650:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 654:	80 91 62 00 	lds	r24, 0x0062
 658:	87 7f       	andi	r24, 0xF7	; 247
 65a:	80 93 62 00 	sts	0x0062, r24
 65e:	95 ec       	ldi	r25, 0xC5	; 197
 660:	9a 95       	dec	r25
 662:	f1 f7       	brne	.-4      	; 0x660 <lcd_init+0x64>
 664:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 666:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 668:	77 9b       	sbis	0x0e, 7	; 14
 66a:	fe cf       	rjmp	.-4      	; 0x668 <lcd_init+0x6c>
    SPDR = 0x08;
 66c:	88 e0       	ldi	r24, 0x08	; 8
 66e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 670:	77 9b       	sbis	0x0e, 7	; 14
 672:	fe cf       	rjmp	.-4      	; 0x670 <lcd_init+0x74>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 674:	80 91 62 00 	lds	r24, 0x0062
 678:	88 60       	ori	r24, 0x08	; 8
 67a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 67e:	80 91 62 00 	lds	r24, 0x0062
 682:	87 7f       	andi	r24, 0xF7	; 247
 684:	80 93 62 00 	sts	0x0062, r24
 688:	85 ec       	ldi	r24, 0xC5	; 197
 68a:	8a 95       	dec	r24
 68c:	f1 f7       	brne	.-4      	; 0x68a <lcd_init+0x8e>
 68e:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 690:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 692:	77 9b       	sbis	0x0e, 7	; 14
 694:	fe cf       	rjmp	.-4      	; 0x692 <lcd_init+0x96>
    SPDR = 0x01;
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 69a:	77 9b       	sbis	0x0e, 7	; 14
 69c:	fe cf       	rjmp	.-4      	; 0x69a <lcd_init+0x9e>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 69e:	80 91 62 00 	lds	r24, 0x0062
 6a2:	88 60       	ori	r24, 0x08	; 8
 6a4:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 6a8:	80 91 62 00 	lds	r24, 0x0062
 6ac:	87 7f       	andi	r24, 0xF7	; 247
 6ae:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	98 e1       	ldi	r25, 0x18	; 24
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <lcd_init+0xba>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <lcd_init+0xc0>
 6bc:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
 6be:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 6c0:	77 9b       	sbis	0x0e, 7	; 14
 6c2:	fe cf       	rjmp	.-4      	; 0x6c0 <lcd_init+0xc4>
    SPDR = 0x06;
 6c4:	86 e0       	ldi	r24, 0x06	; 6
 6c6:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 6c8:	77 9b       	sbis	0x0e, 7	; 14
 6ca:	fe cf       	rjmp	.-4      	; 0x6c8 <lcd_init+0xcc>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 6cc:	80 91 62 00 	lds	r24, 0x0062
 6d0:	88 60       	ori	r24, 0x08	; 8
 6d2:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 6d6:	80 91 62 00 	lds	r24, 0x0062
 6da:	87 7f       	andi	r24, 0xF7	; 247
 6dc:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6e0:	95 ec       	ldi	r25, 0xC5	; 197
 6e2:	9a 95       	dec	r25
 6e4:	f1 f7       	brne	.-4      	; 0x6e2 <lcd_init+0xe6>
 6e6:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 6e8:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 6ea:	77 9b       	sbis	0x0e, 7	; 14
 6ec:	fe cf       	rjmp	.-4      	; 0x6ea <lcd_init+0xee>
    SPDR = 0x0E;
 6ee:	8e e0       	ldi	r24, 0x0E	; 14
 6f0:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 6f2:	77 9b       	sbis	0x0e, 7	; 14
 6f4:	fe cf       	rjmp	.-4      	; 0x6f2 <lcd_init+0xf6>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 6f6:	80 91 62 00 	lds	r24, 0x0062
 6fa:	88 60       	ori	r24, 0x08	; 8
 6fc:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 700:	80 91 62 00 	lds	r24, 0x0062
 704:	87 7f       	andi	r24, 0xF7	; 247
 706:	80 93 62 00 	sts	0x0062, r24
 70a:	85 ec       	ldi	r24, 0xC5	; 197
 70c:	8a 95       	dec	r24
 70e:	f1 f7       	brne	.-4      	; 0x70c <lcd_init+0x110>
 710:	00 00       	nop
 712:	08 95       	ret

00000714 <main>:
void init_esc();

uint8_t temp, read_byte;


int main(void){
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	00 d0       	rcall	.+0      	; 0x71a <main+0x6>
 71a:	00 d0       	rcall	.+0      	; 0x71c <main+0x8>
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0xFF;
 720:	8f ef       	ldi	r24, 0xFF	; 255
 722:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
 724:	18 ba       	out	0x18, r1	; 24
    DDRD = 0x00 | (1 << 2);
 726:	84 e0       	ldi	r24, 0x04	; 4
 728:	81 bb       	out	0x11, r24	; 17
    [3] == reserved for string terminator
    */
    unsigned char buffer[MAX_STRING_SIZE]; 
    int i;
    for (i = 0; i < 4; ++i){
        buffer[i] = ' ';
 72a:	80 e2       	ldi	r24, 0x20	; 32
 72c:	89 83       	std	Y+1, r24	; 0x01
 72e:	8a 83       	std	Y+2, r24	; 0x02
 730:	8b 83       	std	Y+3, r24	; 0x03
 732:	8c 83       	std	Y+4, r24	; 0x04
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 734:	80 91 61 00 	lds	r24, 0x0061
 738:	88 60       	ori	r24, 0x08	; 8
 73a:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initalization for SPI
 73e:	88 b3       	in	r24, 0x18	; 24
 740:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 742:	87 b3       	in	r24, 0x17	; 23
 744:	87 60       	ori	r24, 0x07	; 7
 746:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 748:	80 e5       	ldi	r24, 0x50	; 80
 74a:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	8e b9       	out	0x0e, r24	; 14
    for (i = 0; i < 4; ++i){
        buffer[i] = ' ';
    }

    spi_init();
    lcd_init();
 750:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_init>

    //Wait for S1 to be pressed before doing anything, remove this eventually
    string2lcd((unsigned char *)"Press S1");
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	0e 94 c0 01 	call	0x380	; 0x380 <string2lcd>
	while (((PIND) & (1 << 0)));
 75c:	80 99       	sbic	0x10, 0	; 16
 75e:	fe cf       	rjmp	.-4      	; 0x75c <main+0x48>
	clear_display();
 760:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <clear_display>

    return 0;
}

void init_esc(){
    PORTB |= (1 << 4);
 764:	c4 9a       	sbi	0x18, 4	; 24
 766:	8f e6       	ldi	r24, 0x6F	; 111
 768:	97 e1       	ldi	r25, 0x17	; 23
 76a:	01 97       	sbiw	r24, 0x01	; 1
 76c:	f1 f7       	brne	.-4      	; 0x76a <main+0x56>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <main+0x5c>
 770:	00 00       	nop
    _delay_us(STOP);
    PORTB &= ~(1 << 4);
 772:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 774:	9f ef       	ldi	r25, 0xFF	; 255
 776:	23 ed       	ldi	r18, 0xD3	; 211
 778:	30 e3       	ldi	r19, 0x30	; 48
 77a:	91 50       	subi	r25, 0x01	; 1
 77c:	20 40       	sbci	r18, 0x00	; 0
 77e:	30 40       	sbci	r19, 0x00	; 0
 780:	e1 f7       	brne	.-8      	; 0x77a <main+0x66>
 782:	00 c0       	rjmp	.+0      	; 0x784 <main+0x70>
 784:	00 00       	nop
    string2lcd((unsigned char *)"Press S1");
	while (((PIND) & (1 << 0)));
	clear_display();

	init_esc();
    set_16bitPWM1();
 786:	0e 94 79 00 	call	0xf2	; 0xf2 <set_16bitPWM1>
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
 78a:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = (unsigned char)ubrr;
 78e:	27 e6       	ldi	r18, 0x67	; 103
 790:	20 93 99 00 	sts	0x0099, r18
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 794:	98 e1       	ldi	r25, 0x18	; 24
 796:	90 93 9a 00 	sts	0x009A, r25
    /* Set frame format: 8data, 1stop bit */ 
    UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
 79a:	86 e0       	ldi	r24, 0x06	; 6
 79c:	80 93 9d 00 	sts	0x009D, r24
 7a0:	4f ef       	ldi	r20, 0xFF	; 255
 7a2:	51 ee       	ldi	r21, 0xE1	; 225
 7a4:	34 e0       	ldi	r19, 0x04	; 4
 7a6:	41 50       	subi	r20, 0x01	; 1
 7a8:	50 40       	sbci	r21, 0x00	; 0
 7aa:	30 40       	sbci	r19, 0x00	; 0
 7ac:	e1 f7       	brne	.-8      	; 0x7a6 <main+0x92>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <main+0x9c>
 7b0:	00 00       	nop
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
 7b2:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = (unsigned char)ubrr;
 7b6:	29 b9       	out	0x09, r18	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 7b8:	9a b9       	out	0x0a, r25	; 10
    /* Set frame format: 8data, 1stop bit */ 
    UCSR0C = (3<<UCSZ00);
 7ba:	80 93 95 00 	sts	0x0095, r24
 7be:	4f ef       	ldi	r20, 0xFF	; 255
 7c0:	51 ee       	ldi	r21, 0xE1	; 225
 7c2:	84 e0       	ldi	r24, 0x04	; 4
 7c4:	41 50       	subi	r20, 0x01	; 1
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	80 40       	sbci	r24, 0x00	; 0
 7ca:	e1 f7       	brne	.-8      	; 0x7c4 <main+0xb0>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <main+0xba>
 7ce:	00 00       	nop
 7d0:	9f ef       	ldi	r25, 0xFF	; 255
 7d2:	21 ee       	ldi	r18, 0xE1	; 225
 7d4:	34 e0       	ldi	r19, 0x04	; 4
 7d6:	91 50       	subi	r25, 0x01	; 1
 7d8:	20 40       	sbci	r18, 0x00	; 0
 7da:	30 40       	sbci	r19, 0x00	; 0
 7dc:	e1 f7       	brne	.-8      	; 0x7d6 <main+0xc2>
 7de:	00 c0       	rjmp	.+0      	; 0x7e0 <main+0xcc>
 7e0:	00 00       	nop
    USART0_Init(MYUBRR);
    _delay_ms(100);
    unsigned char c;
    while(1){

        USART0_Receive_String(buffer);
 7e2:	ce 01       	movw	r24, r28
 7e4:	01 96       	adiw	r24, 0x01	; 1
 7e6:	0e 94 44 01 	call	0x288	; 0x288 <USART0_Receive_String>
        if (buffer[0] == 0 && buffer[1] == 0 && buffer[2] == 0 && buffer[3] == 0){
 7ea:	89 81       	ldd	r24, Y+1	; 0x01
 7ec:	81 11       	cpse	r24, r1
 7ee:	09 c0       	rjmp	.+18     	; 0x802 <main+0xee>
 7f0:	8a 81       	ldd	r24, Y+2	; 0x02
 7f2:	81 11       	cpse	r24, r1
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <main+0xee>
 7f6:	8b 81       	ldd	r24, Y+3	; 0x03
 7f8:	81 11       	cpse	r24, r1
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <main+0xee>
 7fc:	8c 81       	ldd	r24, Y+4	; 0x04
 7fe:	88 23       	and	r24, r24
 800:	81 f3       	breq	.-32     	; 0x7e2 <main+0xce>
            continue;
        }
        clear_display();
 802:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <clear_display>
        string2lcd(buffer);
 806:	ce 01       	movw	r24, r28
 808:	01 96       	adiw	r24, 0x01	; 1
 80a:	0e 94 c0 01 	call	0x380	; 0x380 <string2lcd>
 80e:	4f ef       	ldi	r20, 0xFF	; 255
 810:	59 ef       	ldi	r21, 0xF9	; 249
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	41 50       	subi	r20, 0x01	; 1
 816:	50 40       	sbci	r21, 0x00	; 0
 818:	80 40       	sbci	r24, 0x00	; 0
 81a:	e1 f7       	brne	.-8      	; 0x814 <main+0x100>
 81c:	00 c0       	rjmp	.+0      	; 0x81e <main+0x10a>
 81e:	00 00       	nop
 820:	e0 cf       	rjmp	.-64     	; 0x7e2 <main+0xce>

00000822 <__subsf3>:
 822:	50 58       	subi	r21, 0x80	; 128

00000824 <__addsf3>:
 824:	bb 27       	eor	r27, r27
 826:	aa 27       	eor	r26, r26
 828:	0e 94 29 04 	call	0x852	; 0x852 <__addsf3x>
 82c:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_round>
 830:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__fp_pscA>
 834:	38 f0       	brcs	.+14     	; 0x844 <__addsf3+0x20>
 836:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fp_pscB>
 83a:	20 f0       	brcs	.+8      	; 0x844 <__addsf3+0x20>
 83c:	39 f4       	brne	.+14     	; 0x84c <__addsf3+0x28>
 83e:	9f 3f       	cpi	r25, 0xFF	; 255
 840:	19 f4       	brne	.+6      	; 0x848 <__addsf3+0x24>
 842:	26 f4       	brtc	.+8      	; 0x84c <__addsf3+0x28>
 844:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_nan>
 848:	0e f4       	brtc	.+2      	; 0x84c <__addsf3+0x28>
 84a:	e0 95       	com	r30
 84c:	e7 fb       	bst	r30, 7
 84e:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>

00000852 <__addsf3x>:
 852:	e9 2f       	mov	r30, r25
 854:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_split3>
 858:	58 f3       	brcs	.-42     	; 0x830 <__addsf3+0xc>
 85a:	ba 17       	cp	r27, r26
 85c:	62 07       	cpc	r22, r18
 85e:	73 07       	cpc	r23, r19
 860:	84 07       	cpc	r24, r20
 862:	95 07       	cpc	r25, r21
 864:	20 f0       	brcs	.+8      	; 0x86e <__addsf3x+0x1c>
 866:	79 f4       	brne	.+30     	; 0x886 <__addsf3x+0x34>
 868:	a6 f5       	brtc	.+104    	; 0x8d2 <__addsf3x+0x80>
 86a:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_zero>
 86e:	0e f4       	brtc	.+2      	; 0x872 <__addsf3x+0x20>
 870:	e0 95       	com	r30
 872:	0b 2e       	mov	r0, r27
 874:	ba 2f       	mov	r27, r26
 876:	a0 2d       	mov	r26, r0
 878:	0b 01       	movw	r0, r22
 87a:	b9 01       	movw	r22, r18
 87c:	90 01       	movw	r18, r0
 87e:	0c 01       	movw	r0, r24
 880:	ca 01       	movw	r24, r20
 882:	a0 01       	movw	r20, r0
 884:	11 24       	eor	r1, r1
 886:	ff 27       	eor	r31, r31
 888:	59 1b       	sub	r21, r25
 88a:	99 f0       	breq	.+38     	; 0x8b2 <__addsf3x+0x60>
 88c:	59 3f       	cpi	r21, 0xF9	; 249
 88e:	50 f4       	brcc	.+20     	; 0x8a4 <__addsf3x+0x52>
 890:	50 3e       	cpi	r21, 0xE0	; 224
 892:	68 f1       	brcs	.+90     	; 0x8ee <__addsf3x+0x9c>
 894:	1a 16       	cp	r1, r26
 896:	f0 40       	sbci	r31, 0x00	; 0
 898:	a2 2f       	mov	r26, r18
 89a:	23 2f       	mov	r18, r19
 89c:	34 2f       	mov	r19, r20
 89e:	44 27       	eor	r20, r20
 8a0:	58 5f       	subi	r21, 0xF8	; 248
 8a2:	f3 cf       	rjmp	.-26     	; 0x88a <__addsf3x+0x38>
 8a4:	46 95       	lsr	r20
 8a6:	37 95       	ror	r19
 8a8:	27 95       	ror	r18
 8aa:	a7 95       	ror	r26
 8ac:	f0 40       	sbci	r31, 0x00	; 0
 8ae:	53 95       	inc	r21
 8b0:	c9 f7       	brne	.-14     	; 0x8a4 <__addsf3x+0x52>
 8b2:	7e f4       	brtc	.+30     	; 0x8d2 <__addsf3x+0x80>
 8b4:	1f 16       	cp	r1, r31
 8b6:	ba 0b       	sbc	r27, r26
 8b8:	62 0b       	sbc	r22, r18
 8ba:	73 0b       	sbc	r23, r19
 8bc:	84 0b       	sbc	r24, r20
 8be:	ba f0       	brmi	.+46     	; 0x8ee <__addsf3x+0x9c>
 8c0:	91 50       	subi	r25, 0x01	; 1
 8c2:	a1 f0       	breq	.+40     	; 0x8ec <__addsf3x+0x9a>
 8c4:	ff 0f       	add	r31, r31
 8c6:	bb 1f       	adc	r27, r27
 8c8:	66 1f       	adc	r22, r22
 8ca:	77 1f       	adc	r23, r23
 8cc:	88 1f       	adc	r24, r24
 8ce:	c2 f7       	brpl	.-16     	; 0x8c0 <__addsf3x+0x6e>
 8d0:	0e c0       	rjmp	.+28     	; 0x8ee <__addsf3x+0x9c>
 8d2:	ba 0f       	add	r27, r26
 8d4:	62 1f       	adc	r22, r18
 8d6:	73 1f       	adc	r23, r19
 8d8:	84 1f       	adc	r24, r20
 8da:	48 f4       	brcc	.+18     	; 0x8ee <__addsf3x+0x9c>
 8dc:	87 95       	ror	r24
 8de:	77 95       	ror	r23
 8e0:	67 95       	ror	r22
 8e2:	b7 95       	ror	r27
 8e4:	f7 95       	ror	r31
 8e6:	9e 3f       	cpi	r25, 0xFE	; 254
 8e8:	08 f0       	brcs	.+2      	; 0x8ec <__addsf3x+0x9a>
 8ea:	b0 cf       	rjmp	.-160    	; 0x84c <__addsf3+0x28>
 8ec:	93 95       	inc	r25
 8ee:	88 0f       	add	r24, r24
 8f0:	08 f0       	brcs	.+2      	; 0x8f4 <__addsf3x+0xa2>
 8f2:	99 27       	eor	r25, r25
 8f4:	ee 0f       	add	r30, r30
 8f6:	97 95       	ror	r25
 8f8:	87 95       	ror	r24
 8fa:	08 95       	ret

000008fc <__cmpsf2>:
 8fc:	0e 94 61 05 	call	0xac2	; 0xac2 <__fp_cmp>
 900:	08 f4       	brcc	.+2      	; 0x904 <__cmpsf2+0x8>
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	08 95       	ret

00000906 <__divsf3>:
 906:	0e 94 97 04 	call	0x92e	; 0x92e <__divsf3x>
 90a:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_round>
 90e:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fp_pscB>
 912:	58 f0       	brcs	.+22     	; 0x92a <__divsf3+0x24>
 914:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__fp_pscA>
 918:	40 f0       	brcs	.+16     	; 0x92a <__divsf3+0x24>
 91a:	29 f4       	brne	.+10     	; 0x926 <__divsf3+0x20>
 91c:	5f 3f       	cpi	r21, 0xFF	; 255
 91e:	29 f0       	breq	.+10     	; 0x92a <__divsf3+0x24>
 920:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
 924:	51 11       	cpse	r21, r1
 926:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_szero>
 92a:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_nan>

0000092e <__divsf3x>:
 92e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_split3>
 932:	68 f3       	brcs	.-38     	; 0x90e <__divsf3+0x8>

00000934 <__divsf3_pse>:
 934:	99 23       	and	r25, r25
 936:	b1 f3       	breq	.-20     	; 0x924 <__divsf3+0x1e>
 938:	55 23       	and	r21, r21
 93a:	91 f3       	breq	.-28     	; 0x920 <__divsf3+0x1a>
 93c:	95 1b       	sub	r25, r21
 93e:	55 0b       	sbc	r21, r21
 940:	bb 27       	eor	r27, r27
 942:	aa 27       	eor	r26, r26
 944:	62 17       	cp	r22, r18
 946:	73 07       	cpc	r23, r19
 948:	84 07       	cpc	r24, r20
 94a:	38 f0       	brcs	.+14     	; 0x95a <__divsf3_pse+0x26>
 94c:	9f 5f       	subi	r25, 0xFF	; 255
 94e:	5f 4f       	sbci	r21, 0xFF	; 255
 950:	22 0f       	add	r18, r18
 952:	33 1f       	adc	r19, r19
 954:	44 1f       	adc	r20, r20
 956:	aa 1f       	adc	r26, r26
 958:	a9 f3       	breq	.-22     	; 0x944 <__divsf3_pse+0x10>
 95a:	35 d0       	rcall	.+106    	; 0x9c6 <__divsf3_pse+0x92>
 95c:	0e 2e       	mov	r0, r30
 95e:	3a f0       	brmi	.+14     	; 0x96e <__divsf3_pse+0x3a>
 960:	e0 e8       	ldi	r30, 0x80	; 128
 962:	32 d0       	rcall	.+100    	; 0x9c8 <__divsf3_pse+0x94>
 964:	91 50       	subi	r25, 0x01	; 1
 966:	50 40       	sbci	r21, 0x00	; 0
 968:	e6 95       	lsr	r30
 96a:	00 1c       	adc	r0, r0
 96c:	ca f7       	brpl	.-14     	; 0x960 <__divsf3_pse+0x2c>
 96e:	2b d0       	rcall	.+86     	; 0x9c6 <__divsf3_pse+0x92>
 970:	fe 2f       	mov	r31, r30
 972:	29 d0       	rcall	.+82     	; 0x9c6 <__divsf3_pse+0x92>
 974:	66 0f       	add	r22, r22
 976:	77 1f       	adc	r23, r23
 978:	88 1f       	adc	r24, r24
 97a:	bb 1f       	adc	r27, r27
 97c:	26 17       	cp	r18, r22
 97e:	37 07       	cpc	r19, r23
 980:	48 07       	cpc	r20, r24
 982:	ab 07       	cpc	r26, r27
 984:	b0 e8       	ldi	r27, 0x80	; 128
 986:	09 f0       	breq	.+2      	; 0x98a <__divsf3_pse+0x56>
 988:	bb 0b       	sbc	r27, r27
 98a:	80 2d       	mov	r24, r0
 98c:	bf 01       	movw	r22, r30
 98e:	ff 27       	eor	r31, r31
 990:	93 58       	subi	r25, 0x83	; 131
 992:	5f 4f       	sbci	r21, 0xFF	; 255
 994:	3a f0       	brmi	.+14     	; 0x9a4 <__divsf3_pse+0x70>
 996:	9e 3f       	cpi	r25, 0xFE	; 254
 998:	51 05       	cpc	r21, r1
 99a:	78 f0       	brcs	.+30     	; 0x9ba <__divsf3_pse+0x86>
 99c:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
 9a0:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_szero>
 9a4:	5f 3f       	cpi	r21, 0xFF	; 255
 9a6:	e4 f3       	brlt	.-8      	; 0x9a0 <__divsf3_pse+0x6c>
 9a8:	98 3e       	cpi	r25, 0xE8	; 232
 9aa:	d4 f3       	brlt	.-12     	; 0x9a0 <__divsf3_pse+0x6c>
 9ac:	86 95       	lsr	r24
 9ae:	77 95       	ror	r23
 9b0:	67 95       	ror	r22
 9b2:	b7 95       	ror	r27
 9b4:	f7 95       	ror	r31
 9b6:	9f 5f       	subi	r25, 0xFF	; 255
 9b8:	c9 f7       	brne	.-14     	; 0x9ac <__divsf3_pse+0x78>
 9ba:	88 0f       	add	r24, r24
 9bc:	91 1d       	adc	r25, r1
 9be:	96 95       	lsr	r25
 9c0:	87 95       	ror	r24
 9c2:	97 f9       	bld	r25, 7
 9c4:	08 95       	ret
 9c6:	e1 e0       	ldi	r30, 0x01	; 1
 9c8:	66 0f       	add	r22, r22
 9ca:	77 1f       	adc	r23, r23
 9cc:	88 1f       	adc	r24, r24
 9ce:	bb 1f       	adc	r27, r27
 9d0:	62 17       	cp	r22, r18
 9d2:	73 07       	cpc	r23, r19
 9d4:	84 07       	cpc	r24, r20
 9d6:	ba 07       	cpc	r27, r26
 9d8:	20 f0       	brcs	.+8      	; 0x9e2 <__divsf3_pse+0xae>
 9da:	62 1b       	sub	r22, r18
 9dc:	73 0b       	sbc	r23, r19
 9de:	84 0b       	sbc	r24, r20
 9e0:	ba 0b       	sbc	r27, r26
 9e2:	ee 1f       	adc	r30, r30
 9e4:	88 f7       	brcc	.-30     	; 0x9c8 <__divsf3_pse+0x94>
 9e6:	e0 95       	com	r30
 9e8:	08 95       	ret

000009ea <__fixunssfsi>:
 9ea:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_splitA>
 9ee:	88 f0       	brcs	.+34     	; 0xa12 <__fixunssfsi+0x28>
 9f0:	9f 57       	subi	r25, 0x7F	; 127
 9f2:	98 f0       	brcs	.+38     	; 0xa1a <__fixunssfsi+0x30>
 9f4:	b9 2f       	mov	r27, r25
 9f6:	99 27       	eor	r25, r25
 9f8:	b7 51       	subi	r27, 0x17	; 23
 9fa:	b0 f0       	brcs	.+44     	; 0xa28 <__fixunssfsi+0x3e>
 9fc:	e1 f0       	breq	.+56     	; 0xa36 <__fixunssfsi+0x4c>
 9fe:	66 0f       	add	r22, r22
 a00:	77 1f       	adc	r23, r23
 a02:	88 1f       	adc	r24, r24
 a04:	99 1f       	adc	r25, r25
 a06:	1a f0       	brmi	.+6      	; 0xa0e <__fixunssfsi+0x24>
 a08:	ba 95       	dec	r27
 a0a:	c9 f7       	brne	.-14     	; 0x9fe <__fixunssfsi+0x14>
 a0c:	14 c0       	rjmp	.+40     	; 0xa36 <__fixunssfsi+0x4c>
 a0e:	b1 30       	cpi	r27, 0x01	; 1
 a10:	91 f0       	breq	.+36     	; 0xa36 <__fixunssfsi+0x4c>
 a12:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fp_zero>
 a16:	b1 e0       	ldi	r27, 0x01	; 1
 a18:	08 95       	ret
 a1a:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_zero>
 a1e:	67 2f       	mov	r22, r23
 a20:	78 2f       	mov	r23, r24
 a22:	88 27       	eor	r24, r24
 a24:	b8 5f       	subi	r27, 0xF8	; 248
 a26:	39 f0       	breq	.+14     	; 0xa36 <__fixunssfsi+0x4c>
 a28:	b9 3f       	cpi	r27, 0xF9	; 249
 a2a:	cc f3       	brlt	.-14     	; 0xa1e <__fixunssfsi+0x34>
 a2c:	86 95       	lsr	r24
 a2e:	77 95       	ror	r23
 a30:	67 95       	ror	r22
 a32:	b3 95       	inc	r27
 a34:	d9 f7       	brne	.-10     	; 0xa2c <__fixunssfsi+0x42>
 a36:	3e f4       	brtc	.+14     	; 0xa46 <__fixunssfsi+0x5c>
 a38:	90 95       	com	r25
 a3a:	80 95       	com	r24
 a3c:	70 95       	com	r23
 a3e:	61 95       	neg	r22
 a40:	7f 4f       	sbci	r23, 0xFF	; 255
 a42:	8f 4f       	sbci	r24, 0xFF	; 255
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	08 95       	ret

00000a48 <__floatunsisf>:
 a48:	e8 94       	clt
 a4a:	09 c0       	rjmp	.+18     	; 0xa5e <__floatsisf+0x12>

00000a4c <__floatsisf>:
 a4c:	97 fb       	bst	r25, 7
 a4e:	3e f4       	brtc	.+14     	; 0xa5e <__floatsisf+0x12>
 a50:	90 95       	com	r25
 a52:	80 95       	com	r24
 a54:	70 95       	com	r23
 a56:	61 95       	neg	r22
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	8f 4f       	sbci	r24, 0xFF	; 255
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	99 23       	and	r25, r25
 a60:	a9 f0       	breq	.+42     	; 0xa8c <__floatsisf+0x40>
 a62:	f9 2f       	mov	r31, r25
 a64:	96 e9       	ldi	r25, 0x96	; 150
 a66:	bb 27       	eor	r27, r27
 a68:	93 95       	inc	r25
 a6a:	f6 95       	lsr	r31
 a6c:	87 95       	ror	r24
 a6e:	77 95       	ror	r23
 a70:	67 95       	ror	r22
 a72:	b7 95       	ror	r27
 a74:	f1 11       	cpse	r31, r1
 a76:	f8 cf       	rjmp	.-16     	; 0xa68 <__floatsisf+0x1c>
 a78:	fa f4       	brpl	.+62     	; 0xab8 <__floatsisf+0x6c>
 a7a:	bb 0f       	add	r27, r27
 a7c:	11 f4       	brne	.+4      	; 0xa82 <__floatsisf+0x36>
 a7e:	60 ff       	sbrs	r22, 0
 a80:	1b c0       	rjmp	.+54     	; 0xab8 <__floatsisf+0x6c>
 a82:	6f 5f       	subi	r22, 0xFF	; 255
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	16 c0       	rjmp	.+44     	; 0xab8 <__floatsisf+0x6c>
 a8c:	88 23       	and	r24, r24
 a8e:	11 f0       	breq	.+4      	; 0xa94 <__floatsisf+0x48>
 a90:	96 e9       	ldi	r25, 0x96	; 150
 a92:	11 c0       	rjmp	.+34     	; 0xab6 <__floatsisf+0x6a>
 a94:	77 23       	and	r23, r23
 a96:	21 f0       	breq	.+8      	; 0xaa0 <__floatsisf+0x54>
 a98:	9e e8       	ldi	r25, 0x8E	; 142
 a9a:	87 2f       	mov	r24, r23
 a9c:	76 2f       	mov	r23, r22
 a9e:	05 c0       	rjmp	.+10     	; 0xaaa <__floatsisf+0x5e>
 aa0:	66 23       	and	r22, r22
 aa2:	71 f0       	breq	.+28     	; 0xac0 <__floatsisf+0x74>
 aa4:	96 e8       	ldi	r25, 0x86	; 134
 aa6:	86 2f       	mov	r24, r22
 aa8:	70 e0       	ldi	r23, 0x00	; 0
 aaa:	60 e0       	ldi	r22, 0x00	; 0
 aac:	2a f0       	brmi	.+10     	; 0xab8 <__floatsisf+0x6c>
 aae:	9a 95       	dec	r25
 ab0:	66 0f       	add	r22, r22
 ab2:	77 1f       	adc	r23, r23
 ab4:	88 1f       	adc	r24, r24
 ab6:	da f7       	brpl	.-10     	; 0xaae <__floatsisf+0x62>
 ab8:	88 0f       	add	r24, r24
 aba:	96 95       	lsr	r25
 abc:	87 95       	ror	r24
 abe:	97 f9       	bld	r25, 7
 ac0:	08 95       	ret

00000ac2 <__fp_cmp>:
 ac2:	99 0f       	add	r25, r25
 ac4:	00 08       	sbc	r0, r0
 ac6:	55 0f       	add	r21, r21
 ac8:	aa 0b       	sbc	r26, r26
 aca:	e0 e8       	ldi	r30, 0x80	; 128
 acc:	fe ef       	ldi	r31, 0xFE	; 254
 ace:	16 16       	cp	r1, r22
 ad0:	17 06       	cpc	r1, r23
 ad2:	e8 07       	cpc	r30, r24
 ad4:	f9 07       	cpc	r31, r25
 ad6:	c0 f0       	brcs	.+48     	; 0xb08 <__fp_cmp+0x46>
 ad8:	12 16       	cp	r1, r18
 ada:	13 06       	cpc	r1, r19
 adc:	e4 07       	cpc	r30, r20
 ade:	f5 07       	cpc	r31, r21
 ae0:	98 f0       	brcs	.+38     	; 0xb08 <__fp_cmp+0x46>
 ae2:	62 1b       	sub	r22, r18
 ae4:	73 0b       	sbc	r23, r19
 ae6:	84 0b       	sbc	r24, r20
 ae8:	95 0b       	sbc	r25, r21
 aea:	39 f4       	brne	.+14     	; 0xafa <__fp_cmp+0x38>
 aec:	0a 26       	eor	r0, r26
 aee:	61 f0       	breq	.+24     	; 0xb08 <__fp_cmp+0x46>
 af0:	23 2b       	or	r18, r19
 af2:	24 2b       	or	r18, r20
 af4:	25 2b       	or	r18, r21
 af6:	21 f4       	brne	.+8      	; 0xb00 <__fp_cmp+0x3e>
 af8:	08 95       	ret
 afa:	0a 26       	eor	r0, r26
 afc:	09 f4       	brne	.+2      	; 0xb00 <__fp_cmp+0x3e>
 afe:	a1 40       	sbci	r26, 0x01	; 1
 b00:	a6 95       	lsr	r26
 b02:	8f ef       	ldi	r24, 0xFF	; 255
 b04:	81 1d       	adc	r24, r1
 b06:	81 1d       	adc	r24, r1
 b08:	08 95       	ret

00000b0a <__fp_inf>:
 b0a:	97 f9       	bld	r25, 7
 b0c:	9f 67       	ori	r25, 0x7F	; 127
 b0e:	80 e8       	ldi	r24, 0x80	; 128
 b10:	70 e0       	ldi	r23, 0x00	; 0
 b12:	60 e0       	ldi	r22, 0x00	; 0
 b14:	08 95       	ret

00000b16 <__fp_nan>:
 b16:	9f ef       	ldi	r25, 0xFF	; 255
 b18:	80 ec       	ldi	r24, 0xC0	; 192
 b1a:	08 95       	ret

00000b1c <__fp_pscA>:
 b1c:	00 24       	eor	r0, r0
 b1e:	0a 94       	dec	r0
 b20:	16 16       	cp	r1, r22
 b22:	17 06       	cpc	r1, r23
 b24:	18 06       	cpc	r1, r24
 b26:	09 06       	cpc	r0, r25
 b28:	08 95       	ret

00000b2a <__fp_pscB>:
 b2a:	00 24       	eor	r0, r0
 b2c:	0a 94       	dec	r0
 b2e:	12 16       	cp	r1, r18
 b30:	13 06       	cpc	r1, r19
 b32:	14 06       	cpc	r1, r20
 b34:	05 06       	cpc	r0, r21
 b36:	08 95       	ret

00000b38 <__fp_round>:
 b38:	09 2e       	mov	r0, r25
 b3a:	03 94       	inc	r0
 b3c:	00 0c       	add	r0, r0
 b3e:	11 f4       	brne	.+4      	; 0xb44 <__fp_round+0xc>
 b40:	88 23       	and	r24, r24
 b42:	52 f0       	brmi	.+20     	; 0xb58 <__fp_round+0x20>
 b44:	bb 0f       	add	r27, r27
 b46:	40 f4       	brcc	.+16     	; 0xb58 <__fp_round+0x20>
 b48:	bf 2b       	or	r27, r31
 b4a:	11 f4       	brne	.+4      	; 0xb50 <__fp_round+0x18>
 b4c:	60 ff       	sbrs	r22, 0
 b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__fp_round+0x20>
 b50:	6f 5f       	subi	r22, 0xFF	; 255
 b52:	7f 4f       	sbci	r23, 0xFF	; 255
 b54:	8f 4f       	sbci	r24, 0xFF	; 255
 b56:	9f 4f       	sbci	r25, 0xFF	; 255
 b58:	08 95       	ret

00000b5a <__fp_split3>:
 b5a:	57 fd       	sbrc	r21, 7
 b5c:	90 58       	subi	r25, 0x80	; 128
 b5e:	44 0f       	add	r20, r20
 b60:	55 1f       	adc	r21, r21
 b62:	59 f0       	breq	.+22     	; 0xb7a <__fp_splitA+0x10>
 b64:	5f 3f       	cpi	r21, 0xFF	; 255
 b66:	71 f0       	breq	.+28     	; 0xb84 <__fp_splitA+0x1a>
 b68:	47 95       	ror	r20

00000b6a <__fp_splitA>:
 b6a:	88 0f       	add	r24, r24
 b6c:	97 fb       	bst	r25, 7
 b6e:	99 1f       	adc	r25, r25
 b70:	61 f0       	breq	.+24     	; 0xb8a <__fp_splitA+0x20>
 b72:	9f 3f       	cpi	r25, 0xFF	; 255
 b74:	79 f0       	breq	.+30     	; 0xb94 <__fp_splitA+0x2a>
 b76:	87 95       	ror	r24
 b78:	08 95       	ret
 b7a:	12 16       	cp	r1, r18
 b7c:	13 06       	cpc	r1, r19
 b7e:	14 06       	cpc	r1, r20
 b80:	55 1f       	adc	r21, r21
 b82:	f2 cf       	rjmp	.-28     	; 0xb68 <__fp_split3+0xe>
 b84:	46 95       	lsr	r20
 b86:	f1 df       	rcall	.-30     	; 0xb6a <__fp_splitA>
 b88:	08 c0       	rjmp	.+16     	; 0xb9a <__fp_splitA+0x30>
 b8a:	16 16       	cp	r1, r22
 b8c:	17 06       	cpc	r1, r23
 b8e:	18 06       	cpc	r1, r24
 b90:	99 1f       	adc	r25, r25
 b92:	f1 cf       	rjmp	.-30     	; 0xb76 <__fp_splitA+0xc>
 b94:	86 95       	lsr	r24
 b96:	71 05       	cpc	r23, r1
 b98:	61 05       	cpc	r22, r1
 b9a:	08 94       	sec
 b9c:	08 95       	ret

00000b9e <__fp_zero>:
 b9e:	e8 94       	clt

00000ba0 <__fp_szero>:
 ba0:	bb 27       	eor	r27, r27
 ba2:	66 27       	eor	r22, r22
 ba4:	77 27       	eor	r23, r23
 ba6:	cb 01       	movw	r24, r22
 ba8:	97 f9       	bld	r25, 7
 baa:	08 95       	ret

00000bac <__gesf2>:
 bac:	0e 94 61 05 	call	0xac2	; 0xac2 <__fp_cmp>
 bb0:	08 f4       	brcc	.+2      	; 0xbb4 <__gesf2+0x8>
 bb2:	8f ef       	ldi	r24, 0xFF	; 255
 bb4:	08 95       	ret

00000bb6 <__mulsf3>:
 bb6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__mulsf3x>
 bba:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_round>
 bbe:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__fp_pscA>
 bc2:	38 f0       	brcs	.+14     	; 0xbd2 <__mulsf3+0x1c>
 bc4:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fp_pscB>
 bc8:	20 f0       	brcs	.+8      	; 0xbd2 <__mulsf3+0x1c>
 bca:	95 23       	and	r25, r21
 bcc:	11 f0       	breq	.+4      	; 0xbd2 <__mulsf3+0x1c>
 bce:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
 bd2:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_nan>
 bd6:	11 24       	eor	r1, r1
 bd8:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_szero>

00000bdc <__mulsf3x>:
 bdc:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_split3>
 be0:	70 f3       	brcs	.-36     	; 0xbbe <__mulsf3+0x8>

00000be2 <__mulsf3_pse>:
 be2:	95 9f       	mul	r25, r21
 be4:	c1 f3       	breq	.-16     	; 0xbd6 <__mulsf3+0x20>
 be6:	95 0f       	add	r25, r21
 be8:	50 e0       	ldi	r21, 0x00	; 0
 bea:	55 1f       	adc	r21, r21
 bec:	62 9f       	mul	r22, r18
 bee:	f0 01       	movw	r30, r0
 bf0:	72 9f       	mul	r23, r18
 bf2:	bb 27       	eor	r27, r27
 bf4:	f0 0d       	add	r31, r0
 bf6:	b1 1d       	adc	r27, r1
 bf8:	63 9f       	mul	r22, r19
 bfa:	aa 27       	eor	r26, r26
 bfc:	f0 0d       	add	r31, r0
 bfe:	b1 1d       	adc	r27, r1
 c00:	aa 1f       	adc	r26, r26
 c02:	64 9f       	mul	r22, r20
 c04:	66 27       	eor	r22, r22
 c06:	b0 0d       	add	r27, r0
 c08:	a1 1d       	adc	r26, r1
 c0a:	66 1f       	adc	r22, r22
 c0c:	82 9f       	mul	r24, r18
 c0e:	22 27       	eor	r18, r18
 c10:	b0 0d       	add	r27, r0
 c12:	a1 1d       	adc	r26, r1
 c14:	62 1f       	adc	r22, r18
 c16:	73 9f       	mul	r23, r19
 c18:	b0 0d       	add	r27, r0
 c1a:	a1 1d       	adc	r26, r1
 c1c:	62 1f       	adc	r22, r18
 c1e:	83 9f       	mul	r24, r19
 c20:	a0 0d       	add	r26, r0
 c22:	61 1d       	adc	r22, r1
 c24:	22 1f       	adc	r18, r18
 c26:	74 9f       	mul	r23, r20
 c28:	33 27       	eor	r19, r19
 c2a:	a0 0d       	add	r26, r0
 c2c:	61 1d       	adc	r22, r1
 c2e:	23 1f       	adc	r18, r19
 c30:	84 9f       	mul	r24, r20
 c32:	60 0d       	add	r22, r0
 c34:	21 1d       	adc	r18, r1
 c36:	82 2f       	mov	r24, r18
 c38:	76 2f       	mov	r23, r22
 c3a:	6a 2f       	mov	r22, r26
 c3c:	11 24       	eor	r1, r1
 c3e:	9f 57       	subi	r25, 0x7F	; 127
 c40:	50 40       	sbci	r21, 0x00	; 0
 c42:	9a f0       	brmi	.+38     	; 0xc6a <__mulsf3_pse+0x88>
 c44:	f1 f0       	breq	.+60     	; 0xc82 <__mulsf3_pse+0xa0>
 c46:	88 23       	and	r24, r24
 c48:	4a f0       	brmi	.+18     	; 0xc5c <__mulsf3_pse+0x7a>
 c4a:	ee 0f       	add	r30, r30
 c4c:	ff 1f       	adc	r31, r31
 c4e:	bb 1f       	adc	r27, r27
 c50:	66 1f       	adc	r22, r22
 c52:	77 1f       	adc	r23, r23
 c54:	88 1f       	adc	r24, r24
 c56:	91 50       	subi	r25, 0x01	; 1
 c58:	50 40       	sbci	r21, 0x00	; 0
 c5a:	a9 f7       	brne	.-22     	; 0xc46 <__mulsf3_pse+0x64>
 c5c:	9e 3f       	cpi	r25, 0xFE	; 254
 c5e:	51 05       	cpc	r21, r1
 c60:	80 f0       	brcs	.+32     	; 0xc82 <__mulsf3_pse+0xa0>
 c62:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
 c66:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_szero>
 c6a:	5f 3f       	cpi	r21, 0xFF	; 255
 c6c:	e4 f3       	brlt	.-8      	; 0xc66 <__mulsf3_pse+0x84>
 c6e:	98 3e       	cpi	r25, 0xE8	; 232
 c70:	d4 f3       	brlt	.-12     	; 0xc66 <__mulsf3_pse+0x84>
 c72:	86 95       	lsr	r24
 c74:	77 95       	ror	r23
 c76:	67 95       	ror	r22
 c78:	b7 95       	ror	r27
 c7a:	f7 95       	ror	r31
 c7c:	e7 95       	ror	r30
 c7e:	9f 5f       	subi	r25, 0xFF	; 255
 c80:	c1 f7       	brne	.-16     	; 0xc72 <__mulsf3_pse+0x90>
 c82:	fe 2b       	or	r31, r30
 c84:	88 0f       	add	r24, r24
 c86:	91 1d       	adc	r25, r1
 c88:	96 95       	lsr	r25
 c8a:	87 95       	ror	r24
 c8c:	97 f9       	bld	r25, 7
 c8e:	08 95       	ret

00000c90 <__utoa_ncheck>:
 c90:	bb 27       	eor	r27, r27

00000c92 <__utoa_common>:
 c92:	fb 01       	movw	r30, r22
 c94:	55 27       	eor	r21, r21
 c96:	aa 27       	eor	r26, r26
 c98:	88 0f       	add	r24, r24
 c9a:	99 1f       	adc	r25, r25
 c9c:	aa 1f       	adc	r26, r26
 c9e:	a4 17       	cp	r26, r20
 ca0:	10 f0       	brcs	.+4      	; 0xca6 <__utoa_common+0x14>
 ca2:	a4 1b       	sub	r26, r20
 ca4:	83 95       	inc	r24
 ca6:	50 51       	subi	r21, 0x10	; 16
 ca8:	b9 f7       	brne	.-18     	; 0xc98 <__utoa_common+0x6>
 caa:	a0 5d       	subi	r26, 0xD0	; 208
 cac:	aa 33       	cpi	r26, 0x3A	; 58
 cae:	08 f0       	brcs	.+2      	; 0xcb2 <__utoa_common+0x20>
 cb0:	a9 5d       	subi	r26, 0xD9	; 217
 cb2:	a1 93       	st	Z+, r26
 cb4:	00 97       	sbiw	r24, 0x00	; 0
 cb6:	79 f7       	brne	.-34     	; 0xc96 <__utoa_common+0x4>
 cb8:	b1 11       	cpse	r27, r1
 cba:	b1 93       	st	Z+, r27
 cbc:	11 92       	st	Z+, r1
 cbe:	cb 01       	movw	r24, r22
 cc0:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <strrev>

00000cc4 <strrev>:
 cc4:	dc 01       	movw	r26, r24
 cc6:	fc 01       	movw	r30, r24
 cc8:	67 2f       	mov	r22, r23
 cca:	71 91       	ld	r23, Z+
 ccc:	77 23       	and	r23, r23
 cce:	e1 f7       	brne	.-8      	; 0xcc8 <strrev+0x4>
 cd0:	32 97       	sbiw	r30, 0x02	; 2
 cd2:	04 c0       	rjmp	.+8      	; 0xcdc <strrev+0x18>
 cd4:	7c 91       	ld	r23, X
 cd6:	6d 93       	st	X+, r22
 cd8:	70 83       	st	Z, r23
 cda:	62 91       	ld	r22, -Z
 cdc:	ae 17       	cp	r26, r30
 cde:	bf 07       	cpc	r27, r31
 ce0:	c8 f3       	brcs	.-14     	; 0xcd4 <strrev+0x10>
 ce2:	08 95       	ret

00000ce4 <_exit>:
 ce4:	f8 94       	cli

00000ce6 <__stop_program>:
 ce6:	ff cf       	rjmp	.-2      	; 0xce6 <__stop_program>
