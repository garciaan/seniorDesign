   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	init_uart
  13               	init_uart:
  14               	.LFB10:
  15               		.file 1 "main.c"
   1:main.c        **** #ifndef F_CPU
   2:main.c        **** #define F_CPU 16000000UL
   3:main.c        **** #endif
   4:main.c        **** 
   5:main.c        **** #include <avr/io.h>
   6:main.c        **** #include <util/delay.h>
   7:main.c        **** #include <math.h>
   8:main.c        **** #include <stdlib.h>
   9:main.c        **** 
  10:main.c        **** #include "i2c_master.h"
  11:main.c        **** 
  12:main.c        **** #define HMC5883L_WRITE 0x3C
  13:main.c        **** #define HMC5883L_READ 0x3D 
  14:main.c        **** 
  15:main.c        **** void init_uart(uint16_t baudrate){
  16               		.loc 1 15 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  16:main.c        **** 
  17:main.c        **** 	uint16_t UBRR_val = (F_CPU/16)/(baudrate-1);
  23               		.loc 1 17 0
  24 0000 0197      		sbiw r24,1
  25               	.LVL1:
  26 0002 9C01      		movw r18,r24
  27 0004 40E0      		ldi r20,0
  28 0006 50E0      		ldi r21,0
  29 0008 60E4      		ldi r22,lo8(64)
  30 000a 72E4      		ldi r23,lo8(66)
  31 000c 8FE0      		ldi r24,lo8(15)
  32 000e 90E0      		ldi r25,0
  33 0010 0E94 0000 		call __udivmodsi4
  34               	.LVL2:
  18:main.c        **** 
  19:main.c        **** 	UBRR0H = UBRR_val >> 8;
  35               		.loc 1 19 0
  36 0014 832F      		mov r24,r19
  37 0016 9927      		clr r25
  38               	.LVL3:
  39 0018 8093 9000 		sts 144,r24
  20:main.c        **** 	UBRR0L = UBRR_val;
  40               		.loc 1 20 0
  41 001c 29B9      		out 0x9,r18
  21:main.c        **** 
  22:main.c        **** 	UCSR0B |= (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0); // UART TX (Transmit - senden) einschalten
  42               		.loc 1 22 0
  43 001e 8AB1      		in r24,0xa
  44 0020 8869      		ori r24,lo8(-104)
  45 0022 8AB9      		out 0xa,r24
  23:main.c        **** 	UCSR0C |= (1<<USBS0) | (3<<UCSZ00); //Modus Asynchron 8N1 (8 Datenbits, No Parity, 1 Stopbit)
  46               		.loc 1 23 0
  47 0024 E5E9      		ldi r30,lo8(-107)
  48 0026 F0E0      		ldi r31,0
  49 0028 8081      		ld r24,Z
  50 002a 8E60      		ori r24,lo8(14)
  51 002c 8083      		st Z,r24
  52 002e 0895      		ret
  53               		.cfi_endproc
  54               	.LFE10:
  56               	.global	uart_putc
  58               	uart_putc:
  59               	.LFB11:
  24:main.c        **** }
  25:main.c        **** 
  26:main.c        **** void uart_putc(unsigned char c){
  60               		.loc 1 26 0
  61               		.cfi_startproc
  62               	/* prologue: function */
  63               	/* frame size = 0 */
  64               	/* stack size = 0 */
  65               	.L__stack_usage = 0
  66               	.LVL4:
  67               	.L3:
  27:main.c        **** 
  28:main.c        **** 	while(!(UCSR0A & (1<<UDRE0))); // wait until sending is possible
  68               		.loc 1 28 0 discriminator 1
  69 0030 5D9B      		sbis 0xb,5
  70 0032 00C0      		rjmp .L3
  29:main.c        **** 	UDR0 = c; // output character saved in c
  71               		.loc 1 29 0
  72 0034 8CB9      		out 0xc,r24
  73 0036 0895      		ret
  74               		.cfi_endproc
  75               	.LFE11:
  77               	.global	uart_puts
  79               	uart_puts:
  80               	.LFB12:
  30:main.c        **** }
  31:main.c        **** 
  32:main.c        **** void uart_puts(char *s){
  81               		.loc 1 32 0
  82               		.cfi_startproc
  83               	.LVL5:
  84 0038 CF93      		push r28
  85               	.LCFI0:
  86               		.cfi_def_cfa_offset 3
  87               		.cfi_offset 28, -2
  88 003a DF93      		push r29
  89               	.LCFI1:
  90               		.cfi_def_cfa_offset 4
  91               		.cfi_offset 29, -3
  92               	/* prologue: function */
  93               	/* frame size = 0 */
  94               	/* stack size = 2 */
  95               	.L__stack_usage = 2
  96 003c EC01      		movw r28,r24
  97               	.LVL6:
  98               	.L7:
  33:main.c        **** 	while(*s){
  99               		.loc 1 33 0
 100 003e 8991      		ld r24,Y+
 101               	.LVL7:
 102 0040 8111      		cpse r24,__zero_reg__
 103 0042 00C0      		rjmp .L8
 104               	/* epilogue start */
  34:main.c        **** 		uart_putc(*s);
  35:main.c        **** 		s++;
  36:main.c        **** 	}
  37:main.c        **** }
 105               		.loc 1 37 0
 106 0044 DF91      		pop r29
 107 0046 CF91      		pop r28
 108               	.LVL8:
 109 0048 0895      		ret
 110               	.LVL9:
 111               	.L8:
  34:main.c        **** 		uart_putc(*s);
 112               		.loc 1 34 0
 113 004a 0E94 0000 		call uart_putc
 114               	.LVL10:
 115 004e 00C0      		rjmp .L7
 116               		.cfi_endproc
 117               	.LFE12:
 119               	.global	init_HMC5883L
 121               	init_HMC5883L:
 122               	.LFB13:
  38:main.c        **** 
  39:main.c        **** char buffer[6];
  40:main.c        **** 
  41:main.c        **** int16_t raw_x = 0;
  42:main.c        **** int16_t raw_y = 0;
  43:main.c        **** int16_t raw_z = 0;
  44:main.c        **** float headingDegrees = 0;
  45:main.c        **** 
  46:main.c        **** void init_HMC5883L(void){
 123               		.loc 1 46 0
 124               		.cfi_startproc
 125               	/* prologue: function */
 126               	/* frame size = 0 */
 127               	/* stack size = 0 */
 128               	.L__stack_usage = 0
  47:main.c        **** 
  48:main.c        **** 	i2c_start(HMC5883L_WRITE);
 129               		.loc 1 48 0
 130 0050 8CE3      		ldi r24,lo8(60)
 131 0052 0E94 0000 		call i2c_start
 132               	.LVL11:
  49:main.c        **** 	i2c_write(0x00); // set pointer to CRA
 133               		.loc 1 49 0
 134 0056 80E0      		ldi r24,0
 135 0058 0E94 0000 		call i2c_write
 136               	.LVL12:
  50:main.c        **** 	i2c_write(0x70); // write 0x70 to CRA
 137               		.loc 1 50 0
 138 005c 80E7      		ldi r24,lo8(112)
 139 005e 0E94 0000 		call i2c_write
 140               	.LVL13:
  51:main.c        **** 	i2c_stop();
 141               		.loc 1 51 0
 142 0062 0E94 0000 		call i2c_stop
 143               	.LVL14:
  52:main.c        **** 
  53:main.c        **** 	i2c_start(HMC5883L_WRITE);
 144               		.loc 1 53 0
 145 0066 8CE3      		ldi r24,lo8(60)
 146 0068 0E94 0000 		call i2c_start
 147               	.LVL15:
  54:main.c        **** 	i2c_write(0x01); // set pointer to CRB
 148               		.loc 1 54 0
 149 006c 81E0      		ldi r24,lo8(1)
 150 006e 0E94 0000 		call i2c_write
 151               	.LVL16:
  55:main.c        **** 	i2c_write(0xA0);
 152               		.loc 1 55 0
 153 0072 80EA      		ldi r24,lo8(-96)
 154 0074 0E94 0000 		call i2c_write
 155               	.LVL17:
  56:main.c        **** 	i2c_stop();
 156               		.loc 1 56 0
 157 0078 0E94 0000 		call i2c_stop
 158               	.LVL18:
  57:main.c        **** 
  58:main.c        **** 	i2c_start(HMC5883L_WRITE);
 159               		.loc 1 58 0
 160 007c 8CE3      		ldi r24,lo8(60)
 161 007e 0E94 0000 		call i2c_start
 162               	.LVL19:
  59:main.c        **** 	i2c_write(0x02); // set pointer to measurement mode
 163               		.loc 1 59 0
 164 0082 82E0      		ldi r24,lo8(2)
 165 0084 0E94 0000 		call i2c_write
 166               	.LVL20:
  60:main.c        **** 	i2c_write(0x00); // continous measurement
 167               		.loc 1 60 0
 168 0088 80E0      		ldi r24,0
 169 008a 0E94 0000 		call i2c_write
 170               	.LVL21:
  61:main.c        **** 	i2c_stop();
 171               		.loc 1 61 0
 172 008e 0C94 0000 		jmp i2c_stop
 173               	.LVL22:
 174               		.cfi_endproc
 175               	.LFE13:
 177               	.global	__floatsisf
 178               	.global	__mulsf3
 179               	.global	__divsf3
 180               	.global	__addsf3
 181               	.global	getHeading
 183               	getHeading:
 184               	.LFB14:
  62:main.c        **** }
  63:main.c        **** 
  64:main.c        **** float getHeading(void){
 185               		.loc 1 64 0
 186               		.cfi_startproc
 187 0092 CF92      		push r12
 188               	.LCFI2:
 189               		.cfi_def_cfa_offset 3
 190               		.cfi_offset 12, -2
 191 0094 DF92      		push r13
 192               	.LCFI3:
 193               		.cfi_def_cfa_offset 4
 194               		.cfi_offset 13, -3
 195 0096 EF92      		push r14
 196               	.LCFI4:
 197               		.cfi_def_cfa_offset 5
 198               		.cfi_offset 14, -4
 199 0098 FF92      		push r15
 200               	.LCFI5:
 201               		.cfi_def_cfa_offset 6
 202               		.cfi_offset 15, -5
 203               	/* prologue: function */
 204               	/* frame size = 0 */
 205               	/* stack size = 4 */
 206               	.L__stack_usage = 4
  65:main.c        **** 
  66:main.c        **** 	i2c_start(HMC5883L_WRITE);
 207               		.loc 1 66 0
 208 009a 8CE3      		ldi r24,lo8(60)
 209 009c 0E94 0000 		call i2c_start
 210               	.LVL23:
  67:main.c        **** 	i2c_write(0x03); // set pointer to X axis MSB
 211               		.loc 1 67 0
 212 00a0 83E0      		ldi r24,lo8(3)
 213 00a2 0E94 0000 		call i2c_write
 214               	.LVL24:
  68:main.c        **** 	i2c_stop();
 215               		.loc 1 68 0
 216 00a6 0E94 0000 		call i2c_stop
 217               	.LVL25:
  69:main.c        **** 
  70:main.c        **** 	i2c_start(HMC5883L_READ);
 218               		.loc 1 70 0
 219 00aa 8DE3      		ldi r24,lo8(61)
 220 00ac 0E94 0000 		call i2c_start
 221               	.LVL26:
  71:main.c        **** 
  72:main.c        **** 	raw_x = ((uint8_t)i2c_read_ack())<<8;
 222               		.loc 1 72 0
 223 00b0 0E94 0000 		call i2c_read_ack
 224               	.LVL27:
 225 00b4 1092 0000 		sts raw_x,__zero_reg__
 226 00b8 8093 0000 		sts raw_x+1,r24
  73:main.c        **** 	raw_x |= i2c_read_ack();
 227               		.loc 1 73 0
 228 00bc 0E94 0000 		call i2c_read_ack
 229               	.LVL28:
 230 00c0 2091 0000 		lds r18,raw_x
 231 00c4 3091 0000 		lds r19,raw_x+1
 232 00c8 282B      		or r18,r24
 233 00ca 3093 0000 		sts raw_x+1,r19
 234 00ce 2093 0000 		sts raw_x,r18
  74:main.c        **** 
  75:main.c        **** 	raw_z = ((uint8_t)i2c_read_ack())<<8;
 235               		.loc 1 75 0
 236 00d2 0E94 0000 		call i2c_read_ack
 237               	.LVL29:
 238 00d6 1092 0000 		sts raw_z,__zero_reg__
 239 00da 8093 0000 		sts raw_z+1,r24
  76:main.c        **** 	raw_z |= i2c_read_ack();
 240               		.loc 1 76 0
 241 00de 0E94 0000 		call i2c_read_ack
 242               	.LVL30:
 243 00e2 2091 0000 		lds r18,raw_z
 244 00e6 3091 0000 		lds r19,raw_z+1
 245 00ea 282B      		or r18,r24
 246 00ec 3093 0000 		sts raw_z+1,r19
 247 00f0 2093 0000 		sts raw_z,r18
  77:main.c        **** 
  78:main.c        **** 	raw_y = ((uint8_t)i2c_read_ack())<<8;
 248               		.loc 1 78 0
 249 00f4 0E94 0000 		call i2c_read_ack
 250               	.LVL31:
 251 00f8 1092 0000 		sts raw_y,__zero_reg__
 252 00fc 8093 0000 		sts raw_y+1,r24
  79:main.c        **** 	raw_y |= i2c_read_nack();
 253               		.loc 1 79 0
 254 0100 0E94 0000 		call i2c_read_nack
 255               	.LVL32:
 256 0104 2091 0000 		lds r18,raw_y
 257 0108 3091 0000 		lds r19,raw_y+1
 258 010c 282B      		or r18,r24
 259 010e 3093 0000 		sts raw_y+1,r19
 260 0112 2093 0000 		sts raw_y,r18
  80:main.c        **** 
  81:main.c        **** 	i2c_stop();
 261               		.loc 1 81 0
 262 0116 0E94 0000 		call i2c_stop
 263               	.LVL33:
  82:main.c        **** 
  83:main.c        **** 	headingDegrees = atan2((double)raw_y,(double)raw_x) * 180 / 3.141592654 + 180;
 264               		.loc 1 83 0
 265 011a 6091 0000 		lds r22,raw_x
 266 011e 7091 0000 		lds r23,raw_x+1
 267 0122 072E      		mov __tmp_reg__,r23
 268 0124 000C      		lsl r0
 269 0126 880B      		sbc r24,r24
 270 0128 990B      		sbc r25,r25
 271 012a 0E94 0000 		call __floatsisf
 272               	.LVL34:
 273 012e 6B01      		movw r12,r22
 274 0130 7C01      		movw r14,r24
 275 0132 6091 0000 		lds r22,raw_y
 276 0136 7091 0000 		lds r23,raw_y+1
 277 013a 072E      		mov __tmp_reg__,r23
 278 013c 000C      		lsl r0
 279 013e 880B      		sbc r24,r24
 280 0140 990B      		sbc r25,r25
 281 0142 0E94 0000 		call __floatsisf
 282               	.LVL35:
 283 0146 A701      		movw r20,r14
 284 0148 9601      		movw r18,r12
 285 014a 0E94 0000 		call atan2
 286               	.LVL36:
 287 014e 20E0      		ldi r18,0
 288 0150 30E0      		ldi r19,0
 289 0152 44E3      		ldi r20,lo8(52)
 290 0154 53E4      		ldi r21,lo8(67)
 291 0156 0E94 0000 		call __mulsf3
 292               	.LVL37:
 293 015a 2BED      		ldi r18,lo8(-37)
 294 015c 3FE0      		ldi r19,lo8(15)
 295 015e 49E4      		ldi r20,lo8(73)
 296 0160 50E4      		ldi r21,lo8(64)
 297 0162 0E94 0000 		call __divsf3
 298               	.LVL38:
 299 0166 20E0      		ldi r18,0
 300 0168 30E0      		ldi r19,0
 301 016a 44E3      		ldi r20,lo8(52)
 302 016c 53E4      		ldi r21,lo8(67)
 303 016e 0E94 0000 		call __addsf3
 304               	.LVL39:
 305 0172 6093 0000 		sts headingDegrees,r22
 306 0176 7093 0000 		sts headingDegrees+1,r23
 307 017a 8093 0000 		sts headingDegrees+2,r24
 308 017e 9093 0000 		sts headingDegrees+3,r25
 309               	/* epilogue start */
  84:main.c        **** 
  85:main.c        **** 	return headingDegrees;
  86:main.c        **** }
 310               		.loc 1 86 0
 311 0182 FF90      		pop r15
 312 0184 EF90      		pop r14
 313 0186 DF90      		pop r13
 314 0188 CF90      		pop r12
 315 018a 0895      		ret
 316               		.cfi_endproc
 317               	.LFE14:
 319               		.section	.rodata.str1.1,"aMS",@progbits,1
 320               	.LC0:
 321 0000 2020 00   		.string	"  "
 322               	.LC1:
 323 0003 2020 0D0A 		.string	"  \r\n"
 323      00
 324               		.section	.text.startup,"ax",@progbits
 325               	.global	main
 327               	main:
 328               	.LFB15:
  87:main.c        **** 
  88:main.c        **** int main(void){
 329               		.loc 1 88 0
 330               		.cfi_startproc
 331               	/* prologue: function */
 332               	/* frame size = 0 */
 333               	/* stack size = 0 */
 334               	.L__stack_usage = 0
  89:main.c        **** 	
  90:main.c        **** 	init_uart(9600);
 335               		.loc 1 90 0
 336 0000 80E8      		ldi r24,lo8(-128)
 337 0002 95E2      		ldi r25,lo8(37)
 338 0004 0E94 0000 		call init_uart
 339               	.LVL40:
  91:main.c        **** 	i2c_init();
 340               		.loc 1 91 0
 341 0008 0E94 0000 		call i2c_init
 342               	.LVL41:
  92:main.c        **** 	init_HMC5883L();
 343               		.loc 1 92 0
 344 000c 0E94 0000 		call init_HMC5883L
 345               	.LVL42:
 346               	.L12:
  93:main.c        **** 	
  94:main.c        **** 	while(1){
  95:main.c        **** 		getHeading();
 347               		.loc 1 95 0 discriminator 1
 348 0010 0E94 0000 		call getHeading
 349               	.LVL43:
 350               	.LBB16:
 351               	.LBB17:
 352               		.file 2 "/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h"
   1:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    Copyright (c) 2004,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
   4:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    Portions of documentation Copyright (c) 1990, 1991, 1993, 1994
   5:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    The Regents of the University of California.
   6:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
   7:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    All rights reserved.
   8:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
   9:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    Redistribution and use in source and binary forms, with or without
  10:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    modification, are permitted provided that the following conditions are met:
  11:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  12:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    * Redistributions of source code must retain the above copyright
  13:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      notice, this list of conditions and the following disclaimer.
  14:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  15:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    * Redistributions in binary form must reproduce the above copyright
  16:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      notice, this list of conditions and the following disclaimer in
  17:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      the documentation and/or other materials provided with the
  18:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      distribution.
  19:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  20:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    * Neither the name of the copyright holders nor the names of
  21:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      contributors may be used to endorse or promote products derived
  22:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      from this software without specific prior written permission.
  23:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  24:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  28:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****   POSSIBILITY OF SUCH DAMAGE.
  35:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  36:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****   $Id: stdlib.h 2503 2016-02-07 22:59:47Z joerg_wunsch $
  37:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
  38:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  39:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifndef _STDLIB_H_
  40:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #define	_STDLIB_H_ 1
  41:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  42:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifndef __ASSEMBLER__
  43:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  44:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifndef __DOXYGEN__
  45:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #define __need_NULL
  46:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #define __need_size_t
  47:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #define __need_wchar_t
  48:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #include <stddef.h>
  49:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  50:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifndef __ptr_t
  51:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #define __ptr_t void *
  52:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #endif
  53:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #endif	/* !__DOXYGEN__ */
  54:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  55:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifdef __cplusplus
  56:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern "C" {
  57:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #endif
  58:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  59:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /** \file */
  60:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  61:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /** \defgroup avr_stdlib <stdlib.h>: General utilities
  62:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     \code #include <stdlib.h> \endcode
  63:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  64:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     This file declares some basic C macros and functions as
  65:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     defined by the ISO standard, plus some AVR-specific extensions.
  66:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
  67:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  68:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /*@{*/
  69:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /** Result type for function div(). */
  70:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** typedef struct {
  71:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 	int quot;                   /**< The Quotient. */
  72:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 	int rem;                    /**< The Remainder. */
  73:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** } div_t;
  74:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  75:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /** Result type for function ldiv(). */
  76:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** typedef struct {
  77:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 	long quot;                  /**< The Quotient. */
  78:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 	long rem;                   /**< The Remainder. */
  79:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** } ldiv_t;
  80:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  81:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /** Comparision function type for qsort(), just for convenience. */
  82:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** typedef int (*__compar_fn_t)(const void *, const void *);
  83:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  84:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifndef __DOXYGEN__
  85:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  86:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifndef __ATTR_CONST__
  87:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** # define __ATTR_CONST__ __attribute__((__const__))
  88:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #endif
  89:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  90:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifndef __ATTR_MALLOC__
  91:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** # define __ATTR_MALLOC__ __attribute__((__malloc__))
  92:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #endif
  93:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  94:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifndef __ATTR_NORETURN__
  95:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** # define __ATTR_NORETURN__ __attribute__((__noreturn__))
  96:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #endif
  97:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
  98:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifndef __ATTR_PURE__
  99:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** # define __ATTR_PURE__ __attribute__((__pure__))
 100:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #endif
 101:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 102:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifndef	__ATTR_GNU_INLINE__
 103:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** # ifdef  __GNUC_STDC_INLINE__
 104:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #  define __ATTR_GNU_INLINE__   __attribute__((__gnu_inline__))
 105:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** # else
 106:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #  define __ATTR_GNU_INLINE__
 107:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** # endif
 108:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #endif
 109:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 110:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #endif
 111:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 112:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /** The abort() function causes abnormal program termination to occur.
 113:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     This realization disables interrupts and jumps to _exit() function
 114:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     with argument equal to 1. In the limited AVR environment, execution is
 115:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     effectively halted by entering an infinite loop. */
 116:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern void abort(void) __ATTR_NORETURN__;
 117:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 118:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /** The abs() function computes the absolute value of the integer \c i.
 119:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    \note The abs() and labs() functions are builtins of gcc.
 120:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 121:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern int abs(int __i) __ATTR_CONST__;
 122:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifndef __DOXYGEN__
 123:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #define	abs(__i) __builtin_abs(__i)
 124:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #endif
 125:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 126:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /** The labs() function computes the absolute value of the long integer
 127:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     \c i.
 128:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    \note The abs() and labs() functions are builtins of gcc.
 129:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 130:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern long labs(long __i) __ATTR_CONST__;
 131:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifndef __DOXYGEN__
 132:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #define labs(__i) __builtin_labs(__i)
 133:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #endif
 134:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 135:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 136:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      The bsearch() function searches an array of \c nmemb objects, the
 137:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      initial member of which is pointed to by \c base, for a member
 138:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      that matches the object pointed to by \c key.  The size of each
 139:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      member of the array is specified by \c size.
 140:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 141:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      The contents of the array should be in ascending sorted order
 142:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      according to the comparison function referenced by \c compar.
 143:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      The \c compar routine is expected to have two arguments which
 144:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      point to the key object and to an array member, in that order,
 145:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      and should return an integer less than, equal to, or greater than
 146:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      zero if the key object is found, respectively, to be less than,
 147:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      to match, or be greater than the array member.
 148:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 149:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      The bsearch() function returns a pointer to a matching member of
 150:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      the array, or a null pointer if no match is found.  If two
 151:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      members compare as equal, which member is matched is unspecified.
 152:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 153:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern void *bsearch(const void *__key, const void *__base, size_t __nmemb,
 154:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 		     size_t __size, int (*__compar)(const void *, const void *));
 155:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 156:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /* __divmodhi4 and __divmodsi4 from libgcc.a */
 157:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 158:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      The div() function computes the value \c num/denom and returns
 159:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      the quotient and remainder in a structure named \c div_t that
 160:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      contains two int members named \c quot and \c rem.
 161:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 162:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern div_t div(int __num, int __denom) __asm__("__divmodhi4") __ATTR_CONST__;
 163:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 164:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      The ldiv() function computes the value \c num/denom and returns
 165:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      the quotient and remainder in a structure named \c ldiv_t that
 166:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      contains two long integer members named \c quot and \c rem.
 167:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 168:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern ldiv_t ldiv(long __num, long __denom) __asm__("__divmodsi4") __ATTR_CONST__;
 169:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 170:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 171:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      The qsort() function is a modified partition-exchange sort, or
 172:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      quicksort.
 173:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 174:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      The qsort() function sorts an array of \c nmemb objects, the
 175:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      initial member of which is pointed to by \c base.  The size of
 176:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      each object is specified by \c size.  The contents of the array
 177:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      base are sorted in ascending order according to a comparison
 178:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      function pointed to by \c compar, which requires two arguments
 179:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      pointing to the objects being compared.
 180:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 181:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      The comparison function must return an integer less than, equal
 182:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      to, or greater than zero if the first argument is considered to
 183:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      be respectively less than, equal to, or greater than the second.
 184:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 185:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern void qsort(void *__base, size_t __nmemb, size_t __size,
 186:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 		  __compar_fn_t __compar);
 187:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 188:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 189:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     The strtol() function converts the string in \c nptr to a long
 190:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     value.  The conversion is done according to the given base, which
 191:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     must be between 2 and 36 inclusive, or be the special value 0.
 192:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 193:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     The string may begin with an arbitrary amount of white space (as
 194:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     determined by isspace()) followed by a single optional \c '+' or \c '-'
 195:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     sign.  If \c base is zero or 16, the string may then include a
 196:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     \c "0x" prefix, and the number will be read in base 16; otherwise,
 197:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     a zero base is taken as 10 (decimal) unless the next character is
 198:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     \c '0', in which case it is taken as 8 (octal).
 199:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 200:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     The remainder of the string is converted to a long value in the
 201:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     obvious manner, stopping at the first character which is not a
 202:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     valid digit in the given base.  (In bases above 10, the letter \c 'A'
 203:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     in either upper or lower case represents 10, \c 'B' represents 11,
 204:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     and so forth, with \c 'Z' representing 35.)
 205:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 206:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     If \c endptr is not NULL, strtol() stores the address of the first
 207:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     invalid character in \c *endptr.  If there were no digits at all,
 208:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     however, strtol() stores the original value of \c nptr in \c
 209:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     *endptr.  (Thus, if \c *nptr is not \c '\\0' but \c **endptr is \c '\\0'
 210:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     on return, the entire string was valid.)
 211:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 212:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     The strtol() function returns the result of the conversion, unless
 213:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     the value would underflow or overflow.  If no conversion could be
 214:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     performed, 0 is returned.  If an overflow or underflow occurs, \c
 215:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     errno is set to \ref avr_errno "ERANGE" and the function return value
 216:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     is clamped to \c LONG_MIN or \c LONG_MAX, respectively.
 217:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 218:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern long strtol(const char *__nptr, char **__endptr, int __base);
 219:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 220:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 221:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     The strtoul() function converts the string in \c nptr to an
 222:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     unsigned long value.  The conversion is done according to the
 223:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     given base, which must be between 2 and 36 inclusive, or be the
 224:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     special value 0.
 225:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 226:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     The string may begin with an arbitrary amount of white space (as
 227:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     determined by isspace()) followed by a single optional \c '+' or \c '-'
 228:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     sign.  If \c base is zero or 16, the string may then include a
 229:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     \c "0x" prefix, and the number will be read in base 16; otherwise,
 230:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     a zero base is taken as 10 (decimal) unless the next character is
 231:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     \c '0', in which case it is taken as 8 (octal).
 232:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 233:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     The remainder of the string is converted to an unsigned long value
 234:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     in the obvious manner, stopping at the first character which is
 235:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     not a valid digit in the given base.  (In bases above 10, the
 236:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     letter \c 'A' in either upper or lower case represents 10, \c 'B'
 237:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     represents 11, and so forth, with \c 'Z' representing 35.)
 238:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 239:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     If \c endptr is not NULL, strtoul() stores the address of the first
 240:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     invalid character in \c *endptr.  If there were no digits at all,
 241:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     however, strtoul() stores the original value of \c nptr in \c
 242:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     *endptr.  (Thus, if \c *nptr is not \c '\\0' but \c **endptr is \c '\\0'
 243:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     on return, the entire string was valid.)
 244:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 245:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     The strtoul() function return either the result of the conversion
 246:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     or, if there was a leading minus sign, the negation of the result
 247:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     of the conversion, unless the original (non-negated) value would
 248:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     overflow; in the latter case, strtoul() returns ULONG_MAX, and \c
 249:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     errno is set to \ref avr_errno "ERANGE".  If no conversion could 
 250:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     be performed, 0 is returned.
 251:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 252:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern unsigned long strtoul(const char *__nptr, char **__endptr, int __base);
 253:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 254:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 255:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     The atol() function converts the initial portion of the string
 256:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     pointed to by \p s to long integer representation. In contrast to
 257:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 258:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****         \code strtol(s, (char **)NULL, 10); \endcode
 259:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 260:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     this function does not detect overflow (\c errno is not changed and
 261:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     the result value is not predictable), uses smaller memory (flash and
 262:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     stack) and works more quickly.
 263:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 264:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern long atol(const char *__s) __ATTR_PURE__;
 265:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 266:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 267:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     The atoi() function converts the initial portion of the string
 268:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     pointed to by \p s to integer representation. In contrast to
 269:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 270:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****         \code (int)strtol(s, (char **)NULL, 10); \endcode
 271:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 272:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     this function does not detect overflow (\c errno is not changed and
 273:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     the result value is not predictable), uses smaller memory (flash and
 274:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     stack) and works more quickly.
 275:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 276:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern int atoi(const char *__s) __ATTR_PURE__;
 277:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 278:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 279:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    The exit() function terminates the application.  Since there is no
 280:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    environment to return to, \c status is ignored, and code execution
 281:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    will eventually reach an infinite loop, thereby effectively halting
 282:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    all code processing.  Before entering the infinite loop, interrupts
 283:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    are globally disabled.
 284:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 285:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    In a C++ context, global destructors will be called before halting
 286:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    execution.
 287:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 288:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern void exit(int __status) __ATTR_NORETURN__;
 289:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 290:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 291:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    The malloc() function allocates \c size bytes of memory.
 292:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    If malloc() fails, a NULL pointer is returned.
 293:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 294:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    Note that malloc() does \e not initialize the returned memory to
 295:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    zero bytes.
 296:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 297:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    See the chapter about \ref malloc "malloc() usage" for implementation
 298:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    details.
 299:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 300:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern void *malloc(size_t __size) __ATTR_MALLOC__;
 301:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 302:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 303:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    The free() function causes the allocated memory referenced by \c
 304:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    ptr to be made available for future allocations.  If \c ptr is
 305:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    NULL, no action occurs.
 306:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 307:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern void free(void *__ptr);
 308:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 309:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 310:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 311:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 312:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern size_t __malloc_margin;
 313:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 314:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 315:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 316:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 317:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern char *__malloc_heap_start;
 318:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 319:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 320:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 321:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 322:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern char *__malloc_heap_end;
 323:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 324:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 325:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    Allocate \c nele elements of \c size each.  Identical to calling
 326:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    \c malloc() using <tt>nele * size</tt> as argument, except the
 327:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    allocated memory will be cleared to zero.
 328:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 329:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern void *calloc(size_t __nele, size_t __size) __ATTR_MALLOC__;
 330:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 331:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 332:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    The realloc() function tries to change the size of the region
 333:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    allocated at \c ptr to the new \c size value.  It returns a
 334:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    pointer to the new region.  The returned pointer might be the
 335:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    same as the old pointer, or a pointer to a completely different
 336:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    region.
 337:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 338:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    The contents of the returned region up to either the old or the new
 339:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    size value (whatever is less) will be identical to the contents of
 340:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    the old region, even in case a new region had to be allocated.
 341:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 342:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    It is acceptable to pass \c ptr as NULL, in which case realloc()
 343:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    will behave identical to malloc().
 344:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 345:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    If the new memory cannot be allocated, realloc() returns NULL, and
 346:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    the region at \c ptr will not be changed.
 347:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 348:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern void *realloc(void *__ptr, size_t __size) __ATTR_MALLOC__;
 349:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 350:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern double strtod(const char *__nptr, char **__endptr);
 351:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 352:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern double atof(const char *__nptr);
 353:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 354:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /** Highest number that can be generated by rand(). */
 355:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #define	RAND_MAX 0x7FFF
 356:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 357:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 358:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      The rand() function computes a sequence of pseudo-random integers in the
 359:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      range of 0 to \c RAND_MAX (as defined by the header file <stdlib.h>).
 360:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 361:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      The srand() function sets its argument \c seed as the seed for a new
 362:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      sequence of pseudo-random numbers to be returned by rand().  These
 363:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      sequences are repeatable by calling srand() with the same seed value.
 364:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 365:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      If no seed value is provided, the functions are automatically seeded with
 366:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      a value of 1.
 367:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 368:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      In compliance with the C standard, these functions operate on
 369:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      \c int arguments.  Since the underlying algorithm already uses
 370:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      32-bit calculations, this causes a loss of precision.  See
 371:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      \c random() for an alternate set of functions that retains full
 372:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****      32-bit precision.
 373:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 374:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern int rand(void);
 375:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 376:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    Pseudo-random number generator seeding; see rand().
 377:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 378:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern void srand(unsigned int __seed);
 379:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 380:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 381:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    Variant of rand() that stores the context in the user-supplied
 382:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    variable located at \c ctx instead of a static library variable
 383:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    so the function becomes re-entrant.
 384:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 385:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern int rand_r(unsigned long *__ctx);
 386:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /*@}*/
 387:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 388:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /*@{*/
 389:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /** \name Non-standard (i.e. non-ISO C) functions.
 390:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****  \ingroup avr_stdlib
 391:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 392:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** /**
 393:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    \brief Convert an integer to a string.
 394:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 395:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    The function itoa() converts the integer value from \c val into an
 396:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    ASCII representation that will be stored under \c s.  The caller
 397:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    is responsible for providing sufficient storage in \c s.
 398:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 399:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    \note The minimal size of the buffer \c s depends on the choice of
 400:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    radix. For example, if the radix is 2 (binary), you need to supply a buffer
 401:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    with a minimal length of 8 * sizeof (int) + 1 characters, i.e. one
 402:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    character for each bit plus one for the string terminator. Using a larger
 403:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    radix will require a smaller minimal buffer size.
 404:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 405:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    \warning If the buffer is too small, you risk a buffer overflow.
 406:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 407:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    Conversion is done using the \c radix as base, which may be a
 408:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    number between 2 (binary conversion) and up to 36.  If \c radix
 409:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    is greater than 10, the next digit after \c '9' will be the letter
 410:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    \c 'a'.
 411:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     
 412:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     If radix is 10 and val is negative, a minus sign will be prepended.
 413:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 
 414:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****    The itoa() function returns the pointer passed as \c s.
 415:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** */
 416:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #ifdef  __DOXYGEN__
 417:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern char *itoa(int val, char *s, int radix);
 418:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** #else
 419:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** extern __inline__ __ATTR_GNU_INLINE__
 420:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** char *itoa (int __val, char *__s, int __radix)
 421:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** {
 422:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     if (!__builtin_constant_p (__radix)) {
 423:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 	extern char *__itoa (int, char *, int);
 424:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 	return __itoa (__val, __s, __radix);
 425:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     } else if (__radix < 2 || __radix > 36) {
 426:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 	*__s = 0;
 427:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 	return __s;
 428:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h ****     } else {
 429:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 	extern char *__itoa_ncheck (int, char *, unsigned char);
 430:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdlib.h **** 	return __itoa_ncheck (__val, __s, __radix);
 353               		.loc 2 430 0 discriminator 1
 354 0014 4AE0      		ldi r20,lo8(10)
 355 0016 60E0      		ldi r22,lo8(buffer)
 356 0018 70E0      		ldi r23,hi8(buffer)
 357 001a 8091 0000 		lds r24,raw_x
 358 001e 9091 0000 		lds r25,raw_x+1
 359 0022 0E94 0000 		call __itoa_ncheck
 360               	.LVL44:
 361               	.LBE17:
 362               	.LBE16:
  96:main.c        **** 		
  97:main.c        **** 		itoa(raw_x, buffer, 10);
  98:main.c        **** 		uart_puts(buffer);
 363               		.loc 1 98 0 discriminator 1
 364 0026 80E0      		ldi r24,lo8(buffer)
 365 0028 90E0      		ldi r25,hi8(buffer)
 366 002a 0E94 0000 		call uart_puts
 367               	.LVL45:
  99:main.c        **** 		uart_puts("  ");
 368               		.loc 1 99 0 discriminator 1
 369 002e 80E0      		ldi r24,lo8(.LC0)
 370 0030 90E0      		ldi r25,hi8(.LC0)
 371 0032 0E94 0000 		call uart_puts
 372               	.LVL46:
 373               	.LBB18:
 374               	.LBB19:
 375               		.loc 2 430 0 discriminator 1
 376 0036 4AE0      		ldi r20,lo8(10)
 377 0038 60E0      		ldi r22,lo8(buffer)
 378 003a 70E0      		ldi r23,hi8(buffer)
 379 003c 8091 0000 		lds r24,raw_y
 380 0040 9091 0000 		lds r25,raw_y+1
 381 0044 0E94 0000 		call __itoa_ncheck
 382               	.LVL47:
 383               	.LBE19:
 384               	.LBE18:
 100:main.c        **** 		
 101:main.c        **** 		itoa(raw_y, buffer, 10);
 102:main.c        **** 		uart_puts(buffer);
 385               		.loc 1 102 0 discriminator 1
 386 0048 80E0      		ldi r24,lo8(buffer)
 387 004a 90E0      		ldi r25,hi8(buffer)
 388 004c 0E94 0000 		call uart_puts
 389               	.LVL48:
 103:main.c        **** 		uart_puts("  ");
 390               		.loc 1 103 0 discriminator 1
 391 0050 80E0      		ldi r24,lo8(.LC0)
 392 0052 90E0      		ldi r25,hi8(.LC0)
 393 0054 0E94 0000 		call uart_puts
 394               	.LVL49:
 395               	.LBB20:
 396               	.LBB21:
 397               		.loc 2 430 0 discriminator 1
 398 0058 4AE0      		ldi r20,lo8(10)
 399 005a 60E0      		ldi r22,lo8(buffer)
 400 005c 70E0      		ldi r23,hi8(buffer)
 401 005e 8091 0000 		lds r24,raw_z
 402 0062 9091 0000 		lds r25,raw_z+1
 403 0066 0E94 0000 		call __itoa_ncheck
 404               	.LVL50:
 405               	.LBE21:
 406               	.LBE20:
 104:main.c        **** 		
 105:main.c        **** 		itoa(raw_z, buffer, 10);
 106:main.c        **** 		uart_puts(buffer);
 407               		.loc 1 106 0 discriminator 1
 408 006a 80E0      		ldi r24,lo8(buffer)
 409 006c 90E0      		ldi r25,hi8(buffer)
 410 006e 0E94 0000 		call uart_puts
 411               	.LVL51:
 107:main.c        **** 		uart_puts("  ");
 412               		.loc 1 107 0 discriminator 1
 413 0072 80E0      		ldi r24,lo8(.LC0)
 414 0074 90E0      		ldi r25,hi8(.LC0)
 415 0076 0E94 0000 		call uart_puts
 416               	.LVL52:
 108:main.c        **** 		
 109:main.c        **** 		dtostrf(headingDegrees, 6, 2, buffer);
 417               		.loc 1 109 0 discriminator 1
 418 007a 6091 0000 		lds r22,headingDegrees
 419 007e 7091 0000 		lds r23,headingDegrees+1
 420 0082 8091 0000 		lds r24,headingDegrees+2
 421 0086 9091 0000 		lds r25,headingDegrees+3
 422 008a 00E0      		ldi r16,lo8(buffer)
 423 008c 10E0      		ldi r17,hi8(buffer)
 424 008e 22E0      		ldi r18,lo8(2)
 425 0090 46E0      		ldi r20,lo8(6)
 426 0092 0E94 0000 		call dtostrf
 427               	.LVL53:
 110:main.c        **** 		uart_puts(buffer);
 428               		.loc 1 110 0 discriminator 1
 429 0096 C801      		movw r24,r16
 430 0098 0E94 0000 		call uart_puts
 431               	.LVL54:
 111:main.c        **** 		uart_puts("  \r\n");
 432               		.loc 1 111 0 discriminator 1
 433 009c 80E0      		ldi r24,lo8(.LC1)
 434 009e 90E0      		ldi r25,hi8(.LC1)
 435 00a0 0E94 0000 		call uart_puts
 436               	.LVL55:
 437               	.LBB22:
 438               	.LBB23:
 439               		.file 3 "/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 440               		.loc 3 187 0 discriminator 1
 441 00a4 2FEF      		ldi r18,lo8(3199999)
 442 00a6 83ED      		ldi r24,hi8(3199999)
 443 00a8 90E3      		ldi r25,hlo8(3199999)
 444 00aa 2150      	1:	subi r18,1
 445 00ac 8040      		sbci r24,0
 446 00ae 9040      		sbci r25,0
 447 00b0 01F4      		brne 1b
 448 00b2 00C0      		rjmp .
 449 00b4 0000      		nop
 450 00b6 00C0      		rjmp .L12
 451               	.LBE23:
 452               	.LBE22:
 453               		.cfi_endproc
 454               	.LFE15:
 456               	.global	headingDegrees
 457               		.section .bss
 460               	headingDegrees:
 461 0000 0000 0000 		.zero	4
 462               	.global	raw_z
 465               	raw_z:
 466 0004 0000      		.zero	2
 467               	.global	raw_y
 470               	raw_y:
 471 0006 0000      		.zero	2
 472               	.global	raw_x
 475               	raw_x:
 476 0008 0000      		.zero	2
 477               		.comm	buffer,6,1
 478               		.text
 479               	.Letext0:
 480               		.file 4 "/usr/local/Cellar/avr-gcc/6.2.0/avr/include/stdint.h"
 481               		.file 5 "/usr/local/Cellar/avr-gcc/6.2.0/lib/gcc/avr/6.2.0/include/stddef.h"
 482               		.file 6 "i2c_master.h"
 483               		.file 7 "/usr/local/Cellar/avr-gcc/6.2.0/avr/include/math.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:4      *ABS*:000000000000003f __SREG__
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:13     .text:0000000000000000 init_uart
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:58     .text:0000000000000030 uart_putc
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:79     .text:0000000000000038 uart_puts
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:121    .text:0000000000000050 init_HMC5883L
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:183    .text:0000000000000092 getHeading
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:475    .bss:0000000000000008 raw_x
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:465    .bss:0000000000000004 raw_z
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:470    .bss:0000000000000006 raw_y
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:460    .bss:0000000000000000 headingDegrees
/var/folders/30/nwjqnqdj1txg7flb6ybbctm80000gn/T//cccTlkGn.s:327    .text.startup:0000000000000000 main
                            *COM*:0000000000000006 buffer

UNDEFINED SYMBOLS
__udivmodsi4
i2c_start
i2c_write
i2c_stop
__floatsisf
__mulsf3
__divsf3
__addsf3
i2c_read_ack
i2c_read_nack
atan2
i2c_init
__itoa_ncheck
dtostrf
__do_copy_data
__do_clear_bss
