
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001500  00001594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001500  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800120  00800120  000015b4  2**0
                  ALLOC
  3 .stab         0000204c  00000000  00000000  000015b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001459  00000000  00000000  00003600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004a59  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004a6c  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00004aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00005228  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00005940  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000595d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__ctors_end>
       4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      24:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      28:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      34:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      48:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      4c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      54:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      58:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      5c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      60:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      64:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      68:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      6c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      70:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      74:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      78:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      7c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      80:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      84:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      88:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	00 40       	sbci	r16, 0x00	; 0
      8e:	7a 10       	cpse	r7, r10
      90:	f3 5a       	subi	r31, 0xA3	; 163
      92:	00 a0       	ldd	r0, Z+32	; 0x20
      94:	72 4e       	sbci	r23, 0xE2	; 226
      96:	18 09       	sbc	r17, r8
      98:	00 10       	cpse	r0, r0
      9a:	a5 d4       	rcall	.+2378   	; 0x9e6 <main+0xa8>
      9c:	e8 00       	.word	0x00e8	; ????
      9e:	00 e8       	ldi	r16, 0x80	; 128
      a0:	76 48       	sbci	r23, 0x86	; 134
      a2:	17 00       	.word	0x0017	; ????
      a4:	00 e4       	ldi	r16, 0x40	; 64
      a6:	0b 54       	subi	r16, 0x4B	; 75
      a8:	02 00       	.word	0x0002	; ????
      aa:	00 ca       	rjmp	.-3072   	; 0xfffff4ac <__eeprom_end+0xff7ef4ac>
      ac:	9a 3b       	cpi	r25, 0xBA	; 186
      ae:	00 00       	nop
      b0:	00 e1       	ldi	r16, 0x10	; 16
      b2:	f5 05       	cpc	r31, r5
      b4:	00 00       	nop
      b6:	80 96       	adiw	r24, 0x20	; 32
      b8:	98 00       	.word	0x0098	; ????
      ba:	00 00       	nop
      bc:	40 42       	sbci	r20, 0x20	; 32
      be:	0f 00       	.word	0x000f	; ????
      c0:	00 00       	nop
      c2:	a0 86       	std	Z+8, r10	; 0x08
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	10 27       	eor	r17, r16
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	e8 03       	fmulsu	r22, r16
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	64 00       	.word	0x0064	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	0a 00       	.word	0x000a	; ????
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	01 00       	.word	0x0001	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	2c 76       	andi	r18, 0x6C	; 108
      e8:	d8 88       	ldd	r13, Y+16	; 0x10
      ea:	dc 67       	ori	r29, 0x7C	; 124
      ec:	4f 08       	sbc	r4, r15
      ee:	23 df       	rcall	.-442    	; 0xffffff36 <__eeprom_end+0xff7eff36>
      f0:	c1 df       	rcall	.-126    	; 0x74 <__SREG__+0x35>
      f2:	ae 59       	subi	r26, 0x9E	; 158
      f4:	e1 b1       	in	r30, 0x01	; 1
      f6:	b7 96       	adiw	r30, 0x27	; 39
      f8:	e5 e3       	ldi	r30, 0x35	; 53
      fa:	e4 53       	subi	r30, 0x34	; 52
      fc:	c6 3a       	cpi	r28, 0xA6	; 166
      fe:	e6 51       	subi	r30, 0x16	; 22
     100:	99 76       	andi	r25, 0x69	; 105
     102:	96 e8       	ldi	r25, 0x86	; 134
     104:	e6 c2       	rjmp	.+1484   	; 0x6d2 <move+0xca>
     106:	84 26       	eor	r8, r20
     108:	eb 89       	ldd	r30, Y+19	; 0x13
     10a:	8c 9b       	sbis	0x11, 4	; 17
     10c:	62 ed       	ldi	r22, 0xD2	; 210
     10e:	40 7c       	andi	r20, 0xC0	; 192
     110:	6f fc       	.word	0xfc6f	; ????
     112:	ef bc       	out	0x2f, r14	; 47
     114:	9c 9f       	mul	r25, r28
     116:	40 f2       	brcs	.-112    	; 0xa8 <__trampolines_end+0x1c>
     118:	ba a5       	ldd	r27, Y+42	; 0x2a
     11a:	6f a5       	ldd	r22, Y+47	; 0x2f
     11c:	f4 90       	lpm	r15, Z
     11e:	05 5a       	subi	r16, 0xA5	; 165
     120:	2a f7       	brpl	.-54     	; 0xec <__trampolines_end+0x60>
     122:	5c 93       	st	X, r21
     124:	6b 6c       	ori	r22, 0xCB	; 203
     126:	f9 67       	ori	r31, 0x79	; 121
     128:	6d c1       	rjmp	.+730    	; 0x404 <USART_Receive_String+0x12>
     12a:	1b fc       	.word	0xfc1b	; ????
     12c:	e0 e4       	ldi	r30, 0x40	; 64
     12e:	0d 47       	sbci	r16, 0x7D	; 125
     130:	fe f5       	brtc	.+126    	; 0x1b0 <__do_clear_bss+0x4>
     132:	20 e6       	ldi	r18, 0x60	; 96
     134:	b5 00       	.word	0x00b5	; ????
     136:	d0 ed       	ldi	r29, 0xD0	; 208
     138:	90 2e       	mov	r9, r16
     13a:	03 00       	.word	0x0003	; ????
     13c:	94 35       	cpi	r25, 0x54	; 84
     13e:	77 05       	cpc	r23, r7
     140:	00 80       	ld	r0, Z
     142:	84 1e       	adc	r8, r20
     144:	08 00       	.word	0x0008	; ????
     146:	00 20       	and	r0, r0
     148:	4e 0a       	sbc	r4, r30
     14a:	00 00       	nop
     14c:	00 c8       	rjmp	.-4096   	; 0xfffff14e <__eeprom_end+0xff7ef14e>
     14e:	0c 33       	cpi	r16, 0x3C	; 60
     150:	33 33       	cpi	r19, 0x33	; 51
     152:	33 0f       	add	r19, r19
     154:	98 6e       	ori	r25, 0xE8	; 232
     156:	12 83       	std	Z+2, r17	; 0x02
     158:	11 41       	sbci	r17, 0x11	; 17
     15a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     15c:	21 14       	cp	r2, r1
     15e:	89 3b       	cpi	r24, 0xB9	; 185
     160:	e6 55       	subi	r30, 0x56	; 86
     162:	16 cf       	rjmp	.-468    	; 0xffffff90 <__eeprom_end+0xff7eff90>
     164:	fe e6       	ldi	r31, 0x6E	; 110
     166:	db 18       	sub	r13, r11
     168:	d1 84       	ldd	r13, Z+9	; 0x09
     16a:	4b 38       	cpi	r20, 0x8B	; 139
     16c:	1b f7       	brvc	.-58     	; 0x134 <__trampolines_end+0xa8>
     16e:	7c 1d       	adc	r23, r12
     170:	90 1d       	adc	r25, r0
     172:	a4 bb       	out	0x14, r26	; 20
     174:	e4 24       	eor	r14, r4
     176:	20 32       	cpi	r18, 0x20	; 32
     178:	84 72       	andi	r24, 0x24	; 36
     17a:	5e 22       	and	r5, r30
     17c:	81 00       	.word	0x0081	; ????
     17e:	c9 f1       	breq	.+114    	; 0x1f2 <read_adc+0x8>
     180:	24 ec       	ldi	r18, 0xC4	; 196
     182:	a1 e5       	ldi	r26, 0x51	; 81
     184:	3d 27       	eor	r19, r29

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d0 e1       	ldi	r29, 0x10	; 16
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_copy_data>:
     192:	11 e0       	ldi	r17, 0x01	; 1
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	e0 e0       	ldi	r30, 0x00	; 0
     19a:	f5 e1       	ldi	r31, 0x15	; 21
     19c:	00 e0       	ldi	r16, 0x00	; 0
     19e:	0b bf       	out	0x3b, r16	; 59
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x14>
     1a2:	07 90       	elpm	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	a0 32       	cpi	r26, 0x20	; 32
     1a8:	b1 07       	cpc	r27, r17
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0x10>

000001ac <__do_clear_bss>:
     1ac:	21 e0       	ldi	r18, 0x01	; 1
     1ae:	a0 e2       	ldi	r26, 0x20	; 32
     1b0:	b1 e0       	ldi	r27, 0x01	; 1
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
     1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
     1b6:	a2 32       	cpi	r26, 0x22	; 34
     1b8:	b2 07       	cpc	r27, r18
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
     1bc:	0e 94 9f 04 	call	0x93e	; 0x93e <main>
     1c0:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <_exit>

000001c4 <__bad_interrupt>:
     1c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c8 <enable_adc>:

void enable_adc(int pin){
	if (pin > 7 || pin < 0){
		//return;
	}
	DDRF = 0x00;
     1c8:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0x00;
     1cc:	10 92 62 00 	sts	0x0062, r1
	//internally wire REFSn bits in the ADMUX register to connect VREF 
		//to internal 2.56v reference --> 0.0025 v/step
	ADMUX = (1 << REFS0) | (1 << REFS1);
     1d0:	90 ec       	ldi	r25, 0xC0	; 192
     1d2:	97 b9       	out	0x07, r25	; 7
	//Set analog input channel by writing to the MUX in ADMUX
	//Single ended input, gain is not allowed
	ADMUX |= pin;
     1d4:	97 b1       	in	r25, 0x07	; 7
     1d6:	89 2b       	or	r24, r25
     1d8:	87 b9       	out	0x07, r24	; 7
	
	//Default Right Adjusted

	//Set ADEN in ADSCRA to enable ADC
	ADCSRA = (1 << ADEN);
     1da:	80 e8       	ldi	r24, 0x80	; 128
     1dc:	86 b9       	out	0x06, r24	; 6
	//Set the ADC Clock frequency prescaler to 128 --> 125kHz
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     1de:	86 b1       	in	r24, 0x06	; 6
     1e0:	87 60       	ori	r24, 0x07	; 7
     1e2:	86 b9       	out	0x06, r24	; 6
	//Set free running mode
	//ADCSRA |= (1 << ADFR);
	//Enable the ADC Interrupt Flag
	ADCSRA |= (1 << ADIE);
     1e4:	33 9a       	sbi	0x06, 3	; 6
	//Start first conversion by setting ADSC in ADCSRA
	ADCSRA |= (1 << ADSC);
     1e6:	36 9a       	sbi	0x06, 6	; 6
     1e8:	08 95       	ret

000001ea <read_adc>:

}
int read_adc(int pin){
     1ea:	fc 01       	movw	r30, r24
	int data;
	if (pin > 7){
     1ec:	08 97       	sbiw	r24, 0x08	; 8
     1ee:	fc f4       	brge	.+62     	; 0x22e <read_adc+0x44>
     1f0:	40 e0       	ldi	r20, 0x00	; 0
     1f2:	50 e0       	ldi	r21, 0x00	; 0
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
		ADMUX &= ~(1 << i);
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	97 b1       	in	r25, 0x07	; 7
     1fa:	9b 01       	movw	r18, r22
     1fc:	04 2e       	mov	r0, r20
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <read_adc+0x18>
     200:	22 0f       	add	r18, r18
     202:	0a 94       	dec	r0
     204:	ea f7       	brpl	.-6      	; 0x200 <read_adc+0x16>
     206:	20 95       	com	r18
     208:	29 23       	and	r18, r25
     20a:	27 b9       	out	0x07, r18	; 7
	if (pin > 7){
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
     20c:	4f 5f       	subi	r20, 0xFF	; 255
     20e:	5f 4f       	sbci	r21, 0xFF	; 255
     210:	45 30       	cpi	r20, 0x05	; 5
     212:	51 05       	cpc	r21, r1
     214:	89 f7       	brne	.-30     	; 0x1f8 <read_adc+0xe>
		ADMUX &= ~(1 << i);
	}
	//set the new mux bit
	ADMUX |= pin;
     216:	97 b1       	in	r25, 0x07	; 7
     218:	89 2f       	mov	r24, r25
     21a:	8e 2b       	or	r24, r30
     21c:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
     21e:	36 9a       	sbi	0x06, 6	; 6
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
     220:	34 9b       	sbis	0x06, 4	; 6
     222:	fe cf       	rjmp	.-4      	; 0x220 <read_adc+0x36>
	data = ADCL;
     224:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);
     226:	25 b1       	in	r18, 0x05	; 5
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	92 2b       	or	r25, r18
     22c:	08 95       	ret

}
int read_adc(int pin){
	int data;
	if (pin > 7){
		return -1;
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	9f ef       	ldi	r25, 0xFF	; 255
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
	data = ADCL;
	data |= (ADCH << 8);
	return data;
}
     232:	08 95       	ret

00000234 <get_voltage>:
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
     234:	88 30       	cpi	r24, 0x08	; 8
     236:	91 05       	cpc	r25, r1
     238:	20 f0       	brcs	.+8      	; 0x242 <get_voltage+0xe>
		return 0;
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	cb 01       	movw	r24, r22
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
}
     240:	08 95       	ret
}
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
		return 0;
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
     242:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_adc>
     246:	bc 01       	movw	r22, r24
     248:	99 0f       	add	r25, r25
     24a:	88 0b       	sbc	r24, r24
     24c:	99 0b       	sbc	r25, r25
     24e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatsisf>
     252:	2a e0       	ldi	r18, 0x0A	; 10
     254:	37 ed       	ldi	r19, 0xD7	; 215
     256:	43 e2       	ldi	r20, 0x23	; 35
     258:	5b e3       	ldi	r21, 0x3B	; 59
     25a:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
     25e:	08 95       	ret

00000260 <get_depth_mpa>:
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_adc>
     268:	bc 01       	movw	r22, r24
     26a:	99 0f       	add	r25, r25
     26c:	88 0b       	sbc	r24, r24
     26e:	99 0b       	sbc	r25, r25
     270:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatsisf>
     274:	2a e0       	ldi	r18, 0x0A	; 10
     276:	37 ed       	ldi	r19, 0xD7	; 215
     278:	43 e2       	ldi	r20, 0x23	; 35
     27a:	5b e3       	ldi	r21, 0x3B	; 59
     27c:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
}
double get_depth_mpa(){
	return 1.2 * (get_voltage(PSENSOR_PIN) - PSENSOR_MIN)/(4.5-PSENSOR_MIN);
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	5f e3       	ldi	r21, 0x3F	; 63
     288:	0e 94 99 05 	call	0xb32	; 0xb32 <__subsf3>
     28c:	2a e9       	ldi	r18, 0x9A	; 154
     28e:	39 e9       	ldi	r19, 0x99	; 153
     290:	49 e9       	ldi	r20, 0x99	; 153
     292:	5f e3       	ldi	r21, 0x3F	; 63
     294:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	40 e8       	ldi	r20, 0x80	; 128
     29e:	5e e3       	ldi	r21, 0x3E	; 62
     2a0:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
}
     2a4:	08 95       	ret

000002a6 <get_depth_feet>:
}
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
		return 0;
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_adc>
     2ae:	bc 01       	movw	r22, r24
     2b0:	99 0f       	add	r25, r25
     2b2:	88 0b       	sbc	r24, r24
     2b4:	99 0b       	sbc	r25, r25
     2b6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatsisf>
     2ba:	2a e0       	ldi	r18, 0x0A	; 10
     2bc:	37 ed       	ldi	r19, 0xD7	; 215
     2be:	43 e2       	ldi	r20, 0x23	; 35
     2c0:	5b e3       	ldi	r21, 0x3B	; 59
     2c2:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
}
double get_depth_mpa(){
	return 1.2 * (get_voltage(PSENSOR_PIN) - PSENSOR_MIN)/(4.5-PSENSOR_MIN);
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	5f e3       	ldi	r21, 0x3F	; 63
     2ce:	0e 94 99 05 	call	0xb32	; 0xb32 <__subsf3>
     2d2:	2a e9       	ldi	r18, 0x9A	; 154
     2d4:	39 e9       	ldi	r19, 0x99	; 153
     2d6:	49 e9       	ldi	r20, 0x99	; 153
     2d8:	5f e3       	ldi	r21, 0x3F	; 63
     2da:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	40 e8       	ldi	r20, 0x80	; 128
     2e4:	5e e3       	ldi	r21, 0x3E	; 62
     2e6:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
}
double get_depth_feet(){
	return 334.56229215 * get_depth_mpa();
     2ea:	29 ef       	ldi	r18, 0xF9	; 249
     2ec:	37 e4       	ldi	r19, 0x47	; 71
     2ee:	47 ea       	ldi	r20, 0xA7	; 167
     2f0:	53 e4       	ldi	r21, 0x43	; 67
     2f2:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
}
     2f6:	08 95       	ret

000002f8 <init_esc>:
void init_esc(){
    PORTB |= (1 << 4);
     2f8:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fa:	8f e6       	ldi	r24, 0x6F	; 111
     2fc:	97 e1       	ldi	r25, 0x17	; 23
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <init_esc+0x6>
     302:	00 c0       	rjmp	.+0      	; 0x304 <init_esc+0xc>
     304:	00 00       	nop
    _delay_us(STOP);
    PORTB &= ~(1 << 4);
     306:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     308:	9f ef       	ldi	r25, 0xFF	; 255
     30a:	23 ed       	ldi	r18, 0xD3	; 211
     30c:	80 e3       	ldi	r24, 0x30	; 48
     30e:	91 50       	subi	r25, 0x01	; 1
     310:	20 40       	sbci	r18, 0x00	; 0
     312:	80 40       	sbci	r24, 0x00	; 0
     314:	e1 f7       	brne	.-8      	; 0x30e <init_esc+0x16>
     316:	00 c0       	rjmp	.+0      	; 0x318 <init_esc+0x20>
     318:	00 00       	nop
     31a:	08 95       	ret

0000031c <set_16bitPWM1>:
    _delay_ms(1000);
}

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
     31c:	8f b5       	in	r24, 0x2f	; 47
     31e:	80 68       	ori	r24, 0x80	; 128
     320:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
     322:	8f b5       	in	r24, 0x2f	; 47
     324:	80 62       	ori	r24, 0x20	; 32
     326:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
     328:	8f b5       	in	r24, 0x2f	; 47
     32a:	88 60       	ori	r24, 0x08	; 8
     32c:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
     32e:	8f b5       	in	r24, 0x2f	; 47
     330:	82 60       	ori	r24, 0x02	; 2
     332:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
     334:	8e b5       	in	r24, 0x2e	; 46
     336:	88 61       	ori	r24, 0x18	; 24
     338:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
     33a:	8e b5       	in	r24, 0x2e	; 46
     33c:	82 60       	ori	r24, 0x02	; 2
     33e:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     340:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     342:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     344:	21 e0       	ldi	r18, 0x01	; 1
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	3d bd       	out	0x2d, r19	; 45
     34a:	2c bd       	out	0x2c, r18	; 44
    sei();
     34c:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     34e:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
     350:	8f ef       	ldi	r24, 0xFF	; 255
     352:	9f ef       	ldi	r25, 0xFF	; 255
     354:	97 bd       	out	0x27, r25	; 39
     356:	86 bd       	out	0x26, r24	; 38
     358:	2f ef       	ldi	r18, 0xFF	; 255
     35a:	81 ee       	ldi	r24, 0xE1	; 225
     35c:	94 e0       	ldi	r25, 0x04	; 4
     35e:	21 50       	subi	r18, 0x01	; 1
     360:	80 40       	sbci	r24, 0x00	; 0
     362:	90 40       	sbci	r25, 0x00	; 0
     364:	e1 f7       	brne	.-8      	; 0x35e <set_16bitPWM1+0x42>
     366:	00 c0       	rjmp	.+0      	; 0x368 <set_16bitPWM1+0x4c>
     368:	00 00       	nop
     36a:	08 95       	ret

0000036c <TIM16_WriteTCNT1>:
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
     36c:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     36e:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     370:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     372:	3d bd       	out	0x2d, r19	; 45
     374:	2c bd       	out	0x2c, r18	; 44
    sei();
     376:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     378:	9f bf       	out	0x3f, r25	; 63
     37a:	08 95       	ret

0000037c <USART_Init>:
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     37c:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
     380:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     384:	88 e1       	ldi	r24, 0x18	; 24
     386:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 1stop bit */ 
    UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
     38a:	86 e0       	ldi	r24, 0x06	; 6
     38c:	80 93 9d 00 	sts	0x009D, r24
     390:	2f ef       	ldi	r18, 0xFF	; 255
     392:	81 ee       	ldi	r24, 0xE1	; 225
     394:	94 e0       	ldi	r25, 0x04	; 4
     396:	21 50       	subi	r18, 0x01	; 1
     398:	80 40       	sbci	r24, 0x00	; 0
     39a:	90 40       	sbci	r25, 0x00	; 0
     39c:	e1 f7       	brne	.-8      	; 0x396 <USART_Init+0x1a>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <USART_Init+0x24>
     3a0:	00 00       	nop
     3a2:	08 95       	ret

000003a4 <USART_Transmit>:

    _delay_ms(100);
}
void USART_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     3a4:	90 91 9b 00 	lds	r25, 0x009B
     3a8:	95 ff       	sbrs	r25, 5
     3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <USART_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     3ac:	80 93 9c 00 	sts	0x009C, r24
     3b0:	08 95       	ret

000003b2 <USART_send_string>:
}

void USART_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 81       	ld	r18, Z
     3b6:	22 23       	and	r18, r18
     3b8:	51 f0       	breq	.+20     	; 0x3ce <USART_send_string+0x1c>
     3ba:	31 96       	adiw	r30, 0x01	; 1

    _delay_ms(100);
}
void USART_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     3bc:	90 91 9b 00 	lds	r25, 0x009B
     3c0:	95 ff       	sbrs	r25, 5
     3c2:	fc cf       	rjmp	.-8      	; 0x3bc <USART_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     3c4:	20 93 9c 00 	sts	0x009C, r18
}

void USART_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     3c8:	21 91       	ld	r18, Z+
     3ca:	21 11       	cpse	r18, r1
     3cc:	f7 cf       	rjmp	.-18     	; 0x3bc <USART_send_string+0xa>
     3ce:	08 95       	ret

000003d0 <USART_Receive>:
        USART_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART_Receive(void){
     3d0:	80 e5       	ldi	r24, 0x50	; 80
     3d2:	93 ec       	ldi	r25, 0xC3	; 195
     3d4:	05 c0       	rjmp	.+10     	; 0x3e0 <USART_Receive+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d6:	20 ea       	ldi	r18, 0xA0	; 160
     3d8:	2a 95       	dec	r18
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <USART_Receive+0x8>
     3dc:	01 97       	sbiw	r24, 0x01	; 1
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout) {
     3de:	39 f0       	breq	.+14     	; 0x3ee <USART_Receive+0x1e>
        if((UCSR1A & (1<<RXC1))){
     3e0:	20 91 9b 00 	lds	r18, 0x009B
     3e4:	27 ff       	sbrs	r18, 7
     3e6:	f7 cf       	rjmp	.-18     	; 0x3d6 <USART_Receive+0x6>
            /* Get and return received data from buffer */ 
            return UDR1;
     3e8:	80 91 9c 00 	lds	r24, 0x009C
     3ec:	08 95       	ret
        --timeout;
    }
    //while (!(UCSR1A & (1 << RXC1))){
    //}

    return 255;
     3ee:	8f ef       	ldi	r24, 0xFF	; 255
}
     3f0:	08 95       	ret

000003f2 <USART_Receive_String>:

void USART_Receive_String(unsigned char *str){
     3f2:	dc 01       	movw	r26, r24
     3f4:	fc 01       	movw	r30, r24
    int i = 0;
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	20 e5       	ldi	r18, 0x50	; 80
     3fc:	33 ec       	ldi	r19, 0xC3	; 195
     3fe:	06 c0       	rjmp	.+12     	; 0x40c <USART_Receive_String+0x1a>
     400:	80 ea       	ldi	r24, 0xA0	; 160
     402:	8a 95       	dec	r24
     404:	f1 f7       	brne	.-4      	; 0x402 <USART_Receive_String+0x10>
     406:	21 50       	subi	r18, 0x01	; 1
     408:	31 09       	sbc	r19, r1

unsigned char USART_Receive(void){
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout) {
     40a:	99 f0       	breq	.+38     	; 0x432 <USART_Receive_String+0x40>
        if((UCSR1A & (1<<RXC1))){
     40c:	90 91 9b 00 	lds	r25, 0x009B
     410:	97 ff       	sbrs	r25, 7
     412:	f6 cf       	rjmp	.-20     	; 0x400 <USART_Receive_String+0xe>
            /* Get and return received data from buffer */ 
            return UDR1;
     414:	90 91 9c 00 	lds	r25, 0x009C

void USART_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     418:	9e 37       	cpi	r25, 0x7E	; 126
     41a:	b1 f0       	breq	.+44     	; 0x448 <USART_Receive_String+0x56>
        if (c == 255){
     41c:	9f 3f       	cpi	r25, 0xFF	; 255
     41e:	49 f0       	breq	.+18     	; 0x432 <USART_Receive_String+0x40>
            str[1] = 50;
            str[2] = 50;
            str[3] = '\0';
            return;
        }
        str[i] = c;
     420:	91 93       	st	Z+, r25
        //char2lcd(c);
        //string2lcd(str);
        ++i;
     422:	4f 5f       	subi	r20, 0xFF	; 255
     424:	5f 4f       	sbci	r21, 0xFF	; 255
        if (i >= MAX_STRING_SIZE){
     426:	40 31       	cpi	r20, 0x10	; 16
     428:	51 05       	cpc	r21, r1
     42a:	39 f7       	brne	.-50     	; 0x3fa <USART_Receive_String+0x8>
            str[MAX_STRING_SIZE - 1] = '\0';
     42c:	1f 96       	adiw	r26, 0x0f	; 15
     42e:	1c 92       	st	X, r1

            return;
     430:	08 95       	ret
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255){
            str[0] = 50;
     432:	82 e3       	ldi	r24, 0x32	; 50
     434:	8c 93       	st	X, r24
            str[1] = 50;
     436:	11 96       	adiw	r26, 0x01	; 1
     438:	8c 93       	st	X, r24
     43a:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
     43c:	12 96       	adiw	r26, 0x02	; 2
     43e:	8c 93       	st	X, r24
     440:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = '\0';
     442:	13 96       	adiw	r26, 0x03	; 3
     444:	1c 92       	st	X, r1
            return;
     446:	08 95       	ret
            str[MAX_STRING_SIZE - 1] = '\0';

            return;
        }
    }
    str[i] = '\0';
     448:	a4 0f       	add	r26, r20
     44a:	b5 1f       	adc	r27, r21
     44c:	1c 92       	st	X, r1
     44e:	08 95       	ret

00000450 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     450:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
     454:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     456:	88 e1       	ldi	r24, 0x18	; 24
     458:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 1stop bit */ 
    UCSR0C = (3<<UCSZ00);
     45a:	86 e0       	ldi	r24, 0x06	; 6
     45c:	80 93 95 00 	sts	0x0095, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     460:	2f ef       	ldi	r18, 0xFF	; 255
     462:	81 ee       	ldi	r24, 0xE1	; 225
     464:	94 e0       	ldi	r25, 0x04	; 4
     466:	21 50       	subi	r18, 0x01	; 1
     468:	80 40       	sbci	r24, 0x00	; 0
     46a:	90 40       	sbci	r25, 0x00	; 0
     46c:	e1 f7       	brne	.-8      	; 0x466 <USART0_Init+0x16>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <USART0_Init+0x20>
     470:	00 00       	nop
     472:	08 95       	ret

00000474 <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     474:	5d 9b       	sbis	0x0b, 5	; 11
     476:	fe cf       	rjmp	.-4      	; 0x474 <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     478:	8c b9       	out	0x0c, r24	; 12
     47a:	08 95       	ret

0000047c <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
     47c:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
     47e:	90 81       	ld	r25, Z
     480:	99 23       	and	r25, r25
     482:	39 f0       	breq	.+14     	; 0x492 <USART0_send_string+0x16>
     484:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     486:	5d 9b       	sbis	0x0b, 5	; 11
     488:	fe cf       	rjmp	.-4      	; 0x486 <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     48a:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     48c:	91 91       	ld	r25, Z+
     48e:	91 11       	cpse	r25, r1
     490:	fa cf       	rjmp	.-12     	; 0x486 <USART0_send_string+0xa>
     492:	08 95       	ret

00000494 <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
     494:	80 e5       	ldi	r24, 0x50	; 80
     496:	93 ec       	ldi	r25, 0xC3	; 195
     498:	06 c0       	rjmp	.+12     	; 0x4a6 <USART0_Receive+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     49a:	25 e3       	ldi	r18, 0x35	; 53
     49c:	2a 95       	dec	r18
     49e:	f1 f7       	brne	.-4      	; 0x49c <USART0_Receive+0x8>
     4a0:	00 00       	nop
     4a2:	01 97       	sbiw	r24, 0x01	; 1
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout > 0) {
     4a4:	21 f0       	breq	.+8      	; 0x4ae <USART0_Receive+0x1a>
        if((UCSR0A & (1<<RXC0))){
     4a6:	5f 9b       	sbis	0x0b, 7	; 11
     4a8:	f8 cf       	rjmp	.-16     	; 0x49a <USART0_Receive+0x6>
            /* Get and return received data from buffer */ 
            return UDR0;
     4aa:	8c b1       	in	r24, 0x0c	; 12
     4ac:	08 95       	ret
        //clear_display();
        //string2lcd((unsigned char *)utoa((unsigned int)timeout,buffer,10));
        _delay_us(10);
        --timeout;
    }
    return 255;
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
}
     4b0:	08 95       	ret

000004b2 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
     4b2:	dc 01       	movw	r26, r24
     4b4:	fc 01       	movw	r30, r24
    int i = 0;
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	20 e5       	ldi	r18, 0x50	; 80
     4bc:	33 ec       	ldi	r19, 0xC3	; 195
     4be:	07 c0       	rjmp	.+14     	; 0x4ce <USART0_Receive_String+0x1c>
     4c0:	85 e3       	ldi	r24, 0x35	; 53
     4c2:	8a 95       	dec	r24
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <USART0_Receive_String+0x10>
     4c6:	00 00       	nop
     4c8:	21 50       	subi	r18, 0x01	; 1
     4ca:	31 09       	sbc	r19, r1

unsigned char USART0_Receive(void){
    uint16_t timeout = 50000;
    //unsigned char buffer[16];
    /* Wait for data to be received or for timeout*/ 
    while (timeout > 0) {
     4cc:	81 f0       	breq	.+32     	; 0x4ee <USART0_Receive_String+0x3c>
        if((UCSR0A & (1<<RXC0))){
     4ce:	5f 9b       	sbis	0x0b, 7	; 11
     4d0:	f7 cf       	rjmp	.-18     	; 0x4c0 <USART0_Receive_String+0xe>
            /* Get and return received data from buffer */ 
            return UDR0;
     4d2:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     4d4:	9e 37       	cpi	r25, 0x7E	; 126
     4d6:	b1 f0       	breq	.+44     	; 0x504 <USART0_Receive_String+0x52>
        if (c == 255){
     4d8:	9f 3f       	cpi	r25, 0xFF	; 255
     4da:	49 f0       	breq	.+18     	; 0x4ee <USART0_Receive_String+0x3c>
            str[1] = 50;
            str[2] = 50;
            str[3] = '\0';
            return;
        }
        str[i] = c;
     4dc:	91 93       	st	Z+, r25
        //char2lcd(c);
        //string2lcd(str);
        ++i;
     4de:	4f 5f       	subi	r20, 0xFF	; 255
     4e0:	5f 4f       	sbci	r21, 0xFF	; 255
        if (i >= MAX_STRING_SIZE){
     4e2:	40 31       	cpi	r20, 0x10	; 16
     4e4:	51 05       	cpc	r21, r1
     4e6:	49 f7       	brne	.-46     	; 0x4ba <USART0_Receive_String+0x8>
            str[MAX_STRING_SIZE - 1] = '\0';
     4e8:	1f 96       	adiw	r26, 0x0f	; 15
     4ea:	1c 92       	st	X, r1

            return;
     4ec:	08 95       	ret
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255){
            str[0] = 50;
     4ee:	82 e3       	ldi	r24, 0x32	; 50
     4f0:	8c 93       	st	X, r24
            str[1] = 50;
     4f2:	11 96       	adiw	r26, 0x01	; 1
     4f4:	8c 93       	st	X, r24
     4f6:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
     4f8:	12 96       	adiw	r26, 0x02	; 2
     4fa:	8c 93       	st	X, r24
     4fc:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = '\0';
     4fe:	13 96       	adiw	r26, 0x03	; 3
     500:	1c 92       	st	X, r1
            return;
     502:	08 95       	ret
            str[MAX_STRING_SIZE - 1] = '\0';

            return;
        }
    }
    str[i] = '\0';
     504:	a4 0f       	add	r26, r20
     506:	b5 1f       	adc	r27, r21
     508:	1c 92       	st	X, r1
     50a:	08 95       	ret

0000050c <strobe_lcd>:

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     50c:	e2 e6       	ldi	r30, 0x62	; 98
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	80 81       	ld	r24, Z
     512:	88 60       	ori	r24, 0x08	; 8
     514:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     516:	80 81       	ld	r24, Z
     518:	87 7f       	andi	r24, 0xF7	; 247
     51a:	80 83       	st	Z, r24
     51c:	08 95       	ret

0000051e <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     51e:	77 9b       	sbis	0x0e, 7	; 14
     520:	fe cf       	rjmp	.-4      	; 0x51e <clear_display>
    SPDR = 0x00;    //command, not data
     522:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     524:	77 9b       	sbis	0x0e, 7	; 14
     526:	fe cf       	rjmp	.-4      	; 0x524 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     52c:	77 9b       	sbis	0x0e, 7	; 14
     52e:	fe cf       	rjmp	.-4      	; 0x52c <clear_display+0xe>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     530:	80 91 62 00 	lds	r24, 0x0062
     534:	88 60       	ori	r24, 0x08	; 8
     536:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     53a:	80 91 62 00 	lds	r24, 0x0062
     53e:	87 7f       	andi	r24, 0xF7	; 247
     540:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     544:	8f e9       	ldi	r24, 0x9F	; 159
     546:	98 e2       	ldi	r25, 0x28	; 40
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <clear_display+0x2a>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <clear_display+0x30>
     54e:	00 00       	nop
     550:	08 95       	ret

00000552 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     552:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     554:	77 9b       	sbis	0x0e, 7	; 14
     556:	fe cf       	rjmp	.-4      	; 0x554 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     558:	80 ec       	ldi	r24, 0xC0	; 192
     55a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     55c:	77 9b       	sbis	0x0e, 7	; 14
     55e:	fe cf       	rjmp	.-4      	; 0x55c <home_line2+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     560:	80 91 62 00 	lds	r24, 0x0062
     564:	88 60       	ori	r24, 0x08	; 8
     566:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     56a:	80 91 62 00 	lds	r24, 0x0062
     56e:	87 7f       	andi	r24, 0xF7	; 247
     570:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     574:	85 ec       	ldi	r24, 0xC5	; 197
     576:	8a 95       	dec	r24
     578:	f1 f7       	brne	.-4      	; 0x576 <home_line2+0x24>
     57a:	00 00       	nop
     57c:	08 95       	ret

0000057e <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     582:	77 9b       	sbis	0x0e, 7	; 14
     584:	fe cf       	rjmp	.-4      	; 0x582 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     586:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     588:	77 9b       	sbis	0x0e, 7	; 14
     58a:	fe cf       	rjmp	.-4      	; 0x588 <char2lcd+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     58c:	80 91 62 00 	lds	r24, 0x0062
     590:	88 60       	ori	r24, 0x08	; 8
     592:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     596:	80 91 62 00 	lds	r24, 0x0062
     59a:	87 7f       	andi	r24, 0xF7	; 247
     59c:	80 93 62 00 	sts	0x0062, r24
     5a0:	85 ec       	ldi	r24, 0xC5	; 197
     5a2:	8a 95       	dec	r24
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <char2lcd+0x24>
     5a6:	00 00       	nop
     5a8:	08 95       	ret

000005aa <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	fc 01       	movw	r30, r24
     5b0:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     5b6:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5b8:	77 9b       	sbis	0x0e, 7	; 14
     5ba:	fe cf       	rjmp	.-4      	; 0x5b8 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     5bc:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5be:	77 9b       	sbis	0x0e, 7	; 14
     5c0:	fe cf       	rjmp	.-4      	; 0x5be <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     5c2:	8d 91       	ld	r24, X+
     5c4:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     5c6:	77 9b       	sbis	0x0e, 7	; 14
     5c8:	fe cf       	rjmp	.-4      	; 0x5c6 <string2lcd+0x1c>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     5ca:	90 91 62 00 	lds	r25, 0x0062
     5ce:	98 60       	ori	r25, 0x08	; 8
     5d0:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     5d4:	90 91 62 00 	lds	r25, 0x0062
     5d8:	97 7f       	andi	r25, 0xF7	; 247
     5da:	90 93 62 00 	sts	0x0062, r25
     5de:	85 ec       	ldi	r24, 0xC5	; 197
     5e0:	8a 95       	dec	r24
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <string2lcd+0x36>
     5e4:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     5e6:	4f 5f       	subi	r20, 0xFF	; 255
     5e8:	5f 4f       	sbci	r21, 0xFF	; 255
     5ea:	ef 01       	movw	r28, r30
     5ec:	09 90       	ld	r0, Y+
     5ee:	00 20       	and	r0, r0
     5f0:	e9 f7       	brne	.-6      	; 0x5ec <string2lcd+0x42>
     5f2:	9e 01       	movw	r18, r28
     5f4:	2e 1b       	sub	r18, r30
     5f6:	3f 0b       	sbc	r19, r31
     5f8:	22 50       	subi	r18, 0x02	; 2
     5fa:	31 09       	sbc	r19, r1
     5fc:	24 17       	cp	r18, r20
     5fe:	35 07       	cpc	r19, r21
     600:	d8 f6       	brcc	.-74     	; 0x5b8 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
     608:	4f 92       	push	r4
     60a:	5f 92       	push	r5
     60c:	6f 92       	push	r6
     60e:	7f 92       	push	r7
     610:	8f 92       	push	r8
     612:	9f 92       	push	r9
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	64 97       	sbiw	r28, 0x14	; 20
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
     638:	69 8b       	std	Y+17, r22	; 0x11
     63a:	7a 8b       	std	Y+18, r23	; 0x12
     63c:	8b 8b       	std	Y+19, r24	; 0x13
     63e:	9c 8b       	std	Y+20, r25	; 0x14
     640:	29 01       	movw	r4, r18
     642:	3a 01       	movw	r6, r20
     644:	47 01       	movw	r8, r14
     646:	58 01       	movw	r10, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	40 ef       	ldi	r20, 0xF0	; 240
     64e:	51 e4       	ldi	r21, 0x41	; 65
     650:	0e 94 06 06 	call	0xc0c	; 0xc0c <__cmpsf2>
     654:	87 fd       	sbrc	r24, 7
     656:	a2 c0       	rjmp	.+324    	; 0x79c <move+0x194>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	4c e8       	ldi	r20, 0x8C	; 140
     65e:	52 e4       	ldi	r21, 0x42	; 66
     660:	69 89       	ldd	r22, Y+17	; 0x11
     662:	7a 89       	ldd	r23, Y+18	; 0x12
     664:	8b 89       	ldd	r24, Y+19	; 0x13
     666:	9c 89       	ldd	r25, Y+20	; 0x14
     668:	0e 94 5e 07 	call	0xebc	; 0xebc <__gesf2>
     66c:	18 16       	cp	r1, r24
     66e:	0c f0       	brlt	.+2      	; 0x672 <move+0x6a>
     670:	9a c0       	rjmp	.+308    	; 0x7a6 <move+0x19e>
     672:	28 ef       	ldi	r18, 0xF8	; 248
     674:	c2 2e       	mov	r12, r18
     676:	2c e0       	ldi	r18, 0x0C	; 12
     678:	d2 2e       	mov	r13, r18
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	40 ef       	ldi	r20, 0xF0	; 240
     680:	51 e4       	ldi	r21, 0x41	; 65
     682:	c3 01       	movw	r24, r6
     684:	b2 01       	movw	r22, r4
     686:	0e 94 06 06 	call	0xc0c	; 0xc0c <__cmpsf2>
     68a:	87 fd       	sbrc	r24, 7
     68c:	84 c0       	rjmp	.+264    	; 0x796 <move+0x18e>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	4c e8       	ldi	r20, 0x8C	; 140
     694:	52 e4       	ldi	r21, 0x42	; 66
     696:	c3 01       	movw	r24, r6
     698:	b2 01       	movw	r22, r4
     69a:	0e 94 5e 07 	call	0xebc	; 0xebc <__gesf2>
     69e:	18 16       	cp	r1, r24
     6a0:	0c f0       	brlt	.+2      	; 0x6a4 <move+0x9c>
     6a2:	a0 c0       	rjmp	.+320    	; 0x7e4 <move+0x1dc>
     6a4:	08 ef       	ldi	r16, 0xF8	; 248
     6a6:	1c e0       	ldi	r17, 0x0C	; 12
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + SATURATE_DIFFERENCE)){
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 ef       	ldi	r20, 0xF0	; 240
     6ae:	51 e4       	ldi	r21, 0x41	; 65
     6b0:	c5 01       	movw	r24, r10
     6b2:	b4 01       	movw	r22, r8
     6b4:	0e 94 06 06 	call	0xc0c	; 0xc0c <__cmpsf2>
     6b8:	87 fd       	sbrc	r24, 7
     6ba:	65 c0       	rjmp	.+202    	; 0x786 <move+0x17e>
        z = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (z > (MAX_INPUT - SATURATE_DIFFERENCE)){
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	4c e8       	ldi	r20, 0x8C	; 140
     6c2:	52 e4       	ldi	r21, 0x42	; 66
     6c4:	c5 01       	movw	r24, r10
     6c6:	b4 01       	movw	r22, r8
     6c8:	0e 94 5e 07 	call	0xebc	; 0xebc <__gesf2>
     6cc:	18 16       	cp	r1, r24
     6ce:	0c f0       	brlt	.+2      	; 0x6d2 <move+0xca>
     6d0:	7e c0       	rjmp	.+252    	; 0x7ce <move+0x1c6>
     6d2:	83 e3       	ldi	r24, 0x33	; 51
     6d4:	88 2e       	mov	r8, r24
     6d6:	98 2c       	mov	r9, r8
     6d8:	a8 2c       	mov	r10, r8
     6da:	8f e3       	ldi	r24, 0x3F	; 63
     6dc:	b8 2e       	mov	r11, r24

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     6de:	66 b5       	in	r22, 0x26	; 38
     6e0:	77 b5       	in	r23, 0x27	; 39
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 ac 06 	call	0xd58	; 0xd58 <__floatunsisf>
     6ea:	a5 01       	movw	r20, r10
     6ec:	94 01       	movw	r18, r8
     6ee:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
     6f2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fixunssfsi>
    OCR1A = left_speed;
     6f6:	db bc       	out	0x2b, r13	; 43
     6f8:	ca bc       	out	0x2a, r12	; 42
    OCR1B = right_speed;
     6fa:	19 bd       	out	0x29, r17	; 41
     6fc:	08 bd       	out	0x28, r16	; 40
    OCR1C = z_speed;
     6fe:	70 93 79 00 	sts	0x0079, r23
     702:	60 93 78 00 	sts	0x0078, r22
    
	unsigned char buffer[16];
    clear_display();
     706:	0e 94 8f 02 	call	0x51e	; 0x51e <clear_display>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     70a:	4a e0       	ldi	r20, 0x0A	; 10
     70c:	be 01       	movw	r22, r28
     70e:	6f 5f       	subi	r22, 0xFF	; 255
     710:	7f 4f       	sbci	r23, 0xFF	; 255
     712:	c6 01       	movw	r24, r12
     714:	0e 94 fb 07 	call	0xff6	; 0xff6 <__utoa_ncheck>
	string2lcd((unsigned char *)utoa(left_speed,(char *)buffer,10));
     718:	0e 94 d5 02 	call	0x5aa	; 0x5aa <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     71c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     71e:	77 9b       	sbis	0x0e, 7	; 14
     720:	fe cf       	rjmp	.-4      	; 0x71e <move+0x116>
    SPDR = 0xC0;   // cursor go home on line 2
     722:	80 ec       	ldi	r24, 0xC0	; 192
     724:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     726:	77 9b       	sbis	0x0e, 7	; 14
     728:	fe cf       	rjmp	.-4      	; 0x726 <move+0x11e>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     72a:	80 91 62 00 	lds	r24, 0x0062
     72e:	88 60       	ori	r24, 0x08	; 8
     730:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     734:	80 91 62 00 	lds	r24, 0x0062
     738:	87 7f       	andi	r24, 0xF7	; 247
     73a:	80 93 62 00 	sts	0x0062, r24
     73e:	85 ec       	ldi	r24, 0xC5	; 197
     740:	8a 95       	dec	r24
     742:	f1 f7       	brne	.-4      	; 0x740 <move+0x138>
     744:	00 00       	nop
     746:	4a e0       	ldi	r20, 0x0A	; 10
     748:	be 01       	movw	r22, r28
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	c8 01       	movw	r24, r16
     750:	0e 94 fb 07 	call	0xff6	; 0xff6 <__utoa_ncheck>
    
	unsigned char buffer[16];
    clear_display();
	string2lcd((unsigned char *)utoa(left_speed,(char *)buffer,10));
	home_line2();
	string2lcd((unsigned char *)utoa(right_speed,(char *)buffer,10));
     754:	0e 94 d5 02 	call	0x5aa	; 0x5aa <string2lcd>
    

}
     758:	64 96       	adiw	r28, 0x14	; 20
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	bf 90       	pop	r11
     776:	af 90       	pop	r10
     778:	9f 90       	pop	r9
     77a:	8f 90       	pop	r8
     77c:	7f 90       	pop	r7
     77e:	6f 90       	pop	r6
     780:	5f 90       	pop	r5
     782:	4f 90       	pop	r4
     784:	08 95       	ret
     786:	9a e9       	ldi	r25, 0x9A	; 154
     788:	89 2e       	mov	r8, r25
     78a:	99 e9       	ldi	r25, 0x99	; 153
     78c:	99 2e       	mov	r9, r25
     78e:	a9 2c       	mov	r10, r9
     790:	9e e3       	ldi	r25, 0x3E	; 62
     792:	b9 2e       	mov	r11, r25
     794:	a4 cf       	rjmp	.-184    	; 0x6de <move+0xd6>
     796:	08 e7       	ldi	r16, 0x78	; 120
     798:	1a e0       	ldi	r17, 0x0A	; 10
     79a:	86 cf       	rjmp	.-244    	; 0x6a8 <move+0xa0>
     79c:	38 e7       	ldi	r19, 0x78	; 120
     79e:	c3 2e       	mov	r12, r19
     7a0:	3a e0       	ldi	r19, 0x0A	; 10
     7a2:	d3 2e       	mov	r13, r19
     7a4:	6a cf       	rjmp	.-300    	; 0x67a <move+0x72>
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	40 e8       	ldi	r20, 0x80	; 128
     7ac:	51 e4       	ldi	r21, 0x41	; 65
     7ae:	69 89       	ldd	r22, Y+17	; 0x11
     7b0:	7a 89       	ldd	r23, Y+18	; 0x12
     7b2:	8b 89       	ldd	r24, Y+19	; 0x13
     7b4:	9c 89       	ldd	r25, Y+20	; 0x14
     7b6:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e8       	ldi	r19, 0x80	; 128
     7be:	49 e0       	ldi	r20, 0x09	; 9
     7c0:	55 e4       	ldi	r21, 0x45	; 69
     7c2:	0e 94 9a 05 	call	0xb34	; 0xb34 <__addsf3>
     7c6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fixunssfsi>
     7ca:	6b 01       	movw	r12, r22
     7cc:	56 cf       	rjmp	.-340    	; 0x67a <move+0x72>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	48 ec       	ldi	r20, 0xC8	; 200
     7d4:	52 e4       	ldi	r21, 0x42	; 66
     7d6:	c5 01       	movw	r24, r10
     7d8:	b4 01       	movw	r22, r8
     7da:	0e 94 0b 06 	call	0xc16	; 0xc16 <__divsf3>
     7de:	4b 01       	movw	r8, r22
     7e0:	5c 01       	movw	r10, r24
     7e2:	7d cf       	rjmp	.-262    	; 0x6de <move+0xd6>
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 e8       	ldi	r20, 0x80	; 128
     7ea:	51 e4       	ldi	r21, 0x41	; 65
     7ec:	c3 01       	movw	r24, r6
     7ee:	b2 01       	movw	r22, r4
     7f0:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e8       	ldi	r19, 0x80	; 128
     7f8:	49 e0       	ldi	r20, 0x09	; 9
     7fa:	55 e4       	ldi	r21, 0x45	; 69
     7fc:	0e 94 9a 05 	call	0xb34	; 0xb34 <__addsf3>
     800:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fixunssfsi>
     804:	8b 01       	movw	r16, r22
     806:	50 cf       	rjmp	.-352    	; 0x6a8 <move+0xa0>

00000808 <spi_init>:
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     808:	e1 e6       	ldi	r30, 0x61	; 97
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	88 60       	ori	r24, 0x08	; 8
     810:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     812:	88 b3       	in	r24, 0x18	; 24
     814:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     816:	87 b3       	in	r24, 0x17	; 23
     818:	87 60       	ori	r24, 0x07	; 7
     81a:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     81c:	80 e5       	ldi	r24, 0x50	; 80
     81e:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	8e b9       	out	0x0e, r24	; 14
     824:	08 95       	ret

00000826 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     826:	8f e5       	ldi	r24, 0x5F	; 95
     828:	9a ee       	ldi	r25, 0xEA	; 234
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <lcd_init+0x4>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <lcd_init+0xa>
     830:	00 00       	nop
     832:	23 e0       	ldi	r18, 0x03	; 3
     834:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     836:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     838:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     83a:	77 9b       	sbis	0x0e, 7	; 14
     83c:	fe cf       	rjmp	.-4      	; 0x83a <lcd_init+0x14>
        SPDR = 0x30;
     83e:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     840:	77 9b       	sbis	0x0e, 7	; 14
     842:	fe cf       	rjmp	.-4      	; 0x840 <lcd_init+0x1a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     844:	80 91 62 00 	lds	r24, 0x0062
     848:	88 60       	ori	r24, 0x08	; 8
     84a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     84e:	80 91 62 00 	lds	r24, 0x0062
     852:	87 7f       	andi	r24, 0xF7	; 247
     854:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     858:	85 ec       	ldi	r24, 0xC5	; 197
     85a:	8a 95       	dec	r24
     85c:	f1 f7       	brne	.-4      	; 0x85a <lcd_init+0x34>
     85e:	00 00       	nop
     860:	21 50       	subi	r18, 0x01	; 1
     862:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     864:	49 f7       	brne	.-46     	; 0x838 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     866:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     868:	77 9b       	sbis	0x0e, 7	; 14
     86a:	fe cf       	rjmp	.-4      	; 0x868 <lcd_init+0x42>
    SPDR = 0x38;
     86c:	88 e3       	ldi	r24, 0x38	; 56
     86e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     870:	77 9b       	sbis	0x0e, 7	; 14
     872:	fe cf       	rjmp	.-4      	; 0x870 <lcd_init+0x4a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     874:	80 91 62 00 	lds	r24, 0x0062
     878:	88 60       	ori	r24, 0x08	; 8
     87a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     87e:	80 91 62 00 	lds	r24, 0x0062
     882:	87 7f       	andi	r24, 0xF7	; 247
     884:	80 93 62 00 	sts	0x0062, r24
     888:	95 ec       	ldi	r25, 0xC5	; 197
     88a:	9a 95       	dec	r25
     88c:	f1 f7       	brne	.-4      	; 0x88a <lcd_init+0x64>
     88e:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     890:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     892:	77 9b       	sbis	0x0e, 7	; 14
     894:	fe cf       	rjmp	.-4      	; 0x892 <lcd_init+0x6c>
    SPDR = 0x08;
     896:	88 e0       	ldi	r24, 0x08	; 8
     898:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     89a:	77 9b       	sbis	0x0e, 7	; 14
     89c:	fe cf       	rjmp	.-4      	; 0x89a <lcd_init+0x74>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     89e:	80 91 62 00 	lds	r24, 0x0062
     8a2:	88 60       	ori	r24, 0x08	; 8
     8a4:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     8a8:	80 91 62 00 	lds	r24, 0x0062
     8ac:	87 7f       	andi	r24, 0xF7	; 247
     8ae:	80 93 62 00 	sts	0x0062, r24
     8b2:	85 ec       	ldi	r24, 0xC5	; 197
     8b4:	8a 95       	dec	r24
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <lcd_init+0x8e>
     8b8:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     8ba:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8bc:	77 9b       	sbis	0x0e, 7	; 14
     8be:	fe cf       	rjmp	.-4      	; 0x8bc <lcd_init+0x96>
    SPDR = 0x01;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8c4:	77 9b       	sbis	0x0e, 7	; 14
     8c6:	fe cf       	rjmp	.-4      	; 0x8c4 <lcd_init+0x9e>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     8c8:	80 91 62 00 	lds	r24, 0x0062
     8cc:	88 60       	ori	r24, 0x08	; 8
     8ce:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     8d2:	80 91 62 00 	lds	r24, 0x0062
     8d6:	87 7f       	andi	r24, 0xF7	; 247
     8d8:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
     8de:	98 e1       	ldi	r25, 0x18	; 24
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <lcd_init+0xba>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <lcd_init+0xc0>
     8e6:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
     8e8:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8ea:	77 9b       	sbis	0x0e, 7	; 14
     8ec:	fe cf       	rjmp	.-4      	; 0x8ea <lcd_init+0xc4>
    SPDR = 0x06;
     8ee:	86 e0       	ldi	r24, 0x06	; 6
     8f0:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8f2:	77 9b       	sbis	0x0e, 7	; 14
     8f4:	fe cf       	rjmp	.-4      	; 0x8f2 <lcd_init+0xcc>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     8f6:	80 91 62 00 	lds	r24, 0x0062
     8fa:	88 60       	ori	r24, 0x08	; 8
     8fc:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     900:	80 91 62 00 	lds	r24, 0x0062
     904:	87 7f       	andi	r24, 0xF7	; 247
     906:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     90a:	95 ec       	ldi	r25, 0xC5	; 197
     90c:	9a 95       	dec	r25
     90e:	f1 f7       	brne	.-4      	; 0x90c <lcd_init+0xe6>
     910:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     912:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     914:	77 9b       	sbis	0x0e, 7	; 14
     916:	fe cf       	rjmp	.-4      	; 0x914 <lcd_init+0xee>
    SPDR = 0x0E;
     918:	8e e0       	ldi	r24, 0x0E	; 14
     91a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     91c:	77 9b       	sbis	0x0e, 7	; 14
     91e:	fe cf       	rjmp	.-4      	; 0x91c <lcd_init+0xf6>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     920:	80 91 62 00 	lds	r24, 0x0062
     924:	88 60       	ori	r24, 0x08	; 8
     926:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     92a:	80 91 62 00 	lds	r24, 0x0062
     92e:	87 7f       	andi	r24, 0xF7	; 247
     930:	80 93 62 00 	sts	0x0062, r24
     934:	85 ec       	ldi	r24, 0xC5	; 197
     936:	8a 95       	dec	r24
     938:	f1 f7       	brne	.-4      	; 0x936 <lcd_init+0x110>
     93a:	00 00       	nop
     93c:	08 95       	ret

0000093e <main>:


uint8_t temp, read_byte;


int main(void){
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	60 97       	sbiw	r28, 0x10	; 16
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61
    DDRB = 0xFF;
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
     956:	18 ba       	out	0x18, r1	; 24
    DDRD = 0x00 | (1 << 2);
     958:	84 e0       	ldi	r24, 0x04	; 4
     95a:	81 bb       	out	0x11, r24	; 17
     95c:	fe 01       	movw	r30, r28
     95e:	31 96       	adiw	r30, 0x01	; 1
     960:	9e 01       	movw	r18, r28
     962:	2f 5e       	subi	r18, 0xEF	; 239
     964:	3f 4f       	sbci	r19, 0xFF	; 255

    unsigned char buffer[MAX_STRING_SIZE]; 
    int i;
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        buffer[i] = ' ';
     966:	80 e2       	ldi	r24, 0x20	; 32
     968:	81 93       	st	Z+, r24
    PORTB = 0x00;
    DDRD = 0x00 | (1 << 2);

    unsigned char buffer[MAX_STRING_SIZE]; 
    int i;
    for (i = 0; i < MAX_STRING_SIZE; ++i){
     96a:	e2 17       	cp	r30, r18
     96c:	f3 07       	cpc	r31, r19
     96e:	e1 f7       	brne	.-8      	; 0x968 <main+0x2a>
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     970:	80 91 61 00 	lds	r24, 0x0061
     974:	88 60       	ori	r24, 0x08	; 8
     976:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initalization for SPI
     97a:	88 b3       	in	r24, 0x18	; 24
     97c:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     97e:	87 b3       	in	r24, 0x17	; 23
     980:	87 60       	ori	r24, 0x07	; 7
     982:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     984:	80 e5       	ldi	r24, 0x50	; 80
     986:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	8e b9       	out	0x0e, r24	; 14
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        buffer[i] = ' ';
    }

    spi_init();
    lcd_init();
     98c:	0e 94 13 04 	call	0x826	; 0x826 <lcd_init>

    //Wait for S1 to be pressed before doing anything, remove this eventually
    string2lcd((unsigned char *)"Press S1");
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 d5 02 	call	0x5aa	; 0x5aa <string2lcd>
	while (((PIND) & (1 << 0)));
     998:	80 99       	sbic	0x10, 0	; 16
     99a:	fe cf       	rjmp	.-4      	; 0x998 <main+0x5a>
	clear_display();
     99c:	0e 94 8f 02 	call	0x51e	; 0x51e <clear_display>

void enable_adc(int pin){
	if (pin > 7 || pin < 0){
		//return;
	}
	DDRF = 0x00;
     9a0:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0x00;
     9a4:	10 92 62 00 	sts	0x0062, r1
	//internally wire REFSn bits in the ADMUX register to connect VREF 
		//to internal 2.56v reference --> 0.0025 v/step
	ADMUX = (1 << REFS0) | (1 << REFS1);
     9a8:	80 ec       	ldi	r24, 0xC0	; 192
     9aa:	87 b9       	out	0x07, r24	; 7
	//Set analog input channel by writing to the MUX in ADMUX
	//Single ended input, gain is not allowed
	ADMUX |= pin;
     9ac:	87 b1       	in	r24, 0x07	; 7
     9ae:	87 b9       	out	0x07, r24	; 7
	
	//Default Right Adjusted

	//Set ADEN in ADSCRA to enable ADC
	ADCSRA = (1 << ADEN);
     9b0:	80 e8       	ldi	r24, 0x80	; 128
     9b2:	86 b9       	out	0x06, r24	; 6
	//Set the ADC Clock frequency prescaler to 128 --> 125kHz
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     9b4:	86 b1       	in	r24, 0x06	; 6
     9b6:	87 60       	ori	r24, 0x07	; 7
     9b8:	86 b9       	out	0x06, r24	; 6
	//Set free running mode
	//ADCSRA |= (1 << ADFR);
	//Enable the ADC Interrupt Flag
	ADCSRA |= (1 << ADIE);
     9ba:	33 9a       	sbi	0x06, 3	; 6
	//Start first conversion by setting ADSC in ADCSRA
	ADCSRA |= (1 << ADSC);
     9bc:	36 9a       	sbi	0x06, 6	; 6
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     9be:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = (unsigned char)ubrr;
     9c2:	27 e6       	ldi	r18, 0x67	; 103
     9c4:	20 93 99 00 	sts	0x0099, r18
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     9c8:	98 e1       	ldi	r25, 0x18	; 24
     9ca:	90 93 9a 00 	sts	0x009A, r25
    /* Set frame format: 8data, 1stop bit */ 
    UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
     9ce:	86 e0       	ldi	r24, 0x06	; 6
     9d0:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d4:	3f ef       	ldi	r19, 0xFF	; 255
     9d6:	41 ee       	ldi	r20, 0xE1	; 225
     9d8:	54 e0       	ldi	r21, 0x04	; 4
     9da:	31 50       	subi	r19, 0x01	; 1
     9dc:	40 40       	sbci	r20, 0x00	; 0
     9de:	50 40       	sbci	r21, 0x00	; 0
     9e0:	e1 f7       	brne	.-8      	; 0x9da <main+0x9c>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <main+0xa6>
     9e4:	00 00       	nop
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     9e6:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = (unsigned char)ubrr;
     9ea:	29 b9       	out	0x09, r18	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     9ec:	9a b9       	out	0x0a, r25	; 10
    /* Set frame format: 8data, 1stop bit */ 
    UCSR0C = (3<<UCSZ00);
     9ee:	80 93 95 00 	sts	0x0095, r24
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	91 ee       	ldi	r25, 0xE1	; 225
     9f6:	24 e0       	ldi	r18, 0x04	; 4
     9f8:	81 50       	subi	r24, 0x01	; 1
     9fa:	90 40       	sbci	r25, 0x00	; 0
     9fc:	20 40       	sbci	r18, 0x00	; 0
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <main+0xba>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <main+0xc4>
     a02:	00 00       	nop
     a04:	3f ef       	ldi	r19, 0xFF	; 255
     a06:	41 ee       	ldi	r20, 0xE1	; 225
     a08:	54 e0       	ldi	r21, 0x04	; 4
     a0a:	31 50       	subi	r19, 0x01	; 1
     a0c:	40 40       	sbci	r20, 0x00	; 0
     a0e:	50 40       	sbci	r21, 0x00	; 0
     a10:	e1 f7       	brne	.-8      	; 0xa0a <main+0xcc>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <main+0xd6>
     a14:	00 00       	nop
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    SPDR = 0xC0;   // cursor go home on line 2
     a16:	80 ec       	ldi	r24, 0xC0	; 192
     a18:	f8 2e       	mov	r15, r24
}
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
		return 0;
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_adc>
     a22:	bc 01       	movw	r22, r24
     a24:	99 0f       	add	r25, r25
     a26:	88 0b       	sbc	r24, r24
     a28:	99 0b       	sbc	r25, r25
     a2a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatsisf>
     a2e:	2a e0       	ldi	r18, 0x0A	; 10
     a30:	37 ed       	ldi	r19, 0xD7	; 215
     a32:	43 e2       	ldi	r20, 0x23	; 35
     a34:	5b e3       	ldi	r21, 0x3B	; 59
     a36:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
}
double get_depth_mpa(){
	return 1.2 * (get_voltage(PSENSOR_PIN) - PSENSOR_MIN)/(4.5-PSENSOR_MIN);
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	40 e0       	ldi	r20, 0x00	; 0
     a40:	5f e3       	ldi	r21, 0x3F	; 63
     a42:	0e 94 99 05 	call	0xb32	; 0xb32 <__subsf3>
     a46:	2a e9       	ldi	r18, 0x9A	; 154
     a48:	39 e9       	ldi	r19, 0x99	; 153
     a4a:	49 e9       	ldi	r20, 0x99	; 153
     a4c:	5f e3       	ldi	r21, 0x3F	; 63
     a4e:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	40 e8       	ldi	r20, 0x80	; 128
     a58:	5e e3       	ldi	r21, 0x3E	; 62
     a5a:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
}
double get_depth_feet(){
	return 334.56229215 * get_depth_mpa();
     a5e:	29 ef       	ldi	r18, 0xF9	; 249
     a60:	37 e4       	ldi	r19, 0x47	; 71
     a62:	47 ea       	ldi	r20, 0xA7	; 167
     a64:	53 e4       	ldi	r21, 0x43	; 67
     a66:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3>
	USART0_Init(MYUBRR);
    _delay_ms(100);
    
	while(1){
		depth = get_depth_feet();
		dtostrf(depth,2,8,(char*)buffer);
     a6a:	8e 01       	movw	r16, r28
     a6c:	0f 5f       	subi	r16, 0xFF	; 255
     a6e:	1f 4f       	sbci	r17, 0xFF	; 255
     a70:	28 e0       	ldi	r18, 0x08	; 8
     a72:	42 e0       	ldi	r20, 0x02	; 2
     a74:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <dtostrf>
        clear_display();
     a78:	0e 94 8f 02 	call	0x51e	; 0x51e <clear_display>
        string2lcd(buffer);
     a7c:	c8 01       	movw	r24, r16
     a7e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <string2lcd>
     a82:	ea e0       	ldi	r30, 0x0A	; 10
     a84:	f1 e0       	ldi	r31, 0x01	; 1
     a86:	86 e4       	ldi	r24, 0x46	; 70
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     a88:	5d 9b       	sbis	0x0b, 5	; 11
     a8a:	fe cf       	rjmp	.-4      	; 0xa88 <main+0x14a>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     a8c:	8c b9       	out	0x0c, r24	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     a8e:	81 91       	ld	r24, Z+
     a90:	81 11       	cpse	r24, r1
     a92:	fa cf       	rjmp	.-12     	; 0xa88 <main+0x14a>
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	88 23       	and	r24, r24
     a98:	41 f0       	breq	.+16     	; 0xaaa <main+0x16c>
     a9a:	fe 01       	movw	r30, r28
     a9c:	32 96       	adiw	r30, 0x02	; 2
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     a9e:	5d 9b       	sbis	0x0b, 5	; 11
     aa0:	fe cf       	rjmp	.-4      	; 0xa9e <main+0x160>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     aa2:	8c b9       	out	0x0c, r24	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     aa4:	81 91       	ld	r24, Z+
     aa6:	81 11       	cpse	r24, r1
     aa8:	fa cf       	rjmp	.-12     	; 0xa9e <main+0x160>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     aaa:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     aac:	77 9b       	sbis	0x0e, 7	; 14
     aae:	fe cf       	rjmp	.-4      	; 0xaac <main+0x16e>
    SPDR = 0xC0;   // cursor go home on line 2
     ab0:	ff b8       	out	0x0f, r15	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     ab2:	77 9b       	sbis	0x0e, 7	; 14
     ab4:	fe cf       	rjmp	.-4      	; 0xab2 <main+0x174>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     ab6:	80 91 62 00 	lds	r24, 0x0062
     aba:	88 60       	ori	r24, 0x08	; 8
     abc:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     ac0:	80 91 62 00 	lds	r24, 0x0062
     ac4:	87 7f       	andi	r24, 0xF7	; 247
     ac6:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aca:	85 ec       	ldi	r24, 0xC5	; 197
     acc:	8a 95       	dec	r24
     ace:	f1 f7       	brne	.-4      	; 0xacc <main+0x18e>
     ad0:	00 00       	nop
        string2lcd(buffer);
		USART0_send_string((unsigned char*)"Feet: ");
		USART0_send_string(buffer);

		home_line2();
		adc = read_adc(PSENSOR_PIN);
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_adc>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     ada:	4a e0       	ldi	r20, 0x0A	; 10
     adc:	be 01       	movw	r22, r28
     ade:	6f 5f       	subi	r22, 0xFF	; 255
     ae0:	7f 4f       	sbci	r23, 0xFF	; 255
     ae2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__itoa_ncheck>
		itoa(adc,(char*)buffer,10);
		string2lcd(buffer);
     ae6:	ce 01       	movw	r24, r28
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	0e 94 d5 02 	call	0x5aa	; 0x5aa <string2lcd>
     aee:	e1 e1       	ldi	r30, 0x11	; 17
     af0:	f1 e0       	ldi	r31, 0x01	; 1
     af2:	80 e2       	ldi	r24, 0x20	; 32
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     af4:	5d 9b       	sbis	0x0b, 5	; 11
     af6:	fe cf       	rjmp	.-4      	; 0xaf4 <main+0x1b6>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     af8:	8c b9       	out	0x0c, r24	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     afa:	81 91       	ld	r24, Z+
     afc:	81 11       	cpse	r24, r1
     afe:	fa cf       	rjmp	.-12     	; 0xaf4 <main+0x1b6>
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	88 23       	and	r24, r24
     b04:	41 f0       	breq	.+16     	; 0xb16 <main+0x1d8>
     b06:	fe 01       	movw	r30, r28
     b08:	32 96       	adiw	r30, 0x02	; 2
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     b0a:	5d 9b       	sbis	0x0b, 5	; 11
     b0c:	fe cf       	rjmp	.-4      	; 0xb0a <main+0x1cc>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     b0e:	8c b9       	out	0x0c, r24	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     b10:	81 91       	ld	r24, Z+
     b12:	81 11       	cpse	r24, r1
     b14:	fa cf       	rjmp	.-12     	; 0xb0a <main+0x1cc>
    UCSR0C = (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     b16:	5d 9b       	sbis	0x0b, 5	; 11
     b18:	fe cf       	rjmp	.-4      	; 0xb16 <main+0x1d8>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     b1a:	8a e0       	ldi	r24, 0x0A	; 10
     b1c:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b1e:	9f ef       	ldi	r25, 0xFF	; 255
     b20:	21 ee       	ldi	r18, 0xE1	; 225
     b22:	34 e0       	ldi	r19, 0x04	; 4
     b24:	91 50       	subi	r25, 0x01	; 1
     b26:	20 40       	sbci	r18, 0x00	; 0
     b28:	30 40       	sbci	r19, 0x00	; 0
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <main+0x1e6>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <main+0x1f0>
     b2e:	00 00       	nop
     b30:	74 cf       	rjmp	.-280    	; 0xa1a <main+0xdc>

00000b32 <__subsf3>:
     b32:	50 58       	subi	r21, 0x80	; 128

00000b34 <__addsf3>:
     b34:	bb 27       	eor	r27, r27
     b36:	aa 27       	eor	r26, r26
     b38:	0e 94 b1 05 	call	0xb62	; 0xb62 <__addsf3x>
     b3c:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__fp_round>
     b40:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fp_pscA>
     b44:	38 f0       	brcs	.+14     	; 0xb54 <__addsf3+0x20>
     b46:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fp_pscB>
     b4a:	20 f0       	brcs	.+8      	; 0xb54 <__addsf3+0x20>
     b4c:	39 f4       	brne	.+14     	; 0xb5c <__addsf3+0x28>
     b4e:	9f 3f       	cpi	r25, 0xFF	; 255
     b50:	19 f4       	brne	.+6      	; 0xb58 <__addsf3+0x24>
     b52:	26 f4       	brtc	.+8      	; 0xb5c <__addsf3+0x28>
     b54:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__fp_nan>
     b58:	0e f4       	brtc	.+2      	; 0xb5c <__addsf3+0x28>
     b5a:	e0 95       	com	r30
     b5c:	e7 fb       	bst	r30, 7
     b5e:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_inf>

00000b62 <__addsf3x>:
     b62:	e9 2f       	mov	r30, r25
     b64:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fp_split3>
     b68:	58 f3       	brcs	.-42     	; 0xb40 <__addsf3+0xc>
     b6a:	ba 17       	cp	r27, r26
     b6c:	62 07       	cpc	r22, r18
     b6e:	73 07       	cpc	r23, r19
     b70:	84 07       	cpc	r24, r20
     b72:	95 07       	cpc	r25, r21
     b74:	20 f0       	brcs	.+8      	; 0xb7e <__addsf3x+0x1c>
     b76:	79 f4       	brne	.+30     	; 0xb96 <__addsf3x+0x34>
     b78:	a6 f5       	brtc	.+104    	; 0xbe2 <__addsf3x+0x80>
     b7a:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_zero>
     b7e:	0e f4       	brtc	.+2      	; 0xb82 <__addsf3x+0x20>
     b80:	e0 95       	com	r30
     b82:	0b 2e       	mov	r0, r27
     b84:	ba 2f       	mov	r27, r26
     b86:	a0 2d       	mov	r26, r0
     b88:	0b 01       	movw	r0, r22
     b8a:	b9 01       	movw	r22, r18
     b8c:	90 01       	movw	r18, r0
     b8e:	0c 01       	movw	r0, r24
     b90:	ca 01       	movw	r24, r20
     b92:	a0 01       	movw	r20, r0
     b94:	11 24       	eor	r1, r1
     b96:	ff 27       	eor	r31, r31
     b98:	59 1b       	sub	r21, r25
     b9a:	99 f0       	breq	.+38     	; 0xbc2 <__addsf3x+0x60>
     b9c:	59 3f       	cpi	r21, 0xF9	; 249
     b9e:	50 f4       	brcc	.+20     	; 0xbb4 <__addsf3x+0x52>
     ba0:	50 3e       	cpi	r21, 0xE0	; 224
     ba2:	68 f1       	brcs	.+90     	; 0xbfe <__addsf3x+0x9c>
     ba4:	1a 16       	cp	r1, r26
     ba6:	f0 40       	sbci	r31, 0x00	; 0
     ba8:	a2 2f       	mov	r26, r18
     baa:	23 2f       	mov	r18, r19
     bac:	34 2f       	mov	r19, r20
     bae:	44 27       	eor	r20, r20
     bb0:	58 5f       	subi	r21, 0xF8	; 248
     bb2:	f3 cf       	rjmp	.-26     	; 0xb9a <__addsf3x+0x38>
     bb4:	46 95       	lsr	r20
     bb6:	37 95       	ror	r19
     bb8:	27 95       	ror	r18
     bba:	a7 95       	ror	r26
     bbc:	f0 40       	sbci	r31, 0x00	; 0
     bbe:	53 95       	inc	r21
     bc0:	c9 f7       	brne	.-14     	; 0xbb4 <__addsf3x+0x52>
     bc2:	7e f4       	brtc	.+30     	; 0xbe2 <__addsf3x+0x80>
     bc4:	1f 16       	cp	r1, r31
     bc6:	ba 0b       	sbc	r27, r26
     bc8:	62 0b       	sbc	r22, r18
     bca:	73 0b       	sbc	r23, r19
     bcc:	84 0b       	sbc	r24, r20
     bce:	ba f0       	brmi	.+46     	; 0xbfe <__addsf3x+0x9c>
     bd0:	91 50       	subi	r25, 0x01	; 1
     bd2:	a1 f0       	breq	.+40     	; 0xbfc <__addsf3x+0x9a>
     bd4:	ff 0f       	add	r31, r31
     bd6:	bb 1f       	adc	r27, r27
     bd8:	66 1f       	adc	r22, r22
     bda:	77 1f       	adc	r23, r23
     bdc:	88 1f       	adc	r24, r24
     bde:	c2 f7       	brpl	.-16     	; 0xbd0 <__addsf3x+0x6e>
     be0:	0e c0       	rjmp	.+28     	; 0xbfe <__addsf3x+0x9c>
     be2:	ba 0f       	add	r27, r26
     be4:	62 1f       	adc	r22, r18
     be6:	73 1f       	adc	r23, r19
     be8:	84 1f       	adc	r24, r20
     bea:	48 f4       	brcc	.+18     	; 0xbfe <__addsf3x+0x9c>
     bec:	87 95       	ror	r24
     bee:	77 95       	ror	r23
     bf0:	67 95       	ror	r22
     bf2:	b7 95       	ror	r27
     bf4:	f7 95       	ror	r31
     bf6:	9e 3f       	cpi	r25, 0xFE	; 254
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <__addsf3x+0x9a>
     bfa:	b0 cf       	rjmp	.-160    	; 0xb5c <__addsf3+0x28>
     bfc:	93 95       	inc	r25
     bfe:	88 0f       	add	r24, r24
     c00:	08 f0       	brcs	.+2      	; 0xc04 <__addsf3x+0xa2>
     c02:	99 27       	eor	r25, r25
     c04:	ee 0f       	add	r30, r30
     c06:	97 95       	ror	r25
     c08:	87 95       	ror	r24
     c0a:	08 95       	ret

00000c0c <__cmpsf2>:
     c0c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__fp_cmp>
     c10:	08 f4       	brcc	.+2      	; 0xc14 <__cmpsf2+0x8>
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	08 95       	ret

00000c16 <__divsf3>:
     c16:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divsf3x>
     c1a:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__fp_round>
     c1e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fp_pscB>
     c22:	58 f0       	brcs	.+22     	; 0xc3a <__divsf3+0x24>
     c24:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fp_pscA>
     c28:	40 f0       	brcs	.+16     	; 0xc3a <__divsf3+0x24>
     c2a:	29 f4       	brne	.+10     	; 0xc36 <__divsf3+0x20>
     c2c:	5f 3f       	cpi	r21, 0xFF	; 255
     c2e:	29 f0       	breq	.+10     	; 0xc3a <__divsf3+0x24>
     c30:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_inf>
     c34:	51 11       	cpse	r21, r1
     c36:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_szero>
     c3a:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__fp_nan>

00000c3e <__divsf3x>:
     c3e:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fp_split3>
     c42:	68 f3       	brcs	.-38     	; 0xc1e <__divsf3+0x8>

00000c44 <__divsf3_pse>:
     c44:	99 23       	and	r25, r25
     c46:	b1 f3       	breq	.-20     	; 0xc34 <__divsf3+0x1e>
     c48:	55 23       	and	r21, r21
     c4a:	91 f3       	breq	.-28     	; 0xc30 <__divsf3+0x1a>
     c4c:	95 1b       	sub	r25, r21
     c4e:	55 0b       	sbc	r21, r21
     c50:	bb 27       	eor	r27, r27
     c52:	aa 27       	eor	r26, r26
     c54:	62 17       	cp	r22, r18
     c56:	73 07       	cpc	r23, r19
     c58:	84 07       	cpc	r24, r20
     c5a:	38 f0       	brcs	.+14     	; 0xc6a <__divsf3_pse+0x26>
     c5c:	9f 5f       	subi	r25, 0xFF	; 255
     c5e:	5f 4f       	sbci	r21, 0xFF	; 255
     c60:	22 0f       	add	r18, r18
     c62:	33 1f       	adc	r19, r19
     c64:	44 1f       	adc	r20, r20
     c66:	aa 1f       	adc	r26, r26
     c68:	a9 f3       	breq	.-22     	; 0xc54 <__divsf3_pse+0x10>
     c6a:	35 d0       	rcall	.+106    	; 0xcd6 <__divsf3_pse+0x92>
     c6c:	0e 2e       	mov	r0, r30
     c6e:	3a f0       	brmi	.+14     	; 0xc7e <__divsf3_pse+0x3a>
     c70:	e0 e8       	ldi	r30, 0x80	; 128
     c72:	32 d0       	rcall	.+100    	; 0xcd8 <__divsf3_pse+0x94>
     c74:	91 50       	subi	r25, 0x01	; 1
     c76:	50 40       	sbci	r21, 0x00	; 0
     c78:	e6 95       	lsr	r30
     c7a:	00 1c       	adc	r0, r0
     c7c:	ca f7       	brpl	.-14     	; 0xc70 <__divsf3_pse+0x2c>
     c7e:	2b d0       	rcall	.+86     	; 0xcd6 <__divsf3_pse+0x92>
     c80:	fe 2f       	mov	r31, r30
     c82:	29 d0       	rcall	.+82     	; 0xcd6 <__divsf3_pse+0x92>
     c84:	66 0f       	add	r22, r22
     c86:	77 1f       	adc	r23, r23
     c88:	88 1f       	adc	r24, r24
     c8a:	bb 1f       	adc	r27, r27
     c8c:	26 17       	cp	r18, r22
     c8e:	37 07       	cpc	r19, r23
     c90:	48 07       	cpc	r20, r24
     c92:	ab 07       	cpc	r26, r27
     c94:	b0 e8       	ldi	r27, 0x80	; 128
     c96:	09 f0       	breq	.+2      	; 0xc9a <__divsf3_pse+0x56>
     c98:	bb 0b       	sbc	r27, r27
     c9a:	80 2d       	mov	r24, r0
     c9c:	bf 01       	movw	r22, r30
     c9e:	ff 27       	eor	r31, r31
     ca0:	93 58       	subi	r25, 0x83	; 131
     ca2:	5f 4f       	sbci	r21, 0xFF	; 255
     ca4:	3a f0       	brmi	.+14     	; 0xcb4 <__divsf3_pse+0x70>
     ca6:	9e 3f       	cpi	r25, 0xFE	; 254
     ca8:	51 05       	cpc	r21, r1
     caa:	78 f0       	brcs	.+30     	; 0xcca <__divsf3_pse+0x86>
     cac:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_inf>
     cb0:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_szero>
     cb4:	5f 3f       	cpi	r21, 0xFF	; 255
     cb6:	e4 f3       	brlt	.-8      	; 0xcb0 <__divsf3_pse+0x6c>
     cb8:	98 3e       	cpi	r25, 0xE8	; 232
     cba:	d4 f3       	brlt	.-12     	; 0xcb0 <__divsf3_pse+0x6c>
     cbc:	86 95       	lsr	r24
     cbe:	77 95       	ror	r23
     cc0:	67 95       	ror	r22
     cc2:	b7 95       	ror	r27
     cc4:	f7 95       	ror	r31
     cc6:	9f 5f       	subi	r25, 0xFF	; 255
     cc8:	c9 f7       	brne	.-14     	; 0xcbc <__divsf3_pse+0x78>
     cca:	88 0f       	add	r24, r24
     ccc:	91 1d       	adc	r25, r1
     cce:	96 95       	lsr	r25
     cd0:	87 95       	ror	r24
     cd2:	97 f9       	bld	r25, 7
     cd4:	08 95       	ret
     cd6:	e1 e0       	ldi	r30, 0x01	; 1
     cd8:	66 0f       	add	r22, r22
     cda:	77 1f       	adc	r23, r23
     cdc:	88 1f       	adc	r24, r24
     cde:	bb 1f       	adc	r27, r27
     ce0:	62 17       	cp	r22, r18
     ce2:	73 07       	cpc	r23, r19
     ce4:	84 07       	cpc	r24, r20
     ce6:	ba 07       	cpc	r27, r26
     ce8:	20 f0       	brcs	.+8      	; 0xcf2 <__divsf3_pse+0xae>
     cea:	62 1b       	sub	r22, r18
     cec:	73 0b       	sbc	r23, r19
     cee:	84 0b       	sbc	r24, r20
     cf0:	ba 0b       	sbc	r27, r26
     cf2:	ee 1f       	adc	r30, r30
     cf4:	88 f7       	brcc	.-30     	; 0xcd8 <__divsf3_pse+0x94>
     cf6:	e0 95       	com	r30
     cf8:	08 95       	ret

00000cfa <__fixunssfsi>:
     cfa:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fp_splitA>
     cfe:	88 f0       	brcs	.+34     	; 0xd22 <__fixunssfsi+0x28>
     d00:	9f 57       	subi	r25, 0x7F	; 127
     d02:	98 f0       	brcs	.+38     	; 0xd2a <__fixunssfsi+0x30>
     d04:	b9 2f       	mov	r27, r25
     d06:	99 27       	eor	r25, r25
     d08:	b7 51       	subi	r27, 0x17	; 23
     d0a:	b0 f0       	brcs	.+44     	; 0xd38 <__fixunssfsi+0x3e>
     d0c:	e1 f0       	breq	.+56     	; 0xd46 <__fixunssfsi+0x4c>
     d0e:	66 0f       	add	r22, r22
     d10:	77 1f       	adc	r23, r23
     d12:	88 1f       	adc	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	1a f0       	brmi	.+6      	; 0xd1e <__fixunssfsi+0x24>
     d18:	ba 95       	dec	r27
     d1a:	c9 f7       	brne	.-14     	; 0xd0e <__fixunssfsi+0x14>
     d1c:	14 c0       	rjmp	.+40     	; 0xd46 <__fixunssfsi+0x4c>
     d1e:	b1 30       	cpi	r27, 0x01	; 1
     d20:	91 f0       	breq	.+36     	; 0xd46 <__fixunssfsi+0x4c>
     d22:	0e 94 57 07 	call	0xeae	; 0xeae <__fp_zero>
     d26:	b1 e0       	ldi	r27, 0x01	; 1
     d28:	08 95       	ret
     d2a:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_zero>
     d2e:	67 2f       	mov	r22, r23
     d30:	78 2f       	mov	r23, r24
     d32:	88 27       	eor	r24, r24
     d34:	b8 5f       	subi	r27, 0xF8	; 248
     d36:	39 f0       	breq	.+14     	; 0xd46 <__fixunssfsi+0x4c>
     d38:	b9 3f       	cpi	r27, 0xF9	; 249
     d3a:	cc f3       	brlt	.-14     	; 0xd2e <__fixunssfsi+0x34>
     d3c:	86 95       	lsr	r24
     d3e:	77 95       	ror	r23
     d40:	67 95       	ror	r22
     d42:	b3 95       	inc	r27
     d44:	d9 f7       	brne	.-10     	; 0xd3c <__fixunssfsi+0x42>
     d46:	3e f4       	brtc	.+14     	; 0xd56 <__fixunssfsi+0x5c>
     d48:	90 95       	com	r25
     d4a:	80 95       	com	r24
     d4c:	70 95       	com	r23
     d4e:	61 95       	neg	r22
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	8f 4f       	sbci	r24, 0xFF	; 255
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	08 95       	ret

00000d58 <__floatunsisf>:
     d58:	e8 94       	clt
     d5a:	09 c0       	rjmp	.+18     	; 0xd6e <__floatsisf+0x12>

00000d5c <__floatsisf>:
     d5c:	97 fb       	bst	r25, 7
     d5e:	3e f4       	brtc	.+14     	; 0xd6e <__floatsisf+0x12>
     d60:	90 95       	com	r25
     d62:	80 95       	com	r24
     d64:	70 95       	com	r23
     d66:	61 95       	neg	r22
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	8f 4f       	sbci	r24, 0xFF	; 255
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	99 23       	and	r25, r25
     d70:	a9 f0       	breq	.+42     	; 0xd9c <__floatsisf+0x40>
     d72:	f9 2f       	mov	r31, r25
     d74:	96 e9       	ldi	r25, 0x96	; 150
     d76:	bb 27       	eor	r27, r27
     d78:	93 95       	inc	r25
     d7a:	f6 95       	lsr	r31
     d7c:	87 95       	ror	r24
     d7e:	77 95       	ror	r23
     d80:	67 95       	ror	r22
     d82:	b7 95       	ror	r27
     d84:	f1 11       	cpse	r31, r1
     d86:	f8 cf       	rjmp	.-16     	; 0xd78 <__floatsisf+0x1c>
     d88:	fa f4       	brpl	.+62     	; 0xdc8 <__floatsisf+0x6c>
     d8a:	bb 0f       	add	r27, r27
     d8c:	11 f4       	brne	.+4      	; 0xd92 <__floatsisf+0x36>
     d8e:	60 ff       	sbrs	r22, 0
     d90:	1b c0       	rjmp	.+54     	; 0xdc8 <__floatsisf+0x6c>
     d92:	6f 5f       	subi	r22, 0xFF	; 255
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	8f 4f       	sbci	r24, 0xFF	; 255
     d98:	9f 4f       	sbci	r25, 0xFF	; 255
     d9a:	16 c0       	rjmp	.+44     	; 0xdc8 <__floatsisf+0x6c>
     d9c:	88 23       	and	r24, r24
     d9e:	11 f0       	breq	.+4      	; 0xda4 <__floatsisf+0x48>
     da0:	96 e9       	ldi	r25, 0x96	; 150
     da2:	11 c0       	rjmp	.+34     	; 0xdc6 <__floatsisf+0x6a>
     da4:	77 23       	and	r23, r23
     da6:	21 f0       	breq	.+8      	; 0xdb0 <__floatsisf+0x54>
     da8:	9e e8       	ldi	r25, 0x8E	; 142
     daa:	87 2f       	mov	r24, r23
     dac:	76 2f       	mov	r23, r22
     dae:	05 c0       	rjmp	.+10     	; 0xdba <__floatsisf+0x5e>
     db0:	66 23       	and	r22, r22
     db2:	71 f0       	breq	.+28     	; 0xdd0 <__floatsisf+0x74>
     db4:	96 e8       	ldi	r25, 0x86	; 134
     db6:	86 2f       	mov	r24, r22
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	2a f0       	brmi	.+10     	; 0xdc8 <__floatsisf+0x6c>
     dbe:	9a 95       	dec	r25
     dc0:	66 0f       	add	r22, r22
     dc2:	77 1f       	adc	r23, r23
     dc4:	88 1f       	adc	r24, r24
     dc6:	da f7       	brpl	.-10     	; 0xdbe <__floatsisf+0x62>
     dc8:	88 0f       	add	r24, r24
     dca:	96 95       	lsr	r25
     dcc:	87 95       	ror	r24
     dce:	97 f9       	bld	r25, 7
     dd0:	08 95       	ret

00000dd2 <__fp_cmp>:
     dd2:	99 0f       	add	r25, r25
     dd4:	00 08       	sbc	r0, r0
     dd6:	55 0f       	add	r21, r21
     dd8:	aa 0b       	sbc	r26, r26
     dda:	e0 e8       	ldi	r30, 0x80	; 128
     ddc:	fe ef       	ldi	r31, 0xFE	; 254
     dde:	16 16       	cp	r1, r22
     de0:	17 06       	cpc	r1, r23
     de2:	e8 07       	cpc	r30, r24
     de4:	f9 07       	cpc	r31, r25
     de6:	c0 f0       	brcs	.+48     	; 0xe18 <__fp_cmp+0x46>
     de8:	12 16       	cp	r1, r18
     dea:	13 06       	cpc	r1, r19
     dec:	e4 07       	cpc	r30, r20
     dee:	f5 07       	cpc	r31, r21
     df0:	98 f0       	brcs	.+38     	; 0xe18 <__fp_cmp+0x46>
     df2:	62 1b       	sub	r22, r18
     df4:	73 0b       	sbc	r23, r19
     df6:	84 0b       	sbc	r24, r20
     df8:	95 0b       	sbc	r25, r21
     dfa:	39 f4       	brne	.+14     	; 0xe0a <__fp_cmp+0x38>
     dfc:	0a 26       	eor	r0, r26
     dfe:	61 f0       	breq	.+24     	; 0xe18 <__fp_cmp+0x46>
     e00:	23 2b       	or	r18, r19
     e02:	24 2b       	or	r18, r20
     e04:	25 2b       	or	r18, r21
     e06:	21 f4       	brne	.+8      	; 0xe10 <__fp_cmp+0x3e>
     e08:	08 95       	ret
     e0a:	0a 26       	eor	r0, r26
     e0c:	09 f4       	brne	.+2      	; 0xe10 <__fp_cmp+0x3e>
     e0e:	a1 40       	sbci	r26, 0x01	; 1
     e10:	a6 95       	lsr	r26
     e12:	8f ef       	ldi	r24, 0xFF	; 255
     e14:	81 1d       	adc	r24, r1
     e16:	81 1d       	adc	r24, r1
     e18:	08 95       	ret

00000e1a <__fp_inf>:
     e1a:	97 f9       	bld	r25, 7
     e1c:	9f 67       	ori	r25, 0x7F	; 127
     e1e:	80 e8       	ldi	r24, 0x80	; 128
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	08 95       	ret

00000e26 <__fp_nan>:
     e26:	9f ef       	ldi	r25, 0xFF	; 255
     e28:	80 ec       	ldi	r24, 0xC0	; 192
     e2a:	08 95       	ret

00000e2c <__fp_pscA>:
     e2c:	00 24       	eor	r0, r0
     e2e:	0a 94       	dec	r0
     e30:	16 16       	cp	r1, r22
     e32:	17 06       	cpc	r1, r23
     e34:	18 06       	cpc	r1, r24
     e36:	09 06       	cpc	r0, r25
     e38:	08 95       	ret

00000e3a <__fp_pscB>:
     e3a:	00 24       	eor	r0, r0
     e3c:	0a 94       	dec	r0
     e3e:	12 16       	cp	r1, r18
     e40:	13 06       	cpc	r1, r19
     e42:	14 06       	cpc	r1, r20
     e44:	05 06       	cpc	r0, r21
     e46:	08 95       	ret

00000e48 <__fp_round>:
     e48:	09 2e       	mov	r0, r25
     e4a:	03 94       	inc	r0
     e4c:	00 0c       	add	r0, r0
     e4e:	11 f4       	brne	.+4      	; 0xe54 <__fp_round+0xc>
     e50:	88 23       	and	r24, r24
     e52:	52 f0       	brmi	.+20     	; 0xe68 <__fp_round+0x20>
     e54:	bb 0f       	add	r27, r27
     e56:	40 f4       	brcc	.+16     	; 0xe68 <__fp_round+0x20>
     e58:	bf 2b       	or	r27, r31
     e5a:	11 f4       	brne	.+4      	; 0xe60 <__fp_round+0x18>
     e5c:	60 ff       	sbrs	r22, 0
     e5e:	04 c0       	rjmp	.+8      	; 0xe68 <__fp_round+0x20>
     e60:	6f 5f       	subi	r22, 0xFF	; 255
     e62:	7f 4f       	sbci	r23, 0xFF	; 255
     e64:	8f 4f       	sbci	r24, 0xFF	; 255
     e66:	9f 4f       	sbci	r25, 0xFF	; 255
     e68:	08 95       	ret

00000e6a <__fp_split3>:
     e6a:	57 fd       	sbrc	r21, 7
     e6c:	90 58       	subi	r25, 0x80	; 128
     e6e:	44 0f       	add	r20, r20
     e70:	55 1f       	adc	r21, r21
     e72:	59 f0       	breq	.+22     	; 0xe8a <__fp_splitA+0x10>
     e74:	5f 3f       	cpi	r21, 0xFF	; 255
     e76:	71 f0       	breq	.+28     	; 0xe94 <__fp_splitA+0x1a>
     e78:	47 95       	ror	r20

00000e7a <__fp_splitA>:
     e7a:	88 0f       	add	r24, r24
     e7c:	97 fb       	bst	r25, 7
     e7e:	99 1f       	adc	r25, r25
     e80:	61 f0       	breq	.+24     	; 0xe9a <__fp_splitA+0x20>
     e82:	9f 3f       	cpi	r25, 0xFF	; 255
     e84:	79 f0       	breq	.+30     	; 0xea4 <__fp_splitA+0x2a>
     e86:	87 95       	ror	r24
     e88:	08 95       	ret
     e8a:	12 16       	cp	r1, r18
     e8c:	13 06       	cpc	r1, r19
     e8e:	14 06       	cpc	r1, r20
     e90:	55 1f       	adc	r21, r21
     e92:	f2 cf       	rjmp	.-28     	; 0xe78 <__fp_split3+0xe>
     e94:	46 95       	lsr	r20
     e96:	f1 df       	rcall	.-30     	; 0xe7a <__fp_splitA>
     e98:	08 c0       	rjmp	.+16     	; 0xeaa <__fp_splitA+0x30>
     e9a:	16 16       	cp	r1, r22
     e9c:	17 06       	cpc	r1, r23
     e9e:	18 06       	cpc	r1, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	f1 cf       	rjmp	.-30     	; 0xe86 <__fp_splitA+0xc>
     ea4:	86 95       	lsr	r24
     ea6:	71 05       	cpc	r23, r1
     ea8:	61 05       	cpc	r22, r1
     eaa:	08 94       	sec
     eac:	08 95       	ret

00000eae <__fp_zero>:
     eae:	e8 94       	clt

00000eb0 <__fp_szero>:
     eb0:	bb 27       	eor	r27, r27
     eb2:	66 27       	eor	r22, r22
     eb4:	77 27       	eor	r23, r23
     eb6:	cb 01       	movw	r24, r22
     eb8:	97 f9       	bld	r25, 7
     eba:	08 95       	ret

00000ebc <__gesf2>:
     ebc:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__fp_cmp>
     ec0:	08 f4       	brcc	.+2      	; 0xec4 <__gesf2+0x8>
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	08 95       	ret

00000ec6 <__mulsf3>:
     ec6:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3x>
     eca:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__fp_round>
     ece:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fp_pscA>
     ed2:	38 f0       	brcs	.+14     	; 0xee2 <__mulsf3+0x1c>
     ed4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fp_pscB>
     ed8:	20 f0       	brcs	.+8      	; 0xee2 <__mulsf3+0x1c>
     eda:	95 23       	and	r25, r21
     edc:	11 f0       	breq	.+4      	; 0xee2 <__mulsf3+0x1c>
     ede:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_inf>
     ee2:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__fp_nan>
     ee6:	11 24       	eor	r1, r1
     ee8:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_szero>

00000eec <__mulsf3x>:
     eec:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fp_split3>
     ef0:	70 f3       	brcs	.-36     	; 0xece <__mulsf3+0x8>

00000ef2 <__mulsf3_pse>:
     ef2:	95 9f       	mul	r25, r21
     ef4:	c1 f3       	breq	.-16     	; 0xee6 <__mulsf3+0x20>
     ef6:	95 0f       	add	r25, r21
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	55 1f       	adc	r21, r21
     efc:	62 9f       	mul	r22, r18
     efe:	f0 01       	movw	r30, r0
     f00:	72 9f       	mul	r23, r18
     f02:	bb 27       	eor	r27, r27
     f04:	f0 0d       	add	r31, r0
     f06:	b1 1d       	adc	r27, r1
     f08:	63 9f       	mul	r22, r19
     f0a:	aa 27       	eor	r26, r26
     f0c:	f0 0d       	add	r31, r0
     f0e:	b1 1d       	adc	r27, r1
     f10:	aa 1f       	adc	r26, r26
     f12:	64 9f       	mul	r22, r20
     f14:	66 27       	eor	r22, r22
     f16:	b0 0d       	add	r27, r0
     f18:	a1 1d       	adc	r26, r1
     f1a:	66 1f       	adc	r22, r22
     f1c:	82 9f       	mul	r24, r18
     f1e:	22 27       	eor	r18, r18
     f20:	b0 0d       	add	r27, r0
     f22:	a1 1d       	adc	r26, r1
     f24:	62 1f       	adc	r22, r18
     f26:	73 9f       	mul	r23, r19
     f28:	b0 0d       	add	r27, r0
     f2a:	a1 1d       	adc	r26, r1
     f2c:	62 1f       	adc	r22, r18
     f2e:	83 9f       	mul	r24, r19
     f30:	a0 0d       	add	r26, r0
     f32:	61 1d       	adc	r22, r1
     f34:	22 1f       	adc	r18, r18
     f36:	74 9f       	mul	r23, r20
     f38:	33 27       	eor	r19, r19
     f3a:	a0 0d       	add	r26, r0
     f3c:	61 1d       	adc	r22, r1
     f3e:	23 1f       	adc	r18, r19
     f40:	84 9f       	mul	r24, r20
     f42:	60 0d       	add	r22, r0
     f44:	21 1d       	adc	r18, r1
     f46:	82 2f       	mov	r24, r18
     f48:	76 2f       	mov	r23, r22
     f4a:	6a 2f       	mov	r22, r26
     f4c:	11 24       	eor	r1, r1
     f4e:	9f 57       	subi	r25, 0x7F	; 127
     f50:	50 40       	sbci	r21, 0x00	; 0
     f52:	9a f0       	brmi	.+38     	; 0xf7a <__mulsf3_pse+0x88>
     f54:	f1 f0       	breq	.+60     	; 0xf92 <__mulsf3_pse+0xa0>
     f56:	88 23       	and	r24, r24
     f58:	4a f0       	brmi	.+18     	; 0xf6c <__mulsf3_pse+0x7a>
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	bb 1f       	adc	r27, r27
     f60:	66 1f       	adc	r22, r22
     f62:	77 1f       	adc	r23, r23
     f64:	88 1f       	adc	r24, r24
     f66:	91 50       	subi	r25, 0x01	; 1
     f68:	50 40       	sbci	r21, 0x00	; 0
     f6a:	a9 f7       	brne	.-22     	; 0xf56 <__mulsf3_pse+0x64>
     f6c:	9e 3f       	cpi	r25, 0xFE	; 254
     f6e:	51 05       	cpc	r21, r1
     f70:	80 f0       	brcs	.+32     	; 0xf92 <__mulsf3_pse+0xa0>
     f72:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_inf>
     f76:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_szero>
     f7a:	5f 3f       	cpi	r21, 0xFF	; 255
     f7c:	e4 f3       	brlt	.-8      	; 0xf76 <__mulsf3_pse+0x84>
     f7e:	98 3e       	cpi	r25, 0xE8	; 232
     f80:	d4 f3       	brlt	.-12     	; 0xf76 <__mulsf3_pse+0x84>
     f82:	86 95       	lsr	r24
     f84:	77 95       	ror	r23
     f86:	67 95       	ror	r22
     f88:	b7 95       	ror	r27
     f8a:	f7 95       	ror	r31
     f8c:	e7 95       	ror	r30
     f8e:	9f 5f       	subi	r25, 0xFF	; 255
     f90:	c1 f7       	brne	.-16     	; 0xf82 <__mulsf3_pse+0x90>
     f92:	fe 2b       	or	r31, r30
     f94:	88 0f       	add	r24, r24
     f96:	91 1d       	adc	r25, r1
     f98:	96 95       	lsr	r25
     f9a:	87 95       	ror	r24
     f9c:	97 f9       	bld	r25, 7
     f9e:	08 95       	ret

00000fa0 <dtostrf>:
     fa0:	ef 92       	push	r14
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	e8 01       	movw	r28, r16
     fac:	47 fd       	sbrc	r20, 7
     fae:	16 c0       	rjmp	.+44     	; 0xfdc <dtostrf+0x3c>
     fb0:	34 e0       	ldi	r19, 0x04	; 4
     fb2:	04 2e       	mov	r0, r20
     fb4:	00 0c       	add	r0, r0
     fb6:	55 0b       	sbc	r21, r21
     fb8:	57 ff       	sbrs	r21, 7
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <dtostrf+0x22>
     fbc:	51 95       	neg	r21
     fbe:	41 95       	neg	r20
     fc0:	51 09       	sbc	r21, r1
     fc2:	e3 2e       	mov	r14, r19
     fc4:	02 2f       	mov	r16, r18
     fc6:	24 2f       	mov	r18, r20
     fc8:	ae 01       	movw	r20, r28
     fca:	0e 94 15 08 	call	0x102a	; 0x102a <dtoa_prf>
     fce:	ce 01       	movw	r24, r28
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	ef 90       	pop	r14
     fda:	08 95       	ret
     fdc:	34 e1       	ldi	r19, 0x14	; 20
     fde:	e9 cf       	rjmp	.-46     	; 0xfb2 <dtostrf+0x12>

00000fe0 <__itoa_ncheck>:
     fe0:	bb 27       	eor	r27, r27
     fe2:	4a 30       	cpi	r20, 0x0A	; 10
     fe4:	31 f4       	brne	.+12     	; 0xff2 <__itoa_ncheck+0x12>
     fe6:	99 23       	and	r25, r25
     fe8:	22 f4       	brpl	.+8      	; 0xff2 <__itoa_ncheck+0x12>
     fea:	bd e2       	ldi	r27, 0x2D	; 45
     fec:	90 95       	com	r25
     fee:	81 95       	neg	r24
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__utoa_common>

00000ff6 <__utoa_ncheck>:
     ff6:	bb 27       	eor	r27, r27

00000ff8 <__utoa_common>:
     ff8:	fb 01       	movw	r30, r22
     ffa:	55 27       	eor	r21, r21
     ffc:	aa 27       	eor	r26, r26
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	aa 1f       	adc	r26, r26
    1004:	a4 17       	cp	r26, r20
    1006:	10 f0       	brcs	.+4      	; 0x100c <__utoa_common+0x14>
    1008:	a4 1b       	sub	r26, r20
    100a:	83 95       	inc	r24
    100c:	50 51       	subi	r21, 0x10	; 16
    100e:	b9 f7       	brne	.-18     	; 0xffe <__utoa_common+0x6>
    1010:	a0 5d       	subi	r26, 0xD0	; 208
    1012:	aa 33       	cpi	r26, 0x3A	; 58
    1014:	08 f0       	brcs	.+2      	; 0x1018 <__utoa_common+0x20>
    1016:	a9 5d       	subi	r26, 0xD9	; 217
    1018:	a1 93       	st	Z+, r26
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	79 f7       	brne	.-34     	; 0xffc <__utoa_common+0x4>
    101e:	b1 11       	cpse	r27, r1
    1020:	b1 93       	st	Z+, r27
    1022:	11 92       	st	Z+, r1
    1024:	cb 01       	movw	r24, r22
    1026:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <strrev>

0000102a <dtoa_prf>:
    102a:	8f 92       	push	r8
    102c:	9f 92       	push	r9
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	29 97       	sbiw	r28, 0x09	; 9
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	6a 01       	movw	r12, r20
    1054:	f2 2e       	mov	r15, r18
    1056:	b0 2e       	mov	r11, r16
    1058:	2b e3       	ldi	r18, 0x3B	; 59
    105a:	20 17       	cp	r18, r16
    105c:	08 f4       	brcc	.+2      	; 0x1060 <dtoa_prf+0x36>
    105e:	5f c0       	rjmp	.+190    	; 0x111e <__stack+0x1f>
    1060:	11 e0       	ldi	r17, 0x01	; 1
    1062:	10 0f       	add	r17, r16
    1064:	01 2f       	mov	r16, r17
    1066:	27 e0       	ldi	r18, 0x07	; 7
    1068:	ae 01       	movw	r20, r28
    106a:	4f 5f       	subi	r20, 0xFF	; 255
    106c:	5f 4f       	sbci	r21, 0xFF	; 255
    106e:	0e 94 96 09 	call	0x132c	; 0x132c <__ftoa_engine>
    1072:	bc 01       	movw	r22, r24
    1074:	39 81       	ldd	r19, Y+1	; 0x01
    1076:	83 2f       	mov	r24, r19
    1078:	89 70       	andi	r24, 0x09	; 9
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	09 f4       	brne	.+2      	; 0x1080 <dtoa_prf+0x56>
    107e:	51 c0       	rjmp	.+162    	; 0x1122 <__stack+0x23>
    1080:	e1 fc       	sbrc	r14, 1
    1082:	51 c0       	rjmp	.+162    	; 0x1126 <__stack+0x27>
    1084:	9e 2d       	mov	r25, r14
    1086:	91 70       	andi	r25, 0x01	; 1
    1088:	e0 fc       	sbrc	r14, 0
    108a:	90 e2       	ldi	r25, 0x20	; 32
    108c:	ae 2d       	mov	r26, r14
    108e:	a0 71       	andi	r26, 0x10	; 16
    1090:	83 2f       	mov	r24, r19
    1092:	88 70       	andi	r24, 0x08	; 8
    1094:	33 ff       	sbrs	r19, 3
    1096:	5a c0       	rjmp	.+180    	; 0x114c <__stack+0x4d>
    1098:	91 11       	cpse	r25, r1
    109a:	47 c0       	rjmp	.+142    	; 0x112a <__stack+0x2b>
    109c:	83 e0       	ldi	r24, 0x03	; 3
    109e:	8f 15       	cp	r24, r15
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <dtoa_prf+0x7a>
    10a2:	45 c0       	rjmp	.+138    	; 0x112e <__stack+0x2f>
    10a4:	f8 1a       	sub	r15, r24
    10a6:	a1 11       	cpse	r26, r1
    10a8:	08 c0       	rjmp	.+16     	; 0x10ba <dtoa_prf+0x90>
    10aa:	f6 01       	movw	r30, r12
    10ac:	8f 2d       	mov	r24, r15
    10ae:	20 e2       	ldi	r18, 0x20	; 32
    10b0:	81 11       	cpse	r24, r1
    10b2:	3f c0       	rjmp	.+126    	; 0x1132 <__stack+0x33>
    10b4:	cf 0c       	add	r12, r15
    10b6:	d1 1c       	adc	r13, r1
    10b8:	f1 2c       	mov	r15, r1
    10ba:	99 23       	and	r25, r25
    10bc:	29 f0       	breq	.+10     	; 0x10c8 <dtoa_prf+0x9e>
    10be:	d6 01       	movw	r26, r12
    10c0:	9c 93       	st	X, r25
    10c2:	f6 01       	movw	r30, r12
    10c4:	31 96       	adiw	r30, 0x01	; 1
    10c6:	6f 01       	movw	r12, r30
    10c8:	c6 01       	movw	r24, r12
    10ca:	03 96       	adiw	r24, 0x03	; 3
    10cc:	e2 fe       	sbrs	r14, 2
    10ce:	34 c0       	rjmp	.+104    	; 0x1138 <__stack+0x39>
    10d0:	2e e4       	ldi	r18, 0x4E	; 78
    10d2:	d6 01       	movw	r26, r12
    10d4:	2c 93       	st	X, r18
    10d6:	31 e4       	ldi	r19, 0x41	; 65
    10d8:	11 96       	adiw	r26, 0x01	; 1
    10da:	3c 93       	st	X, r19
    10dc:	11 97       	sbiw	r26, 0x01	; 1
    10de:	12 96       	adiw	r26, 0x02	; 2
    10e0:	2c 93       	st	X, r18
    10e2:	fc 01       	movw	r30, r24
    10e4:	2f 2d       	mov	r18, r15
    10e6:	30 e2       	ldi	r19, 0x20	; 32
    10e8:	21 11       	cpse	r18, r1
    10ea:	2d c0       	rjmp	.+90     	; 0x1146 <__stack+0x47>
    10ec:	8f 0d       	add	r24, r15
    10ee:	91 1d       	adc	r25, r1
    10f0:	dc 01       	movw	r26, r24
    10f2:	1c 92       	st	X, r1
    10f4:	8e ef       	ldi	r24, 0xFE	; 254
    10f6:	9f ef       	ldi	r25, 0xFF	; 255
    10f8:	29 96       	adiw	r28, 0x09	; 9
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	df 90       	pop	r13
    1112:	cf 90       	pop	r12
    1114:	bf 90       	pop	r11
    1116:	af 90       	pop	r10
    1118:	9f 90       	pop	r9
    111a:	8f 90       	pop	r8
    111c:	08 95       	ret
    111e:	1c e3       	ldi	r17, 0x3C	; 60
    1120:	a1 cf       	rjmp	.-190    	; 0x1064 <dtoa_prf+0x3a>
    1122:	9d e2       	ldi	r25, 0x2D	; 45
    1124:	b3 cf       	rjmp	.-154    	; 0x108c <dtoa_prf+0x62>
    1126:	9b e2       	ldi	r25, 0x2B	; 43
    1128:	b1 cf       	rjmp	.-158    	; 0x108c <dtoa_prf+0x62>
    112a:	84 e0       	ldi	r24, 0x04	; 4
    112c:	b8 cf       	rjmp	.-144    	; 0x109e <dtoa_prf+0x74>
    112e:	f1 2c       	mov	r15, r1
    1130:	ba cf       	rjmp	.-140    	; 0x10a6 <dtoa_prf+0x7c>
    1132:	21 93       	st	Z+, r18
    1134:	81 50       	subi	r24, 0x01	; 1
    1136:	bc cf       	rjmp	.-136    	; 0x10b0 <dtoa_prf+0x86>
    1138:	2e e6       	ldi	r18, 0x6E	; 110
    113a:	f6 01       	movw	r30, r12
    113c:	20 83       	st	Z, r18
    113e:	31 e6       	ldi	r19, 0x61	; 97
    1140:	31 83       	std	Z+1, r19	; 0x01
    1142:	22 83       	std	Z+2, r18	; 0x02
    1144:	ce cf       	rjmp	.-100    	; 0x10e2 <dtoa_prf+0xb8>
    1146:	31 93       	st	Z+, r19
    1148:	21 50       	subi	r18, 0x01	; 1
    114a:	ce cf       	rjmp	.-100    	; 0x10e8 <dtoa_prf+0xbe>
    114c:	23 2f       	mov	r18, r19
    114e:	24 70       	andi	r18, 0x04	; 4
    1150:	32 ff       	sbrs	r19, 2
    1152:	41 c0       	rjmp	.+130    	; 0x11d6 <__stack+0xd7>
    1154:	91 11       	cpse	r25, r1
    1156:	2f c0       	rjmp	.+94     	; 0x11b6 <__stack+0xb7>
    1158:	23 e0       	ldi	r18, 0x03	; 3
    115a:	2f 15       	cp	r18, r15
    115c:	10 f4       	brcc	.+4      	; 0x1162 <__stack+0x63>
    115e:	8f 2d       	mov	r24, r15
    1160:	82 1b       	sub	r24, r18
    1162:	a1 11       	cpse	r26, r1
    1164:	08 c0       	rjmp	.+16     	; 0x1176 <__stack+0x77>
    1166:	f6 01       	movw	r30, r12
    1168:	28 2f       	mov	r18, r24
    116a:	30 e2       	ldi	r19, 0x20	; 32
    116c:	21 11       	cpse	r18, r1
    116e:	25 c0       	rjmp	.+74     	; 0x11ba <__stack+0xbb>
    1170:	c8 0e       	add	r12, r24
    1172:	d1 1c       	adc	r13, r1
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	99 23       	and	r25, r25
    1178:	31 f0       	breq	.+12     	; 0x1186 <__stack+0x87>
    117a:	f6 01       	movw	r30, r12
    117c:	90 83       	st	Z, r25
    117e:	96 01       	movw	r18, r12
    1180:	2f 5f       	subi	r18, 0xFF	; 255
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	69 01       	movw	r12, r18
    1186:	96 01       	movw	r18, r12
    1188:	2d 5f       	subi	r18, 0xFD	; 253
    118a:	3f 4f       	sbci	r19, 0xFF	; 255
    118c:	e2 fe       	sbrs	r14, 2
    118e:	18 c0       	rjmp	.+48     	; 0x11c0 <__stack+0xc1>
    1190:	99 e4       	ldi	r25, 0x49	; 73
    1192:	d6 01       	movw	r26, r12
    1194:	9c 93       	st	X, r25
    1196:	9e e4       	ldi	r25, 0x4E	; 78
    1198:	11 96       	adiw	r26, 0x01	; 1
    119a:	9c 93       	st	X, r25
    119c:	11 97       	sbiw	r26, 0x01	; 1
    119e:	96 e4       	ldi	r25, 0x46	; 70
    11a0:	12 96       	adiw	r26, 0x02	; 2
    11a2:	9c 93       	st	X, r25
    11a4:	f9 01       	movw	r30, r18
    11a6:	98 2f       	mov	r25, r24
    11a8:	40 e2       	ldi	r20, 0x20	; 32
    11aa:	91 11       	cpse	r25, r1
    11ac:	11 c0       	rjmp	.+34     	; 0x11d0 <__stack+0xd1>
    11ae:	28 0f       	add	r18, r24
    11b0:	31 1d       	adc	r19, r1
    11b2:	d9 01       	movw	r26, r18
    11b4:	9e cf       	rjmp	.-196    	; 0x10f2 <dtoa_prf+0xc8>
    11b6:	24 e0       	ldi	r18, 0x04	; 4
    11b8:	d0 cf       	rjmp	.-96     	; 0x115a <__stack+0x5b>
    11ba:	31 93       	st	Z+, r19
    11bc:	21 50       	subi	r18, 0x01	; 1
    11be:	d6 cf       	rjmp	.-84     	; 0x116c <__stack+0x6d>
    11c0:	99 e6       	ldi	r25, 0x69	; 105
    11c2:	f6 01       	movw	r30, r12
    11c4:	90 83       	st	Z, r25
    11c6:	9e e6       	ldi	r25, 0x6E	; 110
    11c8:	91 83       	std	Z+1, r25	; 0x01
    11ca:	96 e6       	ldi	r25, 0x66	; 102
    11cc:	92 83       	std	Z+2, r25	; 0x02
    11ce:	ea cf       	rjmp	.-44     	; 0x11a4 <__stack+0xa5>
    11d0:	41 93       	st	Z+, r20
    11d2:	91 50       	subi	r25, 0x01	; 1
    11d4:	ea cf       	rjmp	.-44     	; 0x11aa <__stack+0xab>
    11d6:	41 e0       	ldi	r20, 0x01	; 1
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	91 11       	cpse	r25, r1
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <__stack+0xe3>
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	16 16       	cp	r1, r22
    11e4:	17 06       	cpc	r1, r23
    11e6:	0c f0       	brlt	.+2      	; 0x11ea <__stack+0xeb>
    11e8:	75 c0       	rjmp	.+234    	; 0x12d4 <__stack+0x1d5>
    11ea:	fb 01       	movw	r30, r22
    11ec:	31 96       	adiw	r30, 0x01	; 1
    11ee:	e4 0f       	add	r30, r20
    11f0:	f5 1f       	adc	r31, r21
    11f2:	bb 20       	and	r11, r11
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <__stack+0xf9>
    11f6:	71 c0       	rjmp	.+226    	; 0x12da <__stack+0x1db>
    11f8:	4b 2d       	mov	r20, r11
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	4f 5f       	subi	r20, 0xFF	; 255
    11fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1200:	4e 0f       	add	r20, r30
    1202:	5f 1f       	adc	r21, r31
    1204:	ef 2d       	mov	r30, r15
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	4e 17       	cp	r20, r30
    120a:	5f 07       	cpc	r21, r31
    120c:	14 f4       	brge	.+4      	; 0x1212 <__stack+0x113>
    120e:	2f 2d       	mov	r18, r15
    1210:	24 1b       	sub	r18, r20
    1212:	8e 2d       	mov	r24, r14
    1214:	88 71       	andi	r24, 0x18	; 24
    1216:	41 f4       	brne	.+16     	; 0x1228 <__stack+0x129>
    1218:	f6 01       	movw	r30, r12
    121a:	82 2f       	mov	r24, r18
    121c:	40 e2       	ldi	r20, 0x20	; 32
    121e:	81 11       	cpse	r24, r1
    1220:	5f c0       	rjmp	.+190    	; 0x12e0 <__stack+0x1e1>
    1222:	c2 0e       	add	r12, r18
    1224:	d1 1c       	adc	r13, r1
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	99 23       	and	r25, r25
    122a:	29 f0       	breq	.+10     	; 0x1236 <__stack+0x137>
    122c:	f6 01       	movw	r30, r12
    122e:	90 83       	st	Z, r25
    1230:	c6 01       	movw	r24, r12
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	6c 01       	movw	r12, r24
    1236:	a1 11       	cpse	r26, r1
    1238:	08 c0       	rjmp	.+16     	; 0x124a <__stack+0x14b>
    123a:	f6 01       	movw	r30, r12
    123c:	82 2f       	mov	r24, r18
    123e:	90 e3       	ldi	r25, 0x30	; 48
    1240:	81 11       	cpse	r24, r1
    1242:	51 c0       	rjmp	.+162    	; 0x12e6 <__stack+0x1e7>
    1244:	c2 0e       	add	r12, r18
    1246:	d1 1c       	adc	r13, r1
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	01 2f       	mov	r16, r17
    124c:	06 0f       	add	r16, r22
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	a3 2f       	mov	r26, r19
    1252:	a0 71       	andi	r26, 0x10	; 16
    1254:	aa 2e       	mov	r10, r26
    1256:	34 ff       	sbrs	r19, 4
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <__stack+0x161>
    125a:	91 33       	cpi	r25, 0x31	; 49
    125c:	09 f4       	brne	.+2      	; 0x1260 <__stack+0x161>
    125e:	01 50       	subi	r16, 0x01	; 1
    1260:	10 16       	cp	r1, r16
    1262:	0c f0       	brlt	.+2      	; 0x1266 <__stack+0x167>
    1264:	43 c0       	rjmp	.+134    	; 0x12ec <__stack+0x1ed>
    1266:	09 30       	cpi	r16, 0x09	; 9
    1268:	08 f0       	brcs	.+2      	; 0x126c <__stack+0x16d>
    126a:	08 e0       	ldi	r16, 0x08	; 8
    126c:	ab 01       	movw	r20, r22
    126e:	77 ff       	sbrs	r23, 7
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <__stack+0x177>
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	fb 01       	movw	r30, r22
    1278:	31 96       	adiw	r30, 0x01	; 1
    127a:	e4 1b       	sub	r30, r20
    127c:	f5 0b       	sbc	r31, r21
    127e:	a1 e0       	ldi	r26, 0x01	; 1
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	ac 0f       	add	r26, r28
    1284:	bd 1f       	adc	r27, r29
    1286:	ea 0f       	add	r30, r26
    1288:	fb 1f       	adc	r31, r27
    128a:	3e e2       	ldi	r19, 0x2E	; 46
    128c:	4b 01       	movw	r8, r22
    128e:	80 1a       	sub	r8, r16
    1290:	91 08       	sbc	r9, r1
    1292:	0b 2d       	mov	r16, r11
    1294:	10 e0       	ldi	r17, 0x00	; 0
    1296:	11 95       	neg	r17
    1298:	01 95       	neg	r16
    129a:	11 09       	sbc	r17, r1
    129c:	4f 3f       	cpi	r20, 0xFF	; 255
    129e:	bf ef       	ldi	r27, 0xFF	; 255
    12a0:	5b 07       	cpc	r21, r27
    12a2:	21 f4       	brne	.+8      	; 0x12ac <__stack+0x1ad>
    12a4:	d6 01       	movw	r26, r12
    12a6:	3c 93       	st	X, r19
    12a8:	11 96       	adiw	r26, 0x01	; 1
    12aa:	6d 01       	movw	r12, r26
    12ac:	64 17       	cp	r22, r20
    12ae:	75 07       	cpc	r23, r21
    12b0:	fc f0       	brlt	.+62     	; 0x12f0 <__stack+0x1f1>
    12b2:	84 16       	cp	r8, r20
    12b4:	95 06       	cpc	r9, r21
    12b6:	e4 f4       	brge	.+56     	; 0x12f0 <__stack+0x1f1>
    12b8:	80 81       	ld	r24, Z
    12ba:	41 50       	subi	r20, 0x01	; 1
    12bc:	51 09       	sbc	r21, r1
    12be:	31 96       	adiw	r30, 0x01	; 1
    12c0:	d6 01       	movw	r26, r12
    12c2:	11 96       	adiw	r26, 0x01	; 1
    12c4:	7d 01       	movw	r14, r26
    12c6:	40 17       	cp	r20, r16
    12c8:	51 07       	cpc	r21, r17
    12ca:	a4 f0       	brlt	.+40     	; 0x12f4 <__stack+0x1f5>
    12cc:	d6 01       	movw	r26, r12
    12ce:	8c 93       	st	X, r24
    12d0:	67 01       	movw	r12, r14
    12d2:	e4 cf       	rjmp	.-56     	; 0x129c <__stack+0x19d>
    12d4:	e1 e0       	ldi	r30, 0x01	; 1
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8a cf       	rjmp	.-236    	; 0x11ee <__stack+0xef>
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	90 cf       	rjmp	.-224    	; 0x1200 <__stack+0x101>
    12e0:	41 93       	st	Z+, r20
    12e2:	81 50       	subi	r24, 0x01	; 1
    12e4:	9c cf       	rjmp	.-200    	; 0x121e <__stack+0x11f>
    12e6:	91 93       	st	Z+, r25
    12e8:	81 50       	subi	r24, 0x01	; 1
    12ea:	aa cf       	rjmp	.-172    	; 0x1240 <__stack+0x141>
    12ec:	01 e0       	ldi	r16, 0x01	; 1
    12ee:	be cf       	rjmp	.-132    	; 0x126c <__stack+0x16d>
    12f0:	80 e3       	ldi	r24, 0x30	; 48
    12f2:	e3 cf       	rjmp	.-58     	; 0x12ba <__stack+0x1bb>
    12f4:	64 17       	cp	r22, r20
    12f6:	75 07       	cpc	r23, r21
    12f8:	31 f4       	brne	.+12     	; 0x1306 <__stack+0x207>
    12fa:	96 33       	cpi	r25, 0x36	; 54
    12fc:	90 f4       	brcc	.+36     	; 0x1322 <__stack+0x223>
    12fe:	95 33       	cpi	r25, 0x35	; 53
    1300:	11 f4       	brne	.+4      	; 0x1306 <__stack+0x207>
    1302:	aa 20       	and	r10, r10
    1304:	71 f0       	breq	.+28     	; 0x1322 <__stack+0x223>
    1306:	f6 01       	movw	r30, r12
    1308:	80 83       	st	Z, r24
    130a:	f7 01       	movw	r30, r14
    130c:	82 2f       	mov	r24, r18
    130e:	90 e2       	ldi	r25, 0x20	; 32
    1310:	81 11       	cpse	r24, r1
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <__stack+0x227>
    1314:	f7 01       	movw	r30, r14
    1316:	e2 0f       	add	r30, r18
    1318:	f1 1d       	adc	r31, r1
    131a:	10 82       	st	Z, r1
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	eb ce       	rjmp	.-554    	; 0x10f8 <dtoa_prf+0xce>
    1322:	81 e3       	ldi	r24, 0x31	; 49
    1324:	f0 cf       	rjmp	.-32     	; 0x1306 <__stack+0x207>
    1326:	91 93       	st	Z+, r25
    1328:	81 50       	subi	r24, 0x01	; 1
    132a:	f2 cf       	rjmp	.-28     	; 0x1310 <__stack+0x211>

0000132c <__ftoa_engine>:
    132c:	28 30       	cpi	r18, 0x08	; 8
    132e:	08 f0       	brcs	.+2      	; 0x1332 <__ftoa_engine+0x6>
    1330:	27 e0       	ldi	r18, 0x07	; 7
    1332:	33 27       	eor	r19, r19
    1334:	da 01       	movw	r26, r20
    1336:	99 0f       	add	r25, r25
    1338:	31 1d       	adc	r19, r1
    133a:	87 fd       	sbrc	r24, 7
    133c:	91 60       	ori	r25, 0x01	; 1
    133e:	00 96       	adiw	r24, 0x00	; 0
    1340:	61 05       	cpc	r22, r1
    1342:	71 05       	cpc	r23, r1
    1344:	39 f4       	brne	.+14     	; 0x1354 <__ftoa_engine+0x28>
    1346:	32 60       	ori	r19, 0x02	; 2
    1348:	2e 5f       	subi	r18, 0xFE	; 254
    134a:	3d 93       	st	X+, r19
    134c:	30 e3       	ldi	r19, 0x30	; 48
    134e:	2a 95       	dec	r18
    1350:	e1 f7       	brne	.-8      	; 0x134a <__ftoa_engine+0x1e>
    1352:	08 95       	ret
    1354:	9f 3f       	cpi	r25, 0xFF	; 255
    1356:	30 f0       	brcs	.+12     	; 0x1364 <__ftoa_engine+0x38>
    1358:	80 38       	cpi	r24, 0x80	; 128
    135a:	71 05       	cpc	r23, r1
    135c:	61 05       	cpc	r22, r1
    135e:	09 f0       	breq	.+2      	; 0x1362 <__ftoa_engine+0x36>
    1360:	3c 5f       	subi	r19, 0xFC	; 252
    1362:	3c 5f       	subi	r19, 0xFC	; 252
    1364:	3d 93       	st	X+, r19
    1366:	91 30       	cpi	r25, 0x01	; 1
    1368:	08 f0       	brcs	.+2      	; 0x136c <__ftoa_engine+0x40>
    136a:	80 68       	ori	r24, 0x80	; 128
    136c:	91 1d       	adc	r25, r1
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	1f 93       	push	r17
    1374:	0f 93       	push	r16
    1376:	ff 92       	push	r15
    1378:	ef 92       	push	r14
    137a:	19 2f       	mov	r17, r25
    137c:	98 7f       	andi	r25, 0xF8	; 248
    137e:	96 95       	lsr	r25
    1380:	e9 2f       	mov	r30, r25
    1382:	96 95       	lsr	r25
    1384:	96 95       	lsr	r25
    1386:	e9 0f       	add	r30, r25
    1388:	ff 27       	eor	r31, r31
    138a:	ea 51       	subi	r30, 0x1A	; 26
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	99 27       	eor	r25, r25
    1390:	33 27       	eor	r19, r19
    1392:	ee 24       	eor	r14, r14
    1394:	ff 24       	eor	r15, r15
    1396:	a7 01       	movw	r20, r14
    1398:	e7 01       	movw	r28, r14
    139a:	05 90       	lpm	r0, Z+
    139c:	08 94       	sec
    139e:	07 94       	ror	r0
    13a0:	28 f4       	brcc	.+10     	; 0x13ac <__ftoa_engine+0x80>
    13a2:	36 0f       	add	r19, r22
    13a4:	e7 1e       	adc	r14, r23
    13a6:	f8 1e       	adc	r15, r24
    13a8:	49 1f       	adc	r20, r25
    13aa:	51 1d       	adc	r21, r1
    13ac:	66 0f       	add	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	88 1f       	adc	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	06 94       	lsr	r0
    13b6:	a1 f7       	brne	.-24     	; 0x13a0 <__ftoa_engine+0x74>
    13b8:	05 90       	lpm	r0, Z+
    13ba:	07 94       	ror	r0
    13bc:	28 f4       	brcc	.+10     	; 0x13c8 <__ftoa_engine+0x9c>
    13be:	e7 0e       	add	r14, r23
    13c0:	f8 1e       	adc	r15, r24
    13c2:	49 1f       	adc	r20, r25
    13c4:	56 1f       	adc	r21, r22
    13c6:	c1 1d       	adc	r28, r1
    13c8:	77 0f       	add	r23, r23
    13ca:	88 1f       	adc	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	66 1f       	adc	r22, r22
    13d0:	06 94       	lsr	r0
    13d2:	a1 f7       	brne	.-24     	; 0x13bc <__ftoa_engine+0x90>
    13d4:	05 90       	lpm	r0, Z+
    13d6:	07 94       	ror	r0
    13d8:	28 f4       	brcc	.+10     	; 0x13e4 <__ftoa_engine+0xb8>
    13da:	f8 0e       	add	r15, r24
    13dc:	49 1f       	adc	r20, r25
    13de:	56 1f       	adc	r21, r22
    13e0:	c7 1f       	adc	r28, r23
    13e2:	d1 1d       	adc	r29, r1
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	66 1f       	adc	r22, r22
    13ea:	77 1f       	adc	r23, r23
    13ec:	06 94       	lsr	r0
    13ee:	a1 f7       	brne	.-24     	; 0x13d8 <__ftoa_engine+0xac>
    13f0:	05 90       	lpm	r0, Z+
    13f2:	07 94       	ror	r0
    13f4:	20 f4       	brcc	.+8      	; 0x13fe <__ftoa_engine+0xd2>
    13f6:	49 0f       	add	r20, r25
    13f8:	56 1f       	adc	r21, r22
    13fa:	c7 1f       	adc	r28, r23
    13fc:	d8 1f       	adc	r29, r24
    13fe:	99 0f       	add	r25, r25
    1400:	66 1f       	adc	r22, r22
    1402:	77 1f       	adc	r23, r23
    1404:	88 1f       	adc	r24, r24
    1406:	06 94       	lsr	r0
    1408:	a9 f7       	brne	.-22     	; 0x13f4 <__ftoa_engine+0xc8>
    140a:	84 91       	lpm	r24, Z
    140c:	10 95       	com	r17
    140e:	17 70       	andi	r17, 0x07	; 7
    1410:	41 f0       	breq	.+16     	; 0x1422 <__ftoa_engine+0xf6>
    1412:	d6 95       	lsr	r29
    1414:	c7 95       	ror	r28
    1416:	57 95       	ror	r21
    1418:	47 95       	ror	r20
    141a:	f7 94       	ror	r15
    141c:	e7 94       	ror	r14
    141e:	1a 95       	dec	r17
    1420:	c1 f7       	brne	.-16     	; 0x1412 <__ftoa_engine+0xe6>
    1422:	ec e8       	ldi	r30, 0x8C	; 140
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	68 94       	set
    1428:	15 90       	lpm	r1, Z+
    142a:	15 91       	lpm	r17, Z+
    142c:	35 91       	lpm	r19, Z+
    142e:	65 91       	lpm	r22, Z+
    1430:	95 91       	lpm	r25, Z+
    1432:	05 90       	lpm	r0, Z+
    1434:	7f e2       	ldi	r23, 0x2F	; 47
    1436:	73 95       	inc	r23
    1438:	e1 18       	sub	r14, r1
    143a:	f1 0a       	sbc	r15, r17
    143c:	43 0b       	sbc	r20, r19
    143e:	56 0b       	sbc	r21, r22
    1440:	c9 0b       	sbc	r28, r25
    1442:	d0 09       	sbc	r29, r0
    1444:	c0 f7       	brcc	.-16     	; 0x1436 <__ftoa_engine+0x10a>
    1446:	e1 0c       	add	r14, r1
    1448:	f1 1e       	adc	r15, r17
    144a:	43 1f       	adc	r20, r19
    144c:	56 1f       	adc	r21, r22
    144e:	c9 1f       	adc	r28, r25
    1450:	d0 1d       	adc	r29, r0
    1452:	7e f4       	brtc	.+30     	; 0x1472 <__ftoa_engine+0x146>
    1454:	70 33       	cpi	r23, 0x30	; 48
    1456:	11 f4       	brne	.+4      	; 0x145c <__ftoa_engine+0x130>
    1458:	8a 95       	dec	r24
    145a:	e6 cf       	rjmp	.-52     	; 0x1428 <__ftoa_engine+0xfc>
    145c:	e8 94       	clt
    145e:	01 50       	subi	r16, 0x01	; 1
    1460:	30 f0       	brcs	.+12     	; 0x146e <__ftoa_engine+0x142>
    1462:	08 0f       	add	r16, r24
    1464:	0a f4       	brpl	.+2      	; 0x1468 <__ftoa_engine+0x13c>
    1466:	00 27       	eor	r16, r16
    1468:	02 17       	cp	r16, r18
    146a:	08 f4       	brcc	.+2      	; 0x146e <__ftoa_engine+0x142>
    146c:	20 2f       	mov	r18, r16
    146e:	23 95       	inc	r18
    1470:	02 2f       	mov	r16, r18
    1472:	7a 33       	cpi	r23, 0x3A	; 58
    1474:	28 f0       	brcs	.+10     	; 0x1480 <__ftoa_engine+0x154>
    1476:	79 e3       	ldi	r23, 0x39	; 57
    1478:	7d 93       	st	X+, r23
    147a:	2a 95       	dec	r18
    147c:	e9 f7       	brne	.-6      	; 0x1478 <__ftoa_engine+0x14c>
    147e:	10 c0       	rjmp	.+32     	; 0x14a0 <__ftoa_engine+0x174>
    1480:	7d 93       	st	X+, r23
    1482:	2a 95       	dec	r18
    1484:	89 f6       	brne	.-94     	; 0x1428 <__ftoa_engine+0xfc>
    1486:	06 94       	lsr	r0
    1488:	97 95       	ror	r25
    148a:	67 95       	ror	r22
    148c:	37 95       	ror	r19
    148e:	17 95       	ror	r17
    1490:	17 94       	ror	r1
    1492:	e1 18       	sub	r14, r1
    1494:	f1 0a       	sbc	r15, r17
    1496:	43 0b       	sbc	r20, r19
    1498:	56 0b       	sbc	r21, r22
    149a:	c9 0b       	sbc	r28, r25
    149c:	d0 09       	sbc	r29, r0
    149e:	98 f0       	brcs	.+38     	; 0x14c6 <__ftoa_engine+0x19a>
    14a0:	23 95       	inc	r18
    14a2:	7e 91       	ld	r23, -X
    14a4:	73 95       	inc	r23
    14a6:	7a 33       	cpi	r23, 0x3A	; 58
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <__ftoa_engine+0x180>
    14aa:	70 e3       	ldi	r23, 0x30	; 48
    14ac:	7c 93       	st	X, r23
    14ae:	20 13       	cpse	r18, r16
    14b0:	b8 f7       	brcc	.-18     	; 0x14a0 <__ftoa_engine+0x174>
    14b2:	7e 91       	ld	r23, -X
    14b4:	70 61       	ori	r23, 0x10	; 16
    14b6:	7d 93       	st	X+, r23
    14b8:	30 f0       	brcs	.+12     	; 0x14c6 <__ftoa_engine+0x19a>
    14ba:	83 95       	inc	r24
    14bc:	71 e3       	ldi	r23, 0x31	; 49
    14be:	7d 93       	st	X+, r23
    14c0:	70 e3       	ldi	r23, 0x30	; 48
    14c2:	2a 95       	dec	r18
    14c4:	e1 f7       	brne	.-8      	; 0x14be <__ftoa_engine+0x192>
    14c6:	11 24       	eor	r1, r1
    14c8:	ef 90       	pop	r14
    14ca:	ff 90       	pop	r15
    14cc:	0f 91       	pop	r16
    14ce:	1f 91       	pop	r17
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	99 27       	eor	r25, r25
    14d6:	87 fd       	sbrc	r24, 7
    14d8:	90 95       	com	r25
    14da:	08 95       	ret

000014dc <strrev>:
    14dc:	dc 01       	movw	r26, r24
    14de:	fc 01       	movw	r30, r24
    14e0:	67 2f       	mov	r22, r23
    14e2:	71 91       	ld	r23, Z+
    14e4:	77 23       	and	r23, r23
    14e6:	e1 f7       	brne	.-8      	; 0x14e0 <strrev+0x4>
    14e8:	32 97       	sbiw	r30, 0x02	; 2
    14ea:	04 c0       	rjmp	.+8      	; 0x14f4 <strrev+0x18>
    14ec:	7c 91       	ld	r23, X
    14ee:	6d 93       	st	X+, r22
    14f0:	70 83       	st	Z, r23
    14f2:	62 91       	ld	r22, -Z
    14f4:	ae 17       	cp	r26, r30
    14f6:	bf 07       	cpc	r27, r31
    14f8:	c8 f3       	brcs	.-14     	; 0x14ec <strrev+0x10>
    14fa:	08 95       	ret

000014fc <_exit>:
    14fc:	f8 94       	cli

000014fe <__stop_program>:
    14fe:	ff cf       	rjmp	.-2      	; 0x14fe <__stop_program>
