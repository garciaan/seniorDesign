
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00001c44  00001cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080014c  0080014c  00001d24  2**0
                  ALLOC
  3 .stab         00004674  00000000  00000000  00001d24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a69  00000000  00000000  00006398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007e01  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007e14  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00007e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  000085d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00008ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00008d05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__ctors_end>
       4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       8:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      10:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      14:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      18:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      1c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      20:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      24:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      28:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      2c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      30:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      34:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      3c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      40:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      44:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      48:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      4c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      50:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      54:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      58:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      5c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      60:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      64:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      68:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      6c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      70:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      74:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      78:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      7c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      80:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      84:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      88:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__trampolines_end>:
      ba:	00 40       	sbci	r16, 0x00	; 0
      bc:	7a 10       	cpse	r7, r10
      be:	f3 5a       	subi	r31, 0xA3	; 163
      c0:	00 a0       	ldd	r0, Z+32	; 0x20
      c2:	72 4e       	sbci	r23, 0xE2	; 226
      c4:	18 09       	sbc	r17, r8
      c6:	00 10       	cpse	r0, r0
      c8:	a5 d4       	rcall	.+2378   	; 0xa14 <USART1_Receive_String+0x36>
      ca:	e8 00       	.word	0x00e8	; ????
      cc:	00 e8       	ldi	r16, 0x80	; 128
      ce:	76 48       	sbci	r23, 0x86	; 134
      d0:	17 00       	.word	0x0017	; ????
      d2:	00 e4       	ldi	r16, 0x40	; 64
      d4:	0b 54       	subi	r16, 0x4B	; 75
      d6:	02 00       	.word	0x0002	; ????
      d8:	00 ca       	rjmp	.-3072   	; 0xfffff4da <__eeprom_end+0xff7ef4da>
      da:	9a 3b       	cpi	r25, 0xBA	; 186
      dc:	00 00       	nop
      de:	00 e1       	ldi	r16, 0x10	; 16
      e0:	f5 05       	cpc	r31, r5
      e2:	00 00       	nop
      e4:	80 96       	adiw	r24, 0x20	; 32
      e6:	98 00       	.word	0x0098	; ????
      e8:	00 00       	nop
      ea:	40 42       	sbci	r20, 0x20	; 32
      ec:	0f 00       	.word	0x000f	; ????
      ee:	00 00       	nop
      f0:	a0 86       	std	Z+8, r10	; 0x08
      f2:	01 00       	.word	0x0001	; ????
      f4:	00 00       	nop
      f6:	10 27       	eor	r17, r16
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	e8 03       	fmulsu	r22, r16
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	64 00       	.word	0x0064	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	0a 00       	.word	0x000a	; ????
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	00 00       	nop
     114:	2c 76       	andi	r18, 0x6C	; 108
     116:	d8 88       	ldd	r13, Y+16	; 0x10
     118:	dc 67       	ori	r29, 0x7C	; 124
     11a:	4f 08       	sbc	r4, r15
     11c:	23 df       	rcall	.-442    	; 0xffffff64 <__eeprom_end+0xff7eff64>
     11e:	c1 df       	rcall	.-126    	; 0xa2 <__SREG__+0x63>
     120:	ae 59       	subi	r26, 0x9E	; 158
     122:	e1 b1       	in	r30, 0x01	; 1
     124:	b7 96       	adiw	r30, 0x27	; 39
     126:	e5 e3       	ldi	r30, 0x35	; 53
     128:	e4 53       	subi	r30, 0x34	; 52
     12a:	c6 3a       	cpi	r28, 0xA6	; 166
     12c:	e6 51       	subi	r30, 0x16	; 22
     12e:	99 76       	andi	r25, 0x69	; 105
     130:	96 e8       	ldi	r25, 0x86	; 134
     132:	e6 c2       	rjmp	.+1484   	; 0x700 <read_adc+0x2c>
     134:	84 26       	eor	r8, r20
     136:	eb 89       	ldd	r30, Y+19	; 0x13
     138:	8c 9b       	sbis	0x11, 4	; 17
     13a:	62 ed       	ldi	r22, 0xD2	; 210
     13c:	40 7c       	andi	r20, 0xC0	; 192
     13e:	6f fc       	.word	0xfc6f	; ????
     140:	ef bc       	out	0x2f, r14	; 47
     142:	9c 9f       	mul	r25, r28
     144:	40 f2       	brcs	.-112    	; 0xd6 <__trampolines_end+0x1c>
     146:	ba a5       	ldd	r27, Y+42	; 0x2a
     148:	6f a5       	ldd	r22, Y+47	; 0x2f
     14a:	f4 90       	lpm	r15, Z
     14c:	05 5a       	subi	r16, 0xA5	; 165
     14e:	2a f7       	brpl	.-54     	; 0x11a <__trampolines_end+0x60>
     150:	5c 93       	st	X, r21
     152:	6b 6c       	ori	r22, 0xCB	; 203
     154:	f9 67       	ori	r31, 0x79	; 121
     156:	6d c1       	rjmp	.+730    	; 0x432 <i2c_start>
     158:	1b fc       	.word	0xfc1b	; ????
     15a:	e0 e4       	ldi	r30, 0x40	; 64
     15c:	0d 47       	sbci	r16, 0x7D	; 125
     15e:	fe f5       	brtc	.+126    	; 0x1de <__do_clear_bss+0x4>
     160:	20 e6       	ldi	r18, 0x60	; 96
     162:	b5 00       	.word	0x00b5	; ????
     164:	d0 ed       	ldi	r29, 0xD0	; 208
     166:	90 2e       	mov	r9, r16
     168:	03 00       	.word	0x0003	; ????
     16a:	94 35       	cpi	r25, 0x54	; 84
     16c:	77 05       	cpc	r23, r7
     16e:	00 80       	ld	r0, Z
     170:	84 1e       	adc	r8, r20
     172:	08 00       	.word	0x0008	; ????
     174:	00 20       	and	r0, r0
     176:	4e 0a       	sbc	r4, r30
     178:	00 00       	nop
     17a:	00 c8       	rjmp	.-4096   	; 0xfffff17c <__eeprom_end+0xff7ef17c>
     17c:	0c 33       	cpi	r16, 0x3C	; 60
     17e:	33 33       	cpi	r19, 0x33	; 51
     180:	33 0f       	add	r19, r19
     182:	98 6e       	ori	r25, 0xE8	; 232
     184:	12 83       	std	Z+2, r17	; 0x02
     186:	11 41       	sbci	r17, 0x11	; 17
     188:	ef 8d       	ldd	r30, Y+31	; 0x1f
     18a:	21 14       	cp	r2, r1
     18c:	89 3b       	cpi	r24, 0xB9	; 185
     18e:	e6 55       	subi	r30, 0x56	; 86
     190:	16 cf       	rjmp	.-468    	; 0xffffffbe <__eeprom_end+0xff7effbe>
     192:	fe e6       	ldi	r31, 0x6E	; 110
     194:	db 18       	sub	r13, r11
     196:	d1 84       	ldd	r13, Z+9	; 0x09
     198:	4b 38       	cpi	r20, 0x8B	; 139
     19a:	1b f7       	brvc	.-58     	; 0x162 <__trampolines_end+0xa8>
     19c:	7c 1d       	adc	r23, r12
     19e:	90 1d       	adc	r25, r0
     1a0:	a4 bb       	out	0x14, r26	; 20
     1a2:	e4 24       	eor	r14, r4
     1a4:	20 32       	cpi	r18, 0x20	; 32
     1a6:	84 72       	andi	r24, 0x24	; 36
     1a8:	5e 22       	and	r5, r30
     1aa:	81 00       	.word	0x0081	; ????
     1ac:	c9 f1       	breq	.+114    	; 0x220 <path1+0x2a>
     1ae:	24 ec       	ldi	r18, 0xC4	; 196
     1b0:	a1 e5       	ldi	r26, 0x51	; 81
     1b2:	3d 27       	eor	r19, r29

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d0 e1       	ldi	r29, 0x10	; 16
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	11 e0       	ldi	r17, 0x01	; 1
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	e4 e4       	ldi	r30, 0x44	; 68
     1c8:	fc e1       	ldi	r31, 0x1C	; 28
     1ca:	00 e0       	ldi	r16, 0x00	; 0
     1cc:	0b bf       	out	0x3b, r16	; 59
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__do_copy_data+0x14>
     1d0:	07 90       	elpm	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	ac 34       	cpi	r26, 0x4C	; 76
     1d6:	b1 07       	cpc	r27, r17
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <__do_copy_data+0x10>

000001da <__do_clear_bss>:
     1da:	21 e0       	ldi	r18, 0x01	; 1
     1dc:	ac e4       	ldi	r26, 0x4C	; 76
     1de:	b1 e0       	ldi	r27, 0x01	; 1
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <.do_clear_bss_start>

000001e2 <.do_clear_bss_loop>:
     1e2:	1d 92       	st	X+, r1

000001e4 <.do_clear_bss_start>:
     1e4:	a0 35       	cpi	r26, 0x50	; 80
     1e6:	b2 07       	cpc	r27, r18
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <.do_clear_bss_loop>
     1ea:	0e 94 df 07 	call	0xfbe	; 0xfbe <main>
     1ee:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <_exit>

000001f2 <__bad_interrupt>:
     1f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f6 <path1>:
    }

    return 0;
}

void path1(){
     1f6:	ef 92       	push	r14
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    move(50 + (MOVE_SPEED/2),50 + (MOVE_SPEED/2),STABLE_Z);
     1fe:	e1 2c       	mov	r14, r1
     200:	f1 2c       	mov	r15, r1
     202:	08 e4       	ldi	r16, 0x48	; 72
     204:	12 e4       	ldi	r17, 0x42	; 66
     206:	20 e0       	ldi	r18, 0x00	; 0
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	46 e9       	ldi	r20, 0x96	; 150
     20c:	52 e4       	ldi	r21, 0x42	; 66
     20e:	ca 01       	movw	r24, r20
     210:	b9 01       	movw	r22, r18
     212:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	87 ea       	ldi	r24, 0xA7	; 167
     21a:	91 e6       	ldi	r25, 0x61	; 97
     21c:	21 50       	subi	r18, 0x01	; 1
     21e:	80 40       	sbci	r24, 0x00	; 0
     220:	90 40       	sbci	r25, 0x00	; 0
     222:	e1 f7       	brne	.-8      	; 0x21c <path1+0x26>
     224:	00 c0       	rjmp	.+0      	; 0x226 <path1+0x30>
     226:	00 00       	nop
    _delay_ms(2000);
    //Down 3 seconds (aim for about 4 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Down");
    move (50,50,0);
     228:	e1 2c       	mov	r14, r1
     22a:	f1 2c       	mov	r15, r1
     22c:	87 01       	movw	r16, r14
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	48 e4       	ldi	r20, 0x48	; 72
     234:	52 e4       	ldi	r21, 0x42	; 66
     236:	ca 01       	movw	r24, r20
     238:	b9 01       	movw	r22, r18
     23a:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
     23e:	2f ef       	ldi	r18, 0xFF	; 255
     240:	8b e7       	ldi	r24, 0x7B	; 123
     242:	92 e9       	ldi	r25, 0x92	; 146
     244:	21 50       	subi	r18, 0x01	; 1
     246:	80 40       	sbci	r24, 0x00	; 0
     248:	90 40       	sbci	r25, 0x00	; 0
     24a:	e1 f7       	brne	.-8      	; 0x244 <path1+0x4e>
     24c:	00 c0       	rjmp	.+0      	; 0x24e <path1+0x58>
     24e:	00 00       	nop
    _delay_ms(3000);
    //spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     250:	e1 2c       	mov	r14, r1
     252:	f1 2c       	mov	r15, r1
     254:	08 e4       	ldi	r16, 0x48	; 72
     256:	12 e4       	ldi	r17, 0x42	; 66
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	46 e9       	ldi	r20, 0x96	; 150
     25e:	52 e4       	ldi	r21, 0x42	; 66
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	88 ec       	ldi	r24, 0xC8	; 200
     266:	91 e4       	ldi	r25, 0x41	; 65
     268:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
     26c:	2f ef       	ldi	r18, 0xFF	; 255
     26e:	87 ea       	ldi	r24, 0xA7	; 167
     270:	91 e6       	ldi	r25, 0x61	; 97
     272:	21 50       	subi	r18, 0x01	; 1
     274:	80 40       	sbci	r24, 0x00	; 0
     276:	90 40       	sbci	r25, 0x00	; 0
     278:	e1 f7       	brne	.-8      	; 0x272 <path1+0x7c>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <path1+0x86>
     27c:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	46 e9       	ldi	r20, 0x96	; 150
     284:	52 e4       	ldi	r21, 0x42	; 66
     286:	ca 01       	movw	r24, r20
     288:	b9 01       	movw	r22, r18
     28a:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
     28e:	2f ef       	ldi	r18, 0xFF	; 255
     290:	87 ea       	ldi	r24, 0xA7	; 167
     292:	91 e6       	ldi	r25, 0x61	; 97
     294:	21 50       	subi	r18, 0x01	; 1
     296:	80 40       	sbci	r24, 0x00	; 0
     298:	90 40       	sbci	r25, 0x00	; 0
     29a:	e1 f7       	brne	.-8      	; 0x294 <path1+0x9e>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <path1+0xa8>
     29e:	00 00       	nop
    _delay_ms(2000);
    //Spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	46 e9       	ldi	r20, 0x96	; 150
     2a6:	52 e4       	ldi	r21, 0x42	; 66
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	88 ec       	ldi	r24, 0xC8	; 200
     2ae:	91 e4       	ldi	r25, 0x41	; 65
     2b0:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
     2b4:	2f ef       	ldi	r18, 0xFF	; 255
     2b6:	87 ea       	ldi	r24, 0xA7	; 167
     2b8:	91 e6       	ldi	r25, 0x61	; 97
     2ba:	21 50       	subi	r18, 0x01	; 1
     2bc:	80 40       	sbci	r24, 0x00	; 0
     2be:	90 40       	sbci	r25, 0x00	; 0
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <path1+0xc4>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <path1+0xce>
     2c4:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	46 e9       	ldi	r20, 0x96	; 150
     2cc:	52 e4       	ldi	r21, 0x42	; 66
     2ce:	ca 01       	movw	r24, r20
     2d0:	b9 01       	movw	r22, r18
     2d2:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
     2d6:	2f ef       	ldi	r18, 0xFF	; 255
     2d8:	87 ea       	ldi	r24, 0xA7	; 167
     2da:	91 e6       	ldi	r25, 0x61	; 97
     2dc:	21 50       	subi	r18, 0x01	; 1
     2de:	80 40       	sbci	r24, 0x00	; 0
     2e0:	90 40       	sbci	r25, 0x00	; 0
     2e2:	e1 f7       	brne	.-8      	; 0x2dc <path1+0xe6>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <path1+0xf0>
     2e6:	00 00       	nop
    _delay_ms(2000);
    //Up 3 seconds (resurface)
    // clear_display();
    // string2lcd((unsigned char *)"Up");
    move(50,50,100);
     2e8:	e1 2c       	mov	r14, r1
     2ea:	f1 2c       	mov	r15, r1
     2ec:	08 ec       	ldi	r16, 0xC8	; 200
     2ee:	12 e4       	ldi	r17, 0x42	; 66
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	48 e4       	ldi	r20, 0x48	; 72
     2f6:	52 e4       	ldi	r21, 0x42	; 66
     2f8:	ca 01       	movw	r24, r20
     2fa:	b9 01       	movw	r22, r18
     2fc:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
    //Spin left 90 degrees
    //turn(-90);
    //Forward for 2 seconds (about 6 feet)
    // clear_display();
    // string2lcd((unsigned char *)"Forward");
    move(50 + MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     300:	e1 2c       	mov	r14, r1
     302:	f1 2c       	mov	r15, r1
     304:	08 e4       	ldi	r16, 0x48	; 72
     306:	12 e4       	ldi	r17, 0x42	; 66
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	46 e9       	ldi	r20, 0x96	; 150
     30e:	52 e4       	ldi	r21, 0x42	; 66
     310:	ca 01       	movw	r24, r20
     312:	b9 01       	movw	r22, r18
     314:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
    //Spin left 90 degrees
    // clear_display();
    // string2lcd((unsigned char *)"Turn Left");
    move(50 - MOVE_SPEED/2, 50 + MOVE_SPEED/2, STABLE_Z);
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	46 e9       	ldi	r20, 0x96	; 150
     31e:	52 e4       	ldi	r21, 0x42	; 66
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	88 ec       	ldi	r24, 0xC8	; 200
     326:	91 e4       	ldi	r25, 0x41	; 65
     328:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
     32c:	2f ef       	ldi	r18, 0xFF	; 255
     32e:	87 ea       	ldi	r24, 0xA7	; 167
     330:	91 e6       	ldi	r25, 0x61	; 97
     332:	21 50       	subi	r18, 0x01	; 1
     334:	80 40       	sbci	r24, 0x00	; 0
     336:	90 40       	sbci	r25, 0x00	; 0
     338:	e1 f7       	brne	.-8      	; 0x332 <path1+0x13c>
     33a:	00 c0       	rjmp	.+0      	; 0x33c <path1+0x146>
     33c:	00 00       	nop
    _delay_ms(2000);
    //turn(-90);
    //Complete (back in some position as start)
}
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	08 95       	ret

00000348 <path2>:
     348:	08 95       	ret

0000034a <path3>:
void path2(){
    //Implement if necessary
}
void path3(){
     34a:	08 95       	ret

0000034c <turn>:
    //Implement if necessary
}

void turn(int degrees){
     34c:	cf 92       	push	r12
     34e:	df 92       	push	r13
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	ec 01       	movw	r28, r24
    int *x = 0;
    int *y = 0;
    int *z = 0;
    float headingDegrees = getHeading(x,y,z);
     35e:	40 e0       	ldi	r20, 0x00	; 0
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <getHeading>
     36e:	6b 01       	movw	r12, r22
     370:	7c 01       	movw	r14, r24
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
     372:	be 01       	movw	r22, r28
     374:	0d 2e       	mov	r0, r29
     376:	00 0c       	add	r0, r0
     378:	88 0b       	sbc	r24, r24
     37a:	99 0b       	sbc	r25, r25
     37c:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     380:	a7 01       	movw	r20, r14
     382:	96 01       	movw	r18, r12
     384:	0e 94 94 08 	call	0x1128	; 0x1128 <__addsf3>
     388:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     38c:	cb 01       	movw	r24, r22
     38e:	68 e6       	ldi	r22, 0x68	; 104
     390:	71 e0       	ldi	r23, 0x01	; 1
     392:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__divmodhi4>
     396:	8c 01       	movw	r16, r24
    if (degrees < 0){
     398:	d7 fd       	sbrc	r29, 7
     39a:	29 c0       	rjmp	.+82     	; 0x3ee <turn+0xa2>
        while ((int)headingDegrees != new_heading){
            move(-TURN_SPEED,TURN_SPEED,50);
            getHeading(x,y,z);
        }
    }
    else if (degrees > 0){
     39c:	cd 2b       	or	r28, r29
     39e:	f1 f0       	breq	.+60     	; 0x3dc <turn+0x90>
        //Spin right until new heading
        while ((int)headingDegrees != (int)new_heading){
     3a0:	c7 01       	movw	r24, r14
     3a2:	b6 01       	movw	r22, r12
     3a4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     3a8:	06 17       	cp	r16, r22
     3aa:	17 07       	cpc	r17, r23
     3ac:	b9 f0       	breq	.+46     	; 0x3dc <turn+0x90>
            move(TURN_SPEED,-TURN_SPEED,50);
     3ae:	e1 2c       	mov	r14, r1
     3b0:	f1 2c       	mov	r15, r1
     3b2:	08 e4       	ldi	r16, 0x48	; 72
     3b4:	12 e4       	ldi	r17, 0x42	; 66
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	40 e7       	ldi	r20, 0x70	; 112
     3bc:	51 ec       	ldi	r21, 0xC1	; 193
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	80 e7       	ldi	r24, 0x70	; 112
     3c4:	91 e4       	ldi	r25, 0x41	; 65
     3c6:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
            getHeading(x,y,z);
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	50 e0       	ldi	r21, 0x00	; 0
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <getHeading>
     3da:	e9 cf       	rjmp	.-46     	; 0x3ae <turn+0x62>
        }
    }
}
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	08 95       	ret
    float headingDegrees = getHeading(x,y,z);
    //Get the new heading to aim for
    int new_heading = (int)(headingDegrees + degrees)%360;
    if (degrees < 0){
        //Spin left until new heading
        while ((int)headingDegrees != new_heading){
     3ee:	c7 01       	movw	r24, r14
     3f0:	b6 01       	movw	r22, r12
     3f2:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     3f6:	06 17       	cp	r16, r22
     3f8:	17 07       	cpc	r17, r23
     3fa:	81 f3       	breq	.-32     	; 0x3dc <turn+0x90>
            move(-TURN_SPEED,TURN_SPEED,50);
     3fc:	e1 2c       	mov	r14, r1
     3fe:	f1 2c       	mov	r15, r1
     400:	08 e4       	ldi	r16, 0x48	; 72
     402:	12 e4       	ldi	r17, 0x42	; 66
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	40 e7       	ldi	r20, 0x70	; 112
     40a:	51 e4       	ldi	r21, 0x41	; 65
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	80 e7       	ldi	r24, 0x70	; 112
     412:	91 ec       	ldi	r25, 0xC1	; 193
     414:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
            getHeading(x,y,z);
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 cf 06 	call	0xd9e	; 0xd9e <getHeading>
     428:	e9 cf       	rjmp	.-46     	; 0x3fc <turn+0xb0>

0000042a <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     42a:	88 e4       	ldi	r24, 0x48	; 72
     42c:	80 93 70 00 	sts	0x0070, r24
     430:	08 95       	ret

00000432 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     432:	10 92 74 00 	sts	0x0074, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     436:	94 ea       	ldi	r25, 0xA4	; 164
     438:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     43c:	90 91 74 00 	lds	r25, 0x0074
     440:	97 ff       	sbrs	r25, 7
     442:	fc cf       	rjmp	.-8      	; 0x43c <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     444:	90 91 71 00 	lds	r25, 0x0071
     448:	98 7f       	andi	r25, 0xF8	; 248
     44a:	98 30       	cpi	r25, 0x08	; 8
     44c:	11 f0       	breq	.+4      	; 0x452 <i2c_start+0x20>
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
     452:	80 93 73 00 	sts	0x0073, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     456:	84 e8       	ldi	r24, 0x84	; 132
     458:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     45c:	80 91 74 00 	lds	r24, 0x0074
     460:	87 ff       	sbrs	r24, 7
     462:	fc cf       	rjmp	.-8      	; 0x45c <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     464:	80 91 71 00 	lds	r24, 0x0071
     468:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     46a:	88 31       	cpi	r24, 0x18	; 24
     46c:	11 f0       	breq	.+4      	; 0x472 <i2c_start+0x40>
     46e:	80 34       	cpi	r24, 0x40	; 64
     470:	71 f7       	brne	.-36     	; 0x44e <i2c_start+0x1c>
	
	return 0;
     472:	80 e0       	ldi	r24, 0x00	; 0
}
     474:	08 95       	ret

00000476 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     476:	80 93 73 00 	sts	0x0073, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     47a:	84 e8       	ldi	r24, 0x84	; 132
     47c:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     480:	80 91 74 00 	lds	r24, 0x0074
     484:	87 ff       	sbrs	r24, 7
     486:	fc cf       	rjmp	.-8      	; 0x480 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     488:	90 91 71 00 	lds	r25, 0x0071
     48c:	98 7f       	andi	r25, 0xF8	; 248
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	98 32       	cpi	r25, 0x28	; 40
     492:	09 f0       	breq	.+2      	; 0x496 <i2c_write+0x20>
	
	return 0;
}
     494:	08 95       	ret
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     496:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     498:	08 95       	ret

0000049a <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     49a:	84 ec       	ldi	r24, 0xC4	; 196
     49c:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4a0:	80 91 74 00 	lds	r24, 0x0074
     4a4:	87 ff       	sbrs	r24, 7
     4a6:	fc cf       	rjmp	.-8      	; 0x4a0 <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
     4a8:	80 91 73 00 	lds	r24, 0x0073
}
     4ac:	08 95       	ret

000004ae <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     4ae:	84 e8       	ldi	r24, 0x84	; 132
     4b0:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4b4:	80 91 74 00 	lds	r24, 0x0074
     4b8:	87 ff       	sbrs	r24, 7
     4ba:	fc cf       	rjmp	.-8      	; 0x4b4 <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
     4bc:	80 91 73 00 	lds	r24, 0x0073
}
     4c0:	08 95       	ret

000004c2 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	8b 01       	movw	r16, r22
     4cc:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     4ce:	0e 94 19 02 	call	0x432	; 0x432 <i2c_start>
     4d2:	81 11       	cpse	r24, r1
     4d4:	1f c0       	rjmp	.+62     	; 0x514 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
     4d6:	20 97       	sbiw	r28, 0x00	; 0
     4d8:	a9 f0       	breq	.+42     	; 0x504 <i2c_transmit+0x42>
     4da:	f8 01       	movw	r30, r16
     4dc:	c0 0f       	add	r28, r16
     4de:	d1 1f       	adc	r29, r17
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     4e0:	24 e8       	ldi	r18, 0x84	; 132
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     4e2:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     4e4:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     4e8:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4ec:	90 91 74 00 	lds	r25, 0x0074
     4f0:	97 ff       	sbrs	r25, 7
     4f2:	fc cf       	rjmp	.-8      	; 0x4ec <i2c_transmit+0x2a>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     4f4:	90 91 71 00 	lds	r25, 0x0071
     4f8:	98 7f       	andi	r25, 0xF8	; 248
     4fa:	98 32       	cpi	r25, 0x28	; 40
     4fc:	59 f4       	brne	.+22     	; 0x514 <i2c_transmit+0x52>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
     4fe:	ec 17       	cp	r30, r28
     500:	fd 07       	cpc	r31, r29
     502:	79 f7       	brne	.-34     	; 0x4e2 <i2c_transmit+0x20>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     504:	94 e9       	ldi	r25, 0x94	; 148
     506:	90 93 74 00 	sts	0x0074, r25
	}
	
	i2c_stop();
	
	return 0;
}
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	08 95       	ret
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     514:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	08 95       	ret

00000520 <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	8b 01       	movw	r16, r22
     52a:	ea 01       	movw	r28, r20
	if (i2c_start(address | I2C_READ)) return 1;
     52c:	81 60       	ori	r24, 0x01	; 1
     52e:	0e 94 19 02 	call	0x432	; 0x432 <i2c_start>
     532:	81 11       	cpse	r24, r1
     534:	25 c0       	rjmp	.+74     	; 0x580 <i2c_receive+0x60>
	
	for (uint16_t i = 0; i < (length-1); i++)
     536:	de 01       	movw	r26, r28
     538:	11 97       	sbiw	r26, 0x01	; 1
     53a:	41 f1       	breq	.+80     	; 0x58c <i2c_receive+0x6c>
     53c:	f8 01       	movw	r30, r16
     53e:	a0 0f       	add	r26, r16
     540:	b1 1f       	adc	r27, r17

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     542:	24 ec       	ldi	r18, 0xC4	; 196
     544:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     548:	90 91 74 00 	lds	r25, 0x0074
     54c:	97 ff       	sbrs	r25, 7
     54e:	fc cf       	rjmp	.-8      	; 0x548 <i2c_receive+0x28>
	// return received data from TWDR
	return TWDR;
     550:	90 91 73 00 	lds	r25, 0x0073
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     554:	91 93       	st	Z+, r25

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
     556:	ae 17       	cp	r26, r30
     558:	bf 07       	cpc	r27, r31
     55a:	a1 f7       	brne	.-24     	; 0x544 <i2c_receive+0x24>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     55c:	94 e8       	ldi	r25, 0x84	; 132
     55e:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     562:	90 91 74 00 	lds	r25, 0x0074
     566:	97 ff       	sbrs	r25, 7
     568:	fc cf       	rjmp	.-8      	; 0x562 <i2c_receive+0x42>
	// return received data from TWDR
	return TWDR;
     56a:	90 91 73 00 	lds	r25, 0x0073
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     56e:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     570:	94 e9       	ldi	r25, 0x94	; 148
     572:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	08 95       	ret
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	08 95       	ret
     58c:	d8 01       	movw	r26, r16
     58e:	e6 cf       	rjmp	.-52     	; 0x55c <i2c_receive+0x3c>

00000590 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	16 2f       	mov	r17, r22
     59c:	f4 2e       	mov	r15, r20
     59e:	05 2f       	mov	r16, r21
     5a0:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr | 0x00)) return 1;
     5a2:	0e 94 19 02 	call	0x432	; 0x432 <i2c_start>
     5a6:	81 11       	cpse	r24, r1
     5a8:	2c c0       	rjmp	.+88     	; 0x602 <i2c_writeReg+0x72>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     5aa:	10 93 73 00 	sts	0x0073, r17
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     5ae:	94 e8       	ldi	r25, 0x84	; 132
     5b0:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     5b4:	90 91 74 00 	lds	r25, 0x0074
     5b8:	97 ff       	sbrs	r25, 7
     5ba:	fc cf       	rjmp	.-8      	; 0x5b4 <i2c_writeReg+0x24>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     5bc:	90 91 71 00 	lds	r25, 0x0071
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     5c0:	20 97       	sbiw	r28, 0x00	; 0
     5c2:	b1 f0       	breq	.+44     	; 0x5f0 <i2c_writeReg+0x60>
     5c4:	ef 2d       	mov	r30, r15
     5c6:	f0 2f       	mov	r31, r16
     5c8:	ce 0f       	add	r28, r30
     5ca:	df 1f       	adc	r29, r31
uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     5cc:	44 e8       	ldi	r20, 0x84	; 132

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     5ce:	91 91       	ld	r25, Z+
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     5d0:	90 93 73 00 	sts	0x0073, r25
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     5d4:	40 93 74 00 	sts	0x0074, r20
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     5d8:	90 91 74 00 	lds	r25, 0x0074
     5dc:	97 ff       	sbrs	r25, 7
     5de:	fc cf       	rjmp	.-8      	; 0x5d8 <i2c_writeReg+0x48>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     5e0:	90 91 71 00 	lds	r25, 0x0071
     5e4:	98 7f       	andi	r25, 0xF8	; 248
     5e6:	98 32       	cpi	r25, 0x28	; 40
     5e8:	61 f4       	brne	.+24     	; 0x602 <i2c_writeReg+0x72>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
     5ea:	ec 17       	cp	r30, r28
     5ec:	fd 07       	cpc	r31, r29
     5ee:	79 f7       	brne	.-34     	; 0x5ce <i2c_writeReg+0x3e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     5f0:	94 e9       	ldi	r25, 0x94	; 148
     5f2:	90 93 74 00 	sts	0x0074, r25
	}

	i2c_stop();

	return 0;
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	08 95       	ret
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
     602:	81 e0       	ldi	r24, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	08 95       	ret

00000610 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     610:	ef 92       	push	r14
     612:	ff 92       	push	r15
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	18 2f       	mov	r17, r24
     61e:	06 2f       	mov	r16, r22
     620:	7a 01       	movw	r14, r20
     622:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
     624:	0e 94 19 02 	call	0x432	; 0x432 <i2c_start>
     628:	81 11       	cpse	r24, r1
     62a:	38 c0       	rjmp	.+112    	; 0x69c <i2c_readReg+0x8c>
}

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     62c:	00 93 73 00 	sts	0x0073, r16
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     630:	84 e8       	ldi	r24, 0x84	; 132
     632:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     636:	80 91 74 00 	lds	r24, 0x0074
     63a:	87 ff       	sbrs	r24, 7
     63c:	fc cf       	rjmp	.-8      	; 0x636 <i2c_readReg+0x26>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     63e:	80 91 71 00 	lds	r24, 0x0071
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
     642:	81 2f       	mov	r24, r17
     644:	81 60       	ori	r24, 0x01	; 1
     646:	0e 94 19 02 	call	0x432	; 0x432 <i2c_start>
     64a:	81 11       	cpse	r24, r1
     64c:	27 c0       	rjmp	.+78     	; 0x69c <i2c_readReg+0x8c>

	for (uint16_t i = 0; i < (length-1); i++)
     64e:	de 01       	movw	r26, r28
     650:	11 97       	sbiw	r26, 0x01	; 1
     652:	61 f1       	breq	.+88     	; 0x6ac <i2c_readReg+0x9c>
     654:	f7 01       	movw	r30, r14
     656:	ae 0d       	add	r26, r14
     658:	bf 1d       	adc	r27, r15

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     65a:	24 ec       	ldi	r18, 0xC4	; 196
     65c:	20 93 74 00 	sts	0x0074, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     660:	90 91 74 00 	lds	r25, 0x0074
     664:	97 ff       	sbrs	r25, 7
     666:	fc cf       	rjmp	.-8      	; 0x660 <i2c_readReg+0x50>
	// return received data from TWDR
	return TWDR;
     668:	90 91 73 00 	lds	r25, 0x0073

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     66c:	91 93       	st	Z+, r25

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
     66e:	ea 17       	cp	r30, r26
     670:	fb 07       	cpc	r31, r27
     672:	a1 f7       	brne	.-24     	; 0x65c <i2c_readReg+0x4c>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     674:	94 e8       	ldi	r25, 0x84	; 132
     676:	90 93 74 00 	sts	0x0074, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     67a:	90 91 74 00 	lds	r25, 0x0074
     67e:	97 ff       	sbrs	r25, 7
     680:	fc cf       	rjmp	.-8      	; 0x67a <i2c_readReg+0x6a>
	// return received data from TWDR
	return TWDR;
     682:	90 91 73 00 	lds	r25, 0x0073

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     686:	9c 93       	st	X, r25
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     688:	94 e9       	ldi	r25, 0x94	; 148
     68a:	90 93 74 00 	sts	0x0074, r25
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	08 95       	ret
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
     69c:	81 e0       	ldi	r24, 0x01	; 1
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	08 95       	ret
     6ac:	d7 01       	movw	r26, r14
     6ae:	e2 cf       	rjmp	.-60     	; 0x674 <i2c_readReg+0x64>

000006b0 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     6b0:	84 e9       	ldi	r24, 0x94	; 148
     6b2:	80 93 74 00 	sts	0x0074, r24
     6b6:	08 95       	ret

000006b8 <enable_adc>:
#include "./adc.h"


void enable_adc(){
	DDRF = 0x00;
     6b8:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0x00;
     6bc:	10 92 62 00 	sts	0x0062, r1
	//internally wire REFSn bits in the ADMUX register to connect VREF 
		//to internal 2.56v reference --> 0.0025 v/step
	//ADMUX = (1 << REFS0) | (1 << REFS1); //2.56v
	ADMUX = (1 << REFS0); //AVCC
     6c0:	80 e4       	ldi	r24, 0x40	; 64
     6c2:	87 b9       	out	0x07, r24	; 7
	//Single ended input, gain is not allowed
	
	//Default Right Adjusted

	//Set ADEN in ADSCRA to enable ADC
	ADCSRA = (1 << ADEN);
     6c4:	80 e8       	ldi	r24, 0x80	; 128
     6c6:	86 b9       	out	0x06, r24	; 6
	//Set the ADC Clock frequency prescaler to 128 --> 125kHz
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     6c8:	86 b1       	in	r24, 0x06	; 6
     6ca:	87 60       	ori	r24, 0x07	; 7
     6cc:	86 b9       	out	0x06, r24	; 6
	//Set free running mode
	//ADCSRA |= (1 << ADFR);
	//Enable the ADC Interrupt Flag
	ADCSRA |= (1 << ADIE);
     6ce:	33 9a       	sbi	0x06, 3	; 6
	//Start first conversion by setting ADSC in ADCSRA
	ADCSRA |= (1 << ADSC);
     6d0:	36 9a       	sbi	0x06, 6	; 6
     6d2:	08 95       	ret

000006d4 <read_adc>:

}
int read_adc(int pin){
     6d4:	fc 01       	movw	r30, r24
	int data;
	if (pin > 7){
     6d6:	08 97       	sbiw	r24, 0x08	; 8
     6d8:	fc f4       	brge	.+62     	; 0x718 <read_adc+0x44>
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	50 e0       	ldi	r21, 0x00	; 0
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
		ADMUX &= ~(1 << i);
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	97 b1       	in	r25, 0x07	; 7
     6e4:	9b 01       	movw	r18, r22
     6e6:	04 2e       	mov	r0, r20
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <read_adc+0x18>
     6ea:	22 0f       	add	r18, r18
     6ec:	0a 94       	dec	r0
     6ee:	ea f7       	brpl	.-6      	; 0x6ea <read_adc+0x16>
     6f0:	20 95       	com	r18
     6f2:	29 23       	and	r18, r25
     6f4:	27 b9       	out	0x07, r18	; 7
	if (pin > 7){
		return -1;
	}
	int i;
	//clear all the mux bits
	for (i = 0; i < 5; ++i){
     6f6:	4f 5f       	subi	r20, 0xFF	; 255
     6f8:	5f 4f       	sbci	r21, 0xFF	; 255
     6fa:	45 30       	cpi	r20, 0x05	; 5
     6fc:	51 05       	cpc	r21, r1
     6fe:	89 f7       	brne	.-30     	; 0x6e2 <read_adc+0xe>
		ADMUX &= ~(1 << i);
	}
	//set the new mux bit
	ADMUX |= pin;
     700:	97 b1       	in	r25, 0x07	; 7
     702:	89 2f       	mov	r24, r25
     704:	8e 2b       	or	r24, r30
     706:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
     708:	36 9a       	sbi	0x06, 6	; 6
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
     70a:	34 9b       	sbis	0x06, 4	; 6
     70c:	fe cf       	rjmp	.-4      	; 0x70a <read_adc+0x36>
	data = ADCL;
     70e:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);
     710:	25 b1       	in	r18, 0x05	; 5
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	92 2b       	or	r25, r18
     716:	08 95       	ret

}
int read_adc(int pin){
	int data;
	if (pin > 7){
		return -1;
     718:	8f ef       	ldi	r24, 0xFF	; 255
     71a:	9f ef       	ldi	r25, 0xFF	; 255
	//Wait until ADC registers complete the conversion
	while (!(ADCSRA & (1 << ADIF)));
	data = ADCL;
	data |= (ADCH << 8);
	return data;
}
     71c:	08 95       	ret

0000071e <get_voltage>:
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
     71e:	88 30       	cpi	r24, 0x08	; 8
     720:	91 05       	cpc	r25, r1
     722:	20 f0       	brcs	.+8      	; 0x72c <get_voltage+0xe>
		return 0;
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	cb 01       	movw	r24, r22
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
}
     72a:	08 95       	ret
}
double get_voltage(int adc){
	if (adc < 0 || adc > 7){
		return 0;
	}
	return (double)VREF/(1024.0) * (double)read_adc(adc);
     72c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <read_adc>
     730:	bc 01       	movw	r22, r24
     732:	99 0f       	add	r25, r25
     734:	88 0b       	sbc	r24, r24
     736:	99 0b       	sbc	r25, r25
     738:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 ea       	ldi	r20, 0xA0	; 160
     742:	5b e3       	ldi	r21, 0x3B	; 59
     744:	0e 94 05 0b 	call	0x160a	; 0x160a <__mulsf3>
     748:	08 95       	ret

0000074a <strobe_lcd>:
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     74a:	e2 e6       	ldi	r30, 0x62	; 98
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	88 60       	ori	r24, 0x08	; 8
     752:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     754:	80 81       	ld	r24, Z
     756:	87 7f       	andi	r24, 0xF7	; 247
     758:	80 83       	st	Z, r24
     75a:	08 95       	ret

0000075c <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     75c:	77 9b       	sbis	0x0e, 7	; 14
     75e:	fe cf       	rjmp	.-4      	; 0x75c <clear_display>
    SPDR = 0x00;    //command, not data
     760:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     762:	77 9b       	sbis	0x0e, 7	; 14
     764:	fe cf       	rjmp	.-4      	; 0x762 <clear_display+0x6>
    SPDR = 0x01;    //clear display command
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     76a:	77 9b       	sbis	0x0e, 7	; 14
     76c:	fe cf       	rjmp	.-4      	; 0x76a <clear_display+0xe>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     76e:	80 91 62 00 	lds	r24, 0x0062
     772:	88 60       	ori	r24, 0x08	; 8
     774:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     778:	80 91 62 00 	lds	r24, 0x0062
     77c:	87 7f       	andi	r24, 0xF7	; 247
     77e:	80 93 62 00 	sts	0x0062, r24
     782:	8f e9       	ldi	r24, 0x9F	; 159
     784:	98 e2       	ldi	r25, 0x28	; 40
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <clear_display+0x2a>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <clear_display+0x30>
     78c:	00 00       	nop
     78e:	08 95       	ret

00000790 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
     790:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     792:	77 9b       	sbis	0x0e, 7	; 14
     794:	fe cf       	rjmp	.-4      	; 0x792 <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
     796:	80 ec       	ldi	r24, 0xC0	; 192
     798:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     79a:	77 9b       	sbis	0x0e, 7	; 14
     79c:	fe cf       	rjmp	.-4      	; 0x79a <home_line2+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     79e:	80 91 62 00 	lds	r24, 0x0062
     7a2:	88 60       	ori	r24, 0x08	; 8
     7a4:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     7a8:	80 91 62 00 	lds	r24, 0x0062
     7ac:	87 7f       	andi	r24, 0xF7	; 247
     7ae:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b2:	85 ec       	ldi	r24, 0xC5	; 197
     7b4:	8a 95       	dec	r24
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <home_line2+0x24>
     7b8:	00 00       	nop
     7ba:	08 95       	ret

000007bc <char2lcd>:

//sends a char to the LCD
void char2lcd(unsigned char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7c0:	77 9b       	sbis	0x0e, 7	; 14
     7c2:	fe cf       	rjmp	.-4      	; 0x7c0 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
     7c4:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7c6:	77 9b       	sbis	0x0e, 7	; 14
     7c8:	fe cf       	rjmp	.-4      	; 0x7c6 <char2lcd+0xa>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     7ca:	80 91 62 00 	lds	r24, 0x0062
     7ce:	88 60       	ori	r24, 0x08	; 8
     7d0:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     7d4:	80 91 62 00 	lds	r24, 0x0062
     7d8:	87 7f       	andi	r24, 0xF7	; 247
     7da:	80 93 62 00 	sts	0x0062, r24
     7de:	85 ec       	ldi	r24, 0xC5	; 197
     7e0:	8a 95       	dec	r24
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <char2lcd+0x24>
     7e4:	00 00       	nop
     7e6:	08 95       	ret

000007e8 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	fc 01       	movw	r30, r24
     7ee:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
     7f4:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7f6:	77 9b       	sbis	0x0e, 7	; 14
     7f8:	fe cf       	rjmp	.-4      	; 0x7f6 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
     7fa:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     7fc:	77 9b       	sbis	0x0e, 7	; 14
     7fe:	fe cf       	rjmp	.-4      	; 0x7fc <string2lcd+0x14>
        SPDR = lcd_str[count]; 
     800:	8d 91       	ld	r24, X+
     802:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     804:	77 9b       	sbis	0x0e, 7	; 14
     806:	fe cf       	rjmp	.-4      	; 0x804 <string2lcd+0x1c>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     808:	90 91 62 00 	lds	r25, 0x0062
     80c:	98 60       	ori	r25, 0x08	; 8
     80e:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
     812:	90 91 62 00 	lds	r25, 0x0062
     816:	97 7f       	andi	r25, 0xF7	; 247
     818:	90 93 62 00 	sts	0x0062, r25
     81c:	85 ec       	ldi	r24, 0xC5	; 197
     81e:	8a 95       	dec	r24
     820:	f1 f7       	brne	.-4      	; 0x81e <string2lcd+0x36>
     822:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(unsigned char *lcd_str){
    int count;
    for (count=0; count<=(strlen((char*)lcd_str)-1); count++){
     824:	4f 5f       	subi	r20, 0xFF	; 255
     826:	5f 4f       	sbci	r21, 0xFF	; 255
     828:	ef 01       	movw	r28, r30
     82a:	09 90       	ld	r0, Y+
     82c:	00 20       	and	r0, r0
     82e:	e9 f7       	brne	.-6      	; 0x82a <string2lcd+0x42>
     830:	9e 01       	movw	r18, r28
     832:	2e 1b       	sub	r18, r30
     834:	3f 0b       	sbc	r19, r31
     836:	22 50       	subi	r18, 0x02	; 2
     838:	31 09       	sbc	r19, r1
     83a:	24 17       	cp	r18, r20
     83c:	35 07       	cpc	r19, r21
     83e:	d8 f6       	brcc	.-74     	; 0x7f6 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <spi_init>:

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     846:	e1 e6       	ldi	r30, 0x61	; 97
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	88 60       	ori	r24, 0x08	; 8
     84e:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
     850:	88 b3       	in	r24, 0x18	; 24
     852:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
     854:	87 b3       	in	r24, 0x17	; 23
     856:	87 60       	ori	r24, 0x07	; 7
     858:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
     85a:	80 e5       	ldi	r24, 0x50	; 80
     85c:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	8e b9       	out	0x0e, r24	; 14
     862:	08 95       	ret

00000864 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     864:	8f e5       	ldi	r24, 0x5F	; 95
     866:	9a ee       	ldi	r25, 0xEA	; 234
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <lcd_init+0x4>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <lcd_init+0xa>
     86e:	00 00       	nop
     870:	23 e0       	ldi	r18, 0x03	; 3
     872:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
     874:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
     876:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     878:	77 9b       	sbis	0x0e, 7	; 14
     87a:	fe cf       	rjmp	.-4      	; 0x878 <lcd_init+0x14>
        SPDR = 0x30;
     87c:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     87e:	77 9b       	sbis	0x0e, 7	; 14
     880:	fe cf       	rjmp	.-4      	; 0x87e <lcd_init+0x1a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     882:	80 91 62 00 	lds	r24, 0x0062
     886:	88 60       	ori	r24, 0x08	; 8
     888:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     88c:	80 91 62 00 	lds	r24, 0x0062
     890:	87 7f       	andi	r24, 0xF7	; 247
     892:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     896:	85 ec       	ldi	r24, 0xC5	; 197
     898:	8a 95       	dec	r24
     89a:	f1 f7       	brne	.-4      	; 0x898 <lcd_init+0x34>
     89c:	00 00       	nop
     89e:	21 50       	subi	r18, 0x01	; 1
     8a0:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
     8a2:	49 f7       	brne	.-46     	; 0x876 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
     8a4:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8a6:	77 9b       	sbis	0x0e, 7	; 14
     8a8:	fe cf       	rjmp	.-4      	; 0x8a6 <lcd_init+0x42>
    SPDR = 0x38;
     8aa:	88 e3       	ldi	r24, 0x38	; 56
     8ac:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8ae:	77 9b       	sbis	0x0e, 7	; 14
     8b0:	fe cf       	rjmp	.-4      	; 0x8ae <lcd_init+0x4a>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     8b2:	80 91 62 00 	lds	r24, 0x0062
     8b6:	88 60       	ori	r24, 0x08	; 8
     8b8:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     8bc:	80 91 62 00 	lds	r24, 0x0062
     8c0:	87 7f       	andi	r24, 0xF7	; 247
     8c2:	80 93 62 00 	sts	0x0062, r24
     8c6:	95 ec       	ldi	r25, 0xC5	; 197
     8c8:	9a 95       	dec	r25
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <lcd_init+0x64>
     8cc:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     8ce:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8d0:	77 9b       	sbis	0x0e, 7	; 14
     8d2:	fe cf       	rjmp	.-4      	; 0x8d0 <lcd_init+0x6c>
    SPDR = 0x08;
     8d4:	88 e0       	ldi	r24, 0x08	; 8
     8d6:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8d8:	77 9b       	sbis	0x0e, 7	; 14
     8da:	fe cf       	rjmp	.-4      	; 0x8d8 <lcd_init+0x74>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     8dc:	80 91 62 00 	lds	r24, 0x0062
     8e0:	88 60       	ori	r24, 0x08	; 8
     8e2:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     8e6:	80 91 62 00 	lds	r24, 0x0062
     8ea:	87 7f       	andi	r24, 0xF7	; 247
     8ec:	80 93 62 00 	sts	0x0062, r24
     8f0:	85 ec       	ldi	r24, 0xC5	; 197
     8f2:	8a 95       	dec	r24
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_init+0x8e>
     8f6:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     8f8:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     8fa:	77 9b       	sbis	0x0e, 7	; 14
     8fc:	fe cf       	rjmp	.-4      	; 0x8fa <lcd_init+0x96>
    SPDR = 0x01;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     902:	77 9b       	sbis	0x0e, 7	; 14
     904:	fe cf       	rjmp	.-4      	; 0x902 <lcd_init+0x9e>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     906:	80 91 62 00 	lds	r24, 0x0062
     90a:	88 60       	ori	r24, 0x08	; 8
     90c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     910:	80 91 62 00 	lds	r24, 0x0062
     914:	87 7f       	andi	r24, 0xF7	; 247
     916:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     91a:	8f ef       	ldi	r24, 0xFF	; 255
     91c:	98 e1       	ldi	r25, 0x18	; 24
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	f1 f7       	brne	.-4      	; 0x91e <lcd_init+0xba>
     922:	00 c0       	rjmp	.+0      	; 0x924 <lcd_init+0xc0>
     924:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
     926:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     928:	77 9b       	sbis	0x0e, 7	; 14
     92a:	fe cf       	rjmp	.-4      	; 0x928 <lcd_init+0xc4>
    SPDR = 0x06;
     92c:	86 e0       	ldi	r24, 0x06	; 6
     92e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     930:	77 9b       	sbis	0x0e, 7	; 14
     932:	fe cf       	rjmp	.-4      	; 0x930 <lcd_init+0xcc>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     934:	80 91 62 00 	lds	r24, 0x0062
     938:	88 60       	ori	r24, 0x08	; 8
     93a:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     93e:	80 91 62 00 	lds	r24, 0x0062
     942:	87 7f       	andi	r24, 0xF7	; 247
     944:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     948:	95 ec       	ldi	r25, 0xC5	; 197
     94a:	9a 95       	dec	r25
     94c:	f1 f7       	brne	.-4      	; 0x94a <lcd_init+0xe6>
     94e:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
     950:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     952:	77 9b       	sbis	0x0e, 7	; 14
     954:	fe cf       	rjmp	.-4      	; 0x952 <lcd_init+0xee>
    SPDR = 0x0E;
     956:	8e e0       	ldi	r24, 0x0E	; 14
     958:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
     95a:	77 9b       	sbis	0x0e, 7	; 14
     95c:	fe cf       	rjmp	.-4      	; 0x95a <lcd_init+0xf6>
#include "lcd.h"

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
     95e:	80 91 62 00 	lds	r24, 0x0062
     962:	88 60       	ori	r24, 0x08	; 8
     964:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
     968:	80 91 62 00 	lds	r24, 0x0062
     96c:	87 7f       	andi	r24, 0xF7	; 247
     96e:	80 93 62 00 	sts	0x0062, r24
     972:	85 ec       	ldi	r24, 0xC5	; 197
     974:	8a 95       	dec	r24
     976:	f1 f7       	brne	.-4      	; 0x974 <lcd_init+0x110>
     978:	00 00       	nop
     97a:	08 95       	ret

0000097c <USART1_Init>:
#include "uart.h"


void USART1_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
     97c:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
     980:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     984:	88 e1       	ldi	r24, 0x18	; 24
     986:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (3<<UCSZ10);
     98a:	86 e0       	ldi	r24, 0x06	; 6
     98c:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	81 ee       	ldi	r24, 0xE1	; 225
     994:	94 e0       	ldi	r25, 0x04	; 4
     996:	21 50       	subi	r18, 0x01	; 1
     998:	80 40       	sbci	r24, 0x00	; 0
     99a:	90 40       	sbci	r25, 0x00	; 0
     99c:	e1 f7       	brne	.-8      	; 0x996 <USART1_Init+0x1a>
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <USART1_Init+0x24>
     9a0:	00 00       	nop
     9a2:	08 95       	ret

000009a4 <USART1_Transmit>:
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     9a4:	90 91 9b 00 	lds	r25, 0x009B
     9a8:	95 ff       	sbrs	r25, 5
     9aa:	fc cf       	rjmp	.-8      	; 0x9a4 <USART1_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     9ac:	80 93 9c 00 	sts	0x009C, r24
     9b0:	08 95       	ret

000009b2 <USART1_send_string>:
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 81       	ld	r18, Z
     9b6:	22 23       	and	r18, r18
     9b8:	51 f0       	breq	.+20     	; 0x9ce <USART1_send_string+0x1c>
     9ba:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     9bc:	90 91 9b 00 	lds	r25, 0x009B
     9c0:	95 ff       	sbrs	r25, 5
     9c2:	fc cf       	rjmp	.-8      	; 0x9bc <USART1_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     9c4:	20 93 9c 00 	sts	0x009C, r18
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     9c8:	21 91       	ld	r18, Z+
     9ca:	21 11       	cpse	r18, r1
     9cc:	f7 cf       	rjmp	.-18     	; 0x9bc <USART1_send_string+0xa>
     9ce:	08 95       	ret

000009d0 <USART1_Receive>:
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     9d0:	80 91 9b 00 	lds	r24, 0x009B
     9d4:	87 ff       	sbrs	r24, 7
     9d6:	fc cf       	rjmp	.-8      	; 0x9d0 <USART1_Receive>
    return UDR1;
     9d8:	80 91 9c 00 	lds	r24, 0x009C
}
     9dc:	08 95       	ret

000009de <USART1_Receive_String>:

void USART1_Receive_String(unsigned char *str){
     9de:	dc 01       	movw	r26, r24
     9e0:	fc 01       	movw	r30, r24
     9e2:	9c 01       	movw	r18, r24
     9e4:	2b 5f       	subi	r18, 0xFB	; 251
     9e6:	3f 4f       	sbci	r19, 0xFF	; 255
    
    // return 255;
    /**********
    * This is the original
    ***********/
    while (!(UCSR1A & (1<<RXC1)));
     9e8:	90 91 9b 00 	lds	r25, 0x009B
     9ec:	97 ff       	sbrs	r25, 7
     9ee:	fc cf       	rjmp	.-8      	; 0x9e8 <USART1_Receive_String+0xa>
    return UDR1;
     9f0:	90 91 9c 00 	lds	r25, 0x009C

void USART1_Receive_String(unsigned char *str){
    int i = 0;
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     9f4:	9e 37       	cpi	r25, 0x7E	; 126
     9f6:	29 f0       	breq	.+10     	; 0xa02 <USART1_Receive_String+0x24>
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
     9f8:	e2 17       	cp	r30, r18
     9fa:	f3 07       	cpc	r31, r19
     9fc:	19 f0       	breq	.+6      	; 0xa04 <USART1_Receive_String+0x26>
            str[2] = 75;
            str[3] = END_STRING;
            str[4] = '\0';
            break;
        }
        str[i] = c;
     9fe:	91 93       	st	Z+, r25
     a00:	f3 cf       	rjmp	.-26     	; 0x9e8 <USART1_Receive_String+0xa>
     a02:	08 95       	ret
    char c;

    while ((c = USART1_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
     a04:	82 e3       	ldi	r24, 0x32	; 50
     a06:	8c 93       	st	X, r24
            str[1] = 25;
     a08:	89 e1       	ldi	r24, 0x19	; 25
     a0a:	11 96       	adiw	r26, 0x01	; 1
     a0c:	8c 93       	st	X, r24
     a0e:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 75;
     a10:	8b e4       	ldi	r24, 0x4B	; 75
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8c 93       	st	X, r24
     a16:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
     a18:	8e e7       	ldi	r24, 0x7E	; 126
     a1a:	13 96       	adiw	r26, 0x03	; 3
     a1c:	8c 93       	st	X, r24
     a1e:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
     a20:	14 96       	adiw	r26, 0x04	; 4
     a22:	1c 92       	st	X, r1
            break;
     a24:	08 95       	ret

00000a26 <USART1_flush>:
        str[i] = c;
        ++i;
    }
}

void USART1_flush(){
     a26:	ee e3       	ldi	r30, 0x3E	; 62
     a28:	f1 e0       	ldi	r31, 0x01	; 1
     a2a:	96 e4       	ldi	r25, 0x46	; 70
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     a2c:	80 91 9b 00 	lds	r24, 0x009B
     a30:	85 ff       	sbrs	r24, 5
     a32:	fc cf       	rjmp	.-8      	; 0xa2c <USART1_flush+0x6>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     a34:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     a38:	91 91       	ld	r25, Z+
     a3a:	91 11       	cpse	r25, r1
     a3c:	f7 cf       	rjmp	.-18     	; 0xa2c <USART1_flush+0x6>
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     a3e:	80 91 9b 00 	lds	r24, 0x009B
     a42:	87 ff       	sbrs	r24, 7
     a44:	0c c0       	rjmp	.+24     	; 0xa5e <USART1_flush+0x38>
        dummy = UDR1;
     a46:	90 91 9c 00 	lds	r25, 0x009C
    UCSR1C = (3<<UCSZ10);
    _delay_ms(100);
}
void USART1_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
     a4a:	80 91 9b 00 	lds	r24, 0x009B
     a4e:	85 ff       	sbrs	r24, 5
     a50:	fc cf       	rjmp	.-8      	; 0xa4a <USART1_flush+0x24>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
     a52:	90 93 9c 00 	sts	0x009C, r25
}

void USART1_flush(){
    unsigned char dummy;
    USART1_send_string((unsigned char *)"Flushing UART1");
    while (UCSR1A & (1 << RXC1)){
     a56:	80 91 9b 00 	lds	r24, 0x009B
     a5a:	87 fd       	sbrc	r24, 7
     a5c:	f4 cf       	rjmp	.-24     	; 0xa46 <USART1_flush+0x20>
     a5e:	08 95       	ret

00000a60 <USART0_Init>:
}


void USART0_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     a60:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char)ubrr;
     a64:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */ 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     a66:	88 e1       	ldi	r24, 0x18	; 24
     a68:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */ 
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
     a6a:	8e e0       	ldi	r24, 0x0E	; 14
     a6c:	80 93 95 00 	sts	0x0095, r24
     a70:	2f ef       	ldi	r18, 0xFF	; 255
     a72:	81 ee       	ldi	r24, 0xE1	; 225
     a74:	94 e0       	ldi	r25, 0x04	; 4
     a76:	21 50       	subi	r18, 0x01	; 1
     a78:	80 40       	sbci	r24, 0x00	; 0
     a7a:	90 40       	sbci	r25, 0x00	; 0
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <USART0_Init+0x16>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <USART0_Init+0x20>
     a80:	00 00       	nop
     a82:	08 95       	ret

00000a84 <USART0_Transmit>:
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     a84:	5d 9b       	sbis	0x0b, 5	; 11
     a86:	fe cf       	rjmp	.-4      	; 0xa84 <USART0_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     a88:	8c b9       	out	0x0c, r24	; 12
     a8a:	08 95       	ret

00000a8c <USART0_send_string>:
}

void USART0_send_string(unsigned char *data){
     a8c:	fc 01       	movw	r30, r24
    int i = 0;
    while (data[i] != '\0'){
     a8e:	90 81       	ld	r25, Z
     a90:	99 23       	and	r25, r25
     a92:	39 f0       	breq	.+14     	; 0xaa2 <USART0_send_string+0x16>
     a94:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C = (1 << USBS0) | (3<<UCSZ00);
    _delay_ms(100);
}
void USART0_Transmit(unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR0A & (1<<UDRE0)) );
     a96:	5d 9b       	sbis	0x0b, 5	; 11
     a98:	fe cf       	rjmp	.-4      	; 0xa96 <USART0_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR0 = data;
     a9a:	9c b9       	out	0x0c, r25	; 12
}

void USART0_send_string(unsigned char *data){
    int i = 0;
    while (data[i] != '\0'){
     a9c:	91 91       	ld	r25, Z+
     a9e:	91 11       	cpse	r25, r1
     aa0:	fa cf       	rjmp	.-12     	; 0xa96 <USART0_send_string+0xa>
     aa2:	08 95       	ret

00000aa4 <USART0_Receive>:
        USART0_Transmit(data[i]);
        ++i;
    }
}

unsigned char USART0_Receive(void){
     aa4:	80 e8       	ldi	r24, 0x80	; 128
     aa6:	9d e8       	ldi	r25, 0x8D	; 141
     aa8:	ab e5       	ldi	r26, 0x5B	; 91
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	04 c0       	rjmp	.+8      	; 0xab6 <USART0_Receive+0x12>
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	a1 09       	sbc	r26, r1
     ab2:	b1 09       	sbc	r27, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
     ab4:	21 f0       	breq	.+8      	; 0xabe <USART0_Receive+0x1a>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
     ab6:	5f 9b       	sbis	0x0b, 7	; 11
     ab8:	fa cf       	rjmp	.-12     	; 0xaae <USART0_Receive+0xa>
            /* Get and return received data from buffer */ 
            return UDR0;
     aba:	8c b1       	in	r24, 0x0c	; 12
     abc:	08 95       	ret
        }
    } while (--timeout);
    return 255;
     abe:	8f ef       	ldi	r24, 0xFF	; 255
    /********
    * This is the original
    ************/
    //while (!(UCSR0A & (1<<RXC0)));
    //return UDR0;
}
     ac0:	08 95       	ret

00000ac2 <USART0_Receive_String>:

void USART0_Receive_String(unsigned char *str){
     ac2:	dc 01       	movw	r26, r24
     ac4:	fc 01       	movw	r30, r24
     ac6:	9c 01       	movw	r18, r24
     ac8:	2b 5f       	subi	r18, 0xFB	; 251
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	40 e8       	ldi	r20, 0x80	; 128
     ace:	5d e8       	ldi	r21, 0x8D	; 141
     ad0:	6b e5       	ldi	r22, 0x5B	; 91
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <USART0_Receive_String+0x1e>
     ad6:	41 50       	subi	r20, 0x01	; 1
     ad8:	51 09       	sbc	r21, r1
     ada:	61 09       	sbc	r22, r1
     adc:	71 09       	sbc	r23, r1
    do {
        if((UCSR0A & (1<<RXC0))){
            /* Get and return received data from buffer */ 
            return UDR0;
        }
    } while (--timeout);
     ade:	61 f0       	breq	.+24     	; 0xaf8 <USART0_Receive_String+0x36>

unsigned char USART0_Receive(void){
    unsigned long timeout = 6000000;    //This happens to be about 3 seconds
    /* Wait for data to be received or for timeout*/ 
    do {
        if((UCSR0A & (1<<RXC0))){
     ae0:	5f 9b       	sbis	0x0b, 7	; 11
     ae2:	f9 cf       	rjmp	.-14     	; 0xad6 <USART0_Receive_String+0x14>
            /* Get and return received data from buffer */ 
            return UDR0;
     ae4:	9c b1       	in	r25, 0x0c	; 12

void USART0_Receive_String(unsigned char *str){
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
     ae6:	9e 37       	cpi	r25, 0x7E	; 126
     ae8:	b1 f0       	breq	.+44     	; 0xb16 <USART0_Receive_String+0x54>
        if (c == 255 || i > MAX_STRING_SIZE - 1){
     aea:	9f 3f       	cpi	r25, 0xFF	; 255
     aec:	29 f0       	breq	.+10     	; 0xaf8 <USART0_Receive_String+0x36>
     aee:	e2 17       	cp	r30, r18
     af0:	f3 07       	cpc	r31, r19
     af2:	11 f0       	breq	.+4      	; 0xaf8 <USART0_Receive_String+0x36>
            str[2] = 50;
            str[3] = END_STRING;
            str[4] = '\0';
            return;
        }
        str[i] = c;
     af4:	91 93       	st	Z+, r25
     af6:	ea cf       	rjmp	.-44     	; 0xacc <USART0_Receive_String+0xa>
    int i = 0;
    unsigned char c;

    while ((c = (unsigned char)USART0_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
        if (c == 255 || i > MAX_STRING_SIZE - 1){
            str[0] = 50;
     af8:	82 e3       	ldi	r24, 0x32	; 50
     afa:	8c 93       	st	X, r24
            str[1] = 50;
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	8c 93       	st	X, r24
     b00:	11 97       	sbiw	r26, 0x01	; 1
            str[2] = 50;
     b02:	12 96       	adiw	r26, 0x02	; 2
     b04:	8c 93       	st	X, r24
     b06:	12 97       	sbiw	r26, 0x02	; 2
            str[3] = END_STRING;
     b08:	8e e7       	ldi	r24, 0x7E	; 126
     b0a:	13 96       	adiw	r26, 0x03	; 3
     b0c:	8c 93       	st	X, r24
     b0e:	13 97       	sbiw	r26, 0x03	; 3
            str[4] = '\0';
     b10:	14 96       	adiw	r26, 0x04	; 4
     b12:	1c 92       	st	X, r1
            return;
     b14:	08 95       	ret
     b16:	08 95       	ret

00000b18 <USART0_flush>:
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
     b18:	5f 9b       	sbis	0x0b, 7	; 11
     b1a:	03 c0       	rjmp	.+6      	; 0xb22 <USART0_flush+0xa>
        dummy = UDR0;
     b1c:	8c b1       	in	r24, 0x0c	; 12
    }
}

void USART0_flush(){
    unsigned char dummy;
    while (UCSR0A & (1 << RXC0)){
     b1e:	5f 99       	sbic	0x0b, 7	; 11
     b20:	fd cf       	rjmp	.-6      	; 0xb1c <USART0_flush+0x4>
     b22:	08 95       	ret

00000b24 <init_esc>:
void init_motors(){
    init_esc();
    set_16bitPWM1();
}

void init_esc(){
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
     b28:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b2a:	ef e6       	ldi	r30, 0x6F	; 111
     b2c:	f7 e1       	ldi	r31, 0x17	; 23
     b2e:	31 97       	sbiw	r30, 0x01	; 1
     b30:	f1 f7       	brne	.-4      	; 0xb2e <init_esc+0xa>
     b32:	00 c0       	rjmp	.+0      	; 0xb34 <init_esc+0x10>
     b34:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
     b36:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b38:	ff ef       	ldi	r31, 0xFF	; 255
     b3a:	23 ed       	ldi	r18, 0xD3	; 211
     b3c:	30 e3       	ldi	r19, 0x30	; 48
     b3e:	f1 50       	subi	r31, 0x01	; 1
     b40:	20 40       	sbci	r18, 0x00	; 0
     b42:	30 40       	sbci	r19, 0x00	; 0
     b44:	e1 f7       	brne	.-8      	; 0xb3e <init_esc+0x1a>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <init_esc+0x24>
     b48:	00 00       	nop
     b4a:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
     b4c:	69 f7       	brne	.-38     	; 0xb28 <init_esc+0x4>
        PORTB |= (1 << 4);
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
        _delay_ms(1000);
    }
}
     b4e:	08 95       	ret

00000b50 <set_16bitPWM1>:

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
     b50:	8f b5       	in	r24, 0x2f	; 47
     b52:	80 68       	ori	r24, 0x80	; 128
     b54:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
     b56:	8f b5       	in	r24, 0x2f	; 47
     b58:	80 62       	ori	r24, 0x20	; 32
     b5a:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
     b5c:	8f b5       	in	r24, 0x2f	; 47
     b5e:	88 60       	ori	r24, 0x08	; 8
     b60:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
     b62:	8f b5       	in	r24, 0x2f	; 47
     b64:	82 60       	ori	r24, 0x02	; 2
     b66:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
     b68:	8e b5       	in	r24, 0x2e	; 46
     b6a:	88 61       	ori	r24, 0x18	; 24
     b6c:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
     b6e:	8e b5       	in	r24, 0x2e	; 46
     b70:	82 60       	ori	r24, 0x02	; 2
     b72:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     b74:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     b76:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     b78:	21 e0       	ldi	r18, 0x01	; 1
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	3d bd       	out	0x2d, r19	; 45
     b7e:	2c bd       	out	0x2c, r18	; 44
    sei();
     b80:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     b82:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	9f ef       	ldi	r25, 0xFF	; 255
     b88:	97 bd       	out	0x27, r25	; 39
     b8a:	86 bd       	out	0x26, r24	; 38
     b8c:	2f ef       	ldi	r18, 0xFF	; 255
     b8e:	81 ee       	ldi	r24, 0xE1	; 225
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	21 50       	subi	r18, 0x01	; 1
     b94:	80 40       	sbci	r24, 0x00	; 0
     b96:	90 40       	sbci	r25, 0x00	; 0
     b98:	e1 f7       	brne	.-8      	; 0xb92 <set_16bitPWM1+0x42>
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <set_16bitPWM1+0x4c>
     b9c:	00 00       	nop
     b9e:	08 95       	ret

00000ba0 <init_motors>:
#include "motors.h"

void init_motors(){
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	90 e0       	ldi	r25, 0x00	; 0
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
        PORTB |= (1 << 4);
     ba4:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba6:	ef e6       	ldi	r30, 0x6F	; 111
     ba8:	f7 e1       	ldi	r31, 0x17	; 23
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	f1 f7       	brne	.-4      	; 0xbaa <init_motors+0xa>
     bae:	00 c0       	rjmp	.+0      	; 0xbb0 <init_motors+0x10>
     bb0:	00 00       	nop
        _delay_us(STOP);
        PORTB &= ~(1 << 4);
     bb2:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bb4:	ff ef       	ldi	r31, 0xFF	; 255
     bb6:	23 ed       	ldi	r18, 0xD3	; 211
     bb8:	30 e3       	ldi	r19, 0x30	; 48
     bba:	f1 50       	subi	r31, 0x01	; 1
     bbc:	20 40       	sbci	r18, 0x00	; 0
     bbe:	30 40       	sbci	r19, 0x00	; 0
     bc0:	e1 f7       	brne	.-8      	; 0xbba <init_motors+0x1a>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <init_motors+0x24>
     bc4:	00 00       	nop
     bc6:	01 97       	sbiw	r24, 0x01	; 1
    set_16bitPWM1();
}

void init_esc(){
    int i;
    for (i = 0; i < 3; ++i){
     bc8:	69 f7       	brne	.-38     	; 0xba4 <init_motors+0x4>
#include "motors.h"

void init_motors(){
    init_esc();
    set_16bitPWM1();
     bca:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <set_16bitPWM1>

00000bce <TIM16_WriteTCNT1>:
    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
     bce:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
     bd0:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
     bd2:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
     bd4:	3d bd       	out	0x2d, r19	; 45
     bd6:	2c bd       	out	0x2c, r18	; 44
    sei();
     bd8:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
     bda:	9f bf       	out	0x3f, r25	; 63
     bdc:	08 95       	ret

00000bde <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
     bde:	4f 92       	push	r4
     be0:	5f 92       	push	r5
     be2:	6f 92       	push	r6
     be4:	7f 92       	push	r7
     be6:	8f 92       	push	r8
     be8:	9f 92       	push	r9
     bea:	af 92       	push	r10
     bec:	bf 92       	push	r11
     bee:	cf 92       	push	r12
     bf0:	df 92       	push	r13
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	2b 01       	movw	r4, r22
     c00:	3c 01       	movw	r6, r24
     c02:	49 01       	movw	r8, r18
     c04:	5a 01       	movw	r10, r20
     c06:	67 01       	movw	r12, r14
     c08:	78 01       	movw	r14, r16
    
    if (left < (MIN_INPUT + SATURATE_DIFFERENCE)){
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 ef       	ldi	r20, 0xF0	; 240
     c10:	51 e4       	ldi	r21, 0x41	; 65
     c12:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__cmpsf2>
     c16:	87 fd       	sbrc	r24, 7
     c18:	64 c0       	rjmp	.+200    	; 0xce2 <move+0x104>
        left = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (left > (MAX_INPUT - SATURATE_DIFFERENCE)){
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	4c e8       	ldi	r20, 0x8C	; 140
     c20:	52 e4       	ldi	r21, 0x42	; 66
     c22:	c3 01       	movw	r24, r6
     c24:	b2 01       	movw	r22, r4
     c26:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__gesf2>
     c2a:	18 16       	cp	r1, r24
     c2c:	0c f0       	brlt	.+2      	; 0xc30 <move+0x52>
     c2e:	67 c0       	rjmp	.+206    	; 0xcfe <move+0x120>
     c30:	08 ef       	ldi	r16, 0xF8	; 248
     c32:	1c e0       	ldi	r17, 0x0C	; 12
        left = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (right < (MIN_INPUT + SATURATE_DIFFERENCE)){
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	40 ef       	ldi	r20, 0xF0	; 240
     c3a:	51 e4       	ldi	r21, 0x41	; 65
     c3c:	c5 01       	movw	r24, r10
     c3e:	b4 01       	movw	r22, r8
     c40:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__cmpsf2>
     c44:	87 fd       	sbrc	r24, 7
     c46:	58 c0       	rjmp	.+176    	; 0xcf8 <move+0x11a>
        right = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (right > (MAX_INPUT - SATURATE_DIFFERENCE)){
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	4c e8       	ldi	r20, 0x8C	; 140
     c4e:	52 e4       	ldi	r21, 0x42	; 66
     c50:	c5 01       	movw	r24, r10
     c52:	b4 01       	movw	r22, r8
     c54:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__gesf2>
     c58:	18 16       	cp	r1, r24
     c5a:	0c f0       	brlt	.+2      	; 0xc5e <move+0x80>
     c5c:	6d c0       	rjmp	.+218    	; 0xd38 <move+0x15a>
     c5e:	c8 ef       	ldi	r28, 0xF8	; 248
     c60:	dc e0       	ldi	r29, 0x0C	; 12
        right = MAX_INPUT - SATURATE_DIFFERENCE;
    }
    if (z < (MIN_INPUT + SATURATE_DIFFERENCE)){
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 ef       	ldi	r20, 0xF0	; 240
     c68:	51 e4       	ldi	r21, 0x41	; 65
     c6a:	c7 01       	movw	r24, r14
     c6c:	b6 01       	movw	r22, r12
     c6e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__cmpsf2>
     c72:	87 fd       	sbrc	r24, 7
     c74:	39 c0       	rjmp	.+114    	; 0xce8 <move+0x10a>
        z = MIN_INPUT + SATURATE_DIFFERENCE;
    }
    if (z > (MAX_INPUT - SATURATE_DIFFERENCE)){
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	4c e8       	ldi	r20, 0x8C	; 140
     c7c:	52 e4       	ldi	r21, 0x42	; 66
     c7e:	c7 01       	movw	r24, r14
     c80:	b6 01       	movw	r22, r12
     c82:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__gesf2>
     c86:	18 16       	cp	r1, r24
     c88:	0c f0       	brlt	.+2      	; 0xc8c <move+0xae>
     c8a:	4b c0       	rjmp	.+150    	; 0xd22 <move+0x144>
     c8c:	83 e3       	ldi	r24, 0x33	; 51
     c8e:	c8 2e       	mov	r12, r24
     c90:	dc 2c       	mov	r13, r12
     c92:	ec 2c       	mov	r14, r12
     c94:	8f e3       	ldi	r24, 0x3F	; 63
     c96:	f8 2e       	mov	r15, r24

    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different speed controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
     c98:	66 b5       	in	r22, 0x26	; 38
     c9a:	77 b5       	in	r23, 0x27	; 39
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
     ca4:	a7 01       	movw	r20, r14
     ca6:	96 01       	movw	r18, r12
     ca8:	0e 94 05 0b 	call	0x160a	; 0x160a <__mulsf3>
     cac:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__fixunssfsi>
    OCR1A = left_speed;
     cb0:	1b bd       	out	0x2b, r17	; 43
     cb2:	0a bd       	out	0x2a, r16	; 42
    OCR1B = right_speed;
     cb4:	d9 bd       	out	0x29, r29	; 41
     cb6:	c8 bd       	out	0x28, r28	; 40
    OCR1C = z_speed;
     cb8:	70 93 79 00 	sts	0x0079, r23
     cbc:	60 93 78 00 	sts	0x0078, r22

}
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	bf 90       	pop	r11
     cd2:	af 90       	pop	r10
     cd4:	9f 90       	pop	r9
     cd6:	8f 90       	pop	r8
     cd8:	7f 90       	pop	r7
     cda:	6f 90       	pop	r6
     cdc:	5f 90       	pop	r5
     cde:	4f 90       	pop	r4
     ce0:	08 95       	ret
     ce2:	08 e7       	ldi	r16, 0x78	; 120
     ce4:	1a e0       	ldi	r17, 0x0A	; 10
     ce6:	a6 cf       	rjmp	.-180    	; 0xc34 <move+0x56>
     ce8:	9a e9       	ldi	r25, 0x9A	; 154
     cea:	c9 2e       	mov	r12, r25
     cec:	99 e9       	ldi	r25, 0x99	; 153
     cee:	d9 2e       	mov	r13, r25
     cf0:	ed 2c       	mov	r14, r13
     cf2:	9e e3       	ldi	r25, 0x3E	; 62
     cf4:	f9 2e       	mov	r15, r25
     cf6:	d0 cf       	rjmp	.-96     	; 0xc98 <move+0xba>
     cf8:	c8 e7       	ldi	r28, 0x78	; 120
     cfa:	da e0       	ldi	r29, 0x0A	; 10
     cfc:	b2 cf       	rjmp	.-156    	; 0xc62 <move+0x84>
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e8       	ldi	r20, 0x80	; 128
     d04:	51 e4       	ldi	r21, 0x41	; 65
     d06:	c3 01       	movw	r24, r6
     d08:	b2 01       	movw	r22, r4
     d0a:	0e 94 05 0b 	call	0x160a	; 0x160a <__mulsf3>
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e8       	ldi	r19, 0x80	; 128
     d12:	49 e0       	ldi	r20, 0x09	; 9
     d14:	55 e4       	ldi	r21, 0x45	; 69
     d16:	0e 94 94 08 	call	0x1128	; 0x1128 <__addsf3>
     d1a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__fixunssfsi>
     d1e:	8b 01       	movw	r16, r22
     d20:	89 cf       	rjmp	.-238    	; 0xc34 <move+0x56>
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	48 ec       	ldi	r20, 0xC8	; 200
     d28:	52 e4       	ldi	r21, 0x42	; 66
     d2a:	c7 01       	movw	r24, r14
     d2c:	b6 01       	movw	r22, r12
     d2e:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divsf3>
     d32:	6b 01       	movw	r12, r22
     d34:	7c 01       	movw	r14, r24
     d36:	b0 cf       	rjmp	.-160    	; 0xc98 <move+0xba>
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e8       	ldi	r20, 0x80	; 128
     d3e:	51 e4       	ldi	r21, 0x41	; 65
     d40:	c5 01       	movw	r24, r10
     d42:	b4 01       	movw	r22, r8
     d44:	0e 94 05 0b 	call	0x160a	; 0x160a <__mulsf3>
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e8       	ldi	r19, 0x80	; 128
     d4c:	49 e0       	ldi	r20, 0x09	; 9
     d4e:	55 e4       	ldi	r21, 0x45	; 69
     d50:	0e 94 94 08 	call	0x1128	; 0x1128 <__addsf3>
     d54:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__fixunssfsi>
     d58:	eb 01       	movw	r28, r22
     d5a:	83 cf       	rjmp	.-250    	; 0xc62 <move+0x84>

00000d5c <init_HMC5883L>:
#include "magnometer.h"

void init_HMC5883L(void){

    i2c_start(HMC5883L_WRITE);
     d5c:	8c e3       	ldi	r24, 0x3C	; 60
     d5e:	0e 94 19 02 	call	0x432	; 0x432 <i2c_start>
    i2c_write(0x00); // set pointer to CRA
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0e 94 3b 02 	call	0x476	; 0x476 <i2c_write>
    i2c_write(0x70); // write 0x70 to CRA
     d68:	80 e7       	ldi	r24, 0x70	; 112
     d6a:	0e 94 3b 02 	call	0x476	; 0x476 <i2c_write>
    i2c_stop();
     d6e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
     d72:	8c e3       	ldi	r24, 0x3C	; 60
     d74:	0e 94 19 02 	call	0x432	; 0x432 <i2c_start>
    i2c_write(0x01); // set pointer to CRB
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	0e 94 3b 02 	call	0x476	; 0x476 <i2c_write>
    i2c_write(0xA0);
     d7e:	80 ea       	ldi	r24, 0xA0	; 160
     d80:	0e 94 3b 02 	call	0x476	; 0x476 <i2c_write>
    i2c_stop();
     d84:	0e 94 58 03 	call	0x6b0	; 0x6b0 <i2c_stop>

    i2c_start(HMC5883L_WRITE);
     d88:	8c e3       	ldi	r24, 0x3C	; 60
     d8a:	0e 94 19 02 	call	0x432	; 0x432 <i2c_start>
    i2c_write(0x02); // set pointer to measurement mode
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	0e 94 3b 02 	call	0x476	; 0x476 <i2c_write>
    i2c_write(0x00); // continous measurement
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	0e 94 3b 02 	call	0x476	; 0x476 <i2c_write>
    i2c_stop();
     d9a:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <i2c_stop>

00000d9e <getHeading>:
}
float getHeading(int16_t *x, int16_t *y, int16_t *z){
     d9e:	cf 92       	push	r12
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	8c 01       	movw	r16, r24
     db0:	eb 01       	movw	r28, r22
     db2:	7a 01       	movw	r14, r20

    float headingDegrees;
    
    i2c_start(HMC5883L_WRITE);
     db4:	8c e3       	ldi	r24, 0x3C	; 60
     db6:	0e 94 19 02 	call	0x432	; 0x432 <i2c_start>
    i2c_write(0x03); // set pointer to X axis MSB
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	0e 94 3b 02 	call	0x476	; 0x476 <i2c_write>
    i2c_stop();
     dc0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <i2c_stop>

    i2c_start(HMC5883L_READ);
     dc4:	8d e3       	ldi	r24, 0x3D	; 61
     dc6:	0e 94 19 02 	call	0x432	; 0x432 <i2c_start>

    *x = ((uint8_t)i2c_read_ack())<<8;
     dca:	0e 94 4d 02 	call	0x49a	; 0x49a <i2c_read_ack>
     dce:	f8 01       	movw	r30, r16
     dd0:	10 82       	st	Z, r1
     dd2:	81 83       	std	Z+1, r24	; 0x01
    *x |= i2c_read_ack();
     dd4:	0e 94 4d 02 	call	0x49a	; 0x49a <i2c_read_ack>
     dd8:	f8 01       	movw	r30, r16
     dda:	20 81       	ld	r18, Z
     ddc:	31 81       	ldd	r19, Z+1	; 0x01
     dde:	28 2b       	or	r18, r24
     de0:	31 83       	std	Z+1, r19	; 0x01
     de2:	20 83       	st	Z, r18

    *z = ((uint8_t)i2c_read_ack())<<8;
     de4:	0e 94 4d 02 	call	0x49a	; 0x49a <i2c_read_ack>
     de8:	f7 01       	movw	r30, r14
     dea:	10 82       	st	Z, r1
     dec:	81 83       	std	Z+1, r24	; 0x01
    *z |= i2c_read_ack();
     dee:	0e 94 4d 02 	call	0x49a	; 0x49a <i2c_read_ack>
     df2:	f7 01       	movw	r30, r14
     df4:	20 81       	ld	r18, Z
     df6:	31 81       	ldd	r19, Z+1	; 0x01
     df8:	28 2b       	or	r18, r24
     dfa:	31 83       	std	Z+1, r19	; 0x01
     dfc:	20 83       	st	Z, r18

    *y = ((uint8_t)i2c_read_ack())<<8;
     dfe:	0e 94 4d 02 	call	0x49a	; 0x49a <i2c_read_ack>
     e02:	18 82       	st	Y, r1
     e04:	89 83       	std	Y+1, r24	; 0x01
    *y |= i2c_read_nack();
     e06:	0e 94 57 02 	call	0x4ae	; 0x4ae <i2c_read_nack>
     e0a:	28 81       	ld	r18, Y
     e0c:	39 81       	ldd	r19, Y+1	; 0x01
     e0e:	28 2b       	or	r18, r24
     e10:	39 83       	std	Y+1, r19	; 0x01
     e12:	28 83       	st	Y, r18

    i2c_stop();
     e14:	0e 94 58 03 	call	0x6b0	; 0x6b0 <i2c_stop>

    headingDegrees = atan2((double)*y,(double)*x) * 180 / 3.141592654 + 180;
     e18:	f8 01       	movw	r30, r16
     e1a:	60 81       	ld	r22, Z
     e1c:	71 81       	ldd	r23, Z+1	; 0x01
     e1e:	07 2e       	mov	r0, r23
     e20:	00 0c       	add	r0, r0
     e22:	88 0b       	sbc	r24, r24
     e24:	99 0b       	sbc	r25, r25
     e26:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     e2a:	6b 01       	movw	r12, r22
     e2c:	7c 01       	movw	r14, r24
     e2e:	68 81       	ld	r22, Y
     e30:	79 81       	ldd	r23, Y+1	; 0x01
     e32:	07 2e       	mov	r0, r23
     e34:	00 0c       	add	r0, r0
     e36:	88 0b       	sbc	r24, r24
     e38:	99 0b       	sbc	r25, r25
     e3a:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     e3e:	a7 01       	movw	r20, r14
     e40:	96 01       	movw	r18, r12
     e42:	0e 94 13 09 	call	0x1226	; 0x1226 <atan2>
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	44 e3       	ldi	r20, 0x34	; 52
     e4c:	53 e4       	ldi	r21, 0x43	; 67
     e4e:	0e 94 05 0b 	call	0x160a	; 0x160a <__mulsf3>
     e52:	2b ed       	ldi	r18, 0xDB	; 219
     e54:	3f e0       	ldi	r19, 0x0F	; 15
     e56:	49 e4       	ldi	r20, 0x49	; 73
     e58:	50 e4       	ldi	r21, 0x40	; 64
     e5a:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divsf3>
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	44 e3       	ldi	r20, 0x34	; 52
     e64:	53 e4       	ldi	r21, 0x43	; 67
     e66:	0e 94 94 08 	call	0x1128	; 0x1128 <__addsf3>

    return headingDegrees;
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	08 95       	ret

00000e7c <get_distance>:
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	cb 01       	movw	r24, r22
     e82:	08 95       	ret

00000e84 <print_distance>:
    return 0;
}

double print_distance(unsigned int pin){
    return 0;
}
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	08 95       	ret

00000e8c <enable_laser_sensor>:
void enable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
     e8c:	43 98       	cbi	0x08, 3	; 8

    //enable analog comparator multiplexer, set SFIOR:ACME
    SFIOR |= (1 << ACME);
     e8e:	80 b5       	in	r24, 0x20	; 32
     e90:	88 60       	ori	r24, 0x08	; 8
     e92:	80 bd       	out	0x20, r24	; 32

    //set AIN1 to laser sensor pin
    ADMUX &= 0b11111000; //clear the admux input pin bits
     e94:	87 b1       	in	r24, 0x07	; 7
     e96:	88 7f       	andi	r24, 0xF8	; 248
     e98:	87 b9       	out	0x07, r24	; 7
    ADMUX |= LASER_SENSOR;  //set the new bits
     e9a:	38 9a       	sbi	0x07, 0	; 7
    
    //enable analog comparator, clear ACSR:ACD
    ACSR &= ~(1 << ACD);
     e9c:	47 98       	cbi	0x08, 7	; 8
    
    //set comparator interrupt on rising output edge, set ACSR:ACIS1, set ACSR:ACIS0
    ACSR |= (1 << ACIS1) | (1 << ACIS0);
     e9e:	88 b1       	in	r24, 0x08	; 8
     ea0:	83 60       	ori	r24, 0x03	; 3
     ea2:	88 b9       	out	0x08, r24	; 8
    
    //enable analog comparator interrupt, set ACSR:ACIE
    ACSR |= (1 << ACIE);
     ea4:	43 9a       	sbi	0x08, 3	; 8
     ea6:	08 95       	ret

00000ea8 <disable_laser_sensor>:
    
    //Be sure to handle the interrupt until ACSR:ACO goes low
}
void disable_laser_sensor(){
    //disable analog comparator interrupt, clear ACSR:ACIE
    ACSR &= ~(1 << ACIE);
     ea8:	43 98       	cbi	0x08, 3	; 8

    //disable analog comparator, set ACSR:ACD
    ACSR |= (1 << ACD);
     eaa:	47 9a       	sbi	0x08, 7	; 8

    //disable analog comparator multiplexor, clear SFIOR:ACME
    SFIOR &= ~(1 << ACME);
     eac:	80 b5       	in	r24, 0x20	; 32
     eae:	87 7f       	andi	r24, 0xF7	; 247
     eb0:	80 bd       	out	0x20, r24	; 32
     eb2:	08 95       	ret

00000eb4 <laser_off>:
}

void laser_off(){
    PORTB |= (1 << LASER);
     eb4:	c0 9a       	sbi	0x18, 0	; 24
     eb6:	08 95       	ret

00000eb8 <laser_on>:
}
void laser_on(){
    PORTB &= ~(1 << LASER);
     eb8:	c0 98       	cbi	0x18, 0	; 24
     eba:	08 95       	ret

00000ebc <calibrate_pressure_sensor>:
#define	PRESSURESENSOR_C

#include "pressuresensor.h"

void calibrate_pressure_sensor(){
	PSENSOR_MIN = get_voltage(PSENSOR_PIN);;
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 8f 03 	call	0x71e	; 0x71e <get_voltage>
     ec4:	60 93 4c 01 	sts	0x014C, r22
     ec8:	70 93 4d 01 	sts	0x014D, r23
     ecc:	80 93 4e 01 	sts	0x014E, r24
     ed0:	90 93 4f 01 	sts	0x014F, r25
     ed4:	08 95       	ret

00000ed6 <get_depth_mpa>:
}

double get_depth_mpa(){
     ed6:	8f 92       	push	r8
     ed8:	9f 92       	push	r9
     eda:	af 92       	push	r10
     edc:	bf 92       	push	r11
     ede:	cf 92       	push	r12
     ee0:	df 92       	push	r13
     ee2:	ef 92       	push	r14
     ee4:	ff 92       	push	r15
	return 1.2 * (get_voltage(PSENSOR_PIN) - PSENSOR_MIN)/(4.5-PSENSOR_MIN);
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 8f 03 	call	0x71e	; 0x71e <get_voltage>
     eee:	c0 90 4c 01 	lds	r12, 0x014C
     ef2:	d0 90 4d 01 	lds	r13, 0x014D
     ef6:	e0 90 4e 01 	lds	r14, 0x014E
     efa:	f0 90 4f 01 	lds	r15, 0x014F
     efe:	a7 01       	movw	r20, r14
     f00:	96 01       	movw	r18, r12
     f02:	0e 94 93 08 	call	0x1126	; 0x1126 <__subsf3>
     f06:	2a e9       	ldi	r18, 0x9A	; 154
     f08:	39 e9       	ldi	r19, 0x99	; 153
     f0a:	49 e9       	ldi	r20, 0x99	; 153
     f0c:	5f e3       	ldi	r21, 0x3F	; 63
     f0e:	0e 94 05 0b 	call	0x160a	; 0x160a <__mulsf3>
     f12:	4b 01       	movw	r8, r22
     f14:	5c 01       	movw	r10, r24
     f16:	a7 01       	movw	r20, r14
     f18:	96 01       	movw	r18, r12
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	80 e9       	ldi	r24, 0x90	; 144
     f20:	90 e4       	ldi	r25, 0x40	; 64
     f22:	0e 94 93 08 	call	0x1126	; 0x1126 <__subsf3>
     f26:	9b 01       	movw	r18, r22
     f28:	ac 01       	movw	r20, r24
     f2a:	c5 01       	movw	r24, r10
     f2c:	b4 01       	movw	r22, r8
     f2e:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divsf3>
}
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	df 90       	pop	r13
     f38:	cf 90       	pop	r12
     f3a:	bf 90       	pop	r11
     f3c:	af 90       	pop	r10
     f3e:	9f 90       	pop	r9
     f40:	8f 90       	pop	r8
     f42:	08 95       	ret

00000f44 <get_depth_feet>:
     f44:	8f 92       	push	r8
     f46:	9f 92       	push	r9
     f48:	af 92       	push	r10
     f4a:	bf 92       	push	r11
     f4c:	cf 92       	push	r12
     f4e:	df 92       	push	r13
     f50:	ef 92       	push	r14
     f52:	ff 92       	push	r15
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 8f 03 	call	0x71e	; 0x71e <get_voltage>
     f5c:	c0 90 4c 01 	lds	r12, 0x014C
     f60:	d0 90 4d 01 	lds	r13, 0x014D
     f64:	e0 90 4e 01 	lds	r14, 0x014E
     f68:	f0 90 4f 01 	lds	r15, 0x014F
     f6c:	a7 01       	movw	r20, r14
     f6e:	96 01       	movw	r18, r12
     f70:	0e 94 93 08 	call	0x1126	; 0x1126 <__subsf3>
     f74:	2a e9       	ldi	r18, 0x9A	; 154
     f76:	39 e9       	ldi	r19, 0x99	; 153
     f78:	49 e9       	ldi	r20, 0x99	; 153
     f7a:	5f e3       	ldi	r21, 0x3F	; 63
     f7c:	0e 94 05 0b 	call	0x160a	; 0x160a <__mulsf3>
     f80:	4b 01       	movw	r8, r22
     f82:	5c 01       	movw	r10, r24
     f84:	a7 01       	movw	r20, r14
     f86:	96 01       	movw	r18, r12
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	80 e9       	ldi	r24, 0x90	; 144
     f8e:	90 e4       	ldi	r25, 0x40	; 64
     f90:	0e 94 93 08 	call	0x1126	; 0x1126 <__subsf3>
     f94:	9b 01       	movw	r18, r22
     f96:	ac 01       	movw	r20, r24
     f98:	c5 01       	movw	r24, r10
     f9a:	b4 01       	movw	r22, r8
     f9c:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divsf3>
     fa0:	29 ef       	ldi	r18, 0xF9	; 249
     fa2:	37 e4       	ldi	r19, 0x47	; 71
     fa4:	47 ea       	ldi	r20, 0xA7	; 167
     fa6:	53 e4       	ldi	r21, 0x43	; 67
     fa8:	0e 94 05 0b 	call	0x160a	; 0x160a <__mulsf3>
     fac:	ff 90       	pop	r15
     fae:	ef 90       	pop	r14
     fb0:	df 90       	pop	r13
     fb2:	cf 90       	pop	r12
     fb4:	bf 90       	pop	r11
     fb6:	af 90       	pop	r10
     fb8:	9f 90       	pop	r9
     fba:	8f 90       	pop	r8
     fbc:	08 95       	ret

00000fbe <main>:
void turn(int degrees);
void forward();
void reverse();


int main(){
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	2f 97       	sbiw	r28, 0x0f	; 15
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
    DDRB = 0xFF;
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	87 bb       	out	0x17, r24	; 23
    PORTB = 0;
     fd6:	18 ba       	out	0x18, r1	; 24
    USART0_Init(MYUBRR);
     fd8:	87 e6       	ldi	r24, 0x67	; 103
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 30 05 	call	0xa60	; 0xa60 <USART0_Init>
    USART0_send_string((unsigned char *)"USART0 (RS232) Initialized\r");
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	0e 94 46 05 	call	0xa8c	; 0xa8c <USART0_send_string>

    enable_adc();
     fe8:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <enable_adc>
    calibrate_pressure_sensor();
     fec:	0e 94 5e 07 	call	0xebc	; 0xebc <calibrate_pressure_sensor>
    //init_HMC5883L();
    init_motors();
     ff0:	0e 94 d0 05 	call	0xba0	; 0xba0 <init_motors>
    char buffer[10];

    unsigned char data[MAX_STRING_SIZE];
    int i;
    for (i = 0; i < MAX_STRING_SIZE; ++i){
        data[i] = '\0';
     ff4:	1b 86       	std	Y+11, r1	; 0x0b
     ff6:	1c 86       	std	Y+12, r1	; 0x0c
     ff8:	1d 86       	std	Y+13, r1	; 0x0d
     ffa:	1f 86       	std	Y+15, r1	; 0x0f
    }
    data[MAX_STRING_SIZE - 2] = '~';
     ffc:	8e e7       	ldi	r24, 0x7E	; 126
     ffe:	8e 87       	std	Y+14, r24	; 0x0e

    move(50,50,50);
    1000:	e1 2c       	mov	r14, r1
    1002:	f1 2c       	mov	r15, r1
    1004:	08 e4       	ldi	r16, 0x48	; 72
    1006:	12 e4       	ldi	r17, 0x42	; 66
    1008:	a8 01       	movw	r20, r16
    100a:	97 01       	movw	r18, r14
    100c:	c8 01       	movw	r24, r16
    100e:	b7 01       	movw	r22, r14
    1010:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
        else if (strcmp((char *)data,"fff~") == 0){ //0x66 0x66 0x66 0x7e or 102 102 102 126
            calibrate_pressure_sensor();
            USART0_send_string(data);
        }
        else if (strcmp((char *)data,"222~") == 0){
            data[0] = 's';
    1014:	23 e7       	ldi	r18, 0x73	; 115
    1016:	32 2e       	mov	r3, r18
            data[1] = 't';
    1018:	34 e7       	ldi	r19, 0x74	; 116
    101a:	c3 2e       	mov	r12, r19
            data[2] = 'o';
    101c:	4f e6       	ldi	r20, 0x6F	; 111
    101e:	d4 2e       	mov	r13, r20
    }
    data[MAX_STRING_SIZE - 2] = '~';

    move(50,50,50);
    while (1){
        USART0_send_string((unsigned char*)"Depth: ");
    1020:	8c e1       	ldi	r24, 0x1C	; 28
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	0e 94 46 05 	call	0xa8c	; 0xa8c <USART0_send_string>
        USART0_send_string((unsigned char *)dtostrf(get_depth_feet(),3,7,buffer));
    1028:	0e 94 a2 07 	call	0xf44	; 0xf44 <get_depth_feet>
    102c:	8e 01       	movw	r16, r28
    102e:	0f 5f       	subi	r16, 0xFF	; 255
    1030:	1f 4f       	sbci	r17, 0xFF	; 255
    1032:	27 e0       	ldi	r18, 0x07	; 7
    1034:	43 e0       	ldi	r20, 0x03	; 3
    1036:	0e 94 9e 0b 	call	0x173c	; 0x173c <dtostrf>
    103a:	0e 94 46 05 	call	0xa8c	; 0xa8c <USART0_send_string>
        USART0_send_string((unsigned char*)"\r");
    103e:	8a e1       	ldi	r24, 0x1A	; 26
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	0e 94 46 05 	call	0xa8c	; 0xa8c <USART0_send_string>
        USART0_send_string((unsigned char*)"Voltage: ");
    1046:	84 e2       	ldi	r24, 0x24	; 36
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	0e 94 46 05 	call	0xa8c	; 0xa8c <USART0_send_string>
        USART0_send_string((unsigned char *)dtostrf(get_voltage(PSENSOR_PIN),3,7,buffer));
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 8f 03 	call	0x71e	; 0x71e <get_voltage>
    1056:	27 e0       	ldi	r18, 0x07	; 7
    1058:	43 e0       	ldi	r20, 0x03	; 3
    105a:	0e 94 9e 0b 	call	0x173c	; 0x173c <dtostrf>
    105e:	0e 94 46 05 	call	0xa8c	; 0xa8c <USART0_send_string>
        USART0_send_string((unsigned char*)"\r");
    1062:	8a e1       	ldi	r24, 0x1A	; 26
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	0e 94 46 05 	call	0xa8c	; 0xa8c <USART0_send_string>
        USART0_Receive_String(data);
    106a:	ce 01       	movw	r24, r28
    106c:	0b 96       	adiw	r24, 0x0b	; 11
    106e:	0e 94 61 05 	call	0xac2	; 0xac2 <USART0_Receive_String>
        // USART0_send_string(data);

        if (strcmp((char *)data,"eee~") == 0){
    1072:	6e e2       	ldi	r22, 0x2E	; 46
    1074:	71 e0       	ldi	r23, 0x01	; 1
    1076:	ce 01       	movw	r24, r28
    1078:	0b 96       	adiw	r24, 0x0b	; 11
    107a:	0e 94 be 0b 	call	0x177c	; 0x177c <strcmp>
    107e:	89 2b       	or	r24, r25
    1080:	19 f1       	breq	.+70     	; 0x10c8 <main+0x10a>
            USART0_send_string((unsigned char *)"eee~");
            path1();
        }
        else if (strcmp((char *)data,"fff~") == 0){ //0x66 0x66 0x66 0x7e or 102 102 102 126
    1082:	63 e3       	ldi	r22, 0x33	; 51
    1084:	71 e0       	ldi	r23, 0x01	; 1
    1086:	ce 01       	movw	r24, r28
    1088:	0b 96       	adiw	r24, 0x0b	; 11
    108a:	0e 94 be 0b 	call	0x177c	; 0x177c <strcmp>
    108e:	89 2b       	or	r24, r25
    1090:	09 f4       	brne	.+2      	; 0x1094 <main+0xd6>
    1092:	42 c0       	rjmp	.+132    	; 0x1118 <__stack+0x19>
            calibrate_pressure_sensor();
            USART0_send_string(data);
        }
        else if (strcmp((char *)data,"222~") == 0){
    1094:	68 e3       	ldi	r22, 0x38	; 56
    1096:	71 e0       	ldi	r23, 0x01	; 1
    1098:	ce 01       	movw	r24, r28
    109a:	0b 96       	adiw	r24, 0x0b	; 11
    109c:	0e 94 be 0b 	call	0x177c	; 0x177c <strcmp>
    10a0:	89 2b       	or	r24, r25
    10a2:	c9 f4       	brne	.+50     	; 0x10d6 <main+0x118>
            data[0] = 's';
    10a4:	3b 86       	std	Y+11, r3	; 0x0b
            data[1] = 't';
    10a6:	cc 86       	std	Y+12, r12	; 0x0c
            data[2] = 'o';
    10a8:	dd 86       	std	Y+13, r13	; 0x0d
            move(50,50,50);
    10aa:	e1 2c       	mov	r14, r1
    10ac:	f1 2c       	mov	r15, r1
    10ae:	08 e4       	ldi	r16, 0x48	; 72
    10b0:	12 e4       	ldi	r17, 0x42	; 66
    10b2:	a8 01       	movw	r20, r16
    10b4:	97 01       	movw	r18, r14
    10b6:	c8 01       	movw	r24, r16
    10b8:	b7 01       	movw	r22, r14
    10ba:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
            USART0_send_string(data);
    10be:	ce 01       	movw	r24, r28
    10c0:	0b 96       	adiw	r24, 0x0b	; 11
    10c2:	0e 94 46 05 	call	0xa8c	; 0xa8c <USART0_send_string>
    10c6:	ac cf       	rjmp	.-168    	; 0x1020 <main+0x62>
        USART0_send_string((unsigned char*)"\r");
        USART0_Receive_String(data);
        // USART0_send_string(data);

        if (strcmp((char *)data,"eee~") == 0){
            USART0_send_string((unsigned char *)"eee~");
    10c8:	8e e2       	ldi	r24, 0x2E	; 46
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	0e 94 46 05 	call	0xa8c	; 0xa8c <USART0_send_string>
            path1();
    10d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <path1>
    10d4:	a5 cf       	rjmp	.-182    	; 0x1020 <main+0x62>
            move(50,50,50);
            USART0_send_string(data);
        }
        else{
            // USART0_send_string((unsigned char *)"Moving: ");
            USART0_send_string(data);
    10d6:	ce 01       	movw	r24, r28
    10d8:	0b 96       	adiw	r24, 0x0b	; 11
    10da:	0e 94 46 05 	call	0xa8c	; 0xa8c <USART0_send_string>
            move((float)data[0],(float)data[1],(float)data[2]);
    10de:	6d 85       	ldd	r22, Y+13	; 0x0d
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
    10ea:	4b 01       	movw	r8, r22
    10ec:	5c 01       	movw	r10, r24
    10ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
    10fa:	2b 01       	movw	r4, r22
    10fc:	3c 01       	movw	r6, r24
    10fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
    110a:	85 01       	movw	r16, r10
    110c:	74 01       	movw	r14, r8
    110e:	a3 01       	movw	r20, r6
    1110:	92 01       	movw	r18, r4
    1112:	0e 94 ef 05 	call	0xbde	; 0xbde <move>
    1116:	84 cf       	rjmp	.-248    	; 0x1020 <main+0x62>
        if (strcmp((char *)data,"eee~") == 0){
            USART0_send_string((unsigned char *)"eee~");
            path1();
        }
        else if (strcmp((char *)data,"fff~") == 0){ //0x66 0x66 0x66 0x7e or 102 102 102 126
            calibrate_pressure_sensor();
    1118:	0e 94 5e 07 	call	0xebc	; 0xebc <calibrate_pressure_sensor>
            USART0_send_string(data);
    111c:	ce 01       	movw	r24, r28
    111e:	0b 96       	adiw	r24, 0x0b	; 11
    1120:	0e 94 46 05 	call	0xa8c	; 0xa8c <USART0_send_string>
    1124:	7d cf       	rjmp	.-262    	; 0x1020 <main+0x62>

00001126 <__subsf3>:
    1126:	50 58       	subi	r21, 0x80	; 128

00001128 <__addsf3>:
    1128:	bb 27       	eor	r27, r27
    112a:	aa 27       	eor	r26, r26
    112c:	0e 94 ab 08 	call	0x1156	; 0x1156 <__addsf3x>
    1130:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__fp_round>
    1134:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__fp_pscA>
    1138:	38 f0       	brcs	.+14     	; 0x1148 <__addsf3+0x20>
    113a:	0e 94 b7 0a 	call	0x156e	; 0x156e <__fp_pscB>
    113e:	20 f0       	brcs	.+8      	; 0x1148 <__addsf3+0x20>
    1140:	39 f4       	brne	.+14     	; 0x1150 <__addsf3+0x28>
    1142:	9f 3f       	cpi	r25, 0xFF	; 255
    1144:	19 f4       	brne	.+6      	; 0x114c <__addsf3+0x24>
    1146:	26 f4       	brtc	.+8      	; 0x1150 <__addsf3+0x28>
    1148:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__fp_nan>
    114c:	0e f4       	brtc	.+2      	; 0x1150 <__addsf3+0x28>
    114e:	e0 95       	com	r30
    1150:	e7 fb       	bst	r30, 7
    1152:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_inf>

00001156 <__addsf3x>:
    1156:	e9 2f       	mov	r30, r25
    1158:	0e 94 cf 0a 	call	0x159e	; 0x159e <__fp_split3>
    115c:	58 f3       	brcs	.-42     	; 0x1134 <__addsf3+0xc>
    115e:	ba 17       	cp	r27, r26
    1160:	62 07       	cpc	r22, r18
    1162:	73 07       	cpc	r23, r19
    1164:	84 07       	cpc	r24, r20
    1166:	95 07       	cpc	r25, r21
    1168:	20 f0       	brcs	.+8      	; 0x1172 <__addsf3x+0x1c>
    116a:	79 f4       	brne	.+30     	; 0x118a <__addsf3x+0x34>
    116c:	a6 f5       	brtc	.+104    	; 0x11d6 <__addsf3x+0x80>
    116e:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__fp_zero>
    1172:	0e f4       	brtc	.+2      	; 0x1176 <__addsf3x+0x20>
    1174:	e0 95       	com	r30
    1176:	0b 2e       	mov	r0, r27
    1178:	ba 2f       	mov	r27, r26
    117a:	a0 2d       	mov	r26, r0
    117c:	0b 01       	movw	r0, r22
    117e:	b9 01       	movw	r22, r18
    1180:	90 01       	movw	r18, r0
    1182:	0c 01       	movw	r0, r24
    1184:	ca 01       	movw	r24, r20
    1186:	a0 01       	movw	r20, r0
    1188:	11 24       	eor	r1, r1
    118a:	ff 27       	eor	r31, r31
    118c:	59 1b       	sub	r21, r25
    118e:	99 f0       	breq	.+38     	; 0x11b6 <__addsf3x+0x60>
    1190:	59 3f       	cpi	r21, 0xF9	; 249
    1192:	50 f4       	brcc	.+20     	; 0x11a8 <__addsf3x+0x52>
    1194:	50 3e       	cpi	r21, 0xE0	; 224
    1196:	68 f1       	brcs	.+90     	; 0x11f2 <__addsf3x+0x9c>
    1198:	1a 16       	cp	r1, r26
    119a:	f0 40       	sbci	r31, 0x00	; 0
    119c:	a2 2f       	mov	r26, r18
    119e:	23 2f       	mov	r18, r19
    11a0:	34 2f       	mov	r19, r20
    11a2:	44 27       	eor	r20, r20
    11a4:	58 5f       	subi	r21, 0xF8	; 248
    11a6:	f3 cf       	rjmp	.-26     	; 0x118e <__addsf3x+0x38>
    11a8:	46 95       	lsr	r20
    11aa:	37 95       	ror	r19
    11ac:	27 95       	ror	r18
    11ae:	a7 95       	ror	r26
    11b0:	f0 40       	sbci	r31, 0x00	; 0
    11b2:	53 95       	inc	r21
    11b4:	c9 f7       	brne	.-14     	; 0x11a8 <__addsf3x+0x52>
    11b6:	7e f4       	brtc	.+30     	; 0x11d6 <__addsf3x+0x80>
    11b8:	1f 16       	cp	r1, r31
    11ba:	ba 0b       	sbc	r27, r26
    11bc:	62 0b       	sbc	r22, r18
    11be:	73 0b       	sbc	r23, r19
    11c0:	84 0b       	sbc	r24, r20
    11c2:	ba f0       	brmi	.+46     	; 0x11f2 <__addsf3x+0x9c>
    11c4:	91 50       	subi	r25, 0x01	; 1
    11c6:	a1 f0       	breq	.+40     	; 0x11f0 <__addsf3x+0x9a>
    11c8:	ff 0f       	add	r31, r31
    11ca:	bb 1f       	adc	r27, r27
    11cc:	66 1f       	adc	r22, r22
    11ce:	77 1f       	adc	r23, r23
    11d0:	88 1f       	adc	r24, r24
    11d2:	c2 f7       	brpl	.-16     	; 0x11c4 <__addsf3x+0x6e>
    11d4:	0e c0       	rjmp	.+28     	; 0x11f2 <__addsf3x+0x9c>
    11d6:	ba 0f       	add	r27, r26
    11d8:	62 1f       	adc	r22, r18
    11da:	73 1f       	adc	r23, r19
    11dc:	84 1f       	adc	r24, r20
    11de:	48 f4       	brcc	.+18     	; 0x11f2 <__addsf3x+0x9c>
    11e0:	87 95       	ror	r24
    11e2:	77 95       	ror	r23
    11e4:	67 95       	ror	r22
    11e6:	b7 95       	ror	r27
    11e8:	f7 95       	ror	r31
    11ea:	9e 3f       	cpi	r25, 0xFE	; 254
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <__addsf3x+0x9a>
    11ee:	b0 cf       	rjmp	.-160    	; 0x1150 <__addsf3+0x28>
    11f0:	93 95       	inc	r25
    11f2:	88 0f       	add	r24, r24
    11f4:	08 f0       	brcs	.+2      	; 0x11f8 <__addsf3x+0xa2>
    11f6:	99 27       	eor	r25, r25
    11f8:	ee 0f       	add	r30, r30
    11fa:	97 95       	ror	r25
    11fc:	87 95       	ror	r24
    11fe:	08 95       	ret
    1200:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__fp_pscA>
    1204:	60 f0       	brcs	.+24     	; 0x121e <__addsf3x+0xc8>
    1206:	80 e8       	ldi	r24, 0x80	; 128
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	09 f4       	brne	.+2      	; 0x120e <__addsf3x+0xb8>
    120c:	9e ef       	ldi	r25, 0xFE	; 254
    120e:	0e 94 b7 0a 	call	0x156e	; 0x156e <__fp_pscB>
    1212:	28 f0       	brcs	.+10     	; 0x121e <__addsf3x+0xc8>
    1214:	40 e8       	ldi	r20, 0x80	; 128
    1216:	51 e0       	ldi	r21, 0x01	; 1
    1218:	71 f4       	brne	.+28     	; 0x1236 <atan2+0x10>
    121a:	5e ef       	ldi	r21, 0xFE	; 254
    121c:	0c c0       	rjmp	.+24     	; 0x1236 <atan2+0x10>
    121e:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__fp_nan>
    1222:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__fp_zero>

00001226 <atan2>:
    1226:	e9 2f       	mov	r30, r25
    1228:	e0 78       	andi	r30, 0x80	; 128
    122a:	0e 94 cf 0a 	call	0x159e	; 0x159e <__fp_split3>
    122e:	40 f3       	brcs	.-48     	; 0x1200 <__addsf3x+0xaa>
    1230:	09 2e       	mov	r0, r25
    1232:	05 2a       	or	r0, r21
    1234:	b1 f3       	breq	.-20     	; 0x1222 <__addsf3x+0xcc>
    1236:	26 17       	cp	r18, r22
    1238:	37 07       	cpc	r19, r23
    123a:	48 07       	cpc	r20, r24
    123c:	59 07       	cpc	r21, r25
    123e:	38 f0       	brcs	.+14     	; 0x124e <atan2+0x28>
    1240:	0e 2e       	mov	r0, r30
    1242:	07 f8       	bld	r0, 7
    1244:	e0 25       	eor	r30, r0
    1246:	69 f0       	breq	.+26     	; 0x1262 <atan2+0x3c>
    1248:	e0 25       	eor	r30, r0
    124a:	e0 64       	ori	r30, 0x40	; 64
    124c:	0a c0       	rjmp	.+20     	; 0x1262 <atan2+0x3c>
    124e:	ef 63       	ori	r30, 0x3F	; 63
    1250:	07 f8       	bld	r0, 7
    1252:	00 94       	com	r0
    1254:	07 fa       	bst	r0, 7
    1256:	db 01       	movw	r26, r22
    1258:	b9 01       	movw	r22, r18
    125a:	9d 01       	movw	r18, r26
    125c:	dc 01       	movw	r26, r24
    125e:	ca 01       	movw	r24, r20
    1260:	ad 01       	movw	r20, r26
    1262:	ef 93       	push	r30
    1264:	0e 94 8e 09 	call	0x131c	; 0x131c <__divsf3_pse>
    1268:	0e 94 be 0a 	call	0x157c	; 0x157c <__fp_round>
    126c:	0e 94 43 09 	call	0x1286	; 0x1286 <atan>
    1270:	5f 91       	pop	r21
    1272:	55 23       	and	r21, r21
    1274:	39 f0       	breq	.+14     	; 0x1284 <atan2+0x5e>
    1276:	2b ed       	ldi	r18, 0xDB	; 219
    1278:	3f e0       	ldi	r19, 0x0F	; 15
    127a:	49 e4       	ldi	r20, 0x49	; 73
    127c:	50 fd       	sbrc	r21, 0
    127e:	49 ec       	ldi	r20, 0xC9	; 201
    1280:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__addsf3>
    1284:	08 95       	ret

00001286 <atan>:
    1286:	df 93       	push	r29
    1288:	dd 27       	eor	r29, r29
    128a:	b9 2f       	mov	r27, r25
    128c:	bf 77       	andi	r27, 0x7F	; 127
    128e:	40 e8       	ldi	r20, 0x80	; 128
    1290:	5f e3       	ldi	r21, 0x3F	; 63
    1292:	16 16       	cp	r1, r22
    1294:	17 06       	cpc	r1, r23
    1296:	48 07       	cpc	r20, r24
    1298:	5b 07       	cpc	r21, r27
    129a:	18 f4       	brcc	.+6      	; 0x12a2 <atan+0x1c>
    129c:	d9 2f       	mov	r29, r25
    129e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <inverse>
    12a2:	9f 93       	push	r25
    12a4:	8f 93       	push	r24
    12a6:	7f 93       	push	r23
    12a8:	6f 93       	push	r22
    12aa:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <square>
    12ae:	ec e8       	ldi	r30, 0x8C	; 140
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	0e 94 89 0a 	call	0x1512	; 0x1512 <__fp_powser>
    12b6:	0e 94 be 0a 	call	0x157c	; 0x157c <__fp_round>
    12ba:	2f 91       	pop	r18
    12bc:	3f 91       	pop	r19
    12be:	4f 91       	pop	r20
    12c0:	5f 91       	pop	r21
    12c2:	0e 94 18 0b 	call	0x1630	; 0x1630 <__mulsf3x>
    12c6:	dd 23       	and	r29, r29
    12c8:	51 f0       	breq	.+20     	; 0x12de <atan+0x58>
    12ca:	90 58       	subi	r25, 0x80	; 128
    12cc:	a2 ea       	ldi	r26, 0xA2	; 162
    12ce:	2a ed       	ldi	r18, 0xDA	; 218
    12d0:	3f e0       	ldi	r19, 0x0F	; 15
    12d2:	49 ec       	ldi	r20, 0xC9	; 201
    12d4:	5f e3       	ldi	r21, 0x3F	; 63
    12d6:	d0 78       	andi	r29, 0x80	; 128
    12d8:	5d 27       	eor	r21, r29
    12da:	0e 94 ab 08 	call	0x1156	; 0x1156 <__addsf3x>
    12de:	df 91       	pop	r29
    12e0:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__fp_round>

000012e4 <__cmpsf2>:
    12e4:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__fp_cmp>
    12e8:	08 f4       	brcc	.+2      	; 0x12ec <__cmpsf2+0x8>
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	08 95       	ret

000012ee <__divsf3>:
    12ee:	0e 94 8b 09 	call	0x1316	; 0x1316 <__divsf3x>
    12f2:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__fp_round>
    12f6:	0e 94 b7 0a 	call	0x156e	; 0x156e <__fp_pscB>
    12fa:	58 f0       	brcs	.+22     	; 0x1312 <__divsf3+0x24>
    12fc:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__fp_pscA>
    1300:	40 f0       	brcs	.+16     	; 0x1312 <__divsf3+0x24>
    1302:	29 f4       	brne	.+10     	; 0x130e <__divsf3+0x20>
    1304:	5f 3f       	cpi	r21, 0xFF	; 255
    1306:	29 f0       	breq	.+10     	; 0x1312 <__divsf3+0x24>
    1308:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_inf>
    130c:	51 11       	cpse	r21, r1
    130e:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__fp_szero>
    1312:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__fp_nan>

00001316 <__divsf3x>:
    1316:	0e 94 cf 0a 	call	0x159e	; 0x159e <__fp_split3>
    131a:	68 f3       	brcs	.-38     	; 0x12f6 <__divsf3+0x8>

0000131c <__divsf3_pse>:
    131c:	99 23       	and	r25, r25
    131e:	b1 f3       	breq	.-20     	; 0x130c <__divsf3+0x1e>
    1320:	55 23       	and	r21, r21
    1322:	91 f3       	breq	.-28     	; 0x1308 <__divsf3+0x1a>
    1324:	95 1b       	sub	r25, r21
    1326:	55 0b       	sbc	r21, r21
    1328:	bb 27       	eor	r27, r27
    132a:	aa 27       	eor	r26, r26
    132c:	62 17       	cp	r22, r18
    132e:	73 07       	cpc	r23, r19
    1330:	84 07       	cpc	r24, r20
    1332:	38 f0       	brcs	.+14     	; 0x1342 <__divsf3_pse+0x26>
    1334:	9f 5f       	subi	r25, 0xFF	; 255
    1336:	5f 4f       	sbci	r21, 0xFF	; 255
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	44 1f       	adc	r20, r20
    133e:	aa 1f       	adc	r26, r26
    1340:	a9 f3       	breq	.-22     	; 0x132c <__divsf3_pse+0x10>
    1342:	35 d0       	rcall	.+106    	; 0x13ae <__divsf3_pse+0x92>
    1344:	0e 2e       	mov	r0, r30
    1346:	3a f0       	brmi	.+14     	; 0x1356 <__divsf3_pse+0x3a>
    1348:	e0 e8       	ldi	r30, 0x80	; 128
    134a:	32 d0       	rcall	.+100    	; 0x13b0 <__divsf3_pse+0x94>
    134c:	91 50       	subi	r25, 0x01	; 1
    134e:	50 40       	sbci	r21, 0x00	; 0
    1350:	e6 95       	lsr	r30
    1352:	00 1c       	adc	r0, r0
    1354:	ca f7       	brpl	.-14     	; 0x1348 <__divsf3_pse+0x2c>
    1356:	2b d0       	rcall	.+86     	; 0x13ae <__divsf3_pse+0x92>
    1358:	fe 2f       	mov	r31, r30
    135a:	29 d0       	rcall	.+82     	; 0x13ae <__divsf3_pse+0x92>
    135c:	66 0f       	add	r22, r22
    135e:	77 1f       	adc	r23, r23
    1360:	88 1f       	adc	r24, r24
    1362:	bb 1f       	adc	r27, r27
    1364:	26 17       	cp	r18, r22
    1366:	37 07       	cpc	r19, r23
    1368:	48 07       	cpc	r20, r24
    136a:	ab 07       	cpc	r26, r27
    136c:	b0 e8       	ldi	r27, 0x80	; 128
    136e:	09 f0       	breq	.+2      	; 0x1372 <__divsf3_pse+0x56>
    1370:	bb 0b       	sbc	r27, r27
    1372:	80 2d       	mov	r24, r0
    1374:	bf 01       	movw	r22, r30
    1376:	ff 27       	eor	r31, r31
    1378:	93 58       	subi	r25, 0x83	; 131
    137a:	5f 4f       	sbci	r21, 0xFF	; 255
    137c:	3a f0       	brmi	.+14     	; 0x138c <__divsf3_pse+0x70>
    137e:	9e 3f       	cpi	r25, 0xFE	; 254
    1380:	51 05       	cpc	r21, r1
    1382:	78 f0       	brcs	.+30     	; 0x13a2 <__divsf3_pse+0x86>
    1384:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_inf>
    1388:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__fp_szero>
    138c:	5f 3f       	cpi	r21, 0xFF	; 255
    138e:	e4 f3       	brlt	.-8      	; 0x1388 <__divsf3_pse+0x6c>
    1390:	98 3e       	cpi	r25, 0xE8	; 232
    1392:	d4 f3       	brlt	.-12     	; 0x1388 <__divsf3_pse+0x6c>
    1394:	86 95       	lsr	r24
    1396:	77 95       	ror	r23
    1398:	67 95       	ror	r22
    139a:	b7 95       	ror	r27
    139c:	f7 95       	ror	r31
    139e:	9f 5f       	subi	r25, 0xFF	; 255
    13a0:	c9 f7       	brne	.-14     	; 0x1394 <__divsf3_pse+0x78>
    13a2:	88 0f       	add	r24, r24
    13a4:	91 1d       	adc	r25, r1
    13a6:	96 95       	lsr	r25
    13a8:	87 95       	ror	r24
    13aa:	97 f9       	bld	r25, 7
    13ac:	08 95       	ret
    13ae:	e1 e0       	ldi	r30, 0x01	; 1
    13b0:	66 0f       	add	r22, r22
    13b2:	77 1f       	adc	r23, r23
    13b4:	88 1f       	adc	r24, r24
    13b6:	bb 1f       	adc	r27, r27
    13b8:	62 17       	cp	r22, r18
    13ba:	73 07       	cpc	r23, r19
    13bc:	84 07       	cpc	r24, r20
    13be:	ba 07       	cpc	r27, r26
    13c0:	20 f0       	brcs	.+8      	; 0x13ca <__divsf3_pse+0xae>
    13c2:	62 1b       	sub	r22, r18
    13c4:	73 0b       	sbc	r23, r19
    13c6:	84 0b       	sbc	r24, r20
    13c8:	ba 0b       	sbc	r27, r26
    13ca:	ee 1f       	adc	r30, r30
    13cc:	88 f7       	brcc	.-30     	; 0x13b0 <__divsf3_pse+0x94>
    13ce:	e0 95       	com	r30
    13d0:	08 95       	ret

000013d2 <__fixsfsi>:
    13d2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__fixunssfsi>
    13d6:	68 94       	set
    13d8:	b1 11       	cpse	r27, r1
    13da:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__fp_szero>
    13de:	08 95       	ret

000013e0 <__fixunssfsi>:
    13e0:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__fp_splitA>
    13e4:	88 f0       	brcs	.+34     	; 0x1408 <__fixunssfsi+0x28>
    13e6:	9f 57       	subi	r25, 0x7F	; 127
    13e8:	98 f0       	brcs	.+38     	; 0x1410 <__fixunssfsi+0x30>
    13ea:	b9 2f       	mov	r27, r25
    13ec:	99 27       	eor	r25, r25
    13ee:	b7 51       	subi	r27, 0x17	; 23
    13f0:	b0 f0       	brcs	.+44     	; 0x141e <__fixunssfsi+0x3e>
    13f2:	e1 f0       	breq	.+56     	; 0x142c <__fixunssfsi+0x4c>
    13f4:	66 0f       	add	r22, r22
    13f6:	77 1f       	adc	r23, r23
    13f8:	88 1f       	adc	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	1a f0       	brmi	.+6      	; 0x1404 <__fixunssfsi+0x24>
    13fe:	ba 95       	dec	r27
    1400:	c9 f7       	brne	.-14     	; 0x13f4 <__fixunssfsi+0x14>
    1402:	14 c0       	rjmp	.+40     	; 0x142c <__fixunssfsi+0x4c>
    1404:	b1 30       	cpi	r27, 0x01	; 1
    1406:	91 f0       	breq	.+36     	; 0x142c <__fixunssfsi+0x4c>
    1408:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__fp_zero>
    140c:	b1 e0       	ldi	r27, 0x01	; 1
    140e:	08 95       	ret
    1410:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__fp_zero>
    1414:	67 2f       	mov	r22, r23
    1416:	78 2f       	mov	r23, r24
    1418:	88 27       	eor	r24, r24
    141a:	b8 5f       	subi	r27, 0xF8	; 248
    141c:	39 f0       	breq	.+14     	; 0x142c <__fixunssfsi+0x4c>
    141e:	b9 3f       	cpi	r27, 0xF9	; 249
    1420:	cc f3       	brlt	.-14     	; 0x1414 <__fixunssfsi+0x34>
    1422:	86 95       	lsr	r24
    1424:	77 95       	ror	r23
    1426:	67 95       	ror	r22
    1428:	b3 95       	inc	r27
    142a:	d9 f7       	brne	.-10     	; 0x1422 <__fixunssfsi+0x42>
    142c:	3e f4       	brtc	.+14     	; 0x143c <__fixunssfsi+0x5c>
    142e:	90 95       	com	r25
    1430:	80 95       	com	r24
    1432:	70 95       	com	r23
    1434:	61 95       	neg	r22
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	8f 4f       	sbci	r24, 0xFF	; 255
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	08 95       	ret

0000143e <__floatunsisf>:
    143e:	e8 94       	clt
    1440:	09 c0       	rjmp	.+18     	; 0x1454 <__floatsisf+0x12>

00001442 <__floatsisf>:
    1442:	97 fb       	bst	r25, 7
    1444:	3e f4       	brtc	.+14     	; 0x1454 <__floatsisf+0x12>
    1446:	90 95       	com	r25
    1448:	80 95       	com	r24
    144a:	70 95       	com	r23
    144c:	61 95       	neg	r22
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	8f 4f       	sbci	r24, 0xFF	; 255
    1452:	9f 4f       	sbci	r25, 0xFF	; 255
    1454:	99 23       	and	r25, r25
    1456:	a9 f0       	breq	.+42     	; 0x1482 <__floatsisf+0x40>
    1458:	f9 2f       	mov	r31, r25
    145a:	96 e9       	ldi	r25, 0x96	; 150
    145c:	bb 27       	eor	r27, r27
    145e:	93 95       	inc	r25
    1460:	f6 95       	lsr	r31
    1462:	87 95       	ror	r24
    1464:	77 95       	ror	r23
    1466:	67 95       	ror	r22
    1468:	b7 95       	ror	r27
    146a:	f1 11       	cpse	r31, r1
    146c:	f8 cf       	rjmp	.-16     	; 0x145e <__floatsisf+0x1c>
    146e:	fa f4       	brpl	.+62     	; 0x14ae <__floatsisf+0x6c>
    1470:	bb 0f       	add	r27, r27
    1472:	11 f4       	brne	.+4      	; 0x1478 <__floatsisf+0x36>
    1474:	60 ff       	sbrs	r22, 0
    1476:	1b c0       	rjmp	.+54     	; 0x14ae <__floatsisf+0x6c>
    1478:	6f 5f       	subi	r22, 0xFF	; 255
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	8f 4f       	sbci	r24, 0xFF	; 255
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	16 c0       	rjmp	.+44     	; 0x14ae <__floatsisf+0x6c>
    1482:	88 23       	and	r24, r24
    1484:	11 f0       	breq	.+4      	; 0x148a <__floatsisf+0x48>
    1486:	96 e9       	ldi	r25, 0x96	; 150
    1488:	11 c0       	rjmp	.+34     	; 0x14ac <__floatsisf+0x6a>
    148a:	77 23       	and	r23, r23
    148c:	21 f0       	breq	.+8      	; 0x1496 <__floatsisf+0x54>
    148e:	9e e8       	ldi	r25, 0x8E	; 142
    1490:	87 2f       	mov	r24, r23
    1492:	76 2f       	mov	r23, r22
    1494:	05 c0       	rjmp	.+10     	; 0x14a0 <__floatsisf+0x5e>
    1496:	66 23       	and	r22, r22
    1498:	71 f0       	breq	.+28     	; 0x14b6 <__floatsisf+0x74>
    149a:	96 e8       	ldi	r25, 0x86	; 134
    149c:	86 2f       	mov	r24, r22
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	2a f0       	brmi	.+10     	; 0x14ae <__floatsisf+0x6c>
    14a4:	9a 95       	dec	r25
    14a6:	66 0f       	add	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	88 1f       	adc	r24, r24
    14ac:	da f7       	brpl	.-10     	; 0x14a4 <__floatsisf+0x62>
    14ae:	88 0f       	add	r24, r24
    14b0:	96 95       	lsr	r25
    14b2:	87 95       	ror	r24
    14b4:	97 f9       	bld	r25, 7
    14b6:	08 95       	ret

000014b8 <__fp_cmp>:
    14b8:	99 0f       	add	r25, r25
    14ba:	00 08       	sbc	r0, r0
    14bc:	55 0f       	add	r21, r21
    14be:	aa 0b       	sbc	r26, r26
    14c0:	e0 e8       	ldi	r30, 0x80	; 128
    14c2:	fe ef       	ldi	r31, 0xFE	; 254
    14c4:	16 16       	cp	r1, r22
    14c6:	17 06       	cpc	r1, r23
    14c8:	e8 07       	cpc	r30, r24
    14ca:	f9 07       	cpc	r31, r25
    14cc:	c0 f0       	brcs	.+48     	; 0x14fe <__fp_cmp+0x46>
    14ce:	12 16       	cp	r1, r18
    14d0:	13 06       	cpc	r1, r19
    14d2:	e4 07       	cpc	r30, r20
    14d4:	f5 07       	cpc	r31, r21
    14d6:	98 f0       	brcs	.+38     	; 0x14fe <__fp_cmp+0x46>
    14d8:	62 1b       	sub	r22, r18
    14da:	73 0b       	sbc	r23, r19
    14dc:	84 0b       	sbc	r24, r20
    14de:	95 0b       	sbc	r25, r21
    14e0:	39 f4       	brne	.+14     	; 0x14f0 <__fp_cmp+0x38>
    14e2:	0a 26       	eor	r0, r26
    14e4:	61 f0       	breq	.+24     	; 0x14fe <__fp_cmp+0x46>
    14e6:	23 2b       	or	r18, r19
    14e8:	24 2b       	or	r18, r20
    14ea:	25 2b       	or	r18, r21
    14ec:	21 f4       	brne	.+8      	; 0x14f6 <__fp_cmp+0x3e>
    14ee:	08 95       	ret
    14f0:	0a 26       	eor	r0, r26
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <__fp_cmp+0x3e>
    14f4:	a1 40       	sbci	r26, 0x01	; 1
    14f6:	a6 95       	lsr	r26
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	81 1d       	adc	r24, r1
    14fc:	81 1d       	adc	r24, r1
    14fe:	08 95       	ret

00001500 <__fp_inf>:
    1500:	97 f9       	bld	r25, 7
    1502:	9f 67       	ori	r25, 0x7F	; 127
    1504:	80 e8       	ldi	r24, 0x80	; 128
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	08 95       	ret

0000150c <__fp_nan>:
    150c:	9f ef       	ldi	r25, 0xFF	; 255
    150e:	80 ec       	ldi	r24, 0xC0	; 192
    1510:	08 95       	ret

00001512 <__fp_powser>:
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	1f 93       	push	r17
    1518:	0f 93       	push	r16
    151a:	ff 92       	push	r15
    151c:	ef 92       	push	r14
    151e:	df 92       	push	r13
    1520:	7b 01       	movw	r14, r22
    1522:	8c 01       	movw	r16, r24
    1524:	68 94       	set
    1526:	06 c0       	rjmp	.+12     	; 0x1534 <__fp_powser+0x22>
    1528:	da 2e       	mov	r13, r26
    152a:	ef 01       	movw	r28, r30
    152c:	0e 94 18 0b 	call	0x1630	; 0x1630 <__mulsf3x>
    1530:	fe 01       	movw	r30, r28
    1532:	e8 94       	clt
    1534:	a5 91       	lpm	r26, Z+
    1536:	25 91       	lpm	r18, Z+
    1538:	35 91       	lpm	r19, Z+
    153a:	45 91       	lpm	r20, Z+
    153c:	55 91       	lpm	r21, Z+
    153e:	a6 f3       	brts	.-24     	; 0x1528 <__fp_powser+0x16>
    1540:	ef 01       	movw	r28, r30
    1542:	0e 94 ab 08 	call	0x1156	; 0x1156 <__addsf3x>
    1546:	fe 01       	movw	r30, r28
    1548:	97 01       	movw	r18, r14
    154a:	a8 01       	movw	r20, r16
    154c:	da 94       	dec	r13
    154e:	69 f7       	brne	.-38     	; 0x152a <__fp_powser+0x18>
    1550:	df 90       	pop	r13
    1552:	ef 90       	pop	r14
    1554:	ff 90       	pop	r15
    1556:	0f 91       	pop	r16
    1558:	1f 91       	pop	r17
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <__fp_pscA>:
    1560:	00 24       	eor	r0, r0
    1562:	0a 94       	dec	r0
    1564:	16 16       	cp	r1, r22
    1566:	17 06       	cpc	r1, r23
    1568:	18 06       	cpc	r1, r24
    156a:	09 06       	cpc	r0, r25
    156c:	08 95       	ret

0000156e <__fp_pscB>:
    156e:	00 24       	eor	r0, r0
    1570:	0a 94       	dec	r0
    1572:	12 16       	cp	r1, r18
    1574:	13 06       	cpc	r1, r19
    1576:	14 06       	cpc	r1, r20
    1578:	05 06       	cpc	r0, r21
    157a:	08 95       	ret

0000157c <__fp_round>:
    157c:	09 2e       	mov	r0, r25
    157e:	03 94       	inc	r0
    1580:	00 0c       	add	r0, r0
    1582:	11 f4       	brne	.+4      	; 0x1588 <__fp_round+0xc>
    1584:	88 23       	and	r24, r24
    1586:	52 f0       	brmi	.+20     	; 0x159c <__fp_round+0x20>
    1588:	bb 0f       	add	r27, r27
    158a:	40 f4       	brcc	.+16     	; 0x159c <__fp_round+0x20>
    158c:	bf 2b       	or	r27, r31
    158e:	11 f4       	brne	.+4      	; 0x1594 <__fp_round+0x18>
    1590:	60 ff       	sbrs	r22, 0
    1592:	04 c0       	rjmp	.+8      	; 0x159c <__fp_round+0x20>
    1594:	6f 5f       	subi	r22, 0xFF	; 255
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	8f 4f       	sbci	r24, 0xFF	; 255
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
    159c:	08 95       	ret

0000159e <__fp_split3>:
    159e:	57 fd       	sbrc	r21, 7
    15a0:	90 58       	subi	r25, 0x80	; 128
    15a2:	44 0f       	add	r20, r20
    15a4:	55 1f       	adc	r21, r21
    15a6:	59 f0       	breq	.+22     	; 0x15be <__fp_splitA+0x10>
    15a8:	5f 3f       	cpi	r21, 0xFF	; 255
    15aa:	71 f0       	breq	.+28     	; 0x15c8 <__fp_splitA+0x1a>
    15ac:	47 95       	ror	r20

000015ae <__fp_splitA>:
    15ae:	88 0f       	add	r24, r24
    15b0:	97 fb       	bst	r25, 7
    15b2:	99 1f       	adc	r25, r25
    15b4:	61 f0       	breq	.+24     	; 0x15ce <__fp_splitA+0x20>
    15b6:	9f 3f       	cpi	r25, 0xFF	; 255
    15b8:	79 f0       	breq	.+30     	; 0x15d8 <__fp_splitA+0x2a>
    15ba:	87 95       	ror	r24
    15bc:	08 95       	ret
    15be:	12 16       	cp	r1, r18
    15c0:	13 06       	cpc	r1, r19
    15c2:	14 06       	cpc	r1, r20
    15c4:	55 1f       	adc	r21, r21
    15c6:	f2 cf       	rjmp	.-28     	; 0x15ac <__fp_split3+0xe>
    15c8:	46 95       	lsr	r20
    15ca:	f1 df       	rcall	.-30     	; 0x15ae <__fp_splitA>
    15cc:	08 c0       	rjmp	.+16     	; 0x15de <__fp_splitA+0x30>
    15ce:	16 16       	cp	r1, r22
    15d0:	17 06       	cpc	r1, r23
    15d2:	18 06       	cpc	r1, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	f1 cf       	rjmp	.-30     	; 0x15ba <__fp_splitA+0xc>
    15d8:	86 95       	lsr	r24
    15da:	71 05       	cpc	r23, r1
    15dc:	61 05       	cpc	r22, r1
    15de:	08 94       	sec
    15e0:	08 95       	ret

000015e2 <__fp_zero>:
    15e2:	e8 94       	clt

000015e4 <__fp_szero>:
    15e4:	bb 27       	eor	r27, r27
    15e6:	66 27       	eor	r22, r22
    15e8:	77 27       	eor	r23, r23
    15ea:	cb 01       	movw	r24, r22
    15ec:	97 f9       	bld	r25, 7
    15ee:	08 95       	ret

000015f0 <__gesf2>:
    15f0:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__fp_cmp>
    15f4:	08 f4       	brcc	.+2      	; 0x15f8 <__gesf2+0x8>
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	08 95       	ret

000015fa <inverse>:
    15fa:	9b 01       	movw	r18, r22
    15fc:	ac 01       	movw	r20, r24
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	80 e8       	ldi	r24, 0x80	; 128
    1604:	9f e3       	ldi	r25, 0x3F	; 63
    1606:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__divsf3>

0000160a <__mulsf3>:
    160a:	0e 94 18 0b 	call	0x1630	; 0x1630 <__mulsf3x>
    160e:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__fp_round>
    1612:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__fp_pscA>
    1616:	38 f0       	brcs	.+14     	; 0x1626 <__mulsf3+0x1c>
    1618:	0e 94 b7 0a 	call	0x156e	; 0x156e <__fp_pscB>
    161c:	20 f0       	brcs	.+8      	; 0x1626 <__mulsf3+0x1c>
    161e:	95 23       	and	r25, r21
    1620:	11 f0       	breq	.+4      	; 0x1626 <__mulsf3+0x1c>
    1622:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_inf>
    1626:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__fp_nan>
    162a:	11 24       	eor	r1, r1
    162c:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__fp_szero>

00001630 <__mulsf3x>:
    1630:	0e 94 cf 0a 	call	0x159e	; 0x159e <__fp_split3>
    1634:	70 f3       	brcs	.-36     	; 0x1612 <__mulsf3+0x8>

00001636 <__mulsf3_pse>:
    1636:	95 9f       	mul	r25, r21
    1638:	c1 f3       	breq	.-16     	; 0x162a <__mulsf3+0x20>
    163a:	95 0f       	add	r25, r21
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	55 1f       	adc	r21, r21
    1640:	62 9f       	mul	r22, r18
    1642:	f0 01       	movw	r30, r0
    1644:	72 9f       	mul	r23, r18
    1646:	bb 27       	eor	r27, r27
    1648:	f0 0d       	add	r31, r0
    164a:	b1 1d       	adc	r27, r1
    164c:	63 9f       	mul	r22, r19
    164e:	aa 27       	eor	r26, r26
    1650:	f0 0d       	add	r31, r0
    1652:	b1 1d       	adc	r27, r1
    1654:	aa 1f       	adc	r26, r26
    1656:	64 9f       	mul	r22, r20
    1658:	66 27       	eor	r22, r22
    165a:	b0 0d       	add	r27, r0
    165c:	a1 1d       	adc	r26, r1
    165e:	66 1f       	adc	r22, r22
    1660:	82 9f       	mul	r24, r18
    1662:	22 27       	eor	r18, r18
    1664:	b0 0d       	add	r27, r0
    1666:	a1 1d       	adc	r26, r1
    1668:	62 1f       	adc	r22, r18
    166a:	73 9f       	mul	r23, r19
    166c:	b0 0d       	add	r27, r0
    166e:	a1 1d       	adc	r26, r1
    1670:	62 1f       	adc	r22, r18
    1672:	83 9f       	mul	r24, r19
    1674:	a0 0d       	add	r26, r0
    1676:	61 1d       	adc	r22, r1
    1678:	22 1f       	adc	r18, r18
    167a:	74 9f       	mul	r23, r20
    167c:	33 27       	eor	r19, r19
    167e:	a0 0d       	add	r26, r0
    1680:	61 1d       	adc	r22, r1
    1682:	23 1f       	adc	r18, r19
    1684:	84 9f       	mul	r24, r20
    1686:	60 0d       	add	r22, r0
    1688:	21 1d       	adc	r18, r1
    168a:	82 2f       	mov	r24, r18
    168c:	76 2f       	mov	r23, r22
    168e:	6a 2f       	mov	r22, r26
    1690:	11 24       	eor	r1, r1
    1692:	9f 57       	subi	r25, 0x7F	; 127
    1694:	50 40       	sbci	r21, 0x00	; 0
    1696:	9a f0       	brmi	.+38     	; 0x16be <__mulsf3_pse+0x88>
    1698:	f1 f0       	breq	.+60     	; 0x16d6 <__mulsf3_pse+0xa0>
    169a:	88 23       	and	r24, r24
    169c:	4a f0       	brmi	.+18     	; 0x16b0 <__mulsf3_pse+0x7a>
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	bb 1f       	adc	r27, r27
    16a4:	66 1f       	adc	r22, r22
    16a6:	77 1f       	adc	r23, r23
    16a8:	88 1f       	adc	r24, r24
    16aa:	91 50       	subi	r25, 0x01	; 1
    16ac:	50 40       	sbci	r21, 0x00	; 0
    16ae:	a9 f7       	brne	.-22     	; 0x169a <__mulsf3_pse+0x64>
    16b0:	9e 3f       	cpi	r25, 0xFE	; 254
    16b2:	51 05       	cpc	r21, r1
    16b4:	80 f0       	brcs	.+32     	; 0x16d6 <__mulsf3_pse+0xa0>
    16b6:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_inf>
    16ba:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__fp_szero>
    16be:	5f 3f       	cpi	r21, 0xFF	; 255
    16c0:	e4 f3       	brlt	.-8      	; 0x16ba <__mulsf3_pse+0x84>
    16c2:	98 3e       	cpi	r25, 0xE8	; 232
    16c4:	d4 f3       	brlt	.-12     	; 0x16ba <__mulsf3_pse+0x84>
    16c6:	86 95       	lsr	r24
    16c8:	77 95       	ror	r23
    16ca:	67 95       	ror	r22
    16cc:	b7 95       	ror	r27
    16ce:	f7 95       	ror	r31
    16d0:	e7 95       	ror	r30
    16d2:	9f 5f       	subi	r25, 0xFF	; 255
    16d4:	c1 f7       	brne	.-16     	; 0x16c6 <__mulsf3_pse+0x90>
    16d6:	fe 2b       	or	r31, r30
    16d8:	88 0f       	add	r24, r24
    16da:	91 1d       	adc	r25, r1
    16dc:	96 95       	lsr	r25
    16de:	87 95       	ror	r24
    16e0:	97 f9       	bld	r25, 7
    16e2:	08 95       	ret

000016e4 <square>:
    16e4:	9b 01       	movw	r18, r22
    16e6:	ac 01       	movw	r20, r24
    16e8:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__mulsf3>

000016ec <__divmodhi4>:
    16ec:	97 fb       	bst	r25, 7
    16ee:	07 2e       	mov	r0, r23
    16f0:	16 f4       	brtc	.+4      	; 0x16f6 <__divmodhi4+0xa>
    16f2:	00 94       	com	r0
    16f4:	07 d0       	rcall	.+14     	; 0x1704 <__divmodhi4_neg1>
    16f6:	77 fd       	sbrc	r23, 7
    16f8:	09 d0       	rcall	.+18     	; 0x170c <__divmodhi4_neg2>
    16fa:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__udivmodhi4>
    16fe:	07 fc       	sbrc	r0, 7
    1700:	05 d0       	rcall	.+10     	; 0x170c <__divmodhi4_neg2>
    1702:	3e f4       	brtc	.+14     	; 0x1712 <__divmodhi4_exit>

00001704 <__divmodhi4_neg1>:
    1704:	90 95       	com	r25
    1706:	81 95       	neg	r24
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	08 95       	ret

0000170c <__divmodhi4_neg2>:
    170c:	70 95       	com	r23
    170e:	61 95       	neg	r22
    1710:	7f 4f       	sbci	r23, 0xFF	; 255

00001712 <__divmodhi4_exit>:
    1712:	08 95       	ret

00001714 <__udivmodhi4>:
    1714:	aa 1b       	sub	r26, r26
    1716:	bb 1b       	sub	r27, r27
    1718:	51 e1       	ldi	r21, 0x11	; 17
    171a:	07 c0       	rjmp	.+14     	; 0x172a <__udivmodhi4_ep>

0000171c <__udivmodhi4_loop>:
    171c:	aa 1f       	adc	r26, r26
    171e:	bb 1f       	adc	r27, r27
    1720:	a6 17       	cp	r26, r22
    1722:	b7 07       	cpc	r27, r23
    1724:	10 f0       	brcs	.+4      	; 0x172a <__udivmodhi4_ep>
    1726:	a6 1b       	sub	r26, r22
    1728:	b7 0b       	sbc	r27, r23

0000172a <__udivmodhi4_ep>:
    172a:	88 1f       	adc	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	5a 95       	dec	r21
    1730:	a9 f7       	brne	.-22     	; 0x171c <__udivmodhi4_loop>
    1732:	80 95       	com	r24
    1734:	90 95       	com	r25
    1736:	bc 01       	movw	r22, r24
    1738:	cd 01       	movw	r24, r26
    173a:	08 95       	ret

0000173c <dtostrf>:
    173c:	ef 92       	push	r14
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	e8 01       	movw	r28, r16
    1748:	47 fd       	sbrc	r20, 7
    174a:	16 c0       	rjmp	.+44     	; 0x1778 <dtostrf+0x3c>
    174c:	34 e0       	ldi	r19, 0x04	; 4
    174e:	04 2e       	mov	r0, r20
    1750:	00 0c       	add	r0, r0
    1752:	55 0b       	sbc	r21, r21
    1754:	57 ff       	sbrs	r21, 7
    1756:	03 c0       	rjmp	.+6      	; 0x175e <dtostrf+0x22>
    1758:	51 95       	neg	r21
    175a:	41 95       	neg	r20
    175c:	51 09       	sbc	r21, r1
    175e:	e3 2e       	mov	r14, r19
    1760:	02 2f       	mov	r16, r18
    1762:	24 2f       	mov	r18, r20
    1764:	ae 01       	movw	r20, r28
    1766:	0e 94 c7 0b 	call	0x178e	; 0x178e <dtoa_prf>
    176a:	ce 01       	movw	r24, r28
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	ef 90       	pop	r14
    1776:	08 95       	ret
    1778:	34 e1       	ldi	r19, 0x14	; 20
    177a:	e9 cf       	rjmp	.-46     	; 0x174e <dtostrf+0x12>

0000177c <strcmp>:
    177c:	fb 01       	movw	r30, r22
    177e:	dc 01       	movw	r26, r24
    1780:	8d 91       	ld	r24, X+
    1782:	01 90       	ld	r0, Z+
    1784:	80 19       	sub	r24, r0
    1786:	01 10       	cpse	r0, r1
    1788:	d9 f3       	breq	.-10     	; 0x1780 <strcmp+0x4>
    178a:	99 0b       	sbc	r25, r25
    178c:	08 95       	ret

0000178e <dtoa_prf>:
    178e:	8f 92       	push	r8
    1790:	9f 92       	push	r9
    1792:	af 92       	push	r10
    1794:	bf 92       	push	r11
    1796:	cf 92       	push	r12
    1798:	df 92       	push	r13
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	29 97       	sbiw	r28, 0x09	; 9
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	6a 01       	movw	r12, r20
    17b8:	f2 2e       	mov	r15, r18
    17ba:	b0 2e       	mov	r11, r16
    17bc:	2b e3       	ldi	r18, 0x3B	; 59
    17be:	20 17       	cp	r18, r16
    17c0:	08 f4       	brcc	.+2      	; 0x17c4 <dtoa_prf+0x36>
    17c2:	5f c0       	rjmp	.+190    	; 0x1882 <dtoa_prf+0xf4>
    17c4:	11 e0       	ldi	r17, 0x01	; 1
    17c6:	10 0f       	add	r17, r16
    17c8:	01 2f       	mov	r16, r17
    17ca:	27 e0       	ldi	r18, 0x07	; 7
    17cc:	ae 01       	movw	r20, r28
    17ce:	4f 5f       	subi	r20, 0xFF	; 255
    17d0:	5f 4f       	sbci	r21, 0xFF	; 255
    17d2:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__ftoa_engine>
    17d6:	bc 01       	movw	r22, r24
    17d8:	39 81       	ldd	r19, Y+1	; 0x01
    17da:	83 2f       	mov	r24, r19
    17dc:	89 70       	andi	r24, 0x09	; 9
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <dtoa_prf+0x56>
    17e2:	51 c0       	rjmp	.+162    	; 0x1886 <dtoa_prf+0xf8>
    17e4:	e1 fc       	sbrc	r14, 1
    17e6:	51 c0       	rjmp	.+162    	; 0x188a <dtoa_prf+0xfc>
    17e8:	9e 2d       	mov	r25, r14
    17ea:	91 70       	andi	r25, 0x01	; 1
    17ec:	e0 fc       	sbrc	r14, 0
    17ee:	90 e2       	ldi	r25, 0x20	; 32
    17f0:	ae 2d       	mov	r26, r14
    17f2:	a0 71       	andi	r26, 0x10	; 16
    17f4:	83 2f       	mov	r24, r19
    17f6:	88 70       	andi	r24, 0x08	; 8
    17f8:	33 ff       	sbrs	r19, 3
    17fa:	5a c0       	rjmp	.+180    	; 0x18b0 <dtoa_prf+0x122>
    17fc:	91 11       	cpse	r25, r1
    17fe:	47 c0       	rjmp	.+142    	; 0x188e <dtoa_prf+0x100>
    1800:	83 e0       	ldi	r24, 0x03	; 3
    1802:	8f 15       	cp	r24, r15
    1804:	08 f0       	brcs	.+2      	; 0x1808 <dtoa_prf+0x7a>
    1806:	45 c0       	rjmp	.+138    	; 0x1892 <dtoa_prf+0x104>
    1808:	f8 1a       	sub	r15, r24
    180a:	a1 11       	cpse	r26, r1
    180c:	08 c0       	rjmp	.+16     	; 0x181e <dtoa_prf+0x90>
    180e:	f6 01       	movw	r30, r12
    1810:	8f 2d       	mov	r24, r15
    1812:	20 e2       	ldi	r18, 0x20	; 32
    1814:	81 11       	cpse	r24, r1
    1816:	3f c0       	rjmp	.+126    	; 0x1896 <dtoa_prf+0x108>
    1818:	cf 0c       	add	r12, r15
    181a:	d1 1c       	adc	r13, r1
    181c:	f1 2c       	mov	r15, r1
    181e:	99 23       	and	r25, r25
    1820:	29 f0       	breq	.+10     	; 0x182c <dtoa_prf+0x9e>
    1822:	d6 01       	movw	r26, r12
    1824:	9c 93       	st	X, r25
    1826:	f6 01       	movw	r30, r12
    1828:	31 96       	adiw	r30, 0x01	; 1
    182a:	6f 01       	movw	r12, r30
    182c:	c6 01       	movw	r24, r12
    182e:	03 96       	adiw	r24, 0x03	; 3
    1830:	e2 fe       	sbrs	r14, 2
    1832:	34 c0       	rjmp	.+104    	; 0x189c <dtoa_prf+0x10e>
    1834:	2e e4       	ldi	r18, 0x4E	; 78
    1836:	d6 01       	movw	r26, r12
    1838:	2c 93       	st	X, r18
    183a:	31 e4       	ldi	r19, 0x41	; 65
    183c:	11 96       	adiw	r26, 0x01	; 1
    183e:	3c 93       	st	X, r19
    1840:	11 97       	sbiw	r26, 0x01	; 1
    1842:	12 96       	adiw	r26, 0x02	; 2
    1844:	2c 93       	st	X, r18
    1846:	fc 01       	movw	r30, r24
    1848:	2f 2d       	mov	r18, r15
    184a:	30 e2       	ldi	r19, 0x20	; 32
    184c:	21 11       	cpse	r18, r1
    184e:	2d c0       	rjmp	.+90     	; 0x18aa <dtoa_prf+0x11c>
    1850:	8f 0d       	add	r24, r15
    1852:	91 1d       	adc	r25, r1
    1854:	dc 01       	movw	r26, r24
    1856:	1c 92       	st	X, r1
    1858:	8e ef       	ldi	r24, 0xFE	; 254
    185a:	9f ef       	ldi	r25, 0xFF	; 255
    185c:	29 96       	adiw	r28, 0x09	; 9
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	ff 90       	pop	r15
    1872:	ef 90       	pop	r14
    1874:	df 90       	pop	r13
    1876:	cf 90       	pop	r12
    1878:	bf 90       	pop	r11
    187a:	af 90       	pop	r10
    187c:	9f 90       	pop	r9
    187e:	8f 90       	pop	r8
    1880:	08 95       	ret
    1882:	1c e3       	ldi	r17, 0x3C	; 60
    1884:	a1 cf       	rjmp	.-190    	; 0x17c8 <dtoa_prf+0x3a>
    1886:	9d e2       	ldi	r25, 0x2D	; 45
    1888:	b3 cf       	rjmp	.-154    	; 0x17f0 <dtoa_prf+0x62>
    188a:	9b e2       	ldi	r25, 0x2B	; 43
    188c:	b1 cf       	rjmp	.-158    	; 0x17f0 <dtoa_prf+0x62>
    188e:	84 e0       	ldi	r24, 0x04	; 4
    1890:	b8 cf       	rjmp	.-144    	; 0x1802 <dtoa_prf+0x74>
    1892:	f1 2c       	mov	r15, r1
    1894:	ba cf       	rjmp	.-140    	; 0x180a <dtoa_prf+0x7c>
    1896:	21 93       	st	Z+, r18
    1898:	81 50       	subi	r24, 0x01	; 1
    189a:	bc cf       	rjmp	.-136    	; 0x1814 <dtoa_prf+0x86>
    189c:	2e e6       	ldi	r18, 0x6E	; 110
    189e:	f6 01       	movw	r30, r12
    18a0:	20 83       	st	Z, r18
    18a2:	31 e6       	ldi	r19, 0x61	; 97
    18a4:	31 83       	std	Z+1, r19	; 0x01
    18a6:	22 83       	std	Z+2, r18	; 0x02
    18a8:	ce cf       	rjmp	.-100    	; 0x1846 <dtoa_prf+0xb8>
    18aa:	31 93       	st	Z+, r19
    18ac:	21 50       	subi	r18, 0x01	; 1
    18ae:	ce cf       	rjmp	.-100    	; 0x184c <dtoa_prf+0xbe>
    18b0:	23 2f       	mov	r18, r19
    18b2:	24 70       	andi	r18, 0x04	; 4
    18b4:	32 ff       	sbrs	r19, 2
    18b6:	41 c0       	rjmp	.+130    	; 0x193a <dtoa_prf+0x1ac>
    18b8:	91 11       	cpse	r25, r1
    18ba:	2f c0       	rjmp	.+94     	; 0x191a <dtoa_prf+0x18c>
    18bc:	23 e0       	ldi	r18, 0x03	; 3
    18be:	2f 15       	cp	r18, r15
    18c0:	10 f4       	brcc	.+4      	; 0x18c6 <dtoa_prf+0x138>
    18c2:	8f 2d       	mov	r24, r15
    18c4:	82 1b       	sub	r24, r18
    18c6:	a1 11       	cpse	r26, r1
    18c8:	08 c0       	rjmp	.+16     	; 0x18da <dtoa_prf+0x14c>
    18ca:	f6 01       	movw	r30, r12
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e2       	ldi	r19, 0x20	; 32
    18d0:	21 11       	cpse	r18, r1
    18d2:	25 c0       	rjmp	.+74     	; 0x191e <dtoa_prf+0x190>
    18d4:	c8 0e       	add	r12, r24
    18d6:	d1 1c       	adc	r13, r1
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	99 23       	and	r25, r25
    18dc:	31 f0       	breq	.+12     	; 0x18ea <dtoa_prf+0x15c>
    18de:	f6 01       	movw	r30, r12
    18e0:	90 83       	st	Z, r25
    18e2:	96 01       	movw	r18, r12
    18e4:	2f 5f       	subi	r18, 0xFF	; 255
    18e6:	3f 4f       	sbci	r19, 0xFF	; 255
    18e8:	69 01       	movw	r12, r18
    18ea:	96 01       	movw	r18, r12
    18ec:	2d 5f       	subi	r18, 0xFD	; 253
    18ee:	3f 4f       	sbci	r19, 0xFF	; 255
    18f0:	e2 fe       	sbrs	r14, 2
    18f2:	18 c0       	rjmp	.+48     	; 0x1924 <dtoa_prf+0x196>
    18f4:	99 e4       	ldi	r25, 0x49	; 73
    18f6:	d6 01       	movw	r26, r12
    18f8:	9c 93       	st	X, r25
    18fa:	9e e4       	ldi	r25, 0x4E	; 78
    18fc:	11 96       	adiw	r26, 0x01	; 1
    18fe:	9c 93       	st	X, r25
    1900:	11 97       	sbiw	r26, 0x01	; 1
    1902:	96 e4       	ldi	r25, 0x46	; 70
    1904:	12 96       	adiw	r26, 0x02	; 2
    1906:	9c 93       	st	X, r25
    1908:	f9 01       	movw	r30, r18
    190a:	98 2f       	mov	r25, r24
    190c:	40 e2       	ldi	r20, 0x20	; 32
    190e:	91 11       	cpse	r25, r1
    1910:	11 c0       	rjmp	.+34     	; 0x1934 <dtoa_prf+0x1a6>
    1912:	28 0f       	add	r18, r24
    1914:	31 1d       	adc	r19, r1
    1916:	d9 01       	movw	r26, r18
    1918:	9e cf       	rjmp	.-196    	; 0x1856 <dtoa_prf+0xc8>
    191a:	24 e0       	ldi	r18, 0x04	; 4
    191c:	d0 cf       	rjmp	.-96     	; 0x18be <dtoa_prf+0x130>
    191e:	31 93       	st	Z+, r19
    1920:	21 50       	subi	r18, 0x01	; 1
    1922:	d6 cf       	rjmp	.-84     	; 0x18d0 <dtoa_prf+0x142>
    1924:	99 e6       	ldi	r25, 0x69	; 105
    1926:	f6 01       	movw	r30, r12
    1928:	90 83       	st	Z, r25
    192a:	9e e6       	ldi	r25, 0x6E	; 110
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	96 e6       	ldi	r25, 0x66	; 102
    1930:	92 83       	std	Z+2, r25	; 0x02
    1932:	ea cf       	rjmp	.-44     	; 0x1908 <dtoa_prf+0x17a>
    1934:	41 93       	st	Z+, r20
    1936:	91 50       	subi	r25, 0x01	; 1
    1938:	ea cf       	rjmp	.-44     	; 0x190e <dtoa_prf+0x180>
    193a:	41 e0       	ldi	r20, 0x01	; 1
    193c:	50 e0       	ldi	r21, 0x00	; 0
    193e:	91 11       	cpse	r25, r1
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <dtoa_prf+0x1b8>
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	16 16       	cp	r1, r22
    1948:	17 06       	cpc	r1, r23
    194a:	0c f0       	brlt	.+2      	; 0x194e <dtoa_prf+0x1c0>
    194c:	75 c0       	rjmp	.+234    	; 0x1a38 <dtoa_prf+0x2aa>
    194e:	fb 01       	movw	r30, r22
    1950:	31 96       	adiw	r30, 0x01	; 1
    1952:	e4 0f       	add	r30, r20
    1954:	f5 1f       	adc	r31, r21
    1956:	bb 20       	and	r11, r11
    1958:	09 f4       	brne	.+2      	; 0x195c <dtoa_prf+0x1ce>
    195a:	71 c0       	rjmp	.+226    	; 0x1a3e <dtoa_prf+0x2b0>
    195c:	4b 2d       	mov	r20, r11
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	4f 5f       	subi	r20, 0xFF	; 255
    1962:	5f 4f       	sbci	r21, 0xFF	; 255
    1964:	4e 0f       	add	r20, r30
    1966:	5f 1f       	adc	r21, r31
    1968:	ef 2d       	mov	r30, r15
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	4e 17       	cp	r20, r30
    196e:	5f 07       	cpc	r21, r31
    1970:	14 f4       	brge	.+4      	; 0x1976 <dtoa_prf+0x1e8>
    1972:	2f 2d       	mov	r18, r15
    1974:	24 1b       	sub	r18, r20
    1976:	8e 2d       	mov	r24, r14
    1978:	88 71       	andi	r24, 0x18	; 24
    197a:	41 f4       	brne	.+16     	; 0x198c <dtoa_prf+0x1fe>
    197c:	f6 01       	movw	r30, r12
    197e:	82 2f       	mov	r24, r18
    1980:	40 e2       	ldi	r20, 0x20	; 32
    1982:	81 11       	cpse	r24, r1
    1984:	5f c0       	rjmp	.+190    	; 0x1a44 <dtoa_prf+0x2b6>
    1986:	c2 0e       	add	r12, r18
    1988:	d1 1c       	adc	r13, r1
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	99 23       	and	r25, r25
    198e:	29 f0       	breq	.+10     	; 0x199a <dtoa_prf+0x20c>
    1990:	f6 01       	movw	r30, r12
    1992:	90 83       	st	Z, r25
    1994:	c6 01       	movw	r24, r12
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	6c 01       	movw	r12, r24
    199a:	a1 11       	cpse	r26, r1
    199c:	08 c0       	rjmp	.+16     	; 0x19ae <dtoa_prf+0x220>
    199e:	f6 01       	movw	r30, r12
    19a0:	82 2f       	mov	r24, r18
    19a2:	90 e3       	ldi	r25, 0x30	; 48
    19a4:	81 11       	cpse	r24, r1
    19a6:	51 c0       	rjmp	.+162    	; 0x1a4a <dtoa_prf+0x2bc>
    19a8:	c2 0e       	add	r12, r18
    19aa:	d1 1c       	adc	r13, r1
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	01 2f       	mov	r16, r17
    19b0:	06 0f       	add	r16, r22
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	a3 2f       	mov	r26, r19
    19b6:	a0 71       	andi	r26, 0x10	; 16
    19b8:	aa 2e       	mov	r10, r26
    19ba:	34 ff       	sbrs	r19, 4
    19bc:	03 c0       	rjmp	.+6      	; 0x19c4 <dtoa_prf+0x236>
    19be:	91 33       	cpi	r25, 0x31	; 49
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <dtoa_prf+0x236>
    19c2:	01 50       	subi	r16, 0x01	; 1
    19c4:	10 16       	cp	r1, r16
    19c6:	0c f0       	brlt	.+2      	; 0x19ca <dtoa_prf+0x23c>
    19c8:	43 c0       	rjmp	.+134    	; 0x1a50 <dtoa_prf+0x2c2>
    19ca:	09 30       	cpi	r16, 0x09	; 9
    19cc:	08 f0       	brcs	.+2      	; 0x19d0 <dtoa_prf+0x242>
    19ce:	08 e0       	ldi	r16, 0x08	; 8
    19d0:	ab 01       	movw	r20, r22
    19d2:	77 ff       	sbrs	r23, 7
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <dtoa_prf+0x24c>
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	fb 01       	movw	r30, r22
    19dc:	31 96       	adiw	r30, 0x01	; 1
    19de:	e4 1b       	sub	r30, r20
    19e0:	f5 0b       	sbc	r31, r21
    19e2:	a1 e0       	ldi	r26, 0x01	; 1
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	ac 0f       	add	r26, r28
    19e8:	bd 1f       	adc	r27, r29
    19ea:	ea 0f       	add	r30, r26
    19ec:	fb 1f       	adc	r31, r27
    19ee:	3e e2       	ldi	r19, 0x2E	; 46
    19f0:	4b 01       	movw	r8, r22
    19f2:	80 1a       	sub	r8, r16
    19f4:	91 08       	sbc	r9, r1
    19f6:	0b 2d       	mov	r16, r11
    19f8:	10 e0       	ldi	r17, 0x00	; 0
    19fa:	11 95       	neg	r17
    19fc:	01 95       	neg	r16
    19fe:	11 09       	sbc	r17, r1
    1a00:	4f 3f       	cpi	r20, 0xFF	; 255
    1a02:	bf ef       	ldi	r27, 0xFF	; 255
    1a04:	5b 07       	cpc	r21, r27
    1a06:	21 f4       	brne	.+8      	; 0x1a10 <dtoa_prf+0x282>
    1a08:	d6 01       	movw	r26, r12
    1a0a:	3c 93       	st	X, r19
    1a0c:	11 96       	adiw	r26, 0x01	; 1
    1a0e:	6d 01       	movw	r12, r26
    1a10:	64 17       	cp	r22, r20
    1a12:	75 07       	cpc	r23, r21
    1a14:	fc f0       	brlt	.+62     	; 0x1a54 <dtoa_prf+0x2c6>
    1a16:	84 16       	cp	r8, r20
    1a18:	95 06       	cpc	r9, r21
    1a1a:	e4 f4       	brge	.+56     	; 0x1a54 <dtoa_prf+0x2c6>
    1a1c:	80 81       	ld	r24, Z
    1a1e:	41 50       	subi	r20, 0x01	; 1
    1a20:	51 09       	sbc	r21, r1
    1a22:	31 96       	adiw	r30, 0x01	; 1
    1a24:	d6 01       	movw	r26, r12
    1a26:	11 96       	adiw	r26, 0x01	; 1
    1a28:	7d 01       	movw	r14, r26
    1a2a:	40 17       	cp	r20, r16
    1a2c:	51 07       	cpc	r21, r17
    1a2e:	a4 f0       	brlt	.+40     	; 0x1a58 <dtoa_prf+0x2ca>
    1a30:	d6 01       	movw	r26, r12
    1a32:	8c 93       	st	X, r24
    1a34:	67 01       	movw	r12, r14
    1a36:	e4 cf       	rjmp	.-56     	; 0x1a00 <dtoa_prf+0x272>
    1a38:	e1 e0       	ldi	r30, 0x01	; 1
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	8a cf       	rjmp	.-236    	; 0x1952 <dtoa_prf+0x1c4>
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	90 cf       	rjmp	.-224    	; 0x1964 <dtoa_prf+0x1d6>
    1a44:	41 93       	st	Z+, r20
    1a46:	81 50       	subi	r24, 0x01	; 1
    1a48:	9c cf       	rjmp	.-200    	; 0x1982 <dtoa_prf+0x1f4>
    1a4a:	91 93       	st	Z+, r25
    1a4c:	81 50       	subi	r24, 0x01	; 1
    1a4e:	aa cf       	rjmp	.-172    	; 0x19a4 <dtoa_prf+0x216>
    1a50:	01 e0       	ldi	r16, 0x01	; 1
    1a52:	be cf       	rjmp	.-132    	; 0x19d0 <dtoa_prf+0x242>
    1a54:	80 e3       	ldi	r24, 0x30	; 48
    1a56:	e3 cf       	rjmp	.-58     	; 0x1a1e <dtoa_prf+0x290>
    1a58:	64 17       	cp	r22, r20
    1a5a:	75 07       	cpc	r23, r21
    1a5c:	31 f4       	brne	.+12     	; 0x1a6a <dtoa_prf+0x2dc>
    1a5e:	96 33       	cpi	r25, 0x36	; 54
    1a60:	90 f4       	brcc	.+36     	; 0x1a86 <dtoa_prf+0x2f8>
    1a62:	95 33       	cpi	r25, 0x35	; 53
    1a64:	11 f4       	brne	.+4      	; 0x1a6a <dtoa_prf+0x2dc>
    1a66:	aa 20       	and	r10, r10
    1a68:	71 f0       	breq	.+28     	; 0x1a86 <dtoa_prf+0x2f8>
    1a6a:	f6 01       	movw	r30, r12
    1a6c:	80 83       	st	Z, r24
    1a6e:	f7 01       	movw	r30, r14
    1a70:	82 2f       	mov	r24, r18
    1a72:	90 e2       	ldi	r25, 0x20	; 32
    1a74:	81 11       	cpse	r24, r1
    1a76:	09 c0       	rjmp	.+18     	; 0x1a8a <dtoa_prf+0x2fc>
    1a78:	f7 01       	movw	r30, r14
    1a7a:	e2 0f       	add	r30, r18
    1a7c:	f1 1d       	adc	r31, r1
    1a7e:	10 82       	st	Z, r1
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	eb ce       	rjmp	.-554    	; 0x185c <dtoa_prf+0xce>
    1a86:	81 e3       	ldi	r24, 0x31	; 49
    1a88:	f0 cf       	rjmp	.-32     	; 0x1a6a <dtoa_prf+0x2dc>
    1a8a:	91 93       	st	Z+, r25
    1a8c:	81 50       	subi	r24, 0x01	; 1
    1a8e:	f2 cf       	rjmp	.-28     	; 0x1a74 <dtoa_prf+0x2e6>

00001a90 <__ftoa_engine>:
    1a90:	28 30       	cpi	r18, 0x08	; 8
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <__ftoa_engine+0x6>
    1a94:	27 e0       	ldi	r18, 0x07	; 7
    1a96:	33 27       	eor	r19, r19
    1a98:	da 01       	movw	r26, r20
    1a9a:	99 0f       	add	r25, r25
    1a9c:	31 1d       	adc	r19, r1
    1a9e:	87 fd       	sbrc	r24, 7
    1aa0:	91 60       	ori	r25, 0x01	; 1
    1aa2:	00 96       	adiw	r24, 0x00	; 0
    1aa4:	61 05       	cpc	r22, r1
    1aa6:	71 05       	cpc	r23, r1
    1aa8:	39 f4       	brne	.+14     	; 0x1ab8 <__ftoa_engine+0x28>
    1aaa:	32 60       	ori	r19, 0x02	; 2
    1aac:	2e 5f       	subi	r18, 0xFE	; 254
    1aae:	3d 93       	st	X+, r19
    1ab0:	30 e3       	ldi	r19, 0x30	; 48
    1ab2:	2a 95       	dec	r18
    1ab4:	e1 f7       	brne	.-8      	; 0x1aae <__ftoa_engine+0x1e>
    1ab6:	08 95       	ret
    1ab8:	9f 3f       	cpi	r25, 0xFF	; 255
    1aba:	30 f0       	brcs	.+12     	; 0x1ac8 <__ftoa_engine+0x38>
    1abc:	80 38       	cpi	r24, 0x80	; 128
    1abe:	71 05       	cpc	r23, r1
    1ac0:	61 05       	cpc	r22, r1
    1ac2:	09 f0       	breq	.+2      	; 0x1ac6 <__ftoa_engine+0x36>
    1ac4:	3c 5f       	subi	r19, 0xFC	; 252
    1ac6:	3c 5f       	subi	r19, 0xFC	; 252
    1ac8:	3d 93       	st	X+, r19
    1aca:	91 30       	cpi	r25, 0x01	; 1
    1acc:	08 f0       	brcs	.+2      	; 0x1ad0 <__ftoa_engine+0x40>
    1ace:	80 68       	ori	r24, 0x80	; 128
    1ad0:	91 1d       	adc	r25, r1
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	1f 93       	push	r17
    1ad8:	0f 93       	push	r16
    1ada:	ff 92       	push	r15
    1adc:	ef 92       	push	r14
    1ade:	19 2f       	mov	r17, r25
    1ae0:	98 7f       	andi	r25, 0xF8	; 248
    1ae2:	96 95       	lsr	r25
    1ae4:	e9 2f       	mov	r30, r25
    1ae6:	96 95       	lsr	r25
    1ae8:	96 95       	lsr	r25
    1aea:	e9 0f       	add	r30, r25
    1aec:	ff 27       	eor	r31, r31
    1aee:	ec 5e       	subi	r30, 0xEC	; 236
    1af0:	fe 4f       	sbci	r31, 0xFE	; 254
    1af2:	99 27       	eor	r25, r25
    1af4:	33 27       	eor	r19, r19
    1af6:	ee 24       	eor	r14, r14
    1af8:	ff 24       	eor	r15, r15
    1afa:	a7 01       	movw	r20, r14
    1afc:	e7 01       	movw	r28, r14
    1afe:	05 90       	lpm	r0, Z+
    1b00:	08 94       	sec
    1b02:	07 94       	ror	r0
    1b04:	28 f4       	brcc	.+10     	; 0x1b10 <__ftoa_engine+0x80>
    1b06:	36 0f       	add	r19, r22
    1b08:	e7 1e       	adc	r14, r23
    1b0a:	f8 1e       	adc	r15, r24
    1b0c:	49 1f       	adc	r20, r25
    1b0e:	51 1d       	adc	r21, r1
    1b10:	66 0f       	add	r22, r22
    1b12:	77 1f       	adc	r23, r23
    1b14:	88 1f       	adc	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	06 94       	lsr	r0
    1b1a:	a1 f7       	brne	.-24     	; 0x1b04 <__ftoa_engine+0x74>
    1b1c:	05 90       	lpm	r0, Z+
    1b1e:	07 94       	ror	r0
    1b20:	28 f4       	brcc	.+10     	; 0x1b2c <__ftoa_engine+0x9c>
    1b22:	e7 0e       	add	r14, r23
    1b24:	f8 1e       	adc	r15, r24
    1b26:	49 1f       	adc	r20, r25
    1b28:	56 1f       	adc	r21, r22
    1b2a:	c1 1d       	adc	r28, r1
    1b2c:	77 0f       	add	r23, r23
    1b2e:	88 1f       	adc	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	66 1f       	adc	r22, r22
    1b34:	06 94       	lsr	r0
    1b36:	a1 f7       	brne	.-24     	; 0x1b20 <__ftoa_engine+0x90>
    1b38:	05 90       	lpm	r0, Z+
    1b3a:	07 94       	ror	r0
    1b3c:	28 f4       	brcc	.+10     	; 0x1b48 <__ftoa_engine+0xb8>
    1b3e:	f8 0e       	add	r15, r24
    1b40:	49 1f       	adc	r20, r25
    1b42:	56 1f       	adc	r21, r22
    1b44:	c7 1f       	adc	r28, r23
    1b46:	d1 1d       	adc	r29, r1
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	66 1f       	adc	r22, r22
    1b4e:	77 1f       	adc	r23, r23
    1b50:	06 94       	lsr	r0
    1b52:	a1 f7       	brne	.-24     	; 0x1b3c <__ftoa_engine+0xac>
    1b54:	05 90       	lpm	r0, Z+
    1b56:	07 94       	ror	r0
    1b58:	20 f4       	brcc	.+8      	; 0x1b62 <__ftoa_engine+0xd2>
    1b5a:	49 0f       	add	r20, r25
    1b5c:	56 1f       	adc	r21, r22
    1b5e:	c7 1f       	adc	r28, r23
    1b60:	d8 1f       	adc	r29, r24
    1b62:	99 0f       	add	r25, r25
    1b64:	66 1f       	adc	r22, r22
    1b66:	77 1f       	adc	r23, r23
    1b68:	88 1f       	adc	r24, r24
    1b6a:	06 94       	lsr	r0
    1b6c:	a9 f7       	brne	.-22     	; 0x1b58 <__ftoa_engine+0xc8>
    1b6e:	84 91       	lpm	r24, Z
    1b70:	10 95       	com	r17
    1b72:	17 70       	andi	r17, 0x07	; 7
    1b74:	41 f0       	breq	.+16     	; 0x1b86 <__ftoa_engine+0xf6>
    1b76:	d6 95       	lsr	r29
    1b78:	c7 95       	ror	r28
    1b7a:	57 95       	ror	r21
    1b7c:	47 95       	ror	r20
    1b7e:	f7 94       	ror	r15
    1b80:	e7 94       	ror	r14
    1b82:	1a 95       	dec	r17
    1b84:	c1 f7       	brne	.-16     	; 0x1b76 <__ftoa_engine+0xe6>
    1b86:	ea eb       	ldi	r30, 0xBA	; 186
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	68 94       	set
    1b8c:	15 90       	lpm	r1, Z+
    1b8e:	15 91       	lpm	r17, Z+
    1b90:	35 91       	lpm	r19, Z+
    1b92:	65 91       	lpm	r22, Z+
    1b94:	95 91       	lpm	r25, Z+
    1b96:	05 90       	lpm	r0, Z+
    1b98:	7f e2       	ldi	r23, 0x2F	; 47
    1b9a:	73 95       	inc	r23
    1b9c:	e1 18       	sub	r14, r1
    1b9e:	f1 0a       	sbc	r15, r17
    1ba0:	43 0b       	sbc	r20, r19
    1ba2:	56 0b       	sbc	r21, r22
    1ba4:	c9 0b       	sbc	r28, r25
    1ba6:	d0 09       	sbc	r29, r0
    1ba8:	c0 f7       	brcc	.-16     	; 0x1b9a <__ftoa_engine+0x10a>
    1baa:	e1 0c       	add	r14, r1
    1bac:	f1 1e       	adc	r15, r17
    1bae:	43 1f       	adc	r20, r19
    1bb0:	56 1f       	adc	r21, r22
    1bb2:	c9 1f       	adc	r28, r25
    1bb4:	d0 1d       	adc	r29, r0
    1bb6:	7e f4       	brtc	.+30     	; 0x1bd6 <__ftoa_engine+0x146>
    1bb8:	70 33       	cpi	r23, 0x30	; 48
    1bba:	11 f4       	brne	.+4      	; 0x1bc0 <__ftoa_engine+0x130>
    1bbc:	8a 95       	dec	r24
    1bbe:	e6 cf       	rjmp	.-52     	; 0x1b8c <__ftoa_engine+0xfc>
    1bc0:	e8 94       	clt
    1bc2:	01 50       	subi	r16, 0x01	; 1
    1bc4:	30 f0       	brcs	.+12     	; 0x1bd2 <__ftoa_engine+0x142>
    1bc6:	08 0f       	add	r16, r24
    1bc8:	0a f4       	brpl	.+2      	; 0x1bcc <__ftoa_engine+0x13c>
    1bca:	00 27       	eor	r16, r16
    1bcc:	02 17       	cp	r16, r18
    1bce:	08 f4       	brcc	.+2      	; 0x1bd2 <__ftoa_engine+0x142>
    1bd0:	20 2f       	mov	r18, r16
    1bd2:	23 95       	inc	r18
    1bd4:	02 2f       	mov	r16, r18
    1bd6:	7a 33       	cpi	r23, 0x3A	; 58
    1bd8:	28 f0       	brcs	.+10     	; 0x1be4 <__ftoa_engine+0x154>
    1bda:	79 e3       	ldi	r23, 0x39	; 57
    1bdc:	7d 93       	st	X+, r23
    1bde:	2a 95       	dec	r18
    1be0:	e9 f7       	brne	.-6      	; 0x1bdc <__ftoa_engine+0x14c>
    1be2:	10 c0       	rjmp	.+32     	; 0x1c04 <__ftoa_engine+0x174>
    1be4:	7d 93       	st	X+, r23
    1be6:	2a 95       	dec	r18
    1be8:	89 f6       	brne	.-94     	; 0x1b8c <__ftoa_engine+0xfc>
    1bea:	06 94       	lsr	r0
    1bec:	97 95       	ror	r25
    1bee:	67 95       	ror	r22
    1bf0:	37 95       	ror	r19
    1bf2:	17 95       	ror	r17
    1bf4:	17 94       	ror	r1
    1bf6:	e1 18       	sub	r14, r1
    1bf8:	f1 0a       	sbc	r15, r17
    1bfa:	43 0b       	sbc	r20, r19
    1bfc:	56 0b       	sbc	r21, r22
    1bfe:	c9 0b       	sbc	r28, r25
    1c00:	d0 09       	sbc	r29, r0
    1c02:	98 f0       	brcs	.+38     	; 0x1c2a <__ftoa_engine+0x19a>
    1c04:	23 95       	inc	r18
    1c06:	7e 91       	ld	r23, -X
    1c08:	73 95       	inc	r23
    1c0a:	7a 33       	cpi	r23, 0x3A	; 58
    1c0c:	08 f0       	brcs	.+2      	; 0x1c10 <__ftoa_engine+0x180>
    1c0e:	70 e3       	ldi	r23, 0x30	; 48
    1c10:	7c 93       	st	X, r23
    1c12:	20 13       	cpse	r18, r16
    1c14:	b8 f7       	brcc	.-18     	; 0x1c04 <__ftoa_engine+0x174>
    1c16:	7e 91       	ld	r23, -X
    1c18:	70 61       	ori	r23, 0x10	; 16
    1c1a:	7d 93       	st	X+, r23
    1c1c:	30 f0       	brcs	.+12     	; 0x1c2a <__ftoa_engine+0x19a>
    1c1e:	83 95       	inc	r24
    1c20:	71 e3       	ldi	r23, 0x31	; 49
    1c22:	7d 93       	st	X+, r23
    1c24:	70 e3       	ldi	r23, 0x30	; 48
    1c26:	2a 95       	dec	r18
    1c28:	e1 f7       	brne	.-8      	; 0x1c22 <__ftoa_engine+0x192>
    1c2a:	11 24       	eor	r1, r1
    1c2c:	ef 90       	pop	r14
    1c2e:	ff 90       	pop	r15
    1c30:	0f 91       	pop	r16
    1c32:	1f 91       	pop	r17
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	99 27       	eor	r25, r25
    1c3a:	87 fd       	sbrc	r24, 7
    1c3c:	90 95       	com	r25
    1c3e:	08 95       	ret

00001c40 <_exit>:
    1c40:	f8 94       	cli

00001c42 <__stop_program>:
    1c42:	ff cf       	rjmp	.-2      	; 0x1c42 <__stop_program>
