
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000e02  00000e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  00000ea0  2**0
                  ALLOC
  3 .stab         00001704  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001336  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000038da  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000038ec  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000020  00000000  00000000  00003928  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000ba9  00000000  00000000  00003948  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008ab  00000000  00000000  000044f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000124  00000000  00000000  00004d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000164  00000000  00000000  00004ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000432  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000006d1  00000000  00000000  00005456  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  00005b27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e0       	ldi	r30, 0x02	; 2
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 17 04 	call	0x82e	; 0x82e <main>
  c6:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <init_esc>:

    return 0;
}

void init_esc(){
    PORTB |= (1 << 4);
  ce:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e6       	ldi	r24, 0x6F	; 111
  d2:	97 e1       	ldi	r25, 0x17	; 23
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <init_esc+0x6>
  d8:	00 c0       	rjmp	.+0      	; 0xda <init_esc+0xc>
  da:	00 00       	nop
    _delay_us(STOP);
    PORTB &= ~(1 << 4);
  dc:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	9f ef       	ldi	r25, 0xFF	; 255
  e0:	23 ed       	ldi	r18, 0xD3	; 211
  e2:	80 e3       	ldi	r24, 0x30	; 48
  e4:	91 50       	subi	r25, 0x01	; 1
  e6:	20 40       	sbci	r18, 0x00	; 0
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <init_esc+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <init_esc+0x20>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <set_16bitPWM1>:
    _delay_ms(1000);
}

void set_16bitPWM1(){
    //16-bit fast pwm non-inverting on PB5
    TCCR1A |= (1 << COM1A1); //inverting
  f2:	8f b5       	in	r24, 0x2f	; 47
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB6
    TCCR1A |= (1 << COM1B1); //non-inverting
  f8:	8f b5       	in	r24, 0x2f	; 47
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	8f bd       	out	0x2f, r24	; 47

    //16-bit fast pwm non-inverting on PB7
    TCCR1A |= (1 << COM1C1); //non-inverting
  fe:	8f b5       	in	r24, 0x2f	; 47
 100:	88 60       	ori	r24, 0x08	; 8
 102:	8f bd       	out	0x2f, r24	; 47

    //Fast PWM w/ TOP ICR1
    TCCR1A |= (1 << WGM11); 
 104:	8f b5       	in	r24, 0x2f	; 47
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13) | (1 << WGM12);
 10a:	8e b5       	in	r24, 0x2e	; 46
 10c:	88 61       	ori	r24, 0x18	; 24
 10e:	8e bd       	out	0x2e, r24	; 46
    switch (PRESCALER){
        case 1:
            TCCR1B |= (1 << CS10); //244.140625 Hz
            break;
        case 8:
            TCCR1B |= (1 << CS11); //30.517578 Hz
 110:	8e b5       	in	r24, 0x2e	; 46
 112:	82 60       	ori	r24, 0x02	; 2
 114:	8e bd       	out	0x2e, r24	; 46
}

void TIM16_WriteTCNT1( unsigned int i ) {
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
 116:	8f b7       	in	r24, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
 118:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	3d bd       	out	0x2d, r19	; 45
 120:	2c bd       	out	0x2c, r18	; 44
    sei();
 122:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
 124:	8f bf       	out	0x3f, r24	; 63
            break;
    }
    

    TIM16_WriteTCNT1(1);
    ICR1 = (unsigned int) 65535;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	9f ef       	ldi	r25, 0xFF	; 255
 12a:	97 bd       	out	0x27, r25	; 39
 12c:	86 bd       	out	0x26, r24	; 38
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	81 ee       	ldi	r24, 0xE1	; 225
 132:	94 e0       	ldi	r25, 0x04	; 4
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <set_16bitPWM1+0x42>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <set_16bitPWM1+0x4c>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <TIM16_WriteTCNT1>:
    _delay_ms(100);
}

void TIM16_WriteTCNT1( unsigned int i ) {
 142:	9c 01       	movw	r18, r24
    unsigned char sreg;
    /* Save global interrupt flag */ 
    sreg = SREG;
 144:	9f b7       	in	r25, 0x3f	; 63
    /* Disable interrupts */ 
    cli();
 146:	f8 94       	cli
    /* Set TCNTn to i */
    TCNT1 = i;
 148:	3d bd       	out	0x2d, r19	; 45
 14a:	2c bd       	out	0x2c, r18	; 44
    sei();
 14c:	78 94       	sei
    /* Restore global interrupt flag */ 
    SREG = sreg;
 14e:	9f bf       	out	0x3f, r25	; 63
 150:	08 95       	ret

00000152 <USART_Init>:
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
 152:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
 156:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 15a:	88 e1       	ldi	r24, 0x18	; 24
 15c:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
 160:	8c e0       	ldi	r24, 0x0C	; 12
 162:	80 93 9d 00 	sts	0x009D, r24
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	94 e0       	ldi	r25, 0x04	; 4
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <USART_Init+0x1a>
 174:	00 c0       	rjmp	.+0      	; 0x176 <USART_Init+0x24>
 176:	00 00       	nop
 178:	08 95       	ret

0000017a <USART_Transmit>:
    _delay_ms(100);
}
void USART_Transmit(char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 17a:	90 91 9b 00 	lds	r25, 0x009B
 17e:	95 ff       	sbrs	r25, 5
 180:	fc cf       	rjmp	.-8      	; 0x17a <USART_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 182:	80 93 9c 00 	sts	0x009C, r24
 186:	08 95       	ret

00000188 <USART_send_string>:
}

void USART_send_string(char *data){
    int i = 0;
    while (data[i] != '\0'){
 188:	fc 01       	movw	r30, r24
 18a:	20 81       	ld	r18, Z
 18c:	22 23       	and	r18, r18
 18e:	51 f0       	breq	.+20     	; 0x1a4 <USART_send_string+0x1c>
 190:	31 96       	adiw	r30, 0x01	; 1
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
    _delay_ms(100);
}
void USART_Transmit(char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 192:	90 91 9b 00 	lds	r25, 0x009B
 196:	95 ff       	sbrs	r25, 5
 198:	fc cf       	rjmp	.-8      	; 0x192 <USART_send_string+0xa>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 19a:	20 93 9c 00 	sts	0x009C, r18
}

void USART_send_string(char *data){
    int i = 0;
    while (data[i] != '\0'){
 19e:	21 91       	ld	r18, Z+
 1a0:	21 11       	cpse	r18, r1
 1a2:	f7 cf       	rjmp	.-18     	; 0x192 <USART_send_string+0xa>
 1a4:	08 95       	ret

000001a6 <USART_Receive>:
    }
}

char USART_Receive(void){
    /* Wait for data to be received */ 
    while ( !(UCSR1A & (1<<RXC1)) );
 1a6:	80 91 9b 00 	lds	r24, 0x009B
 1aa:	87 ff       	sbrs	r24, 7
 1ac:	fc cf       	rjmp	.-8      	; 0x1a6 <USART_Receive>
    /* Get and return received data from buffer */ 
    return UDR1;
 1ae:	80 91 9c 00 	lds	r24, 0x009C
}
 1b2:	08 95       	ret

000001b4 <USART_Receive_String>:

void USART_Receive_String(char *str){
 1b4:	ac 01       	movw	r20, r24
 1b6:	fc 01       	movw	r30, r24
 1b8:	9c 01       	movw	r18, r24
 1ba:	2c 59       	subi	r18, 0x9C	; 156
 1bc:	3f 4f       	sbci	r19, 0xFF	; 255
    }
}

char USART_Receive(void){
    /* Wait for data to be received */ 
    while ( !(UCSR1A & (1<<RXC1)) );
 1be:	90 91 9b 00 	lds	r25, 0x009B
 1c2:	97 ff       	sbrs	r25, 7
 1c4:	fc cf       	rjmp	.-8      	; 0x1be <USART_Receive_String+0xa>
    /* Get and return received data from buffer */ 
    return UDR1;
 1c6:	90 91 9c 00 	lds	r25, 0x009C

void USART_Receive_String(char *str){
    int i = 0;
    char c;

    while ((c = USART_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 1ca:	9e 37       	cpi	r25, 0x7E	; 126
 1cc:	49 f0       	breq	.+18     	; 0x1e0 <USART_Receive_String+0x2c>
        str[i] = c;
 1ce:	91 93       	st	Z+, r25
        //char2lcd(c);
        //string2lcd(str);
        ++i;
        if (i >= MAX_STRING_SIZE){
 1d0:	e2 17       	cp	r30, r18
 1d2:	f3 07       	cpc	r31, r19
 1d4:	a1 f7       	brne	.-24     	; 0x1be <USART_Receive_String+0xa>
            str[MAX_STRING_SIZE - 1] = '\0';
 1d6:	4d 59       	subi	r20, 0x9D	; 157
 1d8:	5f 4f       	sbci	r21, 0xFF	; 255
 1da:	fa 01       	movw	r30, r20
 1dc:	10 82       	st	Z, r1

            return;
 1de:	08 95       	ret
 1e0:	08 95       	ret

000001e2 <strobe_lcd>:

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 1e2:	e2 e6       	ldi	r30, 0x62	; 98
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	88 60       	ori	r24, 0x08	; 8
 1ea:	80 83       	st	Z, r24
    PORTF &= ~0x08;
 1ec:	80 81       	ld	r24, Z
 1ee:	87 7f       	andi	r24, 0xF7	; 247
 1f0:	80 83       	st	Z, r24
 1f2:	08 95       	ret

000001f4 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 1f4:	77 9b       	sbis	0x0e, 7	; 14
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <clear_display>
    SPDR = 0x00;    //command, not data
 1f8:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 1fa:	77 9b       	sbis	0x0e, 7	; 14
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <clear_display+0x6>
    SPDR = 0x01;    //clear display command
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 202:	77 9b       	sbis	0x0e, 7	; 14
 204:	fe cf       	rjmp	.-4      	; 0x202 <clear_display+0xe>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 206:	80 91 62 00 	lds	r24, 0x0062
 20a:	88 60       	ori	r24, 0x08	; 8
 20c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 210:	80 91 62 00 	lds	r24, 0x0062
 214:	87 7f       	andi	r24, 0xF7	; 247
 216:	80 93 62 00 	sts	0x0062, r24
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	98 e2       	ldi	r25, 0x28	; 40
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <clear_display+0x2a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <clear_display+0x30>
 224:	00 00       	nop
 226:	08 95       	ret

00000228 <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 228:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 22a:	77 9b       	sbis	0x0e, 7	; 14
 22c:	fe cf       	rjmp	.-4      	; 0x22a <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
 22e:	80 ec       	ldi	r24, 0xC0	; 192
 230:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 232:	77 9b       	sbis	0x0e, 7	; 14
 234:	fe cf       	rjmp	.-4      	; 0x232 <home_line2+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 236:	80 91 62 00 	lds	r24, 0x0062
 23a:	88 60       	ori	r24, 0x08	; 8
 23c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 240:	80 91 62 00 	lds	r24, 0x0062
 244:	87 7f       	andi	r24, 0xF7	; 247
 246:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	85 ec       	ldi	r24, 0xC5	; 197
 24c:	8a 95       	dec	r24
 24e:	f1 f7       	brne	.-4      	; 0x24c <home_line2+0x24>
 250:	00 00       	nop
 252:	08 95       	ret

00000254 <char2lcd>:

//sends a char to the LCD
void char2lcd(char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 258:	77 9b       	sbis	0x0e, 7	; 14
 25a:	fe cf       	rjmp	.-4      	; 0x258 <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
 25c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 25e:	77 9b       	sbis	0x0e, 7	; 14
 260:	fe cf       	rjmp	.-4      	; 0x25e <char2lcd+0xa>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 262:	80 91 62 00 	lds	r24, 0x0062
 266:	88 60       	ori	r24, 0x08	; 8
 268:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 26c:	80 91 62 00 	lds	r24, 0x0062
 270:	87 7f       	andi	r24, 0xF7	; 247
 272:	80 93 62 00 	sts	0x0062, r24
 276:	85 ec       	ldi	r24, 0xC5	; 197
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <char2lcd+0x24>
 27c:	00 00       	nop
 27e:	08 95       	ret

00000280 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	fc 01       	movw	r30, r24
 286:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
 28c:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 28e:	77 9b       	sbis	0x0e, 7	; 14
 290:	fe cf       	rjmp	.-4      	; 0x28e <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
 292:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 294:	77 9b       	sbis	0x0e, 7	; 14
 296:	fe cf       	rjmp	.-4      	; 0x294 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
 298:	8d 91       	ld	r24, X+
 29a:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 29c:	77 9b       	sbis	0x0e, 7	; 14
 29e:	fe cf       	rjmp	.-4      	; 0x29c <string2lcd+0x1c>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 2a0:	90 91 62 00 	lds	r25, 0x0062
 2a4:	98 60       	ori	r25, 0x08	; 8
 2a6:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
 2aa:	90 91 62 00 	lds	r25, 0x0062
 2ae:	97 7f       	andi	r25, 0xF7	; 247
 2b0:	90 93 62 00 	sts	0x0062, r25
 2b4:	85 ec       	ldi	r24, 0xC5	; 197
 2b6:	8a 95       	dec	r24
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <string2lcd+0x36>
 2ba:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
 2bc:	4f 5f       	subi	r20, 0xFF	; 255
 2be:	5f 4f       	sbci	r21, 0xFF	; 255
 2c0:	ef 01       	movw	r28, r30
 2c2:	09 90       	ld	r0, Y+
 2c4:	00 20       	and	r0, r0
 2c6:	e9 f7       	brne	.-6      	; 0x2c2 <string2lcd+0x42>
 2c8:	9e 01       	movw	r18, r28
 2ca:	2e 1b       	sub	r18, r30
 2cc:	3f 0b       	sbc	r19, r31
 2ce:	22 50       	subi	r18, 0x02	; 2
 2d0:	31 09       	sbc	r19, r1
 2d2:	24 17       	cp	r18, r20
 2d4:	35 07       	cpc	r19, r21
 2d6:	d8 f6       	brcc	.-74     	; 0x28e <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <move>:
    OCR1B = Right motor PB6
    maybe OCR1C = Z motor? PB7

    NOTE: Does not activate AfroESC with Simonk firmware given less than 6
*/
void move(float left, float right, float z){
 2de:	4f 92       	push	r4
 2e0:	5f 92       	push	r5
 2e2:	6f 92       	push	r6
 2e4:	7f 92       	push	r7
 2e6:	8f 92       	push	r8
 2e8:	9f 92       	push	r9
 2ea:	af 92       	push	r10
 2ec:	bf 92       	push	r11
 2ee:	cf 92       	push	r12
 2f0:	df 92       	push	r13
 2f2:	ef 92       	push	r14
 2f4:	ff 92       	push	r15
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	64 97       	sbiw	r28, 0x14	; 20
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	69 8b       	std	Y+17, r22	; 0x11
 310:	7a 8b       	std	Y+18, r23	; 0x12
 312:	8b 8b       	std	Y+19, r24	; 0x13
 314:	9c 8b       	std	Y+20, r25	; 0x14
 316:	29 01       	movw	r4, r18
 318:	3a 01       	movw	r6, r20
 31a:	47 01       	movw	r8, r14
 31c:	58 01       	movw	r10, r16
    if (left < MIN_INPUT){
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	a9 01       	movw	r20, r18
 324:	0e 94 0b 05 	call	0xa16	; 0xa16 <__cmpsf2>
 328:	87 fd       	sbrc	r24, 7
 32a:	95 c0       	rjmp	.+298    	; 0x456 <move+0x178>
        left = MIN_INPUT;
    }
    if (left > MAX_INPUT){
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	48 ec       	ldi	r20, 0xC8	; 200
 332:	52 e4       	ldi	r21, 0x42	; 66
 334:	69 89       	ldd	r22, Y+17	; 0x11
 336:	7a 89       	ldd	r23, Y+18	; 0x12
 338:	8b 89       	ldd	r24, Y+19	; 0x13
 33a:	9c 89       	ldd	r25, Y+20	; 0x14
 33c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__gesf2>
 340:	18 16       	cp	r1, r24
 342:	0c f0       	brlt	.+2      	; 0x346 <move+0x68>
 344:	94 c0       	rjmp	.+296    	; 0x46e <move+0x190>
 346:	98 ed       	ldi	r25, 0xD8	; 216
 348:	c9 2e       	mov	r12, r25
 34a:	9e e0       	ldi	r25, 0x0E	; 14
 34c:	d9 2e       	mov	r13, r25
        left = MAX_INPUT;
    }
    if (right < MIN_INPUT){
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	a9 01       	movw	r20, r18
 354:	c3 01       	movw	r24, r6
 356:	b2 01       	movw	r22, r4
 358:	0e 94 0b 05 	call	0xa16	; 0xa16 <__cmpsf2>
 35c:	87 fd       	sbrc	r24, 7
 35e:	84 c0       	rjmp	.+264    	; 0x468 <move+0x18a>
        right = MIN_INPUT;
    }
    if (right > MAX_INPUT){
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	48 ec       	ldi	r20, 0xC8	; 200
 366:	52 e4       	ldi	r21, 0x42	; 66
 368:	c3 01       	movw	r24, r6
 36a:	b2 01       	movw	r22, r4
 36c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__gesf2>
 370:	18 16       	cp	r1, r24
 372:	0c f0       	brlt	.+2      	; 0x376 <move+0x98>
 374:	9b c0       	rjmp	.+310    	; 0x4ac <move+0x1ce>
 376:	08 ed       	ldi	r16, 0xD8	; 216
 378:	1e e0       	ldi	r17, 0x0E	; 14
        right = MAX_INPUT;
    }
    if (z < MIN_INPUT){
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	a9 01       	movw	r20, r18
 380:	c5 01       	movw	r24, r10
 382:	b4 01       	movw	r22, r8
 384:	0e 94 0b 05 	call	0xa16	; 0xa16 <__cmpsf2>
 388:	87 fd       	sbrc	r24, 7
 38a:	6a c0       	rjmp	.+212    	; 0x460 <move+0x182>
        z = MIN_INPUT;
    }
    if (z > MAX_INPUT){
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	48 ec       	ldi	r20, 0xC8	; 200
 392:	52 e4       	ldi	r21, 0x42	; 66
 394:	c5 01       	movw	r24, r10
 396:	b4 01       	movw	r22, r8
 398:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__gesf2>
 39c:	18 16       	cp	r1, r24
 39e:	0c f0       	brlt	.+2      	; 0x3a2 <move+0xc4>
 3a0:	7a c0       	rjmp	.+244    	; 0x496 <move+0x1b8>
 3a2:	81 2c       	mov	r8, r1
 3a4:	91 2c       	mov	r9, r1
 3a6:	80 e8       	ldi	r24, 0x80	; 128
 3a8:	a8 2e       	mov	r10, r24
 3aa:	8f e3       	ldi	r24, 0x3F	; 63
 3ac:	b8 2e       	mov	r11, r24
    }
    unsigned int left_speed, right_speed, z_speed;
    left_speed = (unsigned int)((left - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    right_speed = (unsigned int)((right - MIN_INPUT)/((double)STEP) + MIN_SPEED);
    //This needs to be redone to account for a different controller
    z_speed = (unsigned int)(ICR1 * (z/((double)MAX_INPUT))); 
 3ae:	66 b5       	in	r22, 0x26	; 38
 3b0:	77 b5       	in	r23, 0x27	; 39
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 b1 05 	call	0xb62	; 0xb62 <__floatunsisf>
 3ba:	a5 01       	movw	r20, r10
 3bc:	94 01       	movw	r18, r8
 3be:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__mulsf3>
 3c2:	0e 94 82 05 	call	0xb04	; 0xb04 <__fixunssfsi>
    OCR1A = left_speed;
 3c6:	db bc       	out	0x2b, r13	; 43
 3c8:	ca bc       	out	0x2a, r12	; 42
    OCR1B = right_speed;
 3ca:	19 bd       	out	0x29, r17	; 41
 3cc:	08 bd       	out	0x28, r16	; 40
    OCR1C = z_speed;
 3ce:	70 93 79 00 	sts	0x0079, r23
 3d2:	60 93 78 00 	sts	0x0078, r22
    
	char buffer[16];
    clear_display();
 3d6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <clear_display>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 3da:	4a e0       	ldi	r20, 0x0A	; 10
 3dc:	be 01       	movw	r22, r28
 3de:	6f 5f       	subi	r22, 0xFF	; 255
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255
 3e2:	c6 01       	movw	r24, r12
 3e4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__utoa_ncheck>
	string2lcd(utoa(left_speed,buffer,10));
 3e8:	0e 94 40 01 	call	0x280	; 0x280 <string2lcd>
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(2.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 3ec:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3ee:	77 9b       	sbis	0x0e, 7	; 14
 3f0:	fe cf       	rjmp	.-4      	; 0x3ee <move+0x110>
    SPDR = 0xC0;   // cursor go home on line 2
 3f2:	80 ec       	ldi	r24, 0xC0	; 192
 3f4:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 3f6:	77 9b       	sbis	0x0e, 7	; 14
 3f8:	fe cf       	rjmp	.-4      	; 0x3f6 <move+0x118>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 3fa:	80 91 62 00 	lds	r24, 0x0062
 3fe:	88 60       	ori	r24, 0x08	; 8
 400:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 404:	80 91 62 00 	lds	r24, 0x0062
 408:	87 7f       	andi	r24, 0xF7	; 247
 40a:	80 93 62 00 	sts	0x0062, r24
 40e:	85 ec       	ldi	r24, 0xC5	; 197
 410:	8a 95       	dec	r24
 412:	f1 f7       	brne	.-4      	; 0x410 <move+0x132>
 414:	00 00       	nop
 416:	4a e0       	ldi	r20, 0x0A	; 10
 418:	be 01       	movw	r22, r28
 41a:	6f 5f       	subi	r22, 0xFF	; 255
 41c:	7f 4f       	sbci	r23, 0xFF	; 255
 41e:	c8 01       	movw	r24, r16
 420:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__utoa_ncheck>
    
	char buffer[16];
    clear_display();
	string2lcd(utoa(left_speed,buffer,10));
	home_line2();
	string2lcd(utoa(right_speed,buffer,10));
 424:	0e 94 40 01 	call	0x280	; 0x280 <string2lcd>
    

}
 428:	64 96       	adiw	r28, 0x14	; 20
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	de bf       	out	0x3e, r29	; 62
 430:	0f be       	out	0x3f, r0	; 63
 432:	cd bf       	out	0x3d, r28	; 61
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	ff 90       	pop	r15
 43e:	ef 90       	pop	r14
 440:	df 90       	pop	r13
 442:	cf 90       	pop	r12
 444:	bf 90       	pop	r11
 446:	af 90       	pop	r10
 448:	9f 90       	pop	r9
 44a:	8f 90       	pop	r8
 44c:	7f 90       	pop	r7
 44e:	6f 90       	pop	r6
 450:	5f 90       	pop	r5
 452:	4f 90       	pop	r4
 454:	08 95       	ret
 456:	28 e9       	ldi	r18, 0x98	; 152
 458:	c2 2e       	mov	r12, r18
 45a:	28 e0       	ldi	r18, 0x08	; 8
 45c:	d2 2e       	mov	r13, r18
 45e:	77 cf       	rjmp	.-274    	; 0x34e <move+0x70>
 460:	81 2c       	mov	r8, r1
 462:	91 2c       	mov	r9, r1
 464:	54 01       	movw	r10, r8
 466:	a3 cf       	rjmp	.-186    	; 0x3ae <move+0xd0>
 468:	08 e9       	ldi	r16, 0x98	; 152
 46a:	18 e0       	ldi	r17, 0x08	; 8
 46c:	86 cf       	rjmp	.-244    	; 0x37a <move+0x9c>
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	40 e8       	ldi	r20, 0x80	; 128
 474:	51 e4       	ldi	r21, 0x41	; 65
 476:	69 89       	ldd	r22, Y+17	; 0x11
 478:	7a 89       	ldd	r23, Y+18	; 0x12
 47a:	8b 89       	ldd	r24, Y+19	; 0x13
 47c:	9c 89       	ldd	r25, Y+20	; 0x14
 47e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__mulsf3>
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	30 e8       	ldi	r19, 0x80	; 128
 486:	49 e0       	ldi	r20, 0x09	; 9
 488:	55 e4       	ldi	r21, 0x45	; 69
 48a:	0e 94 9f 04 	call	0x93e	; 0x93e <__addsf3>
 48e:	0e 94 82 05 	call	0xb04	; 0xb04 <__fixunssfsi>
 492:	6b 01       	movw	r12, r22
 494:	5c cf       	rjmp	.-328    	; 0x34e <move+0x70>
 496:	20 e0       	ldi	r18, 0x00	; 0
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	48 ec       	ldi	r20, 0xC8	; 200
 49c:	52 e4       	ldi	r21, 0x42	; 66
 49e:	c5 01       	movw	r24, r10
 4a0:	b4 01       	movw	r22, r8
 4a2:	0e 94 10 05 	call	0xa20	; 0xa20 <__divsf3>
 4a6:	4b 01       	movw	r8, r22
 4a8:	5c 01       	movw	r10, r24
 4aa:	81 cf       	rjmp	.-254    	; 0x3ae <move+0xd0>
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	40 e8       	ldi	r20, 0x80	; 128
 4b2:	51 e4       	ldi	r21, 0x41	; 65
 4b4:	c3 01       	movw	r24, r6
 4b6:	b2 01       	movw	r22, r4
 4b8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__mulsf3>
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	30 e8       	ldi	r19, 0x80	; 128
 4c0:	49 e0       	ldi	r20, 0x09	; 9
 4c2:	55 e4       	ldi	r21, 0x45	; 69
 4c4:	0e 94 9f 04 	call	0x93e	; 0x93e <__addsf3>
 4c8:	0e 94 82 05 	call	0xb04	; 0xb04 <__fixunssfsi>
 4cc:	8b 01       	movw	r16, r22
 4ce:	55 cf       	rjmp	.-342    	; 0x37a <move+0x9c>

000004d0 <spi_init>:
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 4d0:	e1 e6       	ldi	r30, 0x61	; 97
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	88 60       	ori	r24, 0x08	; 8
 4d8:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
 4da:	88 b3       	in	r24, 0x18	; 24
 4dc:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 4de:	87 b3       	in	r24, 0x17	; 23
 4e0:	87 60       	ori	r24, 0x07	; 7
 4e2:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 4e4:	80 e5       	ldi	r24, 0x50	; 80
 4e6:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	8e b9       	out	0x0e, r24	; 14
 4ec:	08 95       	ret

000004ee <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ee:	8f e5       	ldi	r24, 0x5F	; 95
 4f0:	9a ee       	ldi	r25, 0xEA	; 234
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <lcd_init+0x4>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <lcd_init+0xa>
 4f8:	00 00       	nop
 4fa:	23 e0       	ldi	r18, 0x03	; 3
 4fc:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
 4fe:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
 500:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 502:	77 9b       	sbis	0x0e, 7	; 14
 504:	fe cf       	rjmp	.-4      	; 0x502 <lcd_init+0x14>
        SPDR = 0x30;
 506:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 508:	77 9b       	sbis	0x0e, 7	; 14
 50a:	fe cf       	rjmp	.-4      	; 0x508 <lcd_init+0x1a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 50c:	80 91 62 00 	lds	r24, 0x0062
 510:	88 60       	ori	r24, 0x08	; 8
 512:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 516:	80 91 62 00 	lds	r24, 0x0062
 51a:	87 7f       	andi	r24, 0xF7	; 247
 51c:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 520:	85 ec       	ldi	r24, 0xC5	; 197
 522:	8a 95       	dec	r24
 524:	f1 f7       	brne	.-4      	; 0x522 <lcd_init+0x34>
 526:	00 00       	nop
 528:	21 50       	subi	r18, 0x01	; 1
 52a:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
 52c:	49 f7       	brne	.-46     	; 0x500 <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
 52e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 530:	77 9b       	sbis	0x0e, 7	; 14
 532:	fe cf       	rjmp	.-4      	; 0x530 <lcd_init+0x42>
    SPDR = 0x38;
 534:	88 e3       	ldi	r24, 0x38	; 56
 536:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 538:	77 9b       	sbis	0x0e, 7	; 14
 53a:	fe cf       	rjmp	.-4      	; 0x538 <lcd_init+0x4a>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 53c:	80 91 62 00 	lds	r24, 0x0062
 540:	88 60       	ori	r24, 0x08	; 8
 542:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 546:	80 91 62 00 	lds	r24, 0x0062
 54a:	87 7f       	andi	r24, 0xF7	; 247
 54c:	80 93 62 00 	sts	0x0062, r24
 550:	95 ec       	ldi	r25, 0xC5	; 197
 552:	9a 95       	dec	r25
 554:	f1 f7       	brne	.-4      	; 0x552 <lcd_init+0x64>
 556:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 558:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 55a:	77 9b       	sbis	0x0e, 7	; 14
 55c:	fe cf       	rjmp	.-4      	; 0x55a <lcd_init+0x6c>
    SPDR = 0x08;
 55e:	88 e0       	ldi	r24, 0x08	; 8
 560:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 562:	77 9b       	sbis	0x0e, 7	; 14
 564:	fe cf       	rjmp	.-4      	; 0x562 <lcd_init+0x74>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 566:	80 91 62 00 	lds	r24, 0x0062
 56a:	88 60       	ori	r24, 0x08	; 8
 56c:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 570:	80 91 62 00 	lds	r24, 0x0062
 574:	87 7f       	andi	r24, 0xF7	; 247
 576:	80 93 62 00 	sts	0x0062, r24
 57a:	85 ec       	ldi	r24, 0xC5	; 197
 57c:	8a 95       	dec	r24
 57e:	f1 f7       	brne	.-4      	; 0x57c <lcd_init+0x8e>
 580:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 582:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 584:	77 9b       	sbis	0x0e, 7	; 14
 586:	fe cf       	rjmp	.-4      	; 0x584 <lcd_init+0x96>
    SPDR = 0x01;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 58c:	77 9b       	sbis	0x0e, 7	; 14
 58e:	fe cf       	rjmp	.-4      	; 0x58c <lcd_init+0x9e>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 590:	80 91 62 00 	lds	r24, 0x0062
 594:	88 60       	ori	r24, 0x08	; 8
 596:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 59a:	80 91 62 00 	lds	r24, 0x0062
 59e:	87 7f       	andi	r24, 0xF7	; 247
 5a0:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	98 e1       	ldi	r25, 0x18	; 24
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_init+0xba>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <lcd_init+0xc0>
 5ae:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
 5b0:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 5b2:	77 9b       	sbis	0x0e, 7	; 14
 5b4:	fe cf       	rjmp	.-4      	; 0x5b2 <lcd_init+0xc4>
    SPDR = 0x06;
 5b6:	86 e0       	ldi	r24, 0x06	; 6
 5b8:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 5ba:	77 9b       	sbis	0x0e, 7	; 14
 5bc:	fe cf       	rjmp	.-4      	; 0x5ba <lcd_init+0xcc>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 5be:	80 91 62 00 	lds	r24, 0x0062
 5c2:	88 60       	ori	r24, 0x08	; 8
 5c4:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 5c8:	80 91 62 00 	lds	r24, 0x0062
 5cc:	87 7f       	andi	r24, 0xF7	; 247
 5ce:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d2:	95 ec       	ldi	r25, 0xC5	; 197
 5d4:	9a 95       	dec	r25
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <lcd_init+0xe6>
 5d8:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 5da:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 5dc:	77 9b       	sbis	0x0e, 7	; 14
 5de:	fe cf       	rjmp	.-4      	; 0x5dc <lcd_init+0xee>
    SPDR = 0x0E;
 5e0:	8e e0       	ldi	r24, 0x0E	; 14
 5e2:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 5e4:	77 9b       	sbis	0x0e, 7	; 14
 5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <lcd_init+0xf6>

}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 5e8:	80 91 62 00 	lds	r24, 0x0062
 5ec:	88 60       	ori	r24, 0x08	; 8
 5ee:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 5f2:	80 91 62 00 	lds	r24, 0x0062
 5f6:	87 7f       	andi	r24, 0xF7	; 247
 5f8:	80 93 62 00 	sts	0x0062, r24
 5fc:	85 ec       	ldi	r24, 0xC5	; 197
 5fe:	8a 95       	dec	r24
 600:	f1 f7       	brne	.-4      	; 0x5fe <lcd_init+0x110>
 602:	00 00       	nop
 604:	08 95       	ret

00000606 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 606:	88 e4       	ldi	r24, 0x48	; 72
 608:	80 93 b8 00 	sts	0x00B8, r24
 60c:	08 95       	ret

0000060e <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
 60e:	10 92 bc 00 	sts	0x00BC, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 612:	94 ea       	ldi	r25, 0xA4	; 164
 614:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 618:	90 91 bc 00 	lds	r25, 0x00BC
 61c:	97 ff       	sbrs	r25, 7
 61e:	fc cf       	rjmp	.-8      	; 0x618 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 620:	90 91 b9 00 	lds	r25, 0x00B9
 624:	98 7f       	andi	r25, 0xF8	; 248
 626:	98 30       	cpi	r25, 0x08	; 8
 628:	11 f0       	breq	.+4      	; 0x62e <i2c_start+0x20>
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
 62e:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 632:	84 e8       	ldi	r24, 0x84	; 132
 634:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 638:	80 91 bc 00 	lds	r24, 0x00BC
 63c:	87 ff       	sbrs	r24, 7
 63e:	fc cf       	rjmp	.-8      	; 0x638 <i2c_start+0x2a>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
 640:	80 91 b9 00 	lds	r24, 0x00B9
 644:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 646:	88 31       	cpi	r24, 0x18	; 24
 648:	11 f0       	breq	.+4      	; 0x64e <i2c_start+0x40>
 64a:	80 34       	cpi	r24, 0x40	; 64
 64c:	71 f7       	brne	.-36     	; 0x62a <i2c_start+0x1c>
	
	return 0;
 64e:	80 e0       	ldi	r24, 0x00	; 0
}
 650:	08 95       	ret

00000652 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
 652:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 656:	84 e8       	ldi	r24, 0x84	; 132
 658:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 65c:	80 91 bc 00 	lds	r24, 0x00BC
 660:	87 ff       	sbrs	r24, 7
 662:	fc cf       	rjmp	.-8      	; 0x65c <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 664:	90 91 b9 00 	lds	r25, 0x00B9
 668:	98 7f       	andi	r25, 0xF8	; 248
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	98 32       	cpi	r25, 0x28	; 40
 66e:	09 f4       	brne	.+2      	; 0x672 <i2c_write+0x20>
 670:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 672:	08 95       	ret

00000674 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 674:	84 ec       	ldi	r24, 0xC4	; 196
 676:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 67a:	80 91 bc 00 	lds	r24, 0x00BC
 67e:	87 ff       	sbrs	r24, 7
 680:	fc cf       	rjmp	.-8      	; 0x67a <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
 682:	80 91 bb 00 	lds	r24, 0x00BB
}
 686:	08 95       	ret

00000688 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 688:	84 e8       	ldi	r24, 0x84	; 132
 68a:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 68e:	80 91 bc 00 	lds	r24, 0x00BC
 692:	87 ff       	sbrs	r24, 7
 694:	fc cf       	rjmp	.-8      	; 0x68e <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
 696:	80 91 bb 00 	lds	r24, 0x00BB
}
 69a:	08 95       	ret

0000069c <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
 69c:	df 92       	push	r13
 69e:	ef 92       	push	r14
 6a0:	ff 92       	push	r15
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	d6 2e       	mov	r13, r22
 6ac:	07 2f       	mov	r16, r23
 6ae:	7a 01       	movw	r14, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
 6b0:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_start>
 6b4:	18 2f       	mov	r17, r24
 6b6:	81 11       	cpse	r24, r1
 6b8:	10 c0       	rjmp	.+32     	; 0x6da <i2c_transmit+0x3e>
 6ba:	cd 2d       	mov	r28, r13
 6bc:	d0 2f       	mov	r29, r16
 6be:	ec 0e       	add	r14, r28
 6c0:	fd 1e       	adc	r15, r29
	
	for (uint16_t i = 0; i < length; i++)
 6c2:	ce 15       	cp	r28, r14
 6c4:	df 05       	cpc	r29, r15
 6c6:	21 f4       	brne	.+8      	; 0x6d0 <i2c_transmit+0x34>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 6c8:	84 e9       	ldi	r24, 0x94	; 148
 6ca:	80 93 bc 00 	sts	0x00BC, r24
		if (i2c_write(data[i])) return 1;
	}
	
	i2c_stop();
	
	return 0;
 6ce:	06 c0       	rjmp	.+12     	; 0x6dc <i2c_transmit+0x40>
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 6d0:	89 91       	ld	r24, Y+
 6d2:	0e 94 29 03 	call	0x652	; 0x652 <i2c_write>
 6d6:	88 23       	and	r24, r24
 6d8:	a1 f3       	breq	.-24     	; 0x6c2 <i2c_transmit+0x26>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
 6da:	11 e0       	ldi	r17, 0x01	; 1
	}
	
	i2c_stop();
	
	return 0;
}
 6dc:	81 2f       	mov	r24, r17
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	df 90       	pop	r13
 6ec:	08 95       	ret

000006ee <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
 6ee:	cf 92       	push	r12
 6f0:	df 92       	push	r13
 6f2:	ff 92       	push	r15
 6f4:	0f 93       	push	r16
 6f6:	1f 93       	push	r17
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	eb 01       	movw	r28, r22
 6fe:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_READ)) return 1;
 700:	81 60       	ori	r24, 0x01	; 1
 702:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_start>
 706:	f8 2e       	mov	r15, r24
 708:	81 11       	cpse	r24, r1
 70a:	20 c0       	rjmp	.+64     	; 0x74c <i2c_receive+0x5e>
 70c:	6e 01       	movw	r12, r28
	
	for (uint16_t i = 0; i < (length-1); i++)
 70e:	01 50       	subi	r16, 0x01	; 1
 710:	11 09       	sbc	r17, r1
 712:	c6 01       	movw	r24, r12
 714:	8c 1b       	sub	r24, r28
 716:	9d 0b       	sbc	r25, r29
 718:	80 17       	cp	r24, r16
 71a:	91 07       	cpc	r25, r17
 71c:	88 f0       	brcs	.+34     	; 0x740 <i2c_receive+0x52>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 71e:	c0 0f       	add	r28, r16
 720:	d1 1f       	adc	r29, r17
 722:	0e 94 44 03 	call	0x688	; 0x688 <i2c_read_nack>
 726:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 728:	84 e9       	ldi	r24, 0x94	; 148
 72a:	80 93 bc 00 	sts	0x00BC, r24
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
 72e:	8f 2d       	mov	r24, r15
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	1f 91       	pop	r17
 736:	0f 91       	pop	r16
 738:	ff 90       	pop	r15
 73a:	df 90       	pop	r13
 73c:	cf 90       	pop	r12
 73e:	08 95       	ret
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 740:	0e 94 3a 03 	call	0x674	; 0x674 <i2c_read_ack>
 744:	f6 01       	movw	r30, r12
 746:	81 93       	st	Z+, r24
 748:	6f 01       	movw	r12, r30
 74a:	e3 cf       	rjmp	.-58     	; 0x712 <i2c_receive+0x24>
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
 74c:	ff 24       	eor	r15, r15
 74e:	f3 94       	inc	r15
 750:	ee cf       	rjmp	.-36     	; 0x72e <i2c_receive+0x40>

00000752 <i2c_writeReg>:
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 752:	df 92       	push	r13
 754:	ef 92       	push	r14
 756:	ff 92       	push	r15
 758:	0f 93       	push	r16
 75a:	1f 93       	push	r17
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	c6 2f       	mov	r28, r22
 762:	d4 2e       	mov	r13, r20
 764:	05 2f       	mov	r16, r21
 766:	79 01       	movw	r14, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 768:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_start>
 76c:	18 2f       	mov	r17, r24
 76e:	88 23       	and	r24, r24
 770:	51 f0       	breq	.+20     	; 0x786 <i2c_writeReg+0x34>
 772:	11 e0       	ldi	r17, 0x01	; 1
	}

	i2c_stop();

	return 0;
}
 774:	81 2f       	mov	r24, r17
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	1f 91       	pop	r17
 77c:	0f 91       	pop	r16
 77e:	ff 90       	pop	r15
 780:	ef 90       	pop	r14
 782:	df 90       	pop	r13
 784:	08 95       	ret

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);
 786:	8c 2f       	mov	r24, r28
 788:	0e 94 29 03 	call	0x652	; 0x652 <i2c_write>
 78c:	cd 2d       	mov	r28, r13
 78e:	d0 2f       	mov	r29, r16
 790:	ec 0e       	add	r14, r28
 792:	fd 1e       	adc	r15, r29

	for (uint16_t i = 0; i < length; i++)
 794:	ce 15       	cp	r28, r14
 796:	df 05       	cpc	r29, r15
 798:	21 f4       	brne	.+8      	; 0x7a2 <i2c_writeReg+0x50>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 79a:	84 e9       	ldi	r24, 0x94	; 148
 79c:	80 93 bc 00 	sts	0x00BC, r24
		if (i2c_write(data[i])) return 1;
	}

	i2c_stop();

	return 0;
 7a0:	e9 cf       	rjmp	.-46     	; 0x774 <i2c_writeReg+0x22>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 7a2:	89 91       	ld	r24, Y+
 7a4:	0e 94 29 03 	call	0x652	; 0x652 <i2c_write>
 7a8:	88 23       	and	r24, r24
 7aa:	a1 f3       	breq	.-24     	; 0x794 <i2c_writeReg+0x42>
 7ac:	e2 cf       	rjmp	.-60     	; 0x772 <i2c_writeReg+0x20>

000007ae <i2c_readReg>:

	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 7ae:	cf 92       	push	r12
 7b0:	df 92       	push	r13
 7b2:	ff 92       	push	r15
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	cf 93       	push	r28
 7ba:	df 93       	push	r29
 7bc:	f8 2e       	mov	r15, r24
 7be:	d6 2e       	mov	r13, r22
 7c0:	ea 01       	movw	r28, r20
 7c2:	89 01       	movw	r16, r18
	if (i2c_start(devaddr)) return 1;
 7c4:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_start>
 7c8:	88 23       	and	r24, r24
 7ca:	59 f0       	breq	.+22     	; 0x7e2 <i2c_readReg+0x34>
 7cc:	ff 24       	eor	r15, r15
 7ce:	f3 94       	inc	r15
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 7d0:	8f 2d       	mov	r24, r15
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	1f 91       	pop	r17
 7d8:	0f 91       	pop	r16
 7da:	ff 90       	pop	r15
 7dc:	df 90       	pop	r13
 7de:	cf 90       	pop	r12
 7e0:	08 95       	ret

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;

	i2c_write(regaddr);
 7e2:	8d 2d       	mov	r24, r13
 7e4:	0e 94 29 03 	call	0x652	; 0x652 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 7e8:	8f 2d       	mov	r24, r15
 7ea:	81 60       	ori	r24, 0x01	; 1
 7ec:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_start>
 7f0:	f8 2e       	mov	r15, r24
 7f2:	81 11       	cpse	r24, r1
 7f4:	eb cf       	rjmp	.-42     	; 0x7cc <i2c_readReg+0x1e>
 7f6:	6e 01       	movw	r12, r28

	for (uint16_t i = 0; i < (length-1); i++)
 7f8:	01 50       	subi	r16, 0x01	; 1
 7fa:	11 09       	sbc	r17, r1
 7fc:	c6 01       	movw	r24, r12
 7fe:	8c 1b       	sub	r24, r28
 800:	9d 0b       	sbc	r25, r29
 802:	80 17       	cp	r24, r16
 804:	91 07       	cpc	r25, r17
 806:	48 f0       	brcs	.+18     	; 0x81a <i2c_readReg+0x6c>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 808:	c0 0f       	add	r28, r16
 80a:	d1 1f       	adc	r29, r17
 80c:	0e 94 44 03 	call	0x688	; 0x688 <i2c_read_nack>
 810:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 812:	84 e9       	ldi	r24, 0x94	; 148
 814:	80 93 bc 00 	sts	0x00BC, r24
	}
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
 818:	db cf       	rjmp	.-74     	; 0x7d0 <i2c_readReg+0x22>

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 81a:	0e 94 3a 03 	call	0x674	; 0x674 <i2c_read_ack>
 81e:	f6 01       	movw	r30, r12
 820:	81 93       	st	Z+, r24
 822:	6f 01       	movw	r12, r30
 824:	eb cf       	rjmp	.-42     	; 0x7fc <i2c_readReg+0x4e>

00000826 <i2c_stop>:
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 826:	84 e9       	ldi	r24, 0x94	; 148
 828:	80 93 bc 00 	sts	0x00BC, r24
 82c:	08 95       	ret

0000082e <main>:
void init_esc();

uint8_t temp, read_byte;


int main(void){
 82e:	cf 93       	push	r28
 830:	df 93       	push	r29
 832:	00 d0       	rcall	.+0      	; 0x834 <main+0x6>
 834:	00 d0       	rcall	.+0      	; 0x836 <main+0x8>
 836:	cd b7       	in	r28, 0x3d	; 61
 838:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0xFF;
 83a:	8f ef       	ldi	r24, 0xFF	; 255
 83c:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
 83e:	18 ba       	out	0x18, r1	; 24
    DDRD = 0x00;
 840:	11 ba       	out	0x11, r1	; 17
    [3] == reserved for string terminator
    */
    char buffer[4]; 
    int i;
    for (i = 0; i < 4; ++i){
        buffer[i] = ' ';
 842:	80 e2       	ldi	r24, 0x20	; 32
 844:	89 83       	std	Y+1, r24	; 0x01
 846:	8a 83       	std	Y+2, r24	; 0x02
 848:	8b 83       	std	Y+3, r24	; 0x03
 84a:	8c 83       	std	Y+4, r24	; 0x04
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 84c:	80 91 61 00 	lds	r24, 0x0061
 850:	88 60       	ori	r24, 0x08	; 8
 852:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initalization for SPI
 856:	88 b3       	in	r24, 0x18	; 24
 858:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 85a:	87 b3       	in	r24, 0x17	; 23
 85c:	87 60       	ori	r24, 0x07	; 7
 85e:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 860:	80 e5       	ldi	r24, 0x50	; 80
 862:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	8e b9       	out	0x0e, r24	; 14
    for (i = 0; i < 4; ++i){
        buffer[i] = ' ';
    }

    spi_init();
    lcd_init();
 868:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_init>

    //Wait for S1 to be pressed before doing anything, remove this eventually
    string2lcd("Press S1");
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	91 e0       	ldi	r25, 0x01	; 1
 870:	0e 94 40 01 	call	0x280	; 0x280 <string2lcd>
	while (((PIND) & (1 << 0)));
 874:	80 99       	sbic	0x10, 0	; 16
 876:	fe cf       	rjmp	.-4      	; 0x874 <main+0x46>
	clear_display();
 878:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <clear_display>

	//init_esc();
    set_16bitPWM1();
 87c:	0e 94 79 00 	call	0xf2	; 0xf2 <set_16bitPWM1>
}


void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
 880:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = (unsigned char)ubrr;
 884:	87 e6       	ldi	r24, 0x67	; 103
 886:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 88a:	88 e1       	ldi	r24, 0x18	; 24
 88c:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
 890:	8c e0       	ldi	r24, 0x0C	; 12
 892:	80 93 9d 00 	sts	0x009D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 896:	2f ef       	ldi	r18, 0xFF	; 255
 898:	81 ee       	ldi	r24, 0xE1	; 225
 89a:	94 e0       	ldi	r25, 0x04	; 4
 89c:	21 50       	subi	r18, 0x01	; 1
 89e:	80 40       	sbci	r24, 0x00	; 0
 8a0:	90 40       	sbci	r25, 0x00	; 0
 8a2:	e1 f7       	brne	.-8      	; 0x89c <main+0x6e>
 8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <main+0x78>
 8a6:	00 00       	nop
 8a8:	2f ef       	ldi	r18, 0xFF	; 255
 8aa:	81 ee       	ldi	r24, 0xE1	; 225
 8ac:	94 e0       	ldi	r25, 0x04	; 4
 8ae:	21 50       	subi	r18, 0x01	; 1
 8b0:	80 40       	sbci	r24, 0x00	; 0
 8b2:	90 40       	sbci	r25, 0x00	; 0
 8b4:	e1 f7       	brne	.-8      	; 0x8ae <main+0x80>
 8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <main+0x8a>
 8b8:	00 00       	nop
 8ba:	ce 01       	movw	r24, r28
 8bc:	8b 59       	subi	r24, 0x9B	; 155
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	6c 01       	movw	r12, r24
 8c2:	fe 01       	movw	r30, r28
 8c4:	31 96       	adiw	r30, 0x01	; 1
    }
}

char USART_Receive(void){
    /* Wait for data to be received */ 
    while ( !(UCSR1A & (1<<RXC1)) );
 8c6:	80 91 9b 00 	lds	r24, 0x009B
 8ca:	87 ff       	sbrs	r24, 7
 8cc:	fc cf       	rjmp	.-8      	; 0x8c6 <main+0x98>
    /* Get and return received data from buffer */ 
    return UDR1;
 8ce:	80 91 9c 00 	lds	r24, 0x009C

void USART_Receive_String(char *str){
    int i = 0;
    char c;

    while ((c = USART_Receive()) != END_STRING){ //END_STRING == ~ or 0x7E
 8d2:	8e 37       	cpi	r24, 0x7E	; 126
 8d4:	39 f0       	breq	.+14     	; 0x8e4 <main+0xb6>
        str[i] = c;
 8d6:	81 93       	st	Z+, r24
        //char2lcd(c);
        //string2lcd(str);
        ++i;
        if (i >= MAX_STRING_SIZE){
 8d8:	ce 16       	cp	r12, r30
 8da:	df 06       	cpc	r13, r31
 8dc:	a1 f7       	brne	.-24     	; 0x8c6 <main+0x98>
            str[MAX_STRING_SIZE - 1] = '\0';
 8de:	a5 96       	adiw	r28, 0x25	; 37
 8e0:	1f ae       	std	Y+63, r1	; 0x3f
 8e2:	a5 97       	sbiw	r28, 0x25	; 37
    _delay_ms(100);

    while(1){
        
        USART_Receive_String(buffer);
        move((unsigned int)buffer[0],(unsigned int)buffer[1],(unsigned int)buffer[2]);
 8e4:	6b 81       	ldd	r22, Y+3	; 0x03
 8e6:	06 2e       	mov	r0, r22
 8e8:	00 0c       	add	r0, r0
 8ea:	77 0b       	sbc	r23, r23
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 b1 05 	call	0xb62	; 0xb62 <__floatunsisf>
 8f4:	2b 01       	movw	r4, r22
 8f6:	3c 01       	movw	r6, r24
 8f8:	6a 81       	ldd	r22, Y+2	; 0x02
 8fa:	06 2e       	mov	r0, r22
 8fc:	00 0c       	add	r0, r0
 8fe:	77 0b       	sbc	r23, r23
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 b1 05 	call	0xb62	; 0xb62 <__floatunsisf>
 908:	4b 01       	movw	r8, r22
 90a:	5c 01       	movw	r10, r24
 90c:	69 81       	ldd	r22, Y+1	; 0x01
 90e:	06 2e       	mov	r0, r22
 910:	00 0c       	add	r0, r0
 912:	77 0b       	sbc	r23, r23
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 b1 05 	call	0xb62	; 0xb62 <__floatunsisf>
 91c:	83 01       	movw	r16, r6
 91e:	72 01       	movw	r14, r4
 920:	a5 01       	movw	r20, r10
 922:	94 01       	movw	r18, r8
 924:	0e 94 6f 01 	call	0x2de	; 0x2de <move>
 928:	9f ef       	ldi	r25, 0xFF	; 255
 92a:	29 ef       	ldi	r18, 0xF9	; 249
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	91 50       	subi	r25, 0x01	; 1
 930:	20 40       	sbci	r18, 0x00	; 0
 932:	80 40       	sbci	r24, 0x00	; 0
 934:	e1 f7       	brne	.-8      	; 0x92e <main+0x100>
 936:	00 c0       	rjmp	.+0      	; 0x938 <main+0x10a>
 938:	00 00       	nop
 93a:	c3 cf       	rjmp	.-122    	; 0x8c2 <main+0x94>

0000093c <__subsf3>:
 93c:	50 58       	subi	r21, 0x80	; 128

0000093e <__addsf3>:
 93e:	bb 27       	eor	r27, r27
 940:	aa 27       	eor	r26, r26
 942:	0e 94 b6 04 	call	0x96c	; 0x96c <__addsf3x>
 946:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_round>
 94a:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_pscA>
 94e:	38 f0       	brcs	.+14     	; 0x95e <__addsf3+0x20>
 950:	0e 94 22 06 	call	0xc44	; 0xc44 <__fp_pscB>
 954:	20 f0       	brcs	.+8      	; 0x95e <__addsf3+0x20>
 956:	39 f4       	brne	.+14     	; 0x966 <__addsf3+0x28>
 958:	9f 3f       	cpi	r25, 0xFF	; 255
 95a:	19 f4       	brne	.+6      	; 0x962 <__addsf3+0x24>
 95c:	26 f4       	brtc	.+8      	; 0x966 <__addsf3+0x28>
 95e:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_nan>
 962:	0e f4       	brtc	.+2      	; 0x966 <__addsf3+0x28>
 964:	e0 95       	com	r30
 966:	e7 fb       	bst	r30, 7
 968:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_inf>

0000096c <__addsf3x>:
 96c:	e9 2f       	mov	r30, r25
 96e:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fp_split3>
 972:	58 f3       	brcs	.-42     	; 0x94a <__addsf3+0xc>
 974:	ba 17       	cp	r27, r26
 976:	62 07       	cpc	r22, r18
 978:	73 07       	cpc	r23, r19
 97a:	84 07       	cpc	r24, r20
 97c:	95 07       	cpc	r25, r21
 97e:	20 f0       	brcs	.+8      	; 0x988 <__addsf3x+0x1c>
 980:	79 f4       	brne	.+30     	; 0x9a0 <__addsf3x+0x34>
 982:	a6 f5       	brtc	.+104    	; 0x9ec <__addsf3x+0x80>
 984:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_zero>
 988:	0e f4       	brtc	.+2      	; 0x98c <__addsf3x+0x20>
 98a:	e0 95       	com	r30
 98c:	0b 2e       	mov	r0, r27
 98e:	ba 2f       	mov	r27, r26
 990:	a0 2d       	mov	r26, r0
 992:	0b 01       	movw	r0, r22
 994:	b9 01       	movw	r22, r18
 996:	90 01       	movw	r18, r0
 998:	0c 01       	movw	r0, r24
 99a:	ca 01       	movw	r24, r20
 99c:	a0 01       	movw	r20, r0
 99e:	11 24       	eor	r1, r1
 9a0:	ff 27       	eor	r31, r31
 9a2:	59 1b       	sub	r21, r25
 9a4:	99 f0       	breq	.+38     	; 0x9cc <__addsf3x+0x60>
 9a6:	59 3f       	cpi	r21, 0xF9	; 249
 9a8:	50 f4       	brcc	.+20     	; 0x9be <__addsf3x+0x52>
 9aa:	50 3e       	cpi	r21, 0xE0	; 224
 9ac:	68 f1       	brcs	.+90     	; 0xa08 <__addsf3x+0x9c>
 9ae:	1a 16       	cp	r1, r26
 9b0:	f0 40       	sbci	r31, 0x00	; 0
 9b2:	a2 2f       	mov	r26, r18
 9b4:	23 2f       	mov	r18, r19
 9b6:	34 2f       	mov	r19, r20
 9b8:	44 27       	eor	r20, r20
 9ba:	58 5f       	subi	r21, 0xF8	; 248
 9bc:	f3 cf       	rjmp	.-26     	; 0x9a4 <__addsf3x+0x38>
 9be:	46 95       	lsr	r20
 9c0:	37 95       	ror	r19
 9c2:	27 95       	ror	r18
 9c4:	a7 95       	ror	r26
 9c6:	f0 40       	sbci	r31, 0x00	; 0
 9c8:	53 95       	inc	r21
 9ca:	c9 f7       	brne	.-14     	; 0x9be <__addsf3x+0x52>
 9cc:	7e f4       	brtc	.+30     	; 0x9ec <__addsf3x+0x80>
 9ce:	1f 16       	cp	r1, r31
 9d0:	ba 0b       	sbc	r27, r26
 9d2:	62 0b       	sbc	r22, r18
 9d4:	73 0b       	sbc	r23, r19
 9d6:	84 0b       	sbc	r24, r20
 9d8:	ba f0       	brmi	.+46     	; 0xa08 <__addsf3x+0x9c>
 9da:	91 50       	subi	r25, 0x01	; 1
 9dc:	a1 f0       	breq	.+40     	; 0xa06 <__addsf3x+0x9a>
 9de:	ff 0f       	add	r31, r31
 9e0:	bb 1f       	adc	r27, r27
 9e2:	66 1f       	adc	r22, r22
 9e4:	77 1f       	adc	r23, r23
 9e6:	88 1f       	adc	r24, r24
 9e8:	c2 f7       	brpl	.-16     	; 0x9da <__addsf3x+0x6e>
 9ea:	0e c0       	rjmp	.+28     	; 0xa08 <__addsf3x+0x9c>
 9ec:	ba 0f       	add	r27, r26
 9ee:	62 1f       	adc	r22, r18
 9f0:	73 1f       	adc	r23, r19
 9f2:	84 1f       	adc	r24, r20
 9f4:	48 f4       	brcc	.+18     	; 0xa08 <__addsf3x+0x9c>
 9f6:	87 95       	ror	r24
 9f8:	77 95       	ror	r23
 9fa:	67 95       	ror	r22
 9fc:	b7 95       	ror	r27
 9fe:	f7 95       	ror	r31
 a00:	9e 3f       	cpi	r25, 0xFE	; 254
 a02:	08 f0       	brcs	.+2      	; 0xa06 <__addsf3x+0x9a>
 a04:	b0 cf       	rjmp	.-160    	; 0x966 <__addsf3+0x28>
 a06:	93 95       	inc	r25
 a08:	88 0f       	add	r24, r24
 a0a:	08 f0       	brcs	.+2      	; 0xa0e <__addsf3x+0xa2>
 a0c:	99 27       	eor	r25, r25
 a0e:	ee 0f       	add	r30, r30
 a10:	97 95       	ror	r25
 a12:	87 95       	ror	r24
 a14:	08 95       	ret

00000a16 <__cmpsf2>:
 a16:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_cmp>
 a1a:	08 f4       	brcc	.+2      	; 0xa1e <__cmpsf2+0x8>
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	08 95       	ret

00000a20 <__divsf3>:
 a20:	0e 94 24 05 	call	0xa48	; 0xa48 <__divsf3x>
 a24:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_round>
 a28:	0e 94 22 06 	call	0xc44	; 0xc44 <__fp_pscB>
 a2c:	58 f0       	brcs	.+22     	; 0xa44 <__divsf3+0x24>
 a2e:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_pscA>
 a32:	40 f0       	brcs	.+16     	; 0xa44 <__divsf3+0x24>
 a34:	29 f4       	brne	.+10     	; 0xa40 <__divsf3+0x20>
 a36:	5f 3f       	cpi	r21, 0xFF	; 255
 a38:	29 f0       	breq	.+10     	; 0xa44 <__divsf3+0x24>
 a3a:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_inf>
 a3e:	51 11       	cpse	r21, r1
 a40:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_szero>
 a44:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_nan>

00000a48 <__divsf3x>:
 a48:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fp_split3>
 a4c:	68 f3       	brcs	.-38     	; 0xa28 <__divsf3+0x8>

00000a4e <__divsf3_pse>:
 a4e:	99 23       	and	r25, r25
 a50:	b1 f3       	breq	.-20     	; 0xa3e <__divsf3+0x1e>
 a52:	55 23       	and	r21, r21
 a54:	91 f3       	breq	.-28     	; 0xa3a <__divsf3+0x1a>
 a56:	95 1b       	sub	r25, r21
 a58:	55 0b       	sbc	r21, r21
 a5a:	bb 27       	eor	r27, r27
 a5c:	aa 27       	eor	r26, r26
 a5e:	62 17       	cp	r22, r18
 a60:	73 07       	cpc	r23, r19
 a62:	84 07       	cpc	r24, r20
 a64:	38 f0       	brcs	.+14     	; 0xa74 <__divsf3_pse+0x26>
 a66:	9f 5f       	subi	r25, 0xFF	; 255
 a68:	5f 4f       	sbci	r21, 0xFF	; 255
 a6a:	22 0f       	add	r18, r18
 a6c:	33 1f       	adc	r19, r19
 a6e:	44 1f       	adc	r20, r20
 a70:	aa 1f       	adc	r26, r26
 a72:	a9 f3       	breq	.-22     	; 0xa5e <__divsf3_pse+0x10>
 a74:	35 d0       	rcall	.+106    	; 0xae0 <__divsf3_pse+0x92>
 a76:	0e 2e       	mov	r0, r30
 a78:	3a f0       	brmi	.+14     	; 0xa88 <__divsf3_pse+0x3a>
 a7a:	e0 e8       	ldi	r30, 0x80	; 128
 a7c:	32 d0       	rcall	.+100    	; 0xae2 <__divsf3_pse+0x94>
 a7e:	91 50       	subi	r25, 0x01	; 1
 a80:	50 40       	sbci	r21, 0x00	; 0
 a82:	e6 95       	lsr	r30
 a84:	00 1c       	adc	r0, r0
 a86:	ca f7       	brpl	.-14     	; 0xa7a <__divsf3_pse+0x2c>
 a88:	2b d0       	rcall	.+86     	; 0xae0 <__divsf3_pse+0x92>
 a8a:	fe 2f       	mov	r31, r30
 a8c:	29 d0       	rcall	.+82     	; 0xae0 <__divsf3_pse+0x92>
 a8e:	66 0f       	add	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	bb 1f       	adc	r27, r27
 a96:	26 17       	cp	r18, r22
 a98:	37 07       	cpc	r19, r23
 a9a:	48 07       	cpc	r20, r24
 a9c:	ab 07       	cpc	r26, r27
 a9e:	b0 e8       	ldi	r27, 0x80	; 128
 aa0:	09 f0       	breq	.+2      	; 0xaa4 <__divsf3_pse+0x56>
 aa2:	bb 0b       	sbc	r27, r27
 aa4:	80 2d       	mov	r24, r0
 aa6:	bf 01       	movw	r22, r30
 aa8:	ff 27       	eor	r31, r31
 aaa:	93 58       	subi	r25, 0x83	; 131
 aac:	5f 4f       	sbci	r21, 0xFF	; 255
 aae:	3a f0       	brmi	.+14     	; 0xabe <__divsf3_pse+0x70>
 ab0:	9e 3f       	cpi	r25, 0xFE	; 254
 ab2:	51 05       	cpc	r21, r1
 ab4:	78 f0       	brcs	.+30     	; 0xad4 <__divsf3_pse+0x86>
 ab6:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_inf>
 aba:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_szero>
 abe:	5f 3f       	cpi	r21, 0xFF	; 255
 ac0:	e4 f3       	brlt	.-8      	; 0xaba <__divsf3_pse+0x6c>
 ac2:	98 3e       	cpi	r25, 0xE8	; 232
 ac4:	d4 f3       	brlt	.-12     	; 0xaba <__divsf3_pse+0x6c>
 ac6:	86 95       	lsr	r24
 ac8:	77 95       	ror	r23
 aca:	67 95       	ror	r22
 acc:	b7 95       	ror	r27
 ace:	f7 95       	ror	r31
 ad0:	9f 5f       	subi	r25, 0xFF	; 255
 ad2:	c9 f7       	brne	.-14     	; 0xac6 <__divsf3_pse+0x78>
 ad4:	88 0f       	add	r24, r24
 ad6:	91 1d       	adc	r25, r1
 ad8:	96 95       	lsr	r25
 ada:	87 95       	ror	r24
 adc:	97 f9       	bld	r25, 7
 ade:	08 95       	ret
 ae0:	e1 e0       	ldi	r30, 0x01	; 1
 ae2:	66 0f       	add	r22, r22
 ae4:	77 1f       	adc	r23, r23
 ae6:	88 1f       	adc	r24, r24
 ae8:	bb 1f       	adc	r27, r27
 aea:	62 17       	cp	r22, r18
 aec:	73 07       	cpc	r23, r19
 aee:	84 07       	cpc	r24, r20
 af0:	ba 07       	cpc	r27, r26
 af2:	20 f0       	brcs	.+8      	; 0xafc <__divsf3_pse+0xae>
 af4:	62 1b       	sub	r22, r18
 af6:	73 0b       	sbc	r23, r19
 af8:	84 0b       	sbc	r24, r20
 afa:	ba 0b       	sbc	r27, r26
 afc:	ee 1f       	adc	r30, r30
 afe:	88 f7       	brcc	.-30     	; 0xae2 <__divsf3_pse+0x94>
 b00:	e0 95       	com	r30
 b02:	08 95       	ret

00000b04 <__fixunssfsi>:
 b04:	0e 94 42 06 	call	0xc84	; 0xc84 <__fp_splitA>
 b08:	88 f0       	brcs	.+34     	; 0xb2c <__fixunssfsi+0x28>
 b0a:	9f 57       	subi	r25, 0x7F	; 127
 b0c:	98 f0       	brcs	.+38     	; 0xb34 <__fixunssfsi+0x30>
 b0e:	b9 2f       	mov	r27, r25
 b10:	99 27       	eor	r25, r25
 b12:	b7 51       	subi	r27, 0x17	; 23
 b14:	b0 f0       	brcs	.+44     	; 0xb42 <__fixunssfsi+0x3e>
 b16:	e1 f0       	breq	.+56     	; 0xb50 <__fixunssfsi+0x4c>
 b18:	66 0f       	add	r22, r22
 b1a:	77 1f       	adc	r23, r23
 b1c:	88 1f       	adc	r24, r24
 b1e:	99 1f       	adc	r25, r25
 b20:	1a f0       	brmi	.+6      	; 0xb28 <__fixunssfsi+0x24>
 b22:	ba 95       	dec	r27
 b24:	c9 f7       	brne	.-14     	; 0xb18 <__fixunssfsi+0x14>
 b26:	14 c0       	rjmp	.+40     	; 0xb50 <__fixunssfsi+0x4c>
 b28:	b1 30       	cpi	r27, 0x01	; 1
 b2a:	91 f0       	breq	.+36     	; 0xb50 <__fixunssfsi+0x4c>
 b2c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__fp_zero>
 b30:	b1 e0       	ldi	r27, 0x01	; 1
 b32:	08 95       	ret
 b34:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_zero>
 b38:	67 2f       	mov	r22, r23
 b3a:	78 2f       	mov	r23, r24
 b3c:	88 27       	eor	r24, r24
 b3e:	b8 5f       	subi	r27, 0xF8	; 248
 b40:	39 f0       	breq	.+14     	; 0xb50 <__fixunssfsi+0x4c>
 b42:	b9 3f       	cpi	r27, 0xF9	; 249
 b44:	cc f3       	brlt	.-14     	; 0xb38 <__fixunssfsi+0x34>
 b46:	86 95       	lsr	r24
 b48:	77 95       	ror	r23
 b4a:	67 95       	ror	r22
 b4c:	b3 95       	inc	r27
 b4e:	d9 f7       	brne	.-10     	; 0xb46 <__fixunssfsi+0x42>
 b50:	3e f4       	brtc	.+14     	; 0xb60 <__fixunssfsi+0x5c>
 b52:	90 95       	com	r25
 b54:	80 95       	com	r24
 b56:	70 95       	com	r23
 b58:	61 95       	neg	r22
 b5a:	7f 4f       	sbci	r23, 0xFF	; 255
 b5c:	8f 4f       	sbci	r24, 0xFF	; 255
 b5e:	9f 4f       	sbci	r25, 0xFF	; 255
 b60:	08 95       	ret

00000b62 <__floatunsisf>:
 b62:	e8 94       	clt
 b64:	09 c0       	rjmp	.+18     	; 0xb78 <__floatsisf+0x12>

00000b66 <__floatsisf>:
 b66:	97 fb       	bst	r25, 7
 b68:	3e f4       	brtc	.+14     	; 0xb78 <__floatsisf+0x12>
 b6a:	90 95       	com	r25
 b6c:	80 95       	com	r24
 b6e:	70 95       	com	r23
 b70:	61 95       	neg	r22
 b72:	7f 4f       	sbci	r23, 0xFF	; 255
 b74:	8f 4f       	sbci	r24, 0xFF	; 255
 b76:	9f 4f       	sbci	r25, 0xFF	; 255
 b78:	99 23       	and	r25, r25
 b7a:	a9 f0       	breq	.+42     	; 0xba6 <__floatsisf+0x40>
 b7c:	f9 2f       	mov	r31, r25
 b7e:	96 e9       	ldi	r25, 0x96	; 150
 b80:	bb 27       	eor	r27, r27
 b82:	93 95       	inc	r25
 b84:	f6 95       	lsr	r31
 b86:	87 95       	ror	r24
 b88:	77 95       	ror	r23
 b8a:	67 95       	ror	r22
 b8c:	b7 95       	ror	r27
 b8e:	f1 11       	cpse	r31, r1
 b90:	f8 cf       	rjmp	.-16     	; 0xb82 <__floatsisf+0x1c>
 b92:	fa f4       	brpl	.+62     	; 0xbd2 <__floatsisf+0x6c>
 b94:	bb 0f       	add	r27, r27
 b96:	11 f4       	brne	.+4      	; 0xb9c <__floatsisf+0x36>
 b98:	60 ff       	sbrs	r22, 0
 b9a:	1b c0       	rjmp	.+54     	; 0xbd2 <__floatsisf+0x6c>
 b9c:	6f 5f       	subi	r22, 0xFF	; 255
 b9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ba0:	8f 4f       	sbci	r24, 0xFF	; 255
 ba2:	9f 4f       	sbci	r25, 0xFF	; 255
 ba4:	16 c0       	rjmp	.+44     	; 0xbd2 <__floatsisf+0x6c>
 ba6:	88 23       	and	r24, r24
 ba8:	11 f0       	breq	.+4      	; 0xbae <__floatsisf+0x48>
 baa:	96 e9       	ldi	r25, 0x96	; 150
 bac:	11 c0       	rjmp	.+34     	; 0xbd0 <__floatsisf+0x6a>
 bae:	77 23       	and	r23, r23
 bb0:	21 f0       	breq	.+8      	; 0xbba <__floatsisf+0x54>
 bb2:	9e e8       	ldi	r25, 0x8E	; 142
 bb4:	87 2f       	mov	r24, r23
 bb6:	76 2f       	mov	r23, r22
 bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <__floatsisf+0x5e>
 bba:	66 23       	and	r22, r22
 bbc:	71 f0       	breq	.+28     	; 0xbda <__floatsisf+0x74>
 bbe:	96 e8       	ldi	r25, 0x86	; 134
 bc0:	86 2f       	mov	r24, r22
 bc2:	70 e0       	ldi	r23, 0x00	; 0
 bc4:	60 e0       	ldi	r22, 0x00	; 0
 bc6:	2a f0       	brmi	.+10     	; 0xbd2 <__floatsisf+0x6c>
 bc8:	9a 95       	dec	r25
 bca:	66 0f       	add	r22, r22
 bcc:	77 1f       	adc	r23, r23
 bce:	88 1f       	adc	r24, r24
 bd0:	da f7       	brpl	.-10     	; 0xbc8 <__floatsisf+0x62>
 bd2:	88 0f       	add	r24, r24
 bd4:	96 95       	lsr	r25
 bd6:	87 95       	ror	r24
 bd8:	97 f9       	bld	r25, 7
 bda:	08 95       	ret

00000bdc <__fp_cmp>:
 bdc:	99 0f       	add	r25, r25
 bde:	00 08       	sbc	r0, r0
 be0:	55 0f       	add	r21, r21
 be2:	aa 0b       	sbc	r26, r26
 be4:	e0 e8       	ldi	r30, 0x80	; 128
 be6:	fe ef       	ldi	r31, 0xFE	; 254
 be8:	16 16       	cp	r1, r22
 bea:	17 06       	cpc	r1, r23
 bec:	e8 07       	cpc	r30, r24
 bee:	f9 07       	cpc	r31, r25
 bf0:	c0 f0       	brcs	.+48     	; 0xc22 <__fp_cmp+0x46>
 bf2:	12 16       	cp	r1, r18
 bf4:	13 06       	cpc	r1, r19
 bf6:	e4 07       	cpc	r30, r20
 bf8:	f5 07       	cpc	r31, r21
 bfa:	98 f0       	brcs	.+38     	; 0xc22 <__fp_cmp+0x46>
 bfc:	62 1b       	sub	r22, r18
 bfe:	73 0b       	sbc	r23, r19
 c00:	84 0b       	sbc	r24, r20
 c02:	95 0b       	sbc	r25, r21
 c04:	39 f4       	brne	.+14     	; 0xc14 <__fp_cmp+0x38>
 c06:	0a 26       	eor	r0, r26
 c08:	61 f0       	breq	.+24     	; 0xc22 <__fp_cmp+0x46>
 c0a:	23 2b       	or	r18, r19
 c0c:	24 2b       	or	r18, r20
 c0e:	25 2b       	or	r18, r21
 c10:	21 f4       	brne	.+8      	; 0xc1a <__fp_cmp+0x3e>
 c12:	08 95       	ret
 c14:	0a 26       	eor	r0, r26
 c16:	09 f4       	brne	.+2      	; 0xc1a <__fp_cmp+0x3e>
 c18:	a1 40       	sbci	r26, 0x01	; 1
 c1a:	a6 95       	lsr	r26
 c1c:	8f ef       	ldi	r24, 0xFF	; 255
 c1e:	81 1d       	adc	r24, r1
 c20:	81 1d       	adc	r24, r1
 c22:	08 95       	ret

00000c24 <__fp_inf>:
 c24:	97 f9       	bld	r25, 7
 c26:	9f 67       	ori	r25, 0x7F	; 127
 c28:	80 e8       	ldi	r24, 0x80	; 128
 c2a:	70 e0       	ldi	r23, 0x00	; 0
 c2c:	60 e0       	ldi	r22, 0x00	; 0
 c2e:	08 95       	ret

00000c30 <__fp_nan>:
 c30:	9f ef       	ldi	r25, 0xFF	; 255
 c32:	80 ec       	ldi	r24, 0xC0	; 192
 c34:	08 95       	ret

00000c36 <__fp_pscA>:
 c36:	00 24       	eor	r0, r0
 c38:	0a 94       	dec	r0
 c3a:	16 16       	cp	r1, r22
 c3c:	17 06       	cpc	r1, r23
 c3e:	18 06       	cpc	r1, r24
 c40:	09 06       	cpc	r0, r25
 c42:	08 95       	ret

00000c44 <__fp_pscB>:
 c44:	00 24       	eor	r0, r0
 c46:	0a 94       	dec	r0
 c48:	12 16       	cp	r1, r18
 c4a:	13 06       	cpc	r1, r19
 c4c:	14 06       	cpc	r1, r20
 c4e:	05 06       	cpc	r0, r21
 c50:	08 95       	ret

00000c52 <__fp_round>:
 c52:	09 2e       	mov	r0, r25
 c54:	03 94       	inc	r0
 c56:	00 0c       	add	r0, r0
 c58:	11 f4       	brne	.+4      	; 0xc5e <__fp_round+0xc>
 c5a:	88 23       	and	r24, r24
 c5c:	52 f0       	brmi	.+20     	; 0xc72 <__fp_round+0x20>
 c5e:	bb 0f       	add	r27, r27
 c60:	40 f4       	brcc	.+16     	; 0xc72 <__fp_round+0x20>
 c62:	bf 2b       	or	r27, r31
 c64:	11 f4       	brne	.+4      	; 0xc6a <__fp_round+0x18>
 c66:	60 ff       	sbrs	r22, 0
 c68:	04 c0       	rjmp	.+8      	; 0xc72 <__fp_round+0x20>
 c6a:	6f 5f       	subi	r22, 0xFF	; 255
 c6c:	7f 4f       	sbci	r23, 0xFF	; 255
 c6e:	8f 4f       	sbci	r24, 0xFF	; 255
 c70:	9f 4f       	sbci	r25, 0xFF	; 255
 c72:	08 95       	ret

00000c74 <__fp_split3>:
 c74:	57 fd       	sbrc	r21, 7
 c76:	90 58       	subi	r25, 0x80	; 128
 c78:	44 0f       	add	r20, r20
 c7a:	55 1f       	adc	r21, r21
 c7c:	59 f0       	breq	.+22     	; 0xc94 <__fp_splitA+0x10>
 c7e:	5f 3f       	cpi	r21, 0xFF	; 255
 c80:	71 f0       	breq	.+28     	; 0xc9e <__fp_splitA+0x1a>
 c82:	47 95       	ror	r20

00000c84 <__fp_splitA>:
 c84:	88 0f       	add	r24, r24
 c86:	97 fb       	bst	r25, 7
 c88:	99 1f       	adc	r25, r25
 c8a:	61 f0       	breq	.+24     	; 0xca4 <__fp_splitA+0x20>
 c8c:	9f 3f       	cpi	r25, 0xFF	; 255
 c8e:	79 f0       	breq	.+30     	; 0xcae <__fp_splitA+0x2a>
 c90:	87 95       	ror	r24
 c92:	08 95       	ret
 c94:	12 16       	cp	r1, r18
 c96:	13 06       	cpc	r1, r19
 c98:	14 06       	cpc	r1, r20
 c9a:	55 1f       	adc	r21, r21
 c9c:	f2 cf       	rjmp	.-28     	; 0xc82 <__fp_split3+0xe>
 c9e:	46 95       	lsr	r20
 ca0:	f1 df       	rcall	.-30     	; 0xc84 <__fp_splitA>
 ca2:	08 c0       	rjmp	.+16     	; 0xcb4 <__fp_splitA+0x30>
 ca4:	16 16       	cp	r1, r22
 ca6:	17 06       	cpc	r1, r23
 ca8:	18 06       	cpc	r1, r24
 caa:	99 1f       	adc	r25, r25
 cac:	f1 cf       	rjmp	.-30     	; 0xc90 <__fp_splitA+0xc>
 cae:	86 95       	lsr	r24
 cb0:	71 05       	cpc	r23, r1
 cb2:	61 05       	cpc	r22, r1
 cb4:	08 94       	sec
 cb6:	08 95       	ret

00000cb8 <__fp_zero>:
 cb8:	e8 94       	clt

00000cba <__fp_szero>:
 cba:	bb 27       	eor	r27, r27
 cbc:	66 27       	eor	r22, r22
 cbe:	77 27       	eor	r23, r23
 cc0:	cb 01       	movw	r24, r22
 cc2:	97 f9       	bld	r25, 7
 cc4:	08 95       	ret

00000cc6 <__gesf2>:
 cc6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_cmp>
 cca:	08 f4       	brcc	.+2      	; 0xcce <__gesf2+0x8>
 ccc:	8f ef       	ldi	r24, 0xFF	; 255
 cce:	08 95       	ret

00000cd0 <__mulsf3>:
 cd0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__mulsf3x>
 cd4:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_round>
 cd8:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_pscA>
 cdc:	38 f0       	brcs	.+14     	; 0xcec <__mulsf3+0x1c>
 cde:	0e 94 22 06 	call	0xc44	; 0xc44 <__fp_pscB>
 ce2:	20 f0       	brcs	.+8      	; 0xcec <__mulsf3+0x1c>
 ce4:	95 23       	and	r25, r21
 ce6:	11 f0       	breq	.+4      	; 0xcec <__mulsf3+0x1c>
 ce8:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_inf>
 cec:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_nan>
 cf0:	11 24       	eor	r1, r1
 cf2:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_szero>

00000cf6 <__mulsf3x>:
 cf6:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fp_split3>
 cfa:	70 f3       	brcs	.-36     	; 0xcd8 <__mulsf3+0x8>

00000cfc <__mulsf3_pse>:
 cfc:	95 9f       	mul	r25, r21
 cfe:	c1 f3       	breq	.-16     	; 0xcf0 <__mulsf3+0x20>
 d00:	95 0f       	add	r25, r21
 d02:	50 e0       	ldi	r21, 0x00	; 0
 d04:	55 1f       	adc	r21, r21
 d06:	62 9f       	mul	r22, r18
 d08:	f0 01       	movw	r30, r0
 d0a:	72 9f       	mul	r23, r18
 d0c:	bb 27       	eor	r27, r27
 d0e:	f0 0d       	add	r31, r0
 d10:	b1 1d       	adc	r27, r1
 d12:	63 9f       	mul	r22, r19
 d14:	aa 27       	eor	r26, r26
 d16:	f0 0d       	add	r31, r0
 d18:	b1 1d       	adc	r27, r1
 d1a:	aa 1f       	adc	r26, r26
 d1c:	64 9f       	mul	r22, r20
 d1e:	66 27       	eor	r22, r22
 d20:	b0 0d       	add	r27, r0
 d22:	a1 1d       	adc	r26, r1
 d24:	66 1f       	adc	r22, r22
 d26:	82 9f       	mul	r24, r18
 d28:	22 27       	eor	r18, r18
 d2a:	b0 0d       	add	r27, r0
 d2c:	a1 1d       	adc	r26, r1
 d2e:	62 1f       	adc	r22, r18
 d30:	73 9f       	mul	r23, r19
 d32:	b0 0d       	add	r27, r0
 d34:	a1 1d       	adc	r26, r1
 d36:	62 1f       	adc	r22, r18
 d38:	83 9f       	mul	r24, r19
 d3a:	a0 0d       	add	r26, r0
 d3c:	61 1d       	adc	r22, r1
 d3e:	22 1f       	adc	r18, r18
 d40:	74 9f       	mul	r23, r20
 d42:	33 27       	eor	r19, r19
 d44:	a0 0d       	add	r26, r0
 d46:	61 1d       	adc	r22, r1
 d48:	23 1f       	adc	r18, r19
 d4a:	84 9f       	mul	r24, r20
 d4c:	60 0d       	add	r22, r0
 d4e:	21 1d       	adc	r18, r1
 d50:	82 2f       	mov	r24, r18
 d52:	76 2f       	mov	r23, r22
 d54:	6a 2f       	mov	r22, r26
 d56:	11 24       	eor	r1, r1
 d58:	9f 57       	subi	r25, 0x7F	; 127
 d5a:	50 40       	sbci	r21, 0x00	; 0
 d5c:	9a f0       	brmi	.+38     	; 0xd84 <__mulsf3_pse+0x88>
 d5e:	f1 f0       	breq	.+60     	; 0xd9c <__mulsf3_pse+0xa0>
 d60:	88 23       	and	r24, r24
 d62:	4a f0       	brmi	.+18     	; 0xd76 <__mulsf3_pse+0x7a>
 d64:	ee 0f       	add	r30, r30
 d66:	ff 1f       	adc	r31, r31
 d68:	bb 1f       	adc	r27, r27
 d6a:	66 1f       	adc	r22, r22
 d6c:	77 1f       	adc	r23, r23
 d6e:	88 1f       	adc	r24, r24
 d70:	91 50       	subi	r25, 0x01	; 1
 d72:	50 40       	sbci	r21, 0x00	; 0
 d74:	a9 f7       	brne	.-22     	; 0xd60 <__mulsf3_pse+0x64>
 d76:	9e 3f       	cpi	r25, 0xFE	; 254
 d78:	51 05       	cpc	r21, r1
 d7a:	80 f0       	brcs	.+32     	; 0xd9c <__mulsf3_pse+0xa0>
 d7c:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_inf>
 d80:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_szero>
 d84:	5f 3f       	cpi	r21, 0xFF	; 255
 d86:	e4 f3       	brlt	.-8      	; 0xd80 <__mulsf3_pse+0x84>
 d88:	98 3e       	cpi	r25, 0xE8	; 232
 d8a:	d4 f3       	brlt	.-12     	; 0xd80 <__mulsf3_pse+0x84>
 d8c:	86 95       	lsr	r24
 d8e:	77 95       	ror	r23
 d90:	67 95       	ror	r22
 d92:	b7 95       	ror	r27
 d94:	f7 95       	ror	r31
 d96:	e7 95       	ror	r30
 d98:	9f 5f       	subi	r25, 0xFF	; 255
 d9a:	c1 f7       	brne	.-16     	; 0xd8c <__mulsf3_pse+0x90>
 d9c:	fe 2b       	or	r31, r30
 d9e:	88 0f       	add	r24, r24
 da0:	91 1d       	adc	r25, r1
 da2:	96 95       	lsr	r25
 da4:	87 95       	ror	r24
 da6:	97 f9       	bld	r25, 7
 da8:	08 95       	ret

00000daa <__utoa_ncheck>:
 daa:	bb 27       	eor	r27, r27

00000dac <__utoa_common>:
 dac:	fb 01       	movw	r30, r22
 dae:	55 27       	eor	r21, r21
 db0:	aa 27       	eor	r26, r26
 db2:	88 0f       	add	r24, r24
 db4:	99 1f       	adc	r25, r25
 db6:	aa 1f       	adc	r26, r26
 db8:	a4 17       	cp	r26, r20
 dba:	10 f0       	brcs	.+4      	; 0xdc0 <__utoa_common+0x14>
 dbc:	a4 1b       	sub	r26, r20
 dbe:	83 95       	inc	r24
 dc0:	50 51       	subi	r21, 0x10	; 16
 dc2:	b9 f7       	brne	.-18     	; 0xdb2 <__utoa_common+0x6>
 dc4:	a0 5d       	subi	r26, 0xD0	; 208
 dc6:	aa 33       	cpi	r26, 0x3A	; 58
 dc8:	08 f0       	brcs	.+2      	; 0xdcc <__utoa_common+0x20>
 dca:	a9 5d       	subi	r26, 0xD9	; 217
 dcc:	a1 93       	st	Z+, r26
 dce:	00 97       	sbiw	r24, 0x00	; 0
 dd0:	79 f7       	brne	.-34     	; 0xdb0 <__utoa_common+0x4>
 dd2:	b1 11       	cpse	r27, r1
 dd4:	b1 93       	st	Z+, r27
 dd6:	11 92       	st	Z+, r1
 dd8:	cb 01       	movw	r24, r22
 dda:	0c 94 ef 06 	jmp	0xdde	; 0xdde <strrev>

00000dde <strrev>:
 dde:	dc 01       	movw	r26, r24
 de0:	fc 01       	movw	r30, r24
 de2:	67 2f       	mov	r22, r23
 de4:	71 91       	ld	r23, Z+
 de6:	77 23       	and	r23, r23
 de8:	e1 f7       	brne	.-8      	; 0xde2 <strrev+0x4>
 dea:	32 97       	sbiw	r30, 0x02	; 2
 dec:	04 c0       	rjmp	.+8      	; 0xdf6 <strrev+0x18>
 dee:	7c 91       	ld	r23, X
 df0:	6d 93       	st	X+, r22
 df2:	70 83       	st	Z, r23
 df4:	62 91       	ld	r22, -Z
 df6:	ae 17       	cp	r26, r30
 df8:	bf 07       	cpc	r27, r31
 dfa:	c8 f3       	brcs	.-14     	; 0xdee <strrev+0x10>
 dfc:	08 95       	ret

00000dfe <_exit>:
 dfe:	f8 94       	cli

00000e00 <__stop_program>:
 e00:	ff cf       	rjmp	.-2      	; 0xe00 <__stop_program>
